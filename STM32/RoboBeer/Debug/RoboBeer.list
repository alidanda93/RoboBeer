
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c78  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005ed8  08005ed8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ed8  08005ed8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  20000010  08005ef0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  08005ef0  00021bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183ac  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003953  00000000  00000000  000383e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  0003bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  0003d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c388  00000000  00000000  0003ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1df  00000000  00000000  0005ae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9645  00000000  00000000  00075fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f634  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000619c  00000000  00000000  0011f684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08005e50 	.word	0x08005e50

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08005e50 	.word	0x08005e50

08000230 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fef7 	bl	8001060 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 fa1d 	bl	80006b6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800027c:	2304      	movs	r3, #4
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f000 ffd1 	bl	8001234 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 fa0d 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	40012400 	.word	0x40012400

080002ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <HAL_ADC_MspInit+0x6c>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d121      	bne.n	8000310 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <HAL_ADC_MspInit+0x70>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <HAL_ADC_MspInit+0x70>)
 80002d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_ADC_MspInit+0x70>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <HAL_ADC_MspInit+0x70>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_ADC_MspInit+0x70>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <HAL_ADC_MspInit+0x70>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin;
 80002fc:	2330      	movs	r3, #48	; 0x30
 80002fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000300:	2303      	movs	r3, #3
 8000302:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <HAL_ADC_MspInit+0x74>)
 800030c:	f001 f9b0 	bl	8001670 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40012400 	.word	0x40012400
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800

08000324 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <MX_FREERTOS_Init+0x18>)
 800032a:	2100      	movs	r1, #0
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <MX_FREERTOS_Init+0x1c>)
 800032e:	f003 f8e7 	bl	8003500 <osThreadNew>
 8000332:	4603      	mov	r3, r0
 8000334:	4a03      	ldr	r2, [pc, #12]	; (8000344 <MX_FREERTOS_Init+0x20>)
 8000336:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	08005e9c 	.word	0x08005e9c
 8000340:	08000349 	.word	0x08000349
 8000344:	2000005c 	.word	0x2000005c

08000348 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f003 f97f 	bl	8003654 <osDelay>
 8000356:	e7fb      	b.n	8000350 <StartDefaultTask+0x8>

08000358 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <MX_GPIO_Init+0xa4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <MX_GPIO_Init+0xa4>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <MX_GPIO_Init+0xa4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_GPIO_Init+0xa4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <MX_GPIO_Init+0xa4>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_GPIO_Init+0xa4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_GPIO_Init+0xa4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a16      	ldr	r2, [pc, #88]	; (80003fc <MX_GPIO_Init+0xa4>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_GPIO_Init+0xa4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2120      	movs	r1, #32
 80003b8:	4811      	ldr	r0, [pc, #68]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003ba:	f001 faed 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 80003be:	2310      	movs	r3, #16
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_GPIO_Init+0xac>)
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003d2:	f001 f94d 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
 80003d6:	2320      	movs	r3, #32
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003ee:	f001 f93f 	bl	8001670 <HAL_GPIO_Init>

}
 80003f2:	bf00      	nop
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010c00 	.word	0x40010c00
 8000404:	10110000 	.word	0x10110000

08000408 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_I2C1_Init+0x50>)
 800040e:	4a13      	ldr	r2, [pc, #76]	; (800045c <MX_I2C1_Init+0x54>)
 8000410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_I2C1_Init+0x50>)
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <MX_I2C1_Init+0x58>)
 8000416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_I2C1_Init+0x50>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_I2C1_Init+0x50>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_I2C1_Init+0x50>)
 8000426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800042a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <MX_I2C1_Init+0x50>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_I2C1_Init+0x50>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <MX_I2C1_Init+0x50>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_I2C1_Init+0x50>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <MX_I2C1_Init+0x50>)
 8000446:	f001 fabf 	bl	80019c8 <HAL_I2C_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000450:	f000 f931 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000060 	.word	0x20000060
 800045c:	40005400 	.word	0x40005400
 8000460:	000186a0 	.word	0x000186a0

08000464 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_I2C2_Init+0x50>)
 800046a:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <MX_I2C2_Init+0x54>)
 800046c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_I2C2_Init+0x50>)
 8000470:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MX_I2C2_Init+0x58>)
 8000472:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_I2C2_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_I2C2_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_I2C2_Init+0x50>)
 8000482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000486:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <MX_I2C2_Init+0x50>)
 800048a:	2200      	movs	r2, #0
 800048c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_I2C2_Init+0x50>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <MX_I2C2_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_I2C2_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_I2C2_Init+0x50>)
 80004a2:	f001 fa91 	bl	80019c8 <HAL_I2C_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004ac:	f000 f903 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000b4 	.word	0x200000b4
 80004b8:	40005800 	.word	0x40005800
 80004bc:	000186a0 	.word	0x000186a0

080004c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a32      	ldr	r2, [pc, #200]	; (80005a4 <HAL_I2C_MspInit+0xe4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d133      	bne.n	8000548 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	61bb      	str	r3, [r7, #24]
 80004f6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 80004f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004fe:	2312      	movs	r3, #18
 8000500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 031c 	add.w	r3, r7, #28
 800050a:	4619      	mov	r1, r3
 800050c:	4827      	ldr	r0, [pc, #156]	; (80005ac <HAL_I2C_MspInit+0xec>)
 800050e:	f001 f8af 	bl	8001670 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <HAL_I2C_MspInit+0xf0>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000528:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <HAL_I2C_MspInit+0xf0>)
 800052a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000546:	e029      	b.n	800059c <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <HAL_I2C_MspInit+0xf4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d124      	bne.n	800059c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f003 0308 	and.w	r3, r3, #8
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 800056a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800056e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000570:	2312      	movs	r3, #18
 8000572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	4619      	mov	r1, r3
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <HAL_I2C_MspInit+0xec>)
 8000580:	f001 f876 	bl	8001670 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 800058a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058e:	61d3      	str	r3, [r2, #28]
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_I2C_MspInit+0xe8>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	bf00      	nop
 800059e:	3730      	adds	r7, #48	; 0x30
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40005400 	.word	0x40005400
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	40010000 	.word	0x40010000
 80005b4:	40005800 	.word	0x40005800

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fcee 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f81b 	bl	80005fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f7ff fec8 	bl	8000358 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c8:	f7ff ff1e 	bl	8000408 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005cc:	f7ff ff4a 	bl	8000464 <MX_I2C2_Init>
  MX_TIM3_Init();
 80005d0:	f000 f9ee 	bl	80009b0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 fbd4 	bl	8000d80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 fbfc 	bl	8000dd4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005dc:	f000 f8d0 	bl	8000780 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005e0:	f000 f992 	bl	8000908 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005e4:	f000 fa5a 	bl	8000a9c <MX_TIM5_Init>
  MX_ADC1_Init();
 80005e8:	f7ff fe22 	bl	8000230 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005ec:	f002 ff22 	bl	8003434 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005f0:	f7ff fe98 	bl	8000324 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005f4:	f002 ff50 	bl	8003498 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x40>

080005fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b096      	sub	sp, #88	; 0x58
 80005fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000604:	2228      	movs	r2, #40	; 0x28
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f005 fc19 	bl	8005e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800064c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000650:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fafa 	bl	8001c50 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000662:	f000 f828 	bl	80006b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fd66 	bl	8002154 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068e:	f000 f812 	bl	80006b6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000692:	2302      	movs	r3, #2
 8000694:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800069a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fef2 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006aa:	f000 f804 	bl	80006b6 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3758      	adds	r7, #88	; 0x58
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ba:	b672      	cpsid	i
}
 80006bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006be:	e7fe      	b.n	80006be <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_MspInit+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_MspInit+0x68>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_MspInit+0x68>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_MspInit+0x68>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a11      	ldr	r2, [pc, #68]	; (8000728 <HAL_MspInit+0x68>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x68>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	210f      	movs	r1, #15
 80006fa:	f06f 0001 	mvn.w	r0, #1
 80006fe:	f000 ff8e 	bl	800161e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_MspInit+0x6c>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_MspInit+0x6c>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40010000 	.word	0x40010000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075e:	f000 fc63 	bl	8001028 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000762:	f004 fb83 	bl	8004e6c <xTaskGetSchedulerState>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d001      	beq.n	8000770 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800076c:	f005 f8dc 	bl	8005928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fb41 	bl	8005e40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <MX_TIM1_Init+0x180>)
 80007c0:	4a50      	ldr	r2, [pc, #320]	; (8000904 <MX_TIM1_Init+0x184>)
 80007c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007c4:	4b4e      	ldr	r3, [pc, #312]	; (8000900 <MX_TIM1_Init+0x180>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <MX_TIM1_Init+0x180>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d0:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <MX_TIM1_Init+0x180>)
 80007d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b49      	ldr	r3, [pc, #292]	; (8000900 <MX_TIM1_Init+0x180>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007de:	4b48      	ldr	r3, [pc, #288]	; (8000900 <MX_TIM1_Init+0x180>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e4:	4b46      	ldr	r3, [pc, #280]	; (8000900 <MX_TIM1_Init+0x180>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ea:	4845      	ldr	r0, [pc, #276]	; (8000900 <MX_TIM1_Init+0x180>)
 80007ec:	f001 ff02 	bl	80025f4 <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007f6:	f7ff ff5e 	bl	80006b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000800:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000804:	4619      	mov	r1, r3
 8000806:	483e      	ldr	r0, [pc, #248]	; (8000900 <MX_TIM1_Init+0x180>)
 8000808:	f002 f8fc 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000812:	f7ff ff50 	bl	80006b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000816:	483a      	ldr	r0, [pc, #232]	; (8000900 <MX_TIM1_Init+0x180>)
 8000818:	f001 ff3b 	bl	8002692 <HAL_TIM_PWM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000822:	f7ff ff48 	bl	80006b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000832:	4619      	mov	r1, r3
 8000834:	4832      	ldr	r0, [pc, #200]	; (8000900 <MX_TIM1_Init+0x180>)
 8000836:	f002 fc65 	bl	8003104 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000840:	f7ff ff39 	bl	80006b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <MX_TIM1_Init+0x180>)
 800086a:	f002 f80d 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000874:	f7ff ff1f 	bl	80006b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	2204      	movs	r2, #4
 800087e:	4619      	mov	r1, r3
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <MX_TIM1_Init+0x180>)
 8000882:	f002 f801 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800088c:	f7ff ff13 	bl	80006b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	2208      	movs	r2, #8
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <MX_TIM1_Init+0x180>)
 800089a:	f001 fff5 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008a4:	f7ff ff07 	bl	80006b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	220c      	movs	r2, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_TIM1_Init+0x180>)
 80008b2:	f001 ffe9 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008bc:	f7ff fefb 	bl	80006b6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <MX_TIM1_Init+0x180>)
 80008e4:	f002 fc7a 	bl	80031dc <HAL_TIMEx_ConfigBreakDeadTime>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80008ee:	f7ff fee2 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <MX_TIM1_Init+0x180>)
 80008f4:	f000 f9f0 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 80008f8:	bf00      	nop
 80008fa:	3758      	adds	r7, #88	; 0x58
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000108 	.word	0x20000108
 8000904:	40012c00 	.word	0x40012c00

08000908 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2224      	movs	r2, #36	; 0x24
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fa92 	bl	8005e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_TIM2_Init+0xa4>)
 8000926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_TIM2_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_TIM2_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_TIM2_Init+0xa4>)
 800093a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM2_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_TIM2_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800094c:	2301      	movs	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_TIM2_Init+0xa4>)
 8000978:	f001 fee3 	bl	8002742 <HAL_TIM_Encoder_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000982:	f7ff fe98 	bl	80006b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM2_Init+0xa4>)
 8000994:	f002 fbb6 	bl	8003104 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800099e:	f7ff fe8a 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000150 	.word	0x20000150

080009b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_TIM3_Init+0xe4>)
 80009e2:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <MX_TIM3_Init+0xe8>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_TIM3_Init+0xe4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_TIM3_Init+0xe4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_TIM3_Init+0xe4>)
 80009f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_TIM3_Init+0xe4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a08:	f001 fdf4 	bl	80025f4 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a12:	f7ff fe50 	bl	80006b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a24:	f001 ffee 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a2e:	f7ff fe42 	bl	80006b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a34:	f001 fe2d 	bl	8002692 <HAL_TIM_PWM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a3e:	f7ff fe3a 	bl	80006b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a52:	f002 fb57 	bl	8003104 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a5c:	f7ff fe2b 	bl	80006b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a60:	2360      	movs	r3, #96	; 0x60
 8000a62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a78:	f001 ff06 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a82:	f7ff fe18 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <MX_TIM3_Init+0xe4>)
 8000a88:	f000 f926 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3738      	adds	r7, #56	; 0x38
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000198 	.word	0x20000198
 8000a98:	40000400 	.word	0x40000400

08000a9c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2224      	movs	r2, #36	; 0x24
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f005 f9c8 	bl	8005e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000af6:	2301      	movs	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000b0a:	f001 fe1a 	bl	8002742 <HAL_TIM_Encoder_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f7ff fdcf 	bl	80006b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM5_Init+0xa0>)
 8000b26:	f002 faed 	bl	8003104 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b30:	f7ff fdc1 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001e0 	.word	0x200001e0
 8000b40:	40000c00 	.word	0x40000c00

08000b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_TIM_Base_MspInit+0x58>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10c      	bne.n	8000b70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b6e:	e010      	b.n	8000b92 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <HAL_TIM_Base_MspInit+0x60>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d10b      	bne.n	8000b92 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_TIM_Base_MspInit+0x5c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40012c00 	.word	0x40012c00
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40000400 	.word	0x40000400

08000ba8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc6:	d14f      	bne.n	8000c68 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8000c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c26:	f000 fd23 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4823      	ldr	r0, [pc, #140]	; (8000ccc <HAL_TIM_Encoder_MspInit+0x124>)
 8000c3e:	f000 fd17 	bl	8001670 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_TIM_Encoder_MspInit+0x128>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <HAL_TIM_Encoder_MspInit+0x128>)
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000c66:	e028      	b.n	8000cba <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d123      	bne.n	8000cba <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <HAL_TIM_Encoder_MspInit+0x120>)
 8000cb6:	f000 fcdb 	bl	8001670 <HAL_GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40000c00 	.word	0x40000c00

08000cd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_TIM_MspPostInit+0x98>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d119      	bne.n	8000d2c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_TIM_MspPostInit+0x9c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_TIM_MspPostInit+0x9c>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_TIM_MspPostInit+0x9c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8000d10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <HAL_TIM_MspPostInit+0xa0>)
 8000d26:	f000 fca3 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d2a:	e01c      	b.n	8000d66 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <HAL_TIM_MspPostInit+0xa4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d117      	bne.n	8000d66 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_TIM_MspPostInit+0x9c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_TIM_MspPostInit+0x9c>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_TIM_MspPostInit+0x9c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_TIM_MspPostInit+0xa0>)
 8000d62:	f000 fc85 	bl	8001670 <HAL_GPIO_Init>
}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40012c00 	.word	0x40012c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40000400 	.word	0x40000400

08000d80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART1_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART1_UART_Init+0x4c>)
 8000db8:	f002 fa61 	bl	800327e <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f7ff fc78 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000228 	.word	0x20000228
 8000dd0:	40013800 	.word	0x40013800

08000dd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <MX_USART2_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	f002 fa37 	bl	800327e <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e16:	f7ff fc4e 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000026c 	.word	0x2000026c
 8000e24:	40004400 	.word	0x40004400

08000e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d13e      	bne.n	8000ec6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e48:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b39      	ldr	r3, [pc, #228]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a35      	ldr	r2, [pc, #212]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482d      	ldr	r0, [pc, #180]	; (8000f40 <HAL_UART_MspInit+0x118>)
 8000e8c:	f000 fbf0 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4827      	ldr	r0, [pc, #156]	; (8000f40 <HAL_UART_MspInit+0x118>)
 8000ea4:	f000 fbe4 	bl	8001670 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_UART_MspInit+0x11c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <HAL_UART_MspInit+0x11c>)
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ec4:	e034      	b.n	8000f30 <HAL_UART_MspInit+0x108>
  else if(uartHandle->Instance==USART2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_UART_MspInit+0x120>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d12f      	bne.n	8000f30 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eda:	61d3      	str	r3, [r2, #28]
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f00:	2304      	movs	r3, #4
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <HAL_UART_MspInit+0x124>)
 8000f14:	f000 fbac 	bl	8001670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_UART_MspInit+0x124>)
 8000f2c:	f000 fba0 	bl	8001670 <HAL_GPIO_Init>
}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	; 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40010800 	.word	0x40010800

08000f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f76:	f7ff fbfd 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 ff2f 	bl	8005ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7e:	f7ff fb1b 	bl	80005b8 <main>
  bx lr
 8000f82:	4770      	bx	lr
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f8c:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 8000f90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f94:	20001bfc 	.word	0x20001bfc

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_Init+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_Init+0x28>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 fb2b 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fb82 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fb35 	bl	8001656 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 fb0b 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x1c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x20>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <HAL_IncTick+0x20>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	20000008 	.word	0x20000008
 8001048:	200002b0 	.word	0x200002b0

0800104c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	200002b0 	.word	0x200002b0

08001060 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ce      	b.n	8001220 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	2b00      	cmp	r3, #0
 800108e:	d109      	bne.n	80010a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f904 	bl	80002ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f9bd 	bl	8001424 <ADC_ConversionStop_Disable>
 80010aa:	4603      	mov	r3, r0
 80010ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 80a9 	bne.w	800120e <HAL_ADC_Init+0x1ae>
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80a5 	bne.w	800120e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010cc:	f023 0302 	bic.w	r3, r3, #2
 80010d0:	f043 0202 	orr.w	r2, r3, #2
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4951      	ldr	r1, [pc, #324]	; (8001228 <HAL_ADC_Init+0x1c8>)
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d10a      	bne.n	80010fc <HAL_ADC_Init+0x9c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80010ee:	d002      	beq.n	80010f6 <HAL_ADC_Init+0x96>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	e004      	b.n	8001100 <HAL_ADC_Init+0xa0>
 80010f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010fa:	e001      	b.n	8001100 <HAL_ADC_Init+0xa0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001100:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7b1b      	ldrb	r3, [r3, #12]
 8001106:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001108:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4313      	orrs	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001118:	d003      	beq.n	8001122 <HAL_ADC_Init+0xc2>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d102      	bne.n	8001128 <HAL_ADC_Init+0xc8>
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	e000      	b.n	800112a <HAL_ADC_Init+0xca>
 8001128:	2300      	movs	r3, #0
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7d1b      	ldrb	r3, [r3, #20]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d119      	bne.n	800116c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7b1b      	ldrb	r3, [r3, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	3b01      	subs	r3, #1
 8001146:	035a      	lsls	r2, r3, #13
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	e00b      	b.n	800116c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f043 0220 	orr.w	r2, r3, #32
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_ADC_Init+0x1cc>)
 8001188:	4013      	ands	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	430b      	orrs	r3, r1
 8001192:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800119c:	d003      	beq.n	80011a6 <HAL_ADC_Init+0x146>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d104      	bne.n	80011b0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	051b      	lsls	r3, r3, #20
 80011ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_ADC_Init+0x1d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d10b      	bne.n	80011ec <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	f043 0201 	orr.w	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ea:	e018      	b.n	800121e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	f023 0312 	bic.w	r3, r3, #18
 80011f4:	f043 0210 	orr.w	r2, r3, #16
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120c:	e007      	b.n	800121e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40013c00 	.word	0x40013c00
 800122c:	ffe1f7fd 	.word	0xffe1f7fd
 8001230:	ff1f0efe 	.word	0xff1f0efe

08001234 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x20>
 8001250:	2302      	movs	r3, #2
 8001252:	e0dc      	b.n	800140e <HAL_ADC_ConfigChannel+0x1da>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b06      	cmp	r3, #6
 8001262:	d81c      	bhi.n	800129e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	3b05      	subs	r3, #5
 8001276:	221f      	movs	r2, #31
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	4019      	ands	r1, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b05      	subs	r3, #5
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
 800129c:	e03c      	b.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d81c      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b23      	subs	r3, #35	; 0x23
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4019      	ands	r1, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b23      	subs	r3, #35	; 0x23
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
 80012de:	e01b      	b.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	; 0x41
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b41      	subs	r3, #65	; 0x41
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d91c      	bls.n	800135a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3b1e      	subs	r3, #30
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3b1e      	subs	r3, #30
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	e019      	b.n	800138e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6919      	ldr	r1, [r3, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	2207      	movs	r2, #7
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	4019      	ands	r1, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139a:	2b11      	cmp	r3, #17
 800139c:	d132      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_ADC_ConfigChannel+0x1e4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d125      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d126      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d11a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_ADC_ConfigChannel+0x1e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_ADC_ConfigChannel+0x1ec>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x1b2>
 80013f2:	e007      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40012400 	.word	0x40012400
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83

08001424 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b01      	cmp	r3, #1
 800143c:	d12e      	bne.n	800149c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800144e:	f7ff fdfd 	bl	800104c <HAL_GetTick>
 8001452:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001454:	e01b      	b.n	800148e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001456:	f7ff fdf9 	bl	800104c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d914      	bls.n	800148e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10d      	bne.n	800148e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	f043 0210 	orr.w	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e007      	b.n	800149e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	d0dc      	beq.n	8001456 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff90 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff49 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff5e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff90 	bl	8001560 <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5f 	bl	800150c <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffb0 	bl	80015c4 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e179      	b.n	8001978 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001684:	2201      	movs	r2, #1
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8168 	bne.w	8001972 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a96      	ldr	r2, [pc, #600]	; (8001900 <HAL_GPIO_Init+0x290>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d05e      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016ac:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_GPIO_Init+0x290>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d875      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016b2:	4a94      	ldr	r2, [pc, #592]	; (8001904 <HAL_GPIO_Init+0x294>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d058      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016b8:	4a92      	ldr	r2, [pc, #584]	; (8001904 <HAL_GPIO_Init+0x294>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d86f      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016be:	4a92      	ldr	r2, [pc, #584]	; (8001908 <HAL_GPIO_Init+0x298>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d052      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016c4:	4a90      	ldr	r2, [pc, #576]	; (8001908 <HAL_GPIO_Init+0x298>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d869      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ca:	4a90      	ldr	r2, [pc, #576]	; (800190c <HAL_GPIO_Init+0x29c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d04c      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016d0:	4a8e      	ldr	r2, [pc, #568]	; (800190c <HAL_GPIO_Init+0x29c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d863      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016d6:	4a8e      	ldr	r2, [pc, #568]	; (8001910 <HAL_GPIO_Init+0x2a0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d046      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016dc:	4a8c      	ldr	r2, [pc, #560]	; (8001910 <HAL_GPIO_Init+0x2a0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d85d      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d82a      	bhi.n	800173c <HAL_GPIO_Init+0xcc>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d859      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <HAL_GPIO_Init+0x80>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	08001745 	.word	0x08001745
 80016f8:	08001757 	.word	0x08001757
 80016fc:	08001799 	.word	0x08001799
 8001700:	0800179f 	.word	0x0800179f
 8001704:	0800179f 	.word	0x0800179f
 8001708:	0800179f 	.word	0x0800179f
 800170c:	0800179f 	.word	0x0800179f
 8001710:	0800179f 	.word	0x0800179f
 8001714:	0800179f 	.word	0x0800179f
 8001718:	0800179f 	.word	0x0800179f
 800171c:	0800179f 	.word	0x0800179f
 8001720:	0800179f 	.word	0x0800179f
 8001724:	0800179f 	.word	0x0800179f
 8001728:	0800179f 	.word	0x0800179f
 800172c:	0800179f 	.word	0x0800179f
 8001730:	0800179f 	.word	0x0800179f
 8001734:	0800174d 	.word	0x0800174d
 8001738:	08001761 	.word	0x08001761
 800173c:	4a75      	ldr	r2, [pc, #468]	; (8001914 <HAL_GPIO_Init+0x2a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001742:	e02c      	b.n	800179e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	623b      	str	r3, [r7, #32]
          break;
 800174a:	e029      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	3304      	adds	r3, #4
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e024      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	3308      	adds	r3, #8
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e01f      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	330c      	adds	r3, #12
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e01a      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001772:	2304      	movs	r3, #4
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e013      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	611a      	str	r2, [r3, #16]
          break;
 800178a:	e009      	b.n	80017a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	615a      	str	r2, [r3, #20]
          break;
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          break;
 800179e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d801      	bhi.n	80017aa <HAL_GPIO_Init+0x13a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_Init+0x13e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d802      	bhi.n	80017bc <HAL_GPIO_Init+0x14c>
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x152>
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	3b08      	subs	r3, #8
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	210f      	movs	r1, #15
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	6a39      	ldr	r1, [r7, #32]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80c1 	beq.w	8001972 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f0:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_GPIO_Init+0x2a8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a48      	ldr	r2, [pc, #288]	; (8001918 <HAL_GPIO_Init+0x2a8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b46      	ldr	r3, [pc, #280]	; (8001918 <HAL_GPIO_Init+0x2a8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_GPIO_Init+0x2ac>)
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d01f      	beq.n	8001874 <HAL_GPIO_Init+0x204>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <HAL_GPIO_Init+0x2b4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d019      	beq.n	8001870 <HAL_GPIO_Init+0x200>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3a      	ldr	r2, [pc, #232]	; (8001928 <HAL_GPIO_Init+0x2b8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_Init+0x1fc>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <HAL_GPIO_Init+0x2bc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_Init+0x1f8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a38      	ldr	r2, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x2c0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x1f4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a37      	ldr	r2, [pc, #220]	; (8001934 <HAL_GPIO_Init+0x2c4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_Init+0x1f0>
 800185c:	2305      	movs	r3, #5
 800185e:	e00a      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001860:	2306      	movs	r3, #6
 8001862:	e008      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001864:	2304      	movs	r3, #4
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001868:	2303      	movs	r3, #3
 800186a:	e004      	b.n	8001876 <HAL_GPIO_Init+0x206>
 800186c:	2302      	movs	r3, #2
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001874:	2300      	movs	r3, #0
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001886:	4925      	ldr	r1, [pc, #148]	; (800191c <HAL_GPIO_Init+0x2ac>)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4924      	ldr	r1, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4920      	ldr	r1, [pc, #128]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	491a      	ldr	r1, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4916      	ldr	r1, [pc, #88]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d025      	beq.n	800193c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4910      	ldr	r1, [pc, #64]	; (8001938 <HAL_GPIO_Init+0x2c8>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
 80018fc:	e025      	b.n	800194a <HAL_GPIO_Init+0x2da>
 80018fe:	bf00      	nop
 8001900:	10320000 	.word	0x10320000
 8001904:	10310000 	.word	0x10310000
 8001908:	10220000 	.word	0x10220000
 800190c:	10210000 	.word	0x10210000
 8001910:	10120000 	.word	0x10120000
 8001914:	10110000 	.word	0x10110000
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	40010800 	.word	0x40010800
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40011000 	.word	0x40011000
 800192c:	40011400 	.word	0x40011400
 8001930:	40011800 	.word	0x40011800
 8001934:	40011c00 	.word	0x40011c00
 8001938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_GPIO_Init+0x324>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	43db      	mvns	r3, r3
 8001944:	4913      	ldr	r1, [pc, #76]	; (8001994 <HAL_GPIO_Init+0x324>)
 8001946:	4013      	ands	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_GPIO_Init+0x324>)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	60cb      	str	r3, [r1, #12]
 8001962:	e006      	b.n	8001972 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_GPIO_Init+0x324>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	43db      	mvns	r3, r3
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <HAL_GPIO_Init+0x324>)
 800196e:	4013      	ands	r3, r2
 8001970:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f ae7e 	bne.w	8001684 <HAL_GPIO_Init+0x14>
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	372c      	adds	r7, #44	; 0x2c
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e12b      	b.n	8001c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fd66 	bl	80004c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	; 0x24
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f000 fce6 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8001a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a81      	ldr	r2, [pc, #516]	; (8001c3c <HAL_I2C_Init+0x274>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d807      	bhi.n	8001a4c <HAL_I2C_Init+0x84>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a80      	ldr	r2, [pc, #512]	; (8001c40 <HAL_I2C_Init+0x278>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e006      	b.n	8001a5a <HAL_I2C_Init+0x92>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a7d      	ldr	r2, [pc, #500]	; (8001c44 <HAL_I2C_Init+0x27c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0e7      	b.n	8001c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4a78      	ldr	r2, [pc, #480]	; (8001c48 <HAL_I2C_Init+0x280>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_I2C_Init+0x274>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d802      	bhi.n	8001a9c <HAL_I2C_Init+0xd4>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	e009      	b.n	8001ab0 <HAL_I2C_Init+0xe8>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a69      	ldr	r2, [pc, #420]	; (8001c4c <HAL_I2C_Init+0x284>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	3301      	adds	r3, #1
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	495c      	ldr	r1, [pc, #368]	; (8001c3c <HAL_I2C_Init+0x274>)
 8001acc:	428b      	cmp	r3, r1
 8001ace:	d819      	bhi.n	8001b04 <HAL_I2C_Init+0x13c>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e59      	subs	r1, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_I2C_Init+0x138>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1e59      	subs	r1, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	e051      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e04f      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <HAL_I2C_Init+0x168>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e58      	subs	r0, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	440b      	add	r3, r1
 8001b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e012      	b.n	8001b56 <HAL_I2C_Init+0x18e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e58      	subs	r0, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	0099      	lsls	r1, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Init+0x196>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e022      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <HAL_I2C_Init+0x1bc>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e58      	subs	r0, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b82:	e00f      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	6809      	ldr	r1, [r1, #0]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6911      	ldr	r1, [r2, #16]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	000186a0 	.word	0x000186a0
 8001c40:	001e847f 	.word	0x001e847f
 8001c44:	003d08ff 	.word	0x003d08ff
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	10624dd3 	.word	0x10624dd3

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e272      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b92      	ldr	r3, [pc, #584]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c7c:	4b8f      	ldr	r3, [pc, #572]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d112      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
 8001c88:	4b8c      	ldr	r3, [pc, #560]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x12c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d168      	bne.n	8001d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e24c      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x76>
 8001cb8:	4b80      	ldr	r3, [pc, #512]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a7f      	ldr	r2, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e02e      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7a      	ldr	r2, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a77      	ldr	r2, [pc, #476]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0xbc>
 8001cf2:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a71      	ldr	r2, [pc, #452]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a67      	ldr	r2, [pc, #412]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f98e 	bl	800104c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff f98a 	bl	800104c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e200      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe4>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f97a 	bl	800104c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f976 	bl	800104c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1ec      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x10c>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
 8001da2:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1c0      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4939      	ldr	r1, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f92f 	bl	800104c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff f92b 	bl	800104c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1a1      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4927      	ldr	r1, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f90e 	bl	800104c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff f90a 	bl	800104c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e180      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d03a      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d019      	beq.n	8001e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f8ee 	bl	800104c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff f8ea 	bl	800104c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e160      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 fada 	bl	800244c <RCC_Delay>
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f8d4 	bl	800104c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f8d0 	bl	800104c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e146      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	42420000 	.word	0x42420000
 8001ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e9      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a6 	beq.w	800202e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a87      	ldr	r2, [pc, #540]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x4c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x4c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x4c8>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f891 	bl	800104c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff f88d 	bl	800104c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e103      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_RCC_OscConfig+0x4c8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x312>
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e02d      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x334>
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	e01c      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x356>
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a60      	ldr	r2, [pc, #384]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d015      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f841 	bl	800104c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff f83d 	bl	800104c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0b1      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCC_OscConfig+0x37e>
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f82b 	bl	800104c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff f827 	bl	800104c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e09b      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8087 	beq.w	8002146 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d061      	beq.n	8002108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d146      	bne.n	80020da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_RCC_OscConfig+0x4cc>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fffb 	bl	800104c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fff7 	bl	800104c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e06d      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4921      	ldr	r1, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a19      	ldr	r1, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	430b      	orrs	r3, r1
 80020a6:	491b      	ldr	r1, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe ffcb 	bl	800104c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe ffc7 	bl	800104c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e03d      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x46a>
 80020d8:	e035      	b.n	8002146 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_RCC_OscConfig+0x4cc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffb4 	bl	800104c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ffb0 	bl	800104c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e026      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x498>
 8002106:	e01e      	b.n	8002146 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e019      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x500>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0d0      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d910      	bls.n	8002198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	4965      	ldr	r1, [pc, #404]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0b8      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	494d      	ldr	r1, [pc, #308]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d040      	beq.n	8002274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d115      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e07f      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e073      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06b      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4936      	ldr	r1, [pc, #216]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7fe ff02 	bl	800104c <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7fe fefe 	bl	800104c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e053      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 020c 	and.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1eb      	bne.n	800224c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d210      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0207 	bic.w	r2, r3, #7
 800228a:	4922      	ldr	r1, [pc, #136]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e032      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4916      	ldr	r1, [pc, #88]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	490e      	ldr	r1, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e2:	f000 f821 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	490a      	ldr	r1, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	5ccb      	ldrb	r3, [r1, r3]
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1cc>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1d0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fe60 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	08005ec0 	.word	0x08005ec0
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b490      	push	{r4, r7}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002330:	1d3c      	adds	r4, r7, #4
 8002332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002338:	f240 2301 	movw	r3, #513	; 0x201
 800233c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d002      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x40>
 8002362:	2b08      	cmp	r3, #8
 8002364:	d003      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x46>
 8002366:	e02b      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800236a:	623b      	str	r3, [r7, #32]
      break;
 800236c:	e02b      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	0c9b      	lsrs	r3, r3, #18
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3328      	adds	r3, #40	; 0x28
 8002378:	443b      	add	r3, r7
 800237a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800237e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	0c5b      	lsrs	r3, r3, #17
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	3328      	adds	r3, #40	; 0x28
 8002396:	443b      	add	r3, r7
 8002398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800239c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a2:	fb03 f202 	mul.w	r2, r3, r2
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e004      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	623b      	str	r3, [r7, #32]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c2:	623b      	str	r3, [r7, #32]
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc90      	pop	{r4, r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	08005e74 	.word	0x08005e74
 80023d8:	40021000 	.word	0x40021000
 80023dc:	00f42400 	.word	0x00f42400
 80023e0:	003d0900 	.word	0x003d0900
 80023e4:	007a1200 	.word	0x007a1200

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000000 	.word	0x20000000

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff2 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08005ed0 	.word	0x08005ed0

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffde 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	08005ed0 	.word	0x08005ed0

0800244c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <RCC_Delay+0x34>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <RCC_Delay+0x38>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0a5b      	lsrs	r3, r3, #9
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002468:	bf00      	nop
  }
  while (Delay --);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	60fa      	str	r2, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f9      	bne.n	8002468 <RCC_Delay+0x1c>
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000000 	.word	0x20000000
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d07d      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024be:	61d3      	str	r3, [r2, #28]
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d118      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a42      	ldr	r2, [pc, #264]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fdb0 	bl	800104c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	e008      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fdac 	bl	800104c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e06d      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02e      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d027      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800253c:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d014      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fd7b 	bl	800104c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe fd77 	bl	800104c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e036      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ee      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4917      	ldr	r1, [pc, #92]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	4313      	orrs	r3, r2
 800258c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	490b      	ldr	r1, [pc, #44]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	42420440 	.word	0x42420440

080025f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e041      	b.n	800268a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fa92 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f000 faaa 	bl	8002b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e041      	b.n	8002728 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f839 	bl	8002730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 fa5b 	bl	8002b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e093      	b.n	800287e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe fa1c 	bl	8000ba8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002786:	f023 0307 	bic.w	r3, r3, #7
 800278a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f000 f9f8 	bl	8002b8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c4:	f023 0303 	bic.w	r3, r3, #3
 80027c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	4313      	orrs	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027e2:	f023 030c 	bic.w	r3, r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	4313      	orrs	r3, r2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	011a      	lsls	r2, r3, #4
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	031b      	lsls	r3, r3, #12
 8002812:	4313      	orrs	r3, r2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002820:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4313      	orrs	r3, r2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e0ac      	b.n	80029fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	f200 809f 	bhi.w	80029f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028ed 	.word	0x080028ed
 80028bc:	080029f1 	.word	0x080029f1
 80028c0:	080029f1 	.word	0x080029f1
 80028c4:	080029f1 	.word	0x080029f1
 80028c8:	0800292d 	.word	0x0800292d
 80028cc:	080029f1 	.word	0x080029f1
 80028d0:	080029f1 	.word	0x080029f1
 80028d4:	080029f1 	.word	0x080029f1
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	080029f1 	.word	0x080029f1
 80028e0:	080029f1 	.word	0x080029f1
 80028e4:	080029f1 	.word	0x080029f1
 80028e8:	080029af 	.word	0x080029af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f9c4 	bl	8002c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0208 	orr.w	r2, r2, #8
 8002906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6999      	ldr	r1, [r3, #24]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	619a      	str	r2, [r3, #24]
      break;
 800292a:	e062      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa14 	bl	8002d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6999      	ldr	r1, [r3, #24]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	619a      	str	r2, [r3, #24]
      break;
 800296c:	e041      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fa67 	bl	8002e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0208 	orr.w	r2, r2, #8
 8002988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69d9      	ldr	r1, [r3, #28]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	61da      	str	r2, [r3, #28]
      break;
 80029ac:	e021      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fabb 	bl	8002f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69d9      	ldr	r1, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	021a      	lsls	r2, r3, #8
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	61da      	str	r2, [r3, #28]
      break;
 80029ee:	e000      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_TIM_ConfigClockSource+0x18>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0b3      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x180>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a54:	d03e      	beq.n	8002ad4 <HAL_TIM_ConfigClockSource+0xd0>
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	f200 8087 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	f000 8085 	beq.w	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d87f      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d01a      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0xa2>
 8002a70:	2b70      	cmp	r3, #112	; 0x70
 8002a72:	d87b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d050      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x116>
 8002a78:	2b60      	cmp	r3, #96	; 0x60
 8002a7a:	d877      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d03c      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xf6>
 8002a80:	2b50      	cmp	r3, #80	; 0x50
 8002a82:	d873      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d058      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x136>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d86f      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d064      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
 8002a90:	2b30      	cmp	r3, #48	; 0x30
 8002a92:	d86b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d060      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d867      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05c      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d05a      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aa4:	e062      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f000 fb06 	bl	80030c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	609a      	str	r2, [r3, #8]
      break;
 8002ad2:	e04e      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f000 faef 	bl	80030c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af6:	609a      	str	r2, [r3, #8]
      break;
 8002af8:	e03b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f000 fa66 	bl	8002fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2150      	movs	r1, #80	; 0x50
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fabd 	bl	8003092 <TIM_ITRx_SetConfig>
      break;
 8002b18:	e02b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f000 fa84 	bl	8003034 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2160      	movs	r1, #96	; 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 faad 	bl	8003092 <TIM_ITRx_SetConfig>
      break;
 8002b38:	e01b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f000 fa46 	bl	8002fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2140      	movs	r1, #64	; 0x40
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fa9d 	bl	8003092 <TIM_ITRx_SetConfig>
      break;
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f000 fa94 	bl	8003092 <TIM_ITRx_SetConfig>
        break;
 8002b6a:	e002      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a33      	ldr	r2, [pc, #204]	; (8002c6c <TIM_Base_SetConfig+0xe0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <TIM_Base_SetConfig+0xe4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <TIM_Base_SetConfig+0xe8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2e      	ldr	r2, [pc, #184]	; (8002c78 <TIM_Base_SetConfig+0xec>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <TIM_Base_SetConfig+0xf0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <TIM_Base_SetConfig+0xe0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <TIM_Base_SetConfig+0x82>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <TIM_Base_SetConfig+0xe4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00f      	beq.n	8002c0e <TIM_Base_SetConfig+0x82>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d00b      	beq.n	8002c0e <TIM_Base_SetConfig+0x82>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <TIM_Base_SetConfig+0xe8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x82>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <TIM_Base_SetConfig+0xec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x82>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <TIM_Base_SetConfig+0xf0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <TIM_Base_SetConfig+0xe0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0xc8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <TIM_Base_SetConfig+0xe4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d103      	bne.n	8002c5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	615a      	str	r2, [r3, #20]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40013400 	.word	0x40013400
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00

08002c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 0302 	bic.w	r3, r3, #2
 8002cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <TIM_OC1_SetConfig+0xd8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_OC1_SetConfig+0x64>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <TIM_OC1_SetConfig+0xdc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10c      	bne.n	8002cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0308 	bic.w	r3, r3, #8
 8002cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <TIM_OC1_SetConfig+0xd8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_OC1_SetConfig+0x8e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <TIM_OC1_SetConfig+0xdc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40013400 	.word	0x40013400

08002d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0210 	bic.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0320 	bic.w	r3, r3, #32
 8002daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a21      	ldr	r2, [pc, #132]	; (8002e40 <TIM_OC2_SetConfig+0xe0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC2_SetConfig+0x68>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <TIM_OC2_SetConfig+0xe4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10d      	bne.n	8002de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <TIM_OC2_SetConfig+0xe0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_OC2_SetConfig+0x94>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <TIM_OC2_SetConfig+0xe4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d113      	bne.n	8002e1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40013400 	.word	0x40013400

08002e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <TIM_OC3_SetConfig+0xe0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d003      	beq.n	8002eae <TIM_OC3_SetConfig+0x66>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <TIM_OC3_SetConfig+0xe4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10d      	bne.n	8002eca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <TIM_OC3_SetConfig+0xe0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_OC3_SetConfig+0x92>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <TIM_OC3_SetConfig+0xe4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d113      	bne.n	8002f02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	621a      	str	r2, [r3, #32]
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40013400 	.word	0x40013400

08002f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	031b      	lsls	r3, r3, #12
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <TIM_OC4_SetConfig+0xa0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC4_SetConfig+0x68>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <TIM_OC4_SetConfig+0xa4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d109      	bne.n	8002fac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40013400 	.word	0x40013400

08002fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0201 	bic.w	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 030a 	bic.w	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 0210 	bic.w	r2, r3, #16
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	031b      	lsls	r3, r3, #12
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003070:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f043 0307 	orr.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	021a      	lsls	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	609a      	str	r2, [r3, #8]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003118:	2302      	movs	r3, #2
 800311a:	e050      	b.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d018      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d00e      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10c      	bne.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40013400 	.word	0x40013400
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40000c00 	.word	0x40000c00

080031dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e03d      	b.n	8003274 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e03f      	b.n	8003310 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fd fdbf 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2224      	movs	r2, #36	; 0x24
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f828 	bl	8003318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003352:	f023 030c 	bic.w	r3, r3, #12
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	430b      	orrs	r3, r1
 800335e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2c      	ldr	r2, [pc, #176]	; (800342c <UART_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003380:	f7ff f850 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	e002      	b.n	800338e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7ff f838 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 800338c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009a      	lsls	r2, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <UART_SetConfig+0x118>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	0119      	lsls	r1, r3, #4
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009a      	lsls	r2, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <UART_SetConfig+0x118>)
 80033c6:	fba3 0302 	umull	r0, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2064      	movs	r0, #100	; 0x64
 80033ce:	fb00 f303 	mul.w	r3, r0, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	3332      	adds	r3, #50	; 0x32
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <UART_SetConfig+0x118>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	4419      	add	r1, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009a      	lsls	r2, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <UART_SetConfig+0x118>)
 80033fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2064      	movs	r0, #100	; 0x64
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	4a07      	ldr	r2, [pc, #28]	; (8003430 <UART_SetConfig+0x118>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	f003 020f 	and.w	r2, r3, #15
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	440a      	add	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40013800 	.word	0x40013800
 8003430:	51eb851f 	.word	0x51eb851f

08003434 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343a:	f3ef 8305 	mrs	r3, IPSR
 800343e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003440:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003446:	f3ef 8310 	mrs	r3, PRIMASK
 800344a:	607b      	str	r3, [r7, #4]
  return(result);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <osKernelInitialize+0x32>
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <osKernelInitialize+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d109      	bne.n	800346e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800345a:	f3ef 8311 	mrs	r3, BASEPRI
 800345e:	603b      	str	r3, [r7, #0]
  return(result);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003466:	f06f 0305 	mvn.w	r3, #5
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e00c      	b.n	8003488 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <osKernelInitialize+0x60>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <osKernelInitialize+0x60>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e002      	b.n	8003488 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003488:	68fb      	ldr	r3, [r7, #12]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	200002b4 	.word	0x200002b4

08003498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800349e:	f3ef 8305 	mrs	r3, IPSR
 80034a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034aa:	f3ef 8310 	mrs	r3, PRIMASK
 80034ae:	607b      	str	r3, [r7, #4]
  return(result);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <osKernelStart+0x32>
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <osKernelStart+0x64>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d109      	bne.n	80034d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034be:	f3ef 8311 	mrs	r3, BASEPRI
 80034c2:	603b      	str	r3, [r7, #0]
  return(result);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80034ca:	f06f 0305 	mvn.w	r3, #5
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e00e      	b.n	80034f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <osKernelStart+0x64>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <osKernelStart+0x64>)
 80034dc:	2202      	movs	r2, #2
 80034de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034e0:	f001 f878 	bl	80045d4 <vTaskStartScheduler>
      stat = osOK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e002      	b.n	80034f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200002b4 	.word	0x200002b4

08003500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b092      	sub	sp, #72	; 0x48
 8003504:	af04      	add	r7, sp, #16
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003510:	f3ef 8305 	mrs	r3, IPSR
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 8094 	bne.w	8003646 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351e:	f3ef 8310 	mrs	r3, PRIMASK
 8003522:	623b      	str	r3, [r7, #32]
  return(result);
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 808d 	bne.w	8003646 <osThreadNew+0x146>
 800352c:	4b48      	ldr	r3, [pc, #288]	; (8003650 <osThreadNew+0x150>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d106      	bne.n	8003542 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003534:	f3ef 8311 	mrs	r3, BASEPRI
 8003538:	61fb      	str	r3, [r7, #28]
  return(result);
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8082 	bne.w	8003646 <osThreadNew+0x146>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d07e      	beq.n	8003646 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800354c:	2318      	movs	r3, #24
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003550:	2300      	movs	r3, #0
 8003552:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003554:	f107 031b 	add.w	r3, r7, #27
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d045      	beq.n	80035f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <osThreadNew+0x74>
        name = attr->name;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <osThreadNew+0x9a>
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	2b38      	cmp	r3, #56	; 0x38
 800358c:	d805      	bhi.n	800359a <osThreadNew+0x9a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <osThreadNew+0x9e>
        return (NULL);
 800359a:	2300      	movs	r3, #0
 800359c:	e054      	b.n	8003648 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <osThreadNew+0xd4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b5b      	cmp	r3, #91	; 0x5b
 80035bc:	d90a      	bls.n	80035d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <osThreadNew+0xd4>
        mem = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d2:	e010      	b.n	80035f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10c      	bne.n	80035f6 <osThreadNew+0xf6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d108      	bne.n	80035f6 <osThreadNew+0xf6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <osThreadNew+0xf6>
          mem = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f0:	e001      	b.n	80035f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d110      	bne.n	800361e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003604:	9202      	str	r2, [sp, #8]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fe12 	bl	800423c <xTaskCreateStatic>
 8003618:	4603      	mov	r3, r0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e013      	b.n	8003646 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d110      	bne.n	8003646 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	b29a      	uxth	r2, r3
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fe5c 	bl	80042f4 <xTaskCreate>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <osThreadNew+0x146>
          hTask = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3738      	adds	r7, #56	; 0x38
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200002b4 	.word	0x200002b4

08003654 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800365c:	f3ef 8305 	mrs	r3, IPSR
 8003660:	613b      	str	r3, [r7, #16]
  return(result);
 8003662:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003668:	f3ef 8310 	mrs	r3, PRIMASK
 800366c:	60fb      	str	r3, [r7, #12]
  return(result);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <osDelay+0x34>
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <osDelay+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d109      	bne.n	8003690 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800367c:	f3ef 8311 	mrs	r3, BASEPRI
 8003680:	60bb      	str	r3, [r7, #8]
  return(result);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <osDelay+0x3c>
    stat = osErrorISR;
 8003688:	f06f 0305 	mvn.w	r3, #5
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e007      	b.n	80036a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 ff66 	bl	800456c <vTaskDelay>
    }
  }

  return (stat);
 80036a0:	697b      	ldr	r3, [r7, #20]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200002b4 	.word	0x200002b4

080036b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <vApplicationGetIdleTaskMemory+0x28>)
 80036c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <vApplicationGetIdleTaskMemory+0x2c>)
 80036c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	200002b8 	.word	0x200002b8
 80036dc:	20000314 	.word	0x20000314

080036e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a07      	ldr	r2, [pc, #28]	; (800370c <vApplicationGetTimerTaskMemory+0x2c>)
 80036f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <vApplicationGetTimerTaskMemory+0x30>)
 80036f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000514 	.word	0x20000514
 8003710:	20000570 	.word	0x20000570

08003714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0208 	add.w	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f103 0208 	add.w	r2, r3, #8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f103 0208 	add.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d103      	bne.n	80037d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e00c      	b.n	80037ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3308      	adds	r3, #8
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e002      	b.n	80037de <vListInsert+0x2e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d2f6      	bcs.n	80037d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6892      	ldr	r2, [r2, #8]
 8003836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6852      	ldr	r2, [r2, #4]
 8003840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d103      	bne.n	8003854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1e5a      	subs	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
	...

08003874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800389e:	f001 ffc5 	bl	800582c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	441a      	add	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	3b01      	subs	r3, #1
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d114      	bne.n	800391e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01a      	beq.n	8003932 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3310      	adds	r3, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f8f1 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <xQueueGenericReset+0xcc>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	e009      	b.n	8003932 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3310      	adds	r3, #16
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fef6 	bl	8003714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3324      	adds	r3, #36	; 0x24
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fef1 	bl	8003714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003932:	f001 ffab 	bl	800588c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <xQueueGenericCreateStatic+0x52>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <xQueueGenericCreateStatic+0x56>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <xQueueGenericCreateStatic+0x58>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	623b      	str	r3, [r7, #32]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <xQueueGenericCreateStatic+0x7e>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <xQueueGenericCreateStatic+0x82>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <xQueueGenericCreateStatic+0x84>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61fb      	str	r3, [r7, #28]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039e2:	2350      	movs	r3, #80	; 0x50
 80039e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b50      	cmp	r3, #80	; 0x50
 80039ea:	d00a      	beq.n	8003a02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61bb      	str	r3, [r7, #24]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00d      	beq.n	8003a28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f805 	bl	8003a32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3730      	adds	r7, #48	; 0x30
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e002      	b.n	8003a54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a60:	2101      	movs	r1, #1
 8003a62:	69b8      	ldr	r0, [r7, #24]
 8003a64:	f7ff ff06 	bl	8003874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08e      	sub	sp, #56	; 0x38
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a86:	2300      	movs	r3, #0
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xQueueGenericSend+0x32>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <xQueueGenericSend+0x40>
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <xQueueGenericSend+0x44>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <xQueueGenericSend+0x46>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad4:	bf00      	nop
 8003ad6:	e7fe      	b.n	8003ad6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d103      	bne.n	8003ae6 <xQueueGenericSend+0x6e>
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <xQueueGenericSend+0x72>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueGenericSend+0x74>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGenericSend+0x8e>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b06:	f001 f9b1 	bl	8004e6c <xTaskGetSchedulerState>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <xQueueGenericSend+0x9e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSend+0xa2>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSend+0xa4>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <xQueueGenericSend+0xbe>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	61fb      	str	r3, [r7, #28]
}
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b36:	f001 fe79 	bl	800582c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <xQueueGenericSend+0xd4>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d129      	bne.n	8003ba0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 fa07 	bl	8003f64 <prvCopyDataToQueue>
 8003b56:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	3324      	adds	r3, #36	; 0x24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ffbf 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <xQueueGenericSend+0x1f8>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	e00a      	b.n	8003b98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b88:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <xQueueGenericSend+0x1f8>)
 8003b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b98:	f001 fe78 	bl	800588c <vPortExitCritical>
				return pdPASS;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e063      	b.n	8003c68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ba6:	f001 fe71 	bl	800588c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e05c      	b.n	8003c68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fff9 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bc2:	f001 fe63 	bl	800588c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bc6:	f000 fd6b 	bl	80046a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bca:	f001 fe2f 	bl	800582c <vPortEnterCritical>
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd4:	b25b      	sxtb	r3, r3
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d103      	bne.n	8003be4 <xQueueGenericSend+0x16c>
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d103      	bne.n	8003bfa <xQueueGenericSend+0x182>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bfa:	f001 fe47 	bl	800588c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bfe:	1d3a      	adds	r2, r7, #4
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 ffe8 	bl	8004bdc <xTaskCheckForTimeOut>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d124      	bne.n	8003c5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c14:	f000 fa9e 	bl	8004154 <prvIsQueueFull>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	3310      	adds	r3, #16
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 ff0e 	bl	8004a48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2e:	f000 fa29 	bl	8004084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c32:	f000 fd43 	bl	80046bc <xTaskResumeAll>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f47f af7c 	bne.w	8003b36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <xQueueGenericSend+0x1f8>)
 8003c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	e772      	b.n	8003b36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c52:	f000 fa17 	bl	8004084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c56:	f000 fd31 	bl	80046bc <xTaskResumeAll>
 8003c5a:	e76c      	b.n	8003b36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5e:	f000 fa11 	bl	8004084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c62:	f000 fd2b 	bl	80046bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c66:	2300      	movs	r3, #0
		}
	}
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3738      	adds	r7, #56	; 0x38
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	e000ed04 	.word	0xe000ed04

08003c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08e      	sub	sp, #56	; 0x38
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <xQueueGenericSendFromISR+0x3c>
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <xQueueGenericSendFromISR+0x40>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <xQueueGenericSendFromISR+0x42>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	623b      	str	r3, [r7, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <xQueueGenericSendFromISR+0x6a>
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <xQueueGenericSendFromISR+0x6e>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericSendFromISR+0x70>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	61fb      	str	r3, [r7, #28]
}
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cfe:	f001 fe57 	bl	80059b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d02:	f3ef 8211 	mrs	r2, BASEPRI
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	61ba      	str	r2, [r7, #24]
 8003d18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <xQueueGenericSendFromISR+0xbc>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d12c      	bne.n	8003d8a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d40:	f000 f910 	bl	8003f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d112      	bne.n	8003d74 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	3324      	adds	r3, #36	; 0x24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fec4 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00e      	beq.n	8003d84 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e007      	b.n	8003d84 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d78:	3301      	adds	r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	b25a      	sxtb	r2, r3
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d84:	2301      	movs	r3, #1
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d88:	e001      	b.n	8003d8e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3738      	adds	r7, #56	; 0x38
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	; 0x30
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xQueueReceive+0x30>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	623b      	str	r3, [r7, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <xQueueReceive+0x3e>
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <xQueueReceive+0x42>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <xQueueReceive+0x44>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xQueueReceive+0x5e>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	61fb      	str	r3, [r7, #28]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e02:	f001 f833 	bl	8004e6c <xTaskGetSchedulerState>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <xQueueReceive+0x6e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <xQueueReceive+0x72>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <xQueueReceive+0x74>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xQueueReceive+0x8e>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	61bb      	str	r3, [r7, #24]
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e32:	f001 fcfb 	bl	800582c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01f      	beq.n	8003e82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e46:	f000 f8f7 	bl	8004038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00f      	beq.n	8003e7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fe42 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <xQueueReceive+0x1bc>)
 8003e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e7a:	f001 fd07 	bl	800588c <vPortExitCritical>
				return pdPASS;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e069      	b.n	8003f56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e88:	f001 fd00 	bl	800588c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e062      	b.n	8003f56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fe88 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea4:	f001 fcf2 	bl	800588c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea8:	f000 fbfa 	bl	80046a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eac:	f001 fcbe 	bl	800582c <vPortEnterCritical>
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d103      	bne.n	8003ec6 <xQueueReceive+0x122>
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d103      	bne.n	8003edc <xQueueReceive+0x138>
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003edc:	f001 fcd6 	bl	800588c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee0:	1d3a      	adds	r2, r7, #4
 8003ee2:	f107 0310 	add.w	r3, r7, #16
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fe77 	bl	8004bdc <xTaskCheckForTimeOut>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d123      	bne.n	8003f3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef6:	f000 f917 	bl	8004128 <prvIsQueueEmpty>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	3324      	adds	r3, #36	; 0x24
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fd9d 	bl	8004a48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f10:	f000 f8b8 	bl	8004084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f14:	f000 fbd2 	bl	80046bc <xTaskResumeAll>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d189      	bne.n	8003e32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <xQueueReceive+0x1bc>)
 8003f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	e780      	b.n	8003e32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f32:	f000 f8a7 	bl	8004084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f36:	f000 fbc1 	bl	80046bc <xTaskResumeAll>
 8003f3a:	e77a      	b.n	8003e32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3e:	f000 f8a1 	bl	8004084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f42:	f000 fbbb 	bl	80046bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f48:	f000 f8ee 	bl	8004128 <prvIsQueueEmpty>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f43f af6f 	beq.w	8003e32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3730      	adds	r7, #48	; 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14d      	bne.n	8004026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ff8a 	bl	8004ea8 <xTaskPriorityDisinherit>
 8003f94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	e043      	b.n	8004026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d119      	bne.n	8003fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6898      	ldr	r0, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	461a      	mov	r2, r3
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	f001 ff38 	bl	8005e24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d32b      	bcc.n	8004026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	e026      	b.n	8004026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68d8      	ldr	r0, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	f001 ff1e 	bl	8005e24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d207      	bcs.n	8004014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	425b      	negs	r3, r3
 800400e:	441a      	add	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d105      	bne.n	8004026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	3b01      	subs	r3, #1
 8004024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800402e:	697b      	ldr	r3, [r7, #20]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d303      	bcc.n	800406c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68d9      	ldr	r1, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	461a      	mov	r2, r3
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f001 fed4 	bl	8005e24 <memcpy>
	}
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800408c:	f001 fbce 	bl	800582c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004098:	e011      	b.n	80040be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d012      	beq.n	80040c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3324      	adds	r3, #36	; 0x24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fd1e 	bl	8004ae8 <xTaskRemoveFromEventList>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040b2:	f000 fdf5 	bl	8004ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dce9      	bgt.n	800409a <prvUnlockQueue+0x16>
 80040c6:	e000      	b.n	80040ca <prvUnlockQueue+0x46>
					break;
 80040c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040d2:	f001 fbdb 	bl	800588c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040d6:	f001 fba9 	bl	800582c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040e2:	e011      	b.n	8004108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3310      	adds	r3, #16
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fcf9 	bl	8004ae8 <xTaskRemoveFromEventList>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040fc:	f000 fdd0 	bl	8004ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	3b01      	subs	r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800410c:	2b00      	cmp	r3, #0
 800410e:	dce9      	bgt.n	80040e4 <prvUnlockQueue+0x60>
 8004110:	e000      	b.n	8004114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	22ff      	movs	r2, #255	; 0xff
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800411c:	f001 fbb6 	bl	800588c <vPortExitCritical>
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004130:	f001 fb7c 	bl	800582c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e001      	b.n	8004146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004146:	f001 fba1 	bl	800588c <vPortExitCritical>

	return xReturn;
 800414a:	68fb      	ldr	r3, [r7, #12]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800415c:	f001 fb66 	bl	800582c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	429a      	cmp	r2, r3
 800416a:	d102      	bne.n	8004172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e001      	b.n	8004176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004176:	f001 fb89 	bl	800588c <vPortExitCritical>

	return xReturn;
 800417a:	68fb      	ldr	r3, [r7, #12]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e014      	b.n	80041be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <vQueueAddToRegistry+0x4c>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041a0:	490b      	ldr	r1, [pc, #44]	; (80041d0 <vQueueAddToRegistry+0x4c>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <vQueueAddToRegistry+0x4c>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041b6:	e006      	b.n	80041c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b07      	cmp	r3, #7
 80041c2:	d9e7      	bls.n	8004194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	20000970 	.word	0x20000970

080041d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041e4:	f001 fb22 	bl	800582c <vPortEnterCritical>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d103      	bne.n	80041fe <vQueueWaitForMessageRestricted+0x2a>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004204:	b25b      	sxtb	r3, r3
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d103      	bne.n	8004214 <vQueueWaitForMessageRestricted+0x40>
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004214:	f001 fb3a 	bl	800588c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3324      	adds	r3, #36	; 0x24
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fc31 	bl	8004a90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7ff ff28 	bl	8004084 <prvUnlockQueue>
	}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08e      	sub	sp, #56	; 0x38
 8004240:	af04      	add	r7, sp, #16
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	623b      	str	r3, [r7, #32]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xTaskCreateStatic+0x46>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	61fb      	str	r3, [r7, #28]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004282:	235c      	movs	r3, #92	; 0x5c
 8004284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b5c      	cmp	r3, #92	; 0x5c
 800428a:	d00a      	beq.n	80042a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	61bb      	str	r3, [r7, #24]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01e      	beq.n	80042e6 <xTaskCreateStatic+0xaa>
 80042a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01b      	beq.n	80042e6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042c0:	2300      	movs	r3, #0
 80042c2:	9303      	str	r3, [sp, #12]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	9302      	str	r3, [sp, #8]
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f850 	bl	800437e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e0:	f000 f8d4 	bl	800448c <prvAddNewTaskToReadyList>
 80042e4:	e001      	b.n	80042ea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042ea:	697b      	ldr	r3, [r7, #20]
	}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af04      	add	r7, sp, #16
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f001 fb8f 	bl	8005a2c <pvPortMalloc>
 800430e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004316:	205c      	movs	r0, #92	; 0x5c
 8004318:	f001 fb88 	bl	8005a2c <pvPortMalloc>
 800431c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
 800432a:	e005      	b.n	8004338 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800432c:	6978      	ldr	r0, [r7, #20]
 800432e:	f001 fc41 	bl	8005bb4 <vPortFree>
 8004332:	e001      	b.n	8004338 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	2300      	movs	r3, #0
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f80e 	bl	800437e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004362:	69f8      	ldr	r0, [r7, #28]
 8004364:	f000 f892 	bl	800448c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004368:	2301      	movs	r3, #1
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e002      	b.n	8004374 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004374:	69bb      	ldr	r3, [r7, #24]
	}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b088      	sub	sp, #32
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	461a      	mov	r2, r3
 8004396:	21a5      	movs	r1, #165	; 0xa5
 8004398:	f001 fd52 	bl	8005e40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043a6:	3b01      	subs	r3, #1
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f023 0307 	bic.w	r3, r3, #7
 80043b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	617b      	str	r3, [r7, #20]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e012      	b.n	8004402 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	7819      	ldrb	r1, [r3, #0]
 80043e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	3334      	adds	r3, #52	; 0x34
 80043ec:	460a      	mov	r2, r1
 80043ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d006      	beq.n	800440a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b0f      	cmp	r3, #15
 8004406:	d9e9      	bls.n	80043dc <prvInitialiseNewTask+0x5e>
 8004408:	e000      	b.n	800440c <prvInitialiseNewTask+0x8e>
		{
			break;
 800440a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	2b37      	cmp	r3, #55	; 0x37
 8004418:	d901      	bls.n	800441e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800441a:	2337      	movs	r3, #55	; 0x37
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004428:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2200      	movs	r2, #0
 800442e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff f98c 	bl	8003752 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	3318      	adds	r3, #24
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f987 	bl	8003752 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004448:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2200      	movs	r2, #0
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	69b8      	ldr	r0, [r7, #24]
 800446e:	f001 f8ef 	bl	8005650 <pxPortInitialiseStack>
 8004472:	4602      	mov	r2, r0
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004482:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004484:	bf00      	nop
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004494:	f001 f9ca 	bl	800582c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <prvAddNewTaskToReadyList+0xc4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <prvAddNewTaskToReadyList+0xc4>)
 80044a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <prvAddNewTaskToReadyList+0xc8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044aa:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <prvAddNewTaskToReadyList+0xc8>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <prvAddNewTaskToReadyList+0xc4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d110      	bne.n	80044da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044b8:	f000 fc16 	bl	8004ce8 <prvInitialiseTaskLists>
 80044bc:	e00d      	b.n	80044da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044be:	4b26      	ldr	r3, [pc, #152]	; (8004558 <prvAddNewTaskToReadyList+0xcc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <prvAddNewTaskToReadyList+0xc8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d802      	bhi.n	80044da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044d4:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <prvAddNewTaskToReadyList+0xc8>)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <prvAddNewTaskToReadyList+0xd0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <prvAddNewTaskToReadyList+0xd0>)
 80044e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <prvAddNewTaskToReadyList+0xd0>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <prvAddNewTaskToReadyList+0xd4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d903      	bls.n	8004500 <prvAddNewTaskToReadyList+0x74>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <prvAddNewTaskToReadyList+0xd4>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <prvAddNewTaskToReadyList+0xd8>)
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7ff f927 	bl	800376a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800451c:	f001 f9b6 	bl	800588c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <prvAddNewTaskToReadyList+0xcc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <prvAddNewTaskToReadyList+0xc8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	429a      	cmp	r2, r3
 8004534:	d207      	bcs.n	8004546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <prvAddNewTaskToReadyList+0xdc>)
 8004538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000e84 	.word	0x20000e84
 8004554:	200009b0 	.word	0x200009b0
 8004558:	20000e90 	.word	0x20000e90
 800455c:	20000ea0 	.word	0x20000ea0
 8004560:	20000e8c 	.word	0x20000e8c
 8004564:	200009b4 	.word	0x200009b4
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d017      	beq.n	80045ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <vTaskDelay+0x60>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <vTaskDelay+0x30>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60bb      	str	r3, [r7, #8]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800459c:	f000 f880 	bl	80046a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045a0:	2100      	movs	r1, #0
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fcee 	bl	8004f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045a8:	f000 f888 	bl	80046bc <xTaskResumeAll>
 80045ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <vTaskDelay+0x64>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000eac 	.word	0x20000eac
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045e2:	463a      	mov	r2, r7
 80045e4:	1d39      	adds	r1, r7, #4
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff f860 	bl	80036b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2300      	movs	r3, #0
 8004600:	460a      	mov	r2, r1
 8004602:	4921      	ldr	r1, [pc, #132]	; (8004688 <vTaskStartScheduler+0xb4>)
 8004604:	4821      	ldr	r0, [pc, #132]	; (800468c <vTaskStartScheduler+0xb8>)
 8004606:	f7ff fe19 	bl	800423c <xTaskCreateStatic>
 800460a:	4603      	mov	r3, r0
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <vTaskStartScheduler+0xbc>)
 800460e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <vTaskStartScheduler+0xbc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e001      	b.n	8004622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d102      	bne.n	800462e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004628:	f000 fd00 	bl	800502c <xTimerCreateTimerTask>
 800462c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d116      	bne.n	8004662 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	613b      	str	r3, [r7, #16]
}
 8004646:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <vTaskStartScheduler+0xc0>)
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <vTaskStartScheduler+0xc4>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <vTaskStartScheduler+0xc8>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800465c:	f001 f874 	bl	8005748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004660:	e00e      	b.n	8004680 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d10a      	bne.n	8004680 <vTaskStartScheduler+0xac>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60fb      	str	r3, [r7, #12]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vTaskStartScheduler+0xaa>
}
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08005e84 	.word	0x08005e84
 800468c:	08004cb9 	.word	0x08004cb9
 8004690:	20000ea8 	.word	0x20000ea8
 8004694:	20000ea4 	.word	0x20000ea4
 8004698:	20000e90 	.word	0x20000e90
 800469c:	20000e88 	.word	0x20000e88

080046a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <vTaskSuspendAll+0x18>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <vTaskSuspendAll+0x18>)
 80046ac:	6013      	str	r3, [r2, #0]
}
 80046ae:	bf00      	nop
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000eac 	.word	0x20000eac

080046bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ca:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <xTaskResumeAll+0x118>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	603b      	str	r3, [r7, #0]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046e8:	f001 f8a0 	bl	800582c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ec:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <xTaskResumeAll+0x118>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	4a38      	ldr	r2, [pc, #224]	; (80047d4 <xTaskResumeAll+0x118>)
 80046f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <xTaskResumeAll+0x118>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d162      	bne.n	80047c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <xTaskResumeAll+0x11c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d05e      	beq.n	80047c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004706:	e02f      	b.n	8004768 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004708:	4b34      	ldr	r3, [pc, #208]	; (80047dc <xTaskResumeAll+0x120>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3318      	adds	r3, #24
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff f883 	bl	8003820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3304      	adds	r3, #4
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff f87e 	bl	8003820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <xTaskResumeAll+0x124>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d903      	bls.n	8004738 <xTaskResumeAll+0x7c>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <xTaskResumeAll+0x124>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <xTaskResumeAll+0x128>)
 8004746:	441a      	add	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7ff f80b 	bl	800376a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <xTaskResumeAll+0x12c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <xTaskResumeAll+0x130>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <xTaskResumeAll+0x120>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1cb      	bne.n	8004708 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004776:	f000 fb55 	bl	8004e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <xTaskResumeAll+0x134>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004786:	f000 f845 	bl	8004814 <xTaskIncrementTick>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <xTaskResumeAll+0x130>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3b01      	subs	r3, #1
 800479a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f1      	bne.n	8004786 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <xTaskResumeAll+0x134>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <xTaskResumeAll+0x130>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047b0:	2301      	movs	r3, #1
 80047b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <xTaskResumeAll+0x138>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 f862 	bl	800588c <vPortExitCritical>

	return xAlreadyYielded;
 80047c8:	68bb      	ldr	r3, [r7, #8]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000eac 	.word	0x20000eac
 80047d8:	20000e84 	.word	0x20000e84
 80047dc:	20000e44 	.word	0x20000e44
 80047e0:	20000e8c 	.word	0x20000e8c
 80047e4:	200009b4 	.word	0x200009b4
 80047e8:	200009b0 	.word	0x200009b0
 80047ec:	20000e98 	.word	0x20000e98
 80047f0:	20000e94 	.word	0x20000e94
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <xTaskGetTickCount+0x18>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004804:	687b      	ldr	r3, [r7, #4]
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	20000e88 	.word	0x20000e88

08004814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481e:	4b51      	ldr	r3, [pc, #324]	; (8004964 <xTaskIncrementTick+0x150>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 808e 	bne.w	8004944 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004828:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <xTaskIncrementTick+0x154>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004830:	4a4d      	ldr	r2, [pc, #308]	; (8004968 <xTaskIncrementTick+0x154>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d120      	bne.n	800487e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800483c:	4b4b      	ldr	r3, [pc, #300]	; (800496c <xTaskIncrementTick+0x158>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <xTaskIncrementTick+0x48>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	603b      	str	r3, [r7, #0]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xTaskIncrementTick+0x46>
 800485c:	4b43      	ldr	r3, [pc, #268]	; (800496c <xTaskIncrementTick+0x158>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <xTaskIncrementTick+0x15c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a41      	ldr	r2, [pc, #260]	; (800496c <xTaskIncrementTick+0x158>)
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4a41      	ldr	r2, [pc, #260]	; (8004970 <xTaskIncrementTick+0x15c>)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	4b40      	ldr	r3, [pc, #256]	; (8004974 <xTaskIncrementTick+0x160>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <xTaskIncrementTick+0x160>)
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	f000 fad3 	bl	8004e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800487e:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <xTaskIncrementTick+0x164>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d34e      	bcc.n	8004926 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004888:	4b38      	ldr	r3, [pc, #224]	; (800496c <xTaskIncrementTick+0x158>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <xTaskIncrementTick+0x82>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <xTaskIncrementTick+0x84>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489c:	4b36      	ldr	r3, [pc, #216]	; (8004978 <xTaskIncrementTick+0x164>)
 800489e:	f04f 32ff 	mov.w	r2, #4294967295
 80048a2:	601a      	str	r2, [r3, #0]
					break;
 80048a4:	e03f      	b.n	8004926 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048a6:	4b31      	ldr	r3, [pc, #196]	; (800496c <xTaskIncrementTick+0x158>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d203      	bcs.n	80048c6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048be:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <xTaskIncrementTick+0x164>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6013      	str	r3, [r2, #0]
						break;
 80048c4:	e02f      	b.n	8004926 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe ffa8 	bl	8003820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3318      	adds	r3, #24
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe ff9f 	bl	8003820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	4b25      	ldr	r3, [pc, #148]	; (800497c <xTaskIncrementTick+0x168>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d903      	bls.n	80048f6 <xTaskIncrementTick+0xe2>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a22      	ldr	r2, [pc, #136]	; (800497c <xTaskIncrementTick+0x168>)
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <xTaskIncrementTick+0x16c>)
 8004904:	441a      	add	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fe ff2c 	bl	800376a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <xTaskIncrementTick+0x170>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	429a      	cmp	r2, r3
 800491e:	d3b3      	bcc.n	8004888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004924:	e7b0      	b.n	8004888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004926:	4b17      	ldr	r3, [pc, #92]	; (8004984 <xTaskIncrementTick+0x170>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4914      	ldr	r1, [pc, #80]	; (8004980 <xTaskIncrementTick+0x16c>)
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d907      	bls.n	800494e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e004      	b.n	800494e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <xTaskIncrementTick+0x174>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	4a0f      	ldr	r2, [pc, #60]	; (8004988 <xTaskIncrementTick+0x174>)
 800494c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <xTaskIncrementTick+0x178>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800495a:	697b      	ldr	r3, [r7, #20]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000eac 	.word	0x20000eac
 8004968:	20000e88 	.word	0x20000e88
 800496c:	20000e3c 	.word	0x20000e3c
 8004970:	20000e40 	.word	0x20000e40
 8004974:	20000e9c 	.word	0x20000e9c
 8004978:	20000ea4 	.word	0x20000ea4
 800497c:	20000e8c 	.word	0x20000e8c
 8004980:	200009b4 	.word	0x200009b4
 8004984:	200009b0 	.word	0x200009b0
 8004988:	20000e94 	.word	0x20000e94
 800498c:	20000e98 	.word	0x20000e98

08004990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004996:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <vTaskSwitchContext+0xa4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <vTaskSwitchContext+0xa8>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049a4:	e041      	b.n	8004a2a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <vTaskSwitchContext+0xa8>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049ac:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <vTaskSwitchContext+0xac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e010      	b.n	80049d6 <vTaskSwitchContext+0x46>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	607b      	str	r3, [r7, #4]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <vTaskSwitchContext+0x3e>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	491a      	ldr	r1, [pc, #104]	; (8004a40 <vTaskSwitchContext+0xb0>)
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0e4      	beq.n	80049b4 <vTaskSwitchContext+0x24>
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <vTaskSwitchContext+0xb0>)
 80049f6:	4413      	add	r3, r2
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d104      	bne.n	8004a1a <vTaskSwitchContext+0x8a>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <vTaskSwitchContext+0xb4>)
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <vTaskSwitchContext+0xac>)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6013      	str	r3, [r2, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	20000eac 	.word	0x20000eac
 8004a38:	20000e98 	.word	0x20000e98
 8004a3c:	20000e8c 	.word	0x20000e8c
 8004a40:	200009b4 	.word	0x200009b4
 8004a44:	200009b0 	.word	0x200009b0

08004a48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <vTaskPlaceOnEventList+0x44>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3318      	adds	r3, #24
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fe fe9a 	bl	80037b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6838      	ldr	r0, [r7, #0]
 8004a80:	f000 fa80 	bl	8004f84 <prvAddCurrentTaskToDelayedList>
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200009b0 	.word	0x200009b0

08004a90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	617b      	str	r3, [r7, #20]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3318      	adds	r3, #24
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7fe fe52 	bl	800376a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68b8      	ldr	r0, [r7, #8]
 8004ad6:	f000 fa55 	bl	8004f84 <prvAddCurrentTaskToDelayedList>
	}
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200009b0 	.word	0x200009b0

08004ae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	60fb      	str	r3, [r7, #12]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3318      	adds	r3, #24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fe81 	bl	8003820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <xTaskRemoveFromEventList+0xb0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11d      	bne.n	8004b62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fe78 	bl	8003820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <xTaskRemoveFromEventList+0xb4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d903      	bls.n	8004b44 <xTaskRemoveFromEventList+0x5c>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <xTaskRemoveFromEventList+0xb4>)
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <xTaskRemoveFromEventList+0xb8>)
 8004b52:	441a      	add	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f7fe fe05 	bl	800376a <vListInsertEnd>
 8004b60:	e005      	b.n	8004b6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3318      	adds	r3, #24
 8004b66:	4619      	mov	r1, r3
 8004b68:	480e      	ldr	r0, [pc, #56]	; (8004ba4 <xTaskRemoveFromEventList+0xbc>)
 8004b6a:	f7fe fdfe 	bl	800376a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <xTaskRemoveFromEventList+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d905      	bls.n	8004b88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <xTaskRemoveFromEventList+0xc4>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e001      	b.n	8004b8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b8c:	697b      	ldr	r3, [r7, #20]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000eac 	.word	0x20000eac
 8004b9c:	20000e8c 	.word	0x20000e8c
 8004ba0:	200009b4 	.word	0x200009b4
 8004ba4:	20000e44 	.word	0x20000e44
 8004ba8:	200009b0 	.word	0x200009b0
 8004bac:	20000e98 	.word	0x20000e98

08004bb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <vTaskInternalSetTimeOutState+0x24>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <vTaskInternalSetTimeOutState+0x28>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000e9c 	.word	0x20000e9c
 8004bd8:	20000e88 	.word	0x20000e88

08004bdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	613b      	str	r3, [r7, #16]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c1e:	f000 fe05 	bl	800582c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <xTaskCheckForTimeOut+0xbc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d102      	bne.n	8004c42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e023      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <xTaskCheckForTimeOut+0xc0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d007      	beq.n	8004c5e <xTaskCheckForTimeOut+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e015      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d20b      	bcs.n	8004c80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff9b 	bl	8004bb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e004      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c8a:	f000 fdff 	bl	800588c <vPortExitCritical>

	return xReturn;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000e88 	.word	0x20000e88
 8004c9c:	20000e9c 	.word	0x20000e9c

08004ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <vTaskMissedYield+0x14>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000e98 	.word	0x20000e98

08004cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc0:	f000 f852 	bl	8004d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <prvIdleTask+0x28>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d9f9      	bls.n	8004cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <prvIdleTask+0x2c>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cdc:	e7f0      	b.n	8004cc0 <prvIdleTask+0x8>
 8004cde:	bf00      	nop
 8004ce0:	200009b4 	.word	0x200009b4
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	e00c      	b.n	8004d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <prvInitialiseTaskLists+0x60>)
 8004d00:	4413      	add	r3, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fd06 	bl	8003714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b37      	cmp	r3, #55	; 0x37
 8004d12:	d9ef      	bls.n	8004cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d14:	480d      	ldr	r0, [pc, #52]	; (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d16:	f7fe fcfd 	bl	8003714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d1a:	480d      	ldr	r0, [pc, #52]	; (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d1c:	f7fe fcfa 	bl	8003714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <prvInitialiseTaskLists+0x6c>)
 8004d22:	f7fe fcf7 	bl	8003714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d26:	480c      	ldr	r0, [pc, #48]	; (8004d58 <prvInitialiseTaskLists+0x70>)
 8004d28:	f7fe fcf4 	bl	8003714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d2c:	480b      	ldr	r0, [pc, #44]	; (8004d5c <prvInitialiseTaskLists+0x74>)
 8004d2e:	f7fe fcf1 	bl	8003714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvInitialiseTaskLists+0x78>)
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <prvInitialiseTaskLists+0x7c>)
 8004d3a:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200009b4 	.word	0x200009b4
 8004d4c:	20000e14 	.word	0x20000e14
 8004d50:	20000e28 	.word	0x20000e28
 8004d54:	20000e44 	.word	0x20000e44
 8004d58:	20000e58 	.word	0x20000e58
 8004d5c:	20000e70 	.word	0x20000e70
 8004d60:	20000e3c 	.word	0x20000e3c
 8004d64:	20000e40 	.word	0x20000e40

08004d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6e:	e019      	b.n	8004da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d70:	f000 fd5c 	bl	800582c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <prvCheckTasksWaitingTermination+0x50>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fd4d 	bl	8003820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d9a:	f000 fd77 	bl	800588c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f810 	bl	8004dc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e1      	bne.n	8004d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000e58 	.word	0x20000e58
 8004dbc:	20000e84 	.word	0x20000e84
 8004dc0:	20000e6c 	.word	0x20000e6c

08004dc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d108      	bne.n	8004de8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 feea 	bl	8005bb4 <vPortFree>
				vPortFree( pxTCB );
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fee7 	bl	8005bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004de6:	e018      	b.n	8004e1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d103      	bne.n	8004dfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fede 	bl	8005bb4 <vPortFree>
	}
 8004df8:	e00f      	b.n	8004e1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d00a      	beq.n	8004e1a <prvDeleteTCB+0x56>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	60fb      	str	r3, [r7, #12]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <prvDeleteTCB+0x54>
	}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <prvResetNextTaskUnblockTime+0x40>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <prvResetNextTaskUnblockTime+0x14>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <prvResetNextTaskUnblockTime+0x16>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <prvResetNextTaskUnblockTime+0x44>)
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e46:	e008      	b.n	8004e5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <prvResetNextTaskUnblockTime+0x40>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <prvResetNextTaskUnblockTime+0x44>)
 8004e58:	6013      	str	r3, [r2, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	20000e3c 	.word	0x20000e3c
 8004e68:	20000ea4 	.word	0x20000ea4

08004e6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <xTaskGetSchedulerState+0x34>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	e008      	b.n	8004e92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <xTaskGetSchedulerState+0x38>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	e001      	b.n	8004e92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e92:	687b      	ldr	r3, [r7, #4]
	}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000e90 	.word	0x20000e90
 8004ea4:	20000eac 	.word	0x20000eac

08004ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d056      	beq.n	8004f6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <xTaskPriorityDisinherit+0xd0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d00a      	beq.n	8004ede <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	60bb      	str	r3, [r7, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d02c      	beq.n	8004f6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d128      	bne.n	8004f6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fc7e 	bl	8003820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <xTaskPriorityDisinherit+0xd4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <xTaskPriorityDisinherit+0xa4>
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <xTaskPriorityDisinherit+0xd4>)
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <xTaskPriorityDisinherit+0xd8>)
 8004f5a:	441a      	add	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fe fc01 	bl	800376a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f6c:	697b      	ldr	r3, [r7, #20]
	}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200009b0 	.word	0x200009b0
 8004f7c:	20000e8c 	.word	0x20000e8c
 8004f80:	200009b4 	.word	0x200009b4

08004f84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f94:	4b20      	ldr	r3, [pc, #128]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fc40 	bl	8003820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d10a      	bne.n	8004fbe <prvAddCurrentTaskToDelayedList+0x3a>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4819      	ldr	r0, [pc, #100]	; (800501c <prvAddCurrentTaskToDelayedList+0x98>)
 8004fb8:	f7fe fbd7 	bl	800376a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fbc:	e026      	b.n	800500c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d209      	bcs.n	8004fea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7fe fbe4 	bl	80037b0 <vListInsert>
}
 8004fe8:	e010      	b.n	800500c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fe fbda 	bl	80037b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	d202      	bcs.n	800500c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000e88 	.word	0x20000e88
 8005018:	200009b0 	.word	0x200009b0
 800501c:	20000e70 	.word	0x20000e70
 8005020:	20000e40 	.word	0x20000e40
 8005024:	20000e3c 	.word	0x20000e3c
 8005028:	20000ea4 	.word	0x20000ea4

0800502c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005036:	f000 facb 	bl	80055d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <xTimerCreateTimerTask+0x80>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d021      	beq.n	8005086 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800504a:	1d3a      	adds	r2, r7, #4
 800504c:	f107 0108 	add.w	r1, r7, #8
 8005050:	f107 030c 	add.w	r3, r7, #12
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe fb43 	bl	80036e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	9202      	str	r2, [sp, #8]
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	2302      	movs	r3, #2
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	460a      	mov	r2, r1
 800506c:	4910      	ldr	r1, [pc, #64]	; (80050b0 <xTimerCreateTimerTask+0x84>)
 800506e:	4811      	ldr	r0, [pc, #68]	; (80050b4 <xTimerCreateTimerTask+0x88>)
 8005070:	f7ff f8e4 	bl	800423c <xTaskCreateStatic>
 8005074:	4603      	mov	r3, r0
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <xTimerCreateTimerTask+0x8c>)
 8005078:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <xTimerCreateTimerTask+0x8c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005082:	2301      	movs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	613b      	str	r3, [r7, #16]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050a2:	697b      	ldr	r3, [r7, #20]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000ee0 	.word	0x20000ee0
 80050b0:	08005e8c 	.word	0x08005e8c
 80050b4:	080051d9 	.word	0x080051d9
 80050b8:	20000ee4 	.word	0x20000ee4

080050bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <xTimerGenericCommand+0x98>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d02a      	beq.n	8005148 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	dc18      	bgt.n	8005136 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005104:	f7ff feb2 	bl	8004e6c <xTaskGetSchedulerState>
 8005108:	4603      	mov	r3, r0
 800510a:	2b02      	cmp	r3, #2
 800510c:	d109      	bne.n	8005122 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <xTimerGenericCommand+0x98>)
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	f107 0110 	add.w	r1, r7, #16
 8005116:	2300      	movs	r3, #0
 8005118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511a:	f7fe fcad 	bl	8003a78 <xQueueGenericSend>
 800511e:	6278      	str	r0, [r7, #36]	; 0x24
 8005120:	e012      	b.n	8005148 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <xTimerGenericCommand+0x98>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f107 0110 	add.w	r1, r7, #16
 800512a:	2300      	movs	r3, #0
 800512c:	2200      	movs	r2, #0
 800512e:	f7fe fca3 	bl	8003a78 <xQueueGenericSend>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24
 8005134:	e008      	b.n	8005148 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <xTimerGenericCommand+0x98>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	f107 0110 	add.w	r1, r7, #16
 800513e:	2300      	movs	r3, #0
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	f7fe fd97 	bl	8003c74 <xQueueGenericSendFromISR>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800514a:	4618      	mov	r0, r3
 800514c:	3728      	adds	r7, #40	; 0x28
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000ee0 	.word	0x20000ee0

08005158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af02      	add	r7, sp, #8
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <prvProcessExpiredTimer+0x7c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3304      	adds	r3, #4
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fb55 	bl	8003820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d122      	bne.n	80051c4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	18d1      	adds	r1, r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f000 f8c8 	bl	8005320 <prvInsertTimerInActiveList>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005196:	2300      	movs	r3, #0
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2300      	movs	r3, #0
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	2100      	movs	r1, #0
 80051a0:	6978      	ldr	r0, [r7, #20]
 80051a2:	f7ff ff8b 	bl	80050bc <xTimerGenericCommand>
 80051a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60fb      	str	r3, [r7, #12]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	6978      	ldr	r0, [r7, #20]
 80051ca:	4798      	blx	r3
}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000ed8 	.word	0x20000ed8

080051d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051e0:	f107 0308 	add.w	r3, r7, #8
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f857 	bl	8005298 <prvGetNextExpireTime>
 80051ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4619      	mov	r1, r3
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f803 	bl	80051fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051f6:	f000 f8d5 	bl	80053a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051fa:	e7f1      	b.n	80051e0 <prvTimerTask+0x8>

080051fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005206:	f7ff fa4b 	bl	80046a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800520a:	f107 0308 	add.w	r3, r7, #8
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f866 	bl	80052e0 <prvSampleTimeNow>
 8005214:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d130      	bne.n	800527e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <prvProcessTimerOrBlockTask+0x3c>
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	429a      	cmp	r2, r3
 8005228:	d806      	bhi.n	8005238 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800522a:	f7ff fa47 	bl	80046bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ff91 	bl	8005158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005236:	e024      	b.n	8005282 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <prvProcessTimerOrBlockTask+0x90>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <prvProcessTimerOrBlockTask+0x94>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	4619      	mov	r1, r3
 800525e:	f7fe ffb9 	bl	80041d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005262:	f7ff fa2b 	bl	80046bc <xTaskResumeAll>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvProcessTimerOrBlockTask+0x98>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	f3bf 8f6f 	isb	sy
}
 800527c:	e001      	b.n	8005282 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800527e:	f7ff fa1d 	bl	80046bc <xTaskResumeAll>
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000edc 	.word	0x20000edc
 8005290:	20000ee0 	.word	0x20000ee0
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <prvGetNextExpireTime+0x44>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d105      	bne.n	80052ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <prvGetNextExpireTime+0x44>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e001      	b.n	80052ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000ed8 	.word	0x20000ed8

080052e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052e8:	f7ff fa86 	bl	80047f8 <xTaskGetTickCount>
 80052ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <prvSampleTimeNow+0x3c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d205      	bcs.n	8005304 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052f8:	f000 f908 	bl	800550c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e002      	b.n	800530a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <prvSampleTimeNow+0x3c>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000ee8 	.word	0x20000ee8

08005320 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d812      	bhi.n	800536c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	1ad2      	subs	r2, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e01b      	b.n	8005392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <prvInsertTimerInActiveList+0x7c>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe fa23 	bl	80037b0 <vListInsert>
 800536a:	e012      	b.n	8005392 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d206      	bcs.n	8005382 <prvInsertTimerInActiveList+0x62>
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800537c:	2301      	movs	r3, #1
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e007      	b.n	8005392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <prvInsertTimerInActiveList+0x80>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7fe fa0f 	bl	80037b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000edc 	.word	0x20000edc
 80053a0:	20000ed8 	.word	0x20000ed8

080053a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053aa:	e09d      	b.n	80054e8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da18      	bge.n	80053e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	3304      	adds	r3, #4
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61fb      	str	r3, [r7, #28]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053da:	6850      	ldr	r0, [r2, #4]
 80053dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053de:	6892      	ldr	r2, [r2, #8]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db7d      	blt.n	80054e6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fa10 	bl	8003820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005400:	463b      	mov	r3, r7
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff6c 	bl	80052e0 <prvSampleTimeNow>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b09      	cmp	r3, #9
 800540e:	d86b      	bhi.n	80054e8 <prvProcessReceivedCommands+0x144>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <prvProcessReceivedCommands+0x74>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	08005441 	.word	0x08005441
 800541c:	08005441 	.word	0x08005441
 8005420:	08005441 	.word	0x08005441
 8005424:	080054e9 	.word	0x080054e9
 8005428:	0800549d 	.word	0x0800549d
 800542c:	080054d5 	.word	0x080054d5
 8005430:	08005441 	.word	0x08005441
 8005434:	08005441 	.word	0x08005441
 8005438:	080054e9 	.word	0x080054e9
 800543c:	0800549d 	.word	0x0800549d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	18d1      	adds	r1, r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544e:	f7ff ff67 	bl	8005320 <prvInsertTimerInActiveList>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d047      	beq.n	80054e8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d13f      	bne.n	80054e8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	441a      	add	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	2100      	movs	r1, #0
 8005478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800547a:	f7ff fe1f 	bl	80050bc <xTimerGenericCommand>
 800547e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d130      	bne.n	80054e8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	61bb      	str	r3, [r7, #24]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	617b      	str	r3, [r7, #20]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	18d1      	adds	r1, r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ce:	f7ff ff27 	bl	8005320 <prvInsertTimerInActiveList>
					break;
 80054d2:	e009      	b.n	80054e8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80054de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e0:	f000 fb68 	bl	8005bb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054e4:	e000      	b.n	80054e8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <prvProcessReceivedCommands+0x164>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1d39      	adds	r1, r7, #4
 80054ee:	2200      	movs	r2, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fc57 	bl	8003da4 <xQueueReceive>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af57 	bne.w	80053ac <prvProcessReceivedCommands+0x8>
	}
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	3730      	adds	r7, #48	; 0x30
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000ee0 	.word	0x20000ee0

0800550c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005512:	e045      	b.n	80055a0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005514:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <prvSwitchTimerLists+0xbc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800551e:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <prvSwitchTimerLists+0xbc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe f977 	bl	8003820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d12e      	bne.n	80055a0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4413      	add	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	429a      	cmp	r2, r3
 8005552:	d90e      	bls.n	8005572 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <prvSwitchTimerLists+0xbc>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7fe f920 	bl	80037b0 <vListInsert>
 8005570:	e016      	b.n	80055a0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005572:	2300      	movs	r3, #0
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	2100      	movs	r1, #0
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff fd9d 	bl	80050bc <xTimerGenericCommand>
 8005582:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <prvSwitchTimerLists+0xbc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1b4      	bne.n	8005514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055aa:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <prvSwitchTimerLists+0xbc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <prvSwitchTimerLists+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <prvSwitchTimerLists+0xbc>)
 80055b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <prvSwitchTimerLists+0xc0>)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6013      	str	r3, [r2, #0]
}
 80055be:	bf00      	nop
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000ed8 	.word	0x20000ed8
 80055cc:	20000edc 	.word	0x20000edc

080055d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055d6:	f000 f929 	bl	800582c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <prvCheckForValidListAndQueue+0x60>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d120      	bne.n	8005624 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055e2:	4814      	ldr	r0, [pc, #80]	; (8005634 <prvCheckForValidListAndQueue+0x64>)
 80055e4:	f7fe f896 	bl	8003714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055e8:	4813      	ldr	r0, [pc, #76]	; (8005638 <prvCheckForValidListAndQueue+0x68>)
 80055ea:	f7fe f893 	bl	8003714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <prvCheckForValidListAndQueue+0x6c>)
 80055f0:	4a10      	ldr	r2, [pc, #64]	; (8005634 <prvCheckForValidListAndQueue+0x64>)
 80055f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <prvCheckForValidListAndQueue+0x70>)
 80055f6:	4a10      	ldr	r2, [pc, #64]	; (8005638 <prvCheckForValidListAndQueue+0x68>)
 80055f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	4b11      	ldr	r3, [pc, #68]	; (8005644 <prvCheckForValidListAndQueue+0x74>)
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <prvCheckForValidListAndQueue+0x78>)
 8005602:	2110      	movs	r1, #16
 8005604:	200a      	movs	r0, #10
 8005606:	f7fe f99d 	bl	8003944 <xQueueGenericCreateStatic>
 800560a:	4603      	mov	r3, r0
 800560c:	4a08      	ldr	r2, [pc, #32]	; (8005630 <prvCheckForValidListAndQueue+0x60>)
 800560e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <prvCheckForValidListAndQueue+0x60>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <prvCheckForValidListAndQueue+0x60>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	490b      	ldr	r1, [pc, #44]	; (800564c <prvCheckForValidListAndQueue+0x7c>)
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fdb0 	bl	8004184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005624:	f000 f932 	bl	800588c <vPortExitCritical>
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000ee0 	.word	0x20000ee0
 8005634:	20000eb0 	.word	0x20000eb0
 8005638:	20000ec4 	.word	0x20000ec4
 800563c:	20000ed8 	.word	0x20000ed8
 8005640:	20000edc 	.word	0x20000edc
 8005644:	20000f8c 	.word	0x20000f8c
 8005648:	20000eec 	.word	0x20000eec
 800564c:	08005e94 	.word	0x08005e94

08005650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b04      	subs	r3, #4
 8005660:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b04      	subs	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3b04      	subs	r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005680:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <pxPortInitialiseStack+0x54>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b14      	subs	r3, #20
 800568a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b20      	subs	r3, #32
 8005696:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005698:	68fb      	ldr	r3, [r7, #12]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	080056a9 	.word	0x080056a9

080056a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <prvTaskExitError+0x54>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d00a      	beq.n	80056d2 <prvTaskExitError+0x2a>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <prvTaskExitError+0x28>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056e6:	bf00      	nop
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0fc      	beq.n	80056e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c

08005700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <pxCurrentTCBConst2>)
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800570a:	f380 8809 	msr	PSP, r0
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	f04e 0e0d 	orr.w	lr, lr, #13
 800571e:	4770      	bx	lr

08005720 <pxCurrentTCBConst2>:
 8005720:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005728:	4806      	ldr	r0, [pc, #24]	; (8005744 <prvPortStartFirstTask+0x1c>)
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	f380 8808 	msr	MSP, r0
 8005732:	b662      	cpsie	i
 8005734:	b661      	cpsie	f
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	df00      	svc	0
 8005740:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005742:	bf00      	nop
 8005744:	e000ed08 	.word	0xe000ed08

08005748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800574e:	4b32      	ldr	r3, [pc, #200]	; (8005818 <xPortStartScheduler+0xd0>)
 8005750:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4b2a      	ldr	r3, [pc, #168]	; (800581c <xPortStartScheduler+0xd4>)
 8005774:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <xPortStartScheduler+0xd8>)
 8005778:	2207      	movs	r2, #7
 800577a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800577c:	e009      	b.n	8005792 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800577e:	4b28      	ldr	r3, [pc, #160]	; (8005820 <xPortStartScheduler+0xd8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <xPortStartScheduler+0xd8>)
 8005786:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b80      	cmp	r3, #128	; 0x80
 800579c:	d0ef      	beq.n	800577e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800579e:	4b20      	ldr	r3, [pc, #128]	; (8005820 <xPortStartScheduler+0xd8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1c3 0307 	rsb	r3, r3, #7
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00a      	beq.n	80057c0 <xPortStartScheduler+0x78>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	60bb      	str	r3, [r7, #8]
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <xPortStartScheduler+0xd8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	4a16      	ldr	r2, [pc, #88]	; (8005820 <xPortStartScheduler+0xd8>)
 80057c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <xPortStartScheduler+0xd8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057d2:	4a13      	ldr	r2, [pc, #76]	; (8005820 <xPortStartScheduler+0xd8>)
 80057d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <xPortStartScheduler+0xdc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <xPortStartScheduler+0xdc>)
 80057e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057ea:	4b0e      	ldr	r3, [pc, #56]	; (8005824 <xPortStartScheduler+0xdc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <xPortStartScheduler+0xdc>)
 80057f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057f6:	f000 f8b9 	bl	800596c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <xPortStartScheduler+0xe0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005800:	f7ff ff92 	bl	8005728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005804:	f7ff f8c4 	bl	8004990 <vTaskSwitchContext>
	prvTaskExitError();
 8005808:	f7ff ff4e 	bl	80056a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	e000e400 	.word	0xe000e400
 800581c:	20000fdc 	.word	0x20000fdc
 8005820:	20000fe0 	.word	0x20000fe0
 8005824:	e000ed20 	.word	0xe000ed20
 8005828:	2000000c 	.word	0x2000000c

0800582c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
}
 8005844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <vPortEnterCritical+0x58>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <vPortEnterCritical+0x58>)
 800584e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <vPortEnterCritical+0x58>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10f      	bne.n	8005878 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <vPortEnterCritical+0x5c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <vPortEnterCritical+0x4c>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	603b      	str	r3, [r7, #0]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <vPortEnterCritical+0x4a>
	}
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	2000000c 	.word	0x2000000c
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <vPortExitCritical+0x4c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <vPortExitCritical+0x24>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	607b      	str	r3, [r7, #4]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058b0:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <vPortExitCritical+0x4c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <vPortExitCritical+0x4c>)
 80058b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <vPortExitCritical+0x4c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d105      	bne.n	80058ce <vPortExitCritical+0x42>
 80058c2:	2300      	movs	r3, #0
 80058c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f383 8811 	msr	BASEPRI, r3
}
 80058cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr
 80058d8:	2000000c 	.word	0x2000000c
 80058dc:	00000000 	.word	0x00000000

080058e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058e0:	f3ef 8009 	mrs	r0, PSP
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <pxCurrentTCBConst>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058f0:	6010      	str	r0, [r2, #0]
 80058f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80058f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058fa:	f380 8811 	msr	BASEPRI, r0
 80058fe:	f7ff f847 	bl	8004990 <vTaskSwitchContext>
 8005902:	f04f 0000 	mov.w	r0, #0
 8005906:	f380 8811 	msr	BASEPRI, r0
 800590a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	6808      	ldr	r0, [r1, #0]
 8005912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005916:	f380 8809 	msr	PSP, r0
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	4770      	bx	lr

08005920 <pxCurrentTCBConst>:
 8005920:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
}
 8005940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005942:	f7fe ff67 	bl	8004814 <xTaskIncrementTick>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <xPortSysTickHandler+0x40>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
}
 800595e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <vPortSetupTimerInterrupt+0x30>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <vPortSetupTimerInterrupt+0x34>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <vPortSetupTimerInterrupt+0x38>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <vPortSetupTimerInterrupt+0x3c>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	4a08      	ldr	r2, [pc, #32]	; (80059ac <vPortSetupTimerInterrupt+0x40>)
 800598a:	3b01      	subs	r3, #1
 800598c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800598e:	4b03      	ldr	r3, [pc, #12]	; (800599c <vPortSetupTimerInterrupt+0x30>)
 8005990:	2207      	movs	r2, #7
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	e000e010 	.word	0xe000e010
 80059a0:	e000e018 	.word	0xe000e018
 80059a4:	20000000 	.word	0x20000000
 80059a8:	10624dd3 	.word	0x10624dd3
 80059ac:	e000e014 	.word	0xe000e014

080059b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059b6:	f3ef 8305 	mrs	r3, IPSR
 80059ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b0f      	cmp	r3, #15
 80059c0:	d914      	bls.n	80059ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <vPortValidateInterruptPriority+0x6c>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <vPortValidateInterruptPriority+0x70>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	7afa      	ldrb	r2, [r7, #11]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d20a      	bcs.n	80059ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	607b      	str	r3, [r7, #4]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <vPortValidateInterruptPriority+0x74>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <vPortValidateInterruptPriority+0x78>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d90a      	bls.n	8005a12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	603b      	str	r3, [r7, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <vPortValidateInterruptPriority+0x60>
	}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr
 8005a1c:	e000e3f0 	.word	0xe000e3f0
 8005a20:	20000fdc 	.word	0x20000fdc
 8005a24:	e000ed0c 	.word	0xe000ed0c
 8005a28:	20000fe0 	.word	0x20000fe0

08005a2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	; 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a38:	f7fe fe32 	bl	80046a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a3c:	4b58      	ldr	r3, [pc, #352]	; (8005ba0 <pvPortMalloc+0x174>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a44:	f000 f910 	bl	8005c68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a48:	4b56      	ldr	r3, [pc, #344]	; (8005ba4 <pvPortMalloc+0x178>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 808e 	bne.w	8005b72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01d      	beq.n	8005a98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d014      	beq.n	8005a98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f023 0307 	bic.w	r3, r3, #7
 8005a74:	3308      	adds	r3, #8
 8005a76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <pvPortMalloc+0x6c>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	617b      	str	r3, [r7, #20]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d069      	beq.n	8005b72 <pvPortMalloc+0x146>
 8005a9e:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <pvPortMalloc+0x17c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d864      	bhi.n	8005b72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <pvPortMalloc+0x180>)
 8005aaa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aac:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <pvPortMalloc+0x180>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ab2:	e004      	b.n	8005abe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d903      	bls.n	8005ad0 <pvPortMalloc+0xa4>
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f1      	bne.n	8005ab4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ad0:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <pvPortMalloc+0x174>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d04b      	beq.n	8005b72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2208      	movs	r2, #8
 8005ae0:	4413      	add	r3, r2
 8005ae2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	1ad2      	subs	r2, r2, r3
 8005af4:	2308      	movs	r3, #8
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d91f      	bls.n	8005b3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <pvPortMalloc+0xf8>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	613b      	str	r3, [r7, #16]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b36:	69b8      	ldr	r0, [r7, #24]
 8005b38:	f000 f8f8 	bl	8005d2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <pvPortMalloc+0x17c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <pvPortMalloc+0x17c>)
 8005b48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b4a:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <pvPortMalloc+0x17c>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <pvPortMalloc+0x184>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d203      	bcs.n	8005b5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <pvPortMalloc+0x17c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <pvPortMalloc+0x184>)
 8005b5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <pvPortMalloc+0x178>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b72:	f7fe fda3 	bl	80046bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <pvPortMalloc+0x16a>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <pvPortMalloc+0x168>
	return pvReturn;
 8005b96:	69fb      	ldr	r3, [r7, #28]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3728      	adds	r7, #40	; 0x28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20001bec 	.word	0x20001bec
 8005ba4:	20001bf8 	.word	0x20001bf8
 8005ba8:	20001bf0 	.word	0x20001bf0
 8005bac:	20001be4 	.word	0x20001be4
 8005bb0:	20001bf4 	.word	0x20001bf4

08005bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d048      	beq.n	8005c58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	425b      	negs	r3, r3
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <vPortFree+0xac>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <vPortFree+0x44>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <vPortFree+0x62>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60bb      	str	r3, [r7, #8]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <vPortFree+0xac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d115      	bne.n	8005c58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <vPortFree+0xac>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	401a      	ands	r2, r3
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c3c:	f7fe fd30 	bl	80046a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <vPortFree+0xb0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4413      	add	r3, r2
 8005c4a:	4a06      	ldr	r2, [pc, #24]	; (8005c64 <vPortFree+0xb0>)
 8005c4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c4e:	6938      	ldr	r0, [r7, #16]
 8005c50:	f000 f86c 	bl	8005d2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c54:	f7fe fd32 	bl	80046bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20001bf8 	.word	0x20001bf8
 8005c64:	20001bf0 	.word	0x20001bf0

08005c68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c74:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <prvHeapInit+0xac>)
 8005c76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3307      	adds	r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <prvHeapInit+0xac>)
 8005c98:	4413      	add	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <prvHeapInit+0xb0>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <prvHeapInit+0xb0>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0307 	bic.w	r3, r3, #7
 8005cc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <prvHeapInit+0xb4>)
 8005cc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <prvHeapInit+0xb4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <prvHeapInit+0xb4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <prvHeapInit+0xb4>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <prvHeapInit+0xb8>)
 8005cf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <prvHeapInit+0xbc>)
 8005cfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <prvHeapInit+0xc0>)
 8005d02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d06:	601a      	str	r2, [r3, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000fe4 	.word	0x20000fe4
 8005d18:	20001be4 	.word	0x20001be4
 8005d1c:	20001bec 	.word	0x20001bec
 8005d20:	20001bf4 	.word	0x20001bf4
 8005d24:	20001bf0 	.word	0x20001bf0
 8005d28:	20001bf8 	.word	0x20001bf8

08005d2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d34:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <prvInsertBlockIntoFreeList+0xa8>)
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e002      	b.n	8005d40 <prvInsertBlockIntoFreeList+0x14>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d8f7      	bhi.n	8005d3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	4413      	add	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d108      	bne.n	8005d6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	441a      	add	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	441a      	add	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d118      	bne.n	8005db4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <prvInsertBlockIntoFreeList+0xac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d00d      	beq.n	8005daa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	441a      	add	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e008      	b.n	8005dbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <prvInsertBlockIntoFreeList+0xac>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e003      	b.n	8005dbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d002      	beq.n	8005dca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr
 8005dd4:	20001be4 	.word	0x20001be4
 8005dd8:	20001bec 	.word	0x20001bec

08005ddc <__libc_init_array>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	2600      	movs	r6, #0
 8005de0:	4d0c      	ldr	r5, [pc, #48]	; (8005e14 <__libc_init_array+0x38>)
 8005de2:	4c0d      	ldr	r4, [pc, #52]	; (8005e18 <__libc_init_array+0x3c>)
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	42a6      	cmp	r6, r4
 8005dea:	d109      	bne.n	8005e00 <__libc_init_array+0x24>
 8005dec:	f000 f830 	bl	8005e50 <_init>
 8005df0:	2600      	movs	r6, #0
 8005df2:	4d0a      	ldr	r5, [pc, #40]	; (8005e1c <__libc_init_array+0x40>)
 8005df4:	4c0a      	ldr	r4, [pc, #40]	; (8005e20 <__libc_init_array+0x44>)
 8005df6:	1b64      	subs	r4, r4, r5
 8005df8:	10a4      	asrs	r4, r4, #2
 8005dfa:	42a6      	cmp	r6, r4
 8005dfc:	d105      	bne.n	8005e0a <__libc_init_array+0x2e>
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e04:	4798      	blx	r3
 8005e06:	3601      	adds	r6, #1
 8005e08:	e7ee      	b.n	8005de8 <__libc_init_array+0xc>
 8005e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0e:	4798      	blx	r3
 8005e10:	3601      	adds	r6, #1
 8005e12:	e7f2      	b.n	8005dfa <__libc_init_array+0x1e>
 8005e14:	08005ed8 	.word	0x08005ed8
 8005e18:	08005ed8 	.word	0x08005ed8
 8005e1c:	08005ed8 	.word	0x08005ed8
 8005e20:	08005edc 	.word	0x08005edc

08005e24 <memcpy>:
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	4770      	bx	lr
 8005e30:	b510      	push	{r4, lr}
 8005e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e36:	4291      	cmp	r1, r2
 8005e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3c:	d1f9      	bne.n	8005e32 <memcpy+0xe>
 8005e3e:	bd10      	pop	{r4, pc}

08005e40 <memset>:
 8005e40:	4603      	mov	r3, r0
 8005e42:	4402      	add	r2, r0
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d100      	bne.n	8005e4a <memset+0xa>
 8005e48:	4770      	bx	lr
 8005e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4e:	e7f9      	b.n	8005e44 <memset+0x4>

08005e50 <_init>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr

08005e5c <_fini>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr
