
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e454  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800e640  0800e640  0001e640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec58  0800ec58  000207e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec58  0800ec58  000207e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec58  0800ec58  000207e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec58  0800ec58  0001ec58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec5c  0800ec5c  0001ec5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007e8  20000000  0800ec60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200007e8  0800f448  000207e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cec  0800f448  00020cec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a10  00000000  00000000  00020811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d5  00000000  00000000  00035221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00038af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  00039f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efe8  00000000  00000000  0003b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aea0  00000000  00000000  0005a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4b89  00000000  00000000  000750a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119c29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a9c  00000000  00000000  00119c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200007e8 	.word	0x200007e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e624 	.word	0x0800e624

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200007ec 	.word	0x200007ec
 8000224:	0800e624 	.word	0x0800e624

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_fmul>:
 800024c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000250:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000254:	bf1e      	ittt	ne
 8000256:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800025a:	ea92 0f0c 	teqne	r2, ip
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d06f      	beq.n	8000344 <__aeabi_fmul+0xf8>
 8000264:	441a      	add	r2, r3
 8000266:	ea80 0c01 	eor.w	ip, r0, r1
 800026a:	0240      	lsls	r0, r0, #9
 800026c:	bf18      	it	ne
 800026e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000272:	d01e      	beq.n	80002b2 <__aeabi_fmul+0x66>
 8000274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000278:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800027c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000280:	fba0 3101 	umull	r3, r1, r0, r1
 8000284:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000288:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800028c:	bf3e      	ittt	cc
 800028e:	0049      	lslcc	r1, r1, #1
 8000290:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000294:	005b      	lslcc	r3, r3, #1
 8000296:	ea40 0001 	orr.w	r0, r0, r1
 800029a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029e:	2afd      	cmp	r2, #253	; 0xfd
 80002a0:	d81d      	bhi.n	80002de <__aeabi_fmul+0x92>
 80002a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	4770      	bx	lr
 80002b2:	f090 0f00 	teq	r0, #0
 80002b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ba:	bf08      	it	eq
 80002bc:	0249      	lsleq	r1, r1, #9
 80002be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c6:	3a7f      	subs	r2, #127	; 0x7f
 80002c8:	bfc2      	ittt	gt
 80002ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002d2:	4770      	bxgt	lr
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	f04f 0300 	mov.w	r3, #0
 80002dc:	3a01      	subs	r2, #1
 80002de:	dc5d      	bgt.n	800039c <__aeabi_fmul+0x150>
 80002e0:	f112 0f19 	cmn.w	r2, #25
 80002e4:	bfdc      	itt	le
 80002e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ea:	4770      	bxle	lr
 80002ec:	f1c2 0200 	rsb	r2, r2, #0
 80002f0:	0041      	lsls	r1, r0, #1
 80002f2:	fa21 f102 	lsr.w	r1, r1, r2
 80002f6:	f1c2 0220 	rsb	r2, r2, #32
 80002fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000302:	f140 0000 	adc.w	r0, r0, #0
 8000306:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800030a:	bf08      	it	eq
 800030c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000310:	4770      	bx	lr
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800031a:	bf02      	ittt	eq
 800031c:	0040      	lsleq	r0, r0, #1
 800031e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000322:	3a01      	subeq	r2, #1
 8000324:	d0f9      	beq.n	800031a <__aeabi_fmul+0xce>
 8000326:	ea40 000c 	orr.w	r0, r0, ip
 800032a:	f093 0f00 	teq	r3, #0
 800032e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000332:	bf02      	ittt	eq
 8000334:	0049      	lsleq	r1, r1, #1
 8000336:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800033a:	3b01      	subeq	r3, #1
 800033c:	d0f9      	beq.n	8000332 <__aeabi_fmul+0xe6>
 800033e:	ea41 010c 	orr.w	r1, r1, ip
 8000342:	e78f      	b.n	8000264 <__aeabi_fmul+0x18>
 8000344:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000348:	ea92 0f0c 	teq	r2, ip
 800034c:	bf18      	it	ne
 800034e:	ea93 0f0c 	teqne	r3, ip
 8000352:	d00a      	beq.n	800036a <__aeabi_fmul+0x11e>
 8000354:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000358:	bf18      	it	ne
 800035a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035e:	d1d8      	bne.n	8000312 <__aeabi_fmul+0xc6>
 8000360:	ea80 0001 	eor.w	r0, r0, r1
 8000364:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000368:	4770      	bx	lr
 800036a:	f090 0f00 	teq	r0, #0
 800036e:	bf17      	itett	ne
 8000370:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000374:	4608      	moveq	r0, r1
 8000376:	f091 0f00 	teqne	r1, #0
 800037a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037e:	d014      	beq.n	80003aa <__aeabi_fmul+0x15e>
 8000380:	ea92 0f0c 	teq	r2, ip
 8000384:	d101      	bne.n	800038a <__aeabi_fmul+0x13e>
 8000386:	0242      	lsls	r2, r0, #9
 8000388:	d10f      	bne.n	80003aa <__aeabi_fmul+0x15e>
 800038a:	ea93 0f0c 	teq	r3, ip
 800038e:	d103      	bne.n	8000398 <__aeabi_fmul+0x14c>
 8000390:	024b      	lsls	r3, r1, #9
 8000392:	bf18      	it	ne
 8000394:	4608      	movne	r0, r1
 8000396:	d108      	bne.n	80003aa <__aeabi_fmul+0x15e>
 8000398:	ea80 0001 	eor.w	r0, r0, r1
 800039c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a8:	4770      	bx	lr
 80003aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003b2:	4770      	bx	lr

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_dmul>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8de 	bleq	8000908 <__aeabi_dmul+0x1dc>
 800074c:	442c      	add	r4, r5
 800074e:	ea81 0603 	eor.w	r6, r1, r3
 8000752:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000756:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800075a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800075e:	bf18      	it	ne
 8000760:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800076c:	d038      	beq.n	80007e0 <__aeabi_dmul+0xb4>
 800076e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	fbe1 e502 	umlal	lr, r5, r1, r2
 800077a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800077e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000782:	f04f 0600 	mov.w	r6, #0
 8000786:	fbe1 5603 	umlal	r5, r6, r1, r3
 800078a:	f09c 0f00 	teq	ip, #0
 800078e:	bf18      	it	ne
 8000790:	f04e 0e01 	orrne.w	lr, lr, #1
 8000794:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000798:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800079c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a0:	d204      	bcs.n	80007ac <__aeabi_dmul+0x80>
 80007a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007a6:	416d      	adcs	r5, r5
 80007a8:	eb46 0606 	adc.w	r6, r6, r6
 80007ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c4:	bf88      	it	hi
 80007c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ca:	d81e      	bhi.n	800080a <__aeabi_dmul+0xde>
 80007cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d0:	bf08      	it	eq
 80007d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007d6:	f150 0000 	adcs.w	r0, r0, #0
 80007da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e4:	ea46 0101 	orr.w	r1, r6, r1
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f4:	bfc2      	ittt	gt
 80007f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000804:	f04f 0e00 	mov.w	lr, #0
 8000808:	3c01      	subs	r4, #1
 800080a:	f300 80ab 	bgt.w	8000964 <__aeabi_dmul+0x238>
 800080e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000812:	bfde      	ittt	le
 8000814:	2000      	movle	r0, #0
 8000816:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800081a:	bd70      	pople	{r4, r5, r6, pc}
 800081c:	f1c4 0400 	rsb	r4, r4, #0
 8000820:	3c20      	subs	r4, #32
 8000822:	da35      	bge.n	8000890 <__aeabi_dmul+0x164>
 8000824:	340c      	adds	r4, #12
 8000826:	dc1b      	bgt.n	8000860 <__aeabi_dmul+0x134>
 8000828:	f104 0414 	add.w	r4, r4, #20
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f305 	lsl.w	r3, r0, r5
 8000834:	fa20 f004 	lsr.w	r0, r0, r4
 8000838:	fa01 f205 	lsl.w	r2, r1, r5
 800083c:	ea40 0002 	orr.w	r0, r0, r2
 8000840:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000844:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	fa21 f604 	lsr.w	r6, r1, r4
 8000850:	eb42 0106 	adc.w	r1, r2, r6
 8000854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000858:	bf08      	it	eq
 800085a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f1c4 040c 	rsb	r4, r4, #12
 8000864:	f1c4 0520 	rsb	r5, r4, #32
 8000868:	fa00 f304 	lsl.w	r3, r0, r4
 800086c:	fa20 f005 	lsr.w	r0, r0, r5
 8000870:	fa01 f204 	lsl.w	r2, r1, r4
 8000874:	ea40 0002 	orr.w	r0, r0, r2
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000880:	f141 0100 	adc.w	r1, r1, #0
 8000884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000888:	bf08      	it	eq
 800088a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f1c4 0520 	rsb	r5, r4, #32
 8000894:	fa00 f205 	lsl.w	r2, r0, r5
 8000898:	ea4e 0e02 	orr.w	lr, lr, r2
 800089c:	fa20 f304 	lsr.w	r3, r0, r4
 80008a0:	fa01 f205 	lsl.w	r2, r1, r5
 80008a4:	ea43 0302 	orr.w	r3, r3, r2
 80008a8:	fa21 f004 	lsr.w	r0, r1, r4
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	fa21 f204 	lsr.w	r2, r1, r4
 80008b4:	ea20 0002 	bic.w	r0, r0, r2
 80008b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c0:	bf08      	it	eq
 80008c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f094 0f00 	teq	r4, #0
 80008cc:	d10f      	bne.n	80008ee <__aeabi_dmul+0x1c2>
 80008ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008d2:	0040      	lsls	r0, r0, #1
 80008d4:	eb41 0101 	adc.w	r1, r1, r1
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf08      	it	eq
 80008de:	3c01      	subeq	r4, #1
 80008e0:	d0f7      	beq.n	80008d2 <__aeabi_dmul+0x1a6>
 80008e2:	ea41 0106 	orr.w	r1, r1, r6
 80008e6:	f095 0f00 	teq	r5, #0
 80008ea:	bf18      	it	ne
 80008ec:	4770      	bxne	lr
 80008ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	eb43 0303 	adc.w	r3, r3, r3
 80008f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008fc:	bf08      	it	eq
 80008fe:	3d01      	subeq	r5, #1
 8000900:	d0f7      	beq.n	80008f2 <__aeabi_dmul+0x1c6>
 8000902:	ea43 0306 	orr.w	r3, r3, r6
 8000906:	4770      	bx	lr
 8000908:	ea94 0f0c 	teq	r4, ip
 800090c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000910:	bf18      	it	ne
 8000912:	ea95 0f0c 	teqne	r5, ip
 8000916:	d00c      	beq.n	8000932 <__aeabi_dmul+0x206>
 8000918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000922:	d1d1      	bne.n	80008c8 <__aeabi_dmul+0x19c>
 8000924:	ea81 0103 	eor.w	r1, r1, r3
 8000928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000936:	bf06      	itte	eq
 8000938:	4610      	moveq	r0, r2
 800093a:	4619      	moveq	r1, r3
 800093c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000940:	d019      	beq.n	8000976 <__aeabi_dmul+0x24a>
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	d102      	bne.n	800094e <__aeabi_dmul+0x222>
 8000948:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800094c:	d113      	bne.n	8000976 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	d105      	bne.n	8000960 <__aeabi_dmul+0x234>
 8000954:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000958:	bf1c      	itt	ne
 800095a:	4610      	movne	r0, r2
 800095c:	4619      	movne	r1, r3
 800095e:	d10a      	bne.n	8000976 <__aeabi_dmul+0x24a>
 8000960:	ea81 0103 	eor.w	r1, r1, r3
 8000964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000968:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800097a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800097e:	bd70      	pop	{r4, r5, r6, pc}

08000980 <__aeabi_ddiv>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000986:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800098a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800098e:	bf1d      	ittte	ne
 8000990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000994:	ea94 0f0c 	teqne	r4, ip
 8000998:	ea95 0f0c 	teqne	r5, ip
 800099c:	f000 f8a7 	bleq	8000aee <__aeabi_ddiv+0x16e>
 80009a0:	eba4 0405 	sub.w	r4, r4, r5
 80009a4:	ea81 0e03 	eor.w	lr, r1, r3
 80009a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b0:	f000 8088 	beq.w	8000ac4 <__aeabi_ddiv+0x144>
 80009b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009d8:	429d      	cmp	r5, r3
 80009da:	bf08      	it	eq
 80009dc:	4296      	cmpeq	r6, r2
 80009de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009e6:	d202      	bcs.n	80009ee <__aeabi_ddiv+0x6e>
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	1ab6      	subs	r6, r6, r2
 80009f0:	eb65 0503 	sbc.w	r5, r5, r3
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a02:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0a:	bf22      	ittt	cs
 8000a0c:	1ab6      	subcs	r6, r6, r2
 8000a0e:	4675      	movcs	r5, lr
 8000a10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a22:	bf22      	ittt	cs
 8000a24:	1ab6      	subcs	r6, r6, r2
 8000a26:	4675      	movcs	r5, lr
 8000a28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3a:	bf22      	ittt	cs
 8000a3c:	1ab6      	subcs	r6, r6, r2
 8000a3e:	4675      	movcs	r5, lr
 8000a40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a52:	bf22      	ittt	cs
 8000a54:	1ab6      	subcs	r6, r6, r2
 8000a56:	4675      	movcs	r5, lr
 8000a58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a60:	d018      	beq.n	8000a94 <__aeabi_ddiv+0x114>
 8000a62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a7e:	d1c0      	bne.n	8000a02 <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	d10b      	bne.n	8000a9e <__aeabi_ddiv+0x11e>
 8000a86:	ea41 0100 	orr.w	r1, r1, r0
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a92:	e7b6      	b.n	8000a02 <__aeabi_ddiv+0x82>
 8000a94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a98:	bf04      	itt	eq
 8000a9a:	4301      	orreq	r1, r0
 8000a9c:	2000      	moveq	r0, #0
 8000a9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa2:	bf88      	it	hi
 8000aa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aa8:	f63f aeaf 	bhi.w	800080a <__aeabi_dmul+0xde>
 8000aac:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab0:	bf04      	itt	eq
 8000ab2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ab6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ac8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000acc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad0:	bfc2      	ittt	gt
 8000ad2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ad6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ada:	bd70      	popgt	{r4, r5, r6, pc}
 8000adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae0:	f04f 0e00 	mov.w	lr, #0
 8000ae4:	3c01      	subs	r4, #1
 8000ae6:	e690      	b.n	800080a <__aeabi_dmul+0xde>
 8000ae8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aec:	e68d      	b.n	800080a <__aeabi_dmul+0xde>
 8000aee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000af2:	ea94 0f0c 	teq	r4, ip
 8000af6:	bf08      	it	eq
 8000af8:	ea95 0f0c 	teqeq	r5, ip
 8000afc:	f43f af3b 	beq.w	8000976 <__aeabi_dmul+0x24a>
 8000b00:	ea94 0f0c 	teq	r4, ip
 8000b04:	d10a      	bne.n	8000b1c <__aeabi_ddiv+0x19c>
 8000b06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0a:	f47f af34 	bne.w	8000976 <__aeabi_dmul+0x24a>
 8000b0e:	ea95 0f0c 	teq	r5, ip
 8000b12:	f47f af25 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e72c      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b1c:	ea95 0f0c 	teq	r5, ip
 8000b20:	d106      	bne.n	8000b30 <__aeabi_ddiv+0x1b0>
 8000b22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b26:	f43f aefd 	beq.w	8000924 <__aeabi_dmul+0x1f8>
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	e722      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3a:	f47f aec5 	bne.w	80008c8 <__aeabi_dmul+0x19c>
 8000b3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b42:	f47f af0d 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b4a:	f47f aeeb 	bne.w	8000924 <__aeabi_dmul+0x1f8>
 8000b4e:	e712      	b.n	8000976 <__aeabi_dmul+0x24a>

08000b50 <__gedf2>:
 8000b50:	f04f 3cff 	mov.w	ip, #4294967295
 8000b54:	e006      	b.n	8000b64 <__cmpdf2+0x4>
 8000b56:	bf00      	nop

08000b58 <__ledf2>:
 8000b58:	f04f 0c01 	mov.w	ip, #1
 8000b5c:	e002      	b.n	8000b64 <__cmpdf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__cmpdf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b7a:	d01b      	beq.n	8000bb4 <__cmpdf2+0x54>
 8000b7c:	b001      	add	sp, #4
 8000b7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b82:	bf0c      	ite	eq
 8000b84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b88:	ea91 0f03 	teqne	r1, r3
 8000b8c:	bf02      	ittt	eq
 8000b8e:	ea90 0f02 	teqeq	r0, r2
 8000b92:	2000      	moveq	r0, #0
 8000b94:	4770      	bxeq	lr
 8000b96:	f110 0f00 	cmn.w	r0, #0
 8000b9a:	ea91 0f03 	teq	r1, r3
 8000b9e:	bf58      	it	pl
 8000ba0:	4299      	cmppl	r1, r3
 8000ba2:	bf08      	it	eq
 8000ba4:	4290      	cmpeq	r0, r2
 8000ba6:	bf2c      	ite	cs
 8000ba8:	17d8      	asrcs	r0, r3, #31
 8000baa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bae:	f040 0001 	orr.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__cmpdf2+0x64>
 8000bbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bc2:	d107      	bne.n	8000bd4 <__cmpdf2+0x74>
 8000bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bcc:	d1d6      	bne.n	8000b7c <__cmpdf2+0x1c>
 8000bce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bd2:	d0d3      	beq.n	8000b7c <__cmpdf2+0x1c>
 8000bd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_cdrcmple>:
 8000bdc:	4684      	mov	ip, r0
 8000bde:	4610      	mov	r0, r2
 8000be0:	4662      	mov	r2, ip
 8000be2:	468c      	mov	ip, r1
 8000be4:	4619      	mov	r1, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	e000      	b.n	8000bec <__aeabi_cdcmpeq>
 8000bea:	bf00      	nop

08000bec <__aeabi_cdcmpeq>:
 8000bec:	b501      	push	{r0, lr}
 8000bee:	f7ff ffb7 	bl	8000b60 <__cmpdf2>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	bf48      	it	mi
 8000bf6:	f110 0f00 	cmnmi.w	r0, #0
 8000bfa:	bd01      	pop	{r0, pc}

08000bfc <__aeabi_dcmpeq>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff fff4 	bl	8000bec <__aeabi_cdcmpeq>
 8000c04:	bf0c      	ite	eq
 8000c06:	2001      	moveq	r0, #1
 8000c08:	2000      	movne	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmplt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffea 	bl	8000bec <__aeabi_cdcmpeq>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmple>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffe0 	bl	8000bec <__aeabi_cdcmpeq>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpge>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffce 	bl	8000bdc <__aeabi_cdrcmple>
 8000c40:	bf94      	ite	ls
 8000c42:	2001      	movls	r0, #1
 8000c44:	2000      	movhi	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpgt>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff ffc4 	bl	8000bdc <__aeabi_cdrcmple>
 8000c54:	bf34      	ite	cc
 8000c56:	2001      	movcc	r0, #1
 8000c58:	2000      	movcs	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_dcmpun>:
 8000c60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c68:	d102      	bne.n	8000c70 <__aeabi_dcmpun+0x10>
 8000c6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c6e:	d10a      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c78:	d102      	bne.n	8000c80 <__aeabi_dcmpun+0x20>
 8000c7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c7e:	d102      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	f04f 0001 	mov.w	r0, #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2iz>:
 8000c8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c94:	d215      	bcs.n	8000cc2 <__aeabi_d2iz+0x36>
 8000c96:	d511      	bpl.n	8000cbc <__aeabi_d2iz+0x30>
 8000c98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca0:	d912      	bls.n	8000cc8 <__aeabi_d2iz+0x3c>
 8000ca2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000caa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb6:	bf18      	it	ne
 8000cb8:	4240      	negne	r0, r0
 8000cba:	4770      	bx	lr
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4770      	bx	lr
 8000cc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cc6:	d105      	bne.n	8000cd4 <__aeabi_d2iz+0x48>
 8000cc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	bf08      	it	eq
 8000cce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cd2:	4770      	bx	lr
 8000cd4:	f04f 0000 	mov.w	r0, #0
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_d2uiz>:
 8000cdc:	004a      	lsls	r2, r1, #1
 8000cde:	d211      	bcs.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce4:	d211      	bcs.n	8000d0a <__aeabi_d2uiz+0x2e>
 8000ce6:	d50d      	bpl.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf0:	d40e      	bmi.n	8000d10 <__aeabi_d2uiz+0x34>
 8000cf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000d02:	4770      	bx	lr
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0e:	d102      	bne.n	8000d16 <__aeabi_d2uiz+0x3a>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	4770      	bx	lr
 8000d16:	f04f 0000 	mov.w	r0, #0
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2f>:
 8000d1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d24:	bf24      	itt	cs
 8000d26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d2e:	d90d      	bls.n	8000d4c <__aeabi_d2f+0x30>
 8000d30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d50:	d121      	bne.n	8000d96 <__aeabi_d2f+0x7a>
 8000d52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d56:	bfbc      	itt	lt
 8000d58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	4770      	bxlt	lr
 8000d5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d66:	f1c2 0218 	rsb	r2, r2, #24
 8000d6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d72:	fa20 f002 	lsr.w	r0, r0, r2
 8000d76:	bf18      	it	ne
 8000d78:	f040 0001 	orrne.w	r0, r0, #1
 8000d7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d88:	ea40 000c 	orr.w	r0, r0, ip
 8000d8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d94:	e7cc      	b.n	8000d30 <__aeabi_d2f+0x14>
 8000d96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d9a:	d107      	bne.n	8000dac <__aeabi_d2f+0x90>
 8000d9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da0:	bf1e      	ittt	ne
 8000da2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bxne	lr
 8000dac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <__aeabi_frsub>:
 8000dbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	e002      	b.n	8000dc8 <__addsf3>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_fsub>:
 8000dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dc8 <__addsf3>:
 8000dc8:	0042      	lsls	r2, r0, #1
 8000dca:	bf1f      	itttt	ne
 8000dcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd0:	ea92 0f03 	teqne	r2, r3
 8000dd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ddc:	d06a      	beq.n	8000eb4 <__addsf3+0xec>
 8000dde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000de6:	bfc1      	itttt	gt
 8000de8:	18d2      	addgt	r2, r2, r3
 8000dea:	4041      	eorgt	r1, r0
 8000dec:	4048      	eorgt	r0, r1
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	bfb8      	it	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	2b19      	cmp	r3, #25
 8000df6:	bf88      	it	hi
 8000df8:	4770      	bxhi	lr
 8000dfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e06:	bf18      	it	ne
 8000e08:	4240      	negne	r0, r0
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e16:	bf18      	it	ne
 8000e18:	4249      	negne	r1, r1
 8000e1a:	ea92 0f03 	teq	r2, r3
 8000e1e:	d03f      	beq.n	8000ea0 <__addsf3+0xd8>
 8000e20:	f1a2 0201 	sub.w	r2, r2, #1
 8000e24:	fa41 fc03 	asr.w	ip, r1, r3
 8000e28:	eb10 000c 	adds.w	r0, r0, ip
 8000e2c:	f1c3 0320 	rsb	r3, r3, #32
 8000e30:	fa01 f103 	lsl.w	r1, r1, r3
 8000e34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	d502      	bpl.n	8000e40 <__addsf3+0x78>
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e44:	d313      	bcc.n	8000e6e <__addsf3+0xa6>
 8000e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4a:	d306      	bcc.n	8000e5a <__addsf3+0x92>
 8000e4c:	0840      	lsrs	r0, r0, #1
 8000e4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e52:	f102 0201 	add.w	r2, r2, #1
 8000e56:	2afe      	cmp	r2, #254	; 0xfe
 8000e58:	d251      	bcs.n	8000efe <__addsf3+0x136>
 8000e5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	ea40 0003 	orr.w	r0, r0, r3
 8000e6c:	4770      	bx	lr
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	eb40 0000 	adc.w	r0, r0, r0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	bf28      	it	cs
 8000e78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e7c:	d2ed      	bcs.n	8000e5a <__addsf3+0x92>
 8000e7e:	fab0 fc80 	clz	ip, r0
 8000e82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e86:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e8e:	bfaa      	itet	ge
 8000e90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e94:	4252      	neglt	r2, r2
 8000e96:	4318      	orrge	r0, r3
 8000e98:	bfbc      	itt	lt
 8000e9a:	40d0      	lsrlt	r0, r2
 8000e9c:	4318      	orrlt	r0, r3
 8000e9e:	4770      	bx	lr
 8000ea0:	f092 0f00 	teq	r2, #0
 8000ea4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ea8:	bf06      	itte	eq
 8000eaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eae:	3201      	addeq	r2, #1
 8000eb0:	3b01      	subne	r3, #1
 8000eb2:	e7b5      	b.n	8000e20 <__addsf3+0x58>
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d021      	beq.n	8000f08 <__addsf3+0x140>
 8000ec4:	ea92 0f03 	teq	r2, r3
 8000ec8:	d004      	beq.n	8000ed4 <__addsf3+0x10c>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	bf08      	it	eq
 8000ed0:	4608      	moveq	r0, r1
 8000ed2:	4770      	bx	lr
 8000ed4:	ea90 0f01 	teq	r0, r1
 8000ed8:	bf1c      	itt	ne
 8000eda:	2000      	movne	r0, #0
 8000edc:	4770      	bxne	lr
 8000ede:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee2:	d104      	bne.n	8000eee <__addsf3+0x126>
 8000ee4:	0040      	lsls	r0, r0, #1
 8000ee6:	bf28      	it	cs
 8000ee8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef2:	bf3c      	itt	cc
 8000ef4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ef8:	4770      	bxcc	lr
 8000efa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000efe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f0c:	bf16      	itet	ne
 8000f0e:	4608      	movne	r0, r1
 8000f10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f14:	4601      	movne	r1, r0
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	bf06      	itte	eq
 8000f1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f1e:	ea90 0f01 	teqeq	r0, r1
 8000f22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_ui2f>:
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e004      	b.n	8000f38 <__aeabi_i2f+0x8>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_i2f>:
 8000f30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f34:	bf48      	it	mi
 8000f36:	4240      	negmi	r0, r0
 8000f38:	ea5f 0c00 	movs.w	ip, r0
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f44:	4601      	mov	r1, r0
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	e01c      	b.n	8000f86 <__aeabi_l2f+0x2a>

08000f4c <__aeabi_ul2f>:
 8000f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f50:	bf08      	it	eq
 8000f52:	4770      	bxeq	lr
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e00a      	b.n	8000f70 <__aeabi_l2f+0x14>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_l2f>:
 8000f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f60:	bf08      	it	eq
 8000f62:	4770      	bxeq	lr
 8000f64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	d502      	bpl.n	8000f70 <__aeabi_l2f+0x14>
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	ea5f 0c01 	movs.w	ip, r1
 8000f74:	bf02      	ittt	eq
 8000f76:	4684      	moveq	ip, r0
 8000f78:	4601      	moveq	r1, r0
 8000f7a:	2000      	moveq	r0, #0
 8000f7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f80:	bf08      	it	eq
 8000f82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8a:	fabc f28c 	clz	r2, ip
 8000f8e:	3a08      	subs	r2, #8
 8000f90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f94:	db10      	blt.n	8000fb8 <__aeabi_l2f+0x5c>
 8000f96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa0:	f1c2 0220 	rsb	r2, r2, #32
 8000fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fac:	eb43 0002 	adc.w	r0, r3, r2
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f102 0220 	add.w	r2, r2, #32
 8000fbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc0:	f1c2 0220 	rsb	r2, r2, #32
 8000fc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000fcc:	eb43 0002 	adc.w	r0, r3, r2
 8000fd0:	bf08      	it	eq
 8000fd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fd6:	4770      	bx	lr

08000fd8 <__gesf2>:
 8000fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fdc:	e006      	b.n	8000fec <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__lesf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	e002      	b.n	8000fec <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__cmpsf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	bf18      	it	ne
 8000ffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001002:	d011      	beq.n	8001028 <__cmpsf2+0x40>
 8001004:	b001      	add	sp, #4
 8001006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100a:	bf18      	it	ne
 800100c:	ea90 0f01 	teqne	r0, r1
 8001010:	bf58      	it	pl
 8001012:	ebb2 0003 	subspl.w	r0, r2, r3
 8001016:	bf88      	it	hi
 8001018:	17c8      	asrhi	r0, r1, #31
 800101a:	bf38      	it	cc
 800101c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001020:	bf18      	it	ne
 8001022:	f040 0001 	orrne.w	r0, r0, #1
 8001026:	4770      	bx	lr
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	d102      	bne.n	8001034 <__cmpsf2+0x4c>
 800102e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001032:	d105      	bne.n	8001040 <__cmpsf2+0x58>
 8001034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001038:	d1e4      	bne.n	8001004 <__cmpsf2+0x1c>
 800103a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103e:	d0e1      	beq.n	8001004 <__cmpsf2+0x1c>
 8001040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b50f      	push	{r0, r1, r2, r3, lr}
 8001052:	f7ff ffc9 	bl	8000fe8 <__cmpsf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cfcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cfcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cfcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffd2 	bl	8001048 <__aeabi_cfrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc8 	bl	8001048 <__aeabi_cfrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_f2iz>:
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010cc:	d30f      	bcc.n	80010ee <__aeabi_f2iz+0x2a>
 80010ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d6:	d90d      	bls.n	80010f4 <__aeabi_f2iz+0x30>
 80010d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e4:	fa23 f002 	lsr.w	r0, r3, r2
 80010e8:	bf18      	it	ne
 80010ea:	4240      	negne	r0, r0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2iz+0x3a>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d105      	bne.n	800110a <__aeabi_f2iz+0x46>
 80010fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001102:	bf08      	it	eq
 8001104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001108:	4770      	bx	lr
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4770      	bx	lr

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fd77 	bl	8000c10 <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff faed 	bl	800072c <__aeabi_dmul>
 8001152:	f7ff fdc3 	bl	8000cdc <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff fae4 	bl	800072c <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7ff f926 	bl	80003bc <__aeabi_dsub>
 8001170:	f7ff fdb4 	bl	8000cdc <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <InitMCC>:
extern int speedD;
extern int speedG;


void InitMCC()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <InitMCC+0x2c>)
 8001188:	f006 fc46 	bl	8007a18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800118c:	2104      	movs	r1, #4
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <InitMCC+0x2c>)
 8001190:	f006 fc42 	bl	8007a18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001194:	2108      	movs	r1, #8
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <InitMCC+0x2c>)
 8001198:	f006 fc3e 	bl	8007a18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800119c:	210c      	movs	r1, #12
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <InitMCC+0x2c>)
 80011a0:	f006 fc3a 	bl	8007a18 <HAL_TIM_PWM_Start>
	Stop();
 80011a4:	f000 f888 	bl	80012b8 <Stop>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000a00 	.word	0x20000a00

080011b0 <Avancer>:

void Avancer(int vitesse)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2bc8      	cmp	r3, #200	; 0xc8
 80011bc:	dc02      	bgt.n	80011c4 <Avancer+0x14>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da01      	bge.n	80011c8 <Avancer+0x18>
 80011c4:	f002 f8ce 	bl	8003364 <Error_Handler>
	TIM1->CCR1=vitesse;
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <Avancer+0x38>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <Avancer+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <Avancer+0x38>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <Avancer+0x38>)
 80011dc:	2200      	movs	r2, #0
 80011de:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012c00 	.word	0x40012c00

080011ec <AvancerPI>:

void AvancerPI(int moteur, int vitesse)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2bc8      	cmp	r3, #200	; 0xc8
 80011fa:	dc02      	bgt.n	8001202 <AvancerPI+0x16>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da01      	bge.n	8001206 <AvancerPI+0x1a>
 8001202:	f002 f8af 	bl	8003364 <Error_Handler>
	if (moteur)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <AvancerPI+0x2e>
	{
		TIM1->CCR1=0;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <AvancerPI+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=vitesse;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <AvancerPI+0x44>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM1->CCR3=0;
		TIM1->CCR4=vitesse;
	}
}
 8001218:	e005      	b.n	8001226 <AvancerPI+0x3a>
		TIM1->CCR3=0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <AvancerPI+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <AvancerPI+0x44>)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012c00 	.word	0x40012c00

08001234 <Reculer>:

void Reculer(int vitesse)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2bc8      	cmp	r3, #200	; 0xc8
 8001240:	dc02      	bgt.n	8001248 <Reculer+0x14>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da01      	bge.n	800124c <Reculer+0x18>
 8001248:	f002 f88c 	bl	8003364 <Error_Handler>
	TIM1->CCR1=0;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Reculer+0x38>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <Reculer+0x38>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <Reculer+0x38>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <Reculer+0x38>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40012c00 	.word	0x40012c00

08001270 <ReculerPI>:

void ReculerPI(int moteur, int vitesse)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2bc8      	cmp	r3, #200	; 0xc8
 800127e:	dc02      	bgt.n	8001286 <ReculerPI+0x16>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	da01      	bge.n	800128a <ReculerPI+0x1a>
 8001286:	f002 f86d 	bl	8003364 <Error_Handler>
	if (moteur)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <ReculerPI+0x2e>
	{
		TIM1->CCR1=vitesse;
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <ReculerPI+0x44>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <ReculerPI+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM1->CCR3=vitesse;
		TIM1->CCR4=0;
	}
}
 800129c:	e005      	b.n	80012aa <ReculerPI+0x3a>
		TIM1->CCR3=vitesse;
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <ReculerPI+0x44>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4=0;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <ReculerPI+0x44>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <Stop>:

void Stop(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <Stop+0x24>)
 80012be:	22c8      	movs	r2, #200	; 0xc8
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <Stop+0x24>)
 80012c4:	22c8      	movs	r2, #200	; 0xc8
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <Stop+0x24>)
 80012ca:	22c8      	movs	r2, #200	; 0xc8
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <Stop+0x24>)
 80012d0:	22c8      	movs	r2, #200	; 0xc8
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40012c00 	.word	0x40012c00

080012e0 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2bc8      	cmp	r3, #200	; 0xc8
 80012ee:	dc02      	bgt.n	80012f6 <Tourner+0x16>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da01      	bge.n	80012fa <Tourner+0x1a>
 80012f6:	f002 f835 	bl	8003364 <Error_Handler>
	if(sens)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <Tourner+0x68>)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <Tourner+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Tourner+0x68>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <Tourner+0x68>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8001318:	e011      	b.n	800133e <Tourner+0x5e>
	else if(!sens)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <Tourner+0x5a>
		    TIM1->CCR1=0;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <Tourner+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <Tourner+0x68>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <Tourner+0x68>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <Tourner+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001338:	e001      	b.n	800133e <Tourner+0x5e>
	else Error_Handler();
 800133a:	f002 f813 	bl	8003364 <Error_Handler>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00

0800134c <ReadEncodeur>:

void ReadEncodeur()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	tickD = Mid_Period_TIM2 - (TIM2->CNT);
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800135a:	337f      	adds	r3, #127	; 0x7f
 800135c:	461a      	mov	r2, r3
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <ReadEncodeur+0x40>)
 8001360:	601a      	str	r2, [r3, #0]
	TIM2->CNT = Mid_Period_TIM2;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	tickG = (TIM5->CNT) - Mid_Period_TIM5;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <ReadEncodeur+0x44>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001374:	3b7f      	subs	r3, #127	; 0x7f
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <ReadEncodeur+0x48>)
 800137a:	601a      	str	r2, [r3, #0]
	TIM5->CNT = Mid_Period_TIM5;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <ReadEncodeur+0x44>)
 800137e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000900 	.word	0x20000900
 8001390:	40000c00 	.word	0x40000c00
 8001394:	20000908 	.word	0x20000908

08001398 <PIController_Init>:
 * @param struct pi
 *
 * @return None
 */
void PIController_Init(PIController *pi)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	pi->integrator = 0.0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
	pi->prevError  = 0.0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

	pi->out = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

	pi->Kp = 1.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013be:	601a      	str	r2, [r3, #0]
	pi->Ki = 0.5;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013c6:	605a      	str	r2, [r3, #4]

	pi->limMin_output = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	pi->limMax_output = MAX_ARR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <PIController_Init+0x74>)
 80013d4:	60da      	str	r2, [r3, #12]

		/* Integrator limits */
	pi->limMin_integrator = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
	pi->limMax_integrator = MAX_ARR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <PIController_Init+0x74>)
 80013e2:	615a      	str	r2, [r3, #20]

		/* Sample time (in seconds) */
	pi->T = 0.1; // 10Hz frequence Tim1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <PIController_Init+0x78>)
 80013e8:	619a      	str	r2, [r3, #24]

		/* Controller "memory" */
	pi->integrator = 0.0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
	pi->prevError = 0.0;		/* Required for integrator */
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]

		/* Controller output */
	pi->out = 0.0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	43480000 	.word	0x43480000
 8001410:	3dcccccd 	.word	0x3dcccccd

08001414 <PIController_Update>:
 * @param measurement
 *
 * @return None
 */
float PIController_Update(PIController *pi, float consigne, float measurement)
{
 8001414:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]

    float error = consigne - measurement;
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fccd 	bl	8000dc4 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	617b      	str	r3, [r7, #20]

    float proportional = pi->Kp * error;	//Proportional
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f7fe ff09 	bl	800024c <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

    pi->integrator = pi->integrator + 0.5 * pi->Ki * pi->T * (error + pi->prevError);	//Integrator
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f91a 	bl	800067c <__aeabi_f2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f913 	bl	800067c <__aeabi_f2d>
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <PIController_Update+0x154>)
 800145c:	f7ff f966 	bl	800072c <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f905 	bl	800067c <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4640      	mov	r0, r8
 8001478:	4649      	mov	r1, r9
 800147a:	f7ff f957 	bl	800072c <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4690      	mov	r8, r2
 8001484:	4699      	mov	r9, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc9b 	bl	8000dc8 <__addsf3>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f8f1 	bl	800067c <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4640      	mov	r0, r8
 80014a0:	4649      	mov	r1, r9
 80014a2:	f7ff f943 	bl	800072c <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff87 	bl	80003c0 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fc2f 	bl	8000d1c <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	61da      	str	r2, [r3, #28]

    if (pi->integrator > pi->limMax_integrator) pi->integrator = pi->limMax_integrator; //anti-wind-up par ecretage
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fdee 	bl	80010b0 <__aeabi_fcmpgt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <PIController_Update+0xd0>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	61da      	str	r2, [r3, #28]
 80014e2:	e00e      	b.n	8001502 <PIController_Update+0xee>
    else if (pi->integrator < pi->limMin_integrator) pi->integrator = pi->limMin_integrator;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fdc0 	bl	8001074 <__aeabi_fcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <PIController_Update+0xee>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	61da      	str	r2, [r3, #28]


    pi->out = proportional + pi->integrator;	//Output
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc5d 	bl	8000dc8 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

    if (pi->out > pi->limMax_output) pi->out = pi->limMax_output;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fdc5 	bl	80010b0 <__aeabi_fcmpgt>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <PIController_Update+0x122>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
 8001534:	e00e      	b.n	8001554 <PIController_Update+0x140>
    else if (pi->out < pi->limMin_output) pi->out = pi->limMin_output;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff fd97 	bl	8001074 <__aeabi_fcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <PIController_Update+0x140>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

    pi->prevError       = error;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	621a      	str	r2, [r3, #32]

    return pi->out;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001568:	3fe00000 	.word	0x3fe00000

0800156c <raspGetChar>:
extern uint8_t uartTxBufferRasp[UART_TX_BUFFER_SIZE];
extern uint8_t stringSizeRasp;
int bits[8] = {0};

void raspGetChar(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart1, uartRxBufferRasp, NB_CARACT, HAL_MAX_DELAY); //ecrit à l'ordi
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	220e      	movs	r2, #14
 8001578:	491e      	ldr	r1, [pc, #120]	; (80015f4 <raspGetChar+0x88>)
 800157a:	481f      	ldr	r0, [pc, #124]	; (80015f8 <raspGetChar+0x8c>)
 800157c:	f007 fc50 	bl	8008e20 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, newlineRasp, sizeof(newlineRasp), HAL_MAX_DELAY);
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2203      	movs	r2, #3
 8001586:	491d      	ldr	r1, [pc, #116]	; (80015fc <raspGetChar+0x90>)
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <raspGetChar+0x8c>)
 800158a:	f007 fc49 	bl	8008e20 <HAL_UART_Transmit>

	char* token;

	argcRasp = 0;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <raspGetChar+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_RX_BUFFER_SIZE_RASP; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	e00b      	b.n	80015b2 <raspGetChar+0x46>
	{
		cmdBufferRasp[i] = uartRxBufferRasp[i];
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <raspGetChar+0x88>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	7819      	ldrb	r1, [r3, #0]
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <raspGetChar+0x98>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_RX_BUFFER_SIZE_RASP; i++)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b0d      	cmp	r3, #13
 80015b6:	ddf0      	ble.n	800159a <raspGetChar+0x2e>
	}

	token = (char*)strtok(cmdBufferRasp, " ");
 80015b8:	4913      	ldr	r1, [pc, #76]	; (8001608 <raspGetChar+0x9c>)
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <raspGetChar+0x98>)
 80015bc:	f00a f806 	bl	800b5cc <strtok>
 80015c0:	6078      	str	r0, [r7, #4]
	while(token!=NULL)
 80015c2:	e00f      	b.n	80015e4 <raspGetChar+0x78>
	{
		argvRasp[argcRasp++] = token;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <raspGetChar+0x94>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	b2d1      	uxtb	r1, r2
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <raspGetChar+0x94>)
 80015ce:	7011      	strb	r1, [r2, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <raspGetChar+0xa0>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		token = (char*)strtok(NULL, " ");
 80015da:	490b      	ldr	r1, [pc, #44]	; (8001608 <raspGetChar+0x9c>)
 80015dc:	2000      	movs	r0, #0
 80015de:	f009 fff5 	bl	800b5cc <strtok>
 80015e2:	6078      	str	r0, [r7, #4]
	while(token!=NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ec      	bne.n	80015c4 <raspGetChar+0x58>
	}

}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000bfc 	.word	0x20000bfc
 80015f8:	20000c0c 	.word	0x20000c0c
 80015fc:	20000020 	.word	0x20000020
 8001600:	20000868 	.word	0x20000868
 8001604:	20000804 	.word	0x20000804
 8001608:	0800e640 	.word	0x0800e640
 800160c:	20000844 	.word	0x20000844

08001610 <raspErrorReceive>:



void raspErrorReceive(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, errlect, sizeof(errlect), HAL_MAX_DELAY);
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	221d      	movs	r2, #29
 800161a:	4903      	ldr	r1, [pc, #12]	; (8001628 <raspErrorReceive+0x18>)
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <raspErrorReceive+0x1c>)
 800161e:	f007 fbff 	bl	8008e20 <HAL_UART_Transmit>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000
 800162c:	20000c0c 	.word	0x20000c0c

08001630 <raspExec>:
/**
  * @brief  Call function depends of the value of argcRasp and argvRasp
  * @retval None
  */
void raspExec(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af02      	add	r7, sp, #8
	if(strcmp(argvRasp[0],"FM")==0 && strcmp(argvRasp[5],"RT")==0)
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <raspExec+0x94>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4923      	ldr	r1, [pc, #140]	; (80016c8 <raspExec+0x98>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fdf3 	bl	8000228 <strcmp>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d136      	bne.n	80016b6 <raspExec+0x86>
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <raspExec+0x94>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <raspExec+0x9c>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdea 	bl	8000228 <strcmp>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d12d      	bne.n	80016b6 <raspExec+0x86>
	{
		enable = atoi(argvRasp[1]);
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <raspExec+0x94>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f008 fa2c 	bl	8009abc <atoi>
 8001664:	4603      	mov	r3, r0
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <raspExec+0xa0>)
 8001668:	6013      	str	r3, [r2, #0]
		actionRasp = atoi(argvRasp[2]);
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <raspExec+0x94>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4618      	mov	r0, r3
 8001670:	f008 fa24 	bl	8009abc <atoi>
 8001674:	4603      	mov	r3, r0
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <raspExec+0xa4>)
 8001678:	6013      	str	r3, [r2, #0]
		sensRasp = atoi(argvRasp[3]);
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <raspExec+0x94>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	f008 fa1c 	bl	8009abc <atoi>
 8001684:	4603      	mov	r3, r0
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <raspExec+0xa8>)
 8001688:	6013      	str	r3, [r2, #0]
		couleur = atoi(argvRasp[4]);
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <raspExec+0x94>)
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	4618      	mov	r0, r3
 8001690:	f008 fa14 	bl	8009abc <atoi>
 8001694:	4603      	mov	r3, r0
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <raspExec+0xac>)
 8001698:	6013      	str	r3, [r2, #0]
		printf("%d %d %d %d\r\n", enable, actionRasp, sensRasp, couleur);
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <raspExec+0xa0>)
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <raspExec+0xa4>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <raspExec+0xa8>)
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <raspExec+0xac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4603      	mov	r3, r0
 80016ae:	480c      	ldr	r0, [pc, #48]	; (80016e0 <raspExec+0xb0>)
 80016b0:	f009 f8b6 	bl	800a820 <iprintf>
 80016b4:	e002      	b.n	80016bc <raspExec+0x8c>
	}

	else{
		raspErrorReceive();
 80016b6:	f7ff ffab 	bl	8001610 <raspErrorReceive>
	}

}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000844 	.word	0x20000844
 80016c8:	0800e644 	.word	0x0800e644
 80016cc:	0800e648 	.word	0x0800e648
 80016d0:	2000091c 	.word	0x2000091c
 80016d4:	20000110 	.word	0x20000110
 80016d8:	20000914 	.word	0x20000914
 80016dc:	20000918 	.word	0x20000918
 80016e0:	0800e64c 	.word	0x0800e64c

080016e4 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f640 0298 	movw	r2, #2200	; 0x898
 80016f2:	4293      	cmp	r3, r2
 80016f4:	dc08      	bgt.n	8001708 <ControlServo+0x24>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016fc:	db04      	blt.n	8001708 <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <ControlServo+0x30>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 8001704:	2300      	movs	r3, #0
 8001706:	e000      	b.n	800170a <ControlServo+0x26>
	}
	else
	{
		return 1;
 8001708:	2301      	movs	r3, #1
	}
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40000400 	.word	0x40000400

08001718 <Debut_Test>:
#define OFFSET_OUVERTURE_PINCE 90
#define TOF_DEVANT_CANNETTE_VALUE 250
#define TOF_SEUIL 1000

void Debut_Test()
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	start = (start+1)%2;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <Debut_Test+0x28>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	bfb8      	it	lt
 800172a:	425b      	neglt	r3, r3
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <Debut_Test+0x28>)
 800172e:	6013      	str	r3, [r2, #0]
	dist = 0;
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <Debut_Test+0x2c>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000086c 	.word	0x2000086c
 8001744:	200008fc 	.word	0x200008fc

08001748 <Test_Canette>:
/*Avant test Attention :
 * verifier que TOF_dist est MAJ souvent (mettre dans Tim3)
 * verifier valeur TOF_dist quand rien n'est detecte (est ce 0 ou Max Val ?)
 */
void Test_Canette()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

	int angle = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	int dist_cannette = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]

	/* Init - ouverture fermeture des pinces */
	ControlServo(SERVO_OPEN);
 8001756:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800175a:	f7ff ffc3 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 800175e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001762:	f002 ffd1 	bl	8004708 <HAL_Delay>
	ControlServo(SERVO_CLOSED);
 8001766:	f44f 7052 	mov.w	r0, #840	; 0x348
 800176a:	f7ff ffbb 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 800176e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001772:	f002 ffc9 	bl	8004708 <HAL_Delay>


	/* Detection canette - rotation + lecture TOF + stockage angle */
	consigneD = 200;	//vitesse
 8001776:	4b83      	ldr	r3, [pc, #524]	; (8001984 <Test_Canette+0x23c>)
 8001778:	22c8      	movs	r2, #200	; 0xc8
 800177a:	601a      	str	r2, [r3, #0]
	consigneG = 200;	//vitesse
 800177c:	4b82      	ldr	r3, [pc, #520]	; (8001988 <Test_Canette+0x240>)
 800177e:	22c8      	movs	r2, #200	; 0xc8
 8001780:	601a      	str	r2, [r3, #0]
	action = TOURNER;
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <Test_Canette+0x244>)
 8001784:	2202      	movs	r2, #2
 8001786:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001788:	4b81      	ldr	r3, [pc, #516]	; (8001990 <Test_Canette+0x248>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
	while( (TOF_dist > TOF_SEUIL) && (dist < TOUR)) //seuil de detection à TOF_SEUIL mm
 800178e:	bf00      	nop
 8001790:	4b80      	ldr	r3, [pc, #512]	; (8001994 <Test_Canette+0x24c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001798:	dd05      	ble.n	80017a6 <Test_Canette+0x5e>
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <Test_Canette+0x248>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f640 02ab 	movw	r2, #2219	; 0x8ab
 80017a2:	4293      	cmp	r3, r2
 80017a4:	ddf4      	ble.n	8001790 <Test_Canette+0x48>
	{
	}
	action =  STOP;
 80017a6:	4b79      	ldr	r3, [pc, #484]	; (800198c <Test_Canette+0x244>)
 80017a8:	2203      	movs	r2, #3
 80017aa:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 80017ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b0:	f002 ffaa 	bl	8004708 <HAL_Delay>
	if(dist > TOUR) Error_Handler(); 	//Systeme en default cannette non vue
 80017b4:	4b76      	ldr	r3, [pc, #472]	; (8001990 <Test_Canette+0x248>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f640 02ac 	movw	r2, #2220	; 0x8ac
 80017bc:	4293      	cmp	r3, r2
 80017be:	dd01      	ble.n	80017c4 <Test_Canette+0x7c>
 80017c0:	f001 fdd0 	bl	8003364 <Error_Handler>
	angle = dist; 						//on memorise la valeur de l'angle parcouru
 80017c4:	4b72      	ldr	r3, [pc, #456]	; (8001990 <Test_Canette+0x248>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	607b      	str	r3, [r7, #4]


	/* Avancer tout droit + mesure distance jusqu'à TOF = 0*/
	action =  AVANCER;
 80017ca:	4b70      	ldr	r3, [pc, #448]	; (800198c <Test_Canette+0x244>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	dist = 0;
 80017d0:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <Test_Canette+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
	/*while(dist < dist_cannette - OFFSET_OUVERTURE_PINCE)
	{
	}*/
	while(TOF_dist > TOF_DEVANT_CANNETTE_VALUE) //tant qu'on est pas face a la canette
 80017d6:	bf00      	nop
 80017d8:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <Test_Canette+0x24c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2bfa      	cmp	r3, #250	; 0xfa
 80017de:	dcfb      	bgt.n	80017d8 <Test_Canette+0x90>
	{
	}
	action =  STOP;
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <Test_Canette+0x244>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	601a      	str	r2, [r3, #0]
	dist_cannette = dist;
 80017e6:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <Test_Canette+0x248>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	603b      	str	r3, [r7, #0]
	dist = 0;
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <Test_Canette+0x248>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 80017f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f6:	f002 ff87 	bl	8004708 <HAL_Delay>

	/* Ouvrir PINCE + Avancer tout droit OFFSET MESURE TOF */

	ControlServo(SERVO_OPEN);
 80017fa:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80017fe:	f7ff ff71 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 8001802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001806:	f002 ff7f 	bl	8004708 <HAL_Delay>

	action =  AVANCER;
 800180a:	4b60      	ldr	r3, [pc, #384]	; (800198c <Test_Canette+0x244>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001810:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <Test_Canette+0x248>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
	while(dist < OFFSET_OUVERTURE_PINCE )
 8001816:	bf00      	nop
 8001818:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <Test_Canette+0x248>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b59      	cmp	r3, #89	; 0x59
 800181e:	ddfb      	ble.n	8001818 <Test_Canette+0xd0>
	{
	}
	action =  STOP;
 8001820:	4b5a      	ldr	r3, [pc, #360]	; (800198c <Test_Canette+0x244>)
 8001822:	2203      	movs	r2, #3
 8001824:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001826:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <Test_Canette+0x248>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f002 ff6a 	bl	8004708 <HAL_Delay>


	/* Fermer Pince + Rotation demi tour*/

	ControlServo(SERVO_CLOSED);
 8001834:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001838:	f7ff ff54 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 800183c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001840:	f002 ff62 	bl	8004708 <HAL_Delay>
	action = TOURNER;
 8001844:	4b51      	ldr	r3, [pc, #324]	; (800198c <Test_Canette+0x244>)
 8001846:	2202      	movs	r2, #2
 8001848:	601a      	str	r2, [r3, #0]
	while(dist < TOUR/2)
 800184a:	bf00      	nop
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <Test_Canette+0x248>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f240 4255 	movw	r2, #1109	; 0x455
 8001854:	4293      	cmp	r3, r2
 8001856:	ddf9      	ble.n	800184c <Test_Canette+0x104>
	{
	}
	action =  STOP;
 8001858:	4b4c      	ldr	r3, [pc, #304]	; (800198c <Test_Canette+0x244>)
 800185a:	2203      	movs	r2, #3
 800185c:	601a      	str	r2, [r3, #0]
	dist = 0;
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <Test_Canette+0x248>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f002 ff4e 	bl	8004708 <HAL_Delay>

	/* Avancer valeur dist mesuree */

	action =  AVANCER;
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <Test_Canette+0x244>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <Test_Canette+0x248>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
	while(dist < dist_cannette+OFFSET_OUVERTURE_PINCE)
 8001878:	bf00      	nop
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f103 0259 	add.w	r2, r3, #89	; 0x59
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <Test_Canette+0x248>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	daf8      	bge.n	800187a <Test_Canette+0x132>
	{
	}
	action =  STOP;
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <Test_Canette+0x244>)
 800188a:	2203      	movs	r2, #3
 800188c:	601a      	str	r2, [r3, #0]
	dist = 0;
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <Test_Canette+0x248>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 8001894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001898:	f002 ff36 	bl	8004708 <HAL_Delay>


	/* Tourner (- angle) et avancer OFFSET 10cm*/

	sens = 1;
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <Test_Canette+0x250>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
	action = TOURNER;
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <Test_Canette+0x244>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	601a      	str	r2, [r3, #0]
	while(dist < angle)
 80018a8:	bf00      	nop
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <Test_Canette+0x248>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dcfa      	bgt.n	80018aa <Test_Canette+0x162>
	{
	}
	action =  STOP;
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <Test_Canette+0x244>)
 80018b6:	2203      	movs	r2, #3
 80018b8:	601a      	str	r2, [r3, #0]
	dist = 0;
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <Test_Canette+0x248>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 80018c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c4:	f002 ff20 	bl	8004708 <HAL_Delay>

	action =  AVANCER;
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <Test_Canette+0x244>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
	dist = 0;
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <Test_Canette+0x248>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
	while(dist < OFFSET_OUVERTURE_PINCE)
 80018d4:	bf00      	nop
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <Test_Canette+0x248>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b59      	cmp	r3, #89	; 0x59
 80018dc:	ddfb      	ble.n	80018d6 <Test_Canette+0x18e>
	{
	}
	action =  STOP;
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <Test_Canette+0x244>)
 80018e0:	2203      	movs	r2, #3
 80018e2:	601a      	str	r2, [r3, #0]
	dist = 0;
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <Test_Canette+0x248>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 80018ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ee:	f002 ff0b 	bl	8004708 <HAL_Delay>

	/* ouvrir pince + Reculer OFFSET 10cm*/

	ControlServo(SERVO_OPEN);
 80018f2:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80018f6:	f7ff fef5 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 80018fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fe:	f002 ff03 	bl	8004708 <HAL_Delay>

	action =  RECULER;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <Test_Canette+0x244>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <Test_Canette+0x248>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
	while(dist < OFFSET_OUVERTURE_PINCE)
 800190e:	bf00      	nop
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <Test_Canette+0x248>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b59      	cmp	r3, #89	; 0x59
 8001916:	ddfb      	ble.n	8001910 <Test_Canette+0x1c8>
	{
	}
	action =  STOP;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <Test_Canette+0x244>)
 800191a:	2203      	movs	r2, #3
 800191c:	601a      	str	r2, [r3, #0]
	dist = 0;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <Test_Canette+0x248>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 8001924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001928:	f002 feee 	bl	8004708 <HAL_Delay>

	/* Demi Tour*/

	sens = 0;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <Test_Canette+0x250>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
	action = TOURNER;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <Test_Canette+0x244>)
 8001934:	2202      	movs	r2, #2
 8001936:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <Test_Canette+0x248>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
	while(dist < TOUR/2)
 800193e:	bf00      	nop
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <Test_Canette+0x248>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f240 4255 	movw	r2, #1109	; 0x455
 8001948:	4293      	cmp	r3, r2
 800194a:	ddf9      	ble.n	8001940 <Test_Canette+0x1f8>
	{
	}
	action =  STOP;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <Test_Canette+0x244>)
 800194e:	2203      	movs	r2, #3
 8001950:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <Test_Canette+0x248>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
	HAL_Delay(DELAY);
 8001958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195c:	f002 fed4 	bl	8004708 <HAL_Delay>


	/* Fin Service */

	ControlServo(SERVO_OPEN);
 8001960:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8001964:	f7ff febe 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 8001968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196c:	f002 fecc 	bl	8004708 <HAL_Delay>
	ControlServo(SERVO_CLOSED);
 8001970:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001974:	f7ff feb6 	bl	80016e4 <ControlServo>
	HAL_Delay(DELAY);
 8001978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800197c:	f002 fec4 	bl	8004708 <HAL_Delay>

	while(1){}
 8001980:	e7fe      	b.n	8001980 <Test_Canette+0x238>
 8001982:	bf00      	nop
 8001984:	20000904 	.word	0x20000904
 8001988:	2000090c 	.word	0x2000090c
 800198c:	2000010c 	.word	0x2000010c
 8001990:	200008fc 	.word	0x200008fc
 8001994:	2000093c 	.word	0x2000093c
 8001998:	20000910 	.word	0x20000910

0800199c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <MX_ADC1_Init+0x78>)
 80019b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019da:	f002 feb9 	bl	8004750 <HAL_ADC_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019e4:	f001 fcbe 	bl	8003364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019e8:	2304      	movs	r3, #4
 80019ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_ADC1_Init+0x74>)
 80019fa:	f002 ff93 	bl	8004924 <HAL_ADC_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a04:	f001 fcae 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000870 	.word	0x20000870
 8001a14:	40012400 	.word	0x40012400

08001a18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_ADC_MspInit+0x6c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d121      	bne.n	8001a7c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_ADC_MspInit+0x70>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_ADC_MspInit+0x70>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_ADC_MspInit+0x70>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_ADC_MspInit+0x70>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_ADC_MspInit+0x70>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_ADC_MspInit+0x70>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin;
 8001a68:	2330      	movs	r3, #48	; 0x30
 8001a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_ADC_MspInit+0x74>)
 8001a78:	f003 fe1e 	bl	80056b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40012400 	.word	0x40012400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010800 	.word	0x40010800

08001a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_DMA_Init+0x38>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <MX_DMA_Init+0x38>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_DMA_Init+0x38>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2010      	movs	r0, #16
 8001ab4:	f003 f947 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f003 f960 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000

08001acc <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fd09 	bl	80024ec <initSensor>
 8001ada:	4603      	mov	r3, r0

} /* tofInit() */
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001aee:	1dfa      	adds	r2, r7, #7
 8001af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2301      	movs	r3, #1
 8001af8:	2152      	movs	r1, #82	; 0x52
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <readReg16+0x48>)
 8001afc:	f004 f9fa 	bl	8005ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 8001b00:	f107 020c 	add.w	r2, r7, #12
 8001b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	2153      	movs	r1, #83	; 0x53
 8001b0e:	4807      	ldr	r0, [pc, #28]	; (8001b2c <readReg16+0x48>)
 8001b10:	f004 faee 	bl	80060f0 <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8001b14:	7b3b      	ldrb	r3, [r7, #12]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	7b7b      	ldrb	r3, [r7, #13]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	b29b      	uxth	r3, r3
} /* readReg16() */
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200008a8 	.word	0x200008a8

08001b30 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001b3a:	1dfa      	adds	r2, r7, #7
 8001b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	2152      	movs	r1, #82	; 0x52
 8001b46:	4809      	ldr	r0, [pc, #36]	; (8001b6c <readReg+0x3c>)
 8001b48:	f004 f9d4 	bl	8005ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001b4c:	f107 020f 	add.w	r2, r7, #15
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	2153      	movs	r1, #83	; 0x53
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <readReg+0x3c>)
 8001b5c:	f004 fac8 	bl	80060f0 <HAL_I2C_Master_Receive>
	return ucTemp;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200008a8 	.word	0x200008a8

08001b70 <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001b80:	1dfa      	adds	r2, r7, #7
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2152      	movs	r1, #82	; 0x52
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <readMulti+0x3c>)
 8001b8e:	f004 f9b1 	bl	8005ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b98:	9200      	str	r2, [sp, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	2153      	movs	r1, #83	; 0x53
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <readMulti+0x3c>)
 8001ba0:	f004 faa6 	bl	80060f0 <HAL_I2C_Master_Receive>
} /* readMulti() */
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200008a8 	.word	0x200008a8

08001bb0 <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bb4:	b087      	sub	sp, #28
 8001bb6:	af02      	add	r7, sp, #8
 8001bb8:	4603      	mov	r3, r0
 8001bba:	6039      	str	r1, [r7, #0]
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80bb      	strh	r3, [r7, #4]
 8001bc2:	466b      	mov	r3, sp
 8001bc4:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	1c59      	adds	r1, r3, #1
 8001bca:	1e4b      	subs	r3, r1, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	460a      	mov	r2, r1
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4690      	mov	r8, r2
 8001bd4:	4699      	mov	r9, r3
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bea:	460a      	mov	r2, r1
 8001bec:	2300      	movs	r3, #0
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	00eb      	lsls	r3, r5, #3
 8001bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c00:	00e2      	lsls	r2, r4, #3
 8001c02:	460b      	mov	r3, r1
 8001c04:	3307      	adds	r3, #7
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0e:	ab02      	add	r3, sp, #8
 8001c10:	3300      	adds	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f007 ff78 	bl	8009b18 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c32:	9200      	str	r2, [sp, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	2152      	movs	r1, #82	; 0x52
 8001c38:	4804      	ldr	r0, [pc, #16]	; (8001c4c <writeMulti+0x9c>)
 8001c3a:	f004 f95b 	bl	8005ef4 <HAL_I2C_Master_Transmit>
 8001c3e:	46b5      	mov	sp, r6
} /* writeMulti() */
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200008a8 	.word	0x200008a8

08001c50 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2303      	movs	r3, #3
 8001c80:	2152      	movs	r1, #82	; 0x52
 8001c82:	4803      	ldr	r0, [pc, #12]	; (8001c90 <writeReg16+0x40>)
 8001c84:	f004 f936 	bl	8005ef4 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200008a8 	.word	0x200008a8

08001c94 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8001cac:	f107 020c 	add.w	r2, r7, #12
 8001cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	2152      	movs	r1, #82	; 0x52
 8001cba:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <writeReg+0x34>)
 8001cbc:	f004 f91a 	bl	8005ef4 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200008a8 	.word	0x200008a8

08001ccc <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8001cde:	e00e      	b.n	8001cfe <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 8001ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	2152      	movs	r1, #82	; 0x52
 8001cec:	4808      	ldr	r0, [pc, #32]	; (8001d10 <writeRegList+0x44>)
 8001cee:	f004 f901 	bl	8005ef4 <HAL_I2C_Master_Transmit>
		ucList += 2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	607b      	str	r3, [r7, #4]
		ucCount--;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ed      	bne.n	8001ce0 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200008a8 	.word	0x200008a8

08001d14 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 8001d1e:	482d      	ldr	r0, [pc, #180]	; (8001dd4 <getSpadInfo+0xc0>)
 8001d20:	f7ff ffd4 	bl	8001ccc <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001d24:	2083      	movs	r0, #131	; 0x83
 8001d26:	f7ff ff03 	bl	8001b30 <readReg>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	2083      	movs	r0, #131	; 0x83
 8001d36:	f7ff ffad 	bl	8001c94 <writeReg>
  writeRegList(ucSPAD1);
 8001d3a:	4827      	ldr	r0, [pc, #156]	; (8001dd8 <getSpadInfo+0xc4>)
 8001d3c:	f7ff ffc6 	bl	8001ccc <writeRegList>
  iTimeout = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001d44:	e00b      	b.n	8001d5e <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 8001d46:	2083      	movs	r0, #131	; 0x83
 8001d48:	f7ff fef2 	bl	8001b30 <readReg>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <getSpadInfo+0x52>
    iTimeout++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8001d58:	2005      	movs	r0, #5
 8001d5a:	f002 fcd5 	bl	8004708 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b31      	cmp	r3, #49	; 0x31
 8001d62:	ddf0      	ble.n	8001d46 <getSpadInfo+0x32>
 8001d64:	e000      	b.n	8001d68 <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 8001d66:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b32      	cmp	r3, #50	; 0x32
 8001d6c:	d101      	bne.n	8001d72 <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e02b      	b.n	8001dca <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 8001d72:	2101      	movs	r1, #1
 8001d74:	2083      	movs	r0, #131	; 0x83
 8001d76:	f7ff ff8d 	bl	8001c94 <writeReg>
  ucTemp = readReg(0x92);
 8001d7a:	2092      	movs	r0, #146	; 0x92
 8001d7c:	f7ff fed8 	bl	8001b30 <readReg>
 8001d80:	4603      	mov	r3, r0
 8001d82:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2081      	movs	r0, #129	; 0x81
 8001da0:	f7ff ff78 	bl	8001c94 <writeReg>
  writeReg(0xff,0x06);
 8001da4:	2106      	movs	r1, #6
 8001da6:	20ff      	movs	r0, #255	; 0xff
 8001da8:	f7ff ff74 	bl	8001c94 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8001dac:	2083      	movs	r0, #131	; 0x83
 8001dae:	f7ff febf 	bl	8001b30 <readReg>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2083      	movs	r0, #131	; 0x83
 8001dbe:	f7ff ff69 	bl	8001c94 <writeReg>
  writeRegList(ucSPAD2);
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <getSpadInfo+0xc8>)
 8001dc4:	f7ff ff82 	bl	8001ccc <writeRegList>

  return 1;
 8001dc8:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000038 	.word	0x20000038
 8001dd8:	20000044 	.word	0x20000044
 8001ddc:	20000050 	.word	0x20000050

08001de0 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	0a12      	lsrs	r2, r2, #8
 8001df2:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001df4:	4093      	lsls	r3, r2
 8001df6:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b29b      	uxth	r3, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460a      	mov	r2, r1
 8001e12:	80fb      	strh	r3, [r7, #6]
 8001e14:	4613      	mov	r3, r2
 8001e16:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001e18:	797b      	ldrb	r3, [r7, #5]
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <timeoutMclksToMicroseconds+0x48>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e24:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <timeoutMclksToMicroseconds+0x4c>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <timeoutMclksToMicroseconds+0x4c>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	099b      	lsrs	r3, r3, #6
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	003a2f00 	.word	0x003a2f00
 8001e54:	10624dd3 	.word	0x10624dd3

08001e58 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <timeoutMicrosecondsToMclks+0x44>)
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <timeoutMicrosecondsToMclks+0x48>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e80:	fb03 f202 	mul.w	r2, r3, r2
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	441a      	add	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	003a2f00 	.word	0x003a2f00
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001ec2:	e005      	b.n	8001ed0 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f4      	bne.n	8001ec4 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	e000      	b.n	8001ef0 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	6039      	str	r1, [r7, #0]
 8001f04:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001f06:	2050      	movs	r0, #80	; 0x50
 8001f08:	f7ff fe12 	bl	8001b30 <readReg>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001f1c:	2046      	movs	r0, #70	; 0x46
 8001f1e:	f7ff fe07 	bl	8001b30 <readReg>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7ff ff64 	bl	8001e08 <timeoutMclksToMicroseconds>
 8001f40:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001f46:	2051      	movs	r0, #81	; 0x51
 8001f48:	f7ff fdcc 	bl	8001ae4 <readReg16>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff46 	bl	8001de0 <decodeTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	f7ff ff4d 	bl	8001e08 <timeoutMclksToMicroseconds>
 8001f6e:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001f74:	2070      	movs	r0, #112	; 0x70
 8001f76:	f7ff fddb 	bl	8001b30 <readReg>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001f8a:	2071      	movs	r0, #113	; 0x71
 8001f8c:	f7ff fdaa 	bl	8001ae4 <readReg16>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff24 	bl	8001de0 <decodeTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	891a      	ldrh	r2, [r3, #8]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	88db      	ldrh	r3, [r3, #6]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f7ff ff1e 	bl	8001e08 <timeoutMclksToMicroseconds>
 8001fcc:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fd99 	bl	8001b30 <readReg>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8002004:	f107 020c 	add.w	r2, r7, #12
 8002008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff73 	bl	8001efa <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d15c      	bne.n	80020d4 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800201a:	79bb      	ldrb	r3, [r7, #6]
 800201c:	3b0c      	subs	r3, #12
 800201e:	2b06      	cmp	r3, #6
 8002020:	d824      	bhi.n	800206c <setVcselPulsePeriod+0x90>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <setVcselPulsePeriod+0x4c>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002045 	.word	0x08002045
 800202c:	0800206d 	.word	0x0800206d
 8002030:	0800204f 	.word	0x0800204f
 8002034:	0800206d 	.word	0x0800206d
 8002038:	08002059 	.word	0x08002059
 800203c:	0800206d 	.word	0x0800206d
 8002040:	08002063 	.word	0x08002063
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8002044:	2118      	movs	r1, #24
 8002046:	2057      	movs	r0, #87	; 0x57
 8002048:	f7ff fe24 	bl	8001c94 <writeReg>
        break;
 800204c:	e010      	b.n	8002070 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 800204e:	2130      	movs	r1, #48	; 0x30
 8002050:	2057      	movs	r0, #87	; 0x57
 8002052:	f7ff fe1f 	bl	8001c94 <writeReg>
        break;
 8002056:	e00b      	b.n	8002070 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8002058:	2140      	movs	r1, #64	; 0x40
 800205a:	2057      	movs	r0, #87	; 0x57
 800205c:	f7ff fe1a 	bl	8001c94 <writeReg>
        break;
 8002060:	e006      	b.n	8002070 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8002062:	2150      	movs	r1, #80	; 0x50
 8002064:	2057      	movs	r0, #87	; 0x57
 8002066:	f7ff fe15 	bl	8001c94 <writeReg>
        break;
 800206a:	e001      	b.n	8002070 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 800206c:	2300      	movs	r3, #0
 800206e:	e0fe      	b.n	800226e <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8002070:	2108      	movs	r1, #8
 8002072:	2056      	movs	r0, #86	; 0x56
 8002074:	f7ff fe0e 	bl	8001c94 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8002078:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800207c:	4619      	mov	r1, r3
 800207e:	2050      	movs	r0, #80	; 0x50
 8002080:	f7ff fe08 	bl	8001c94 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	79ba      	ldrb	r2, [r7, #6]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fee4 	bl	8001e58 <timeoutMicrosecondsToMclks>
 8002090:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8002092:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002094:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff04 	bl	8001ea4 <encodeTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	4619      	mov	r1, r3
 80020a0:	2051      	movs	r0, #81	; 0x51
 80020a2:	f7ff fdd5 	bl	8001c50 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	79ba      	ldrb	r2, [r7, #6]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fed3 	bl	8001e58 <timeoutMicrosecondsToMclks>
 80020b2:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 80020b4:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80020b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020bc:	d804      	bhi.n	80020c8 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80020be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020c0:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e000      	b.n	80020ca <setVcselPulsePeriod+0xee>
 80020c8:	23ff      	movs	r3, #255	; 0xff
 80020ca:	4619      	mov	r1, r3
 80020cc:	2046      	movs	r0, #70	; 0x46
 80020ce:	f7ff fde1 	bl	8001c94 <writeReg>
 80020d2:	e0b3      	b.n	800223c <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	f040 80ae 	bne.w	8002238 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	3b08      	subs	r3, #8
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	f200 8085 	bhi.w	80021f0 <setVcselPulsePeriod+0x214>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <setVcselPulsePeriod+0x110>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002109 	.word	0x08002109
 80020f0:	080021f1 	.word	0x080021f1
 80020f4:	08002143 	.word	0x08002143
 80020f8:	080021f1 	.word	0x080021f1
 80020fc:	0800217d 	.word	0x0800217d
 8002100:	080021f1 	.word	0x080021f1
 8002104:	080021b7 	.word	0x080021b7
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8002108:	2110      	movs	r1, #16
 800210a:	2048      	movs	r0, #72	; 0x48
 800210c:	f7ff fdc2 	bl	8001c94 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002110:	2108      	movs	r1, #8
 8002112:	2047      	movs	r0, #71	; 0x47
 8002114:	f7ff fdbe 	bl	8001c94 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8002118:	2102      	movs	r1, #2
 800211a:	2032      	movs	r0, #50	; 0x32
 800211c:	f7ff fdba 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8002120:	210c      	movs	r1, #12
 8002122:	2030      	movs	r0, #48	; 0x30
 8002124:	f7ff fdb6 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x01);
 8002128:	2101      	movs	r1, #1
 800212a:	20ff      	movs	r0, #255	; 0xff
 800212c:	f7ff fdb2 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8002130:	2130      	movs	r1, #48	; 0x30
 8002132:	2030      	movs	r0, #48	; 0x30
 8002134:	f7ff fdae 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x00);
 8002138:	2100      	movs	r1, #0
 800213a:	20ff      	movs	r0, #255	; 0xff
 800213c:	f7ff fdaa 	bl	8001c94 <writeReg>
        break;
 8002140:	e058      	b.n	80021f4 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8002142:	2128      	movs	r1, #40	; 0x28
 8002144:	2048      	movs	r0, #72	; 0x48
 8002146:	f7ff fda5 	bl	8001c94 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800214a:	2108      	movs	r1, #8
 800214c:	2047      	movs	r0, #71	; 0x47
 800214e:	f7ff fda1 	bl	8001c94 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002152:	2103      	movs	r1, #3
 8002154:	2032      	movs	r0, #50	; 0x32
 8002156:	f7ff fd9d 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 800215a:	2109      	movs	r1, #9
 800215c:	2030      	movs	r0, #48	; 0x30
 800215e:	f7ff fd99 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x01);
 8002162:	2101      	movs	r1, #1
 8002164:	20ff      	movs	r0, #255	; 0xff
 8002166:	f7ff fd95 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800216a:	2120      	movs	r1, #32
 800216c:	2030      	movs	r0, #48	; 0x30
 800216e:	f7ff fd91 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x00);
 8002172:	2100      	movs	r1, #0
 8002174:	20ff      	movs	r0, #255	; 0xff
 8002176:	f7ff fd8d 	bl	8001c94 <writeReg>
        break;
 800217a:	e03b      	b.n	80021f4 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 800217c:	2138      	movs	r1, #56	; 0x38
 800217e:	2048      	movs	r0, #72	; 0x48
 8002180:	f7ff fd88 	bl	8001c94 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002184:	2108      	movs	r1, #8
 8002186:	2047      	movs	r0, #71	; 0x47
 8002188:	f7ff fd84 	bl	8001c94 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800218c:	2103      	movs	r1, #3
 800218e:	2032      	movs	r0, #50	; 0x32
 8002190:	f7ff fd80 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8002194:	2108      	movs	r1, #8
 8002196:	2030      	movs	r0, #48	; 0x30
 8002198:	f7ff fd7c 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x01);
 800219c:	2101      	movs	r1, #1
 800219e:	20ff      	movs	r0, #255	; 0xff
 80021a0:	f7ff fd78 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80021a4:	2120      	movs	r1, #32
 80021a6:	2030      	movs	r0, #48	; 0x30
 80021a8:	f7ff fd74 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x00);
 80021ac:	2100      	movs	r1, #0
 80021ae:	20ff      	movs	r0, #255	; 0xff
 80021b0:	f7ff fd70 	bl	8001c94 <writeReg>
        break;
 80021b4:	e01e      	b.n	80021f4 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80021b6:	2148      	movs	r1, #72	; 0x48
 80021b8:	2048      	movs	r0, #72	; 0x48
 80021ba:	f7ff fd6b 	bl	8001c94 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80021be:	2108      	movs	r1, #8
 80021c0:	2047      	movs	r0, #71	; 0x47
 80021c2:	f7ff fd67 	bl	8001c94 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80021c6:	2103      	movs	r1, #3
 80021c8:	2032      	movs	r0, #50	; 0x32
 80021ca:	f7ff fd63 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 80021ce:	2107      	movs	r1, #7
 80021d0:	2030      	movs	r0, #48	; 0x30
 80021d2:	f7ff fd5f 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x01);
 80021d6:	2101      	movs	r1, #1
 80021d8:	20ff      	movs	r0, #255	; 0xff
 80021da:	f7ff fd5b 	bl	8001c94 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80021de:	2120      	movs	r1, #32
 80021e0:	2030      	movs	r0, #48	; 0x30
 80021e2:	f7ff fd57 	bl	8001c94 <writeReg>
        writeReg(0xFF, 0x00);
 80021e6:	2100      	movs	r1, #0
 80021e8:	20ff      	movs	r0, #255	; 0xff
 80021ea:	f7ff fd53 	bl	8001c94 <writeReg>
        break;
 80021ee:	e001      	b.n	80021f4 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e03c      	b.n	800226e <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80021f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f8:	4619      	mov	r1, r3
 80021fa:	2070      	movs	r0, #112	; 0x70
 80021fc:	f7ff fd4a 	bl	8001c94 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	79ba      	ldrb	r2, [r7, #6]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fe26 	bl	8001e58 <timeoutMicrosecondsToMclks>
 800220c:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 800220e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800221c:	8a7a      	ldrh	r2, [r7, #18]
 800221e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002220:	4413      	add	r3, r2
 8002222:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fe3c 	bl	8001ea4 <encodeTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	4619      	mov	r1, r3
 8002230:	2071      	movs	r0, #113	; 0x71
 8002232:	f7ff fd0d 	bl	8001c50 <writeReg16>
 8002236:	e001      	b.n	800223c <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8002238:	2300      	movs	r3, #0
 800223a:	e018      	b.n	800226e <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <setVcselPulsePeriod+0x29c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f81b 	bl	800227c <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002246:	2001      	movs	r0, #1
 8002248:	f7ff fc72 	bl	8001b30 <readReg>
 800224c:	4603      	mov	r3, r0
 800224e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002252:	2102      	movs	r1, #2
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fd1d 	bl	8001c94 <writeReg>
  performSingleRefCalibration(0x0);
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f916 	bl	800248c <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8002260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002264:	4619      	mov	r1, r3
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff fd14 	bl	8001c94 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	3730      	adds	r7, #48	; 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200008a4 	.word	0x200008a4

0800227c <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b090      	sub	sp, #64	; 0x40
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002284:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8002288:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 800228a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800228e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8002290:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002294:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8002296:	f240 234e 	movw	r3, #590	; 0x24e
 800229a:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 800229c:	f240 23b2 	movw	r3, #690	; 0x2b2
 80022a0:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 80022a2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80022a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 80022a8:	f240 2326 	movw	r3, #550	; 0x226
 80022ac:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 80022ae:	f644 6320 	movw	r3, #20000	; 0x4e20
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d201      	bcs.n	80022c0 <setMeasurementTimingBudget+0x44>
 80022bc:	2300      	movs	r3, #0
 80022be:	e074      	b.n	80023aa <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 80022c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80022c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c4:	4413      	add	r3, r2
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7ff fc31 	bl	8001b30 <readReg>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 80022d4:	f107 0208 	add.w	r2, r7, #8
 80022d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe0b 	bl	8001efa <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 80022e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80022f4:	4413      	add	r3, r2
 80022f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f8:	4413      	add	r3, r2
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80022fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002312:	4413      	add	r3, r2
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002316:	e00b      	b.n	8002330 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002328:	4413      	add	r3, r2
 800232a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232c:	4413      	add	r3, r2
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002340:	4413      	add	r3, r2
 8002342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002344:	4413      	add	r3, r2
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002348:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800234c:	2b00      	cmp	r3, #0
 800234e:	da2b      	bge.n	80023a8 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8002350:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002354:	4413      	add	r3, r2
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d901      	bls.n	8002364 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8002360:	2300      	movs	r3, #0
 8002362:	e022      	b.n	80023aa <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800236c:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6a38      	ldr	r0, [r7, #32]
 8002374:	f7ff fd70 	bl	8001e58 <timeoutMicrosecondsToMclks>
 8002378:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 800237a:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 800237c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002388:	89fa      	ldrh	r2, [r7, #14]
 800238a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800238c:	4413      	add	r3, r2
 800238e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fd86 	bl	8001ea4 <encodeTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	4619      	mov	r1, r3
 800239c:	2071      	movs	r0, #113	; 0x71
 800239e:	f7ff fc57 	bl	8001c50 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <setMeasurementTimingBudget+0x138>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6013      	str	r3, [r2, #0]
  }
  return 1;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3740      	adds	r7, #64	; 0x40
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200008a4 	.word	0x200008a4

080023b8 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80023be:	f240 7376 	movw	r3, #1910	; 0x776
 80023c2:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 80023c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023c8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 80023ca:	f44f 7325 	mov.w	r3, #660	; 0x294
 80023ce:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 80023d0:	f240 234e 	movw	r3, #590	; 0x24e
 80023d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 80023d6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80023da:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 80023dc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80023e0:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80023e2:	f240 2326 	movw	r3, #550	; 0x226
 80023e6:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80023e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80023ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ec:	4413      	add	r3, r2
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff fb9d 	bl	8001b30 <readReg>
 80023f6:	4603      	mov	r3, r0
 80023f8:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 80023fa:	1d3a      	adds	r2, r7, #4
 80023fc:	7f7b      	ldrb	r3, [r7, #29]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fd7a 	bl	8001efa <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002406:	7f7b      	ldrb	r3, [r7, #29]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002414:	4413      	add	r3, r2
 8002416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002418:	4413      	add	r3, r2
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 800241c:	7f7b      	ldrb	r3, [r7, #29]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	4413      	add	r3, r2
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002434:	e00a      	b.n	800244c <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002436:	7f7b      	ldrb	r3, [r7, #29]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002444:	4413      	add	r3, r2
 8002446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002448:	4413      	add	r3, r2
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 800244c:	7f7b      	ldrb	r3, [r7, #29]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	8c3b      	ldrh	r3, [r7, #32]
 800245a:	4413      	add	r3, r2
 800245c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245e:	4413      	add	r3, r2
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002462:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002466:	2b00      	cmp	r3, #0
 8002468:	da05      	bge.n	8002476 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	4413      	add	r3, r2
 8002470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002472:	4413      	add	r3, r2
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <getMeasurementTimingBudget+0xd0>)
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	6013      	str	r3, [r2, #0]
  return budget_us;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800247e:	4618      	mov	r0, r3
 8002480:	3730      	adds	r7, #48	; 0x30
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200008a4 	.word	0x200008a4

0800248c <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff fbf7 	bl	8001c94 <writeReg>

  iTimeout = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80024aa:	e00a      	b.n	80024c2 <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 80024b2:	2005      	movs	r0, #5
 80024b4:	f002 f928 	bl	8004708 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	dd01      	ble.n	80024c2 <performSingleRefCalibration+0x36>
 80024be:	2300      	movs	r3, #0
 80024c0:	e010      	b.n	80024e4 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80024c2:	2013      	movs	r0, #19
 80024c4:	f7ff fb34 	bl	8001b30 <readReg>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ec      	beq.n	80024ac <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80024d2:	2101      	movs	r1, #1
 80024d4:	200b      	movs	r0, #11
 80024d6:	f7ff fbdd 	bl	8001c94 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 80024da:	2100      	movs	r1, #0
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fbd9 	bl	8001c94 <writeReg>

  return 1;
 80024e2:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 80024f4:	2300      	movs	r3, #0
 80024f6:	75bb      	strb	r3, [r7, #22]
 80024f8:	2300      	movs	r3, #0
 80024fa:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80024fc:	2089      	movs	r0, #137	; 0x89
 80024fe:	f7ff fb17 	bl	8001b30 <readReg>
 8002502:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4619      	mov	r1, r3
 800250c:	2089      	movs	r0, #137	; 0x89
 800250e:	f7ff fbc1 	bl	8001c94 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8002512:	486a      	ldr	r0, [pc, #424]	; (80026bc <initSensor+0x1d0>)
 8002514:	f7ff fbda 	bl	8001ccc <writeRegList>
  stop_variable = readReg(0x91);
 8002518:	2091      	movs	r0, #145	; 0x91
 800251a:	f7ff fb09 	bl	8001b30 <readReg>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <initSensor+0x1d4>)
 8002524:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 8002526:	4867      	ldr	r0, [pc, #412]	; (80026c4 <initSensor+0x1d8>)
 8002528:	f7ff fbd0 	bl	8001ccc <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 800252c:	2060      	movs	r0, #96	; 0x60
 800252e:	f7ff faff 	bl	8001b30 <readReg>
 8002532:	4603      	mov	r3, r0
 8002534:	f043 0312 	orr.w	r3, r3, #18
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	2060      	movs	r0, #96	; 0x60
 800253e:	f7ff fba9 	bl	8001c94 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8002542:	2120      	movs	r1, #32
 8002544:	2044      	movs	r0, #68	; 0x44
 8002546:	f7ff fb83 	bl	8001c50 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800254a:	21ff      	movs	r1, #255	; 0xff
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff fba1 	bl	8001c94 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8002552:	f107 0215 	add.w	r2, r7, #21
 8002556:	f107 0316 	add.w	r3, r7, #22
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fbd9 	bl	8001d14 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	2206      	movs	r2, #6
 8002568:	4619      	mov	r1, r3
 800256a:	20b0      	movs	r0, #176	; 0xb0
 800256c:	f7ff fb00 	bl	8001b70 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 8002570:	4855      	ldr	r0, [pc, #340]	; (80026c8 <initSensor+0x1dc>)
 8002572:	f7ff fbab 	bl	8001ccc <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 8002576:	7d7b      	ldrb	r3, [r7, #21]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <initSensor+0x94>
 800257c:	230c      	movs	r3, #12
 800257e:	e000      	b.n	8002582 <initSensor+0x96>
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	e037      	b.n	80025fe <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	429a      	cmp	r2, r3
 8002594:	db03      	blt.n	800259e <initSensor+0xb2>
 8002596:	7dbb      	ldrb	r3, [r7, #22]
 8002598:	7ffa      	ldrb	r2, [r7, #31]
 800259a:	429a      	cmp	r2, r3
 800259c:	d119      	bne.n	80025d2 <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	10db      	asrs	r3, r3, #3
 80025a2:	3320      	adds	r3, #32
 80025a4:	443b      	add	r3, r7
 80025a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025aa:	b25a      	sxtb	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	4013      	ands	r3, r2
 80025c0:	b25a      	sxtb	r2, r3
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	10db      	asrs	r3, r3, #3
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	3320      	adds	r3, #32
 80025ca:	443b      	add	r3, r7
 80025cc:	f803 2c14 	strb.w	r2, [r3, #-20]
 80025d0:	e012      	b.n	80025f8 <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	10db      	asrs	r3, r3, #3
 80025d6:	3320      	adds	r3, #32
 80025d8:	443b      	add	r3, r7
 80025da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025de:	461a      	mov	r2, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	fa42 f303 	asr.w	r3, r2, r3
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	3301      	adds	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	3301      	adds	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b2f      	cmp	r3, #47	; 0x2f
 8002602:	ddc4      	ble.n	800258e <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2206      	movs	r2, #6
 800260a:	4619      	mov	r1, r3
 800260c:	20b0      	movs	r0, #176	; 0xb0
 800260e:	f7ff facf 	bl	8001bb0 <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 8002612:	482e      	ldr	r0, [pc, #184]	; (80026cc <initSensor+0x1e0>)
 8002614:	f7ff fb5a 	bl	8001ccc <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 800261e:	210d      	movs	r1, #13
 8002620:	2044      	movs	r0, #68	; 0x44
 8002622:	f7ff fb15 	bl	8001c50 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8002626:	2112      	movs	r1, #18
 8002628:	2000      	movs	r0, #0
 800262a:	f7ff fcd7 	bl	8001fdc <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 800262e:	210e      	movs	r1, #14
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fcd3 	bl	8001fdc <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002636:	2104      	movs	r1, #4
 8002638:	200a      	movs	r0, #10
 800263a:	f7ff fb2b 	bl	8001c94 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800263e:	2084      	movs	r0, #132	; 0x84
 8002640:	f7ff fa76 	bl	8001b30 <readReg>
 8002644:	4603      	mov	r3, r0
 8002646:	f023 0310 	bic.w	r3, r3, #16
 800264a:	b2db      	uxtb	r3, r3
 800264c:	4619      	mov	r1, r3
 800264e:	2084      	movs	r0, #132	; 0x84
 8002650:	f7ff fb20 	bl	8001c94 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002654:	2101      	movs	r1, #1
 8002656:	200b      	movs	r0, #11
 8002658:	f7ff fb1c 	bl	8001c94 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 800265c:	f7ff feac 	bl	80023b8 <getMeasurementTimingBudget>
 8002660:	4603      	mov	r3, r0
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <initSensor+0x1e4>)
 8002664:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002666:	21e8      	movs	r1, #232	; 0xe8
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff fb13 	bl	8001c94 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <initSensor+0x1e4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe02 	bl	800227c <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002678:	2101      	movs	r1, #1
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fb0a 	bl	8001c94 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8002680:	2040      	movs	r0, #64	; 0x40
 8002682:	f7ff ff03 	bl	800248c <performSingleRefCalibration>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <initSensor+0x1a4>
 800268c:	2300      	movs	r3, #0
 800268e:	e010      	b.n	80026b2 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002690:	2102      	movs	r1, #2
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff fafe 	bl	8001c94 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff fef7 	bl	800248c <performSingleRefCalibration>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <initSensor+0x1bc>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e004      	b.n	80026b2 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80026a8:	21e8      	movs	r1, #232	; 0xe8
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7ff faf2 	bl	8001c94 <writeReg>
  return 1;
 80026b0:	2301      	movs	r3, #1
} /* initSensor() */
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000024 	.word	0x20000024
 80026c0:	200008a0 	.word	0x200008a0
 80026c4:	20000030 	.word	0x20000030
 80026c8:	2000005c 	.word	0x2000005c
 80026cc:	20000068 	.word	0x20000068
 80026d0:	200008a4 	.word	0x200008a4

080026d4 <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
int iTimeout = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80026de:	bf00      	nop
 80026e0:	2013      	movs	r0, #19
 80026e2:	f7ff fa25 	bl	8001b30 <readReg>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f7      	beq.n	80026e0 <readRangeContinuousMillimeters+0xc>

  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 80026f0:	201e      	movs	r0, #30
 80026f2:	f7ff f9f7 	bl	8001ae4 <readReg16>
 80026f6:	4603      	mov	r3, r0
 80026f8:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80026fa:	2101      	movs	r1, #1
 80026fc:	200b      	movs	r0, #11
 80026fe:	f7ff fac9 	bl	8001c94 <writeReg>

  return range;
 8002702:	887b      	ldrh	r3, [r7, #2]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
int iTimeout;

  writeReg(0x80, 0x01);
 8002712:	2101      	movs	r1, #1
 8002714:	2080      	movs	r0, #128	; 0x80
 8002716:	f7ff fabd 	bl	8001c94 <writeReg>
  writeReg(0xFF, 0x01);
 800271a:	2101      	movs	r1, #1
 800271c:	20ff      	movs	r0, #255	; 0xff
 800271e:	f7ff fab9 	bl	8001c94 <writeReg>
  writeReg(0x00, 0x00);
 8002722:	2100      	movs	r1, #0
 8002724:	2000      	movs	r0, #0
 8002726:	f7ff fab5 	bl	8001c94 <writeReg>
  writeReg(0x91, stop_variable);
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <tofReadDistance+0x70>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	2091      	movs	r0, #145	; 0x91
 8002732:	f7ff faaf 	bl	8001c94 <writeReg>
  writeReg(0x00, 0x01);
 8002736:	2101      	movs	r1, #1
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff faab 	bl	8001c94 <writeReg>
  writeReg(0xFF, 0x00);
 800273e:	2100      	movs	r1, #0
 8002740:	20ff      	movs	r0, #255	; 0xff
 8002742:	f7ff faa7 	bl	8001c94 <writeReg>
  writeReg(0x80, 0x00);
 8002746:	2100      	movs	r1, #0
 8002748:	2080      	movs	r0, #128	; 0x80
 800274a:	f7ff faa3 	bl	8001c94 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 800274e:	2101      	movs	r1, #1
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff fa9f 	bl	8001c94 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 800275a:	bf00      	nop
 800275c:	2000      	movs	r0, #0
 800275e:	f7ff f9e7 	bl	8001b30 <readReg>
 8002762:	4603      	mov	r3, r0
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f7      	bne.n	800275c <tofReadDistance+0x50>
	    }
	}

  }

  return readRangeContinuousMillimeters();
 800276c:	f7ff ffb2 	bl	80026d4 <readRangeContinuousMillimeters>
 8002770:	4603      	mov	r3, r0

} /* tofReadDistance() */
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200008a0 	.word	0x200008a0

08002780 <tofGetModel>:

int tofGetModel(int *model, int *revision)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 8002790:	23c0      	movs	r3, #192	; 0xc0
 8002792:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8002794:	f107 020e 	add.w	r2, r7, #14
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	2152      	movs	r1, #82	; 0x52
 80027a2:	4819      	ldr	r0, [pc, #100]	; (8002808 <tofGetModel+0x88>)
 80027a4:	f003 fba6 	bl	8005ef4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80027a8:	f107 020f 	add.w	r2, r7, #15
 80027ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2301      	movs	r3, #1
 80027b4:	2153      	movs	r1, #83	; 0x53
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <tofGetModel+0x88>)
 80027b8:	f003 fc9a 	bl	80060f0 <HAL_I2C_Master_Receive>
		*model = ucTemp;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d019      	beq.n	80027fe <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 80027ca:	23c2      	movs	r3, #194	; 0xc2
 80027cc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80027ce:	f107 020e 	add.w	r2, r7, #14
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	2152      	movs	r1, #82	; 0x52
 80027dc:	480a      	ldr	r0, [pc, #40]	; (8002808 <tofGetModel+0x88>)
 80027de:	f003 fb89 	bl	8005ef4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80027e2:	f107 020f 	add.w	r2, r7, #15
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	2153      	movs	r1, #83	; 0x53
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <tofGetModel+0x88>)
 80027f2:	f003 fc7d 	bl	80060f0 <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	461a      	mov	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
	}
	return 1;
 80027fe:	2301      	movs	r3, #1

} /* tofGetModel() */
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200008a8 	.word	0x200008a8

0800280c <initTof>:
 * @brief Use to initialize the ToF sensor
 *
 * @return
 */
int initTof()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
	int model = 0, revision = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, SET);
 800281a:	2201      	movs	r2, #1
 800281c:	2120      	movs	r1, #32
 800281e:	4821      	ldr	r0, [pc, #132]	; (80028a4 <initTof+0x98>)
 8002820:	f003 f9aa 	bl	8005b78 <HAL_GPIO_WritePin>
	while(I2C2->CR2==2)
 8002824:	e00d      	b.n	8002842 <initTof+0x36>
		{
		  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 8002826:	bf00      	nop
 8002828:	481f      	ldr	r0, [pc, #124]	; (80028a8 <initTof+0x9c>)
 800282a:	f003 fb33 	bl	8005e94 <HAL_I2C_DeInit>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f9      	bne.n	8002828 <initTof+0x1c>
		  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8002834:	bf00      	nop
 8002836:	481c      	ldr	r0, [pc, #112]	; (80028a8 <initTof+0x9c>)
 8002838:	f003 f9e8 	bl	8005c0c <HAL_I2C_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f9      	bne.n	8002836 <initTof+0x2a>
	while(I2C2->CR2==2)
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <initTof+0xa0>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d0ed      	beq.n	8002826 <initTof+0x1a>
		}

	tofInit(1); // set long range mode (up to 2m)
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff f93e 	bl	8001acc <tofInit>
	tofGetModel(&model, &revision);
 8002850:	463a      	mov	r2, r7
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff92 	bl	8002780 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 800285c:	e016      	b.n	800288c <initTof+0x80>
	{
	while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 800285e:	bf00      	nop
 8002860:	4811      	ldr	r0, [pc, #68]	; (80028a8 <initTof+0x9c>)
 8002862:	f003 fb17 	bl	8005e94 <HAL_I2C_DeInit>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <initTof+0x54>
	while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 800286c:	bf00      	nop
 800286e:	480e      	ldr	r0, [pc, #56]	; (80028a8 <initTof+0x9c>)
 8002870:	f003 f9cc 	bl	8005c0c <HAL_I2C_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f9      	bne.n	800286e <initTof+0x62>
	tofInit(1); // set long range mode (up to 2m)
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff f926 	bl	8001acc <tofInit>
	tofGetModel(&model, &revision);
 8002880:	463a      	mov	r2, r7
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff7a 	bl	8002780 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2bee      	cmp	r3, #238	; 0xee
 8002890:	d1e5      	bne.n	800285e <initTof+0x52>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b10      	cmp	r3, #16
 8002896:	d1e2      	bne.n	800285e <initTof+0x52>
	}
	return 1;
 8002898:	2301      	movs	r3, #1
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40010c00 	.word	0x40010c00
 80028a8:	200008a8 	.word	0x200008a8
 80028ac:	40005800 	.word	0x40005800

080028b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028ca:	f043 0310 	orr.w	r3, r3, #16
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028dc:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028e2:	f043 0320 	orr.w	r3, r3, #32
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b44      	ldr	r3, [pc, #272]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a43      	ldr	r2, [pc, #268]	; (8002a08 <MX_GPIO_Init+0x158>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <MX_GPIO_Init+0x158>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <MX_GPIO_Init+0x158>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a3d      	ldr	r2, [pc, #244]	; (8002a08 <MX_GPIO_Init+0x158>)
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <MX_GPIO_Init+0x158>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002924:	2200      	movs	r2, #0
 8002926:	f24f 0120 	movw	r1, #61472	; 0xf020
 800292a:	4838      	ldr	r0, [pc, #224]	; (8002a0c <MX_GPIO_Init+0x15c>)
 800292c:	f003 f924 	bl	8005b78 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8002930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <MX_GPIO_Init+0x160>)
 8002938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	4833      	ldr	r0, [pc, #204]	; (8002a14 <MX_GPIO_Init+0x164>)
 8002946:	f002 feb7 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BDT1_Pin|BDT2_Pin;
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <MX_GPIO_Init+0x168>)
 8002950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	482f      	ldr	r0, [pc, #188]	; (8002a1c <MX_GPIO_Init+0x16c>)
 800295e:	f002 feab 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BDT3_Pin|BDT4_Pin;
 8002962:	2303      	movs	r3, #3
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <MX_GPIO_Init+0x168>)
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4619      	mov	r1, r3
 8002974:	4825      	ldr	r0, [pc, #148]	; (8002a0c <MX_GPIO_Init+0x15c>)
 8002976:	f002 fe9f 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800297a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800297e:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	2301      	movs	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2302      	movs	r3, #2
 800298a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4619      	mov	r1, r3
 8002992:	481e      	ldr	r0, [pc, #120]	; (8002a0c <MX_GPIO_Init+0x15c>)
 8002994:	f002 fe90 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8002998:	2310      	movs	r3, #16
 800299a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <MX_GPIO_Init+0x160>)
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4619      	mov	r1, r3
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <MX_GPIO_Init+0x15c>)
 80029ac:	f002 fe84 	bl	80056b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	2006      	movs	r0, #6
 80029b6:	f002 f9c6 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029ba:	2006      	movs	r0, #6
 80029bc:	f002 f9df 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2007      	movs	r0, #7
 80029c6:	f002 f9be 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029ca:	2007      	movs	r0, #7
 80029cc:	f002 f9d7 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	200a      	movs	r0, #10
 80029d6:	f002 f9b6 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80029da:	200a      	movs	r0, #10
 80029dc:	f002 f9cf 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	2017      	movs	r0, #23
 80029e6:	f002 f9ae 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029ea:	2017      	movs	r0, #23
 80029ec:	f002 f9c7 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2028      	movs	r0, #40	; 0x28
 80029f6:	f002 f9a6 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029fa:	2028      	movs	r0, #40	; 0x28
 80029fc:	f002 f9bf 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	10110000 	.word	0x10110000
 8002a14:	40011000 	.word	0x40011000
 8002a18:	10310000 	.word	0x10310000
 8002a1c:	40010800 	.word	0x40010800

08002a20 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <MX_I2C2_Init+0x54>)
 8002a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <MX_I2C2_Init+0x58>)
 8002a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <MX_I2C2_Init+0x50>)
 8002a5e:	f003 f8d5 	bl	8005c0c <HAL_I2C_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a68:	f000 fc7c 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200008a8 	.word	0x200008a8
 8002a74:	40005800 	.word	0x40005800
 8002a78:	000186a0 	.word	0x000186a0

08002a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_I2C_MspInit+0x74>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d124      	bne.n	8002ae6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_I2C_MspInit+0x78>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_I2C_MspInit+0x78>)
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6193      	str	r3, [r2, #24]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_I2C_MspInit+0x78>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 8002ab4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aba:	2312      	movs	r3, #18
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <HAL_I2C_MspInit+0x7c>)
 8002aca:	f002 fdf5 	bl	80056b8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_I2C_MspInit+0x78>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <HAL_I2C_MspInit+0x78>)
 8002ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ad8:	61d3      	str	r3, [r2, #28]
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_I2C_MspInit+0x78>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40005800 	.word	0x40005800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010c00 	.word	0x40010c00

08002afc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <HAL_I2C_MspDeInit+0x3c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10f      	bne.n	8002b2e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_I2C_MspDeInit+0x40>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_I2C_MspDeInit+0x40>)
 8002b14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b18:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(TOF_SCL_GPIO_Port, TOF_SCL_Pin);
 8002b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b1e:	4808      	ldr	r0, [pc, #32]	; (8002b40 <HAL_I2C_MspDeInit+0x44>)
 8002b20:	f002 ff5e 	bl	80059e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(TOF_SDA_GPIO_Port, TOF_SDA_Pin);
 8002b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <HAL_I2C_MspDeInit+0x44>)
 8002b2a:	f002 ff59 	bl	80059e0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40005800 	.word	0x40005800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010c00 	.word	0x40010c00

08002b44 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	switch (i)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d827      	bhi.n	8002ba4 <TurnOffLed+0x60>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <TurnOffLed+0x18>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b7b 	.word	0x08002b7b
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002b97 	.word	0x08002b97
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b72:	480e      	ldr	r0, [pc, #56]	; (8002bac <TurnOffLed+0x68>)
 8002b74:	f003 f800 	bl	8005b78 <HAL_GPIO_WritePin>
		    break;
 8002b78:	e014      	b.n	8002ba4 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b80:	480a      	ldr	r0, [pc, #40]	; (8002bac <TurnOffLed+0x68>)
 8002b82:	f002 fff9 	bl	8005b78 <HAL_GPIO_WritePin>
			break;
 8002b86:	e00d      	b.n	8002ba4 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <TurnOffLed+0x68>)
 8002b90:	f002 fff2 	bl	8005b78 <HAL_GPIO_WritePin>
			break;
 8002b94:	e006      	b.n	8002ba4 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9c:	4803      	ldr	r0, [pc, #12]	; (8002bac <TurnOffLed+0x68>)
 8002b9e:	f002 ffeb 	bl	8005b78 <HAL_GPIO_WritePin>
			break;
 8002ba2:	bf00      	nop
	}

}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40010c00 	.word	0x40010c00

08002bb0 <SwitchLed>:



void SwitchLed(int i)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	switch (i)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d823      	bhi.n	8002c08 <SwitchLed+0x58>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <SwitchLed+0x18>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002be5 	.word	0x08002be5
 8002bd0:	08002bf1 	.word	0x08002bf1
 8002bd4:	08002bfd 	.word	0x08002bfd
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <SwitchLed+0x60>)
 8002bde:	f002 ffe3 	bl	8005ba8 <HAL_GPIO_TogglePin>
			break;
 8002be2:	e011      	b.n	8002c08 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8002be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002be8:	4809      	ldr	r0, [pc, #36]	; (8002c10 <SwitchLed+0x60>)
 8002bea:	f002 ffdd 	bl	8005ba8 <HAL_GPIO_TogglePin>
			break;
 8002bee:	e00b      	b.n	8002c08 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8002bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bf4:	4806      	ldr	r0, [pc, #24]	; (8002c10 <SwitchLed+0x60>)
 8002bf6:	f002 ffd7 	bl	8005ba8 <HAL_GPIO_TogglePin>
			break;
 8002bfa:	e005      	b.n	8002c08 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8002bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c00:	4803      	ldr	r0, [pc, #12]	; (8002c10 <SwitchLed+0x60>)
 8002c02:	f002 ffd1 	bl	8005ba8 <HAL_GPIO_TogglePin>
			break;
 8002c06:	bf00      	nop
	}

}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40010c00 	.word	0x40010c00

08002c14 <LedError>:



void LedError()
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c1e:	480b      	ldr	r0, [pc, #44]	; (8002c4c <LedError+0x38>)
 8002c20:	f002 ffaa 	bl	8005b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002c24:	2201      	movs	r2, #1
 8002c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c2a:	4808      	ldr	r0, [pc, #32]	; (8002c4c <LedError+0x38>)
 8002c2c:	f002 ffa4 	bl	8005b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <LedError+0x38>)
 8002c38:	f002 ff9e 	bl	8005b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c42:	4802      	ldr	r0, [pc, #8]	; (8002c4c <LedError+0x38>)
 8002c44:	f002 ff98 	bl	8005b78 <HAL_GPIO_WritePin>
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40010c00 	.word	0x40010c00

08002c50 <TestSensorOnI2C>:
  * @retval None
  */


void TestSensorOnI2C(int * tab)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	 int u = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 8002c5c:	4818      	ldr	r0, [pc, #96]	; (8002cc0 <TestSensorOnI2C+0x70>)
 8002c5e:	f007 fe79 	bl	800a954 <puts>
	  for(int i =0; i< 256; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e021      	b.n	8002cac <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i),2,2);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	b299      	uxth	r1, r3
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	2202      	movs	r2, #2
 8002c70:	4814      	ldr	r0, [pc, #80]	; (8002cc4 <TestSensorOnI2C+0x74>)
 8002c72:	f003 fc9d 	bl	80065b0 <HAL_I2C_IsDeviceReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 8002c80:	202e      	movs	r0, #46	; 0x2e
 8002c82:	f007 fde5 	bl	800a850 <putchar>
		  }
		  if (result == HAL_OK)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10c      	bne.n	8002ca6 <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	601a      	str	r2, [r3, #0]
			  u++;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	4809      	ldr	r0, [pc, #36]	; (8002cc8 <TestSensorOnI2C+0x78>)
 8002ca2:	f007 fdbd 	bl	800a820 <iprintf>
	  for(int i =0; i< 256; i++)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	ddda      	ble.n	8002c68 <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 8002cb2:	4806      	ldr	r0, [pc, #24]	; (8002ccc <TestSensorOnI2C+0x7c>)
 8002cb4:	f007 fe4e 	bl	800a954 <puts>
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	0800e65c 	.word	0x0800e65c
 8002cc4:	200008a8 	.word	0x200008a8
 8002cc8:	0800e67c 	.word	0x0800e67c
 8002ccc:	0800e684 	.word	0x0800e684

08002cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cd6:	f001 fcb5 	bl	8004644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cda:	f000 f887 	bl	8002dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cde:	f7ff fde7 	bl	80028b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ce2:	f7fe fed5 	bl	8001a90 <MX_DMA_Init>
  MX_TIM3_Init();
 8002ce6:	f001 f837 	bl	8003d58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002cea:	f001 fb63 	bl	80043b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002cee:	f001 fb8b 	bl	8004408 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002cf2:	f000 ff19 	bl	8003b28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002cf6:	f000 ffdb 	bl	8003cb0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002cfa:	f001 f8f3 	bl	8003ee4 <MX_TIM5_Init>
  MX_ADC1_Init();
 8002cfe:	f7fe fe4d 	bl	800199c <MX_ADC1_Init>
  MX_TIM7_Init();
 8002d02:	f001 f979 	bl	8003ff8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8002d06:	f001 f941 	bl	8003f8c <MX_TIM6_Init>
  MX_TIM4_Init();
 8002d0a:	f001 f89d 	bl	8003e48 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002d0e:	f7ff fe87 	bl	8002a20 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002d12:	2201      	movs	r2, #1
 8002d14:	4928      	ldr	r1, [pc, #160]	; (8002db8 <main+0xe8>)
 8002d16:	4829      	ldr	r0, [pc, #164]	; (8002dbc <main+0xec>)
 8002d18:	f006 f914 	bl	8008f44 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f001 fcf3 	bl	8004708 <HAL_Delay>
  shellInit();
 8002d22:	f000 fb27 	bl	8003374 <shellInit>

  HAL_UART_Receive_DMA(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
 8002d26:	220e      	movs	r2, #14
 8002d28:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <main+0xf0>)
 8002d2a:	4826      	ldr	r0, [pc, #152]	; (8002dc4 <main+0xf4>)
 8002d2c:	f006 f93a 	bl	8008fa4 <HAL_UART_Receive_DMA>

  //HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
  //HAL_Delay(1);

  int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
 8002d30:	463b      	mov	r3, r7
 8002d32:	2220      	movs	r2, #32
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f006 fefc 	bl	8009b34 <memset>
  TestSensorOnI2C(tabI2CAdd);
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff86 	bl	8002c50 <TestSensorOnI2C>
  initTof();
 8002d44:	f7ff fd62 	bl	800280c <initTof>
  //int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
  //TestSensorOnI2C(tabI2CAdd);

  TurnOffLed(1);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7ff fefb 	bl	8002b44 <TurnOffLed>
  TurnOffLed(2);
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f7ff fef8 	bl	8002b44 <TurnOffLed>
  TurnOffLed(3);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f7ff fef5 	bl	8002b44 <TurnOffLed>
  TurnOffLed(4);
 8002d5a:	2004      	movs	r0, #4
 8002d5c:	f7ff fef2 	bl	8002b44 <TurnOffLed>

  HAL_TIM_Base_Start_IT(&htim3);
 8002d60:	4819      	ldr	r0, [pc, #100]	; (8002dc8 <main+0xf8>)
 8002d62:	f004 fda1 	bl	80078a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002d66:	2100      	movs	r1, #0
 8002d68:	4817      	ldr	r0, [pc, #92]	; (8002dc8 <main+0xf8>)
 8002d6a:	f004 ff7f 	bl	8007c6c <HAL_TIM_PWM_Start_IT>
  ControlServo(SERVO_CLOSED);
 8002d6e:	f44f 7052 	mov.w	r0, #840	; 0x348
 8002d72:	f7fe fcb7 	bl	80016e4 <ControlServo>

  HAL_TIM_Base_Start_IT(&htim6);
 8002d76:	4815      	ldr	r0, [pc, #84]	; (8002dcc <main+0xfc>)
 8002d78:	f004 fd96 	bl	80078a8 <HAL_TIM_Base_Start_IT>
  InitMCC();
 8002d7c:	f7fe fa00 	bl	8001180 <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002d80:	213c      	movs	r1, #60	; 0x3c
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <main+0x100>)
 8002d84:	f005 f914 	bl	8007fb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002d88:	213c      	movs	r1, #60	; 0x3c
 8002d8a:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <main+0x104>)
 8002d8c:	f005 f910 	bl	8007fb0 <HAL_TIM_Encoder_Start>

  PIController_Init(&MoteurD);
 8002d90:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <main+0x108>)
 8002d92:	f7fe fb01 	bl	8001398 <PIController_Init>
  PIController_Init(&MoteurG);
 8002d96:	4811      	ldr	r0, [pc, #68]	; (8002ddc <main+0x10c>)
 8002d98:	f7fe fafe 	bl	8001398 <PIController_Init>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 8002d9c:	4810      	ldr	r0, [pc, #64]	; (8002de0 <main+0x110>)
 8002d9e:	f004 fd83 	bl	80078a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002da2:	4810      	ldr	r0, [pc, #64]	; (8002de4 <main+0x114>)
 8002da4:	f004 fd80 	bl	80078a8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start)
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <main+0x118>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0fb      	beq.n	8002da8 <main+0xd8>
	  {
		  //Test_Rasp();
		  Test_Canette();
 8002db0:	f7fe fcca 	bl	8001748 <Test_Canette>
	  if(start)
 8002db4:	e7f8      	b.n	8002da8 <main+0xd8>
 8002db6:	bf00      	nop
 8002db8:	20000bf8 	.word	0x20000bf8
 8002dbc:	20000c0c 	.word	0x20000c0c
 8002dc0:	20000bfc 	.word	0x20000bfc
 8002dc4:	20000c50 	.word	0x20000c50
 8002dc8:	20000a90 	.word	0x20000a90
 8002dcc:	20000b68 	.word	0x20000b68
 8002dd0:	20000a48 	.word	0x20000a48
 8002dd4:	20000b20 	.word	0x20000b20
 8002dd8:	20000940 	.word	0x20000940
 8002ddc:	20000968 	.word	0x20000968
 8002de0:	20000bb0 	.word	0x20000bb0
 8002de4:	20000ad8 	.word	0x20000ad8
 8002de8:	2000086c 	.word	0x2000086c

08002dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b096      	sub	sp, #88	; 0x58
 8002df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002df6:	2228      	movs	r2, #40	; 0x28
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f006 fe9a 	bl	8009b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]
 8002e1e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e30:	2301      	movs	r3, #1
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e34:	2302      	movs	r3, #2
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 f80b 	bl	8006e64 <HAL_RCC_OscConfig>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002e54:	f000 fa86 	bl	8003364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e58:	230f      	movs	r3, #15
 8002e5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	2102      	movs	r1, #2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fa77 	bl	8007368 <HAL_RCC_ClockConfig>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e80:	f000 fa70 	bl	8003364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e84:	2302      	movs	r3, #2
 8002e86:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 fc03 	bl	800769c <HAL_RCCEx_PeriphCLKConfig>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002e9c:	f000 fa62 	bl	8003364 <Error_Handler>
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3758      	adds	r7, #88	; 0x58
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002eb0:	1d39      	adds	r1, r7, #4
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4803      	ldr	r0, [pc, #12]	; (8002ec8 <__io_putchar+0x20>)
 8002eba:	f005 ffb1 	bl	8008e20 <HAL_UART_Transmit>
	return ch;
 8002ebe:	687b      	ldr	r3, [r7, #4]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000c0c 	.word	0x20000c0c

08002ecc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // 50Hz freq lecture TOF
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4aa1      	ldr	r2, [pc, #644]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	f000 81d6 	beq.w	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>

	}



	else if (htim->Instance == TIM7) //Tim 7 1sec pour du printf shell
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a9f      	ldr	r2, [pc, #636]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		//printf("%d\r\n", dist);
		printf("distance : %d\r\n", TOF_dist);
 8002eea:	4b9f      	ldr	r3, [pc, #636]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	489e      	ldr	r0, [pc, #632]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ef2:	f007 fc95 	bl	800a820 <iprintf>
				}

			  }
			}
		}
}
 8002ef6:	e1c9      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
	else if (htim->Instance == TIM4) //Delay Tof
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9c      	ldr	r2, [pc, #624]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d139      	bne.n	8002f76 <HAL_TIM_PeriodElapsedCallback+0xaa>
			TOF_tab[tab_i] = tofReadDistance();
 8002f02:	4b9c      	ldr	r3, [pc, #624]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f04:	681c      	ldr	r4, [r3, #0]
 8002f06:	f7ff fc01 	bl	800270c <tofReadDistance>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a9a      	ldr	r2, [pc, #616]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002f0e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			tab_i = (tab_i+1)%nb_mesure;
 8002f12:	4b98      	ldr	r3, [pc, #608]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	4b98      	ldr	r3, [pc, #608]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f1e:	089a      	lsrs	r2, r3, #2
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	1aca      	subs	r2, r1, r3
 8002f28:	4b92      	ldr	r3, [pc, #584]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f2a:	601a      	str	r2, [r3, #0]
			if(tab_i==10000) tab_i = 0;
 8002f2c:	4b91      	ldr	r3, [pc, #580]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d102      	bne.n	8002f3e <HAL_TIM_PeriodElapsedCallback+0x72>
 8002f38:	4b8e      	ldr	r3, [pc, #568]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
			int d_moy = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<nb_mesure; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	e009      	b.n	8002f5c <HAL_TIM_PeriodElapsedCallback+0x90>
				d_moy += TOF_tab[i];
 8002f48:	4a8b      	ldr	r2, [pc, #556]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<nb_mesure; i++)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	ddf2      	ble.n	8002f48 <HAL_TIM_PeriodElapsedCallback+0x7c>
			TOF_dist = d_moy/nb_mesure;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a86      	ldr	r2, [pc, #536]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002f66:	fb82 1203 	smull	r1, r2, r2, r3
 8002f6a:	1052      	asrs	r2, r2, #1
 8002f6c:	17db      	asrs	r3, r3, #31
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	e18a      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
	else if (htim->Instance == TIM6) //Tim 6 asserv en vitesse a 0.1sec
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	f040 8184 	bne.w	800328a <HAL_TIM_PeriodElapsedCallback+0x3be>
		if(emergencySTOP)
 8002f82:	4b81      	ldr	r3, [pc, #516]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_TIM_PeriodElapsedCallback+0xce>
			action = STOP;
 8002f8a:	4b80      	ldr	r3, [pc, #512]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_ALL);
 8002f90:	213c      	movs	r1, #60	; 0x3c
 8002f92:	487f      	ldr	r0, [pc, #508]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002f94:	f004 fdfa 	bl	8007b8c <HAL_TIM_PWM_Stop>
}
 8002f98:	e178      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
			switch(action)
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d127      	bne.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0x126>
				if(sens)dist -=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002fa2:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <HAL_TIM_PeriodElapsedCallback+0x102>
 8002faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002fba:	3bfe      	subs	r3, #254	; 0xfe
 8002fbc:	0859      	lsrs	r1, r3, #1
 8002fbe:	4b77      	ldr	r3, [pc, #476]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	b28b      	uxth	r3, r1
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b74      	ldr	r3, [pc, #464]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002fca:	801a      	strh	r2, [r3, #0]
				break;
 8002fcc:	e020      	b.n	8003010 <HAL_TIM_PeriodElapsedCallback+0x144>
				else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd4:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	4413      	add	r3, r2
 8002fda:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002fde:	3bfe      	subs	r3, #254	; 0xfe
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	4b6b      	ldr	r3, [pc, #428]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002fee:	801a      	strh	r2, [r3, #0]
				break;
 8002ff0:	e00e      	b.n	8003010 <HAL_TIM_PeriodElapsedCallback+0x144>
				dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ( Mid_Period_TIM5 - (TIM5->CNT)) ) / 2; //on moyenne la valeur
 8002ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff8:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	085b      	lsrs	r3, r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b64      	ldr	r3, [pc, #400]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800300c:	801a      	strh	r2, [r3, #0]
				break;
 800300e:	bf00      	nop
			  ReadEncodeur();
 8003010:	f7fe f99c 	bl	800134c <ReadEncodeur>
			  if(consigneD == 0)
 8003014:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <HAL_TIM_PeriodElapsedCallback+0x156>
				  Stop();
 800301c:	f7fe f94c 	bl	80012b8 <Stop>
}
 8003020:	e134      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
				switch(action)
 8003022:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	f000 80ca 	beq.w	80031c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 800302c:	2b02      	cmp	r3, #2
 800302e:	f300 8129 	bgt.w	8003284 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_TIM_PeriodElapsedCallback+0x170>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d049      	beq.n	80030ce <HAL_TIM_PeriodElapsedCallback+0x202>
 800303a:	e123      	b.n	8003284 <HAL_TIM_PeriodElapsedCallback+0x3b8>
					PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd ff75 	bl	8000f30 <__aeabi_i2f>
 8003046:	4604      	mov	r4, r0
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	22c8      	movs	r2, #200	; 0xc8
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	4a55      	ldr	r2, [pc, #340]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003054:	fb82 1203 	smull	r1, r2, r2, r3
 8003058:	1152      	asrs	r2, r2, #5
 800305a:	17db      	asrs	r3, r3, #31
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ff66 	bl	8000f30 <__aeabi_i2f>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4621      	mov	r1, r4
 800306a:	4850      	ldr	r0, [pc, #320]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800306c:	f7fe f9d2 	bl	8001414 <PIController_Update>
					PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8003070:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd ff5b 	bl	8000f30 <__aeabi_i2f>
 800307a:	4604      	mov	r4, r0
 800307c:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	22c8      	movs	r2, #200	; 0xc8
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003088:	fb82 1203 	smull	r1, r2, r2, r3
 800308c:	1112      	asrs	r2, r2, #4
 800308e:	17db      	asrs	r3, r3, #31
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ff4c 	bl	8000f30 <__aeabi_i2f>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	4621      	mov	r1, r4
 800309e:	4847      	ldr	r0, [pc, #284]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80030a0:	f7fe f9b8 	bl	8001414 <PIController_Update>
					AvancerPI(0, MoteurD.out);
 80030a4:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe f80b 	bl	80010c4 <__aeabi_f2iz>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4619      	mov	r1, r3
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fe f89a 	bl	80011ec <AvancerPI>
					AvancerPI(1, MoteurG.out);
 80030b8:	4b40      	ldr	r3, [pc, #256]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe f801 	bl	80010c4 <__aeabi_f2iz>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4619      	mov	r1, r3
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7fe f890 	bl	80011ec <AvancerPI>
					break;
 80030cc:	e0de      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
					PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd ff2c 	bl	8000f30 <__aeabi_i2f>
 80030d8:	4604      	mov	r4, r0
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	22c8      	movs	r2, #200	; 0xc8
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80030e6:	fb82 1203 	smull	r1, r2, r2, r3
 80030ea:	1152      	asrs	r2, r2, #5
 80030ec:	17db      	asrs	r3, r3, #31
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd ff1d 	bl	8000f30 <__aeabi_i2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	4621      	mov	r1, r4
 80030fc:	482b      	ldr	r0, [pc, #172]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80030fe:	f7fe f989 	bl	8001414 <PIController_Update>
					PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd ff12 	bl	8000f30 <__aeabi_i2f>
 800310c:	4604      	mov	r4, r0
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	22c8      	movs	r2, #200	; 0xc8
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800311a:	fb82 1203 	smull	r1, r2, r2, r3
 800311e:	1112      	asrs	r2, r2, #4
 8003120:	17db      	asrs	r3, r3, #31
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd ff03 	bl	8000f30 <__aeabi_i2f>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	4621      	mov	r1, r4
 8003130:	4822      	ldr	r0, [pc, #136]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003132:	f7fe f96f 	bl	8001414 <PIController_Update>
					ReculerPI(0, MoteurD.out);
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd ffc2 	bl	80010c4 <__aeabi_f2iz>
 8003140:	4603      	mov	r3, r0
 8003142:	4619      	mov	r1, r3
 8003144:	2000      	movs	r0, #0
 8003146:	f7fe f893 	bl	8001270 <ReculerPI>
					ReculerPI(1, MoteurG.out);
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd ffb8 	bl	80010c4 <__aeabi_f2iz>
 8003154:	4603      	mov	r3, r0
 8003156:	4619      	mov	r1, r3
 8003158:	2001      	movs	r0, #1
 800315a:	f7fe f889 	bl	8001270 <ReculerPI>
					break;
 800315e:	e095      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8003160:	40000400 	.word	0x40000400
 8003164:	40001400 	.word	0x40001400
 8003168:	2000093c 	.word	0x2000093c
 800316c:	0800e6a4 	.word	0x0800e6a4
 8003170:	40000800 	.word	0x40000800
 8003174:	20000938 	.word	0x20000938
 8003178:	20000924 	.word	0x20000924
 800317c:	cccccccd 	.word	0xcccccccd
 8003180:	66666667 	.word	0x66666667
 8003184:	40001000 	.word	0x40001000
 8003188:	20000920 	.word	0x20000920
 800318c:	2000010c 	.word	0x2000010c
 8003190:	20000a00 	.word	0x20000a00
 8003194:	20000910 	.word	0x20000910
 8003198:	40000c00 	.word	0x40000c00
 800319c:	200008fc 	.word	0x200008fc
 80031a0:	20000904 	.word	0x20000904
 80031a4:	20000900 	.word	0x20000900
 80031a8:	3531dec1 	.word	0x3531dec1
 80031ac:	20000940 	.word	0x20000940
 80031b0:	2000090c 	.word	0x2000090c
 80031b4:	20000908 	.word	0x20000908
 80031b8:	19c2d14f 	.word	0x19c2d14f
 80031bc:	20000968 	.word	0x20000968
					PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd feb3 	bl	8000f30 <__aeabi_i2f>
 80031ca:	4604      	mov	r4, r0
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	22c8      	movs	r2, #200	; 0xc8
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80031d8:	fb82 1203 	smull	r1, r2, r2, r3
 80031dc:	1152      	asrs	r2, r2, #5
 80031de:	17db      	asrs	r3, r3, #31
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fea4 	bl	8000f30 <__aeabi_i2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4621      	mov	r1, r4
 80031ee:	482c      	ldr	r0, [pc, #176]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80031f0:	f7fe f910 	bl	8001414 <PIController_Update>
					PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fe99 	bl	8000f30 <__aeabi_i2f>
 80031fe:	4604      	mov	r4, r0
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	22c8      	movs	r2, #200	; 0xc8
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800320c:	fb82 1203 	smull	r1, r2, r2, r3
 8003210:	1112      	asrs	r2, r2, #4
 8003212:	17db      	asrs	r3, r3, #31
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fe8a 	bl	8000f30 <__aeabi_i2f>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	4621      	mov	r1, r4
 8003222:	4823      	ldr	r0, [pc, #140]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8003224:	f7fe f8f6 	bl	8001414 <PIController_Update>
					if(sens)
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_TIM_PeriodElapsedCallback+0x38e>
						ReculerPI(0, MoteurD.out);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd ff45 	bl	80010c4 <__aeabi_f2iz>
 800323a:	4603      	mov	r3, r0
 800323c:	4619      	mov	r1, r3
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe f816 	bl	8001270 <ReculerPI>
						AvancerPI(1, MoteurG.out);
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd ff3b 	bl	80010c4 <__aeabi_f2iz>
 800324e:	4603      	mov	r3, r0
 8003250:	4619      	mov	r1, r3
 8003252:	2001      	movs	r0, #1
 8003254:	f7fd ffca 	bl	80011ec <AvancerPI>
					break;
 8003258:	e018      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
						AvancerPI(0, MoteurD.out);
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd ff30 	bl	80010c4 <__aeabi_f2iz>
 8003264:	4603      	mov	r3, r0
 8003266:	4619      	mov	r1, r3
 8003268:	2000      	movs	r0, #0
 800326a:	f7fd ffbf 	bl	80011ec <AvancerPI>
						ReculerPI(1, MoteurG.out);
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd ff26 	bl	80010c4 <__aeabi_f2iz>
 8003278:	4603      	mov	r3, r0
 800327a:	4619      	mov	r1, r3
 800327c:	2001      	movs	r0, #1
 800327e:	f7fd fff7 	bl	8001270 <ReculerPI>
					break;
 8003282:	e003      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
					Stop();
 8003284:	f7fe f818 	bl	80012b8 <Stop>
					break;
 8003288:	e000      	b.n	800328c <HAL_TIM_PeriodElapsedCallback+0x3c0>
			  }
 800328a:	bf00      	nop
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	20000904 	.word	0x20000904
 8003298:	20000900 	.word	0x20000900
 800329c:	3531dec1 	.word	0x3531dec1
 80032a0:	20000940 	.word	0x20000940
 80032a4:	2000090c 	.word	0x2000090c
 80032a8:	20000908 	.word	0x20000908
 80032ac:	19c2d14f 	.word	0x19c2d14f
 80032b0:	20000968 	.word	0x20000968
 80032b4:	20000910 	.word	0x20000910

080032b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
	//enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
	if(GPIO_Pin == USER_BTN_Pin)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d102      	bne.n	80032d0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		Debut_Test();
 80032ca:	f7fe fa25 	bl	8001718 <Debut_Test>
	{
		SwitchLed(2);
		//emergencySTOP = 1;
	}

}
 80032ce:	e00e      	b.n	80032ee <HAL_GPIO_EXTI_Callback+0x36>
	else if (GPIO_Pin == BDT1_Pin || GPIO_Pin == BDT2_Pin || GPIO_Pin == BDT3_Pin || GPIO_Pin == BDT4_Pin)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d008      	beq.n	80032e8 <HAL_GPIO_EXTI_Callback+0x30>
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d005      	beq.n	80032e8 <HAL_GPIO_EXTI_Callback+0x30>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d002      	beq.n	80032e8 <HAL_GPIO_EXTI_Callback+0x30>
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d102      	bne.n	80032ee <HAL_GPIO_EXTI_Callback+0x36>
		SwitchLed(2);
 80032e8:	2002      	movs	r0, #2
 80032ea:	f7ff fc61 	bl	8002bb0 <SwitchLed>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a11      	ldr	r2, [pc, #68]	; (800334c <HAL_UART_RxCpltCallback+0x54>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10e      	bne.n	8003328 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800330a:	2201      	movs	r2, #1
 800330c:	4910      	ldr	r1, [pc, #64]	; (8003350 <HAL_UART_RxCpltCallback+0x58>)
 800330e:	4811      	ldr	r0, [pc, #68]	; (8003354 <HAL_UART_RxCpltCallback+0x5c>)
 8003310:	f005 fe18 	bl	8008f44 <HAL_UART_Receive_IT>
		if(shellGetChar())
 8003314:	f000 f866 	bl	80033e4 <shellGetChar>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <HAL_UART_RxCpltCallback+0x4c>
		{
		  shellExec();
 800331e:	f000 f8d5 	bl	80034cc <shellExec>
		  shellPrompt();
 8003322:	f000 f83f 	bl	80033a4 <shellPrompt>
		HAL_UART_Receive_DMA(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
		raspGetChar();
		raspExec();
	}

}
 8003326:	e00d      	b.n	8003344 <HAL_UART_RxCpltCallback+0x4c>
	else if(huart->Instance == USART2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <HAL_UART_RxCpltCallback+0x60>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <HAL_UART_RxCpltCallback+0x4c>
		HAL_UART_Receive_DMA(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
 8003332:	220e      	movs	r2, #14
 8003334:	4909      	ldr	r1, [pc, #36]	; (800335c <HAL_UART_RxCpltCallback+0x64>)
 8003336:	480a      	ldr	r0, [pc, #40]	; (8003360 <HAL_UART_RxCpltCallback+0x68>)
 8003338:	f005 fe34 	bl	8008fa4 <HAL_UART_Receive_DMA>
		raspGetChar();
 800333c:	f7fe f916 	bl	800156c <raspGetChar>
		raspExec();
 8003340:	f7fe f976 	bl	8001630 <raspExec>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40013800 	.word	0x40013800
 8003350:	20000bf8 	.word	0x20000bf8
 8003354:	20000c0c 	.word	0x20000c0c
 8003358:	40004400 	.word	0x40004400
 800335c:	20000bfc 	.word	0x20000bfc
 8003360:	20000c50 	.word	0x20000c50

08003364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003368:	b672      	cpsid	i
}
 800336a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 800336c:	f7ff fc52 	bl	8002c14 <LedError>
  while (1)
 8003370:	e7fe      	b.n	8003370 <Error_Handler+0xc>
	...

08003374 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8003378:	f04f 33ff 	mov.w	r3, #4294967295
 800337c:	226c      	movs	r2, #108	; 0x6c
 800337e:	4906      	ldr	r1, [pc, #24]	; (8003398 <shellInit+0x24>)
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <shellInit+0x28>)
 8003382:	f005 fd4d 	bl	8008e20 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	220a      	movs	r2, #10
 800338c:	4904      	ldr	r1, [pc, #16]	; (80033a0 <shellInit+0x2c>)
 800338e:	4803      	ldr	r0, [pc, #12]	; (800339c <shellInit+0x28>)
 8003390:	f005 fd46 	bl	8008e20 <HAL_UART_Transmit>
}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000120 	.word	0x20000120
 800339c:	20000c0c 	.word	0x20000c0c
 80033a0:	20000114 	.word	0x20000114

080033a4 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80033a8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ac:	220a      	movs	r2, #10
 80033ae:	4903      	ldr	r1, [pc, #12]	; (80033bc <shellPrompt+0x18>)
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <shellPrompt+0x1c>)
 80033b2:	f005 fd35 	bl	8008e20 <HAL_UART_Transmit>
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000114 	.word	0x20000114
 80033c0:	20000c0c 	.word	0x20000c0c

080033c4 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
 80033cc:	2214      	movs	r2, #20
 80033ce:	4903      	ldr	r1, [pc, #12]	; (80033dc <shellCmdNotFound+0x18>)
 80033d0:	4803      	ldr	r0, [pc, #12]	; (80033e0 <shellCmdNotFound+0x1c>)
 80033d2:	f005 fd25 	bl	8008e20 <HAL_UART_Transmit>
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200005f4 	.word	0x200005f4
 80033e0:	20000c0c 	.word	0x20000c0c

080033e4 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 80033ee:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <shellGetChar+0xc8>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d030      	beq.n	8003458 <shellGetChar+0x74>
 80033f6:	2b0d      	cmp	r3, #13
 80033f8:	d140      	bne.n	800347c <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	2203      	movs	r2, #3
 8003400:	492b      	ldr	r1, [pc, #172]	; (80034b0 <shellGetChar+0xcc>)
 8003402:	482c      	ldr	r0, [pc, #176]	; (80034b4 <shellGetChar+0xd0>)
 8003404:	f005 fd0c 	bl	8008e20 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <shellGetChar+0xd4>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <shellGetChar+0xd8>)
 8003410:	2100      	movs	r1, #0
 8003412:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <shellGetChar+0xdc>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 800341a:	492a      	ldr	r1, [pc, #168]	; (80034c4 <shellGetChar+0xe0>)
 800341c:	4827      	ldr	r0, [pc, #156]	; (80034bc <shellGetChar+0xd8>)
 800341e:	f008 f8d5 	bl	800b5cc <strtok>
 8003422:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8003424:	e00f      	b.n	8003446 <shellGetChar+0x62>
			argv[argc++] = token;
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <shellGetChar+0xdc>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	b2d1      	uxtb	r1, r2
 800342e:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <shellGetChar+0xdc>)
 8003430:	7011      	strb	r1, [r2, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <shellGetChar+0xe4>)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 800343c:	4921      	ldr	r1, [pc, #132]	; (80034c4 <shellGetChar+0xe0>)
 800343e:	2000      	movs	r0, #0
 8003440:	f008 f8c4 	bl	800b5cc <strtok>
 8003444:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ec      	bne.n	8003426 <shellGetChar+0x42>
		}

		idxCmd = 0;
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <shellGetChar+0xd4>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	71fb      	strb	r3, [r7, #7]
		break;
 8003456:	e023      	b.n	80034a0 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <shellGetChar+0xd4>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	b2d1      	uxtb	r1, r2
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <shellGetChar+0xd4>)
 8003462:	7011      	strb	r1, [r2, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <shellGetChar+0xd8>)
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	2201      	movs	r2, #1
 8003472:	490e      	ldr	r1, [pc, #56]	; (80034ac <shellGetChar+0xc8>)
 8003474:	480f      	ldr	r0, [pc, #60]	; (80034b4 <shellGetChar+0xd0>)
 8003476:	f005 fcd3 	bl	8008e20 <HAL_UART_Transmit>
		break;
 800347a:	e011      	b.n	80034a0 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <shellGetChar+0xd4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	b2d1      	uxtb	r1, r2
 8003484:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <shellGetChar+0xd4>)
 8003486:	7011      	strb	r1, [r2, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <shellGetChar+0xc8>)
 800348c:	7819      	ldrb	r1, [r3, #0]
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <shellGetChar+0xd8>)
 8003490:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	2201      	movs	r2, #1
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <shellGetChar+0xc8>)
 800349a:	4806      	ldr	r0, [pc, #24]	; (80034b4 <shellGetChar+0xd0>)
 800349c:	f005 fcc0 	bl	8008e20 <HAL_UART_Transmit>
	}

	return newCmdReady;
 80034a0:	79fb      	ldrb	r3, [r7, #7]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000bf8 	.word	0x20000bf8
 80034b0:	2000018c 	.word	0x2000018c
 80034b4:	20000c0c 	.word	0x20000c0c
 80034b8:	200009d0 	.word	0x200009d0
 80034bc:	20000990 	.word	0x20000990
 80034c0:	200009f8 	.word	0x200009f8
 80034c4:	0800e6b4 	.word	0x0800e6b4
 80034c8:	200009d4 	.word	0x200009d4

080034cc <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 80034cc:	b598      	push	{r3, r4, r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 80034d0:	4ba4      	ldr	r3, [pc, #656]	; (8003764 <shellExec+0x298>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	49a4      	ldr	r1, [pc, #656]	; (8003768 <shellExec+0x29c>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fc fea6 	bl	8000228 <strcmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	f240 2231 	movw	r2, #561	; 0x231
 80034ea:	49a0      	ldr	r1, [pc, #640]	; (800376c <shellExec+0x2a0>)
 80034ec:	48a0      	ldr	r0, [pc, #640]	; (8003770 <shellExec+0x2a4>)
 80034ee:	f005 fc97 	bl	8008e20 <HAL_UART_Transmit>

	else{
		shellCmdNotFound();
	}

}
 80034f2:	e134      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"RTFM")==0)
 80034f4:	4b9b      	ldr	r3, [pc, #620]	; (8003764 <shellExec+0x298>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	499e      	ldr	r1, [pc, #632]	; (8003774 <shellExec+0x2a8>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc fe94 	bl	8000228 <strcmp>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800350e:	499a      	ldr	r1, [pc, #616]	; (8003778 <shellExec+0x2ac>)
 8003510:	4897      	ldr	r0, [pc, #604]	; (8003770 <shellExec+0x2a4>)
 8003512:	f005 fc85 	bl	8008e20 <HAL_UART_Transmit>
}
 8003516:	e122      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"led")==0)
 8003518:	4b92      	ldr	r3, [pc, #584]	; (8003764 <shellExec+0x298>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4997      	ldr	r1, [pc, #604]	; (800377c <shellExec+0x2b0>)
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc fe82 	bl	8000228 <strcmp>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d110      	bne.n	800354c <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	2222      	movs	r2, #34	; 0x22
 8003530:	4993      	ldr	r1, [pc, #588]	; (8003780 <shellExec+0x2b4>)
 8003532:	488f      	ldr	r0, [pc, #572]	; (8003770 <shellExec+0x2a4>)
 8003534:	f005 fc74 	bl	8008e20 <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 8003538:	4b8a      	ldr	r3, [pc, #552]	; (8003764 <shellExec+0x298>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f006 fabd 	bl	8009abc <atoi>
 8003542:	4603      	mov	r3, r0
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fb33 	bl	8002bb0 <SwitchLed>
}
 800354a:	e108      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"avancer")==0)
 800354c:	4b85      	ldr	r3, [pc, #532]	; (8003764 <shellExec+0x298>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	498c      	ldr	r1, [pc, #560]	; (8003784 <shellExec+0x2b8>)
 8003552:	4618      	mov	r0, r3
 8003554:	f7fc fe68 	bl	8000228 <strcmp>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d110      	bne.n	8003580 <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	2225      	movs	r2, #37	; 0x25
 8003564:	4988      	ldr	r1, [pc, #544]	; (8003788 <shellExec+0x2bc>)
 8003566:	4882      	ldr	r0, [pc, #520]	; (8003770 <shellExec+0x2a4>)
 8003568:	f005 fc5a 	bl	8008e20 <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 800356c:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <shellExec+0x298>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	f006 faa3 	bl	8009abc <atoi>
 8003576:	4603      	mov	r3, r0
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fe19 	bl	80011b0 <Avancer>
}
 800357e:	e0ee      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"reculer")==0)
 8003580:	4b78      	ldr	r3, [pc, #480]	; (8003764 <shellExec+0x298>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4981      	ldr	r1, [pc, #516]	; (800378c <shellExec+0x2c0>)
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fe4e 	bl	8000228 <strcmp>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d110      	bne.n	80035b4 <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	2227      	movs	r2, #39	; 0x27
 8003598:	497d      	ldr	r1, [pc, #500]	; (8003790 <shellExec+0x2c4>)
 800359a:	4875      	ldr	r0, [pc, #468]	; (8003770 <shellExec+0x2a4>)
 800359c:	f005 fc40 	bl	8008e20 <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 80035a0:	4b70      	ldr	r3, [pc, #448]	; (8003764 <shellExec+0x298>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 fa89 	bl	8009abc <atoi>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fe41 	bl	8001234 <Reculer>
}
 80035b2:	e0d4      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"stop")==0)
 80035b4:	4b6b      	ldr	r3, [pc, #428]	; (8003764 <shellExec+0x298>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4976      	ldr	r1, [pc, #472]	; (8003794 <shellExec+0x2c8>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc fe34 	bl	8000228 <strcmp>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	2216      	movs	r2, #22
 80035cc:	4972      	ldr	r1, [pc, #456]	; (8003798 <shellExec+0x2cc>)
 80035ce:	4868      	ldr	r0, [pc, #416]	; (8003770 <shellExec+0x2a4>)
 80035d0:	f005 fc26 	bl	8008e20 <HAL_UART_Transmit>
		Stop();
 80035d4:	f7fd fe70 	bl	80012b8 <Stop>
}
 80035d8:	e0c1      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"tourner")==0)
 80035da:	4b62      	ldr	r3, [pc, #392]	; (8003764 <shellExec+0x298>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	496f      	ldr	r1, [pc, #444]	; (800379c <shellExec+0x2d0>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc fe21 	bl	8000228 <strcmp>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d12a      	bne.n	8003642 <shellExec+0x176>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 80035ec:	4b5d      	ldr	r3, [pc, #372]	; (8003764 <shellExec+0x298>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	496b      	ldr	r1, [pc, #428]	; (80037a0 <shellExec+0x2d4>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc fe18 	bl	8000228 <strcmp>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <shellExec+0x146>
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <shellExec+0x298>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4968      	ldr	r1, [pc, #416]	; (80037a4 <shellExec+0x2d8>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc fe0f 	bl	8000228 <strcmp>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a6 	beq.w	800375e <shellExec+0x292>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	2230      	movs	r2, #48	; 0x30
 8003618:	4963      	ldr	r1, [pc, #396]	; (80037a8 <shellExec+0x2dc>)
 800361a:	4855      	ldr	r0, [pc, #340]	; (8003770 <shellExec+0x2a4>)
 800361c:	f005 fc00 	bl	8008e20 <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <shellExec+0x298>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f006 fa49 	bl	8009abc <atoi>
 800362a:	4604      	mov	r4, r0
 800362c:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <shellExec+0x298>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f006 fa43 	bl	8009abc <atoi>
 8003636:	4603      	mov	r3, r0
 8003638:	4619      	mov	r1, r3
 800363a:	4620      	mov	r0, r4
 800363c:	f7fd fe50 	bl	80012e0 <Tourner>
}
 8003640:	e08d      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"avancerPI")==0)
 8003642:	4b48      	ldr	r3, [pc, #288]	; (8003764 <shellExec+0x298>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4959      	ldr	r1, [pc, #356]	; (80037ac <shellExec+0x2e0>)
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc fded 	bl	8000228 <strcmp>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d117      	bne.n	8003684 <shellExec+0x1b8>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	2225      	movs	r2, #37	; 0x25
 800365a:	494b      	ldr	r1, [pc, #300]	; (8003788 <shellExec+0x2bc>)
 800365c:	4844      	ldr	r0, [pc, #272]	; (8003770 <shellExec+0x2a4>)
 800365e:	f005 fbdf 	bl	8008e20 <HAL_UART_Transmit>
		consigneD = atoi(argv[1]);
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <shellExec+0x298>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	f006 fa28 	bl	8009abc <atoi>
 800366c:	4603      	mov	r3, r0
 800366e:	4a50      	ldr	r2, [pc, #320]	; (80037b0 <shellExec+0x2e4>)
 8003670:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[1]);
 8003672:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <shellExec+0x298>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f006 fa20 	bl	8009abc <atoi>
 800367c:	4603      	mov	r3, r0
 800367e:	4a4d      	ldr	r2, [pc, #308]	; (80037b4 <shellExec+0x2e8>)
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	e06c      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"actionPI")==0)
 8003684:	4b37      	ldr	r3, [pc, #220]	; (8003764 <shellExec+0x298>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	494b      	ldr	r1, [pc, #300]	; (80037b8 <shellExec+0x2ec>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc fdcc 	bl	8000228 <strcmp>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d12b      	bne.n	80036ee <shellExec+0x222>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	2225      	movs	r2, #37	; 0x25
 800369c:	493a      	ldr	r1, [pc, #232]	; (8003788 <shellExec+0x2bc>)
 800369e:	4834      	ldr	r0, [pc, #208]	; (8003770 <shellExec+0x2a4>)
 80036a0:	f005 fbbe 	bl	8008e20 <HAL_UART_Transmit>
		action = atoi(argv[1]);
 80036a4:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <shellExec+0x298>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 fa07 	bl	8009abc <atoi>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4a42      	ldr	r2, [pc, #264]	; (80037bc <shellExec+0x2f0>)
 80036b2:	6013      	str	r3, [r2, #0]
		if(action ==2) sens = atoi(argv[3]);
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <shellExec+0x2f0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d107      	bne.n	80036cc <shellExec+0x200>
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <shellExec+0x298>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f006 f9fb 	bl	8009abc <atoi>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <shellExec+0x2f4>)
 80036ca:	6013      	str	r3, [r2, #0]
		consigneD = atoi(argv[2]);
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <shellExec+0x298>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f006 f9f3 	bl	8009abc <atoi>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <shellExec+0x2e4>)
 80036da:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[2]);
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <shellExec+0x298>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f006 f9eb 	bl	8009abc <atoi>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <shellExec+0x2e8>)
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	e037      	b.n	800375e <shellExec+0x292>
	else if(strcmp(argv[0],"servo")==0)
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <shellExec+0x298>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4934      	ldr	r1, [pc, #208]	; (80037c4 <shellExec+0x2f8>)
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc fd97 	bl	8000228 <strcmp>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d12c      	bne.n	800375a <shellExec+0x28e>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	2217      	movs	r2, #23
 8003706:	4930      	ldr	r1, [pc, #192]	; (80037c8 <shellExec+0x2fc>)
 8003708:	4819      	ldr	r0, [pc, #100]	; (8003770 <shellExec+0x2a4>)
 800370a:	f005 fb89 	bl	8008e20 <HAL_UART_Transmit>
		if(strcmp(argv[1],"ouvert")==0)
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <shellExec+0x298>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	492e      	ldr	r1, [pc, #184]	; (80037cc <shellExec+0x300>)
 8003714:	4618      	mov	r0, r3
 8003716:	f7fc fd87 	bl	8000228 <strcmp>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <shellExec+0x25e>
			ControlServo(SERVO_OPEN);
 8003720:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8003724:	f7fd ffde 	bl	80016e4 <ControlServo>
}
 8003728:	e019      	b.n	800375e <shellExec+0x292>
		else if(strcmp(argv[1],"ferme")==0)
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <shellExec+0x298>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4928      	ldr	r1, [pc, #160]	; (80037d0 <shellExec+0x304>)
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc fd79 	bl	8000228 <strcmp>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <shellExec+0x27a>
			ControlServo(SERVO_CLOSED);
 800373c:	f44f 7052 	mov.w	r0, #840	; 0x348
 8003740:	f7fd ffd0 	bl	80016e4 <ControlServo>
}
 8003744:	e00b      	b.n	800375e <shellExec+0x292>
		else ControlServo(atoi(argv[1]));
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <shellExec+0x298>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	f006 f9b6 	bl	8009abc <atoi>
 8003750:	4603      	mov	r3, r0
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd ffc6 	bl	80016e4 <ControlServo>
}
 8003758:	e001      	b.n	800375e <shellExec+0x292>
		shellCmdNotFound();
 800375a:	f7ff fe33 	bl	80033c4 <shellCmdNotFound>
}
 800375e:	bf00      	nop
 8003760:	bd98      	pop	{r3, r4, r7, pc}
 8003762:	bf00      	nop
 8003764:	200009d4 	.word	0x200009d4
 8003768:	0800e6b8 	.word	0x0800e6b8
 800376c:	20000190 	.word	0x20000190
 8003770:	20000c0c 	.word	0x20000c0c
 8003774:	0800e6c0 	.word	0x0800e6c0
 8003778:	200003c4 	.word	0x200003c4
 800377c:	0800e6c8 	.word	0x0800e6c8
 8003780:	20000520 	.word	0x20000520
 8003784:	0800e6cc 	.word	0x0800e6cc
 8003788:	20000544 	.word	0x20000544
 800378c:	0800e6d4 	.word	0x0800e6d4
 8003790:	2000056c 	.word	0x2000056c
 8003794:	0800e6dc 	.word	0x0800e6dc
 8003798:	20000594 	.word	0x20000594
 800379c:	0800e6e4 	.word	0x0800e6e4
 80037a0:	0800e6ec 	.word	0x0800e6ec
 80037a4:	0800e6f0 	.word	0x0800e6f0
 80037a8:	200005ac 	.word	0x200005ac
 80037ac:	0800e6f4 	.word	0x0800e6f4
 80037b0:	20000904 	.word	0x20000904
 80037b4:	2000090c 	.word	0x2000090c
 80037b8:	0800e700 	.word	0x0800e700
 80037bc:	2000010c 	.word	0x2000010c
 80037c0:	20000910 	.word	0x20000910
 80037c4:	0800e70c 	.word	0x0800e70c
 80037c8:	200005dc 	.word	0x200005dc
 80037cc:	0800e714 	.word	0x0800e714
 80037d0:	0800e71c 	.word	0x0800e71c

080037d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_MspInit+0x5c>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	4a14      	ldr	r2, [pc, #80]	; (8003830 <HAL_MspInit+0x5c>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6193      	str	r3, [r2, #24]
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_MspInit+0x5c>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_MspInit+0x5c>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_MspInit+0x5c>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	61d3      	str	r3, [r2, #28]
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_MspInit+0x5c>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_MspInit+0x60>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_MspInit+0x60>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40021000 	.word	0x40021000
 8003834:	40010000 	.word	0x40010000

08003838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800383c:	e7fe      	b.n	800383c <NMI_Handler+0x4>

0800383e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003842:	e7fe      	b.n	8003842 <HardFault_Handler+0x4>

08003844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003848:	e7fe      	b.n	8003848 <MemManage_Handler+0x4>

0800384a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800384e:	e7fe      	b.n	800384e <BusFault_Handler+0x4>

08003850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003854:	e7fe      	b.n	8003854 <UsageFault_Handler+0x4>

08003856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800387e:	f000 ff27 	bl	80046d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}

08003886 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BDT3_Pin);
 800388a:	2001      	movs	r0, #1
 800388c:	f002 f9a6 	bl	8005bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}

08003894 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BDT4_Pin);
 8003898:	2002      	movs	r0, #2
 800389a:	f002 f99f 	bl	8005bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_Interrupt_Pin);
 80038a6:	2010      	movs	r0, #16
 80038a8:	f002 f998 	bl	8005bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Channel6_IRQHandler+0x10>)
 80038b6:	f001 fc95 	bl	80051e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000c94 	.word	0x20000c94

080038c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BDT1_Pin);
 80038c8:	2040      	movs	r0, #64	; 0x40
 80038ca:	f002 f987 	bl	8005bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BDT2_Pin);
 80038ce:	2080      	movs	r0, #128	; 0x80
 80038d0:	f002 f984 	bl	8005bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <TIM1_UP_IRQHandler+0x10>)
 80038de:	f004 fbf5 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000a00 	.word	0x20000a00

080038ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <TIM2_IRQHandler+0x10>)
 80038f2:	f004 fbeb 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000a48 	.word	0x20000a48

08003900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <TIM3_IRQHandler+0x10>)
 8003906:	f004 fbe1 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000a90 	.word	0x20000a90

08003914 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <TIM4_IRQHandler+0x10>)
 800391a:	f004 fbd7 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000ad8 	.word	0x20000ad8

08003928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <USART1_IRQHandler+0x10>)
 800392e:	f005 fb69 	bl	8009004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000c0c 	.word	0x20000c0c

0800393c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <USART2_IRQHandler+0x10>)
 8003942:	f005 fb5f 	bl	8009004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000c50 	.word	0x20000c50

08003950 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8003954:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003958:	f002 f940 	bl	8005bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}

08003960 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003964:	4802      	ldr	r0, [pc, #8]	; (8003970 <TIM5_IRQHandler+0x10>)
 8003966:	f004 fbb1 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000b20 	.word	0x20000b20

08003974 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003978:	4802      	ldr	r0, [pc, #8]	; (8003984 <TIM6_IRQHandler+0x10>)
 800397a:	f004 fba7 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000b68 	.word	0x20000b68

08003988 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <TIM7_IRQHandler+0x10>)
 800398e:	f004 fb9d 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000bb0 	.word	0x20000bb0

0800399c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
	return 1;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <_kill>:

int _kill(int pid, int sig)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039b4:	f006 f886 	bl	8009ac4 <__errno>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2216      	movs	r2, #22
 80039bc:	601a      	str	r2, [r3, #0]
	return -1;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_exit>:

void _exit (int status)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039d2:	f04f 31ff 	mov.w	r1, #4294967295
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffe7 	bl	80039aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80039dc:	e7fe      	b.n	80039dc <_exit+0x12>

080039de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e00a      	b.n	8003a06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039f0:	f3af 8000 	nop.w
 80039f4:	4601      	mov	r1, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	60ba      	str	r2, [r7, #8]
 80039fc:	b2ca      	uxtb	r2, r1
 80039fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3301      	adds	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	dbf0      	blt.n	80039f0 <_read+0x12>
	}

return len;
 8003a0e:	687b      	ldr	r3, [r7, #4]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e009      	b.n	8003a3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	60ba      	str	r2, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fa38 	bl	8002ea8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	dbf1      	blt.n	8003a2a <_write+0x12>
	}
	return len;
 8003a46:	687b      	ldr	r3, [r7, #4]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_close>:

int _close(int file)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	return -1;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a76:	605a      	str	r2, [r3, #4]
	return 0;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <_isatty>:

int _isatty(int file)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	return 1;
 8003a8c:	2301      	movs	r3, #1
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
	return 0;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <_sbrk+0x5c>)
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <_sbrk+0x60>)
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <_sbrk+0x64>)
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <_sbrk+0x68>)
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d207      	bcs.n	8003af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ae0:	f005 fff0 	bl	8009ac4 <__errno>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e009      	b.n	8003b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <_sbrk+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <_sbrk+0x64>)
 8003b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000c000 	.word	0x2000c000
 8003b10:	00000400 	.word	0x00000400
 8003b14:	200009fc 	.word	0x200009fc
 8003b18:	20000cf0 	.word	0x20000cf0

08003b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b096      	sub	sp, #88	; 0x58
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	60da      	str	r2, [r3, #12]
 8003b54:	611a      	str	r2, [r3, #16]
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4618      	mov	r0, r3
 8003b62:	f005 ffe7 	bl	8009b34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b66:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b68:	4a50      	ldr	r2, [pc, #320]	; (8003cac <MX_TIM1_Init+0x184>)
 8003b6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8003b6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b6e:	2211      	movs	r2, #17
 8003b70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b72:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b7a:	22c7      	movs	r2, #199	; 0xc7
 8003b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b84:	4b48      	ldr	r3, [pc, #288]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b8a:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b90:	4845      	ldr	r0, [pc, #276]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003b92:	f003 fe39 	bl	8007808 <HAL_TIM_Base_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003b9c:	f7ff fbe2 	bl	8003364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003baa:	4619      	mov	r1, r3
 8003bac:	483e      	ldr	r0, [pc, #248]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003bae:	f004 fc53 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003bb8:	f7ff fbd4 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bbc:	483a      	ldr	r0, [pc, #232]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003bbe:	f003 fed3 	bl	8007968 <HAL_TIM_PWM_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003bc8:	f7ff fbcc 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4833      	ldr	r0, [pc, #204]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003bdc:	f005 f804 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003be6:	f7ff fbbd 	bl	8003364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bea:	2360      	movs	r3, #96	; 0x60
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4826      	ldr	r0, [pc, #152]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003c10:	f004 fb64 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003c1a:	f7ff fba3 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c22:	2204      	movs	r2, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4820      	ldr	r0, [pc, #128]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003c28:	f004 fb58 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003c32:	f7ff fb97 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	481a      	ldr	r0, [pc, #104]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003c40:	f004 fb4c 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003c4a:	f7ff fb8b 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c52:	220c      	movs	r2, #12
 8003c54:	4619      	mov	r1, r3
 8003c56:	4814      	ldr	r0, [pc, #80]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003c58:	f004 fb40 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003c62:	f7ff fb7f 	bl	8003364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4807      	ldr	r0, [pc, #28]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003c8a:	f005 f819 	bl	8008cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003c94:	f7ff fb66 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c98:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <MX_TIM1_Init+0x180>)
 8003c9a:	f000 fb21 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8003c9e:	bf00      	nop
 8003ca0:	3758      	adds	r7, #88	; 0x58
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000a00 	.word	0x20000a00
 8003cac:	40012c00 	.word	0x40012c00

08003cb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f005 ff38 	bl	8009b34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ccc:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	480d      	ldr	r0, [pc, #52]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003d20:	f004 f8a4 	bl	8007e6c <HAL_TIM_Encoder_Init>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003d2a:	f7ff fb1b 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4806      	ldr	r0, [pc, #24]	; (8003d54 <MX_TIM2_Init+0xa4>)
 8003d3c:	f004 ff54 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003d46:	f7ff fb0d 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d4a:	bf00      	nop
 8003d4c:	3730      	adds	r7, #48	; 0x30
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000a48 	.word	0x20000a48

08003d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08e      	sub	sp, #56	; 0x38
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d6c:	f107 0320 	add.w	r3, r7, #32
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
 8003d84:	615a      	str	r2, [r3, #20]
 8003d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d88:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003d8a:	4a2e      	ldr	r2, [pc, #184]	; (8003e44 <MX_TIM3_Init+0xec>)
 8003d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003d8e:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003d90:	2247      	movs	r2, #71	; 0x47
 8003d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003d9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da8:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dae:	4824      	ldr	r0, [pc, #144]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003db0:	f003 fd2a 	bl	8007808 <HAL_TIM_Base_Init>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003dba:	f7ff fad3 	bl	8003364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dc8:	4619      	mov	r1, r3
 8003dca:	481d      	ldr	r0, [pc, #116]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003dcc:	f004 fb44 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003dd6:	f7ff fac5 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dda:	4819      	ldr	r0, [pc, #100]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003ddc:	f003 fdc4 	bl	8007968 <HAL_TIM_PWM_Init>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003de6:	f7ff fabd 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003df2:	f107 0320 	add.w	r3, r7, #32
 8003df6:	4619      	mov	r1, r3
 8003df8:	4811      	ldr	r0, [pc, #68]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003dfa:	f004 fef5 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003e04:	f7ff faae 	bl	8003364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e08:	2360      	movs	r3, #96	; 0x60
 8003e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 8003e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4807      	ldr	r0, [pc, #28]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003e22:	f004 fa5b 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003e2c:	f7ff fa9a 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e30:	4803      	ldr	r0, [pc, #12]	; (8003e40 <MX_TIM3_Init+0xe8>)
 8003e32:	f000 fa55 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8003e36:	bf00      	nop
 8003e38:	3738      	adds	r7, #56	; 0x38
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000a90 	.word	0x20000a90
 8003e44:	40000400 	.word	0x40000400

08003e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e4e:	f107 0308 	add.w	r3, r7, #8
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <MX_TIM4_Init+0x98>)
 8003e68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e6c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003e70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e72:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e8c:	4813      	ldr	r0, [pc, #76]	; (8003edc <MX_TIM4_Init+0x94>)
 8003e8e:	f003 fcbb 	bl	8007808 <HAL_TIM_Base_Init>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e98:	f7ff fa64 	bl	8003364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ea2:	f107 0308 	add.w	r3, r7, #8
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	480c      	ldr	r0, [pc, #48]	; (8003edc <MX_TIM4_Init+0x94>)
 8003eaa:	f004 fad5 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003eb4:	f7ff fa56 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4805      	ldr	r0, [pc, #20]	; (8003edc <MX_TIM4_Init+0x94>)
 8003ec6:	f004 fe8f 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003ed0:	f7ff fa48 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000ad8 	.word	0x20000ad8
 8003ee0:	40000800 	.word	0x40000800

08003ee4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f005 fe1e 	bl	8009b34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <MX_TIM5_Init+0xa4>)
 8003f04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f20:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f42:	2300      	movs	r3, #0
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4619      	mov	r1, r3
 8003f50:	480c      	ldr	r0, [pc, #48]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f52:	f003 ff8b 	bl	8007e6c <HAL_TIM_Encoder_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003f5c:	f7ff fa02 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4805      	ldr	r0, [pc, #20]	; (8003f84 <MX_TIM5_Init+0xa0>)
 8003f6e:	f004 fe3b 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003f78:	f7ff f9f4 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f7c:	bf00      	nop
 8003f7e:	3730      	adds	r7, #48	; 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000b20 	.word	0x20000b20
 8003f88:	40000c00 	.word	0x40000c00

08003f8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f92:	463b      	mov	r3, r7
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <MX_TIM6_Init+0x68>)
 8003f9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003fa2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003fa6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003fbc:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003fbe:	f003 fc23 	bl	8007808 <HAL_TIM_Base_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003fc8:	f7ff f9cc 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4805      	ldr	r0, [pc, #20]	; (8003ff0 <MX_TIM6_Init+0x64>)
 8003fda:	f004 fe05 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003fe4:	f7ff f9be 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000b68 	.word	0x20000b68
 8003ff4:	40001000 	.word	0x40001000

08003ff8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffe:	463b      	mov	r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <MX_TIM7_Init+0x64>)
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <MX_TIM7_Init+0x68>)
 800400a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <MX_TIM7_Init+0x64>)
 800400e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8004012:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <MX_TIM7_Init+0x64>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <MX_TIM7_Init+0x64>)
 800401c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004020:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <MX_TIM7_Init+0x64>)
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <MX_TIM7_Init+0x64>)
 800402a:	f003 fbed 	bl	8007808 <HAL_TIM_Base_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004034:	f7ff f996 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004038:	2300      	movs	r3, #0
 800403a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004040:	463b      	mov	r3, r7
 8004042:	4619      	mov	r1, r3
 8004044:	4805      	ldr	r0, [pc, #20]	; (800405c <MX_TIM7_Init+0x64>)
 8004046:	f004 fdcf 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004050:	f7ff f988 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000bb0 	.word	0x20000bb0
 8004060:	40001400 	.word	0x40001400

08004064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a41      	ldr	r2, [pc, #260]	; (8004178 <HAL_TIM_Base_MspInit+0x114>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d114      	bne.n	80040a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	4a40      	ldr	r2, [pc, #256]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 800407c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004080:	6193      	str	r3, [r2, #24]
 8004082:	4b3e      	ldr	r3, [pc, #248]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800408e:	2200      	movs	r2, #0
 8004090:	2100      	movs	r1, #0
 8004092:	2019      	movs	r0, #25
 8004094:	f000 fe57 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004098:	2019      	movs	r0, #25
 800409a:	f000 fe70 	bl	8004d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800409e:	e066      	b.n	800416e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a36      	ldr	r2, [pc, #216]	; (8004180 <HAL_TIM_Base_MspInit+0x11c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d114      	bne.n	80040d4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a33      	ldr	r2, [pc, #204]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	201d      	movs	r0, #29
 80040c8:	f000 fe3d 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040cc:	201d      	movs	r0, #29
 80040ce:	f000 fe56 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 80040d2:	e04c      	b.n	800416e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM4)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <HAL_TIM_Base_MspInit+0x120>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d114      	bne.n	8004108 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	61d3      	str	r3, [r2, #28]
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2100      	movs	r1, #0
 80040fa:	201e      	movs	r0, #30
 80040fc:	f000 fe23 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004100:	201e      	movs	r0, #30
 8004102:	f000 fe3c 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 8004106:	e032      	b.n	800416e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM6)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_TIM_Base_MspInit+0x124>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d114      	bne.n	800413c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004118:	f043 0310 	orr.w	r3, r3, #16
 800411c:	61d3      	str	r3, [r2, #28]
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	2036      	movs	r0, #54	; 0x36
 8004130:	f000 fe09 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004134:	2036      	movs	r0, #54	; 0x36
 8004136:	f000 fe22 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 800413a:	e018      	b.n	800416e <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM7)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_TIM_Base_MspInit+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4a0c      	ldr	r2, [pc, #48]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 800414c:	f043 0320 	orr.w	r3, r3, #32
 8004150:	61d3      	str	r3, [r2, #28]
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_TIM_Base_MspInit+0x118>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	2037      	movs	r0, #55	; 0x37
 8004164:	f000 fdef 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004168:	2037      	movs	r0, #55	; 0x37
 800416a:	f000 fe08 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 800416e:	bf00      	nop
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40021000 	.word	0x40021000
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40001000 	.word	0x40001000
 800418c:	40001400 	.word	0x40001400

08004190 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d157      	bne.n	8004260 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041b0:	4b46      	ldr	r3, [pc, #280]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4a45      	ldr	r2, [pc, #276]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	61d3      	str	r3, [r2, #28]
 80041bc:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c8:	4b40      	ldr	r3, [pc, #256]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	4a3f      	ldr	r2, [pc, #252]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	6193      	str	r3, [r2, #24]
 80041d4:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e0:	4b3a      	ldr	r3, [pc, #232]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4a39      	ldr	r2, [pc, #228]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041e6:	f043 0308 	orr.w	r3, r3, #8
 80041ea:	6193      	str	r3, [r2, #24]
 80041ec:	4b37      	ldr	r3, [pc, #220]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 80041f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fe:	2300      	movs	r3, #0
 8004200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8004206:	f107 031c 	add.w	r3, r7, #28
 800420a:	4619      	mov	r1, r3
 800420c:	4830      	ldr	r0, [pc, #192]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x140>)
 800420e:	f001 fa53 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8004212:	2308      	movs	r3, #8
 8004214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004216:	2300      	movs	r3, #0
 8004218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800421e:	f107 031c 	add.w	r3, r7, #28
 8004222:	4619      	mov	r1, r3
 8004224:	482b      	ldr	r0, [pc, #172]	; (80042d4 <HAL_TIM_Encoder_MspInit+0x144>)
 8004226:	f001 fa47 	bl	80056b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_TIM_Encoder_MspInit+0x148>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_TIM_Encoder_MspInit+0x148>)
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2100      	movs	r1, #0
 8004252:	201c      	movs	r0, #28
 8004254:	f000 fd77 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004258:	201c      	movs	r0, #28
 800425a:	f000 fd90 	bl	8004d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800425e:	e030      	b.n	80042c2 <HAL_TIM_Encoder_MspInit+0x132>
  else if(tim_encoderHandle->Instance==TIM5)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <HAL_TIM_Encoder_MspInit+0x14c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12b      	bne.n	80042c2 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8004270:	f043 0308 	orr.w	r3, r3, #8
 8004274:	61d3      	str	r3, [r2, #28]
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	4a11      	ldr	r2, [pc, #68]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	6193      	str	r3, [r2, #24]
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_TIM_Encoder_MspInit+0x13c>)
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 800429a:	2303      	movs	r3, #3
 800429c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	f107 031c 	add.w	r3, r7, #28
 80042aa:	4619      	mov	r1, r3
 80042ac:	4808      	ldr	r0, [pc, #32]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x140>)
 80042ae:	f001 fa03 	bl	80056b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80042b2:	2200      	movs	r2, #0
 80042b4:	2100      	movs	r1, #0
 80042b6:	2032      	movs	r0, #50	; 0x32
 80042b8:	f000 fd45 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80042bc:	2032      	movs	r0, #50	; 0x32
 80042be:	f000 fd5e 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 80042c2:	bf00      	nop
 80042c4:	3730      	adds	r7, #48	; 0x30
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40010800 	.word	0x40010800
 80042d4:	40010c00 	.word	0x40010c00
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000c00 	.word	0x40000c00

080042e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a28      	ldr	r2, [pc, #160]	; (800439c <HAL_TIM_MspPostInit+0xbc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d119      	bne.n	8004334 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004300:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_TIM_MspPostInit+0xc0>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4a26      	ldr	r2, [pc, #152]	; (80043a0 <HAL_TIM_MspPostInit+0xc0>)
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	6193      	str	r3, [r2, #24]
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_TIM_MspPostInit+0xc0>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8004318:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800431c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004322:	2302      	movs	r3, #2
 8004324:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	4619      	mov	r1, r3
 800432c:	481d      	ldr	r0, [pc, #116]	; (80043a4 <HAL_TIM_MspPostInit+0xc4>)
 800432e:	f001 f9c3 	bl	80056b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004332:	e02e      	b.n	8004392 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <HAL_TIM_MspPostInit+0xc8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d129      	bne.n	8004392 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800433e:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_TIM_MspPostInit+0xc0>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <HAL_TIM_MspPostInit+0xc0>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	6193      	str	r3, [r2, #24]
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_TIM_MspPostInit+0xc0>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8004356:	2340      	movs	r3, #64	; 0x40
 8004358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435a:	2302      	movs	r3, #2
 800435c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435e:	2302      	movs	r3, #2
 8004360:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	4619      	mov	r1, r3
 8004368:	4810      	ldr	r0, [pc, #64]	; (80043ac <HAL_TIM_MspPostInit+0xcc>)
 800436a:	f001 f9a5 	bl	80056b8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <HAL_TIM_MspPostInit+0xd0>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <HAL_TIM_MspPostInit+0xd0>)
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	6053      	str	r3, [r2, #4]
}
 8004392:	bf00      	nop
 8004394:	3728      	adds	r7, #40	; 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40010800 	.word	0x40010800
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40011000 	.word	0x40011000
 80043b0:	40010000 	.word	0x40010000

080043b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <MX_USART1_UART_Init+0x50>)
 80043bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043da:	220c      	movs	r2, #12
 80043dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ea:	4805      	ldr	r0, [pc, #20]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ec:	f004 fccb 	bl	8008d86 <HAL_UART_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043f6:	f7fe ffb5 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000c0c 	.word	0x20000c0c
 8004404:	40013800 	.word	0x40013800

08004408 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <MX_USART2_UART_Init+0x50>)
 8004410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800442e:	220c      	movs	r2, #12
 8004430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004440:	f004 fca1 	bl	8008d86 <HAL_UART_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800444a:	f7fe ff8b 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000c50 	.word	0x20000c50
 8004458:	40004400 	.word	0x40004400

0800445c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004464:	f107 031c 	add.w	r3, r7, #28
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_UART_MspInit+0x17c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d146      	bne.n	800450a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800447c:	4b57      	ldr	r3, [pc, #348]	; (80045dc <HAL_UART_MspInit+0x180>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	4a56      	ldr	r2, [pc, #344]	; (80045dc <HAL_UART_MspInit+0x180>)
 8004482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004486:	6193      	str	r3, [r2, #24]
 8004488:	4b54      	ldr	r3, [pc, #336]	; (80045dc <HAL_UART_MspInit+0x180>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004494:	4b51      	ldr	r3, [pc, #324]	; (80045dc <HAL_UART_MspInit+0x180>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a50      	ldr	r2, [pc, #320]	; (80045dc <HAL_UART_MspInit+0x180>)
 800449a:	f043 0308 	orr.w	r3, r3, #8
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b4e      	ldr	r3, [pc, #312]	; (80045dc <HAL_UART_MspInit+0x180>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 80044ac:	2340      	movs	r3, #64	; 0x40
 80044ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b0:	2302      	movs	r3, #2
 80044b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b4:	2303      	movs	r3, #3
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80044b8:	f107 031c 	add.w	r3, r7, #28
 80044bc:	4619      	mov	r1, r3
 80044be:	4848      	ldr	r0, [pc, #288]	; (80045e0 <HAL_UART_MspInit+0x184>)
 80044c0:	f001 f8fa 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c8:	2300      	movs	r3, #0
 80044ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80044d0:	f107 031c 	add.w	r3, r7, #28
 80044d4:	4619      	mov	r1, r3
 80044d6:	4842      	ldr	r0, [pc, #264]	; (80045e0 <HAL_UART_MspInit+0x184>)
 80044d8:	f001 f8ee 	bl	80056b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80044dc:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_UART_MspInit+0x188>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	4a3c      	ldr	r2, [pc, #240]	; (80045e4 <HAL_UART_MspInit+0x188>)
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	2025      	movs	r0, #37	; 0x25
 80044fe:	f000 fc22 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004502:	2025      	movs	r0, #37	; 0x25
 8004504:	f000 fc3b 	bl	8004d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004508:	e062      	b.n	80045d0 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a36      	ldr	r2, [pc, #216]	; (80045e8 <HAL_UART_MspInit+0x18c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d15d      	bne.n	80045d0 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <HAL_UART_MspInit+0x180>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <HAL_UART_MspInit+0x180>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451e:	61d3      	str	r3, [r2, #28]
 8004520:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <HAL_UART_MspInit+0x180>)
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_UART_MspInit+0x180>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_UART_MspInit+0x180>)
 8004532:	f043 0304 	orr.w	r3, r3, #4
 8004536:	6193      	str	r3, [r2, #24]
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <HAL_UART_MspInit+0x180>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8004544:	2304      	movs	r3, #4
 8004546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004550:	f107 031c 	add.w	r3, r7, #28
 8004554:	4619      	mov	r1, r3
 8004556:	4825      	ldr	r0, [pc, #148]	; (80045ec <HAL_UART_MspInit+0x190>)
 8004558:	f001 f8ae 	bl	80056b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 800455c:	2308      	movs	r3, #8
 800455e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	4619      	mov	r1, r3
 800456e:	481f      	ldr	r0, [pc, #124]	; (80045ec <HAL_UART_MspInit+0x190>)
 8004570:	f001 f8a2 	bl	80056b8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_UART_MspInit+0x194>)
 8004576:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_UART_MspInit+0x198>)
 8004578:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_UART_MspInit+0x194>)
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_UART_MspInit+0x194>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_UART_MspInit+0x194>)
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_UART_MspInit+0x194>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <HAL_UART_MspInit+0x194>)
 8004594:	2200      	movs	r2, #0
 8004596:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_UART_MspInit+0x194>)
 800459a:	2220      	movs	r2, #32
 800459c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_UART_MspInit+0x194>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80045a4:	4812      	ldr	r0, [pc, #72]	; (80045f0 <HAL_UART_MspInit+0x194>)
 80045a6:	f000 fc05 	bl	8004db4 <HAL_DMA_Init>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_UART_MspInit+0x158>
      Error_Handler();
 80045b0:	f7fe fed8 	bl	8003364 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <HAL_UART_MspInit+0x194>)
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <HAL_UART_MspInit+0x194>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	2026      	movs	r0, #38	; 0x26
 80045c6:	f000 fbbe 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045ca:	2026      	movs	r0, #38	; 0x26
 80045cc:	f000 fbd7 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 80045d0:	bf00      	nop
 80045d2:	3730      	adds	r7, #48	; 0x30
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40010c00 	.word	0x40010c00
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40004400 	.word	0x40004400
 80045ec:	40010800 	.word	0x40010800
 80045f0:	20000c94 	.word	0x20000c94
 80045f4:	4002006c 	.word	0x4002006c

080045f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045f8:	480c      	ldr	r0, [pc, #48]	; (800462c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045fa:	490d      	ldr	r1, [pc, #52]	; (8004630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004600:	e002      	b.n	8004608 <LoopCopyDataInit>

08004602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004606:	3304      	adds	r3, #4

08004608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800460a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800460c:	d3f9      	bcc.n	8004602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004610:	4c0a      	ldr	r4, [pc, #40]	; (800463c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004614:	e001      	b.n	800461a <LoopFillZerobss>

08004616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004618:	3204      	adds	r2, #4

0800461a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800461a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800461c:	d3fb      	bcc.n	8004616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800461e:	f7ff fa7d 	bl	8003b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004622:	f005 fa55 	bl	8009ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004626:	f7fe fb53 	bl	8002cd0 <main>
  bx lr
 800462a:	4770      	bx	lr
  ldr r0, =_sdata
 800462c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004630:	200007e8 	.word	0x200007e8
  ldr r2, =_sidata
 8004634:	0800ec60 	.word	0x0800ec60
  ldr r2, =_sbss
 8004638:	200007e8 	.word	0x200007e8
  ldr r4, =_ebss
 800463c:	20000cec 	.word	0x20000cec

08004640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004640:	e7fe      	b.n	8004640 <ADC1_2_IRQHandler>
	...

08004644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_Init+0x28>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <HAL_Init+0x28>)
 800464e:	f043 0310 	orr.w	r3, r3, #16
 8004652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004654:	2003      	movs	r0, #3
 8004656:	f000 fb6b 	bl	8004d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800465a:	200f      	movs	r0, #15
 800465c:	f000 f808 	bl	8004670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004660:	f7ff f8b8 	bl	80037d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40022000 	.word	0x40022000

08004670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_InitTick+0x54>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_InitTick+0x58>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004686:	fbb3 f3f1 	udiv	r3, r3, r1
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fb83 	bl	8004d9a <HAL_SYSTICK_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e00e      	b.n	80046bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d80a      	bhi.n	80046ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a4:	2200      	movs	r2, #0
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	f000 fb4b 	bl	8004d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046b0:	4a06      	ldr	r2, [pc, #24]	; (80046cc <HAL_InitTick+0x5c>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000608 	.word	0x20000608
 80046c8:	20000610 	.word	0x20000610
 80046cc:	2000060c 	.word	0x2000060c

080046d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_IncTick+0x1c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_IncTick+0x20>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	4a03      	ldr	r2, [pc, #12]	; (80046f0 <HAL_IncTick+0x20>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	20000610 	.word	0x20000610
 80046f0:	20000cd8 	.word	0x20000cd8

080046f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return uwTick;
 80046f8:	4b02      	ldr	r3, [pc, #8]	; (8004704 <HAL_GetTick+0x10>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	20000cd8 	.word	0x20000cd8

08004708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004710:	f7ff fff0 	bl	80046f4 <HAL_GetTick>
 8004714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d005      	beq.n	800472e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_Delay+0x44>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800472e:	bf00      	nop
 8004730:	f7ff ffe0 	bl	80046f4 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	429a      	cmp	r2, r3
 800473e:	d8f7      	bhi.n	8004730 <HAL_Delay+0x28>
  {
  }
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000610 	.word	0x20000610

08004750 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0ce      	b.n	8004910 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd f942 	bl	8001a18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9bd 	bl	8004b14 <ADC_ConversionStop_Disable>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 80a9 	bne.w	80048fe <HAL_ADC_Init+0x1ae>
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 80a5 	bne.w	80048fe <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047bc:	f023 0302 	bic.w	r3, r3, #2
 80047c0:	f043 0202 	orr.w	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4951      	ldr	r1, [pc, #324]	; (8004918 <HAL_ADC_Init+0x1c8>)
 80047d2:	428b      	cmp	r3, r1
 80047d4:	d10a      	bne.n	80047ec <HAL_ADC_Init+0x9c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047de:	d002      	beq.n	80047e6 <HAL_ADC_Init+0x96>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	e004      	b.n	80047f0 <HAL_ADC_Init+0xa0>
 80047e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047ea:	e001      	b.n	80047f0 <HAL_ADC_Init+0xa0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7b1b      	ldrb	r3, [r3, #12]
 80047f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004808:	d003      	beq.n	8004812 <HAL_ADC_Init+0xc2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_ADC_Init+0xc8>
 8004812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004816:	e000      	b.n	800481a <HAL_ADC_Init+0xca>
 8004818:	2300      	movs	r3, #0
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7d1b      	ldrb	r3, [r3, #20]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d119      	bne.n	800485c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7b1b      	ldrb	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	3b01      	subs	r3, #1
 8004836:	035a      	lsls	r2, r3, #13
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	e00b      	b.n	800485c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <HAL_ADC_Init+0x1cc>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	430b      	orrs	r3, r1
 8004882:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d003      	beq.n	8004896 <HAL_ADC_Init+0x146>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d104      	bne.n	80048a0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	3b01      	subs	r3, #1
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_ADC_Init+0x1d0>)
 80048bc:	4013      	ands	r3, r2
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d10b      	bne.n	80048dc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	f043 0201 	orr.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048da:	e018      	b.n	800490e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f023 0312 	bic.w	r3, r3, #18
 80048e4:	f043 0210 	orr.w	r2, r3, #16
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048fc:	e007      	b.n	800490e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	f043 0210 	orr.w	r2, r3, #16
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40013c00 	.word	0x40013c00
 800491c:	ffe1f7fd 	.word	0xffe1f7fd
 8004920:	ff1f0efe 	.word	0xff1f0efe

08004924 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x20>
 8004940:	2302      	movs	r3, #2
 8004942:	e0dc      	b.n	8004afe <HAL_ADC_ConfigChannel+0x1da>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b06      	cmp	r3, #6
 8004952:	d81c      	bhi.n	800498e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	3b05      	subs	r3, #5
 8004966:	221f      	movs	r2, #31
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	4019      	ands	r1, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	3b05      	subs	r3, #5
 8004980:	fa00 f203 	lsl.w	r2, r0, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
 800498c:	e03c      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b0c      	cmp	r3, #12
 8004994:	d81c      	bhi.n	80049d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	3b23      	subs	r3, #35	; 0x23
 80049a8:	221f      	movs	r2, #31
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	4019      	ands	r1, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	3b23      	subs	r3, #35	; 0x23
 80049c2:	fa00 f203 	lsl.w	r2, r0, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
 80049ce:	e01b      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	3b41      	subs	r3, #65	; 0x41
 80049e2:	221f      	movs	r2, #31
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	4019      	ands	r1, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	3b41      	subs	r3, #65	; 0x41
 80049fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d91c      	bls.n	8004a4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	3b1e      	subs	r3, #30
 8004a22:	2207      	movs	r2, #7
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	4019      	ands	r1, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6898      	ldr	r0, [r3, #8]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	3b1e      	subs	r3, #30
 8004a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	e019      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6919      	ldr	r1, [r3, #16]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	2207      	movs	r2, #7
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	4019      	ands	r1, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	6898      	ldr	r0, [r3, #8]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	fa00 f203 	lsl.w	r2, r0, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d003      	beq.n	8004a8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004a8a:	2b11      	cmp	r3, #17
 8004a8c:	d132      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <HAL_ADC_ConfigChannel+0x1e4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d125      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d126      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004ab4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b10      	cmp	r3, #16
 8004abc:	d11a      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_ADC_ConfigChannel+0x1e8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <HAL_ADC_ConfigChannel+0x1ec>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	0c9a      	lsrs	r2, r3, #18
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ad4:	e002      	b.n	8004adc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f9      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x1b2>
 8004ae2:	e007      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	40012400 	.word	0x40012400
 8004b0c:	20000608 	.word	0x20000608
 8004b10:	431bde83 	.word	0x431bde83

08004b14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d12e      	bne.n	8004b8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b3e:	f7ff fdd9 	bl	80046f4 <HAL_GetTick>
 8004b42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004b44:	e01b      	b.n	8004b7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b46:	f7ff fdd5 	bl	80046f4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d914      	bls.n	8004b7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10d      	bne.n	8004b7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	f043 0210 	orr.w	r2, r3, #16
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e007      	b.n	8004b8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d0dc      	beq.n	8004b46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <__NVIC_SetPriorityGrouping+0x44>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bca:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <__NVIC_SetPriorityGrouping+0x44>)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	60d3      	str	r3, [r2, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	f003 0307 	and.w	r3, r3, #7
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	db0b      	blt.n	8004c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	4906      	ldr	r1, [pc, #24]	; (8004c30 <__NVIC_EnableIRQ+0x34>)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100

08004c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	db0a      	blt.n	8004c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	490c      	ldr	r1, [pc, #48]	; (8004c80 <__NVIC_SetPriority+0x4c>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	0112      	lsls	r2, r2, #4
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	440b      	add	r3, r1
 8004c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c5c:	e00a      	b.n	8004c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4908      	ldr	r1, [pc, #32]	; (8004c84 <__NVIC_SetPriority+0x50>)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	0112      	lsls	r2, r2, #4
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	440b      	add	r3, r1
 8004c72:	761a      	strb	r2, [r3, #24]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e100 	.word	0xe000e100
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf28      	it	cs
 8004ca6:	2304      	movcs	r3, #4
 8004ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3304      	adds	r3, #4
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d902      	bls.n	8004cb8 <NVIC_EncodePriority+0x30>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3b03      	subs	r3, #3
 8004cb6:	e000      	b.n	8004cba <NVIC_EncodePriority+0x32>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	401a      	ands	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43d9      	mvns	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	4313      	orrs	r3, r2
         );
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	; 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cfc:	d301      	bcc.n	8004d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00f      	b.n	8004d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <SysTick_Config+0x40>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d0a:	210f      	movs	r1, #15
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	f7ff ff90 	bl	8004c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <SysTick_Config+0x40>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <SysTick_Config+0x40>)
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	e000e010 	.word	0xe000e010

08004d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff2d 	bl	8004b98 <__NVIC_SetPriorityGrouping>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d58:	f7ff ff42 	bl	8004be0 <__NVIC_GetPriorityGrouping>
 8004d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff ff90 	bl	8004c88 <NVIC_EncodePriority>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff5f 	bl	8004c34 <__NVIC_SetPriority>
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff35 	bl	8004bfc <__NVIC_EnableIRQ>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff ffa2 	bl	8004cec <SysTick_Config>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e059      	b.n	8004e7e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b2d      	ldr	r3, [pc, #180]	; (8004e88 <HAL_DMA_Init+0xd4>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d80f      	bhi.n	8004df6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_DMA_Init+0xd8>)
 8004dde:	4413      	add	r3, r2
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <HAL_DMA_Init+0xdc>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	009a      	lsls	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a28      	ldr	r2, [pc, #160]	; (8004e94 <HAL_DMA_Init+0xe0>)
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004df4:	e00e      	b.n	8004e14 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <HAL_DMA_Init+0xe4>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <HAL_DMA_Init+0xdc>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	009a      	lsls	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a22      	ldr	r2, [pc, #136]	; (8004e9c <HAL_DMA_Init+0xe8>)
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	40020407 	.word	0x40020407
 8004e8c:	bffdfff8 	.word	0xbffdfff8
 8004e90:	cccccccd 	.word	0xcccccccd
 8004e94:	40020000 	.word	0x40020000
 8004e98:	bffdfbf8 	.word	0xbffdfbf8
 8004e9c:	40020400 	.word	0x40020400

08004ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_DMA_Start_IT+0x20>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e04a      	b.n	8004f56 <HAL_DMA_Start_IT+0xb6>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d13a      	bne.n	8004f48 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fbb0 	bl	800565c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 020e 	orr.w	r2, r2, #14
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e00f      	b.n	8004f36 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0204 	bic.w	r2, r2, #4
 8004f24:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 020a 	orr.w	r2, r2, #10
 8004f34:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e005      	b.n	8004f54 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d008      	beq.n	8004f86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2204      	movs	r2, #4
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e020      	b.n	8004fc8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 020e 	bic.w	r2, r2, #14
 8004f94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0201 	bic.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d005      	beq.n	8004ff6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	e0d6      	b.n	80051a4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 020e 	bic.w	r2, r2, #14
 8005004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_DMA_Abort_IT+0x1dc>)
 800501e:	429a      	cmp	r2, r3
 8005020:	d958      	bls.n	80050d4 <HAL_DMA_Abort_IT+0x100>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a63      	ldr	r2, [pc, #396]	; (80051b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04f      	beq.n	80050cc <HAL_DMA_Abort_IT+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a61      	ldr	r2, [pc, #388]	; (80051b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d048      	beq.n	80050c8 <HAL_DMA_Abort_IT+0xf4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a60      	ldr	r2, [pc, #384]	; (80051bc <HAL_DMA_Abort_IT+0x1e8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <HAL_DMA_Abort_IT+0xee>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5e      	ldr	r2, [pc, #376]	; (80051c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d038      	beq.n	80050bc <HAL_DMA_Abort_IT+0xe8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5d      	ldr	r2, [pc, #372]	; (80051c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d030      	beq.n	80050b6 <HAL_DMA_Abort_IT+0xe2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <HAL_DMA_Abort_IT+0x1f4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d028      	beq.n	80050b0 <HAL_DMA_Abort_IT+0xdc>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a53      	ldr	r2, [pc, #332]	; (80051b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d020      	beq.n	80050aa <HAL_DMA_Abort_IT+0xd6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_DMA_Abort_IT+0x1f8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d019      	beq.n	80050a6 <HAL_DMA_Abort_IT+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a56      	ldr	r2, [pc, #344]	; (80051d0 <HAL_DMA_Abort_IT+0x1fc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d012      	beq.n	80050a2 <HAL_DMA_Abort_IT+0xce>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <HAL_DMA_Abort_IT+0x200>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00a      	beq.n	800509c <HAL_DMA_Abort_IT+0xc8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a53      	ldr	r2, [pc, #332]	; (80051d8 <HAL_DMA_Abort_IT+0x204>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d102      	bne.n	8005096 <HAL_DMA_Abort_IT+0xc2>
 8005090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005094:	e01b      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 8005096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800509a:	e018      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 800509c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a0:	e015      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050a2:	2310      	movs	r3, #16
 80050a4:	e013      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e011      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ae:	e00e      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050b4:	e00b      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ba:	e008      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c0:	e005      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c6:	e002      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050c8:	2310      	movs	r3, #16
 80050ca:	e000      	b.n	80050ce <HAL_DMA_Abort_IT+0xfa>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4a43      	ldr	r2, [pc, #268]	; (80051dc <HAL_DMA_Abort_IT+0x208>)
 80050d0:	6053      	str	r3, [r2, #4]
 80050d2:	e057      	b.n	8005184 <HAL_DMA_Abort_IT+0x1b0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a36      	ldr	r2, [pc, #216]	; (80051b4 <HAL_DMA_Abort_IT+0x1e0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d04f      	beq.n	800517e <HAL_DMA_Abort_IT+0x1aa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a35      	ldr	r2, [pc, #212]	; (80051b8 <HAL_DMA_Abort_IT+0x1e4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d048      	beq.n	800517a <HAL_DMA_Abort_IT+0x1a6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a33      	ldr	r2, [pc, #204]	; (80051bc <HAL_DMA_Abort_IT+0x1e8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d040      	beq.n	8005174 <HAL_DMA_Abort_IT+0x1a0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <HAL_DMA_Abort_IT+0x1ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d038      	beq.n	800516e <HAL_DMA_Abort_IT+0x19a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d030      	beq.n	8005168 <HAL_DMA_Abort_IT+0x194>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <HAL_DMA_Abort_IT+0x1f4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d028      	beq.n	8005162 <HAL_DMA_Abort_IT+0x18e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d020      	beq.n	800515c <HAL_DMA_Abort_IT+0x188>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <HAL_DMA_Abort_IT+0x1f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d019      	beq.n	8005158 <HAL_DMA_Abort_IT+0x184>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <HAL_DMA_Abort_IT+0x1fc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d012      	beq.n	8005154 <HAL_DMA_Abort_IT+0x180>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <HAL_DMA_Abort_IT+0x200>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00a      	beq.n	800514e <HAL_DMA_Abort_IT+0x17a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <HAL_DMA_Abort_IT+0x204>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d102      	bne.n	8005148 <HAL_DMA_Abort_IT+0x174>
 8005142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005146:	e01b      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800514c:	e018      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800514e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005152:	e015      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005154:	2310      	movs	r3, #16
 8005156:	e013      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005158:	2301      	movs	r3, #1
 800515a:	e011      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800515c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005160:	e00e      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005166:	e00b      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800516c:	e008      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800516e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005172:	e005      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 8005174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005178:	e002      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800517a:	2310      	movs	r3, #16
 800517c:	e000      	b.n	8005180 <HAL_DMA_Abort_IT+0x1ac>
 800517e:	2301      	movs	r3, #1
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <HAL_DMA_Abort_IT+0x20c>)
 8005182:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
    } 
  }
  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40020080 	.word	0x40020080
 80051b4:	40020008 	.word	0x40020008
 80051b8:	4002001c 	.word	0x4002001c
 80051bc:	40020030 	.word	0x40020030
 80051c0:	40020044 	.word	0x40020044
 80051c4:	40020058 	.word	0x40020058
 80051c8:	4002006c 	.word	0x4002006c
 80051cc:	40020408 	.word	0x40020408
 80051d0:	4002041c 	.word	0x4002041c
 80051d4:	40020430 	.word	0x40020430
 80051d8:	40020444 	.word	0x40020444
 80051dc:	40020400 	.word	0x40020400
 80051e0:	40020000 	.word	0x40020000

080051e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2204      	movs	r2, #4
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80f1 	beq.w	80053f0 <HAL_DMA_IRQHandler+0x20c>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80eb 	beq.w	80053f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0204 	bic.w	r2, r2, #4
 8005236:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	4b5f      	ldr	r3, [pc, #380]	; (80053bc <HAL_DMA_IRQHandler+0x1d8>)
 8005240:	429a      	cmp	r2, r3
 8005242:	d958      	bls.n	80052f6 <HAL_DMA_IRQHandler+0x112>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a5d      	ldr	r2, [pc, #372]	; (80053c0 <HAL_DMA_IRQHandler+0x1dc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d04f      	beq.n	80052ee <HAL_DMA_IRQHandler+0x10a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a5c      	ldr	r2, [pc, #368]	; (80053c4 <HAL_DMA_IRQHandler+0x1e0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d048      	beq.n	80052ea <HAL_DMA_IRQHandler+0x106>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a5a      	ldr	r2, [pc, #360]	; (80053c8 <HAL_DMA_IRQHandler+0x1e4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d040      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x100>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a59      	ldr	r2, [pc, #356]	; (80053cc <HAL_DMA_IRQHandler+0x1e8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d038      	beq.n	80052de <HAL_DMA_IRQHandler+0xfa>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a57      	ldr	r2, [pc, #348]	; (80053d0 <HAL_DMA_IRQHandler+0x1ec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d030      	beq.n	80052d8 <HAL_DMA_IRQHandler+0xf4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a56      	ldr	r2, [pc, #344]	; (80053d4 <HAL_DMA_IRQHandler+0x1f0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d028      	beq.n	80052d2 <HAL_DMA_IRQHandler+0xee>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a4d      	ldr	r2, [pc, #308]	; (80053bc <HAL_DMA_IRQHandler+0x1d8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d020      	beq.n	80052cc <HAL_DMA_IRQHandler+0xe8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a52      	ldr	r2, [pc, #328]	; (80053d8 <HAL_DMA_IRQHandler+0x1f4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d019      	beq.n	80052c8 <HAL_DMA_IRQHandler+0xe4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a50      	ldr	r2, [pc, #320]	; (80053dc <HAL_DMA_IRQHandler+0x1f8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d012      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xe0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4f      	ldr	r2, [pc, #316]	; (80053e0 <HAL_DMA_IRQHandler+0x1fc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00a      	beq.n	80052be <HAL_DMA_IRQHandler+0xda>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a4d      	ldr	r2, [pc, #308]	; (80053e4 <HAL_DMA_IRQHandler+0x200>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d102      	bne.n	80052b8 <HAL_DMA_IRQHandler+0xd4>
 80052b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052b6:	e01b      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052bc:	e018      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c2:	e015      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	e013      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052c8:	2304      	movs	r3, #4
 80052ca:	e011      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80052d0:	e00e      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052d6:	e00b      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052dc:	e008      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052e2:	e005      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e8:	e002      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052ea:	2340      	movs	r3, #64	; 0x40
 80052ec:	e000      	b.n	80052f0 <HAL_DMA_IRQHandler+0x10c>
 80052ee:	2304      	movs	r3, #4
 80052f0:	4a3d      	ldr	r2, [pc, #244]	; (80053e8 <HAL_DMA_IRQHandler+0x204>)
 80052f2:	6053      	str	r3, [r2, #4]
 80052f4:	e057      	b.n	80053a6 <HAL_DMA_IRQHandler+0x1c2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a31      	ldr	r2, [pc, #196]	; (80053c0 <HAL_DMA_IRQHandler+0x1dc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d04f      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x1bc>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <HAL_DMA_IRQHandler+0x1e0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d048      	beq.n	800539c <HAL_DMA_IRQHandler+0x1b8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2e      	ldr	r2, [pc, #184]	; (80053c8 <HAL_DMA_IRQHandler+0x1e4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d040      	beq.n	8005396 <HAL_DMA_IRQHandler+0x1b2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <HAL_DMA_IRQHandler+0x1e8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d038      	beq.n	8005390 <HAL_DMA_IRQHandler+0x1ac>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <HAL_DMA_IRQHandler+0x1ec>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d030      	beq.n	800538a <HAL_DMA_IRQHandler+0x1a6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <HAL_DMA_IRQHandler+0x1f0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d028      	beq.n	8005384 <HAL_DMA_IRQHandler+0x1a0>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a21      	ldr	r2, [pc, #132]	; (80053bc <HAL_DMA_IRQHandler+0x1d8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d020      	beq.n	800537e <HAL_DMA_IRQHandler+0x19a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <HAL_DMA_IRQHandler+0x1f4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d019      	beq.n	800537a <HAL_DMA_IRQHandler+0x196>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a24      	ldr	r2, [pc, #144]	; (80053dc <HAL_DMA_IRQHandler+0x1f8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d012      	beq.n	8005376 <HAL_DMA_IRQHandler+0x192>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <HAL_DMA_IRQHandler+0x1fc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00a      	beq.n	8005370 <HAL_DMA_IRQHandler+0x18c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <HAL_DMA_IRQHandler+0x200>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d102      	bne.n	800536a <HAL_DMA_IRQHandler+0x186>
 8005364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005368:	e01b      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 800536a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800536e:	e018      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 8005370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005374:	e015      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	e013      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 800537a:	2304      	movs	r3, #4
 800537c:	e011      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 800537e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005382:	e00e      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 8005384:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005388:	e00b      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 800538a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800538e:	e008      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 8005390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005394:	e005      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 8005396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539a:	e002      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	e000      	b.n	80053a2 <HAL_DMA_IRQHandler+0x1be>
 80053a0:	2304      	movs	r3, #4
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <HAL_DMA_IRQHandler+0x208>)
 80053a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8136 	beq.w	800561c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80053b8:	e130      	b.n	800561c <HAL_DMA_IRQHandler+0x438>
 80053ba:	bf00      	nop
 80053bc:	40020080 	.word	0x40020080
 80053c0:	40020008 	.word	0x40020008
 80053c4:	4002001c 	.word	0x4002001c
 80053c8:	40020030 	.word	0x40020030
 80053cc:	40020044 	.word	0x40020044
 80053d0:	40020058 	.word	0x40020058
 80053d4:	4002006c 	.word	0x4002006c
 80053d8:	40020408 	.word	0x40020408
 80053dc:	4002041c 	.word	0x4002041c
 80053e0:	40020430 	.word	0x40020430
 80053e4:	40020444 	.word	0x40020444
 80053e8:	40020400 	.word	0x40020400
 80053ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2202      	movs	r2, #2
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80dd 	beq.w	80055bc <HAL_DMA_IRQHandler+0x3d8>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80d7 	beq.w	80055bc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 020a 	bic.w	r2, r2, #10
 800542a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	4b7b      	ldr	r3, [pc, #492]	; (8005628 <HAL_DMA_IRQHandler+0x444>)
 800543c:	429a      	cmp	r2, r3
 800543e:	d958      	bls.n	80054f2 <HAL_DMA_IRQHandler+0x30e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a79      	ldr	r2, [pc, #484]	; (800562c <HAL_DMA_IRQHandler+0x448>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d04f      	beq.n	80054ea <HAL_DMA_IRQHandler+0x306>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a78      	ldr	r2, [pc, #480]	; (8005630 <HAL_DMA_IRQHandler+0x44c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d048      	beq.n	80054e6 <HAL_DMA_IRQHandler+0x302>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a76      	ldr	r2, [pc, #472]	; (8005634 <HAL_DMA_IRQHandler+0x450>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d040      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x2fc>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a75      	ldr	r2, [pc, #468]	; (8005638 <HAL_DMA_IRQHandler+0x454>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d038      	beq.n	80054da <HAL_DMA_IRQHandler+0x2f6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a73      	ldr	r2, [pc, #460]	; (800563c <HAL_DMA_IRQHandler+0x458>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d030      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x2f0>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a72      	ldr	r2, [pc, #456]	; (8005640 <HAL_DMA_IRQHandler+0x45c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d028      	beq.n	80054ce <HAL_DMA_IRQHandler+0x2ea>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a69      	ldr	r2, [pc, #420]	; (8005628 <HAL_DMA_IRQHandler+0x444>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d020      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x2e4>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6e      	ldr	r2, [pc, #440]	; (8005644 <HAL_DMA_IRQHandler+0x460>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d019      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x2e0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a6c      	ldr	r2, [pc, #432]	; (8005648 <HAL_DMA_IRQHandler+0x464>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d012      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x2dc>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6b      	ldr	r2, [pc, #428]	; (800564c <HAL_DMA_IRQHandler+0x468>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00a      	beq.n	80054ba <HAL_DMA_IRQHandler+0x2d6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a69      	ldr	r2, [pc, #420]	; (8005650 <HAL_DMA_IRQHandler+0x46c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d102      	bne.n	80054b4 <HAL_DMA_IRQHandler+0x2d0>
 80054ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054b2:	e01b      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b8:	e018      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054be:	e015      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054c0:	2320      	movs	r3, #32
 80054c2:	e013      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e011      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054cc:	e00e      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054d2:	e00b      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054d8:	e008      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054de:	e005      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e4:	e002      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054e6:	2320      	movs	r3, #32
 80054e8:	e000      	b.n	80054ec <HAL_DMA_IRQHandler+0x308>
 80054ea:	2302      	movs	r3, #2
 80054ec:	4a59      	ldr	r2, [pc, #356]	; (8005654 <HAL_DMA_IRQHandler+0x470>)
 80054ee:	6053      	str	r3, [r2, #4]
 80054f0:	e057      	b.n	80055a2 <HAL_DMA_IRQHandler+0x3be>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a4d      	ldr	r2, [pc, #308]	; (800562c <HAL_DMA_IRQHandler+0x448>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d04f      	beq.n	800559c <HAL_DMA_IRQHandler+0x3b8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a4b      	ldr	r2, [pc, #300]	; (8005630 <HAL_DMA_IRQHandler+0x44c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d048      	beq.n	8005598 <HAL_DMA_IRQHandler+0x3b4>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a4a      	ldr	r2, [pc, #296]	; (8005634 <HAL_DMA_IRQHandler+0x450>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d040      	beq.n	8005592 <HAL_DMA_IRQHandler+0x3ae>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a48      	ldr	r2, [pc, #288]	; (8005638 <HAL_DMA_IRQHandler+0x454>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d038      	beq.n	800558c <HAL_DMA_IRQHandler+0x3a8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a47      	ldr	r2, [pc, #284]	; (800563c <HAL_DMA_IRQHandler+0x458>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d030      	beq.n	8005586 <HAL_DMA_IRQHandler+0x3a2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a45      	ldr	r2, [pc, #276]	; (8005640 <HAL_DMA_IRQHandler+0x45c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d028      	beq.n	8005580 <HAL_DMA_IRQHandler+0x39c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a3d      	ldr	r2, [pc, #244]	; (8005628 <HAL_DMA_IRQHandler+0x444>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d020      	beq.n	800557a <HAL_DMA_IRQHandler+0x396>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a41      	ldr	r2, [pc, #260]	; (8005644 <HAL_DMA_IRQHandler+0x460>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d019      	beq.n	8005576 <HAL_DMA_IRQHandler+0x392>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a40      	ldr	r2, [pc, #256]	; (8005648 <HAL_DMA_IRQHandler+0x464>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d012      	beq.n	8005572 <HAL_DMA_IRQHandler+0x38e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3e      	ldr	r2, [pc, #248]	; (800564c <HAL_DMA_IRQHandler+0x468>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00a      	beq.n	800556c <HAL_DMA_IRQHandler+0x388>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a3d      	ldr	r2, [pc, #244]	; (8005650 <HAL_DMA_IRQHandler+0x46c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d102      	bne.n	8005566 <HAL_DMA_IRQHandler+0x382>
 8005560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005564:	e01b      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800556a:	e018      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 800556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005570:	e015      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005572:	2320      	movs	r3, #32
 8005574:	e013      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005576:	2302      	movs	r3, #2
 8005578:	e011      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 800557a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800557e:	e00e      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005580:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005584:	e00b      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800558a:	e008      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 800558c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005590:	e005      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005596:	e002      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 8005598:	2320      	movs	r3, #32
 800559a:	e000      	b.n	800559e <HAL_DMA_IRQHandler+0x3ba>
 800559c:	2302      	movs	r3, #2
 800559e:	4a2e      	ldr	r2, [pc, #184]	; (8005658 <HAL_DMA_IRQHandler+0x474>)
 80055a0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d034      	beq.n	800561c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80055ba:	e02f      	b.n	800561c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	2208      	movs	r2, #8
 80055c2:	409a      	lsls	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d028      	beq.n	800561e <HAL_DMA_IRQHandler+0x43a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d023      	beq.n	800561e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 020e 	bic.w	r2, r2, #14
 80055e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	2101      	movs	r1, #1
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
    }
  }
  return;
 800561c:	bf00      	nop
 800561e:	bf00      	nop
}
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40020080 	.word	0x40020080
 800562c:	40020008 	.word	0x40020008
 8005630:	4002001c 	.word	0x4002001c
 8005634:	40020030 	.word	0x40020030
 8005638:	40020044 	.word	0x40020044
 800563c:	40020058 	.word	0x40020058
 8005640:	4002006c 	.word	0x4002006c
 8005644:	40020408 	.word	0x40020408
 8005648:	4002041c 	.word	0x4002041c
 800564c:	40020430 	.word	0x40020430
 8005650:	40020444 	.word	0x40020444
 8005654:	40020400 	.word	0x40020400
 8005658:	40020000 	.word	0x40020000

0800565c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2101      	movs	r1, #1
 8005674:	fa01 f202 	lsl.w	r2, r1, r2
 8005678:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b10      	cmp	r3, #16
 8005688:	d108      	bne.n	800569c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800569a:	e007      	b.n	80056ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	60da      	str	r2, [r3, #12]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b08b      	sub	sp, #44	; 0x2c
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80056c6:	2300      	movs	r3, #0
 80056c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ca:	e179      	b.n	80059c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80056cc:	2201      	movs	r2, #1
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	f040 8168 	bne.w	80059ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4a96      	ldr	r2, [pc, #600]	; (8005948 <HAL_GPIO_Init+0x290>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d05e      	beq.n	80057b2 <HAL_GPIO_Init+0xfa>
 80056f4:	4a94      	ldr	r2, [pc, #592]	; (8005948 <HAL_GPIO_Init+0x290>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d875      	bhi.n	80057e6 <HAL_GPIO_Init+0x12e>
 80056fa:	4a94      	ldr	r2, [pc, #592]	; (800594c <HAL_GPIO_Init+0x294>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d058      	beq.n	80057b2 <HAL_GPIO_Init+0xfa>
 8005700:	4a92      	ldr	r2, [pc, #584]	; (800594c <HAL_GPIO_Init+0x294>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d86f      	bhi.n	80057e6 <HAL_GPIO_Init+0x12e>
 8005706:	4a92      	ldr	r2, [pc, #584]	; (8005950 <HAL_GPIO_Init+0x298>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d052      	beq.n	80057b2 <HAL_GPIO_Init+0xfa>
 800570c:	4a90      	ldr	r2, [pc, #576]	; (8005950 <HAL_GPIO_Init+0x298>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d869      	bhi.n	80057e6 <HAL_GPIO_Init+0x12e>
 8005712:	4a90      	ldr	r2, [pc, #576]	; (8005954 <HAL_GPIO_Init+0x29c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d04c      	beq.n	80057b2 <HAL_GPIO_Init+0xfa>
 8005718:	4a8e      	ldr	r2, [pc, #568]	; (8005954 <HAL_GPIO_Init+0x29c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d863      	bhi.n	80057e6 <HAL_GPIO_Init+0x12e>
 800571e:	4a8e      	ldr	r2, [pc, #568]	; (8005958 <HAL_GPIO_Init+0x2a0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d046      	beq.n	80057b2 <HAL_GPIO_Init+0xfa>
 8005724:	4a8c      	ldr	r2, [pc, #560]	; (8005958 <HAL_GPIO_Init+0x2a0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d85d      	bhi.n	80057e6 <HAL_GPIO_Init+0x12e>
 800572a:	2b12      	cmp	r3, #18
 800572c:	d82a      	bhi.n	8005784 <HAL_GPIO_Init+0xcc>
 800572e:	2b12      	cmp	r3, #18
 8005730:	d859      	bhi.n	80057e6 <HAL_GPIO_Init+0x12e>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <HAL_GPIO_Init+0x80>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	080057b3 	.word	0x080057b3
 800573c:	0800578d 	.word	0x0800578d
 8005740:	0800579f 	.word	0x0800579f
 8005744:	080057e1 	.word	0x080057e1
 8005748:	080057e7 	.word	0x080057e7
 800574c:	080057e7 	.word	0x080057e7
 8005750:	080057e7 	.word	0x080057e7
 8005754:	080057e7 	.word	0x080057e7
 8005758:	080057e7 	.word	0x080057e7
 800575c:	080057e7 	.word	0x080057e7
 8005760:	080057e7 	.word	0x080057e7
 8005764:	080057e7 	.word	0x080057e7
 8005768:	080057e7 	.word	0x080057e7
 800576c:	080057e7 	.word	0x080057e7
 8005770:	080057e7 	.word	0x080057e7
 8005774:	080057e7 	.word	0x080057e7
 8005778:	080057e7 	.word	0x080057e7
 800577c:	08005795 	.word	0x08005795
 8005780:	080057a9 	.word	0x080057a9
 8005784:	4a75      	ldr	r2, [pc, #468]	; (800595c <HAL_GPIO_Init+0x2a4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800578a:	e02c      	b.n	80057e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	623b      	str	r3, [r7, #32]
          break;
 8005792:	e029      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	3304      	adds	r3, #4
 800579a:	623b      	str	r3, [r7, #32]
          break;
 800579c:	e024      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	3308      	adds	r3, #8
 80057a4:	623b      	str	r3, [r7, #32]
          break;
 80057a6:	e01f      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	330c      	adds	r3, #12
 80057ae:	623b      	str	r3, [r7, #32]
          break;
 80057b0:	e01a      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057ba:	2304      	movs	r3, #4
 80057bc:	623b      	str	r3, [r7, #32]
          break;
 80057be:	e013      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d105      	bne.n	80057d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057c8:	2308      	movs	r3, #8
 80057ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	611a      	str	r2, [r3, #16]
          break;
 80057d2:	e009      	b.n	80057e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057d4:	2308      	movs	r3, #8
 80057d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	615a      	str	r2, [r3, #20]
          break;
 80057de:	e003      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057e0:	2300      	movs	r3, #0
 80057e2:	623b      	str	r3, [r7, #32]
          break;
 80057e4:	e000      	b.n	80057e8 <HAL_GPIO_Init+0x130>
          break;
 80057e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2bff      	cmp	r3, #255	; 0xff
 80057ec:	d801      	bhi.n	80057f2 <HAL_GPIO_Init+0x13a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	e001      	b.n	80057f6 <HAL_GPIO_Init+0x13e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2bff      	cmp	r3, #255	; 0xff
 80057fc:	d802      	bhi.n	8005804 <HAL_GPIO_Init+0x14c>
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	e002      	b.n	800580a <HAL_GPIO_Init+0x152>
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	3b08      	subs	r3, #8
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	210f      	movs	r1, #15
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	fa01 f303 	lsl.w	r3, r1, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	401a      	ands	r2, r3
 800581c:	6a39      	ldr	r1, [r7, #32]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	431a      	orrs	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 80c1 	beq.w	80059ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005838:	4b49      	ldr	r3, [pc, #292]	; (8005960 <HAL_GPIO_Init+0x2a8>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	4a48      	ldr	r2, [pc, #288]	; (8005960 <HAL_GPIO_Init+0x2a8>)
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	6193      	str	r3, [r2, #24]
 8005844:	4b46      	ldr	r3, [pc, #280]	; (8005960 <HAL_GPIO_Init+0x2a8>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005850:	4a44      	ldr	r2, [pc, #272]	; (8005964 <HAL_GPIO_Init+0x2ac>)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	3302      	adds	r3, #2
 8005858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	220f      	movs	r2, #15
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4013      	ands	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <HAL_GPIO_Init+0x2b0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d01f      	beq.n	80058bc <HAL_GPIO_Init+0x204>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3b      	ldr	r2, [pc, #236]	; (800596c <HAL_GPIO_Init+0x2b4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d019      	beq.n	80058b8 <HAL_GPIO_Init+0x200>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a3a      	ldr	r2, [pc, #232]	; (8005970 <HAL_GPIO_Init+0x2b8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <HAL_GPIO_Init+0x1fc>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a39      	ldr	r2, [pc, #228]	; (8005974 <HAL_GPIO_Init+0x2bc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00d      	beq.n	80058b0 <HAL_GPIO_Init+0x1f8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a38      	ldr	r2, [pc, #224]	; (8005978 <HAL_GPIO_Init+0x2c0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <HAL_GPIO_Init+0x1f4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a37      	ldr	r2, [pc, #220]	; (800597c <HAL_GPIO_Init+0x2c4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d101      	bne.n	80058a8 <HAL_GPIO_Init+0x1f0>
 80058a4:	2305      	movs	r3, #5
 80058a6:	e00a      	b.n	80058be <HAL_GPIO_Init+0x206>
 80058a8:	2306      	movs	r3, #6
 80058aa:	e008      	b.n	80058be <HAL_GPIO_Init+0x206>
 80058ac:	2304      	movs	r3, #4
 80058ae:	e006      	b.n	80058be <HAL_GPIO_Init+0x206>
 80058b0:	2303      	movs	r3, #3
 80058b2:	e004      	b.n	80058be <HAL_GPIO_Init+0x206>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e002      	b.n	80058be <HAL_GPIO_Init+0x206>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_GPIO_Init+0x206>
 80058bc:	2300      	movs	r3, #0
 80058be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c0:	f002 0203 	and.w	r2, r2, #3
 80058c4:	0092      	lsls	r2, r2, #2
 80058c6:	4093      	lsls	r3, r2
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80058ce:	4925      	ldr	r1, [pc, #148]	; (8005964 <HAL_GPIO_Init+0x2ac>)
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	3302      	adds	r3, #2
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d006      	beq.n	80058f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4924      	ldr	r1, [pc, #144]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	e006      	b.n	8005904 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80058f6:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	4920      	ldr	r1, [pc, #128]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 8005900:	4013      	ands	r3, r2
 8005902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005910:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	491a      	ldr	r1, [pc, #104]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
 800591c:	e006      	b.n	800592c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800591e:	4b18      	ldr	r3, [pc, #96]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	43db      	mvns	r3, r3
 8005926:	4916      	ldr	r1, [pc, #88]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 8005928:	4013      	ands	r3, r2
 800592a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d025      	beq.n	8005984 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	4910      	ldr	r1, [pc, #64]	; (8005980 <HAL_GPIO_Init+0x2c8>)
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	4313      	orrs	r3, r2
 8005942:	608b      	str	r3, [r1, #8]
 8005944:	e025      	b.n	8005992 <HAL_GPIO_Init+0x2da>
 8005946:	bf00      	nop
 8005948:	10320000 	.word	0x10320000
 800594c:	10310000 	.word	0x10310000
 8005950:	10220000 	.word	0x10220000
 8005954:	10210000 	.word	0x10210000
 8005958:	10120000 	.word	0x10120000
 800595c:	10110000 	.word	0x10110000
 8005960:	40021000 	.word	0x40021000
 8005964:	40010000 	.word	0x40010000
 8005968:	40010800 	.word	0x40010800
 800596c:	40010c00 	.word	0x40010c00
 8005970:	40011000 	.word	0x40011000
 8005974:	40011400 	.word	0x40011400
 8005978:	40011800 	.word	0x40011800
 800597c:	40011c00 	.word	0x40011c00
 8005980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_GPIO_Init+0x324>)
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	43db      	mvns	r3, r3
 800598c:	4913      	ldr	r1, [pc, #76]	; (80059dc <HAL_GPIO_Init+0x324>)
 800598e:	4013      	ands	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d006      	beq.n	80059ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_GPIO_Init+0x324>)
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	490e      	ldr	r1, [pc, #56]	; (80059dc <HAL_GPIO_Init+0x324>)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60cb      	str	r3, [r1, #12]
 80059aa:	e006      	b.n	80059ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <HAL_GPIO_Init+0x324>)
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	4909      	ldr	r1, [pc, #36]	; (80059dc <HAL_GPIO_Init+0x324>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	3301      	adds	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f47f ae7e 	bne.w	80056cc <HAL_GPIO_Init+0x14>
  }
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	372c      	adds	r7, #44	; 0x2c
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr
 80059dc:	40010400 	.word	0x40010400

080059e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b089      	sub	sp, #36	; 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80059ee:	e0a6      	b.n	8005b3e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80059f0:	2201      	movs	r2, #1
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8099 	beq.w	8005b38 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005a06:	4a54      	ldr	r2, [pc, #336]	; (8005b58 <HAL_GPIO_DeInit+0x178>)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a12:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	220f      	movs	r2, #15
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4013      	ands	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a4c      	ldr	r2, [pc, #304]	; (8005b5c <HAL_GPIO_DeInit+0x17c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01f      	beq.n	8005a70 <HAL_GPIO_DeInit+0x90>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a4b      	ldr	r2, [pc, #300]	; (8005b60 <HAL_GPIO_DeInit+0x180>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d019      	beq.n	8005a6c <HAL_GPIO_DeInit+0x8c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a4a      	ldr	r2, [pc, #296]	; (8005b64 <HAL_GPIO_DeInit+0x184>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <HAL_GPIO_DeInit+0x88>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a49      	ldr	r2, [pc, #292]	; (8005b68 <HAL_GPIO_DeInit+0x188>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00d      	beq.n	8005a64 <HAL_GPIO_DeInit+0x84>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a48      	ldr	r2, [pc, #288]	; (8005b6c <HAL_GPIO_DeInit+0x18c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <HAL_GPIO_DeInit+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a47      	ldr	r2, [pc, #284]	; (8005b70 <HAL_GPIO_DeInit+0x190>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <HAL_GPIO_DeInit+0x7c>
 8005a58:	2305      	movs	r3, #5
 8005a5a:	e00a      	b.n	8005a72 <HAL_GPIO_DeInit+0x92>
 8005a5c:	2306      	movs	r3, #6
 8005a5e:	e008      	b.n	8005a72 <HAL_GPIO_DeInit+0x92>
 8005a60:	2304      	movs	r3, #4
 8005a62:	e006      	b.n	8005a72 <HAL_GPIO_DeInit+0x92>
 8005a64:	2303      	movs	r3, #3
 8005a66:	e004      	b.n	8005a72 <HAL_GPIO_DeInit+0x92>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e002      	b.n	8005a72 <HAL_GPIO_DeInit+0x92>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_GPIO_DeInit+0x92>
 8005a70:	2300      	movs	r3, #0
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	f002 0203 	and.w	r2, r2, #3
 8005a78:	0092      	lsls	r2, r2, #2
 8005a7a:	4093      	lsls	r3, r2
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d132      	bne.n	8005ae8 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	220f      	movs	r2, #15
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005a92:	4a31      	ldr	r2, [pc, #196]	; (8005b58 <HAL_GPIO_DeInit+0x178>)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	3302      	adds	r3, #2
 8005a9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	43da      	mvns	r2, r3
 8005aa2:	482d      	ldr	r0, [pc, #180]	; (8005b58 <HAL_GPIO_DeInit+0x178>)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	089b      	lsrs	r3, r3, #2
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	3302      	adds	r3, #2
 8005aac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005ab0:	4b30      	ldr	r3, [pc, #192]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	492e      	ldr	r1, [pc, #184]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	492b      	ldr	r1, [pc, #172]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005acc:	4b29      	ldr	r3, [pc, #164]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	4927      	ldr	r1, [pc, #156]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005ada:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	4924      	ldr	r1, [pc, #144]	; (8005b74 <HAL_GPIO_DeInit+0x194>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2bff      	cmp	r3, #255	; 0xff
 8005aec:	d801      	bhi.n	8005af2 <HAL_GPIO_DeInit+0x112>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	e001      	b.n	8005af6 <HAL_GPIO_DeInit+0x116>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d802      	bhi.n	8005b04 <HAL_GPIO_DeInit+0x124>
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	e002      	b.n	8005b0a <HAL_GPIO_DeInit+0x12a>
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3b08      	subs	r3, #8
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	210f      	movs	r1, #15
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	2104      	movs	r1, #4
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	431a      	orrs	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	fa22 f303 	lsr.w	r3, r2, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f47f af52 	bne.w	80059f0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3724      	adds	r7, #36	; 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010800 	.word	0x40010800
 8005b60:	40010c00 	.word	0x40010c00
 8005b64:	40011000 	.word	0x40011000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	40011800 	.word	0x40011800
 8005b70:	40011c00 	.word	0x40011c00
 8005b74:	40010400 	.word	0x40010400

08005b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
 8005b84:	4613      	mov	r3, r2
 8005b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b88:	787b      	ldrb	r3, [r7, #1]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005b94:	e003      	b.n	8005b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	041a      	lsls	r2, r3, #16
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	611a      	str	r2, [r3, #16]
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bba:	887a      	ldrh	r2, [r7, #2]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	041a      	lsls	r2, r3, #16
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	43d9      	mvns	r1, r3
 8005bc6:	887b      	ldrh	r3, [r7, #2]
 8005bc8:	400b      	ands	r3, r1
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
	...

08005bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d006      	beq.n	8005c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bf2:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fd fb5c 	bl	80032b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40010400 	.word	0x40010400

08005c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e12b      	b.n	8005e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc ff22 	bl	8002a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	; 0x24
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c70:	f001 fcce 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 8005c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4a81      	ldr	r2, [pc, #516]	; (8005e80 <HAL_I2C_Init+0x274>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d807      	bhi.n	8005c90 <HAL_I2C_Init+0x84>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a80      	ldr	r2, [pc, #512]	; (8005e84 <HAL_I2C_Init+0x278>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bf94      	ite	ls
 8005c88:	2301      	movls	r3, #1
 8005c8a:	2300      	movhi	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	e006      	b.n	8005c9e <HAL_I2C_Init+0x92>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a7d      	ldr	r2, [pc, #500]	; (8005e88 <HAL_I2C_Init+0x27c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	bf94      	ite	ls
 8005c98:	2301      	movls	r3, #1
 8005c9a:	2300      	movhi	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0e7      	b.n	8005e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a78      	ldr	r2, [pc, #480]	; (8005e8c <HAL_I2C_Init+0x280>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	0c9b      	lsrs	r3, r3, #18
 8005cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4a6a      	ldr	r2, [pc, #424]	; (8005e80 <HAL_I2C_Init+0x274>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d802      	bhi.n	8005ce0 <HAL_I2C_Init+0xd4>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	e009      	b.n	8005cf4 <HAL_I2C_Init+0xe8>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	4a69      	ldr	r2, [pc, #420]	; (8005e90 <HAL_I2C_Init+0x284>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	099b      	lsrs	r3, r3, #6
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	495c      	ldr	r1, [pc, #368]	; (8005e80 <HAL_I2C_Init+0x274>)
 8005d10:	428b      	cmp	r3, r1
 8005d12:	d819      	bhi.n	8005d48 <HAL_I2C_Init+0x13c>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1e59      	subs	r1, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d28:	400b      	ands	r3, r1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_I2C_Init+0x138>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1e59      	subs	r1, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d42:	e051      	b.n	8005de8 <HAL_I2C_Init+0x1dc>
 8005d44:	2304      	movs	r3, #4
 8005d46:	e04f      	b.n	8005de8 <HAL_I2C_Init+0x1dc>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d111      	bne.n	8005d74 <HAL_I2C_Init+0x168>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1e58      	subs	r0, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	440b      	add	r3, r1
 8005d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d62:	3301      	adds	r3, #1
 8005d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e012      	b.n	8005d9a <HAL_I2C_Init+0x18e>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1e58      	subs	r0, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	0099      	lsls	r1, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_I2C_Init+0x196>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e022      	b.n	8005de8 <HAL_I2C_Init+0x1dc>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10e      	bne.n	8005dc8 <HAL_I2C_Init+0x1bc>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1e58      	subs	r0, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	440b      	add	r3, r1
 8005db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	e00f      	b.n	8005de8 <HAL_I2C_Init+0x1dc>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1e58      	subs	r0, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	0099      	lsls	r1, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dde:	3301      	adds	r3, #1
 8005de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	6809      	ldr	r1, [r1, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6911      	ldr	r1, [r2, #16]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68d2      	ldr	r2, [r2, #12]
 8005e22:	4311      	orrs	r1, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	000186a0 	.word	0x000186a0
 8005e84:	001e847f 	.word	0x001e847f
 8005e88:	003d08ff 	.word	0x003d08ff
 8005e8c:	431bde83 	.word	0x431bde83
 8005e90:	10624dd3 	.word	0x10624dd3

08005e94 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e021      	b.n	8005eea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2224      	movs	r2, #36	; 0x24
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc fe1c 	bl	8002afc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	460b      	mov	r3, r1
 8005f02:	817b      	strh	r3, [r7, #10]
 8005f04:	4613      	mov	r3, r2
 8005f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f08:	f7fe fbf4 	bl	80046f4 <HAL_GetTick>
 8005f0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	f040 80e0 	bne.w	80060dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2319      	movs	r3, #25
 8005f22:	2201      	movs	r2, #1
 8005f24:	4970      	ldr	r1, [pc, #448]	; (80060e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fdc0 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
 8005f34:	e0d3      	b.n	80060de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_I2C_Master_Transmit+0x50>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0cc      	b.n	80060de <HAL_I2C_Master_Transmit+0x1ea>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d007      	beq.n	8005f6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2221      	movs	r2, #33	; 0x21
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2210      	movs	r2, #16
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	893a      	ldrh	r2, [r7, #8]
 8005f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a50      	ldr	r2, [pc, #320]	; (80060ec <HAL_I2C_Master_Transmit+0x1f8>)
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fac:	8979      	ldrh	r1, [r7, #10]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fc2a 	bl	800680c <I2C_MasterRequestWrite>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e08d      	b.n	80060de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005fd8:	e066      	b.n	80060a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	6a39      	ldr	r1, [r7, #32]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fe3a 	bl	8006c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d107      	bne.n	8006002 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e06b      	b.n	80060de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b04      	cmp	r3, #4
 8006042:	d11b      	bne.n	800607c <HAL_I2C_Master_Transmit+0x188>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d017      	beq.n	800607c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	6a39      	ldr	r1, [r7, #32]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fe2a 	bl	8006cda <I2C_WaitOnBTFFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00d      	beq.n	80060a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	2b04      	cmp	r3, #4
 8006092:	d107      	bne.n	80060a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e01a      	b.n	80060de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d194      	bne.n	8005fda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e000      	b.n	80060de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060dc:	2302      	movs	r3, #2
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	00100002 	.word	0x00100002
 80060ec:	ffff0000 	.word	0xffff0000

080060f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	461a      	mov	r2, r3
 80060fc:	460b      	mov	r3, r1
 80060fe:	817b      	strh	r3, [r7, #10]
 8006100:	4613      	mov	r3, r2
 8006102:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006108:	f7fe faf4 	bl	80046f4 <HAL_GetTick>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b20      	cmp	r3, #32
 8006118:	f040 823f 	bne.w	800659a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	2319      	movs	r3, #25
 8006122:	2201      	movs	r2, #1
 8006124:	497f      	ldr	r1, [pc, #508]	; (8006324 <HAL_I2C_Master_Receive+0x234>)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fcc0 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
 8006134:	e232      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_I2C_Master_Receive+0x54>
 8006140:	2302      	movs	r3, #2
 8006142:	e22b      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d007      	beq.n	800616a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2222      	movs	r2, #34	; 0x22
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2210      	movs	r2, #16
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	893a      	ldrh	r2, [r7, #8]
 800619a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a5f      	ldr	r2, [pc, #380]	; (8006328 <HAL_I2C_Master_Receive+0x238>)
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061ac:	8979      	ldrh	r1, [r7, #10]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fbac 	bl	8006910 <I2C_MasterRequestRead>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e1ec      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d113      	bne.n	80061f2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e1c0      	b.n	8006574 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d11e      	bne.n	8006238 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006208:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800620a:	b672      	cpsid	i
}
 800620c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620e:	2300      	movs	r3, #0
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006232:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006234:	b662      	cpsie	i
}
 8006236:	e035      	b.n	80062a4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	2b02      	cmp	r3, #2
 800623e:	d11e      	bne.n	800627e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006250:	b672      	cpsid	i
}
 8006252:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800627a:	b662      	cpsie	i
}
 800627c:	e012      	b.n	80062a4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800628c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80062a4:	e166      	b.n	8006574 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	f200 811f 	bhi.w	80064ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d123      	bne.n	8006300 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fd4d 	bl	8006d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e167      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062fe:	e139      	b.n	8006574 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006304:	2b02      	cmp	r3, #2
 8006306:	d152      	bne.n	80063ae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	2200      	movs	r2, #0
 8006310:	4906      	ldr	r1, [pc, #24]	; (800632c <HAL_I2C_Master_Receive+0x23c>)
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fbca 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e13c      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
 8006322:	bf00      	nop
 8006324:	00100002 	.word	0x00100002
 8006328:	ffff0000 	.word	0xffff0000
 800632c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006330:	b672      	cpsid	i
}
 8006332:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006376:	b662      	cpsie	i
}
 8006378:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063ac:	e0e2      	b.n	8006574 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	2200      	movs	r2, #0
 80063b6:	497b      	ldr	r1, [pc, #492]	; (80065a4 <HAL_I2C_Master_Receive+0x4b4>)
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fb77 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0e9      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063d8:	b672      	cpsid	i
}
 80063da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800640e:	4b66      	ldr	r3, [pc, #408]	; (80065a8 <HAL_I2C_Master_Receive+0x4b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	08db      	lsrs	r3, r3, #3
 8006414:	4a65      	ldr	r2, [pc, #404]	; (80065ac <HAL_I2C_Master_Receive+0x4bc>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	0a1a      	lsrs	r2, r3, #8
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	00da      	lsls	r2, r3, #3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	3b01      	subs	r3, #1
 800642c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d118      	bne.n	8006466 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006456:	b662      	cpsie	i
}
 8006458:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e09a      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b04      	cmp	r3, #4
 8006472:	d1d9      	bne.n	8006428 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064b6:	b662      	cpsie	i
}
 80064b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ec:	e042      	b.n	8006574 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fc32 	bl	8006d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e04c      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b04      	cmp	r3, #4
 8006540:	d118      	bne.n	8006574 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	f47f ae94 	bne.w	80062a6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e000      	b.n	800659c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	00010004 	.word	0x00010004
 80065a8:	20000608 	.word	0x20000608
 80065ac:	14f8b589 	.word	0x14f8b589

080065b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	460b      	mov	r3, r1
 80065be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80065c0:	f7fe f898 	bl	80046f4 <HAL_GetTick>
 80065c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80065c6:	2301      	movs	r3, #1
 80065c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	f040 8111 	bne.w	80067fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2319      	movs	r3, #25
 80065de:	2201      	movs	r2, #1
 80065e0:	4988      	ldr	r1, [pc, #544]	; (8006804 <HAL_I2C_IsDeviceReady+0x254>)
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fa62 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
 80065f0:	e104      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_I2C_IsDeviceReady+0x50>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0fd      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d007      	beq.n	8006626 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0201 	orr.w	r2, r2, #1
 8006624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006634:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2224      	movs	r2, #36	; 0x24
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a70      	ldr	r2, [pc, #448]	; (8006808 <HAL_I2C_IsDeviceReady+0x258>)
 8006648:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006658:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2200      	movs	r2, #0
 8006662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fa20 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006680:	d103      	bne.n	800668a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e0b6      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800668e:	897b      	ldrh	r3, [r7, #10]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800669c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800669e:	f7fe f829 	bl	80046f4 <HAL_GetTick>
 80066a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	bf0c      	ite	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	2300      	movne	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066d2:	e025      	b.n	8006720 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fe f80e 	bl	80046f4 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <HAL_I2C_IsDeviceReady+0x13a>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22a0      	movs	r2, #160	; 0xa0
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2ba0      	cmp	r3, #160	; 0xa0
 800672a:	d005      	beq.n	8006738 <HAL_I2C_IsDeviceReady+0x188>
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_I2C_IsDeviceReady+0x188>
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0cd      	beq.n	80066d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b02      	cmp	r3, #2
 800674c:	d129      	bne.n	80067a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2319      	movs	r3, #25
 800677a:	2201      	movs	r2, #1
 800677c:	4921      	ldr	r1, [pc, #132]	; (8006804 <HAL_I2C_IsDeviceReady+0x254>)
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f994 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e036      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e02c      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	2319      	movs	r3, #25
 80067c2:	2201      	movs	r2, #1
 80067c4:	490f      	ldr	r1, [pc, #60]	; (8006804 <HAL_I2C_IsDeviceReady+0x254>)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f970 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e012      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	3301      	adds	r3, #1
 80067da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	f4ff af32 	bcc.w	800664a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80067fa:	2302      	movs	r3, #2
  }
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	00100002 	.word	0x00100002
 8006808:	ffff0000 	.word	0xffff0000

0800680c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	460b      	mov	r3, r1
 800681a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d006      	beq.n	8006836 <I2C_MasterRequestWrite+0x2a>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d003      	beq.n	8006836 <I2C_MasterRequestWrite+0x2a>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006834:	d108      	bne.n	8006848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e00b      	b.n	8006860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	2b12      	cmp	r3, #18
 800684e:	d107      	bne.n	8006860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f91d 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d103      	bne.n	8006890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e035      	b.n	8006900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800689c:	d108      	bne.n	80068b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800689e:	897b      	ldrh	r3, [r7, #10]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068ac:	611a      	str	r2, [r3, #16]
 80068ae:	e01b      	b.n	80068e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068b0:	897b      	ldrh	r3, [r7, #10]
 80068b2:	11db      	asrs	r3, r3, #7
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 0306 	and.w	r3, r3, #6
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f063 030f 	orn	r3, r3, #15
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	490e      	ldr	r1, [pc, #56]	; (8006908 <I2C_MasterRequestWrite+0xfc>)
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f943 	bl	8006b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e010      	b.n	8006900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4907      	ldr	r1, [pc, #28]	; (800690c <I2C_MasterRequestWrite+0x100>)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f933 	bl	8006b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	00010008 	.word	0x00010008
 800690c:	00010002 	.word	0x00010002

08006910 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	460b      	mov	r3, r1
 800691e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006934:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d006      	beq.n	800694a <I2C_MasterRequestRead+0x3a>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d003      	beq.n	800694a <I2C_MasterRequestRead+0x3a>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006948:	d108      	bne.n	800695c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e00b      	b.n	8006974 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b11      	cmp	r3, #17
 8006962:	d107      	bne.n	8006974 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f893 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699a:	d103      	bne.n	80069a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e079      	b.n	8006a9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b0:	d108      	bne.n	80069c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	611a      	str	r2, [r3, #16]
 80069c2:	e05f      	b.n	8006a84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069c4:	897b      	ldrh	r3, [r7, #10]
 80069c6:	11db      	asrs	r3, r3, #7
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0306 	and.w	r3, r3, #6
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f063 030f 	orn	r3, r3, #15
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	4930      	ldr	r1, [pc, #192]	; (8006aa4 <I2C_MasterRequestRead+0x194>)
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f8b9 	bl	8006b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e054      	b.n	8006a9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069f2:	897b      	ldrh	r3, [r7, #10]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	4929      	ldr	r1, [pc, #164]	; (8006aa8 <I2C_MasterRequestRead+0x198>)
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f8a9 	bl	8006b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e044      	b.n	8006a9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a12:	2300      	movs	r3, #0
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f831 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5e:	d103      	bne.n	8006a68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e017      	b.n	8006a9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a6c:	897b      	ldrh	r3, [r7, #10]
 8006a6e:	11db      	asrs	r3, r3, #7
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f003 0306 	and.w	r3, r3, #6
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f063 030e 	orn	r3, r3, #14
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4907      	ldr	r1, [pc, #28]	; (8006aa8 <I2C_MasterRequestRead+0x198>)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f865 	bl	8006b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	00010008 	.word	0x00010008
 8006aa8:	00010002 	.word	0x00010002

08006aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006abc:	e025      	b.n	8006b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d021      	beq.n	8006b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac6:	f7fd fe15 	bl	80046f4 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d302      	bcc.n	8006adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d116      	bne.n	8006b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f043 0220 	orr.w	r2, r3, #32
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e023      	b.n	8006b52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d10d      	bne.n	8006b30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	43da      	mvns	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	e00c      	b.n	8006b4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	43da      	mvns	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bf0c      	ite	eq
 8006b42:	2301      	moveq	r3, #1
 8006b44:	2300      	movne	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d0b6      	beq.n	8006abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b68:	e051      	b.n	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d123      	bne.n	8006bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f043 0204 	orr.w	r2, r3, #4
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e046      	b.n	8006c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d021      	beq.n	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bca:	f7fd fd93 	bl	80046f4 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d116      	bne.n	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f043 0220 	orr.w	r2, r3, #32
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e020      	b.n	8006c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d10c      	bne.n	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	43da      	mvns	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf14      	ite	ne
 8006c2a:	2301      	movne	r3, #1
 8006c2c:	2300      	moveq	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	e00b      	b.n	8006c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	43da      	mvns	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d18d      	bne.n	8006b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c64:	e02d      	b.n	8006cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f8ce 	bl	8006e08 <I2C_IsAcknowledgeFailed>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e02d      	b.n	8006cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d021      	beq.n	8006cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fd fd39 	bl	80046f4 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d116      	bne.n	8006cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e007      	b.n	8006cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d1ca      	bne.n	8006c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ce6:	e02d      	b.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f88d 	bl	8006e08 <I2C_IsAcknowledgeFailed>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e02d      	b.n	8006d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d021      	beq.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d00:	f7fd fcf8 	bl	80046f4 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d116      	bne.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e007      	b.n	8006d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d1ca      	bne.n	8006ce8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d68:	e042      	b.n	8006df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d119      	bne.n	8006dac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f06f 0210 	mvn.w	r2, #16
 8006d80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e029      	b.n	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dac:	f7fd fca2 	bl	80046f4 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d116      	bne.n	8006df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	f043 0220 	orr.w	r2, r3, #32
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e007      	b.n	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d1b5      	bne.n	8006d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1e:	d11b      	bne.n	8006e58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	f043 0204 	orr.w	r2, r3, #4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr

08006e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e272      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8087 	beq.w	8006f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e84:	4b92      	ldr	r3, [pc, #584]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d00c      	beq.n	8006eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e90:	4b8f      	ldr	r3, [pc, #572]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 030c 	and.w	r3, r3, #12
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d112      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x5e>
 8006e9c:	4b8c      	ldr	r3, [pc, #560]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea8:	d10b      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eaa:	4b89      	ldr	r3, [pc, #548]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d06c      	beq.n	8006f90 <HAL_RCC_OscConfig+0x12c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d168      	bne.n	8006f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e24c      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eca:	d106      	bne.n	8006eda <HAL_RCC_OscConfig+0x76>
 8006ecc:	4b80      	ldr	r3, [pc, #512]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a7f      	ldr	r2, [pc, #508]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e02e      	b.n	8006f38 <HAL_RCC_OscConfig+0xd4>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0x98>
 8006ee2:	4b7b      	ldr	r3, [pc, #492]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7a      	ldr	r2, [pc, #488]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b78      	ldr	r3, [pc, #480]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a77      	ldr	r2, [pc, #476]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e01d      	b.n	8006f38 <HAL_RCC_OscConfig+0xd4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f04:	d10c      	bne.n	8006f20 <HAL_RCC_OscConfig+0xbc>
 8006f06:	4b72      	ldr	r3, [pc, #456]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a71      	ldr	r2, [pc, #452]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4b6f      	ldr	r3, [pc, #444]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6e      	ldr	r2, [pc, #440]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e00b      	b.n	8006f38 <HAL_RCC_OscConfig+0xd4>
 8006f20:	4b6b      	ldr	r3, [pc, #428]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6a      	ldr	r2, [pc, #424]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b68      	ldr	r3, [pc, #416]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a67      	ldr	r2, [pc, #412]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d013      	beq.n	8006f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f40:	f7fd fbd8 	bl	80046f4 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fd fbd4 	bl	80046f4 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e200      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	4b5d      	ldr	r3, [pc, #372]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0xe4>
 8006f66:	e014      	b.n	8006f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f68:	f7fd fbc4 	bl	80046f4 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f70:	f7fd fbc0 	bl	80046f4 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e1ec      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	4b53      	ldr	r3, [pc, #332]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0x10c>
 8006f8e:	e000      	b.n	8006f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d063      	beq.n	8007066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f9e:	4b4c      	ldr	r3, [pc, #304]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006faa:	4b49      	ldr	r3, [pc, #292]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f003 030c 	and.w	r3, r3, #12
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d11c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x18c>
 8006fb6:	4b46      	ldr	r3, [pc, #280]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d116      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc2:	4b43      	ldr	r3, [pc, #268]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCC_OscConfig+0x176>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d001      	beq.n	8006fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e1c0      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fda:	4b3d      	ldr	r3, [pc, #244]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4939      	ldr	r1, [pc, #228]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fee:	e03a      	b.n	8007066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ff8:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <HAL_RCC_OscConfig+0x270>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ffe:	f7fd fb79 	bl	80046f4 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007006:	f7fd fb75 	bl	80046f4 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e1a1      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007024:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4927      	ldr	r1, [pc, #156]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 8007034:	4313      	orrs	r3, r2
 8007036:	600b      	str	r3, [r1, #0]
 8007038:	e015      	b.n	8007066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800703a:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <HAL_RCC_OscConfig+0x270>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007040:	f7fd fb58 	bl	80046f4 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007048:	f7fd fb54 	bl	80046f4 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e180      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d03a      	beq.n	80070e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d019      	beq.n	80070ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800707a:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <HAL_RCC_OscConfig+0x274>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007080:	f7fd fb38 	bl	80046f4 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007088:	f7fd fb34 	bl	80046f4 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e160      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <HAL_RCC_OscConfig+0x26c>)
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80070a6:	2001      	movs	r0, #1
 80070a8:	f000 fada 	bl	8007660 <RCC_Delay>
 80070ac:	e01c      	b.n	80070e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <HAL_RCC_OscConfig+0x274>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b4:	f7fd fb1e 	bl	80046f4 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070ba:	e00f      	b.n	80070dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070bc:	f7fd fb1a 	bl	80046f4 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d908      	bls.n	80070dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e146      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
 80070ce:	bf00      	nop
 80070d0:	40021000 	.word	0x40021000
 80070d4:	42420000 	.word	0x42420000
 80070d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070dc:	4b92      	ldr	r3, [pc, #584]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e9      	bne.n	80070bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80a6 	beq.w	8007242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f6:	2300      	movs	r3, #0
 80070f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070fa:	4b8b      	ldr	r3, [pc, #556]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10d      	bne.n	8007122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007106:	4b88      	ldr	r3, [pc, #544]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	4a87      	ldr	r2, [pc, #540]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 800710c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007110:	61d3      	str	r3, [r2, #28]
 8007112:	4b85      	ldr	r3, [pc, #532]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007122:	4b82      	ldr	r3, [pc, #520]	; (800732c <HAL_RCC_OscConfig+0x4c8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	2b00      	cmp	r3, #0
 800712c:	d118      	bne.n	8007160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800712e:	4b7f      	ldr	r3, [pc, #508]	; (800732c <HAL_RCC_OscConfig+0x4c8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a7e      	ldr	r2, [pc, #504]	; (800732c <HAL_RCC_OscConfig+0x4c8>)
 8007134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800713a:	f7fd fadb 	bl	80046f4 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007142:	f7fd fad7 	bl	80046f4 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b64      	cmp	r3, #100	; 0x64
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e103      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007154:	4b75      	ldr	r3, [pc, #468]	; (800732c <HAL_RCC_OscConfig+0x4c8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d106      	bne.n	8007176 <HAL_RCC_OscConfig+0x312>
 8007168:	4b6f      	ldr	r3, [pc, #444]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	4a6e      	ldr	r2, [pc, #440]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	6213      	str	r3, [r2, #32]
 8007174:	e02d      	b.n	80071d2 <HAL_RCC_OscConfig+0x36e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0x334>
 800717e:	4b6a      	ldr	r3, [pc, #424]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	4a69      	ldr	r2, [pc, #420]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	6213      	str	r3, [r2, #32]
 800718a:	4b67      	ldr	r3, [pc, #412]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	4a66      	ldr	r2, [pc, #408]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007190:	f023 0304 	bic.w	r3, r3, #4
 8007194:	6213      	str	r3, [r2, #32]
 8007196:	e01c      	b.n	80071d2 <HAL_RCC_OscConfig+0x36e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b05      	cmp	r3, #5
 800719e:	d10c      	bne.n	80071ba <HAL_RCC_OscConfig+0x356>
 80071a0:	4b61      	ldr	r3, [pc, #388]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	4a60      	ldr	r2, [pc, #384]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071a6:	f043 0304 	orr.w	r3, r3, #4
 80071aa:	6213      	str	r3, [r2, #32]
 80071ac:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	4a5d      	ldr	r2, [pc, #372]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	6213      	str	r3, [r2, #32]
 80071b8:	e00b      	b.n	80071d2 <HAL_RCC_OscConfig+0x36e>
 80071ba:	4b5b      	ldr	r3, [pc, #364]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	4a5a      	ldr	r2, [pc, #360]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	6213      	str	r3, [r2, #32]
 80071c6:	4b58      	ldr	r3, [pc, #352]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	4a57      	ldr	r2, [pc, #348]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071cc:	f023 0304 	bic.w	r3, r3, #4
 80071d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d015      	beq.n	8007206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071da:	f7fd fa8b 	bl	80046f4 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e0:	e00a      	b.n	80071f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e2:	f7fd fa87 	bl	80046f4 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e0b1      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f8:	4b4b      	ldr	r3, [pc, #300]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0ee      	beq.n	80071e2 <HAL_RCC_OscConfig+0x37e>
 8007204:	e014      	b.n	8007230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007206:	f7fd fa75 	bl	80046f4 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800720c:	e00a      	b.n	8007224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fd fa71 	bl	80046f4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	; 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e09b      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007224:	4b40      	ldr	r3, [pc, #256]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1ee      	bne.n	800720e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d105      	bne.n	8007242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007236:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	4a3b      	ldr	r2, [pc, #236]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 800723c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8087 	beq.w	800735a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800724c:	4b36      	ldr	r3, [pc, #216]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 030c 	and.w	r3, r3, #12
 8007254:	2b08      	cmp	r3, #8
 8007256:	d061      	beq.n	800731c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d146      	bne.n	80072ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007260:	4b33      	ldr	r3, [pc, #204]	; (8007330 <HAL_RCC_OscConfig+0x4cc>)
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007266:	f7fd fa45 	bl	80046f4 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726e:	f7fd fa41 	bl	80046f4 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e06d      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007280:	4b29      	ldr	r3, [pc, #164]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f0      	bne.n	800726e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007294:	d108      	bne.n	80072a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	4921      	ldr	r1, [pc, #132]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072a8:	4b1f      	ldr	r3, [pc, #124]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a19      	ldr	r1, [r3, #32]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	430b      	orrs	r3, r1
 80072ba:	491b      	ldr	r1, [pc, #108]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072c0:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <HAL_RCC_OscConfig+0x4cc>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c6:	f7fd fa15 	bl	80046f4 <HAL_GetTick>
 80072ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072cc:	e008      	b.n	80072e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ce:	f7fd fa11 	bl	80046f4 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e03d      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072e0:	4b11      	ldr	r3, [pc, #68]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0f0      	beq.n	80072ce <HAL_RCC_OscConfig+0x46a>
 80072ec:	e035      	b.n	800735a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ee:	4b10      	ldr	r3, [pc, #64]	; (8007330 <HAL_RCC_OscConfig+0x4cc>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f4:	f7fd f9fe 	bl	80046f4 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072fc:	f7fd f9fa 	bl	80046f4 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e026      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <HAL_RCC_OscConfig+0x4c4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1f0      	bne.n	80072fc <HAL_RCC_OscConfig+0x498>
 800731a:	e01e      	b.n	800735a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d107      	bne.n	8007334 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e019      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
 8007328:	40021000 	.word	0x40021000
 800732c:	40007000 	.word	0x40007000
 8007330:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <HAL_RCC_OscConfig+0x500>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	429a      	cmp	r2, r3
 8007346:	d106      	bne.n	8007356 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007352:	429a      	cmp	r2, r3
 8007354:	d001      	beq.n	800735a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	40021000 	.word	0x40021000

08007368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0d0      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800737c:	4b6a      	ldr	r3, [pc, #424]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d910      	bls.n	80073ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b67      	ldr	r3, [pc, #412]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 0207 	bic.w	r2, r3, #7
 8007392:	4965      	ldr	r1, [pc, #404]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800739a:	4b63      	ldr	r3, [pc, #396]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d001      	beq.n	80073ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0b8      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d020      	beq.n	80073fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073c4:	4b59      	ldr	r3, [pc, #356]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a58      	ldr	r2, [pc, #352]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80073ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073dc:	4b53      	ldr	r3, [pc, #332]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4a52      	ldr	r2, [pc, #328]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80073e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e8:	4b50      	ldr	r3, [pc, #320]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	494d      	ldr	r1, [pc, #308]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d040      	beq.n	8007488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d107      	bne.n	800741e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740e:	4b47      	ldr	r3, [pc, #284]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d115      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e07f      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d107      	bne.n	8007436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007426:	4b41      	ldr	r3, [pc, #260]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e073      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007436:	4b3d      	ldr	r3, [pc, #244]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e06b      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f023 0203 	bic.w	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4936      	ldr	r1, [pc, #216]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007454:	4313      	orrs	r3, r2
 8007456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007458:	f7fd f94c 	bl	80046f4 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745e:	e00a      	b.n	8007476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007460:	f7fd f948 	bl	80046f4 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	; 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e053      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007476:	4b2d      	ldr	r3, [pc, #180]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 020c 	and.w	r2, r3, #12
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	429a      	cmp	r2, r3
 8007486:	d1eb      	bne.n	8007460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007488:	4b27      	ldr	r3, [pc, #156]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d210      	bcs.n	80074b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f023 0207 	bic.w	r2, r3, #7
 800749e:	4922      	ldr	r1, [pc, #136]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a6:	4b20      	ldr	r3, [pc, #128]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d001      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e032      	b.n	800751e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074c4:	4b19      	ldr	r3, [pc, #100]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	4916      	ldr	r1, [pc, #88]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074e2:	4b12      	ldr	r3, [pc, #72]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	490e      	ldr	r1, [pc, #56]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074f6:	f000 f821 	bl	800753c <HAL_RCC_GetSysClockFreq>
 80074fa:	4602      	mov	r2, r0
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	091b      	lsrs	r3, r3, #4
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	490a      	ldr	r1, [pc, #40]	; (8007530 <HAL_RCC_ClockConfig+0x1c8>)
 8007508:	5ccb      	ldrb	r3, [r1, r3]
 800750a:	fa22 f303 	lsr.w	r3, r2, r3
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <HAL_RCC_ClockConfig+0x1cc>)
 8007510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <HAL_RCC_ClockConfig+0x1d0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f7fd f8aa 	bl	8004670 <HAL_InitTick>

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40022000 	.word	0x40022000
 800752c:	40021000 	.word	0x40021000
 8007530:	0800e734 	.word	0x0800e734
 8007534:	20000608 	.word	0x20000608
 8007538:	2000060c 	.word	0x2000060c

0800753c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800753c:	b490      	push	{r4, r7}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8007544:	1d3c      	adds	r4, r7, #4
 8007546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800754c:	f240 2301 	movw	r3, #513	; 0x201
 8007550:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007566:	4b21      	ldr	r3, [pc, #132]	; (80075ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f003 030c 	and.w	r3, r3, #12
 8007572:	2b04      	cmp	r3, #4
 8007574:	d002      	beq.n	800757c <HAL_RCC_GetSysClockFreq+0x40>
 8007576:	2b08      	cmp	r3, #8
 8007578:	d003      	beq.n	8007582 <HAL_RCC_GetSysClockFreq+0x46>
 800757a:	e02b      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800757c:	4b1c      	ldr	r3, [pc, #112]	; (80075f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800757e:	623b      	str	r3, [r7, #32]
      break;
 8007580:	e02b      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	0c9b      	lsrs	r3, r3, #18
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	3328      	adds	r3, #40	; 0x28
 800758c:	443b      	add	r3, r7
 800758e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007592:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d012      	beq.n	80075c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	0c5b      	lsrs	r3, r3, #17
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	3328      	adds	r3, #40	; 0x28
 80075aa:	443b      	add	r3, r7
 80075ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	4a0e      	ldr	r2, [pc, #56]	; (80075f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80075b6:	fb03 f202 	mul.w	r2, r3, r2
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
 80075c2:	e004      	b.n	80075ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4a0b      	ldr	r2, [pc, #44]	; (80075f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c8:	fb02 f303 	mul.w	r3, r2, r3
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	623b      	str	r3, [r7, #32]
      break;
 80075d2:	e002      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075d6:	623b      	str	r3, [r7, #32]
      break;
 80075d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075da:	6a3b      	ldr	r3, [r7, #32]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3728      	adds	r7, #40	; 0x28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc90      	pop	{r4, r7}
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	0800e724 	.word	0x0800e724
 80075ec:	40021000 	.word	0x40021000
 80075f0:	00f42400 	.word	0x00f42400
 80075f4:	003d0900 	.word	0x003d0900
 80075f8:	007a1200 	.word	0x007a1200

080075fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <HAL_RCC_GetHCLKFreq+0x10>)
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr
 800760c:	20000608 	.word	0x20000608

08007610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007614:	f7ff fff2 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007618:	4602      	mov	r2, r0
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	4903      	ldr	r1, [pc, #12]	; (8007634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007626:	5ccb      	ldrb	r3, [r1, r3]
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40021000 	.word	0x40021000
 8007634:	0800e744 	.word	0x0800e744

08007638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800763c:	f7ff ffde 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007640:	4602      	mov	r2, r0
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	0adb      	lsrs	r3, r3, #11
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	4903      	ldr	r1, [pc, #12]	; (800765c <HAL_RCC_GetPCLK2Freq+0x24>)
 800764e:	5ccb      	ldrb	r3, [r1, r3]
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40021000 	.word	0x40021000
 800765c:	0800e744 	.word	0x0800e744

08007660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007668:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <RCC_Delay+0x34>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <RCC_Delay+0x38>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	0a5b      	lsrs	r3, r3, #9
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800767c:	bf00      	nop
  }
  while (Delay --);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	60fa      	str	r2, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f9      	bne.n	800767c <RCC_Delay+0x1c>
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr
 8007694:	20000608 	.word	0x20000608
 8007698:	10624dd3 	.word	0x10624dd3

0800769c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d07d      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076bc:	4b4f      	ldr	r3, [pc, #316]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10d      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076c8:	4b4c      	ldr	r3, [pc, #304]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	4a4b      	ldr	r2, [pc, #300]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d2:	61d3      	str	r3, [r2, #28]
 80076d4:	4b49      	ldr	r3, [pc, #292]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076dc:	60bb      	str	r3, [r7, #8]
 80076de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e4:	4b46      	ldr	r3, [pc, #280]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d118      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076f0:	4b43      	ldr	r3, [pc, #268]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a42      	ldr	r2, [pc, #264]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076fc:	f7fc fffa 	bl	80046f4 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007702:	e008      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007704:	f7fc fff6 	bl	80046f4 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	; 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e06d      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007716:	4b3a      	ldr	r3, [pc, #232]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007722:	4b36      	ldr	r3, [pc, #216]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800772a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02e      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	429a      	cmp	r2, r3
 800773e:	d027      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007740:	4b2e      	ldr	r3, [pc, #184]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007748:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007750:	4b2c      	ldr	r3, [pc, #176]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007756:	4a29      	ldr	r2, [pc, #164]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d014      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007766:	f7fc ffc5 	bl	80046f4 <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776c:	e00a      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800776e:	f7fc ffc1 	bl	80046f4 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	f241 3288 	movw	r2, #5000	; 0x1388
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e036      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007784:	4b1d      	ldr	r3, [pc, #116]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0ee      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4917      	ldr	r1, [pc, #92]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d105      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077a8:	4b14      	ldr	r3, [pc, #80]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	4a13      	ldr	r2, [pc, #76]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	490b      	ldr	r1, [pc, #44]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d008      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	4904      	ldr	r1, [pc, #16]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40021000 	.word	0x40021000
 8007800:	40007000 	.word	0x40007000
 8007804:	42420440 	.word	0x42420440

08007808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e041      	b.n	800789e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fc fc18 	bl	8004064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 feee 	bl	8008628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d001      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e044      	b.n	800794a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <HAL_TIM_Base_Start_IT+0xac>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d018      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x6c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <HAL_TIM_Base_Start_IT+0xb0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d013      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x6c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f4:	d00e      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x6c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a18      	ldr	r2, [pc, #96]	; (800795c <HAL_TIM_Base_Start_IT+0xb4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x6c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a16      	ldr	r2, [pc, #88]	; (8007960 <HAL_TIM_Base_Start_IT+0xb8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x6c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a15      	ldr	r2, [pc, #84]	; (8007964 <HAL_TIM_Base_Start_IT+0xbc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d111      	bne.n	8007938 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b06      	cmp	r3, #6
 8007924:	d010      	beq.n	8007948 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0201 	orr.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007936:	e007      	b.n	8007948 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40013400 	.word	0x40013400
 800795c:	40000400 	.word	0x40000400
 8007960:	40000800 	.word	0x40000800
 8007964:	40000c00 	.word	0x40000c00

08007968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e041      	b.n	80079fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f839 	bl	8007a06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f000 fe3e 	bl	8008628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <HAL_TIM_PWM_Start+0x24>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	e022      	b.n	8007a82 <HAL_TIM_PWM_Start+0x6a>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d109      	bne.n	8007a56 <HAL_TIM_PWM_Start+0x3e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	e015      	b.n	8007a82 <HAL_TIM_PWM_Start+0x6a>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d109      	bne.n	8007a70 <HAL_TIM_PWM_Start+0x58>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	e008      	b.n	8007a82 <HAL_TIM_PWM_Start+0x6a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e072      	b.n	8007b70 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_Start+0x82>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a98:	e013      	b.n	8007ac2 <HAL_TIM_PWM_Start+0xaa>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIM_PWM_Start+0x92>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aa8:	e00b      	b.n	8007ac2 <HAL_TIM_PWM_Start+0xaa>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d104      	bne.n	8007aba <HAL_TIM_PWM_Start+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ab8:	e003      	b.n	8007ac2 <HAL_TIM_PWM_Start+0xaa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 f868 	bl	8008ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a28      	ldr	r2, [pc, #160]	; (8007b78 <HAL_TIM_PWM_Start+0x160>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <HAL_TIM_PWM_Start+0xcc>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a27      	ldr	r2, [pc, #156]	; (8007b7c <HAL_TIM_PWM_Start+0x164>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d101      	bne.n	8007ae8 <HAL_TIM_PWM_Start+0xd0>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <HAL_TIM_PWM_Start+0xd2>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1d      	ldr	r2, [pc, #116]	; (8007b78 <HAL_TIM_PWM_Start+0x160>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d018      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x122>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <HAL_TIM_PWM_Start+0x164>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d013      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x122>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1a:	d00e      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x122>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a17      	ldr	r2, [pc, #92]	; (8007b80 <HAL_TIM_PWM_Start+0x168>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x122>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <HAL_TIM_PWM_Start+0x16c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x122>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <HAL_TIM_PWM_Start+0x170>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d111      	bne.n	8007b5e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b06      	cmp	r3, #6
 8007b4a:	d010      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	e007      	b.n	8007b6e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40013400 	.word	0x40013400
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800
 8007b88:	40000c00 	.word	0x40000c00

08007b8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fffe 	bl	8008ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2e      	ldr	r2, [pc, #184]	; (8007c64 <HAL_TIM_PWM_Stop+0xd8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_TIM_PWM_Stop+0x2c>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2d      	ldr	r2, [pc, #180]	; (8007c68 <HAL_TIM_PWM_Stop+0xdc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d101      	bne.n	8007bbc <HAL_TIM_PWM_Stop+0x30>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_TIM_PWM_Stop+0x32>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d017      	beq.n	8007bf2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a1a      	ldr	r2, [r3, #32]
 8007bc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bcc:	4013      	ands	r3, r2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10f      	bne.n	8007bf2 <HAL_TIM_PWM_Stop+0x66>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a1a      	ldr	r2, [r3, #32]
 8007bd8:	f240 4344 	movw	r3, #1092	; 0x444
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <HAL_TIM_PWM_Stop+0x66>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6a1a      	ldr	r2, [r3, #32]
 8007bf8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10f      	bne.n	8007c22 <HAL_TIM_PWM_Stop+0x96>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a1a      	ldr	r2, [r3, #32]
 8007c08:	f240 4344 	movw	r3, #1092	; 0x444
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d107      	bne.n	8007c22 <HAL_TIM_PWM_Stop+0x96>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <HAL_TIM_PWM_Stop+0xa6>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c30:	e013      	b.n	8007c5a <HAL_TIM_PWM_Stop+0xce>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d104      	bne.n	8007c42 <HAL_TIM_PWM_Stop+0xb6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c40:	e00b      	b.n	8007c5a <HAL_TIM_PWM_Stop+0xce>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_PWM_Stop+0xc6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c50:	e003      	b.n	8007c5a <HAL_TIM_PWM_Stop+0xce>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400

08007c6c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d109      	bne.n	8007c90 <HAL_TIM_PWM_Start_IT+0x24>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	bf14      	ite	ne
 8007c88:	2301      	movne	r3, #1
 8007c8a:	2300      	moveq	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	e022      	b.n	8007cd6 <HAL_TIM_PWM_Start_IT+0x6a>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d109      	bne.n	8007caa <HAL_TIM_PWM_Start_IT+0x3e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	bf14      	ite	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	2300      	moveq	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	e015      	b.n	8007cd6 <HAL_TIM_PWM_Start_IT+0x6a>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d109      	bne.n	8007cc4 <HAL_TIM_PWM_Start_IT+0x58>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	bf14      	ite	ne
 8007cbc:	2301      	movne	r3, #1
 8007cbe:	2300      	moveq	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	e008      	b.n	8007cd6 <HAL_TIM_PWM_Start_IT+0x6a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	bf14      	ite	ne
 8007cd0:	2301      	movne	r3, #1
 8007cd2:	2300      	moveq	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e0b8      	b.n	8007e50 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_PWM_Start_IT+0x82>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cec:	e013      	b.n	8007d16 <HAL_TIM_PWM_Start_IT+0xaa>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_PWM_Start_IT+0x92>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cfc:	e00b      	b.n	8007d16 <HAL_TIM_PWM_Start_IT+0xaa>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_PWM_Start_IT+0xa2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d0c:	e003      	b.n	8007d16 <HAL_TIM_PWM_Start_IT+0xaa>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b0c      	cmp	r3, #12
 8007d1a:	d841      	bhi.n	8007da0 <HAL_TIM_PWM_Start_IT+0x134>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <HAL_TIM_PWM_Start_IT+0xb8>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d59 	.word	0x08007d59
 8007d28:	08007da1 	.word	0x08007da1
 8007d2c:	08007da1 	.word	0x08007da1
 8007d30:	08007da1 	.word	0x08007da1
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007da1 	.word	0x08007da1
 8007d44:	08007d7d 	.word	0x08007d7d
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007d8f 	.word	0x08007d8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0202 	orr.w	r2, r2, #2
 8007d66:	60da      	str	r2, [r3, #12]
      break;
 8007d68:	e01b      	b.n	8007da2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0204 	orr.w	r2, r2, #4
 8007d78:	60da      	str	r2, [r3, #12]
      break;
 8007d7a:	e012      	b.n	8007da2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0208 	orr.w	r2, r2, #8
 8007d8a:	60da      	str	r2, [r3, #12]
      break;
 8007d8c:	e009      	b.n	8007da2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0210 	orr.w	r2, r2, #16
 8007d9c:	60da      	str	r2, [r3, #12]
      break;
 8007d9e:	e000      	b.n	8007da2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8007da0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2201      	movs	r2, #1
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fef8 	bl	8008ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a28      	ldr	r2, [pc, #160]	; (8007e58 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d004      	beq.n	8007dc4 <HAL_TIM_PWM_Start_IT+0x158>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a27      	ldr	r2, [pc, #156]	; (8007e5c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x15c>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <HAL_TIM_PWM_Start_IT+0x15e>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d007      	beq.n	8007dde <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a1d      	ldr	r2, [pc, #116]	; (8007e58 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d018      	beq.n	8007e1a <HAL_TIM_PWM_Start_IT+0x1ae>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1b      	ldr	r2, [pc, #108]	; (8007e5c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d013      	beq.n	8007e1a <HAL_TIM_PWM_Start_IT+0x1ae>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d00e      	beq.n	8007e1a <HAL_TIM_PWM_Start_IT+0x1ae>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d009      	beq.n	8007e1a <HAL_TIM_PWM_Start_IT+0x1ae>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d004      	beq.n	8007e1a <HAL_TIM_PWM_Start_IT+0x1ae>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a14      	ldr	r2, [pc, #80]	; (8007e68 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d111      	bne.n	8007e3e <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b06      	cmp	r3, #6
 8007e2a:	d010      	beq.n	8007e4e <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0201 	orr.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3c:	e007      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0201 	orr.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40013400 	.word	0x40013400
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00

08007e6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e093      	b.n	8007fa8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fc f97b 	bl	8004190 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f000 fbb1 	bl	8008628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	4313      	orrs	r3, r2
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007f0c:	f023 030c 	bic.w	r3, r3, #12
 8007f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	011a      	lsls	r2, r3, #4
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	031b      	lsls	r3, r3, #12
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007f4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	4313      	orrs	r3, r2
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007fd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d110      	bne.n	8008002 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d102      	bne.n	8007fec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fe6:	7b7b      	ldrb	r3, [r7, #13]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d001      	beq.n	8007ff0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e069      	b.n	80080c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008000:	e031      	b.n	8008066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b04      	cmp	r3, #4
 8008006:	d110      	bne.n	800802a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800800e:	7b3b      	ldrb	r3, [r7, #12]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d001      	beq.n	8008018 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e055      	b.n	80080c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008028:	e01d      	b.n	8008066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d108      	bne.n	8008042 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d105      	bne.n	8008042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008036:	7b7b      	ldrb	r3, [r7, #13]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d102      	bne.n	8008042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800803c:	7b3b      	ldrb	r3, [r7, #12]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d001      	beq.n	8008046 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e03e      	b.n	80080c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_TIM_Encoder_Start+0xc4>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b04      	cmp	r3, #4
 8008070:	d008      	beq.n	8008084 <HAL_TIM_Encoder_Start+0xd4>
 8008072:	e00f      	b.n	8008094 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	2100      	movs	r1, #0
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fd8f 	bl	8008ba0 <TIM_CCxChannelCmd>
      break;
 8008082:	e016      	b.n	80080b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2201      	movs	r2, #1
 800808a:	2104      	movs	r1, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fd87 	bl	8008ba0 <TIM_CCxChannelCmd>
      break;
 8008092:	e00e      	b.n	80080b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2201      	movs	r2, #1
 800809a:	2100      	movs	r1, #0
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fd7f 	bl	8008ba0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2201      	movs	r2, #1
 80080a8:	2104      	movs	r1, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fd78 	bl	8008ba0 <TIM_CCxChannelCmd>
      break;
 80080b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0201 	orr.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d122      	bne.n	8008128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d11b      	bne.n	8008128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0202 	mvn.w	r2, #2
 80080f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa6f 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 8008114:	e005      	b.n	8008122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa62 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa71 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b04      	cmp	r3, #4
 8008134:	d122      	bne.n	800817c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b04      	cmp	r3, #4
 8008142:	d11b      	bne.n	800817c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0204 	mvn.w	r2, #4
 800814c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa45 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 8008168:	e005      	b.n	8008176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa38 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa47 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b08      	cmp	r3, #8
 8008188:	d122      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b08      	cmp	r3, #8
 8008196:	d11b      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0208 	mvn.w	r2, #8
 80081a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2204      	movs	r2, #4
 80081a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa1b 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa0e 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa1d 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b10      	cmp	r3, #16
 80081dc:	d122      	bne.n	8008224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d11b      	bne.n	8008224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f9f1 	bl	80085f2 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9e4 	bl	80085e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9f3 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d10e      	bne.n	8008250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b01      	cmp	r3, #1
 800823e:	d107      	bne.n	8008250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0201 	mvn.w	r2, #1
 8008248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fa fe3e 	bl	8002ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d10e      	bne.n	800827c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d107      	bne.n	800827c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fd7c 	bl	8008d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d10e      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b40      	cmp	r3, #64	; 0x40
 8008296:	d107      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9b7 	bl	8008616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d10e      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d107      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0220 	mvn.w	r2, #32
 80082cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fd47 	bl	8008d62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e0ac      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x174>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b0c      	cmp	r3, #12
 8008302:	f200 809f 	bhi.w	8008444 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008341 	.word	0x08008341
 8008310:	08008445 	.word	0x08008445
 8008314:	08008445 	.word	0x08008445
 8008318:	08008445 	.word	0x08008445
 800831c:	08008381 	.word	0x08008381
 8008320:	08008445 	.word	0x08008445
 8008324:	08008445 	.word	0x08008445
 8008328:	08008445 	.word	0x08008445
 800832c:	080083c3 	.word	0x080083c3
 8008330:	08008445 	.word	0x08008445
 8008334:	08008445 	.word	0x08008445
 8008338:	08008445 	.word	0x08008445
 800833c:	08008403 	.word	0x08008403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f9e8 	bl	800871c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0208 	orr.w	r2, r2, #8
 800835a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0204 	bic.w	r2, r2, #4
 800836a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6999      	ldr	r1, [r3, #24]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	619a      	str	r2, [r3, #24]
      break;
 800837e:	e062      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fa38 	bl	80087fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6999      	ldr	r1, [r3, #24]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	021a      	lsls	r2, r3, #8
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	619a      	str	r2, [r3, #24]
      break;
 80083c0:	e041      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fa8b 	bl	80088e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69da      	ldr	r2, [r3, #28]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0208 	orr.w	r2, r2, #8
 80083dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0204 	bic.w	r2, r2, #4
 80083ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69d9      	ldr	r1, [r3, #28]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	61da      	str	r2, [r3, #28]
      break;
 8008400:	e021      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fadf 	bl	80089cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800841c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69d9      	ldr	r1, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	021a      	lsls	r2, r3, #8
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	61da      	str	r2, [r3, #28]
      break;
 8008442:	e000      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x18>
 800846c:	2302      	movs	r3, #2
 800846e:	e0b3      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x180>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800848e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a8:	d03e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0xd0>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ae:	f200 8087 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	f000 8085 	beq.w	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084be:	d87f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084c0:	2b70      	cmp	r3, #112	; 0x70
 80084c2:	d01a      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0xa2>
 80084c4:	2b70      	cmp	r3, #112	; 0x70
 80084c6:	d87b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084c8:	2b60      	cmp	r3, #96	; 0x60
 80084ca:	d050      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x116>
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d877      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084d0:	2b50      	cmp	r3, #80	; 0x50
 80084d2:	d03c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0xf6>
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d873      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d058      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x136>
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d86f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	d064      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d86b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d060      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d867      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d05a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084f8:	e062      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f000 fb2a 	bl	8008b62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800851c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
      break;
 8008526:	e04e      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f000 fb13 	bl	8008b62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800854a:	609a      	str	r2, [r3, #8]
      break;
 800854c:	e03b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fa8a 	bl	8008a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2150      	movs	r1, #80	; 0x50
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fae1 	bl	8008b2e <TIM_ITRx_SetConfig>
      break;
 800856c:	e02b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	461a      	mov	r2, r3
 800857c:	f000 faa8 	bl	8008ad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2160      	movs	r1, #96	; 0x60
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fad1 	bl	8008b2e <TIM_ITRx_SetConfig>
      break;
 800858c:	e01b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	461a      	mov	r2, r3
 800859c:	f000 fa6a 	bl	8008a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2140      	movs	r1, #64	; 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fac1 	bl	8008b2e <TIM_ITRx_SetConfig>
      break;
 80085ac:	e00b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 fab8 	bl	8008b2e <TIM_ITRx_SetConfig>
        break;
 80085be:	e002      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085c0:	bf00      	nop
 80085c2:	e000      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a33      	ldr	r2, [pc, #204]	; (8008708 <TIM_Base_SetConfig+0xe0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a32      	ldr	r2, [pc, #200]	; (800870c <TIM_Base_SetConfig+0xe4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00f      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864e:	d00b      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a2f      	ldr	r2, [pc, #188]	; (8008710 <TIM_Base_SetConfig+0xe8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a2e      	ldr	r2, [pc, #184]	; (8008714 <TIM_Base_SetConfig+0xec>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a2d      	ldr	r2, [pc, #180]	; (8008718 <TIM_Base_SetConfig+0xf0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d108      	bne.n	800867a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a22      	ldr	r2, [pc, #136]	; (8008708 <TIM_Base_SetConfig+0xe0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <TIM_Base_SetConfig+0x82>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a21      	ldr	r2, [pc, #132]	; (800870c <TIM_Base_SetConfig+0xe4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00f      	beq.n	80086aa <TIM_Base_SetConfig+0x82>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008690:	d00b      	beq.n	80086aa <TIM_Base_SetConfig+0x82>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <TIM_Base_SetConfig+0xe8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d007      	beq.n	80086aa <TIM_Base_SetConfig+0x82>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1d      	ldr	r2, [pc, #116]	; (8008714 <TIM_Base_SetConfig+0xec>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d003      	beq.n	80086aa <TIM_Base_SetConfig+0x82>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a1c      	ldr	r2, [pc, #112]	; (8008718 <TIM_Base_SetConfig+0xf0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d108      	bne.n	80086bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a09      	ldr	r2, [pc, #36]	; (8008708 <TIM_Base_SetConfig+0xe0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d003      	beq.n	80086f0 <TIM_Base_SetConfig+0xc8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a08      	ldr	r2, [pc, #32]	; (800870c <TIM_Base_SetConfig+0xe4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d103      	bne.n	80086f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	615a      	str	r2, [r3, #20]
}
 80086fe:	bf00      	nop
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr
 8008708:	40012c00 	.word	0x40012c00
 800870c:	40013400 	.word	0x40013400
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00

0800871c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	f023 0201 	bic.w	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f023 0302 	bic.w	r3, r3, #2
 8008764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a20      	ldr	r2, [pc, #128]	; (80087f4 <TIM_OC1_SetConfig+0xd8>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC1_SetConfig+0x64>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <TIM_OC1_SetConfig+0xdc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d10c      	bne.n	800879a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f023 0308 	bic.w	r3, r3, #8
 8008786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f023 0304 	bic.w	r3, r3, #4
 8008798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a15      	ldr	r2, [pc, #84]	; (80087f4 <TIM_OC1_SetConfig+0xd8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC1_SetConfig+0x8e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a14      	ldr	r2, [pc, #80]	; (80087f8 <TIM_OC1_SetConfig+0xdc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d111      	bne.n	80087ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	621a      	str	r2, [r3, #32]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40012c00 	.word	0x40012c00
 80087f8:	40013400 	.word	0x40013400

080087fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	f023 0210 	bic.w	r2, r3, #16
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f023 0320 	bic.w	r3, r3, #32
 8008846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a21      	ldr	r2, [pc, #132]	; (80088dc <TIM_OC2_SetConfig+0xe0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_OC2_SetConfig+0x68>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a20      	ldr	r2, [pc, #128]	; (80088e0 <TIM_OC2_SetConfig+0xe4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d10d      	bne.n	8008880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800886a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a16      	ldr	r2, [pc, #88]	; (80088dc <TIM_OC2_SetConfig+0xe0>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_OC2_SetConfig+0x94>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a15      	ldr	r2, [pc, #84]	; (80088e0 <TIM_OC2_SetConfig+0xe4>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d113      	bne.n	80088b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800889e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	40012c00 	.word	0x40012c00
 80088e0:	40013400 	.word	0x40013400

080088e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800892c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a21      	ldr	r2, [pc, #132]	; (80089c4 <TIM_OC3_SetConfig+0xe0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d003      	beq.n	800894a <TIM_OC3_SetConfig+0x66>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a20      	ldr	r2, [pc, #128]	; (80089c8 <TIM_OC3_SetConfig+0xe4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10d      	bne.n	8008966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a16      	ldr	r2, [pc, #88]	; (80089c4 <TIM_OC3_SetConfig+0xe0>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d003      	beq.n	8008976 <TIM_OC3_SetConfig+0x92>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <TIM_OC3_SetConfig+0xe4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d113      	bne.n	800899e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800897c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	621a      	str	r2, [r3, #32]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	40013400 	.word	0x40013400

080089cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	021b      	lsls	r3, r3, #8
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	031b      	lsls	r3, r3, #12
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <TIM_OC4_SetConfig+0xa0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_OC4_SetConfig+0x68>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a10      	ldr	r2, [pc, #64]	; (8008a70 <TIM_OC4_SetConfig+0xa4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d109      	bne.n	8008a48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	019b      	lsls	r3, r3, #6
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	621a      	str	r2, [r3, #32]
}
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40013400 	.word	0x40013400

08008a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f023 0201 	bic.w	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f023 030a 	bic.w	r3, r3, #10
 8008ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	621a      	str	r2, [r3, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr

08008ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f023 0210 	bic.w	r2, r3, #16
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008afa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	031b      	lsls	r3, r3, #12
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	621a      	str	r2, [r3, #32]
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b085      	sub	sp, #20
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	f043 0307 	orr.w	r3, r3, #7
 8008b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	609a      	str	r2, [r3, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b087      	sub	sp, #28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	021a      	lsls	r2, r3, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	609a      	str	r2, [r3, #8]
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bc80      	pop	{r7}
 8008b9e:	4770      	bx	lr

08008ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f003 031f 	and.w	r3, r3, #31
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	401a      	ands	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e050      	b.n	8008ca2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a19      	ldr	r2, [pc, #100]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c56:	d00e      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a15      	ldr	r2, [pc, #84]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a14      	ldr	r2, [pc, #80]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a12      	ldr	r2, [pc, #72]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d10c      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr
 8008cac:	40012c00 	.word	0x40012c00
 8008cb0:	40013400 	.word	0x40013400
 8008cb4:	40000400 	.word	0x40000400
 8008cb8:	40000800 	.word	0x40000800
 8008cbc:	40000c00 	.word	0x40000c00

08008cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e03d      	b.n	8008d58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr

08008d86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e03f      	b.n	8008e18 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7fb fb55 	bl	800445c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2224      	movs	r2, #36	; 0x24
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fde8 	bl	80099a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691a      	ldr	r2, [r3, #16]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	695a      	ldr	r2, [r3, #20]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d17c      	bne.n	8008f3a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_UART_Transmit+0x2c>
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e075      	b.n	8008f3c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_UART_Transmit+0x3e>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e06e      	b.n	8008f3c <HAL_UART_Transmit+0x11c>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2221      	movs	r2, #33	; 0x21
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e74:	f7fb fc3e 	bl	80046f4 <HAL_GetTick>
 8008e78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	88fa      	ldrh	r2, [r7, #6]
 8008e7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8e:	d108      	bne.n	8008ea2 <HAL_UART_Transmit+0x82>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	e003      	b.n	8008eaa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008eb2:	e02a      	b.n	8008f0a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2180      	movs	r1, #128	; 0x80
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fb20 	bl	8009504 <UART_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e036      	b.n	8008f3c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ee2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	61bb      	str	r3, [r7, #24]
 8008eea:	e007      	b.n	8008efc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1cf      	bne.n	8008eb4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 faf0 	bl	8009504 <UART_WaitOnFlagUntilTimeout>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e006      	b.n	8008f3c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	e000      	b.n	8008f3c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008f3a:	2302      	movs	r3, #2
  }
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3720      	adds	r7, #32
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d11d      	bne.n	8008f9a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <HAL_UART_Receive_IT+0x26>
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e016      	b.n	8008f9c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_UART_Receive_IT+0x38>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e00f      	b.n	8008f9c <HAL_UART_Receive_IT+0x58>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 fb01 	bl	8009598 <UART_Start_Receive_IT>
 8008f96:	4603      	mov	r3, r0
 8008f98:	e000      	b.n	8008f9c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f9a:	2302      	movs	r3, #2
  }
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d11d      	bne.n	8008ffa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <HAL_UART_Receive_DMA+0x26>
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e016      	b.n	8008ffc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <HAL_UART_Receive_DMA+0x38>
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e00f      	b.n	8008ffc <HAL_UART_Receive_DMA+0x58>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008fea:	88fb      	ldrh	r3, [r7, #6]
 8008fec:	461a      	mov	r2, r3
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb0b 	bl	800960c <UART_Start_Receive_DMA>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	e000      	b.n	8008ffc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ffa:	2302      	movs	r3, #2
  }
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009024:	2300      	movs	r3, #0
 8009026:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10d      	bne.n	8009056 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <HAL_UART_IRQHandler+0x52>
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fbfc 	bl	800984c <UART_Receive_IT>
      return;
 8009054:	e17b      	b.n	800934e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80b1 	beq.w	80091c0 <HAL_UART_IRQHandler+0x1bc>
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d105      	bne.n	8009074 <HAL_UART_IRQHandler+0x70>
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80a6 	beq.w	80091c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <HAL_UART_IRQHandler+0x90>
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	f043 0201 	orr.w	r2, r3, #1
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	f003 0304 	and.w	r3, r3, #4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <HAL_UART_IRQHandler+0xb0>
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	f043 0202 	orr.w	r2, r3, #2
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_UART_IRQHandler+0xd0>
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	f043 0204 	orr.w	r2, r3, #4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00f      	beq.n	80090fe <HAL_UART_IRQHandler+0xfa>
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <HAL_UART_IRQHandler+0xee>
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	f043 0208 	orr.w	r2, r3, #8
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 811e 	beq.w	8009344 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <HAL_UART_IRQHandler+0x11e>
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fb95 	bl	800984c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912c:	2b00      	cmp	r3, #0
 800912e:	bf14      	ite	ne
 8009130:	2301      	movne	r3, #1
 8009132:	2300      	moveq	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d102      	bne.n	800914a <HAL_UART_IRQHandler+0x146>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d031      	beq.n	80091ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fad7 	bl	80096fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d023      	beq.n	80091a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695a      	ldr	r2, [r3, #20]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800916c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	2b00      	cmp	r3, #0
 8009174:	d013      	beq.n	800919e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	4a76      	ldr	r2, [pc, #472]	; (8009354 <HAL_UART_IRQHandler+0x350>)
 800917c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	4618      	mov	r0, r3
 8009184:	f7fb ff26 	bl	8004fd4 <HAL_DMA_Abort_IT>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d016      	beq.n	80091bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800919c:	e00e      	b.n	80091bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8ec 	bl	800937c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a4:	e00a      	b.n	80091bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f8e8 	bl	800937c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ac:	e006      	b.n	80091bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8e4 	bl	800937c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80091ba:	e0c3      	b.n	8009344 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091bc:	bf00      	nop
    return;
 80091be:	e0c1      	b.n	8009344 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	f040 80a1 	bne.w	800930c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 809b 	beq.w	800930c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8095 	beq.w	800930c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d04e      	beq.n	80092a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009210:	8a3b      	ldrh	r3, [r7, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8098 	beq.w	8009348 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800921c:	8a3a      	ldrh	r2, [r7, #16]
 800921e:	429a      	cmp	r2, r3
 8009220:	f080 8092 	bcs.w	8009348 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8a3a      	ldrh	r2, [r7, #16]
 8009228:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2b20      	cmp	r3, #32
 8009232:	d02b      	beq.n	800928c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009242:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f022 0201 	bic.w	r2, r2, #1
 8009252:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695a      	ldr	r2, [r3, #20]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009262:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0210 	bic.w	r2, r2, #16
 8009280:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	4618      	mov	r0, r3
 8009288:	f7fb fe69 	bl	8004f5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009294:	b29b      	uxth	r3, r3
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	b29b      	uxth	r3, r3
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f876 	bl	800938e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80092a2:	e051      	b.n	8009348 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d047      	beq.n	800934c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80092bc:	8a7b      	ldrh	r3, [r7, #18]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d044      	beq.n	800934c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695a      	ldr	r2, [r3, #20]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0201 	bic.w	r2, r2, #1
 80092e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0210 	bic.w	r2, r2, #16
 80092fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009300:	8a7b      	ldrh	r3, [r7, #18]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f842 	bl	800938e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800930a:	e01f      	b.n	800934c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009312:	2b00      	cmp	r3, #0
 8009314:	d008      	beq.n	8009328 <HAL_UART_IRQHandler+0x324>
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fa2c 	bl	800977e <UART_Transmit_IT>
    return;
 8009326:	e012      	b.n	800934e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00d      	beq.n	800934e <HAL_UART_IRQHandler+0x34a>
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fa6d 	bl	800981c <UART_EndTransmit_IT>
    return;
 8009342:	e004      	b.n	800934e <HAL_UART_IRQHandler+0x34a>
    return;
 8009344:	bf00      	nop
 8009346:	e002      	b.n	800934e <HAL_UART_IRQHandler+0x34a>
      return;
 8009348:	bf00      	nop
 800934a:	e000      	b.n	800934e <HAL_UART_IRQHandler+0x34a>
      return;
 800934c:	bf00      	nop
  }
}
 800934e:	3728      	adds	r7, #40	; 0x28
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	08009757 	.word	0x08009757

08009358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr

0800936a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr

0800938e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d12a      	bne.n	8009416 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093d4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695a      	ldr	r2, [r3, #20]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	695a      	ldr	r2, [r3, #20]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	2b01      	cmp	r3, #1
 8009404:	d107      	bne.n	8009416 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0210 	bic.w	r2, r2, #16
 8009414:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	2b01      	cmp	r3, #1
 800941c:	d106      	bne.n	800942c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009422:	4619      	mov	r1, r3
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f7ff ffb2 	bl	800938e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800942a:	e002      	b.n	8009432 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7f9 ff63 	bl	80032f8 <HAL_UART_RxCpltCallback>
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009446:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944c:	2b01      	cmp	r3, #1
 800944e:	d108      	bne.n	8009462 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009454:	085b      	lsrs	r3, r3, #1
 8009456:	b29b      	uxth	r3, r3
 8009458:	4619      	mov	r1, r3
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff ff97 	bl	800938e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009460:	e002      	b.n	8009468 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff ff81 	bl	800936a <HAL_UART_RxHalfCpltCallback>
}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948c:	2b00      	cmp	r3, #0
 800948e:	bf14      	ite	ne
 8009490:	2301      	movne	r3, #1
 8009492:	2300      	moveq	r3, #0
 8009494:	b2db      	uxtb	r3, r3
 8009496:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b21      	cmp	r3, #33	; 0x21
 80094a2:	d108      	bne.n	80094b6 <UART_DMAError+0x46>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2200      	movs	r2, #0
 80094ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80094b0:	68b8      	ldr	r0, [r7, #8]
 80094b2:	f000 f90f 	bl	80096d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	bf14      	ite	ne
 80094c4:	2301      	movne	r3, #1
 80094c6:	2300      	moveq	r3, #0
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b22      	cmp	r3, #34	; 0x22
 80094d6:	d108      	bne.n	80094ea <UART_DMAError+0x7a>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2200      	movs	r2, #0
 80094e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80094e4:	68b8      	ldr	r0, [r7, #8]
 80094e6:	f000 f90a 	bl	80096fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f043 0210 	orr.w	r2, r3, #16
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f7ff ff40 	bl	800937c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094fc:	bf00      	nop
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	4613      	mov	r3, r2
 8009512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009514:	e02c      	b.n	8009570 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d028      	beq.n	8009570 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <UART_WaitOnFlagUntilTimeout+0x30>
 8009524:	f7fb f8e6 	bl	80046f4 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	429a      	cmp	r2, r3
 8009532:	d21d      	bcs.n	8009570 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009542:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695a      	ldr	r2, [r3, #20]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2220      	movs	r2, #32
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e00f      	b.n	8009590 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4013      	ands	r3, r2
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	429a      	cmp	r2, r3
 800957e:	bf0c      	ite	eq
 8009580:	2301      	moveq	r3, #1
 8009582:	2300      	movne	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	461a      	mov	r2, r3
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	429a      	cmp	r2, r3
 800958c:	d0c3      	beq.n	8009516 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	88fa      	ldrh	r2, [r7, #6]
 80095b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	88fa      	ldrh	r2, [r7, #6]
 80095b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2222      	movs	r2, #34	; 0x22
 80095c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	695a      	ldr	r2, [r3, #20]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0201 	orr.w	r2, r2, #1
 80095ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0220 	orr.w	r2, r2, #32
 80095fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	bc80      	pop	{r7}
 8009608:	4770      	bx	lr
	...

0800960c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2222      	movs	r2, #34	; 0x22
 8009630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	4a23      	ldr	r2, [pc, #140]	; (80096c8 <UART_Start_Receive_DMA+0xbc>)
 800963a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	4a22      	ldr	r2, [pc, #136]	; (80096cc <UART_Start_Receive_DMA+0xc0>)
 8009642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	4a21      	ldr	r2, [pc, #132]	; (80096d0 <UART_Start_Receive_DMA+0xc4>)
 800964a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	2200      	movs	r2, #0
 8009652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	f7fb fc18 	bl	8004ea0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009670:	2300      	movs	r3, #0
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	613b      	str	r3, [r7, #16]
 8009684:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800969c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	695a      	ldr	r2, [r3, #20]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	695a      	ldr	r2, [r3, #20]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	080093a5 	.word	0x080093a5
 80096cc:	0800943b 	.word	0x0800943b
 80096d0:	08009471 	.word	0x08009471

080096d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80096ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009714:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	695a      	ldr	r2, [r3, #20]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972a:	2b01      	cmp	r3, #1
 800972c:	d107      	bne.n	800973e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 0210 	bic.w	r2, r2, #16
 800973c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	bc80      	pop	{r7}
 8009754:	4770      	bx	lr

08009756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fe03 	bl	800937c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b21      	cmp	r3, #33	; 0x21
 8009790:	d13e      	bne.n	8009810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979a:	d114      	bne.n	80097c6 <UART_Transmit_IT+0x48>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d110      	bne.n	80097c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	1c9a      	adds	r2, r3, #2
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	621a      	str	r2, [r3, #32]
 80097c4:	e008      	b.n	80097d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	1c59      	adds	r1, r3, #1
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6211      	str	r1, [r2, #32]
 80097d0:	781a      	ldrb	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4619      	mov	r1, r3
 80097e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10f      	bne.n	800980c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800980a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	e000      	b.n	8009812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009810:	2302      	movs	r3, #2
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009832:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff fd8b 	bl	8009358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b22      	cmp	r3, #34	; 0x22
 800985e:	f040 8099 	bne.w	8009994 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800986a:	d117      	bne.n	800989c <UART_Receive_IT+0x50>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d113      	bne.n	800989c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	b29a      	uxth	r2, r3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	1c9a      	adds	r2, r3, #2
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	629a      	str	r2, [r3, #40]	; 0x28
 800989a:	e026      	b.n	80098ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ae:	d007      	beq.n	80098c0 <UART_Receive_IT+0x74>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10a      	bne.n	80098ce <UART_Receive_IT+0x82>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e008      	b.n	80098e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4619      	mov	r1, r3
 80098f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d148      	bne.n	8009990 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0220 	bic.w	r2, r2, #32
 800990c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800991c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695a      	ldr	r2, [r3, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0201 	bic.w	r2, r2, #1
 800992c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993a:	2b01      	cmp	r3, #1
 800993c:	d123      	bne.n	8009986 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 0210 	bic.w	r2, r2, #16
 8009952:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0310 	and.w	r3, r3, #16
 800995e:	2b10      	cmp	r3, #16
 8009960:	d10a      	bne.n	8009978 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff fd05 	bl	800938e <HAL_UARTEx_RxEventCallback>
 8009984:	e002      	b.n	800998c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7f9 fcb6 	bl	80032f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	e002      	b.n	8009996 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	e000      	b.n	8009996 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009994:	2302      	movs	r3, #2
  }
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80099da:	f023 030c 	bic.w	r3, r3, #12
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	6812      	ldr	r2, [r2, #0]
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	430b      	orrs	r3, r1
 80099e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a2c      	ldr	r2, [pc, #176]	; (8009ab4 <UART_SetConfig+0x114>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d103      	bne.n	8009a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a08:	f7fd fe16 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	e002      	b.n	8009a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a10:	f7fd fdfe 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 8009a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009a      	lsls	r2, r3, #2
 8009a20:	441a      	add	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2c:	4a22      	ldr	r2, [pc, #136]	; (8009ab8 <UART_SetConfig+0x118>)
 8009a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	0119      	lsls	r1, r3, #4
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009a      	lsls	r2, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <UART_SetConfig+0x118>)
 8009a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	2064      	movs	r0, #100	; 0x64
 8009a56:	fb00 f303 	mul.w	r3, r0, r3
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	3332      	adds	r3, #50	; 0x32
 8009a60:	4a15      	ldr	r2, [pc, #84]	; (8009ab8 <UART_SetConfig+0x118>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a6c:	4419      	add	r1, r3
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4613      	mov	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	009a      	lsls	r2, r3, #2
 8009a78:	441a      	add	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <UART_SetConfig+0x118>)
 8009a86:	fba3 0302 	umull	r0, r3, r3, r2
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	2064      	movs	r0, #100	; 0x64
 8009a8e:	fb00 f303 	mul.w	r3, r0, r3
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	3332      	adds	r3, #50	; 0x32
 8009a98:	4a07      	ldr	r2, [pc, #28]	; (8009ab8 <UART_SetConfig+0x118>)
 8009a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9e:	095b      	lsrs	r3, r3, #5
 8009aa0:	f003 020f 	and.w	r2, r3, #15
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40013800 	.word	0x40013800
 8009ab8:	51eb851f 	.word	0x51eb851f

08009abc <atoi>:
 8009abc:	220a      	movs	r2, #10
 8009abe:	2100      	movs	r1, #0
 8009ac0:	f001 be5e 	b.w	800b780 <strtol>

08009ac4 <__errno>:
 8009ac4:	4b01      	ldr	r3, [pc, #4]	; (8009acc <__errno+0x8>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000614 	.word	0x20000614

08009ad0 <__libc_init_array>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	2600      	movs	r6, #0
 8009ad4:	4d0c      	ldr	r5, [pc, #48]	; (8009b08 <__libc_init_array+0x38>)
 8009ad6:	4c0d      	ldr	r4, [pc, #52]	; (8009b0c <__libc_init_array+0x3c>)
 8009ad8:	1b64      	subs	r4, r4, r5
 8009ada:	10a4      	asrs	r4, r4, #2
 8009adc:	42a6      	cmp	r6, r4
 8009ade:	d109      	bne.n	8009af4 <__libc_init_array+0x24>
 8009ae0:	f004 fda0 	bl	800e624 <_init>
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	4d0a      	ldr	r5, [pc, #40]	; (8009b10 <__libc_init_array+0x40>)
 8009ae8:	4c0a      	ldr	r4, [pc, #40]	; (8009b14 <__libc_init_array+0x44>)
 8009aea:	1b64      	subs	r4, r4, r5
 8009aec:	10a4      	asrs	r4, r4, #2
 8009aee:	42a6      	cmp	r6, r4
 8009af0:	d105      	bne.n	8009afe <__libc_init_array+0x2e>
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af8:	4798      	blx	r3
 8009afa:	3601      	adds	r6, #1
 8009afc:	e7ee      	b.n	8009adc <__libc_init_array+0xc>
 8009afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b02:	4798      	blx	r3
 8009b04:	3601      	adds	r6, #1
 8009b06:	e7f2      	b.n	8009aee <__libc_init_array+0x1e>
 8009b08:	0800ec58 	.word	0x0800ec58
 8009b0c:	0800ec58 	.word	0x0800ec58
 8009b10:	0800ec58 	.word	0x0800ec58
 8009b14:	0800ec5c 	.word	0x0800ec5c

08009b18 <memcpy>:
 8009b18:	440a      	add	r2, r1
 8009b1a:	4291      	cmp	r1, r2
 8009b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b20:	d100      	bne.n	8009b24 <memcpy+0xc>
 8009b22:	4770      	bx	lr
 8009b24:	b510      	push	{r4, lr}
 8009b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b30:	d1f9      	bne.n	8009b26 <memcpy+0xe>
 8009b32:	bd10      	pop	{r4, pc}

08009b34 <memset>:
 8009b34:	4603      	mov	r3, r0
 8009b36:	4402      	add	r2, r0
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d100      	bne.n	8009b3e <memset+0xa>
 8009b3c:	4770      	bx	lr
 8009b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b42:	e7f9      	b.n	8009b38 <memset+0x4>

08009b44 <__cvt>:
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4a:	461f      	mov	r7, r3
 8009b4c:	bfbb      	ittet	lt
 8009b4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009b52:	461f      	movlt	r7, r3
 8009b54:	2300      	movge	r3, #0
 8009b56:	232d      	movlt	r3, #45	; 0x2d
 8009b58:	b088      	sub	sp, #32
 8009b5a:	4614      	mov	r4, r2
 8009b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b60:	7013      	strb	r3, [r2, #0]
 8009b62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009b68:	f023 0820 	bic.w	r8, r3, #32
 8009b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b70:	d005      	beq.n	8009b7e <__cvt+0x3a>
 8009b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b76:	d100      	bne.n	8009b7a <__cvt+0x36>
 8009b78:	3501      	adds	r5, #1
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e000      	b.n	8009b80 <__cvt+0x3c>
 8009b7e:	2303      	movs	r3, #3
 8009b80:	aa07      	add	r2, sp, #28
 8009b82:	9204      	str	r2, [sp, #16]
 8009b84:	aa06      	add	r2, sp, #24
 8009b86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009b8a:	e9cd 3500 	strd	r3, r5, [sp]
 8009b8e:	4622      	mov	r2, r4
 8009b90:	463b      	mov	r3, r7
 8009b92:	f001 ff69 	bl	800ba68 <_dtoa_r>
 8009b96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	d102      	bne.n	8009ba4 <__cvt+0x60>
 8009b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ba0:	07db      	lsls	r3, r3, #31
 8009ba2:	d522      	bpl.n	8009bea <__cvt+0xa6>
 8009ba4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ba8:	eb06 0905 	add.w	r9, r6, r5
 8009bac:	d110      	bne.n	8009bd0 <__cvt+0x8c>
 8009bae:	7833      	ldrb	r3, [r6, #0]
 8009bb0:	2b30      	cmp	r3, #48	; 0x30
 8009bb2:	d10a      	bne.n	8009bca <__cvt+0x86>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4620      	mov	r0, r4
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f7 f81e 	bl	8000bfc <__aeabi_dcmpeq>
 8009bc0:	b918      	cbnz	r0, 8009bca <__cvt+0x86>
 8009bc2:	f1c5 0501 	rsb	r5, r5, #1
 8009bc6:	f8ca 5000 	str.w	r5, [sl]
 8009bca:	f8da 3000 	ldr.w	r3, [sl]
 8009bce:	4499      	add	r9, r3
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f7 f810 	bl	8000bfc <__aeabi_dcmpeq>
 8009bdc:	b108      	cbz	r0, 8009be2 <__cvt+0x9e>
 8009bde:	f8cd 901c 	str.w	r9, [sp, #28]
 8009be2:	2230      	movs	r2, #48	; 0x30
 8009be4:	9b07      	ldr	r3, [sp, #28]
 8009be6:	454b      	cmp	r3, r9
 8009be8:	d307      	bcc.n	8009bfa <__cvt+0xb6>
 8009bea:	4630      	mov	r0, r6
 8009bec:	9b07      	ldr	r3, [sp, #28]
 8009bee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009bf0:	1b9b      	subs	r3, r3, r6
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	b008      	add	sp, #32
 8009bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfa:	1c59      	adds	r1, r3, #1
 8009bfc:	9107      	str	r1, [sp, #28]
 8009bfe:	701a      	strb	r2, [r3, #0]
 8009c00:	e7f0      	b.n	8009be4 <__cvt+0xa0>

08009c02 <__exponent>:
 8009c02:	4603      	mov	r3, r0
 8009c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c06:	2900      	cmp	r1, #0
 8009c08:	f803 2b02 	strb.w	r2, [r3], #2
 8009c0c:	bfb6      	itet	lt
 8009c0e:	222d      	movlt	r2, #45	; 0x2d
 8009c10:	222b      	movge	r2, #43	; 0x2b
 8009c12:	4249      	neglt	r1, r1
 8009c14:	2909      	cmp	r1, #9
 8009c16:	7042      	strb	r2, [r0, #1]
 8009c18:	dd2b      	ble.n	8009c72 <__exponent+0x70>
 8009c1a:	f10d 0407 	add.w	r4, sp, #7
 8009c1e:	46a4      	mov	ip, r4
 8009c20:	270a      	movs	r7, #10
 8009c22:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c26:	460a      	mov	r2, r1
 8009c28:	46a6      	mov	lr, r4
 8009c2a:	fb07 1516 	mls	r5, r7, r6, r1
 8009c2e:	2a63      	cmp	r2, #99	; 0x63
 8009c30:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009c34:	4631      	mov	r1, r6
 8009c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c3e:	dcf0      	bgt.n	8009c22 <__exponent+0x20>
 8009c40:	3130      	adds	r1, #48	; 0x30
 8009c42:	f1ae 0502 	sub.w	r5, lr, #2
 8009c46:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	1c44      	adds	r4, r0, #1
 8009c4e:	4561      	cmp	r1, ip
 8009c50:	d30a      	bcc.n	8009c68 <__exponent+0x66>
 8009c52:	f10d 0209 	add.w	r2, sp, #9
 8009c56:	eba2 020e 	sub.w	r2, r2, lr
 8009c5a:	4565      	cmp	r5, ip
 8009c5c:	bf88      	it	hi
 8009c5e:	2200      	movhi	r2, #0
 8009c60:	4413      	add	r3, r2
 8009c62:	1a18      	subs	r0, r3, r0
 8009c64:	b003      	add	sp, #12
 8009c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c6c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c70:	e7ed      	b.n	8009c4e <__exponent+0x4c>
 8009c72:	2330      	movs	r3, #48	; 0x30
 8009c74:	3130      	adds	r1, #48	; 0x30
 8009c76:	7083      	strb	r3, [r0, #2]
 8009c78:	70c1      	strb	r1, [r0, #3]
 8009c7a:	1d03      	adds	r3, r0, #4
 8009c7c:	e7f1      	b.n	8009c62 <__exponent+0x60>
	...

08009c80 <_printf_float>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	b091      	sub	sp, #68	; 0x44
 8009c86:	460c      	mov	r4, r1
 8009c88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009c8c:	4616      	mov	r6, r2
 8009c8e:	461f      	mov	r7, r3
 8009c90:	4605      	mov	r5, r0
 8009c92:	f003 fa03 	bl	800d09c <_localeconv_r>
 8009c96:	6803      	ldr	r3, [r0, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9c:	f7f6 face 	bl	800023c <strlen>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ca8:	900a      	str	r0, [sp, #40]	; 0x28
 8009caa:	3307      	adds	r3, #7
 8009cac:	f023 0307 	bic.w	r3, r3, #7
 8009cb0:	f103 0208 	add.w	r2, r3, #8
 8009cb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009cb8:	f8d4 b000 	ldr.w	fp, [r4]
 8009cbc:	f8c8 2000 	str.w	r2, [r8]
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cc8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009ccc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4b9c      	ldr	r3, [pc, #624]	; (8009f4c <_printf_float+0x2cc>)
 8009cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cdc:	f7f6 ffc0 	bl	8000c60 <__aeabi_dcmpun>
 8009ce0:	bb70      	cbnz	r0, 8009d40 <_printf_float+0xc0>
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	4b98      	ldr	r3, [pc, #608]	; (8009f4c <_printf_float+0x2cc>)
 8009cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cec:	f7f6 ff9a 	bl	8000c24 <__aeabi_dcmple>
 8009cf0:	bb30      	cbnz	r0, 8009d40 <_printf_float+0xc0>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	4651      	mov	r1, sl
 8009cfa:	f7f6 ff89 	bl	8000c10 <__aeabi_dcmplt>
 8009cfe:	b110      	cbz	r0, 8009d06 <_printf_float+0x86>
 8009d00:	232d      	movs	r3, #45	; 0x2d
 8009d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d06:	4b92      	ldr	r3, [pc, #584]	; (8009f50 <_printf_float+0x2d0>)
 8009d08:	4892      	ldr	r0, [pc, #584]	; (8009f54 <_printf_float+0x2d4>)
 8009d0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d0e:	bf94      	ite	ls
 8009d10:	4698      	movls	r8, r3
 8009d12:	4680      	movhi	r8, r0
 8009d14:	2303      	movs	r3, #3
 8009d16:	f04f 0a00 	mov.w	sl, #0
 8009d1a:	6123      	str	r3, [r4, #16]
 8009d1c:	f02b 0304 	bic.w	r3, fp, #4
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	4633      	mov	r3, r6
 8009d24:	4621      	mov	r1, r4
 8009d26:	4628      	mov	r0, r5
 8009d28:	9700      	str	r7, [sp, #0]
 8009d2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d2c:	f000 f9d4 	bl	800a0d8 <_printf_common>
 8009d30:	3001      	adds	r0, #1
 8009d32:	f040 8090 	bne.w	8009e56 <_printf_float+0x1d6>
 8009d36:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3a:	b011      	add	sp, #68	; 0x44
 8009d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d40:	4642      	mov	r2, r8
 8009d42:	4653      	mov	r3, sl
 8009d44:	4640      	mov	r0, r8
 8009d46:	4651      	mov	r1, sl
 8009d48:	f7f6 ff8a 	bl	8000c60 <__aeabi_dcmpun>
 8009d4c:	b148      	cbz	r0, 8009d62 <_printf_float+0xe2>
 8009d4e:	f1ba 0f00 	cmp.w	sl, #0
 8009d52:	bfb8      	it	lt
 8009d54:	232d      	movlt	r3, #45	; 0x2d
 8009d56:	4880      	ldr	r0, [pc, #512]	; (8009f58 <_printf_float+0x2d8>)
 8009d58:	bfb8      	it	lt
 8009d5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d5e:	4b7f      	ldr	r3, [pc, #508]	; (8009f5c <_printf_float+0x2dc>)
 8009d60:	e7d3      	b.n	8009d0a <_printf_float+0x8a>
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	d142      	bne.n	8009df2 <_printf_float+0x172>
 8009d6c:	2306      	movs	r3, #6
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	9206      	str	r2, [sp, #24]
 8009d74:	aa0e      	add	r2, sp, #56	; 0x38
 8009d76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009d7a:	aa0d      	add	r2, sp, #52	; 0x34
 8009d7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009d80:	9203      	str	r2, [sp, #12]
 8009d82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009d86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	6863      	ldr	r3, [r4, #4]
 8009d8e:	4642      	mov	r2, r8
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4628      	mov	r0, r5
 8009d94:	4653      	mov	r3, sl
 8009d96:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d98:	f7ff fed4 	bl	8009b44 <__cvt>
 8009d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d9e:	4680      	mov	r8, r0
 8009da0:	2947      	cmp	r1, #71	; 0x47
 8009da2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009da4:	d108      	bne.n	8009db8 <_printf_float+0x138>
 8009da6:	1cc8      	adds	r0, r1, #3
 8009da8:	db02      	blt.n	8009db0 <_printf_float+0x130>
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	4299      	cmp	r1, r3
 8009dae:	dd40      	ble.n	8009e32 <_printf_float+0x1b2>
 8009db0:	f1a9 0902 	sub.w	r9, r9, #2
 8009db4:	fa5f f989 	uxtb.w	r9, r9
 8009db8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009dbc:	d81f      	bhi.n	8009dfe <_printf_float+0x17e>
 8009dbe:	464a      	mov	r2, r9
 8009dc0:	3901      	subs	r1, #1
 8009dc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dc6:	910d      	str	r1, [sp, #52]	; 0x34
 8009dc8:	f7ff ff1b 	bl	8009c02 <__exponent>
 8009dcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dce:	4682      	mov	sl, r0
 8009dd0:	1813      	adds	r3, r2, r0
 8009dd2:	2a01      	cmp	r2, #1
 8009dd4:	6123      	str	r3, [r4, #16]
 8009dd6:	dc02      	bgt.n	8009dde <_printf_float+0x15e>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	07d2      	lsls	r2, r2, #31
 8009ddc:	d501      	bpl.n	8009de2 <_printf_float+0x162>
 8009dde:	3301      	adds	r3, #1
 8009de0:	6123      	str	r3, [r4, #16]
 8009de2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d09b      	beq.n	8009d22 <_printf_float+0xa2>
 8009dea:	232d      	movs	r3, #45	; 0x2d
 8009dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df0:	e797      	b.n	8009d22 <_printf_float+0xa2>
 8009df2:	2947      	cmp	r1, #71	; 0x47
 8009df4:	d1bc      	bne.n	8009d70 <_printf_float+0xf0>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1ba      	bne.n	8009d70 <_printf_float+0xf0>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e7b7      	b.n	8009d6e <_printf_float+0xee>
 8009dfe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e02:	d118      	bne.n	8009e36 <_printf_float+0x1b6>
 8009e04:	2900      	cmp	r1, #0
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	dd0b      	ble.n	8009e22 <_printf_float+0x1a2>
 8009e0a:	6121      	str	r1, [r4, #16]
 8009e0c:	b913      	cbnz	r3, 8009e14 <_printf_float+0x194>
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	07d0      	lsls	r0, r2, #31
 8009e12:	d502      	bpl.n	8009e1a <_printf_float+0x19a>
 8009e14:	3301      	adds	r3, #1
 8009e16:	440b      	add	r3, r1
 8009e18:	6123      	str	r3, [r4, #16]
 8009e1a:	f04f 0a00 	mov.w	sl, #0
 8009e1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e20:	e7df      	b.n	8009de2 <_printf_float+0x162>
 8009e22:	b913      	cbnz	r3, 8009e2a <_printf_float+0x1aa>
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	07d2      	lsls	r2, r2, #31
 8009e28:	d501      	bpl.n	8009e2e <_printf_float+0x1ae>
 8009e2a:	3302      	adds	r3, #2
 8009e2c:	e7f4      	b.n	8009e18 <_printf_float+0x198>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e7f2      	b.n	8009e18 <_printf_float+0x198>
 8009e32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e38:	4299      	cmp	r1, r3
 8009e3a:	db05      	blt.n	8009e48 <_printf_float+0x1c8>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	6121      	str	r1, [r4, #16]
 8009e40:	07d8      	lsls	r0, r3, #31
 8009e42:	d5ea      	bpl.n	8009e1a <_printf_float+0x19a>
 8009e44:	1c4b      	adds	r3, r1, #1
 8009e46:	e7e7      	b.n	8009e18 <_printf_float+0x198>
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	bfcc      	ite	gt
 8009e4c:	2201      	movgt	r2, #1
 8009e4e:	f1c1 0202 	rsble	r2, r1, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	e7e0      	b.n	8009e18 <_printf_float+0x198>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	055a      	lsls	r2, r3, #21
 8009e5a:	d407      	bmi.n	8009e6c <_printf_float+0x1ec>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	4642      	mov	r2, r8
 8009e60:	4631      	mov	r1, r6
 8009e62:	4628      	mov	r0, r5
 8009e64:	47b8      	blx	r7
 8009e66:	3001      	adds	r0, #1
 8009e68:	d12b      	bne.n	8009ec2 <_printf_float+0x242>
 8009e6a:	e764      	b.n	8009d36 <_printf_float+0xb6>
 8009e6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e70:	f240 80dd 	bls.w	800a02e <_printf_float+0x3ae>
 8009e74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f7f6 febe 	bl	8000bfc <__aeabi_dcmpeq>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d033      	beq.n	8009eec <_printf_float+0x26c>
 8009e84:	2301      	movs	r3, #1
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	4a35      	ldr	r2, [pc, #212]	; (8009f60 <_printf_float+0x2e0>)
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f43f af51 	beq.w	8009d36 <_printf_float+0xb6>
 8009e94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	db02      	blt.n	8009ea2 <_printf_float+0x222>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	07d8      	lsls	r0, r3, #31
 8009ea0:	d50f      	bpl.n	8009ec2 <_printf_float+0x242>
 8009ea2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f af42 	beq.w	8009d36 <_printf_float+0xb6>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	f104 091a 	add.w	r9, r4, #26
 8009eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	4543      	cmp	r3, r8
 8009ec0:	dc09      	bgt.n	8009ed6 <_printf_float+0x256>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	079b      	lsls	r3, r3, #30
 8009ec6:	f100 8102 	bmi.w	800a0ce <_printf_float+0x44e>
 8009eca:	68e0      	ldr	r0, [r4, #12]
 8009ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ece:	4298      	cmp	r0, r3
 8009ed0:	bfb8      	it	lt
 8009ed2:	4618      	movlt	r0, r3
 8009ed4:	e731      	b.n	8009d3a <_printf_float+0xba>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	464a      	mov	r2, r9
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	f43f af28 	beq.w	8009d36 <_printf_float+0xb6>
 8009ee6:	f108 0801 	add.w	r8, r8, #1
 8009eea:	e7e6      	b.n	8009eba <_printf_float+0x23a>
 8009eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	dc38      	bgt.n	8009f64 <_printf_float+0x2e4>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	4a19      	ldr	r2, [pc, #100]	; (8009f60 <_printf_float+0x2e0>)
 8009efa:	47b8      	blx	r7
 8009efc:	3001      	adds	r0, #1
 8009efe:	f43f af1a 	beq.w	8009d36 <_printf_float+0xb6>
 8009f02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f06:	4313      	orrs	r3, r2
 8009f08:	d102      	bne.n	8009f10 <_printf_float+0x290>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	07d9      	lsls	r1, r3, #31
 8009f0e:	d5d8      	bpl.n	8009ec2 <_printf_float+0x242>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f af0b 	beq.w	8009d36 <_printf_float+0xb6>
 8009f20:	f04f 0900 	mov.w	r9, #0
 8009f24:	f104 0a1a 	add.w	sl, r4, #26
 8009f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f2a:	425b      	negs	r3, r3
 8009f2c:	454b      	cmp	r3, r9
 8009f2e:	dc01      	bgt.n	8009f34 <_printf_float+0x2b4>
 8009f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f32:	e794      	b.n	8009e5e <_printf_float+0x1de>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4652      	mov	r2, sl
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	f43f aef9 	beq.w	8009d36 <_printf_float+0xb6>
 8009f44:	f109 0901 	add.w	r9, r9, #1
 8009f48:	e7ee      	b.n	8009f28 <_printf_float+0x2a8>
 8009f4a:	bf00      	nop
 8009f4c:	7fefffff 	.word	0x7fefffff
 8009f50:	0800e750 	.word	0x0800e750
 8009f54:	0800e754 	.word	0x0800e754
 8009f58:	0800e75c 	.word	0x0800e75c
 8009f5c:	0800e758 	.word	0x0800e758
 8009f60:	0800e760 	.word	0x0800e760
 8009f64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	bfa8      	it	ge
 8009f6c:	461a      	movge	r2, r3
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	4691      	mov	r9, r2
 8009f72:	dc37      	bgt.n	8009fe4 <_printf_float+0x364>
 8009f74:	f04f 0b00 	mov.w	fp, #0
 8009f78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f7c:	f104 021a 	add.w	r2, r4, #26
 8009f80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009f84:	ebaa 0309 	sub.w	r3, sl, r9
 8009f88:	455b      	cmp	r3, fp
 8009f8a:	dc33      	bgt.n	8009ff4 <_printf_float+0x374>
 8009f8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f90:	429a      	cmp	r2, r3
 8009f92:	db3b      	blt.n	800a00c <_printf_float+0x38c>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	07da      	lsls	r2, r3, #31
 8009f98:	d438      	bmi.n	800a00c <_printf_float+0x38c>
 8009f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f9e:	eba3 020a 	sub.w	r2, r3, sl
 8009fa2:	eba3 0901 	sub.w	r9, r3, r1
 8009fa6:	4591      	cmp	r9, r2
 8009fa8:	bfa8      	it	ge
 8009faa:	4691      	movge	r9, r2
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	dc34      	bgt.n	800a01c <_printf_float+0x39c>
 8009fb2:	f04f 0800 	mov.w	r8, #0
 8009fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fba:	f104 0a1a 	add.w	sl, r4, #26
 8009fbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fc2:	1a9b      	subs	r3, r3, r2
 8009fc4:	eba3 0309 	sub.w	r3, r3, r9
 8009fc8:	4543      	cmp	r3, r8
 8009fca:	f77f af7a 	ble.w	8009ec2 <_printf_float+0x242>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4652      	mov	r2, sl
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	47b8      	blx	r7
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f43f aeac 	beq.w	8009d36 <_printf_float+0xb6>
 8009fde:	f108 0801 	add.w	r8, r8, #1
 8009fe2:	e7ec      	b.n	8009fbe <_printf_float+0x33e>
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4642      	mov	r2, r8
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d1c0      	bne.n	8009f74 <_printf_float+0x2f4>
 8009ff2:	e6a0      	b.n	8009d36 <_printf_float+0xb6>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ffc:	47b8      	blx	r7
 8009ffe:	3001      	adds	r0, #1
 800a000:	f43f ae99 	beq.w	8009d36 <_printf_float+0xb6>
 800a004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a006:	f10b 0b01 	add.w	fp, fp, #1
 800a00a:	e7b9      	b.n	8009f80 <_printf_float+0x300>
 800a00c:	4631      	mov	r1, r6
 800a00e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a012:	4628      	mov	r0, r5
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	d1bf      	bne.n	8009f9a <_printf_float+0x31a>
 800a01a:	e68c      	b.n	8009d36 <_printf_float+0xb6>
 800a01c:	464b      	mov	r3, r9
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	eb08 020a 	add.w	r2, r8, sl
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	d1c2      	bne.n	8009fb2 <_printf_float+0x332>
 800a02c:	e683      	b.n	8009d36 <_printf_float+0xb6>
 800a02e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a030:	2a01      	cmp	r2, #1
 800a032:	dc01      	bgt.n	800a038 <_printf_float+0x3b8>
 800a034:	07db      	lsls	r3, r3, #31
 800a036:	d537      	bpl.n	800a0a8 <_printf_float+0x428>
 800a038:	2301      	movs	r3, #1
 800a03a:	4642      	mov	r2, r8
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f ae77 	beq.w	8009d36 <_printf_float+0xb6>
 800a048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a04c:	4631      	mov	r1, r6
 800a04e:	4628      	mov	r0, r5
 800a050:	47b8      	blx	r7
 800a052:	3001      	adds	r0, #1
 800a054:	f43f ae6f 	beq.w	8009d36 <_printf_float+0xb6>
 800a058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	f7f6 fdcc 	bl	8000bfc <__aeabi_dcmpeq>
 800a064:	b9d8      	cbnz	r0, 800a09e <_printf_float+0x41e>
 800a066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a068:	f108 0201 	add.w	r2, r8, #1
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4631      	mov	r1, r6
 800a070:	4628      	mov	r0, r5
 800a072:	47b8      	blx	r7
 800a074:	3001      	adds	r0, #1
 800a076:	d10e      	bne.n	800a096 <_printf_float+0x416>
 800a078:	e65d      	b.n	8009d36 <_printf_float+0xb6>
 800a07a:	2301      	movs	r3, #1
 800a07c:	464a      	mov	r2, r9
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	f43f ae56 	beq.w	8009d36 <_printf_float+0xb6>
 800a08a:	f108 0801 	add.w	r8, r8, #1
 800a08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a090:	3b01      	subs	r3, #1
 800a092:	4543      	cmp	r3, r8
 800a094:	dcf1      	bgt.n	800a07a <_printf_float+0x3fa>
 800a096:	4653      	mov	r3, sl
 800a098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a09c:	e6e0      	b.n	8009e60 <_printf_float+0x1e0>
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	f104 091a 	add.w	r9, r4, #26
 800a0a6:	e7f2      	b.n	800a08e <_printf_float+0x40e>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	e7df      	b.n	800a06e <_printf_float+0x3ee>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	464a      	mov	r2, r9
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f43f ae3c 	beq.w	8009d36 <_printf_float+0xb6>
 800a0be:	f108 0801 	add.w	r8, r8, #1
 800a0c2:	68e3      	ldr	r3, [r4, #12]
 800a0c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0c6:	1a5b      	subs	r3, r3, r1
 800a0c8:	4543      	cmp	r3, r8
 800a0ca:	dcf0      	bgt.n	800a0ae <_printf_float+0x42e>
 800a0cc:	e6fd      	b.n	8009eca <_printf_float+0x24a>
 800a0ce:	f04f 0800 	mov.w	r8, #0
 800a0d2:	f104 0919 	add.w	r9, r4, #25
 800a0d6:	e7f4      	b.n	800a0c2 <_printf_float+0x442>

0800a0d8 <_printf_common>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	4616      	mov	r6, r2
 800a0de:	4699      	mov	r9, r3
 800a0e0:	688a      	ldr	r2, [r1, #8]
 800a0e2:	690b      	ldr	r3, [r1, #16]
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	bfb8      	it	lt
 800a0ea:	4613      	movlt	r3, r2
 800a0ec:	6033      	str	r3, [r6, #0]
 800a0ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0f8:	b10a      	cbz	r2, 800a0fe <_printf_common+0x26>
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	6033      	str	r3, [r6, #0]
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	0699      	lsls	r1, r3, #26
 800a102:	bf42      	ittt	mi
 800a104:	6833      	ldrmi	r3, [r6, #0]
 800a106:	3302      	addmi	r3, #2
 800a108:	6033      	strmi	r3, [r6, #0]
 800a10a:	6825      	ldr	r5, [r4, #0]
 800a10c:	f015 0506 	ands.w	r5, r5, #6
 800a110:	d106      	bne.n	800a120 <_printf_common+0x48>
 800a112:	f104 0a19 	add.w	sl, r4, #25
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	6832      	ldr	r2, [r6, #0]
 800a11a:	1a9b      	subs	r3, r3, r2
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dc28      	bgt.n	800a172 <_printf_common+0x9a>
 800a120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a124:	1e13      	subs	r3, r2, #0
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	bf18      	it	ne
 800a12a:	2301      	movne	r3, #1
 800a12c:	0692      	lsls	r2, r2, #26
 800a12e:	d42d      	bmi.n	800a18c <_printf_common+0xb4>
 800a130:	4649      	mov	r1, r9
 800a132:	4638      	mov	r0, r7
 800a134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a138:	47c0      	blx	r8
 800a13a:	3001      	adds	r0, #1
 800a13c:	d020      	beq.n	800a180 <_printf_common+0xa8>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	68e5      	ldr	r5, [r4, #12]
 800a142:	f003 0306 	and.w	r3, r3, #6
 800a146:	2b04      	cmp	r3, #4
 800a148:	bf18      	it	ne
 800a14a:	2500      	movne	r5, #0
 800a14c:	6832      	ldr	r2, [r6, #0]
 800a14e:	f04f 0600 	mov.w	r6, #0
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	bf08      	it	eq
 800a156:	1aad      	subeq	r5, r5, r2
 800a158:	6922      	ldr	r2, [r4, #16]
 800a15a:	bf08      	it	eq
 800a15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a160:	4293      	cmp	r3, r2
 800a162:	bfc4      	itt	gt
 800a164:	1a9b      	subgt	r3, r3, r2
 800a166:	18ed      	addgt	r5, r5, r3
 800a168:	341a      	adds	r4, #26
 800a16a:	42b5      	cmp	r5, r6
 800a16c:	d11a      	bne.n	800a1a4 <_printf_common+0xcc>
 800a16e:	2000      	movs	r0, #0
 800a170:	e008      	b.n	800a184 <_printf_common+0xac>
 800a172:	2301      	movs	r3, #1
 800a174:	4652      	mov	r2, sl
 800a176:	4649      	mov	r1, r9
 800a178:	4638      	mov	r0, r7
 800a17a:	47c0      	blx	r8
 800a17c:	3001      	adds	r0, #1
 800a17e:	d103      	bne.n	800a188 <_printf_common+0xb0>
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a188:	3501      	adds	r5, #1
 800a18a:	e7c4      	b.n	800a116 <_printf_common+0x3e>
 800a18c:	2030      	movs	r0, #48	; 0x30
 800a18e:	18e1      	adds	r1, r4, r3
 800a190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a19a:	4422      	add	r2, r4
 800a19c:	3302      	adds	r3, #2
 800a19e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1a2:	e7c5      	b.n	800a130 <_printf_common+0x58>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	47c0      	blx	r8
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d0e6      	beq.n	800a180 <_printf_common+0xa8>
 800a1b2:	3601      	adds	r6, #1
 800a1b4:	e7d9      	b.n	800a16a <_printf_common+0x92>
	...

0800a1b8 <_printf_i>:
 800a1b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1bc:	7e0f      	ldrb	r7, [r1, #24]
 800a1be:	4691      	mov	r9, r2
 800a1c0:	2f78      	cmp	r7, #120	; 0x78
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	469a      	mov	sl, r3
 800a1c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ce:	d807      	bhi.n	800a1e0 <_printf_i+0x28>
 800a1d0:	2f62      	cmp	r7, #98	; 0x62
 800a1d2:	d80a      	bhi.n	800a1ea <_printf_i+0x32>
 800a1d4:	2f00      	cmp	r7, #0
 800a1d6:	f000 80d9 	beq.w	800a38c <_printf_i+0x1d4>
 800a1da:	2f58      	cmp	r7, #88	; 0x58
 800a1dc:	f000 80a4 	beq.w	800a328 <_printf_i+0x170>
 800a1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1e8:	e03a      	b.n	800a260 <_printf_i+0xa8>
 800a1ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ee:	2b15      	cmp	r3, #21
 800a1f0:	d8f6      	bhi.n	800a1e0 <_printf_i+0x28>
 800a1f2:	a101      	add	r1, pc, #4	; (adr r1, 800a1f8 <_printf_i+0x40>)
 800a1f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1f8:	0800a251 	.word	0x0800a251
 800a1fc:	0800a265 	.word	0x0800a265
 800a200:	0800a1e1 	.word	0x0800a1e1
 800a204:	0800a1e1 	.word	0x0800a1e1
 800a208:	0800a1e1 	.word	0x0800a1e1
 800a20c:	0800a1e1 	.word	0x0800a1e1
 800a210:	0800a265 	.word	0x0800a265
 800a214:	0800a1e1 	.word	0x0800a1e1
 800a218:	0800a1e1 	.word	0x0800a1e1
 800a21c:	0800a1e1 	.word	0x0800a1e1
 800a220:	0800a1e1 	.word	0x0800a1e1
 800a224:	0800a373 	.word	0x0800a373
 800a228:	0800a295 	.word	0x0800a295
 800a22c:	0800a355 	.word	0x0800a355
 800a230:	0800a1e1 	.word	0x0800a1e1
 800a234:	0800a1e1 	.word	0x0800a1e1
 800a238:	0800a395 	.word	0x0800a395
 800a23c:	0800a1e1 	.word	0x0800a1e1
 800a240:	0800a295 	.word	0x0800a295
 800a244:	0800a1e1 	.word	0x0800a1e1
 800a248:	0800a1e1 	.word	0x0800a1e1
 800a24c:	0800a35d 	.word	0x0800a35d
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	1d1a      	adds	r2, r3, #4
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	602a      	str	r2, [r5, #0]
 800a258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a260:	2301      	movs	r3, #1
 800a262:	e0a4      	b.n	800a3ae <_printf_i+0x1f6>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	6829      	ldr	r1, [r5, #0]
 800a268:	0606      	lsls	r6, r0, #24
 800a26a:	f101 0304 	add.w	r3, r1, #4
 800a26e:	d50a      	bpl.n	800a286 <_printf_i+0xce>
 800a270:	680e      	ldr	r6, [r1, #0]
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	2e00      	cmp	r6, #0
 800a276:	da03      	bge.n	800a280 <_printf_i+0xc8>
 800a278:	232d      	movs	r3, #45	; 0x2d
 800a27a:	4276      	negs	r6, r6
 800a27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a280:	230a      	movs	r3, #10
 800a282:	485e      	ldr	r0, [pc, #376]	; (800a3fc <_printf_i+0x244>)
 800a284:	e019      	b.n	800a2ba <_printf_i+0x102>
 800a286:	680e      	ldr	r6, [r1, #0]
 800a288:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	bf18      	it	ne
 800a290:	b236      	sxthne	r6, r6
 800a292:	e7ef      	b.n	800a274 <_printf_i+0xbc>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	6820      	ldr	r0, [r4, #0]
 800a298:	1d19      	adds	r1, r3, #4
 800a29a:	6029      	str	r1, [r5, #0]
 800a29c:	0601      	lsls	r1, r0, #24
 800a29e:	d501      	bpl.n	800a2a4 <_printf_i+0xec>
 800a2a0:	681e      	ldr	r6, [r3, #0]
 800a2a2:	e002      	b.n	800a2aa <_printf_i+0xf2>
 800a2a4:	0646      	lsls	r6, r0, #25
 800a2a6:	d5fb      	bpl.n	800a2a0 <_printf_i+0xe8>
 800a2a8:	881e      	ldrh	r6, [r3, #0]
 800a2aa:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ac:	bf0c      	ite	eq
 800a2ae:	2308      	moveq	r3, #8
 800a2b0:	230a      	movne	r3, #10
 800a2b2:	4852      	ldr	r0, [pc, #328]	; (800a3fc <_printf_i+0x244>)
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ba:	6865      	ldr	r5, [r4, #4]
 800a2bc:	2d00      	cmp	r5, #0
 800a2be:	bfa8      	it	ge
 800a2c0:	6821      	ldrge	r1, [r4, #0]
 800a2c2:	60a5      	str	r5, [r4, #8]
 800a2c4:	bfa4      	itt	ge
 800a2c6:	f021 0104 	bicge.w	r1, r1, #4
 800a2ca:	6021      	strge	r1, [r4, #0]
 800a2cc:	b90e      	cbnz	r6, 800a2d2 <_printf_i+0x11a>
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	d04d      	beq.n	800a36e <_printf_i+0x1b6>
 800a2d2:	4615      	mov	r5, r2
 800a2d4:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2d8:	fb03 6711 	mls	r7, r3, r1, r6
 800a2dc:	5dc7      	ldrb	r7, [r0, r7]
 800a2de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2e2:	4637      	mov	r7, r6
 800a2e4:	42bb      	cmp	r3, r7
 800a2e6:	460e      	mov	r6, r1
 800a2e8:	d9f4      	bls.n	800a2d4 <_printf_i+0x11c>
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d10b      	bne.n	800a306 <_printf_i+0x14e>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	07de      	lsls	r6, r3, #31
 800a2f2:	d508      	bpl.n	800a306 <_printf_i+0x14e>
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	6861      	ldr	r1, [r4, #4]
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	bfde      	ittt	le
 800a2fc:	2330      	movle	r3, #48	; 0x30
 800a2fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a302:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a306:	1b52      	subs	r2, r2, r5
 800a308:	6122      	str	r2, [r4, #16]
 800a30a:	464b      	mov	r3, r9
 800a30c:	4621      	mov	r1, r4
 800a30e:	4640      	mov	r0, r8
 800a310:	f8cd a000 	str.w	sl, [sp]
 800a314:	aa03      	add	r2, sp, #12
 800a316:	f7ff fedf 	bl	800a0d8 <_printf_common>
 800a31a:	3001      	adds	r0, #1
 800a31c:	d14c      	bne.n	800a3b8 <_printf_i+0x200>
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	b004      	add	sp, #16
 800a324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a328:	4834      	ldr	r0, [pc, #208]	; (800a3fc <_printf_i+0x244>)
 800a32a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a32e:	6829      	ldr	r1, [r5, #0]
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	f851 6b04 	ldr.w	r6, [r1], #4
 800a336:	6029      	str	r1, [r5, #0]
 800a338:	061d      	lsls	r5, r3, #24
 800a33a:	d514      	bpl.n	800a366 <_printf_i+0x1ae>
 800a33c:	07df      	lsls	r7, r3, #31
 800a33e:	bf44      	itt	mi
 800a340:	f043 0320 	orrmi.w	r3, r3, #32
 800a344:	6023      	strmi	r3, [r4, #0]
 800a346:	b91e      	cbnz	r6, 800a350 <_printf_i+0x198>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	f023 0320 	bic.w	r3, r3, #32
 800a34e:	6023      	str	r3, [r4, #0]
 800a350:	2310      	movs	r3, #16
 800a352:	e7af      	b.n	800a2b4 <_printf_i+0xfc>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	f043 0320 	orr.w	r3, r3, #32
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	2378      	movs	r3, #120	; 0x78
 800a35e:	4828      	ldr	r0, [pc, #160]	; (800a400 <_printf_i+0x248>)
 800a360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a364:	e7e3      	b.n	800a32e <_printf_i+0x176>
 800a366:	0659      	lsls	r1, r3, #25
 800a368:	bf48      	it	mi
 800a36a:	b2b6      	uxthmi	r6, r6
 800a36c:	e7e6      	b.n	800a33c <_printf_i+0x184>
 800a36e:	4615      	mov	r5, r2
 800a370:	e7bb      	b.n	800a2ea <_printf_i+0x132>
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	6826      	ldr	r6, [r4, #0]
 800a376:	1d18      	adds	r0, r3, #4
 800a378:	6961      	ldr	r1, [r4, #20]
 800a37a:	6028      	str	r0, [r5, #0]
 800a37c:	0635      	lsls	r5, r6, #24
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	d501      	bpl.n	800a386 <_printf_i+0x1ce>
 800a382:	6019      	str	r1, [r3, #0]
 800a384:	e002      	b.n	800a38c <_printf_i+0x1d4>
 800a386:	0670      	lsls	r0, r6, #25
 800a388:	d5fb      	bpl.n	800a382 <_printf_i+0x1ca>
 800a38a:	8019      	strh	r1, [r3, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	4615      	mov	r5, r2
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	e7ba      	b.n	800a30a <_printf_i+0x152>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	2100      	movs	r1, #0
 800a398:	1d1a      	adds	r2, r3, #4
 800a39a:	602a      	str	r2, [r5, #0]
 800a39c:	681d      	ldr	r5, [r3, #0]
 800a39e:	6862      	ldr	r2, [r4, #4]
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f002 ff01 	bl	800d1a8 <memchr>
 800a3a6:	b108      	cbz	r0, 800a3ac <_printf_i+0x1f4>
 800a3a8:	1b40      	subs	r0, r0, r5
 800a3aa:	6060      	str	r0, [r4, #4]
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	6123      	str	r3, [r4, #16]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b6:	e7a8      	b.n	800a30a <_printf_i+0x152>
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	4640      	mov	r0, r8
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	47d0      	blx	sl
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	d0ab      	beq.n	800a31e <_printf_i+0x166>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	079b      	lsls	r3, r3, #30
 800a3ca:	d413      	bmi.n	800a3f4 <_printf_i+0x23c>
 800a3cc:	68e0      	ldr	r0, [r4, #12]
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	4298      	cmp	r0, r3
 800a3d2:	bfb8      	it	lt
 800a3d4:	4618      	movlt	r0, r3
 800a3d6:	e7a4      	b.n	800a322 <_printf_i+0x16a>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	4632      	mov	r2, r6
 800a3dc:	4649      	mov	r1, r9
 800a3de:	4640      	mov	r0, r8
 800a3e0:	47d0      	blx	sl
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	d09b      	beq.n	800a31e <_printf_i+0x166>
 800a3e6:	3501      	adds	r5, #1
 800a3e8:	68e3      	ldr	r3, [r4, #12]
 800a3ea:	9903      	ldr	r1, [sp, #12]
 800a3ec:	1a5b      	subs	r3, r3, r1
 800a3ee:	42ab      	cmp	r3, r5
 800a3f0:	dcf2      	bgt.n	800a3d8 <_printf_i+0x220>
 800a3f2:	e7eb      	b.n	800a3cc <_printf_i+0x214>
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	f104 0619 	add.w	r6, r4, #25
 800a3fa:	e7f5      	b.n	800a3e8 <_printf_i+0x230>
 800a3fc:	0800e762 	.word	0x0800e762
 800a400:	0800e773 	.word	0x0800e773

0800a404 <_scanf_float>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	b087      	sub	sp, #28
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	688b      	ldr	r3, [r1, #8]
 800a40e:	4617      	mov	r7, r2
 800a410:	1e5a      	subs	r2, r3, #1
 800a412:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a416:	bf85      	ittet	hi
 800a418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a41c:	195b      	addhi	r3, r3, r5
 800a41e:	2300      	movls	r3, #0
 800a420:	9302      	strhi	r3, [sp, #8]
 800a422:	bf88      	it	hi
 800a424:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a428:	468b      	mov	fp, r1
 800a42a:	f04f 0500 	mov.w	r5, #0
 800a42e:	bf8c      	ite	hi
 800a430:	608b      	strhi	r3, [r1, #8]
 800a432:	9302      	strls	r3, [sp, #8]
 800a434:	680b      	ldr	r3, [r1, #0]
 800a436:	4680      	mov	r8, r0
 800a438:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a43c:	f84b 3b1c 	str.w	r3, [fp], #28
 800a440:	460c      	mov	r4, r1
 800a442:	465e      	mov	r6, fp
 800a444:	46aa      	mov	sl, r5
 800a446:	46a9      	mov	r9, r5
 800a448:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a44c:	9501      	str	r5, [sp, #4]
 800a44e:	68a2      	ldr	r2, [r4, #8]
 800a450:	b152      	cbz	r2, 800a468 <_scanf_float+0x64>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b4e      	cmp	r3, #78	; 0x4e
 800a458:	d864      	bhi.n	800a524 <_scanf_float+0x120>
 800a45a:	2b40      	cmp	r3, #64	; 0x40
 800a45c:	d83c      	bhi.n	800a4d8 <_scanf_float+0xd4>
 800a45e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a462:	b2c8      	uxtb	r0, r1
 800a464:	280e      	cmp	r0, #14
 800a466:	d93a      	bls.n	800a4de <_scanf_float+0xda>
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	d003      	beq.n	800a476 <_scanf_float+0x72>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a47a:	f1ba 0f01 	cmp.w	sl, #1
 800a47e:	f200 8113 	bhi.w	800a6a8 <_scanf_float+0x2a4>
 800a482:	455e      	cmp	r6, fp
 800a484:	f200 8105 	bhi.w	800a692 <_scanf_float+0x28e>
 800a488:	2501      	movs	r5, #1
 800a48a:	4628      	mov	r0, r5
 800a48c:	b007      	add	sp, #28
 800a48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a492:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a496:	2a0d      	cmp	r2, #13
 800a498:	d8e6      	bhi.n	800a468 <_scanf_float+0x64>
 800a49a:	a101      	add	r1, pc, #4	; (adr r1, 800a4a0 <_scanf_float+0x9c>)
 800a49c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4a0:	0800a5df 	.word	0x0800a5df
 800a4a4:	0800a469 	.word	0x0800a469
 800a4a8:	0800a469 	.word	0x0800a469
 800a4ac:	0800a469 	.word	0x0800a469
 800a4b0:	0800a63f 	.word	0x0800a63f
 800a4b4:	0800a617 	.word	0x0800a617
 800a4b8:	0800a469 	.word	0x0800a469
 800a4bc:	0800a469 	.word	0x0800a469
 800a4c0:	0800a5ed 	.word	0x0800a5ed
 800a4c4:	0800a469 	.word	0x0800a469
 800a4c8:	0800a469 	.word	0x0800a469
 800a4cc:	0800a469 	.word	0x0800a469
 800a4d0:	0800a469 	.word	0x0800a469
 800a4d4:	0800a5a5 	.word	0x0800a5a5
 800a4d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a4dc:	e7db      	b.n	800a496 <_scanf_float+0x92>
 800a4de:	290e      	cmp	r1, #14
 800a4e0:	d8c2      	bhi.n	800a468 <_scanf_float+0x64>
 800a4e2:	a001      	add	r0, pc, #4	; (adr r0, 800a4e8 <_scanf_float+0xe4>)
 800a4e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4e8:	0800a597 	.word	0x0800a597
 800a4ec:	0800a469 	.word	0x0800a469
 800a4f0:	0800a597 	.word	0x0800a597
 800a4f4:	0800a62b 	.word	0x0800a62b
 800a4f8:	0800a469 	.word	0x0800a469
 800a4fc:	0800a545 	.word	0x0800a545
 800a500:	0800a581 	.word	0x0800a581
 800a504:	0800a581 	.word	0x0800a581
 800a508:	0800a581 	.word	0x0800a581
 800a50c:	0800a581 	.word	0x0800a581
 800a510:	0800a581 	.word	0x0800a581
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a581 	.word	0x0800a581
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a581 	.word	0x0800a581
 800a524:	2b6e      	cmp	r3, #110	; 0x6e
 800a526:	d809      	bhi.n	800a53c <_scanf_float+0x138>
 800a528:	2b60      	cmp	r3, #96	; 0x60
 800a52a:	d8b2      	bhi.n	800a492 <_scanf_float+0x8e>
 800a52c:	2b54      	cmp	r3, #84	; 0x54
 800a52e:	d077      	beq.n	800a620 <_scanf_float+0x21c>
 800a530:	2b59      	cmp	r3, #89	; 0x59
 800a532:	d199      	bne.n	800a468 <_scanf_float+0x64>
 800a534:	2d07      	cmp	r5, #7
 800a536:	d197      	bne.n	800a468 <_scanf_float+0x64>
 800a538:	2508      	movs	r5, #8
 800a53a:	e029      	b.n	800a590 <_scanf_float+0x18c>
 800a53c:	2b74      	cmp	r3, #116	; 0x74
 800a53e:	d06f      	beq.n	800a620 <_scanf_float+0x21c>
 800a540:	2b79      	cmp	r3, #121	; 0x79
 800a542:	e7f6      	b.n	800a532 <_scanf_float+0x12e>
 800a544:	6821      	ldr	r1, [r4, #0]
 800a546:	05c8      	lsls	r0, r1, #23
 800a548:	d51a      	bpl.n	800a580 <_scanf_float+0x17c>
 800a54a:	9b02      	ldr	r3, [sp, #8]
 800a54c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a550:	6021      	str	r1, [r4, #0]
 800a552:	f109 0901 	add.w	r9, r9, #1
 800a556:	b11b      	cbz	r3, 800a560 <_scanf_float+0x15c>
 800a558:	3b01      	subs	r3, #1
 800a55a:	3201      	adds	r2, #1
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	60a2      	str	r2, [r4, #8]
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	3b01      	subs	r3, #1
 800a564:	60a3      	str	r3, [r4, #8]
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	3301      	adds	r3, #1
 800a56a:	6123      	str	r3, [r4, #16]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3b01      	subs	r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	607b      	str	r3, [r7, #4]
 800a574:	f340 8084 	ble.w	800a680 <_scanf_float+0x27c>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	3301      	adds	r3, #1
 800a57c:	603b      	str	r3, [r7, #0]
 800a57e:	e766      	b.n	800a44e <_scanf_float+0x4a>
 800a580:	eb1a 0f05 	cmn.w	sl, r5
 800a584:	f47f af70 	bne.w	800a468 <_scanf_float+0x64>
 800a588:	6822      	ldr	r2, [r4, #0]
 800a58a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a58e:	6022      	str	r2, [r4, #0]
 800a590:	f806 3b01 	strb.w	r3, [r6], #1
 800a594:	e7e4      	b.n	800a560 <_scanf_float+0x15c>
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	0610      	lsls	r0, r2, #24
 800a59a:	f57f af65 	bpl.w	800a468 <_scanf_float+0x64>
 800a59e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5a2:	e7f4      	b.n	800a58e <_scanf_float+0x18a>
 800a5a4:	f1ba 0f00 	cmp.w	sl, #0
 800a5a8:	d10e      	bne.n	800a5c8 <_scanf_float+0x1c4>
 800a5aa:	f1b9 0f00 	cmp.w	r9, #0
 800a5ae:	d10e      	bne.n	800a5ce <_scanf_float+0x1ca>
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5ba:	d108      	bne.n	800a5ce <_scanf_float+0x1ca>
 800a5bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5c0:	f04f 0a01 	mov.w	sl, #1
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	e7e3      	b.n	800a590 <_scanf_float+0x18c>
 800a5c8:	f1ba 0f02 	cmp.w	sl, #2
 800a5cc:	d055      	beq.n	800a67a <_scanf_float+0x276>
 800a5ce:	2d01      	cmp	r5, #1
 800a5d0:	d002      	beq.n	800a5d8 <_scanf_float+0x1d4>
 800a5d2:	2d04      	cmp	r5, #4
 800a5d4:	f47f af48 	bne.w	800a468 <_scanf_float+0x64>
 800a5d8:	3501      	adds	r5, #1
 800a5da:	b2ed      	uxtb	r5, r5
 800a5dc:	e7d8      	b.n	800a590 <_scanf_float+0x18c>
 800a5de:	f1ba 0f01 	cmp.w	sl, #1
 800a5e2:	f47f af41 	bne.w	800a468 <_scanf_float+0x64>
 800a5e6:	f04f 0a02 	mov.w	sl, #2
 800a5ea:	e7d1      	b.n	800a590 <_scanf_float+0x18c>
 800a5ec:	b97d      	cbnz	r5, 800a60e <_scanf_float+0x20a>
 800a5ee:	f1b9 0f00 	cmp.w	r9, #0
 800a5f2:	f47f af3c 	bne.w	800a46e <_scanf_float+0x6a>
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a600:	f47f af39 	bne.w	800a476 <_scanf_float+0x72>
 800a604:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a608:	2501      	movs	r5, #1
 800a60a:	6022      	str	r2, [r4, #0]
 800a60c:	e7c0      	b.n	800a590 <_scanf_float+0x18c>
 800a60e:	2d03      	cmp	r5, #3
 800a610:	d0e2      	beq.n	800a5d8 <_scanf_float+0x1d4>
 800a612:	2d05      	cmp	r5, #5
 800a614:	e7de      	b.n	800a5d4 <_scanf_float+0x1d0>
 800a616:	2d02      	cmp	r5, #2
 800a618:	f47f af26 	bne.w	800a468 <_scanf_float+0x64>
 800a61c:	2503      	movs	r5, #3
 800a61e:	e7b7      	b.n	800a590 <_scanf_float+0x18c>
 800a620:	2d06      	cmp	r5, #6
 800a622:	f47f af21 	bne.w	800a468 <_scanf_float+0x64>
 800a626:	2507      	movs	r5, #7
 800a628:	e7b2      	b.n	800a590 <_scanf_float+0x18c>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	0591      	lsls	r1, r2, #22
 800a62e:	f57f af1b 	bpl.w	800a468 <_scanf_float+0x64>
 800a632:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a636:	6022      	str	r2, [r4, #0]
 800a638:	f8cd 9004 	str.w	r9, [sp, #4]
 800a63c:	e7a8      	b.n	800a590 <_scanf_float+0x18c>
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a644:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a648:	d006      	beq.n	800a658 <_scanf_float+0x254>
 800a64a:	0550      	lsls	r0, r2, #21
 800a64c:	f57f af0c 	bpl.w	800a468 <_scanf_float+0x64>
 800a650:	f1b9 0f00 	cmp.w	r9, #0
 800a654:	f43f af0f 	beq.w	800a476 <_scanf_float+0x72>
 800a658:	0591      	lsls	r1, r2, #22
 800a65a:	bf58      	it	pl
 800a65c:	9901      	ldrpl	r1, [sp, #4]
 800a65e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a662:	bf58      	it	pl
 800a664:	eba9 0101 	subpl.w	r1, r9, r1
 800a668:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a66c:	f04f 0900 	mov.w	r9, #0
 800a670:	bf58      	it	pl
 800a672:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a676:	6022      	str	r2, [r4, #0]
 800a678:	e78a      	b.n	800a590 <_scanf_float+0x18c>
 800a67a:	f04f 0a03 	mov.w	sl, #3
 800a67e:	e787      	b.n	800a590 <_scanf_float+0x18c>
 800a680:	4639      	mov	r1, r7
 800a682:	4640      	mov	r0, r8
 800a684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a688:	4798      	blx	r3
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f43f aedf 	beq.w	800a44e <_scanf_float+0x4a>
 800a690:	e6ea      	b.n	800a468 <_scanf_float+0x64>
 800a692:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a696:	463a      	mov	r2, r7
 800a698:	4640      	mov	r0, r8
 800a69a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a69e:	4798      	blx	r3
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	6123      	str	r3, [r4, #16]
 800a6a6:	e6ec      	b.n	800a482 <_scanf_float+0x7e>
 800a6a8:	1e6b      	subs	r3, r5, #1
 800a6aa:	2b06      	cmp	r3, #6
 800a6ac:	d825      	bhi.n	800a6fa <_scanf_float+0x2f6>
 800a6ae:	2d02      	cmp	r5, #2
 800a6b0:	d836      	bhi.n	800a720 <_scanf_float+0x31c>
 800a6b2:	455e      	cmp	r6, fp
 800a6b4:	f67f aee8 	bls.w	800a488 <_scanf_float+0x84>
 800a6b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4640      	mov	r0, r8
 800a6c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6c4:	4798      	blx	r3
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	6123      	str	r3, [r4, #16]
 800a6cc:	e7f1      	b.n	800a6b2 <_scanf_float+0x2ae>
 800a6ce:	9802      	ldr	r0, [sp, #8]
 800a6d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a6d8:	463a      	mov	r2, r7
 800a6da:	9002      	str	r0, [sp, #8]
 800a6dc:	4640      	mov	r0, r8
 800a6de:	4798      	blx	r3
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6ea:	fa5f fa8a 	uxtb.w	sl, sl
 800a6ee:	f1ba 0f02 	cmp.w	sl, #2
 800a6f2:	d1ec      	bne.n	800a6ce <_scanf_float+0x2ca>
 800a6f4:	3d03      	subs	r5, #3
 800a6f6:	b2ed      	uxtb	r5, r5
 800a6f8:	1b76      	subs	r6, r6, r5
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	05da      	lsls	r2, r3, #23
 800a6fe:	d52f      	bpl.n	800a760 <_scanf_float+0x35c>
 800a700:	055b      	lsls	r3, r3, #21
 800a702:	d510      	bpl.n	800a726 <_scanf_float+0x322>
 800a704:	455e      	cmp	r6, fp
 800a706:	f67f aebf 	bls.w	800a488 <_scanf_float+0x84>
 800a70a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a70e:	463a      	mov	r2, r7
 800a710:	4640      	mov	r0, r8
 800a712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a716:	4798      	blx	r3
 800a718:	6923      	ldr	r3, [r4, #16]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	6123      	str	r3, [r4, #16]
 800a71e:	e7f1      	b.n	800a704 <_scanf_float+0x300>
 800a720:	46aa      	mov	sl, r5
 800a722:	9602      	str	r6, [sp, #8]
 800a724:	e7df      	b.n	800a6e6 <_scanf_float+0x2e2>
 800a726:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	2965      	cmp	r1, #101	; 0x65
 800a72e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a732:	f106 35ff 	add.w	r5, r6, #4294967295
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	d00c      	beq.n	800a754 <_scanf_float+0x350>
 800a73a:	2945      	cmp	r1, #69	; 0x45
 800a73c:	d00a      	beq.n	800a754 <_scanf_float+0x350>
 800a73e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a742:	463a      	mov	r2, r7
 800a744:	4640      	mov	r0, r8
 800a746:	4798      	blx	r3
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a74e:	3b01      	subs	r3, #1
 800a750:	1eb5      	subs	r5, r6, #2
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	463a      	mov	r2, r7
 800a756:	4640      	mov	r0, r8
 800a758:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a75c:	4798      	blx	r3
 800a75e:	462e      	mov	r6, r5
 800a760:	6825      	ldr	r5, [r4, #0]
 800a762:	f015 0510 	ands.w	r5, r5, #16
 800a766:	d155      	bne.n	800a814 <_scanf_float+0x410>
 800a768:	7035      	strb	r5, [r6, #0]
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a774:	d11b      	bne.n	800a7ae <_scanf_float+0x3aa>
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	454b      	cmp	r3, r9
 800a77a:	eba3 0209 	sub.w	r2, r3, r9
 800a77e:	d123      	bne.n	800a7c8 <_scanf_float+0x3c4>
 800a780:	2200      	movs	r2, #0
 800a782:	4659      	mov	r1, fp
 800a784:	4640      	mov	r0, r8
 800a786:	f000 ff1b 	bl	800b5c0 <_strtod_r>
 800a78a:	6822      	ldr	r2, [r4, #0]
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	f012 0f02 	tst.w	r2, #2
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	d021      	beq.n	800a7de <_scanf_float+0x3da>
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	9903      	ldr	r1, [sp, #12]
 800a79e:	600a      	str	r2, [r1, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	e9c3 6700 	strd	r6, r7, [r3]
 800a7a6:	68e3      	ldr	r3, [r4, #12]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	60e3      	str	r3, [r4, #12]
 800a7ac:	e66d      	b.n	800a48a <_scanf_float+0x86>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0e5      	beq.n	800a780 <_scanf_float+0x37c>
 800a7b4:	9905      	ldr	r1, [sp, #20]
 800a7b6:	230a      	movs	r3, #10
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	3101      	adds	r1, #1
 800a7be:	f000 ffdd 	bl	800b77c <_strtol_r>
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	9e05      	ldr	r6, [sp, #20]
 800a7c6:	1ac2      	subs	r2, r0, r3
 800a7c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a7cc:	429e      	cmp	r6, r3
 800a7ce:	bf28      	it	cs
 800a7d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	4910      	ldr	r1, [pc, #64]	; (800a818 <_scanf_float+0x414>)
 800a7d8:	f000 f8c8 	bl	800a96c <siprintf>
 800a7dc:	e7d0      	b.n	800a780 <_scanf_float+0x37c>
 800a7de:	f012 0f04 	tst.w	r2, #4
 800a7e2:	f103 0204 	add.w	r2, r3, #4
 800a7e6:	d1d9      	bne.n	800a79c <_scanf_float+0x398>
 800a7e8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a7ec:	f8cc 2000 	str.w	r2, [ip]
 800a7f0:	f8d3 8000 	ldr.w	r8, [r3]
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	f7f6 fa32 	bl	8000c60 <__aeabi_dcmpun>
 800a7fc:	b128      	cbz	r0, 800a80a <_scanf_float+0x406>
 800a7fe:	4807      	ldr	r0, [pc, #28]	; (800a81c <_scanf_float+0x418>)
 800a800:	f000 f8b0 	bl	800a964 <nanf>
 800a804:	f8c8 0000 	str.w	r0, [r8]
 800a808:	e7cd      	b.n	800a7a6 <_scanf_float+0x3a2>
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f6 fa85 	bl	8000d1c <__aeabi_d2f>
 800a812:	e7f7      	b.n	800a804 <_scanf_float+0x400>
 800a814:	2500      	movs	r5, #0
 800a816:	e638      	b.n	800a48a <_scanf_float+0x86>
 800a818:	0800e784 	.word	0x0800e784
 800a81c:	0800e88f 	.word	0x0800e88f

0800a820 <iprintf>:
 800a820:	b40f      	push	{r0, r1, r2, r3}
 800a822:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <iprintf+0x2c>)
 800a824:	b513      	push	{r0, r1, r4, lr}
 800a826:	681c      	ldr	r4, [r3, #0]
 800a828:	b124      	cbz	r4, 800a834 <iprintf+0x14>
 800a82a:	69a3      	ldr	r3, [r4, #24]
 800a82c:	b913      	cbnz	r3, 800a834 <iprintf+0x14>
 800a82e:	4620      	mov	r0, r4
 800a830:	f002 f81e 	bl	800c870 <__sinit>
 800a834:	ab05      	add	r3, sp, #20
 800a836:	4620      	mov	r0, r4
 800a838:	9a04      	ldr	r2, [sp, #16]
 800a83a:	68a1      	ldr	r1, [r4, #8]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	f003 fbed 	bl	800e01c <_vfiprintf_r>
 800a842:	b002      	add	sp, #8
 800a844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a848:	b004      	add	sp, #16
 800a84a:	4770      	bx	lr
 800a84c:	20000614 	.word	0x20000614

0800a850 <putchar>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4b08      	ldr	r3, [pc, #32]	; (800a874 <putchar+0x24>)
 800a854:	4605      	mov	r5, r0
 800a856:	681c      	ldr	r4, [r3, #0]
 800a858:	b124      	cbz	r4, 800a864 <putchar+0x14>
 800a85a:	69a3      	ldr	r3, [r4, #24]
 800a85c:	b913      	cbnz	r3, 800a864 <putchar+0x14>
 800a85e:	4620      	mov	r0, r4
 800a860:	f002 f806 	bl	800c870 <__sinit>
 800a864:	4629      	mov	r1, r5
 800a866:	4620      	mov	r0, r4
 800a868:	68a2      	ldr	r2, [r4, #8]
 800a86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a86e:	f003 bd05 	b.w	800e27c <_putc_r>
 800a872:	bf00      	nop
 800a874:	20000614 	.word	0x20000614

0800a878 <_puts_r>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	460e      	mov	r6, r1
 800a87c:	4605      	mov	r5, r0
 800a87e:	b118      	cbz	r0, 800a888 <_puts_r+0x10>
 800a880:	6983      	ldr	r3, [r0, #24]
 800a882:	b90b      	cbnz	r3, 800a888 <_puts_r+0x10>
 800a884:	f001 fff4 	bl	800c870 <__sinit>
 800a888:	69ab      	ldr	r3, [r5, #24]
 800a88a:	68ac      	ldr	r4, [r5, #8]
 800a88c:	b913      	cbnz	r3, 800a894 <_puts_r+0x1c>
 800a88e:	4628      	mov	r0, r5
 800a890:	f001 ffee 	bl	800c870 <__sinit>
 800a894:	4b2c      	ldr	r3, [pc, #176]	; (800a948 <_puts_r+0xd0>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d120      	bne.n	800a8dc <_puts_r+0x64>
 800a89a:	686c      	ldr	r4, [r5, #4]
 800a89c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a89e:	07db      	lsls	r3, r3, #31
 800a8a0:	d405      	bmi.n	800a8ae <_puts_r+0x36>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	0598      	lsls	r0, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_puts_r+0x36>
 800a8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8aa:	f002 fbfc 	bl	800d0a6 <__retarget_lock_acquire_recursive>
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	0719      	lsls	r1, r3, #28
 800a8b2:	d51d      	bpl.n	800a8f0 <_puts_r+0x78>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	b1db      	cbz	r3, 800a8f0 <_puts_r+0x78>
 800a8b8:	3e01      	subs	r6, #1
 800a8ba:	68a3      	ldr	r3, [r4, #8]
 800a8bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	bb39      	cbnz	r1, 800a916 <_puts_r+0x9e>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	da38      	bge.n	800a93c <_puts_r+0xc4>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	210a      	movs	r1, #10
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f000 ff60 	bl	800b794 <__swbuf_r>
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d011      	beq.n	800a8fc <_puts_r+0x84>
 800a8d8:	250a      	movs	r5, #10
 800a8da:	e011      	b.n	800a900 <_puts_r+0x88>
 800a8dc:	4b1b      	ldr	r3, [pc, #108]	; (800a94c <_puts_r+0xd4>)
 800a8de:	429c      	cmp	r4, r3
 800a8e0:	d101      	bne.n	800a8e6 <_puts_r+0x6e>
 800a8e2:	68ac      	ldr	r4, [r5, #8]
 800a8e4:	e7da      	b.n	800a89c <_puts_r+0x24>
 800a8e6:	4b1a      	ldr	r3, [pc, #104]	; (800a950 <_puts_r+0xd8>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	bf08      	it	eq
 800a8ec:	68ec      	ldreq	r4, [r5, #12]
 800a8ee:	e7d5      	b.n	800a89c <_puts_r+0x24>
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 ffa0 	bl	800b838 <__swsetup_r>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d0dd      	beq.n	800a8b8 <_puts_r+0x40>
 800a8fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a902:	07da      	lsls	r2, r3, #31
 800a904:	d405      	bmi.n	800a912 <_puts_r+0x9a>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	059b      	lsls	r3, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_puts_r+0x9a>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f002 fbcb 	bl	800d0a8 <__retarget_lock_release_recursive>
 800a912:	4628      	mov	r0, r5
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	2b00      	cmp	r3, #0
 800a918:	da04      	bge.n	800a924 <_puts_r+0xac>
 800a91a:	69a2      	ldr	r2, [r4, #24]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	dc06      	bgt.n	800a92e <_puts_r+0xb6>
 800a920:	290a      	cmp	r1, #10
 800a922:	d004      	beq.n	800a92e <_puts_r+0xb6>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	6022      	str	r2, [r4, #0]
 800a92a:	7019      	strb	r1, [r3, #0]
 800a92c:	e7c5      	b.n	800a8ba <_puts_r+0x42>
 800a92e:	4622      	mov	r2, r4
 800a930:	4628      	mov	r0, r5
 800a932:	f000 ff2f 	bl	800b794 <__swbuf_r>
 800a936:	3001      	adds	r0, #1
 800a938:	d1bf      	bne.n	800a8ba <_puts_r+0x42>
 800a93a:	e7df      	b.n	800a8fc <_puts_r+0x84>
 800a93c:	250a      	movs	r5, #10
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	6022      	str	r2, [r4, #0]
 800a944:	701d      	strb	r5, [r3, #0]
 800a946:	e7db      	b.n	800a900 <_puts_r+0x88>
 800a948:	0800ea2c 	.word	0x0800ea2c
 800a94c:	0800ea4c 	.word	0x0800ea4c
 800a950:	0800ea0c 	.word	0x0800ea0c

0800a954 <puts>:
 800a954:	4b02      	ldr	r3, [pc, #8]	; (800a960 <puts+0xc>)
 800a956:	4601      	mov	r1, r0
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f7ff bf8d 	b.w	800a878 <_puts_r>
 800a95e:	bf00      	nop
 800a960:	20000614 	.word	0x20000614

0800a964 <nanf>:
 800a964:	4800      	ldr	r0, [pc, #0]	; (800a968 <nanf+0x4>)
 800a966:	4770      	bx	lr
 800a968:	7fc00000 	.word	0x7fc00000

0800a96c <siprintf>:
 800a96c:	b40e      	push	{r1, r2, r3}
 800a96e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a972:	b500      	push	{lr}
 800a974:	b09c      	sub	sp, #112	; 0x70
 800a976:	ab1d      	add	r3, sp, #116	; 0x74
 800a978:	9002      	str	r0, [sp, #8]
 800a97a:	9006      	str	r0, [sp, #24]
 800a97c:	9107      	str	r1, [sp, #28]
 800a97e:	9104      	str	r1, [sp, #16]
 800a980:	4808      	ldr	r0, [pc, #32]	; (800a9a4 <siprintf+0x38>)
 800a982:	4909      	ldr	r1, [pc, #36]	; (800a9a8 <siprintf+0x3c>)
 800a984:	f853 2b04 	ldr.w	r2, [r3], #4
 800a988:	9105      	str	r1, [sp, #20]
 800a98a:	6800      	ldr	r0, [r0, #0]
 800a98c:	a902      	add	r1, sp, #8
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	f003 fa1c 	bl	800ddcc <_svfiprintf_r>
 800a994:	2200      	movs	r2, #0
 800a996:	9b02      	ldr	r3, [sp, #8]
 800a998:	701a      	strb	r2, [r3, #0]
 800a99a:	b01c      	add	sp, #112	; 0x70
 800a99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9a0:	b003      	add	sp, #12
 800a9a2:	4770      	bx	lr
 800a9a4:	20000614 	.word	0x20000614
 800a9a8:	ffff0208 	.word	0xffff0208

0800a9ac <sulp>:
 800a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b0:	460f      	mov	r7, r1
 800a9b2:	4690      	mov	r8, r2
 800a9b4:	f002 ff76 	bl	800d8a4 <__ulp>
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	f1b8 0f00 	cmp.w	r8, #0
 800a9c0:	d011      	beq.n	800a9e6 <sulp+0x3a>
 800a9c2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a9c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	dd0b      	ble.n	800a9e6 <sulp+0x3a>
 800a9ce:	2400      	movs	r4, #0
 800a9d0:	051b      	lsls	r3, r3, #20
 800a9d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a9d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a9da:	4622      	mov	r2, r4
 800a9dc:	462b      	mov	r3, r5
 800a9de:	f7f5 fea5 	bl	800072c <__aeabi_dmul>
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a9f0 <_strtod_l>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	469b      	mov	fp, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	b09f      	sub	sp, #124	; 0x7c
 800a9fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a9fc:	4b9e      	ldr	r3, [pc, #632]	; (800ac78 <_strtod_l+0x288>)
 800a9fe:	4682      	mov	sl, r0
 800aa00:	681f      	ldr	r7, [r3, #0]
 800aa02:	460e      	mov	r6, r1
 800aa04:	4638      	mov	r0, r7
 800aa06:	9215      	str	r2, [sp, #84]	; 0x54
 800aa08:	f7f5 fc18 	bl	800023c <strlen>
 800aa0c:	f04f 0800 	mov.w	r8, #0
 800aa10:	4604      	mov	r4, r0
 800aa12:	f04f 0900 	mov.w	r9, #0
 800aa16:	9619      	str	r6, [sp, #100]	; 0x64
 800aa18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa1a:	781a      	ldrb	r2, [r3, #0]
 800aa1c:	2a2b      	cmp	r2, #43	; 0x2b
 800aa1e:	d04c      	beq.n	800aaba <_strtod_l+0xca>
 800aa20:	d83a      	bhi.n	800aa98 <_strtod_l+0xa8>
 800aa22:	2a0d      	cmp	r2, #13
 800aa24:	d833      	bhi.n	800aa8e <_strtod_l+0x9e>
 800aa26:	2a08      	cmp	r2, #8
 800aa28:	d833      	bhi.n	800aa92 <_strtod_l+0xa2>
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d03d      	beq.n	800aaaa <_strtod_l+0xba>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	930a      	str	r3, [sp, #40]	; 0x28
 800aa32:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa34:	782b      	ldrb	r3, [r5, #0]
 800aa36:	2b30      	cmp	r3, #48	; 0x30
 800aa38:	f040 80aa 	bne.w	800ab90 <_strtod_l+0x1a0>
 800aa3c:	786b      	ldrb	r3, [r5, #1]
 800aa3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa42:	2b58      	cmp	r3, #88	; 0x58
 800aa44:	d166      	bne.n	800ab14 <_strtod_l+0x124>
 800aa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa48:	4650      	mov	r0, sl
 800aa4a:	9301      	str	r3, [sp, #4]
 800aa4c:	ab1a      	add	r3, sp, #104	; 0x68
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	4a8a      	ldr	r2, [pc, #552]	; (800ac7c <_strtod_l+0x28c>)
 800aa52:	f8cd b008 	str.w	fp, [sp, #8]
 800aa56:	ab1b      	add	r3, sp, #108	; 0x6c
 800aa58:	a919      	add	r1, sp, #100	; 0x64
 800aa5a:	f002 f821 	bl	800caa0 <__gethex>
 800aa5e:	f010 0607 	ands.w	r6, r0, #7
 800aa62:	4604      	mov	r4, r0
 800aa64:	d005      	beq.n	800aa72 <_strtod_l+0x82>
 800aa66:	2e06      	cmp	r6, #6
 800aa68:	d129      	bne.n	800aabe <_strtod_l+0xce>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	9519      	str	r5, [sp, #100]	; 0x64
 800aa70:	930a      	str	r3, [sp, #40]	; 0x28
 800aa72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f040 858a 	bne.w	800b58e <_strtod_l+0xb9e>
 800aa7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7c:	b1d3      	cbz	r3, 800aab4 <_strtod_l+0xc4>
 800aa7e:	4642      	mov	r2, r8
 800aa80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa84:	4610      	mov	r0, r2
 800aa86:	4619      	mov	r1, r3
 800aa88:	b01f      	add	sp, #124	; 0x7c
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	2a20      	cmp	r2, #32
 800aa90:	d1cd      	bne.n	800aa2e <_strtod_l+0x3e>
 800aa92:	3301      	adds	r3, #1
 800aa94:	9319      	str	r3, [sp, #100]	; 0x64
 800aa96:	e7bf      	b.n	800aa18 <_strtod_l+0x28>
 800aa98:	2a2d      	cmp	r2, #45	; 0x2d
 800aa9a:	d1c8      	bne.n	800aa2e <_strtod_l+0x3e>
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	920a      	str	r2, [sp, #40]	; 0x28
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	9219      	str	r2, [sp, #100]	; 0x64
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1c3      	bne.n	800aa32 <_strtod_l+0x42>
 800aaaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaac:	9619      	str	r6, [sp, #100]	; 0x64
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 856b 	bne.w	800b58a <_strtod_l+0xb9a>
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	e7e4      	b.n	800aa84 <_strtod_l+0x94>
 800aaba:	2200      	movs	r2, #0
 800aabc:	e7ef      	b.n	800aa9e <_strtod_l+0xae>
 800aabe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aac0:	b13a      	cbz	r2, 800aad2 <_strtod_l+0xe2>
 800aac2:	2135      	movs	r1, #53	; 0x35
 800aac4:	a81c      	add	r0, sp, #112	; 0x70
 800aac6:	f002 fff1 	bl	800daac <__copybits>
 800aaca:	4650      	mov	r0, sl
 800aacc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aace:	f002 fbb9 	bl	800d244 <_Bfree>
 800aad2:	3e01      	subs	r6, #1
 800aad4:	2e04      	cmp	r6, #4
 800aad6:	d806      	bhi.n	800aae6 <_strtod_l+0xf6>
 800aad8:	e8df f006 	tbb	[pc, r6]
 800aadc:	1714030a 	.word	0x1714030a
 800aae0:	0a          	.byte	0x0a
 800aae1:	00          	.byte	0x00
 800aae2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800aae6:	0721      	lsls	r1, r4, #28
 800aae8:	d5c3      	bpl.n	800aa72 <_strtod_l+0x82>
 800aaea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800aaee:	e7c0      	b.n	800aa72 <_strtod_l+0x82>
 800aaf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aaf2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800aaf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aafa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aafe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ab02:	e7f0      	b.n	800aae6 <_strtod_l+0xf6>
 800ab04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ac80 <_strtod_l+0x290>
 800ab08:	e7ed      	b.n	800aae6 <_strtod_l+0xf6>
 800ab0a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ab0e:	f04f 38ff 	mov.w	r8, #4294967295
 800ab12:	e7e8      	b.n	800aae6 <_strtod_l+0xf6>
 800ab14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab16:	1c5a      	adds	r2, r3, #1
 800ab18:	9219      	str	r2, [sp, #100]	; 0x64
 800ab1a:	785b      	ldrb	r3, [r3, #1]
 800ab1c:	2b30      	cmp	r3, #48	; 0x30
 800ab1e:	d0f9      	beq.n	800ab14 <_strtod_l+0x124>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0a6      	beq.n	800aa72 <_strtod_l+0x82>
 800ab24:	2301      	movs	r3, #1
 800ab26:	9307      	str	r3, [sp, #28]
 800ab28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab2a:	220a      	movs	r2, #10
 800ab2c:	9308      	str	r3, [sp, #32]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	469b      	mov	fp, r3
 800ab32:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ab36:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ab38:	7805      	ldrb	r5, [r0, #0]
 800ab3a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ab3e:	b2d9      	uxtb	r1, r3
 800ab40:	2909      	cmp	r1, #9
 800ab42:	d927      	bls.n	800ab94 <_strtod_l+0x1a4>
 800ab44:	4622      	mov	r2, r4
 800ab46:	4639      	mov	r1, r7
 800ab48:	f003 fc39 	bl	800e3be <strncmp>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d033      	beq.n	800abb8 <_strtod_l+0x1c8>
 800ab50:	2000      	movs	r0, #0
 800ab52:	462a      	mov	r2, r5
 800ab54:	465c      	mov	r4, fp
 800ab56:	4603      	mov	r3, r0
 800ab58:	9004      	str	r0, [sp, #16]
 800ab5a:	2a65      	cmp	r2, #101	; 0x65
 800ab5c:	d001      	beq.n	800ab62 <_strtod_l+0x172>
 800ab5e:	2a45      	cmp	r2, #69	; 0x45
 800ab60:	d114      	bne.n	800ab8c <_strtod_l+0x19c>
 800ab62:	b91c      	cbnz	r4, 800ab6c <_strtod_l+0x17c>
 800ab64:	9a07      	ldr	r2, [sp, #28]
 800ab66:	4302      	orrs	r2, r0
 800ab68:	d09f      	beq.n	800aaaa <_strtod_l+0xba>
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ab6e:	1c72      	adds	r2, r6, #1
 800ab70:	9219      	str	r2, [sp, #100]	; 0x64
 800ab72:	7872      	ldrb	r2, [r6, #1]
 800ab74:	2a2b      	cmp	r2, #43	; 0x2b
 800ab76:	d079      	beq.n	800ac6c <_strtod_l+0x27c>
 800ab78:	2a2d      	cmp	r2, #45	; 0x2d
 800ab7a:	f000 8083 	beq.w	800ac84 <_strtod_l+0x294>
 800ab7e:	2700      	movs	r7, #0
 800ab80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab84:	2909      	cmp	r1, #9
 800ab86:	f240 8083 	bls.w	800ac90 <_strtod_l+0x2a0>
 800ab8a:	9619      	str	r6, [sp, #100]	; 0x64
 800ab8c:	2500      	movs	r5, #0
 800ab8e:	e09f      	b.n	800acd0 <_strtod_l+0x2e0>
 800ab90:	2300      	movs	r3, #0
 800ab92:	e7c8      	b.n	800ab26 <_strtod_l+0x136>
 800ab94:	f1bb 0f08 	cmp.w	fp, #8
 800ab98:	bfd5      	itete	le
 800ab9a:	9906      	ldrle	r1, [sp, #24]
 800ab9c:	9905      	ldrgt	r1, [sp, #20]
 800ab9e:	fb02 3301 	mlale	r3, r2, r1, r3
 800aba2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aba6:	f100 0001 	add.w	r0, r0, #1
 800abaa:	bfd4      	ite	le
 800abac:	9306      	strle	r3, [sp, #24]
 800abae:	9305      	strgt	r3, [sp, #20]
 800abb0:	f10b 0b01 	add.w	fp, fp, #1
 800abb4:	9019      	str	r0, [sp, #100]	; 0x64
 800abb6:	e7be      	b.n	800ab36 <_strtod_l+0x146>
 800abb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abba:	191a      	adds	r2, r3, r4
 800abbc:	9219      	str	r2, [sp, #100]	; 0x64
 800abbe:	5d1a      	ldrb	r2, [r3, r4]
 800abc0:	f1bb 0f00 	cmp.w	fp, #0
 800abc4:	d036      	beq.n	800ac34 <_strtod_l+0x244>
 800abc6:	465c      	mov	r4, fp
 800abc8:	9004      	str	r0, [sp, #16]
 800abca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800abce:	2b09      	cmp	r3, #9
 800abd0:	d912      	bls.n	800abf8 <_strtod_l+0x208>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e7c1      	b.n	800ab5a <_strtod_l+0x16a>
 800abd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abd8:	3001      	adds	r0, #1
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	9219      	str	r2, [sp, #100]	; 0x64
 800abde:	785a      	ldrb	r2, [r3, #1]
 800abe0:	2a30      	cmp	r2, #48	; 0x30
 800abe2:	d0f8      	beq.n	800abd6 <_strtod_l+0x1e6>
 800abe4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800abe8:	2b08      	cmp	r3, #8
 800abea:	f200 84d5 	bhi.w	800b598 <_strtod_l+0xba8>
 800abee:	9004      	str	r0, [sp, #16]
 800abf0:	2000      	movs	r0, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abf6:	9308      	str	r3, [sp, #32]
 800abf8:	3a30      	subs	r2, #48	; 0x30
 800abfa:	f100 0301 	add.w	r3, r0, #1
 800abfe:	d013      	beq.n	800ac28 <_strtod_l+0x238>
 800ac00:	9904      	ldr	r1, [sp, #16]
 800ac02:	1905      	adds	r5, r0, r4
 800ac04:	4419      	add	r1, r3
 800ac06:	9104      	str	r1, [sp, #16]
 800ac08:	4623      	mov	r3, r4
 800ac0a:	210a      	movs	r1, #10
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	d113      	bne.n	800ac38 <_strtod_l+0x248>
 800ac10:	1823      	adds	r3, r4, r0
 800ac12:	2b08      	cmp	r3, #8
 800ac14:	f104 0401 	add.w	r4, r4, #1
 800ac18:	4404      	add	r4, r0
 800ac1a:	dc1b      	bgt.n	800ac54 <_strtod_l+0x264>
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	9906      	ldr	r1, [sp, #24]
 800ac20:	fb03 2301 	mla	r3, r3, r1, r2
 800ac24:	9306      	str	r3, [sp, #24]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	1c51      	adds	r1, r2, #1
 800ac2e:	9119      	str	r1, [sp, #100]	; 0x64
 800ac30:	7852      	ldrb	r2, [r2, #1]
 800ac32:	e7ca      	b.n	800abca <_strtod_l+0x1da>
 800ac34:	4658      	mov	r0, fp
 800ac36:	e7d3      	b.n	800abe0 <_strtod_l+0x1f0>
 800ac38:	2b08      	cmp	r3, #8
 800ac3a:	dc04      	bgt.n	800ac46 <_strtod_l+0x256>
 800ac3c:	9f06      	ldr	r7, [sp, #24]
 800ac3e:	434f      	muls	r7, r1
 800ac40:	9706      	str	r7, [sp, #24]
 800ac42:	3301      	adds	r3, #1
 800ac44:	e7e2      	b.n	800ac0c <_strtod_l+0x21c>
 800ac46:	1c5f      	adds	r7, r3, #1
 800ac48:	2f10      	cmp	r7, #16
 800ac4a:	bfde      	ittt	le
 800ac4c:	9f05      	ldrle	r7, [sp, #20]
 800ac4e:	434f      	mulle	r7, r1
 800ac50:	9705      	strle	r7, [sp, #20]
 800ac52:	e7f6      	b.n	800ac42 <_strtod_l+0x252>
 800ac54:	2c10      	cmp	r4, #16
 800ac56:	bfdf      	itttt	le
 800ac58:	230a      	movle	r3, #10
 800ac5a:	9905      	ldrle	r1, [sp, #20]
 800ac5c:	fb03 2301 	mlale	r3, r3, r1, r2
 800ac60:	9305      	strle	r3, [sp, #20]
 800ac62:	e7e0      	b.n	800ac26 <_strtod_l+0x236>
 800ac64:	2300      	movs	r3, #0
 800ac66:	9304      	str	r3, [sp, #16]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e77b      	b.n	800ab64 <_strtod_l+0x174>
 800ac6c:	2700      	movs	r7, #0
 800ac6e:	1cb2      	adds	r2, r6, #2
 800ac70:	9219      	str	r2, [sp, #100]	; 0x64
 800ac72:	78b2      	ldrb	r2, [r6, #2]
 800ac74:	e784      	b.n	800ab80 <_strtod_l+0x190>
 800ac76:	bf00      	nop
 800ac78:	0800ead4 	.word	0x0800ead4
 800ac7c:	0800e78c 	.word	0x0800e78c
 800ac80:	7ff00000 	.word	0x7ff00000
 800ac84:	2701      	movs	r7, #1
 800ac86:	e7f2      	b.n	800ac6e <_strtod_l+0x27e>
 800ac88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac8a:	1c51      	adds	r1, r2, #1
 800ac8c:	9119      	str	r1, [sp, #100]	; 0x64
 800ac8e:	7852      	ldrb	r2, [r2, #1]
 800ac90:	2a30      	cmp	r2, #48	; 0x30
 800ac92:	d0f9      	beq.n	800ac88 <_strtod_l+0x298>
 800ac94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ac98:	2908      	cmp	r1, #8
 800ac9a:	f63f af77 	bhi.w	800ab8c <_strtod_l+0x19c>
 800ac9e:	f04f 0e0a 	mov.w	lr, #10
 800aca2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800aca6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aca8:	9209      	str	r2, [sp, #36]	; 0x24
 800acaa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acac:	1c51      	adds	r1, r2, #1
 800acae:	9119      	str	r1, [sp, #100]	; 0x64
 800acb0:	7852      	ldrb	r2, [r2, #1]
 800acb2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800acb6:	2d09      	cmp	r5, #9
 800acb8:	d935      	bls.n	800ad26 <_strtod_l+0x336>
 800acba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acbc:	1b49      	subs	r1, r1, r5
 800acbe:	2908      	cmp	r1, #8
 800acc0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800acc4:	dc02      	bgt.n	800accc <_strtod_l+0x2dc>
 800acc6:	4565      	cmp	r5, ip
 800acc8:	bfa8      	it	ge
 800acca:	4665      	movge	r5, ip
 800accc:	b107      	cbz	r7, 800acd0 <_strtod_l+0x2e0>
 800acce:	426d      	negs	r5, r5
 800acd0:	2c00      	cmp	r4, #0
 800acd2:	d14c      	bne.n	800ad6e <_strtod_l+0x37e>
 800acd4:	9907      	ldr	r1, [sp, #28]
 800acd6:	4301      	orrs	r1, r0
 800acd8:	f47f aecb 	bne.w	800aa72 <_strtod_l+0x82>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f47f aee4 	bne.w	800aaaa <_strtod_l+0xba>
 800ace2:	2a69      	cmp	r2, #105	; 0x69
 800ace4:	d026      	beq.n	800ad34 <_strtod_l+0x344>
 800ace6:	dc23      	bgt.n	800ad30 <_strtod_l+0x340>
 800ace8:	2a49      	cmp	r2, #73	; 0x49
 800acea:	d023      	beq.n	800ad34 <_strtod_l+0x344>
 800acec:	2a4e      	cmp	r2, #78	; 0x4e
 800acee:	f47f aedc 	bne.w	800aaaa <_strtod_l+0xba>
 800acf2:	499d      	ldr	r1, [pc, #628]	; (800af68 <_strtod_l+0x578>)
 800acf4:	a819      	add	r0, sp, #100	; 0x64
 800acf6:	f002 f921 	bl	800cf3c <__match>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f aed5 	beq.w	800aaaa <_strtod_l+0xba>
 800ad00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b28      	cmp	r3, #40	; 0x28
 800ad06:	d12c      	bne.n	800ad62 <_strtod_l+0x372>
 800ad08:	4998      	ldr	r1, [pc, #608]	; (800af6c <_strtod_l+0x57c>)
 800ad0a:	aa1c      	add	r2, sp, #112	; 0x70
 800ad0c:	a819      	add	r0, sp, #100	; 0x64
 800ad0e:	f002 f929 	bl	800cf64 <__hexnan>
 800ad12:	2805      	cmp	r0, #5
 800ad14:	d125      	bne.n	800ad62 <_strtod_l+0x372>
 800ad16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ad1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ad20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ad24:	e6a5      	b.n	800aa72 <_strtod_l+0x82>
 800ad26:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ad2a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ad2e:	e7bc      	b.n	800acaa <_strtod_l+0x2ba>
 800ad30:	2a6e      	cmp	r2, #110	; 0x6e
 800ad32:	e7dc      	b.n	800acee <_strtod_l+0x2fe>
 800ad34:	498e      	ldr	r1, [pc, #568]	; (800af70 <_strtod_l+0x580>)
 800ad36:	a819      	add	r0, sp, #100	; 0x64
 800ad38:	f002 f900 	bl	800cf3c <__match>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f43f aeb4 	beq.w	800aaaa <_strtod_l+0xba>
 800ad42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad44:	498b      	ldr	r1, [pc, #556]	; (800af74 <_strtod_l+0x584>)
 800ad46:	3b01      	subs	r3, #1
 800ad48:	a819      	add	r0, sp, #100	; 0x64
 800ad4a:	9319      	str	r3, [sp, #100]	; 0x64
 800ad4c:	f002 f8f6 	bl	800cf3c <__match>
 800ad50:	b910      	cbnz	r0, 800ad58 <_strtod_l+0x368>
 800ad52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad54:	3301      	adds	r3, #1
 800ad56:	9319      	str	r3, [sp, #100]	; 0x64
 800ad58:	f04f 0800 	mov.w	r8, #0
 800ad5c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800af78 <_strtod_l+0x588>
 800ad60:	e687      	b.n	800aa72 <_strtod_l+0x82>
 800ad62:	4886      	ldr	r0, [pc, #536]	; (800af7c <_strtod_l+0x58c>)
 800ad64:	f003 fad2 	bl	800e30c <nan>
 800ad68:	4680      	mov	r8, r0
 800ad6a:	4689      	mov	r9, r1
 800ad6c:	e681      	b.n	800aa72 <_strtod_l+0x82>
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	f1bb 0f00 	cmp.w	fp, #0
 800ad74:	bf08      	it	eq
 800ad76:	46a3      	moveq	fp, r4
 800ad78:	1aeb      	subs	r3, r5, r3
 800ad7a:	2c10      	cmp	r4, #16
 800ad7c:	9806      	ldr	r0, [sp, #24]
 800ad7e:	4626      	mov	r6, r4
 800ad80:	9307      	str	r3, [sp, #28]
 800ad82:	bfa8      	it	ge
 800ad84:	2610      	movge	r6, #16
 800ad86:	f7f5 fc57 	bl	8000638 <__aeabi_ui2d>
 800ad8a:	2c09      	cmp	r4, #9
 800ad8c:	4680      	mov	r8, r0
 800ad8e:	4689      	mov	r9, r1
 800ad90:	dd13      	ble.n	800adba <_strtod_l+0x3ca>
 800ad92:	4b7b      	ldr	r3, [pc, #492]	; (800af80 <_strtod_l+0x590>)
 800ad94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad98:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad9c:	f7f5 fcc6 	bl	800072c <__aeabi_dmul>
 800ada0:	4680      	mov	r8, r0
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	4689      	mov	r9, r1
 800ada6:	f7f5 fc47 	bl	8000638 <__aeabi_ui2d>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4640      	mov	r0, r8
 800adb0:	4649      	mov	r1, r9
 800adb2:	f7f5 fb05 	bl	80003c0 <__adddf3>
 800adb6:	4680      	mov	r8, r0
 800adb8:	4689      	mov	r9, r1
 800adba:	2c0f      	cmp	r4, #15
 800adbc:	dc36      	bgt.n	800ae2c <_strtod_l+0x43c>
 800adbe:	9b07      	ldr	r3, [sp, #28]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f43f ae56 	beq.w	800aa72 <_strtod_l+0x82>
 800adc6:	dd22      	ble.n	800ae0e <_strtod_l+0x41e>
 800adc8:	2b16      	cmp	r3, #22
 800adca:	dc09      	bgt.n	800ade0 <_strtod_l+0x3f0>
 800adcc:	496c      	ldr	r1, [pc, #432]	; (800af80 <_strtod_l+0x590>)
 800adce:	4642      	mov	r2, r8
 800add0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800add4:	464b      	mov	r3, r9
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	f7f5 fca7 	bl	800072c <__aeabi_dmul>
 800adde:	e7c3      	b.n	800ad68 <_strtod_l+0x378>
 800ade0:	9a07      	ldr	r2, [sp, #28]
 800ade2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ade6:	4293      	cmp	r3, r2
 800ade8:	db20      	blt.n	800ae2c <_strtod_l+0x43c>
 800adea:	4d65      	ldr	r5, [pc, #404]	; (800af80 <_strtod_l+0x590>)
 800adec:	f1c4 040f 	rsb	r4, r4, #15
 800adf0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800adf4:	4642      	mov	r2, r8
 800adf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfa:	464b      	mov	r3, r9
 800adfc:	f7f5 fc96 	bl	800072c <__aeabi_dmul>
 800ae00:	9b07      	ldr	r3, [sp, #28]
 800ae02:	1b1c      	subs	r4, r3, r4
 800ae04:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ae08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae0c:	e7e5      	b.n	800adda <_strtod_l+0x3ea>
 800ae0e:	9b07      	ldr	r3, [sp, #28]
 800ae10:	3316      	adds	r3, #22
 800ae12:	db0b      	blt.n	800ae2c <_strtod_l+0x43c>
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	4640      	mov	r0, r8
 800ae18:	1b5d      	subs	r5, r3, r5
 800ae1a:	4b59      	ldr	r3, [pc, #356]	; (800af80 <_strtod_l+0x590>)
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae26:	f7f5 fdab 	bl	8000980 <__aeabi_ddiv>
 800ae2a:	e79d      	b.n	800ad68 <_strtod_l+0x378>
 800ae2c:	9b07      	ldr	r3, [sp, #28]
 800ae2e:	1ba6      	subs	r6, r4, r6
 800ae30:	441e      	add	r6, r3
 800ae32:	2e00      	cmp	r6, #0
 800ae34:	dd74      	ble.n	800af20 <_strtod_l+0x530>
 800ae36:	f016 030f 	ands.w	r3, r6, #15
 800ae3a:	d00a      	beq.n	800ae52 <_strtod_l+0x462>
 800ae3c:	4950      	ldr	r1, [pc, #320]	; (800af80 <_strtod_l+0x590>)
 800ae3e:	4642      	mov	r2, r8
 800ae40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae48:	464b      	mov	r3, r9
 800ae4a:	f7f5 fc6f 	bl	800072c <__aeabi_dmul>
 800ae4e:	4680      	mov	r8, r0
 800ae50:	4689      	mov	r9, r1
 800ae52:	f036 060f 	bics.w	r6, r6, #15
 800ae56:	d052      	beq.n	800aefe <_strtod_l+0x50e>
 800ae58:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ae5c:	dd27      	ble.n	800aeae <_strtod_l+0x4be>
 800ae5e:	f04f 0b00 	mov.w	fp, #0
 800ae62:	f8cd b010 	str.w	fp, [sp, #16]
 800ae66:	f8cd b020 	str.w	fp, [sp, #32]
 800ae6a:	f8cd b018 	str.w	fp, [sp, #24]
 800ae6e:	2322      	movs	r3, #34	; 0x22
 800ae70:	f04f 0800 	mov.w	r8, #0
 800ae74:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800af78 <_strtod_l+0x588>
 800ae78:	f8ca 3000 	str.w	r3, [sl]
 800ae7c:	9b08      	ldr	r3, [sp, #32]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f43f adf7 	beq.w	800aa72 <_strtod_l+0x82>
 800ae84:	4650      	mov	r0, sl
 800ae86:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ae88:	f002 f9dc 	bl	800d244 <_Bfree>
 800ae8c:	4650      	mov	r0, sl
 800ae8e:	9906      	ldr	r1, [sp, #24]
 800ae90:	f002 f9d8 	bl	800d244 <_Bfree>
 800ae94:	4650      	mov	r0, sl
 800ae96:	9904      	ldr	r1, [sp, #16]
 800ae98:	f002 f9d4 	bl	800d244 <_Bfree>
 800ae9c:	4650      	mov	r0, sl
 800ae9e:	9908      	ldr	r1, [sp, #32]
 800aea0:	f002 f9d0 	bl	800d244 <_Bfree>
 800aea4:	4659      	mov	r1, fp
 800aea6:	4650      	mov	r0, sl
 800aea8:	f002 f9cc 	bl	800d244 <_Bfree>
 800aeac:	e5e1      	b.n	800aa72 <_strtod_l+0x82>
 800aeae:	4b35      	ldr	r3, [pc, #212]	; (800af84 <_strtod_l+0x594>)
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	9305      	str	r3, [sp, #20]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	461f      	mov	r7, r3
 800aeba:	1136      	asrs	r6, r6, #4
 800aebc:	2e01      	cmp	r6, #1
 800aebe:	dc21      	bgt.n	800af04 <_strtod_l+0x514>
 800aec0:	b10b      	cbz	r3, 800aec6 <_strtod_l+0x4d6>
 800aec2:	4680      	mov	r8, r0
 800aec4:	4689      	mov	r9, r1
 800aec6:	4b2f      	ldr	r3, [pc, #188]	; (800af84 <_strtod_l+0x594>)
 800aec8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aecc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aed0:	4642      	mov	r2, r8
 800aed2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aed6:	464b      	mov	r3, r9
 800aed8:	f7f5 fc28 	bl	800072c <__aeabi_dmul>
 800aedc:	4b26      	ldr	r3, [pc, #152]	; (800af78 <_strtod_l+0x588>)
 800aede:	460a      	mov	r2, r1
 800aee0:	400b      	ands	r3, r1
 800aee2:	4929      	ldr	r1, [pc, #164]	; (800af88 <_strtod_l+0x598>)
 800aee4:	4680      	mov	r8, r0
 800aee6:	428b      	cmp	r3, r1
 800aee8:	d8b9      	bhi.n	800ae5e <_strtod_l+0x46e>
 800aeea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aeee:	428b      	cmp	r3, r1
 800aef0:	bf86      	itte	hi
 800aef2:	f04f 38ff 	movhi.w	r8, #4294967295
 800aef6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800af8c <_strtod_l+0x59c>
 800aefa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aefe:	2300      	movs	r3, #0
 800af00:	9305      	str	r3, [sp, #20]
 800af02:	e07f      	b.n	800b004 <_strtod_l+0x614>
 800af04:	07f2      	lsls	r2, r6, #31
 800af06:	d505      	bpl.n	800af14 <_strtod_l+0x524>
 800af08:	9b05      	ldr	r3, [sp, #20]
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 fc0d 	bl	800072c <__aeabi_dmul>
 800af12:	2301      	movs	r3, #1
 800af14:	9a05      	ldr	r2, [sp, #20]
 800af16:	3701      	adds	r7, #1
 800af18:	3208      	adds	r2, #8
 800af1a:	1076      	asrs	r6, r6, #1
 800af1c:	9205      	str	r2, [sp, #20]
 800af1e:	e7cd      	b.n	800aebc <_strtod_l+0x4cc>
 800af20:	d0ed      	beq.n	800aefe <_strtod_l+0x50e>
 800af22:	4276      	negs	r6, r6
 800af24:	f016 020f 	ands.w	r2, r6, #15
 800af28:	d00a      	beq.n	800af40 <_strtod_l+0x550>
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <_strtod_l+0x590>)
 800af2c:	4640      	mov	r0, r8
 800af2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af32:	4649      	mov	r1, r9
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 fd22 	bl	8000980 <__aeabi_ddiv>
 800af3c:	4680      	mov	r8, r0
 800af3e:	4689      	mov	r9, r1
 800af40:	1136      	asrs	r6, r6, #4
 800af42:	d0dc      	beq.n	800aefe <_strtod_l+0x50e>
 800af44:	2e1f      	cmp	r6, #31
 800af46:	dd23      	ble.n	800af90 <_strtod_l+0x5a0>
 800af48:	f04f 0b00 	mov.w	fp, #0
 800af4c:	f8cd b010 	str.w	fp, [sp, #16]
 800af50:	f8cd b020 	str.w	fp, [sp, #32]
 800af54:	f8cd b018 	str.w	fp, [sp, #24]
 800af58:	2322      	movs	r3, #34	; 0x22
 800af5a:	f04f 0800 	mov.w	r8, #0
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	f8ca 3000 	str.w	r3, [sl]
 800af66:	e789      	b.n	800ae7c <_strtod_l+0x48c>
 800af68:	0800e75d 	.word	0x0800e75d
 800af6c:	0800e7a0 	.word	0x0800e7a0
 800af70:	0800e755 	.word	0x0800e755
 800af74:	0800e994 	.word	0x0800e994
 800af78:	7ff00000 	.word	0x7ff00000
 800af7c:	0800e88f 	.word	0x0800e88f
 800af80:	0800eb70 	.word	0x0800eb70
 800af84:	0800eb48 	.word	0x0800eb48
 800af88:	7ca00000 	.word	0x7ca00000
 800af8c:	7fefffff 	.word	0x7fefffff
 800af90:	f016 0310 	ands.w	r3, r6, #16
 800af94:	bf18      	it	ne
 800af96:	236a      	movne	r3, #106	; 0x6a
 800af98:	4640      	mov	r0, r8
 800af9a:	9305      	str	r3, [sp, #20]
 800af9c:	4649      	mov	r1, r9
 800af9e:	2300      	movs	r3, #0
 800afa0:	4fb0      	ldr	r7, [pc, #704]	; (800b264 <_strtod_l+0x874>)
 800afa2:	07f2      	lsls	r2, r6, #31
 800afa4:	d504      	bpl.n	800afb0 <_strtod_l+0x5c0>
 800afa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afaa:	f7f5 fbbf 	bl	800072c <__aeabi_dmul>
 800afae:	2301      	movs	r3, #1
 800afb0:	1076      	asrs	r6, r6, #1
 800afb2:	f107 0708 	add.w	r7, r7, #8
 800afb6:	d1f4      	bne.n	800afa2 <_strtod_l+0x5b2>
 800afb8:	b10b      	cbz	r3, 800afbe <_strtod_l+0x5ce>
 800afba:	4680      	mov	r8, r0
 800afbc:	4689      	mov	r9, r1
 800afbe:	9b05      	ldr	r3, [sp, #20]
 800afc0:	b1c3      	cbz	r3, 800aff4 <_strtod_l+0x604>
 800afc2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800afc6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afca:	2b00      	cmp	r3, #0
 800afcc:	4649      	mov	r1, r9
 800afce:	dd11      	ble.n	800aff4 <_strtod_l+0x604>
 800afd0:	2b1f      	cmp	r3, #31
 800afd2:	f340 8127 	ble.w	800b224 <_strtod_l+0x834>
 800afd6:	2b34      	cmp	r3, #52	; 0x34
 800afd8:	bfd8      	it	le
 800afda:	f04f 33ff 	movle.w	r3, #4294967295
 800afde:	f04f 0800 	mov.w	r8, #0
 800afe2:	bfcf      	iteee	gt
 800afe4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800afe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800afec:	fa03 f202 	lslle.w	r2, r3, r2
 800aff0:	ea02 0901 	andle.w	r9, r2, r1
 800aff4:	2200      	movs	r2, #0
 800aff6:	2300      	movs	r3, #0
 800aff8:	4640      	mov	r0, r8
 800affa:	4649      	mov	r1, r9
 800affc:	f7f5 fdfe 	bl	8000bfc <__aeabi_dcmpeq>
 800b000:	2800      	cmp	r0, #0
 800b002:	d1a1      	bne.n	800af48 <_strtod_l+0x558>
 800b004:	9b06      	ldr	r3, [sp, #24]
 800b006:	465a      	mov	r2, fp
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4650      	mov	r0, sl
 800b00c:	4623      	mov	r3, r4
 800b00e:	9908      	ldr	r1, [sp, #32]
 800b010:	f002 f980 	bl	800d314 <__s2b>
 800b014:	9008      	str	r0, [sp, #32]
 800b016:	2800      	cmp	r0, #0
 800b018:	f43f af21 	beq.w	800ae5e <_strtod_l+0x46e>
 800b01c:	9b04      	ldr	r3, [sp, #16]
 800b01e:	f04f 0b00 	mov.w	fp, #0
 800b022:	1b5d      	subs	r5, r3, r5
 800b024:	9b07      	ldr	r3, [sp, #28]
 800b026:	f8cd b010 	str.w	fp, [sp, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	bfb4      	ite	lt
 800b02e:	462b      	movlt	r3, r5
 800b030:	2300      	movge	r3, #0
 800b032:	930e      	str	r3, [sp, #56]	; 0x38
 800b034:	9b07      	ldr	r3, [sp, #28]
 800b036:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b03a:	9314      	str	r3, [sp, #80]	; 0x50
 800b03c:	9b08      	ldr	r3, [sp, #32]
 800b03e:	4650      	mov	r0, sl
 800b040:	6859      	ldr	r1, [r3, #4]
 800b042:	f002 f8bf 	bl	800d1c4 <_Balloc>
 800b046:	9006      	str	r0, [sp, #24]
 800b048:	2800      	cmp	r0, #0
 800b04a:	f43f af10 	beq.w	800ae6e <_strtod_l+0x47e>
 800b04e:	9b08      	ldr	r3, [sp, #32]
 800b050:	300c      	adds	r0, #12
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	f103 010c 	add.w	r1, r3, #12
 800b058:	3202      	adds	r2, #2
 800b05a:	0092      	lsls	r2, r2, #2
 800b05c:	f7fe fd5c 	bl	8009b18 <memcpy>
 800b060:	ab1c      	add	r3, sp, #112	; 0x70
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	ab1b      	add	r3, sp, #108	; 0x6c
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	4642      	mov	r2, r8
 800b06a:	464b      	mov	r3, r9
 800b06c:	4650      	mov	r0, sl
 800b06e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b072:	f002 fc91 	bl	800d998 <__d2b>
 800b076:	901a      	str	r0, [sp, #104]	; 0x68
 800b078:	2800      	cmp	r0, #0
 800b07a:	f43f aef8 	beq.w	800ae6e <_strtod_l+0x47e>
 800b07e:	2101      	movs	r1, #1
 800b080:	4650      	mov	r0, sl
 800b082:	f002 f9df 	bl	800d444 <__i2b>
 800b086:	4603      	mov	r3, r0
 800b088:	9004      	str	r0, [sp, #16]
 800b08a:	2800      	cmp	r0, #0
 800b08c:	f43f aeef 	beq.w	800ae6e <_strtod_l+0x47e>
 800b090:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b092:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b094:	2d00      	cmp	r5, #0
 800b096:	bfab      	itete	ge
 800b098:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b09a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b09c:	18ee      	addge	r6, r5, r3
 800b09e:	1b5c      	sublt	r4, r3, r5
 800b0a0:	9b05      	ldr	r3, [sp, #20]
 800b0a2:	bfa8      	it	ge
 800b0a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b0a6:	eba5 0503 	sub.w	r5, r5, r3
 800b0aa:	4415      	add	r5, r2
 800b0ac:	4b6e      	ldr	r3, [pc, #440]	; (800b268 <_strtod_l+0x878>)
 800b0ae:	f105 35ff 	add.w	r5, r5, #4294967295
 800b0b2:	bfb8      	it	lt
 800b0b4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b0b6:	429d      	cmp	r5, r3
 800b0b8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0bc:	f280 80c4 	bge.w	800b248 <_strtod_l+0x858>
 800b0c0:	1b5b      	subs	r3, r3, r5
 800b0c2:	2b1f      	cmp	r3, #31
 800b0c4:	f04f 0701 	mov.w	r7, #1
 800b0c8:	eba2 0203 	sub.w	r2, r2, r3
 800b0cc:	f300 80b1 	bgt.w	800b232 <_strtod_l+0x842>
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	fa07 f303 	lsl.w	r3, r7, r3
 800b0d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0d8:	18b7      	adds	r7, r6, r2
 800b0da:	9b05      	ldr	r3, [sp, #20]
 800b0dc:	42be      	cmp	r6, r7
 800b0de:	4414      	add	r4, r2
 800b0e0:	441c      	add	r4, r3
 800b0e2:	4633      	mov	r3, r6
 800b0e4:	bfa8      	it	ge
 800b0e6:	463b      	movge	r3, r7
 800b0e8:	42a3      	cmp	r3, r4
 800b0ea:	bfa8      	it	ge
 800b0ec:	4623      	movge	r3, r4
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	bfc2      	ittt	gt
 800b0f2:	1aff      	subgt	r7, r7, r3
 800b0f4:	1ae4      	subgt	r4, r4, r3
 800b0f6:	1af6      	subgt	r6, r6, r3
 800b0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	dd17      	ble.n	800b12e <_strtod_l+0x73e>
 800b0fe:	461a      	mov	r2, r3
 800b100:	4650      	mov	r0, sl
 800b102:	9904      	ldr	r1, [sp, #16]
 800b104:	f002 fa5c 	bl	800d5c0 <__pow5mult>
 800b108:	9004      	str	r0, [sp, #16]
 800b10a:	2800      	cmp	r0, #0
 800b10c:	f43f aeaf 	beq.w	800ae6e <_strtod_l+0x47e>
 800b110:	4601      	mov	r1, r0
 800b112:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b114:	4650      	mov	r0, sl
 800b116:	f002 f9ab 	bl	800d470 <__multiply>
 800b11a:	9009      	str	r0, [sp, #36]	; 0x24
 800b11c:	2800      	cmp	r0, #0
 800b11e:	f43f aea6 	beq.w	800ae6e <_strtod_l+0x47e>
 800b122:	4650      	mov	r0, sl
 800b124:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b126:	f002 f88d 	bl	800d244 <_Bfree>
 800b12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12c:	931a      	str	r3, [sp, #104]	; 0x68
 800b12e:	2f00      	cmp	r7, #0
 800b130:	f300 808e 	bgt.w	800b250 <_strtod_l+0x860>
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd08      	ble.n	800b14c <_strtod_l+0x75c>
 800b13a:	4650      	mov	r0, sl
 800b13c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b13e:	9906      	ldr	r1, [sp, #24]
 800b140:	f002 fa3e 	bl	800d5c0 <__pow5mult>
 800b144:	9006      	str	r0, [sp, #24]
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f ae91 	beq.w	800ae6e <_strtod_l+0x47e>
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	dd08      	ble.n	800b162 <_strtod_l+0x772>
 800b150:	4622      	mov	r2, r4
 800b152:	4650      	mov	r0, sl
 800b154:	9906      	ldr	r1, [sp, #24]
 800b156:	f002 fa8d 	bl	800d674 <__lshift>
 800b15a:	9006      	str	r0, [sp, #24]
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f43f ae86 	beq.w	800ae6e <_strtod_l+0x47e>
 800b162:	2e00      	cmp	r6, #0
 800b164:	dd08      	ble.n	800b178 <_strtod_l+0x788>
 800b166:	4632      	mov	r2, r6
 800b168:	4650      	mov	r0, sl
 800b16a:	9904      	ldr	r1, [sp, #16]
 800b16c:	f002 fa82 	bl	800d674 <__lshift>
 800b170:	9004      	str	r0, [sp, #16]
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f ae7b 	beq.w	800ae6e <_strtod_l+0x47e>
 800b178:	4650      	mov	r0, sl
 800b17a:	9a06      	ldr	r2, [sp, #24]
 800b17c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b17e:	f002 fb05 	bl	800d78c <__mdiff>
 800b182:	4683      	mov	fp, r0
 800b184:	2800      	cmp	r0, #0
 800b186:	f43f ae72 	beq.w	800ae6e <_strtod_l+0x47e>
 800b18a:	2400      	movs	r4, #0
 800b18c:	68c3      	ldr	r3, [r0, #12]
 800b18e:	9904      	ldr	r1, [sp, #16]
 800b190:	60c4      	str	r4, [r0, #12]
 800b192:	930b      	str	r3, [sp, #44]	; 0x2c
 800b194:	f002 fade 	bl	800d754 <__mcmp>
 800b198:	42a0      	cmp	r0, r4
 800b19a:	da6b      	bge.n	800b274 <_strtod_l+0x884>
 800b19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19e:	ea53 0308 	orrs.w	r3, r3, r8
 800b1a2:	f040 8091 	bne.w	800b2c8 <_strtod_l+0x8d8>
 800b1a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f040 808c 	bne.w	800b2c8 <_strtod_l+0x8d8>
 800b1b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1b4:	0d1b      	lsrs	r3, r3, #20
 800b1b6:	051b      	lsls	r3, r3, #20
 800b1b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b1bc:	f240 8084 	bls.w	800b2c8 <_strtod_l+0x8d8>
 800b1c0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b1c4:	b91b      	cbnz	r3, 800b1ce <_strtod_l+0x7de>
 800b1c6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	dd7c      	ble.n	800b2c8 <_strtod_l+0x8d8>
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	f002 fa4e 	bl	800d674 <__lshift>
 800b1d8:	9904      	ldr	r1, [sp, #16]
 800b1da:	4683      	mov	fp, r0
 800b1dc:	f002 faba 	bl	800d754 <__mcmp>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	dd71      	ble.n	800b2c8 <_strtod_l+0x8d8>
 800b1e4:	9905      	ldr	r1, [sp, #20]
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	4a20      	ldr	r2, [pc, #128]	; (800b26c <_strtod_l+0x87c>)
 800b1ea:	2900      	cmp	r1, #0
 800b1ec:	f000 808c 	beq.w	800b308 <_strtod_l+0x918>
 800b1f0:	ea02 0109 	and.w	r1, r2, r9
 800b1f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1f8:	f300 8086 	bgt.w	800b308 <_strtod_l+0x918>
 800b1fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b200:	f77f aeaa 	ble.w	800af58 <_strtod_l+0x568>
 800b204:	4640      	mov	r0, r8
 800b206:	4649      	mov	r1, r9
 800b208:	4b19      	ldr	r3, [pc, #100]	; (800b270 <_strtod_l+0x880>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	f7f5 fa8e 	bl	800072c <__aeabi_dmul>
 800b210:	460b      	mov	r3, r1
 800b212:	4303      	orrs	r3, r0
 800b214:	bf08      	it	eq
 800b216:	2322      	moveq	r3, #34	; 0x22
 800b218:	4680      	mov	r8, r0
 800b21a:	4689      	mov	r9, r1
 800b21c:	bf08      	it	eq
 800b21e:	f8ca 3000 	streq.w	r3, [sl]
 800b222:	e62f      	b.n	800ae84 <_strtod_l+0x494>
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	fa02 f303 	lsl.w	r3, r2, r3
 800b22c:	ea03 0808 	and.w	r8, r3, r8
 800b230:	e6e0      	b.n	800aff4 <_strtod_l+0x604>
 800b232:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b236:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b23a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b23e:	35e2      	adds	r5, #226	; 0xe2
 800b240:	fa07 f505 	lsl.w	r5, r7, r5
 800b244:	970f      	str	r7, [sp, #60]	; 0x3c
 800b246:	e747      	b.n	800b0d8 <_strtod_l+0x6e8>
 800b248:	2301      	movs	r3, #1
 800b24a:	2500      	movs	r5, #0
 800b24c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b24e:	e743      	b.n	800b0d8 <_strtod_l+0x6e8>
 800b250:	463a      	mov	r2, r7
 800b252:	4650      	mov	r0, sl
 800b254:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b256:	f002 fa0d 	bl	800d674 <__lshift>
 800b25a:	901a      	str	r0, [sp, #104]	; 0x68
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f47f af69 	bne.w	800b134 <_strtod_l+0x744>
 800b262:	e604      	b.n	800ae6e <_strtod_l+0x47e>
 800b264:	0800e7b8 	.word	0x0800e7b8
 800b268:	fffffc02 	.word	0xfffffc02
 800b26c:	7ff00000 	.word	0x7ff00000
 800b270:	39500000 	.word	0x39500000
 800b274:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b278:	d165      	bne.n	800b346 <_strtod_l+0x956>
 800b27a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b27c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b280:	b35a      	cbz	r2, 800b2da <_strtod_l+0x8ea>
 800b282:	4a99      	ldr	r2, [pc, #612]	; (800b4e8 <_strtod_l+0xaf8>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d12b      	bne.n	800b2e0 <_strtod_l+0x8f0>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	4641      	mov	r1, r8
 800b28c:	b303      	cbz	r3, 800b2d0 <_strtod_l+0x8e0>
 800b28e:	464a      	mov	r2, r9
 800b290:	4b96      	ldr	r3, [pc, #600]	; (800b4ec <_strtod_l+0xafc>)
 800b292:	4013      	ands	r3, r2
 800b294:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b298:	f04f 32ff 	mov.w	r2, #4294967295
 800b29c:	d81b      	bhi.n	800b2d6 <_strtod_l+0x8e6>
 800b29e:	0d1b      	lsrs	r3, r3, #20
 800b2a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d119      	bne.n	800b2e0 <_strtod_l+0x8f0>
 800b2ac:	4b90      	ldr	r3, [pc, #576]	; (800b4f0 <_strtod_l+0xb00>)
 800b2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d102      	bne.n	800b2ba <_strtod_l+0x8ca>
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	f43f adda 	beq.w	800ae6e <_strtod_l+0x47e>
 800b2ba:	f04f 0800 	mov.w	r8, #0
 800b2be:	4b8b      	ldr	r3, [pc, #556]	; (800b4ec <_strtod_l+0xafc>)
 800b2c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c2:	401a      	ands	r2, r3
 800b2c4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d19a      	bne.n	800b204 <_strtod_l+0x814>
 800b2ce:	e5d9      	b.n	800ae84 <_strtod_l+0x494>
 800b2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d4:	e7e8      	b.n	800b2a8 <_strtod_l+0x8b8>
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	e7e6      	b.n	800b2a8 <_strtod_l+0x8b8>
 800b2da:	ea53 0308 	orrs.w	r3, r3, r8
 800b2de:	d081      	beq.n	800b1e4 <_strtod_l+0x7f4>
 800b2e0:	b1e5      	cbz	r5, 800b31c <_strtod_l+0x92c>
 800b2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e4:	421d      	tst	r5, r3
 800b2e6:	d0ef      	beq.n	800b2c8 <_strtod_l+0x8d8>
 800b2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	9a05      	ldr	r2, [sp, #20]
 800b2f0:	b1c3      	cbz	r3, 800b324 <_strtod_l+0x934>
 800b2f2:	f7ff fb5b 	bl	800a9ac <sulp>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2fe:	f7f5 f85f 	bl	80003c0 <__adddf3>
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	e7df      	b.n	800b2c8 <_strtod_l+0x8d8>
 800b308:	4013      	ands	r3, r2
 800b30a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b30e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b312:	f04f 38ff 	mov.w	r8, #4294967295
 800b316:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b31a:	e7d5      	b.n	800b2c8 <_strtod_l+0x8d8>
 800b31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b31e:	ea13 0f08 	tst.w	r3, r8
 800b322:	e7e0      	b.n	800b2e6 <_strtod_l+0x8f6>
 800b324:	f7ff fb42 	bl	800a9ac <sulp>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b330:	f7f5 f844 	bl	80003bc <__aeabi_dsub>
 800b334:	2200      	movs	r2, #0
 800b336:	2300      	movs	r3, #0
 800b338:	4680      	mov	r8, r0
 800b33a:	4689      	mov	r9, r1
 800b33c:	f7f5 fc5e 	bl	8000bfc <__aeabi_dcmpeq>
 800b340:	2800      	cmp	r0, #0
 800b342:	d0c1      	beq.n	800b2c8 <_strtod_l+0x8d8>
 800b344:	e608      	b.n	800af58 <_strtod_l+0x568>
 800b346:	4658      	mov	r0, fp
 800b348:	9904      	ldr	r1, [sp, #16]
 800b34a:	f002 fb81 	bl	800da50 <__ratio>
 800b34e:	2200      	movs	r2, #0
 800b350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b354:	4606      	mov	r6, r0
 800b356:	460f      	mov	r7, r1
 800b358:	f7f5 fc64 	bl	8000c24 <__aeabi_dcmple>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d070      	beq.n	800b442 <_strtod_l+0xa52>
 800b360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d042      	beq.n	800b3ec <_strtod_l+0x9fc>
 800b366:	2600      	movs	r6, #0
 800b368:	4f62      	ldr	r7, [pc, #392]	; (800b4f4 <_strtod_l+0xb04>)
 800b36a:	4d62      	ldr	r5, [pc, #392]	; (800b4f4 <_strtod_l+0xb04>)
 800b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b372:	0d1b      	lsrs	r3, r3, #20
 800b374:	051b      	lsls	r3, r3, #20
 800b376:	930f      	str	r3, [sp, #60]	; 0x3c
 800b378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b37a:	4b5f      	ldr	r3, [pc, #380]	; (800b4f8 <_strtod_l+0xb08>)
 800b37c:	429a      	cmp	r2, r3
 800b37e:	f040 80c3 	bne.w	800b508 <_strtod_l+0xb18>
 800b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b384:	4640      	mov	r0, r8
 800b386:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b38a:	4649      	mov	r1, r9
 800b38c:	f002 fa8a 	bl	800d8a4 <__ulp>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4630      	mov	r0, r6
 800b396:	4639      	mov	r1, r7
 800b398:	f7f5 f9c8 	bl	800072c <__aeabi_dmul>
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	f7f5 f80e 	bl	80003c0 <__adddf3>
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4951      	ldr	r1, [pc, #324]	; (800b4ec <_strtod_l+0xafc>)
 800b3a8:	4a54      	ldr	r2, [pc, #336]	; (800b4fc <_strtod_l+0xb0c>)
 800b3aa:	4019      	ands	r1, r3
 800b3ac:	4291      	cmp	r1, r2
 800b3ae:	4680      	mov	r8, r0
 800b3b0:	d95d      	bls.n	800b46e <_strtod_l+0xa7e>
 800b3b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3b4:	4b4e      	ldr	r3, [pc, #312]	; (800b4f0 <_strtod_l+0xb00>)
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d103      	bne.n	800b3c2 <_strtod_l+0x9d2>
 800b3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3bc:	3301      	adds	r3, #1
 800b3be:	f43f ad56 	beq.w	800ae6e <_strtod_l+0x47e>
 800b3c2:	f04f 38ff 	mov.w	r8, #4294967295
 800b3c6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b4f0 <_strtod_l+0xb00>
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3ce:	f001 ff39 	bl	800d244 <_Bfree>
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	9906      	ldr	r1, [sp, #24]
 800b3d6:	f001 ff35 	bl	800d244 <_Bfree>
 800b3da:	4650      	mov	r0, sl
 800b3dc:	9904      	ldr	r1, [sp, #16]
 800b3de:	f001 ff31 	bl	800d244 <_Bfree>
 800b3e2:	4659      	mov	r1, fp
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	f001 ff2d 	bl	800d244 <_Bfree>
 800b3ea:	e627      	b.n	800b03c <_strtod_l+0x64c>
 800b3ec:	f1b8 0f00 	cmp.w	r8, #0
 800b3f0:	d119      	bne.n	800b426 <_strtod_l+0xa36>
 800b3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3f8:	b9e3      	cbnz	r3, 800b434 <_strtod_l+0xa44>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	4b3c      	ldr	r3, [pc, #240]	; (800b4f4 <_strtod_l+0xb04>)
 800b402:	f7f5 fc05 	bl	8000c10 <__aeabi_dcmplt>
 800b406:	b9c8      	cbnz	r0, 800b43c <_strtod_l+0xa4c>
 800b408:	2200      	movs	r2, #0
 800b40a:	4630      	mov	r0, r6
 800b40c:	4639      	mov	r1, r7
 800b40e:	4b3c      	ldr	r3, [pc, #240]	; (800b500 <_strtod_l+0xb10>)
 800b410:	f7f5 f98c 	bl	800072c <__aeabi_dmul>
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b41c:	9416      	str	r4, [sp, #88]	; 0x58
 800b41e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b420:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b424:	e7a2      	b.n	800b36c <_strtod_l+0x97c>
 800b426:	f1b8 0f01 	cmp.w	r8, #1
 800b42a:	d103      	bne.n	800b434 <_strtod_l+0xa44>
 800b42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f43f ad92 	beq.w	800af58 <_strtod_l+0x568>
 800b434:	2600      	movs	r6, #0
 800b436:	2400      	movs	r4, #0
 800b438:	4f32      	ldr	r7, [pc, #200]	; (800b504 <_strtod_l+0xb14>)
 800b43a:	e796      	b.n	800b36a <_strtod_l+0x97a>
 800b43c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b43e:	4d30      	ldr	r5, [pc, #192]	; (800b500 <_strtod_l+0xb10>)
 800b440:	e7ea      	b.n	800b418 <_strtod_l+0xa28>
 800b442:	4b2f      	ldr	r3, [pc, #188]	; (800b500 <_strtod_l+0xb10>)
 800b444:	2200      	movs	r2, #0
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f5 f96f 	bl	800072c <__aeabi_dmul>
 800b44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b450:	4604      	mov	r4, r0
 800b452:	460d      	mov	r5, r1
 800b454:	b933      	cbnz	r3, 800b464 <_strtod_l+0xa74>
 800b456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b45a:	9010      	str	r0, [sp, #64]	; 0x40
 800b45c:	9311      	str	r3, [sp, #68]	; 0x44
 800b45e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b462:	e783      	b.n	800b36c <_strtod_l+0x97c>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b46c:	e7f7      	b.n	800b45e <_strtod_l+0xa6e>
 800b46e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b472:	9b05      	ldr	r3, [sp, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1a8      	bne.n	800b3ca <_strtod_l+0x9da>
 800b478:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b47c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b47e:	0d1b      	lsrs	r3, r3, #20
 800b480:	051b      	lsls	r3, r3, #20
 800b482:	429a      	cmp	r2, r3
 800b484:	d1a1      	bne.n	800b3ca <_strtod_l+0x9da>
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	f7f5 fe41 	bl	8001110 <__aeabi_d2lz>
 800b48e:	f7f5 f91f 	bl	80006d0 <__aeabi_l2d>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4620      	mov	r0, r4
 800b498:	4629      	mov	r1, r5
 800b49a:	f7f4 ff8f 	bl	80003bc <__aeabi_dsub>
 800b49e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4a4:	ea43 0308 	orr.w	r3, r3, r8
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	d066      	beq.n	800b57e <_strtod_l+0xb8e>
 800b4b0:	a309      	add	r3, pc, #36	; (adr r3, 800b4d8 <_strtod_l+0xae8>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f5 fbab 	bl	8000c10 <__aeabi_dcmplt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f47f ace2 	bne.w	800ae84 <_strtod_l+0x494>
 800b4c0:	a307      	add	r3, pc, #28	; (adr r3, 800b4e0 <_strtod_l+0xaf0>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f5 fbbf 	bl	8000c4c <__aeabi_dcmpgt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f43f af7b 	beq.w	800b3ca <_strtod_l+0x9da>
 800b4d4:	e4d6      	b.n	800ae84 <_strtod_l+0x494>
 800b4d6:	bf00      	nop
 800b4d8:	94a03595 	.word	0x94a03595
 800b4dc:	3fdfffff 	.word	0x3fdfffff
 800b4e0:	35afe535 	.word	0x35afe535
 800b4e4:	3fe00000 	.word	0x3fe00000
 800b4e8:	000fffff 	.word	0x000fffff
 800b4ec:	7ff00000 	.word	0x7ff00000
 800b4f0:	7fefffff 	.word	0x7fefffff
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	7fe00000 	.word	0x7fe00000
 800b4fc:	7c9fffff 	.word	0x7c9fffff
 800b500:	3fe00000 	.word	0x3fe00000
 800b504:	bff00000 	.word	0xbff00000
 800b508:	9b05      	ldr	r3, [sp, #20]
 800b50a:	b313      	cbz	r3, 800b552 <_strtod_l+0xb62>
 800b50c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b50e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b512:	d81e      	bhi.n	800b552 <_strtod_l+0xb62>
 800b514:	a326      	add	r3, pc, #152	; (adr r3, 800b5b0 <_strtod_l+0xbc0>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	4620      	mov	r0, r4
 800b51c:	4629      	mov	r1, r5
 800b51e:	f7f5 fb81 	bl	8000c24 <__aeabi_dcmple>
 800b522:	b190      	cbz	r0, 800b54a <_strtod_l+0xb5a>
 800b524:	4629      	mov	r1, r5
 800b526:	4620      	mov	r0, r4
 800b528:	f7f5 fbd8 	bl	8000cdc <__aeabi_d2uiz>
 800b52c:	2801      	cmp	r0, #1
 800b52e:	bf38      	it	cc
 800b530:	2001      	movcc	r0, #1
 800b532:	f7f5 f881 	bl	8000638 <__aeabi_ui2d>
 800b536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	b9d3      	cbnz	r3, 800b574 <_strtod_l+0xb84>
 800b53e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b542:	9012      	str	r0, [sp, #72]	; 0x48
 800b544:	9313      	str	r3, [sp, #76]	; 0x4c
 800b546:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b54a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b54c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b550:	1a9f      	subs	r7, r3, r2
 800b552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b556:	f002 f9a5 	bl	800d8a4 <__ulp>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4630      	mov	r0, r6
 800b560:	4639      	mov	r1, r7
 800b562:	f7f5 f8e3 	bl	800072c <__aeabi_dmul>
 800b566:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b56a:	f7f4 ff29 	bl	80003c0 <__adddf3>
 800b56e:	4680      	mov	r8, r0
 800b570:	4689      	mov	r9, r1
 800b572:	e77e      	b.n	800b472 <_strtod_l+0xa82>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b57c:	e7e3      	b.n	800b546 <_strtod_l+0xb56>
 800b57e:	a30e      	add	r3, pc, #56	; (adr r3, 800b5b8 <_strtod_l+0xbc8>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f7f5 fb44 	bl	8000c10 <__aeabi_dcmplt>
 800b588:	e7a1      	b.n	800b4ce <_strtod_l+0xade>
 800b58a:	2300      	movs	r3, #0
 800b58c:	930a      	str	r3, [sp, #40]	; 0x28
 800b58e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b590:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	f7ff ba71 	b.w	800aa7a <_strtod_l+0x8a>
 800b598:	2a65      	cmp	r2, #101	; 0x65
 800b59a:	f43f ab63 	beq.w	800ac64 <_strtod_l+0x274>
 800b59e:	2a45      	cmp	r2, #69	; 0x45
 800b5a0:	f43f ab60 	beq.w	800ac64 <_strtod_l+0x274>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f7ff bb95 	b.w	800acd4 <_strtod_l+0x2e4>
 800b5aa:	bf00      	nop
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	ffc00000 	.word	0xffc00000
 800b5b4:	41dfffff 	.word	0x41dfffff
 800b5b8:	94a03595 	.word	0x94a03595
 800b5bc:	3fcfffff 	.word	0x3fcfffff

0800b5c0 <_strtod_r>:
 800b5c0:	4b01      	ldr	r3, [pc, #4]	; (800b5c8 <_strtod_r+0x8>)
 800b5c2:	f7ff ba15 	b.w	800a9f0 <_strtod_l>
 800b5c6:	bf00      	nop
 800b5c8:	2000067c 	.word	0x2000067c

0800b5cc <strtok>:
 800b5cc:	4b16      	ldr	r3, [pc, #88]	; (800b628 <strtok+0x5c>)
 800b5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	681f      	ldr	r7, [r3, #0]
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b5d8:	460e      	mov	r6, r1
 800b5da:	b9ec      	cbnz	r4, 800b618 <strtok+0x4c>
 800b5dc:	2050      	movs	r0, #80	; 0x50
 800b5de:	f001 fdc9 	bl	800d174 <malloc>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	65b8      	str	r0, [r7, #88]	; 0x58
 800b5e6:	b920      	cbnz	r0, 800b5f2 <strtok+0x26>
 800b5e8:	2157      	movs	r1, #87	; 0x57
 800b5ea:	4b10      	ldr	r3, [pc, #64]	; (800b62c <strtok+0x60>)
 800b5ec:	4810      	ldr	r0, [pc, #64]	; (800b630 <strtok+0x64>)
 800b5ee:	f000 f991 	bl	800b914 <__assert_func>
 800b5f2:	e9c0 4400 	strd	r4, r4, [r0]
 800b5f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b5fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b5fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b602:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b606:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b60a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b60e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b612:	6184      	str	r4, [r0, #24]
 800b614:	7704      	strb	r4, [r0, #28]
 800b616:	6244      	str	r4, [r0, #36]	; 0x24
 800b618:	4631      	mov	r1, r6
 800b61a:	4628      	mov	r0, r5
 800b61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b61e:	2301      	movs	r3, #1
 800b620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	f000 b806 	b.w	800b634 <__strtok_r>
 800b628:	20000614 	.word	0x20000614
 800b62c:	0800e7e0 	.word	0x0800e7e0
 800b630:	0800e7f7 	.word	0x0800e7f7

0800b634 <__strtok_r>:
 800b634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b636:	b908      	cbnz	r0, 800b63c <__strtok_r+0x8>
 800b638:	6810      	ldr	r0, [r2, #0]
 800b63a:	b188      	cbz	r0, 800b660 <__strtok_r+0x2c>
 800b63c:	4604      	mov	r4, r0
 800b63e:	460f      	mov	r7, r1
 800b640:	4620      	mov	r0, r4
 800b642:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b646:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b64a:	b91e      	cbnz	r6, 800b654 <__strtok_r+0x20>
 800b64c:	b965      	cbnz	r5, 800b668 <__strtok_r+0x34>
 800b64e:	4628      	mov	r0, r5
 800b650:	6015      	str	r5, [r2, #0]
 800b652:	e005      	b.n	800b660 <__strtok_r+0x2c>
 800b654:	42b5      	cmp	r5, r6
 800b656:	d1f6      	bne.n	800b646 <__strtok_r+0x12>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1f0      	bne.n	800b63e <__strtok_r+0xa>
 800b65c:	6014      	str	r4, [r2, #0]
 800b65e:	7003      	strb	r3, [r0, #0]
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b662:	461c      	mov	r4, r3
 800b664:	e00c      	b.n	800b680 <__strtok_r+0x4c>
 800b666:	b915      	cbnz	r5, 800b66e <__strtok_r+0x3a>
 800b668:	460e      	mov	r6, r1
 800b66a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b66e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b672:	42ab      	cmp	r3, r5
 800b674:	d1f7      	bne.n	800b666 <__strtok_r+0x32>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0f3      	beq.n	800b662 <__strtok_r+0x2e>
 800b67a:	2300      	movs	r3, #0
 800b67c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b680:	6014      	str	r4, [r2, #0]
 800b682:	e7ed      	b.n	800b660 <__strtok_r+0x2c>

0800b684 <_strtol_l.constprop.0>:
 800b684:	2b01      	cmp	r3, #1
 800b686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b68a:	4680      	mov	r8, r0
 800b68c:	d001      	beq.n	800b692 <_strtol_l.constprop.0+0xe>
 800b68e:	2b24      	cmp	r3, #36	; 0x24
 800b690:	d906      	bls.n	800b6a0 <_strtol_l.constprop.0+0x1c>
 800b692:	f7fe fa17 	bl	8009ac4 <__errno>
 800b696:	2316      	movs	r3, #22
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	2000      	movs	r0, #0
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	460d      	mov	r5, r1
 800b6a2:	4f35      	ldr	r7, [pc, #212]	; (800b778 <_strtol_l.constprop.0+0xf4>)
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6aa:	5de6      	ldrb	r6, [r4, r7]
 800b6ac:	f016 0608 	ands.w	r6, r6, #8
 800b6b0:	d1f8      	bne.n	800b6a4 <_strtol_l.constprop.0+0x20>
 800b6b2:	2c2d      	cmp	r4, #45	; 0x2d
 800b6b4:	d12f      	bne.n	800b716 <_strtol_l.constprop.0+0x92>
 800b6b6:	2601      	movs	r6, #1
 800b6b8:	782c      	ldrb	r4, [r5, #0]
 800b6ba:	1c85      	adds	r5, r0, #2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d057      	beq.n	800b770 <_strtol_l.constprop.0+0xec>
 800b6c0:	2b10      	cmp	r3, #16
 800b6c2:	d109      	bne.n	800b6d8 <_strtol_l.constprop.0+0x54>
 800b6c4:	2c30      	cmp	r4, #48	; 0x30
 800b6c6:	d107      	bne.n	800b6d8 <_strtol_l.constprop.0+0x54>
 800b6c8:	7828      	ldrb	r0, [r5, #0]
 800b6ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b6ce:	2858      	cmp	r0, #88	; 0x58
 800b6d0:	d149      	bne.n	800b766 <_strtol_l.constprop.0+0xe2>
 800b6d2:	2310      	movs	r3, #16
 800b6d4:	786c      	ldrb	r4, [r5, #1]
 800b6d6:	3502      	adds	r5, #2
 800b6d8:	2700      	movs	r7, #0
 800b6da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b6de:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b6e2:	fbbe f9f3 	udiv	r9, lr, r3
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	fb03 ea19 	mls	sl, r3, r9, lr
 800b6ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b6f0:	f1bc 0f09 	cmp.w	ip, #9
 800b6f4:	d814      	bhi.n	800b720 <_strtol_l.constprop.0+0x9c>
 800b6f6:	4664      	mov	r4, ip
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	dd22      	ble.n	800b742 <_strtol_l.constprop.0+0xbe>
 800b6fc:	2f00      	cmp	r7, #0
 800b6fe:	db1d      	blt.n	800b73c <_strtol_l.constprop.0+0xb8>
 800b700:	4581      	cmp	r9, r0
 800b702:	d31b      	bcc.n	800b73c <_strtol_l.constprop.0+0xb8>
 800b704:	d101      	bne.n	800b70a <_strtol_l.constprop.0+0x86>
 800b706:	45a2      	cmp	sl, r4
 800b708:	db18      	blt.n	800b73c <_strtol_l.constprop.0+0xb8>
 800b70a:	2701      	movs	r7, #1
 800b70c:	fb00 4003 	mla	r0, r0, r3, r4
 800b710:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b714:	e7ea      	b.n	800b6ec <_strtol_l.constprop.0+0x68>
 800b716:	2c2b      	cmp	r4, #43	; 0x2b
 800b718:	bf04      	itt	eq
 800b71a:	782c      	ldrbeq	r4, [r5, #0]
 800b71c:	1c85      	addeq	r5, r0, #2
 800b71e:	e7cd      	b.n	800b6bc <_strtol_l.constprop.0+0x38>
 800b720:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b724:	f1bc 0f19 	cmp.w	ip, #25
 800b728:	d801      	bhi.n	800b72e <_strtol_l.constprop.0+0xaa>
 800b72a:	3c37      	subs	r4, #55	; 0x37
 800b72c:	e7e4      	b.n	800b6f8 <_strtol_l.constprop.0+0x74>
 800b72e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b732:	f1bc 0f19 	cmp.w	ip, #25
 800b736:	d804      	bhi.n	800b742 <_strtol_l.constprop.0+0xbe>
 800b738:	3c57      	subs	r4, #87	; 0x57
 800b73a:	e7dd      	b.n	800b6f8 <_strtol_l.constprop.0+0x74>
 800b73c:	f04f 37ff 	mov.w	r7, #4294967295
 800b740:	e7e6      	b.n	800b710 <_strtol_l.constprop.0+0x8c>
 800b742:	2f00      	cmp	r7, #0
 800b744:	da07      	bge.n	800b756 <_strtol_l.constprop.0+0xd2>
 800b746:	2322      	movs	r3, #34	; 0x22
 800b748:	4670      	mov	r0, lr
 800b74a:	f8c8 3000 	str.w	r3, [r8]
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d0a4      	beq.n	800b69c <_strtol_l.constprop.0+0x18>
 800b752:	1e69      	subs	r1, r5, #1
 800b754:	e005      	b.n	800b762 <_strtol_l.constprop.0+0xde>
 800b756:	b106      	cbz	r6, 800b75a <_strtol_l.constprop.0+0xd6>
 800b758:	4240      	negs	r0, r0
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	d09e      	beq.n	800b69c <_strtol_l.constprop.0+0x18>
 800b75e:	2f00      	cmp	r7, #0
 800b760:	d1f7      	bne.n	800b752 <_strtol_l.constprop.0+0xce>
 800b762:	6011      	str	r1, [r2, #0]
 800b764:	e79a      	b.n	800b69c <_strtol_l.constprop.0+0x18>
 800b766:	2430      	movs	r4, #48	; 0x30
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1b5      	bne.n	800b6d8 <_strtol_l.constprop.0+0x54>
 800b76c:	2308      	movs	r3, #8
 800b76e:	e7b3      	b.n	800b6d8 <_strtol_l.constprop.0+0x54>
 800b770:	2c30      	cmp	r4, #48	; 0x30
 800b772:	d0a9      	beq.n	800b6c8 <_strtol_l.constprop.0+0x44>
 800b774:	230a      	movs	r3, #10
 800b776:	e7af      	b.n	800b6d8 <_strtol_l.constprop.0+0x54>
 800b778:	0800e891 	.word	0x0800e891

0800b77c <_strtol_r>:
 800b77c:	f7ff bf82 	b.w	800b684 <_strtol_l.constprop.0>

0800b780 <strtol>:
 800b780:	4613      	mov	r3, r2
 800b782:	460a      	mov	r2, r1
 800b784:	4601      	mov	r1, r0
 800b786:	4802      	ldr	r0, [pc, #8]	; (800b790 <strtol+0x10>)
 800b788:	6800      	ldr	r0, [r0, #0]
 800b78a:	f7ff bf7b 	b.w	800b684 <_strtol_l.constprop.0>
 800b78e:	bf00      	nop
 800b790:	20000614 	.word	0x20000614

0800b794 <__swbuf_r>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	460e      	mov	r6, r1
 800b798:	4614      	mov	r4, r2
 800b79a:	4605      	mov	r5, r0
 800b79c:	b118      	cbz	r0, 800b7a6 <__swbuf_r+0x12>
 800b79e:	6983      	ldr	r3, [r0, #24]
 800b7a0:	b90b      	cbnz	r3, 800b7a6 <__swbuf_r+0x12>
 800b7a2:	f001 f865 	bl	800c870 <__sinit>
 800b7a6:	4b21      	ldr	r3, [pc, #132]	; (800b82c <__swbuf_r+0x98>)
 800b7a8:	429c      	cmp	r4, r3
 800b7aa:	d12b      	bne.n	800b804 <__swbuf_r+0x70>
 800b7ac:	686c      	ldr	r4, [r5, #4]
 800b7ae:	69a3      	ldr	r3, [r4, #24]
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	071a      	lsls	r2, r3, #28
 800b7b6:	d52f      	bpl.n	800b818 <__swbuf_r+0x84>
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	b36b      	cbz	r3, 800b818 <__swbuf_r+0x84>
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	6820      	ldr	r0, [r4, #0]
 800b7c0:	b2f6      	uxtb	r6, r6
 800b7c2:	1ac0      	subs	r0, r0, r3
 800b7c4:	6963      	ldr	r3, [r4, #20]
 800b7c6:	4637      	mov	r7, r6
 800b7c8:	4283      	cmp	r3, r0
 800b7ca:	dc04      	bgt.n	800b7d6 <__swbuf_r+0x42>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f000 ffba 	bl	800c748 <_fflush_r>
 800b7d4:	bb30      	cbnz	r0, 800b824 <__swbuf_r+0x90>
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	3001      	adds	r0, #1
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	60a3      	str	r3, [r4, #8]
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	6022      	str	r2, [r4, #0]
 800b7e4:	701e      	strb	r6, [r3, #0]
 800b7e6:	6963      	ldr	r3, [r4, #20]
 800b7e8:	4283      	cmp	r3, r0
 800b7ea:	d004      	beq.n	800b7f6 <__swbuf_r+0x62>
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	07db      	lsls	r3, r3, #31
 800b7f0:	d506      	bpl.n	800b800 <__swbuf_r+0x6c>
 800b7f2:	2e0a      	cmp	r6, #10
 800b7f4:	d104      	bne.n	800b800 <__swbuf_r+0x6c>
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f000 ffa5 	bl	800c748 <_fflush_r>
 800b7fe:	b988      	cbnz	r0, 800b824 <__swbuf_r+0x90>
 800b800:	4638      	mov	r0, r7
 800b802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b804:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <__swbuf_r+0x9c>)
 800b806:	429c      	cmp	r4, r3
 800b808:	d101      	bne.n	800b80e <__swbuf_r+0x7a>
 800b80a:	68ac      	ldr	r4, [r5, #8]
 800b80c:	e7cf      	b.n	800b7ae <__swbuf_r+0x1a>
 800b80e:	4b09      	ldr	r3, [pc, #36]	; (800b834 <__swbuf_r+0xa0>)
 800b810:	429c      	cmp	r4, r3
 800b812:	bf08      	it	eq
 800b814:	68ec      	ldreq	r4, [r5, #12]
 800b816:	e7ca      	b.n	800b7ae <__swbuf_r+0x1a>
 800b818:	4621      	mov	r1, r4
 800b81a:	4628      	mov	r0, r5
 800b81c:	f000 f80c 	bl	800b838 <__swsetup_r>
 800b820:	2800      	cmp	r0, #0
 800b822:	d0cb      	beq.n	800b7bc <__swbuf_r+0x28>
 800b824:	f04f 37ff 	mov.w	r7, #4294967295
 800b828:	e7ea      	b.n	800b800 <__swbuf_r+0x6c>
 800b82a:	bf00      	nop
 800b82c:	0800ea2c 	.word	0x0800ea2c
 800b830:	0800ea4c 	.word	0x0800ea4c
 800b834:	0800ea0c 	.word	0x0800ea0c

0800b838 <__swsetup_r>:
 800b838:	4b32      	ldr	r3, [pc, #200]	; (800b904 <__swsetup_r+0xcc>)
 800b83a:	b570      	push	{r4, r5, r6, lr}
 800b83c:	681d      	ldr	r5, [r3, #0]
 800b83e:	4606      	mov	r6, r0
 800b840:	460c      	mov	r4, r1
 800b842:	b125      	cbz	r5, 800b84e <__swsetup_r+0x16>
 800b844:	69ab      	ldr	r3, [r5, #24]
 800b846:	b913      	cbnz	r3, 800b84e <__swsetup_r+0x16>
 800b848:	4628      	mov	r0, r5
 800b84a:	f001 f811 	bl	800c870 <__sinit>
 800b84e:	4b2e      	ldr	r3, [pc, #184]	; (800b908 <__swsetup_r+0xd0>)
 800b850:	429c      	cmp	r4, r3
 800b852:	d10f      	bne.n	800b874 <__swsetup_r+0x3c>
 800b854:	686c      	ldr	r4, [r5, #4]
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b85c:	0719      	lsls	r1, r3, #28
 800b85e:	d42c      	bmi.n	800b8ba <__swsetup_r+0x82>
 800b860:	06dd      	lsls	r5, r3, #27
 800b862:	d411      	bmi.n	800b888 <__swsetup_r+0x50>
 800b864:	2309      	movs	r3, #9
 800b866:	6033      	str	r3, [r6, #0]
 800b868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	e03e      	b.n	800b8f2 <__swsetup_r+0xba>
 800b874:	4b25      	ldr	r3, [pc, #148]	; (800b90c <__swsetup_r+0xd4>)
 800b876:	429c      	cmp	r4, r3
 800b878:	d101      	bne.n	800b87e <__swsetup_r+0x46>
 800b87a:	68ac      	ldr	r4, [r5, #8]
 800b87c:	e7eb      	b.n	800b856 <__swsetup_r+0x1e>
 800b87e:	4b24      	ldr	r3, [pc, #144]	; (800b910 <__swsetup_r+0xd8>)
 800b880:	429c      	cmp	r4, r3
 800b882:	bf08      	it	eq
 800b884:	68ec      	ldreq	r4, [r5, #12]
 800b886:	e7e6      	b.n	800b856 <__swsetup_r+0x1e>
 800b888:	0758      	lsls	r0, r3, #29
 800b88a:	d512      	bpl.n	800b8b2 <__swsetup_r+0x7a>
 800b88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b88e:	b141      	cbz	r1, 800b8a2 <__swsetup_r+0x6a>
 800b890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b894:	4299      	cmp	r1, r3
 800b896:	d002      	beq.n	800b89e <__swsetup_r+0x66>
 800b898:	4630      	mov	r0, r6
 800b89a:	f002 f95f 	bl	800db5c <_free_r>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8a8:	81a3      	strh	r3, [r4, #12]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	6063      	str	r3, [r4, #4]
 800b8ae:	6923      	ldr	r3, [r4, #16]
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f043 0308 	orr.w	r3, r3, #8
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	b94b      	cbnz	r3, 800b8d2 <__swsetup_r+0x9a>
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c8:	d003      	beq.n	800b8d2 <__swsetup_r+0x9a>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f001 fc11 	bl	800d0f4 <__smakebuf_r>
 800b8d2:	89a0      	ldrh	r0, [r4, #12]
 800b8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8d8:	f010 0301 	ands.w	r3, r0, #1
 800b8dc:	d00a      	beq.n	800b8f4 <__swsetup_r+0xbc>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60a3      	str	r3, [r4, #8]
 800b8e2:	6963      	ldr	r3, [r4, #20]
 800b8e4:	425b      	negs	r3, r3
 800b8e6:	61a3      	str	r3, [r4, #24]
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	b943      	cbnz	r3, 800b8fe <__swsetup_r+0xc6>
 800b8ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8f0:	d1ba      	bne.n	800b868 <__swsetup_r+0x30>
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	0781      	lsls	r1, r0, #30
 800b8f6:	bf58      	it	pl
 800b8f8:	6963      	ldrpl	r3, [r4, #20]
 800b8fa:	60a3      	str	r3, [r4, #8]
 800b8fc:	e7f4      	b.n	800b8e8 <__swsetup_r+0xb0>
 800b8fe:	2000      	movs	r0, #0
 800b900:	e7f7      	b.n	800b8f2 <__swsetup_r+0xba>
 800b902:	bf00      	nop
 800b904:	20000614 	.word	0x20000614
 800b908:	0800ea2c 	.word	0x0800ea2c
 800b90c:	0800ea4c 	.word	0x0800ea4c
 800b910:	0800ea0c 	.word	0x0800ea0c

0800b914 <__assert_func>:
 800b914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b916:	4614      	mov	r4, r2
 800b918:	461a      	mov	r2, r3
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <__assert_func+0x2c>)
 800b91c:	4605      	mov	r5, r0
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68d8      	ldr	r0, [r3, #12]
 800b922:	b14c      	cbz	r4, 800b938 <__assert_func+0x24>
 800b924:	4b07      	ldr	r3, [pc, #28]	; (800b944 <__assert_func+0x30>)
 800b926:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b92a:	9100      	str	r1, [sp, #0]
 800b92c:	462b      	mov	r3, r5
 800b92e:	4906      	ldr	r1, [pc, #24]	; (800b948 <__assert_func+0x34>)
 800b930:	f001 f81c 	bl	800c96c <fiprintf>
 800b934:	f002 fd76 	bl	800e424 <abort>
 800b938:	4b04      	ldr	r3, [pc, #16]	; (800b94c <__assert_func+0x38>)
 800b93a:	461c      	mov	r4, r3
 800b93c:	e7f3      	b.n	800b926 <__assert_func+0x12>
 800b93e:	bf00      	nop
 800b940:	20000614 	.word	0x20000614
 800b944:	0800e854 	.word	0x0800e854
 800b948:	0800e861 	.word	0x0800e861
 800b94c:	0800e88f 	.word	0x0800e88f

0800b950 <quorem>:
 800b950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	6903      	ldr	r3, [r0, #16]
 800b956:	690c      	ldr	r4, [r1, #16]
 800b958:	4607      	mov	r7, r0
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	f2c0 8082 	blt.w	800ba64 <quorem+0x114>
 800b960:	3c01      	subs	r4, #1
 800b962:	f100 0514 	add.w	r5, r0, #20
 800b966:	f101 0814 	add.w	r8, r1, #20
 800b96a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b978:	3301      	adds	r3, #1
 800b97a:	429a      	cmp	r2, r3
 800b97c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b988:	d331      	bcc.n	800b9ee <quorem+0x9e>
 800b98a:	f04f 0e00 	mov.w	lr, #0
 800b98e:	4640      	mov	r0, r8
 800b990:	46ac      	mov	ip, r5
 800b992:	46f2      	mov	sl, lr
 800b994:	f850 2b04 	ldr.w	r2, [r0], #4
 800b998:	b293      	uxth	r3, r2
 800b99a:	fb06 e303 	mla	r3, r6, r3, lr
 800b99e:	0c12      	lsrs	r2, r2, #16
 800b9a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	fb06 e202 	mla	r2, r6, r2, lr
 800b9aa:	ebaa 0303 	sub.w	r3, sl, r3
 800b9ae:	f8dc a000 	ldr.w	sl, [ip]
 800b9b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9b6:	fa1f fa8a 	uxth.w	sl, sl
 800b9ba:	4453      	add	r3, sl
 800b9bc:	f8dc a000 	ldr.w	sl, [ip]
 800b9c0:	b292      	uxth	r2, r2
 800b9c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b9c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9d0:	4581      	cmp	r9, r0
 800b9d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9d6:	f84c 3b04 	str.w	r3, [ip], #4
 800b9da:	d2db      	bcs.n	800b994 <quorem+0x44>
 800b9dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9e0:	b92b      	cbnz	r3, 800b9ee <quorem+0x9e>
 800b9e2:	9b01      	ldr	r3, [sp, #4]
 800b9e4:	3b04      	subs	r3, #4
 800b9e6:	429d      	cmp	r5, r3
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	d32f      	bcc.n	800ba4c <quorem+0xfc>
 800b9ec:	613c      	str	r4, [r7, #16]
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	f001 feb0 	bl	800d754 <__mcmp>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	db25      	blt.n	800ba44 <quorem+0xf4>
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	f04f 0c00 	mov.w	ip, #0
 800b9fe:	3601      	adds	r6, #1
 800ba00:	f858 1b04 	ldr.w	r1, [r8], #4
 800ba04:	f8d0 e000 	ldr.w	lr, [r0]
 800ba08:	b28b      	uxth	r3, r1
 800ba0a:	ebac 0303 	sub.w	r3, ip, r3
 800ba0e:	fa1f f28e 	uxth.w	r2, lr
 800ba12:	4413      	add	r3, r2
 800ba14:	0c0a      	lsrs	r2, r1, #16
 800ba16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba24:	45c1      	cmp	r9, r8
 800ba26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba2a:	f840 3b04 	str.w	r3, [r0], #4
 800ba2e:	d2e7      	bcs.n	800ba00 <quorem+0xb0>
 800ba30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba38:	b922      	cbnz	r2, 800ba44 <quorem+0xf4>
 800ba3a:	3b04      	subs	r3, #4
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	d30a      	bcc.n	800ba58 <quorem+0x108>
 800ba42:	613c      	str	r4, [r7, #16]
 800ba44:	4630      	mov	r0, r6
 800ba46:	b003      	add	sp, #12
 800ba48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4c:	6812      	ldr	r2, [r2, #0]
 800ba4e:	3b04      	subs	r3, #4
 800ba50:	2a00      	cmp	r2, #0
 800ba52:	d1cb      	bne.n	800b9ec <quorem+0x9c>
 800ba54:	3c01      	subs	r4, #1
 800ba56:	e7c6      	b.n	800b9e6 <quorem+0x96>
 800ba58:	6812      	ldr	r2, [r2, #0]
 800ba5a:	3b04      	subs	r3, #4
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	d1f0      	bne.n	800ba42 <quorem+0xf2>
 800ba60:	3c01      	subs	r4, #1
 800ba62:	e7eb      	b.n	800ba3c <quorem+0xec>
 800ba64:	2000      	movs	r0, #0
 800ba66:	e7ee      	b.n	800ba46 <quorem+0xf6>

0800ba68 <_dtoa_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	4616      	mov	r6, r2
 800ba6e:	461f      	mov	r7, r3
 800ba70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ba72:	b099      	sub	sp, #100	; 0x64
 800ba74:	4605      	mov	r5, r0
 800ba76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ba7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ba7e:	b974      	cbnz	r4, 800ba9e <_dtoa_r+0x36>
 800ba80:	2010      	movs	r0, #16
 800ba82:	f001 fb77 	bl	800d174 <malloc>
 800ba86:	4602      	mov	r2, r0
 800ba88:	6268      	str	r0, [r5, #36]	; 0x24
 800ba8a:	b920      	cbnz	r0, 800ba96 <_dtoa_r+0x2e>
 800ba8c:	21ea      	movs	r1, #234	; 0xea
 800ba8e:	4ba8      	ldr	r3, [pc, #672]	; (800bd30 <_dtoa_r+0x2c8>)
 800ba90:	48a8      	ldr	r0, [pc, #672]	; (800bd34 <_dtoa_r+0x2cc>)
 800ba92:	f7ff ff3f 	bl	800b914 <__assert_func>
 800ba96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba9a:	6004      	str	r4, [r0, #0]
 800ba9c:	60c4      	str	r4, [r0, #12]
 800ba9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800baa0:	6819      	ldr	r1, [r3, #0]
 800baa2:	b151      	cbz	r1, 800baba <_dtoa_r+0x52>
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	2301      	movs	r3, #1
 800baa8:	4093      	lsls	r3, r2
 800baaa:	604a      	str	r2, [r1, #4]
 800baac:	608b      	str	r3, [r1, #8]
 800baae:	4628      	mov	r0, r5
 800bab0:	f001 fbc8 	bl	800d244 <_Bfree>
 800bab4:	2200      	movs	r2, #0
 800bab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	1e3b      	subs	r3, r7, #0
 800babc:	bfaf      	iteee	ge
 800babe:	2300      	movge	r3, #0
 800bac0:	2201      	movlt	r2, #1
 800bac2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bac6:	9305      	strlt	r3, [sp, #20]
 800bac8:	bfa8      	it	ge
 800baca:	f8c8 3000 	strge.w	r3, [r8]
 800bace:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bad2:	4b99      	ldr	r3, [pc, #612]	; (800bd38 <_dtoa_r+0x2d0>)
 800bad4:	bfb8      	it	lt
 800bad6:	f8c8 2000 	strlt.w	r2, [r8]
 800bada:	ea33 0309 	bics.w	r3, r3, r9
 800bade:	d119      	bne.n	800bb14 <_dtoa_r+0xac>
 800bae0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bae4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baec:	4333      	orrs	r3, r6
 800baee:	f000 857f 	beq.w	800c5f0 <_dtoa_r+0xb88>
 800baf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800baf4:	b953      	cbnz	r3, 800bb0c <_dtoa_r+0xa4>
 800baf6:	4b91      	ldr	r3, [pc, #580]	; (800bd3c <_dtoa_r+0x2d4>)
 800baf8:	e022      	b.n	800bb40 <_dtoa_r+0xd8>
 800bafa:	4b91      	ldr	r3, [pc, #580]	; (800bd40 <_dtoa_r+0x2d8>)
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	3308      	adds	r3, #8
 800bb00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	9803      	ldr	r0, [sp, #12]
 800bb06:	b019      	add	sp, #100	; 0x64
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0c:	4b8b      	ldr	r3, [pc, #556]	; (800bd3c <_dtoa_r+0x2d4>)
 800bb0e:	9303      	str	r3, [sp, #12]
 800bb10:	3303      	adds	r3, #3
 800bb12:	e7f5      	b.n	800bb00 <_dtoa_r+0x98>
 800bb14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bb18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bb1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb20:	2200      	movs	r2, #0
 800bb22:	2300      	movs	r3, #0
 800bb24:	f7f5 f86a 	bl	8000bfc <__aeabi_dcmpeq>
 800bb28:	4680      	mov	r8, r0
 800bb2a:	b158      	cbz	r0, 800bb44 <_dtoa_r+0xdc>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8558 	beq.w	800c5ea <_dtoa_r+0xb82>
 800bb3a:	4882      	ldr	r0, [pc, #520]	; (800bd44 <_dtoa_r+0x2dc>)
 800bb3c:	6018      	str	r0, [r3, #0]
 800bb3e:	1e43      	subs	r3, r0, #1
 800bb40:	9303      	str	r3, [sp, #12]
 800bb42:	e7df      	b.n	800bb04 <_dtoa_r+0x9c>
 800bb44:	ab16      	add	r3, sp, #88	; 0x58
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	ab17      	add	r3, sp, #92	; 0x5c
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb52:	f001 ff21 	bl	800d998 <__d2b>
 800bb56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bb5a:	4683      	mov	fp, r0
 800bb5c:	2c00      	cmp	r4, #0
 800bb5e:	d07f      	beq.n	800bc60 <_dtoa_r+0x1f8>
 800bb60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bb6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bb72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bb76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4b72      	ldr	r3, [pc, #456]	; (800bd48 <_dtoa_r+0x2e0>)
 800bb7e:	f7f4 fc1d 	bl	80003bc <__aeabi_dsub>
 800bb82:	a365      	add	r3, pc, #404	; (adr r3, 800bd18 <_dtoa_r+0x2b0>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f7f4 fdd0 	bl	800072c <__aeabi_dmul>
 800bb8c:	a364      	add	r3, pc, #400	; (adr r3, 800bd20 <_dtoa_r+0x2b8>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f7f4 fc15 	bl	80003c0 <__adddf3>
 800bb96:	4606      	mov	r6, r0
 800bb98:	4620      	mov	r0, r4
 800bb9a:	460f      	mov	r7, r1
 800bb9c:	f7f4 fd5c 	bl	8000658 <__aeabi_i2d>
 800bba0:	a361      	add	r3, pc, #388	; (adr r3, 800bd28 <_dtoa_r+0x2c0>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f7f4 fdc1 	bl	800072c <__aeabi_dmul>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	f7f4 fc05 	bl	80003c0 <__adddf3>
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	f7f5 f867 	bl	8000c8c <__aeabi_d2iz>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f5 f822 	bl	8000c10 <__aeabi_dcmplt>
 800bbcc:	b148      	cbz	r0, 800bbe2 <_dtoa_r+0x17a>
 800bbce:	4650      	mov	r0, sl
 800bbd0:	f7f4 fd42 	bl	8000658 <__aeabi_i2d>
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	463b      	mov	r3, r7
 800bbd8:	f7f5 f810 	bl	8000bfc <__aeabi_dcmpeq>
 800bbdc:	b908      	cbnz	r0, 800bbe2 <_dtoa_r+0x17a>
 800bbde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbe2:	f1ba 0f16 	cmp.w	sl, #22
 800bbe6:	d858      	bhi.n	800bc9a <_dtoa_r+0x232>
 800bbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbec:	4b57      	ldr	r3, [pc, #348]	; (800bd4c <_dtoa_r+0x2e4>)
 800bbee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f5 f80b 	bl	8000c10 <__aeabi_dcmplt>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d04f      	beq.n	800bc9e <_dtoa_r+0x236>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc04:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc08:	1b1c      	subs	r4, r3, r4
 800bc0a:	1e63      	subs	r3, r4, #1
 800bc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0e:	bf49      	itett	mi
 800bc10:	f1c4 0301 	rsbmi	r3, r4, #1
 800bc14:	2300      	movpl	r3, #0
 800bc16:	9306      	strmi	r3, [sp, #24]
 800bc18:	2300      	movmi	r3, #0
 800bc1a:	bf54      	ite	pl
 800bc1c:	9306      	strpl	r3, [sp, #24]
 800bc1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bc20:	f1ba 0f00 	cmp.w	sl, #0
 800bc24:	db3d      	blt.n	800bca2 <_dtoa_r+0x23a>
 800bc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bc2c:	4453      	add	r3, sl
 800bc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc30:	2300      	movs	r3, #0
 800bc32:	930a      	str	r3, [sp, #40]	; 0x28
 800bc34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc36:	2b09      	cmp	r3, #9
 800bc38:	f200 808c 	bhi.w	800bd54 <_dtoa_r+0x2ec>
 800bc3c:	2b05      	cmp	r3, #5
 800bc3e:	bfc4      	itt	gt
 800bc40:	3b04      	subgt	r3, #4
 800bc42:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bc44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc46:	bfc8      	it	gt
 800bc48:	2400      	movgt	r4, #0
 800bc4a:	f1a3 0302 	sub.w	r3, r3, #2
 800bc4e:	bfd8      	it	le
 800bc50:	2401      	movle	r4, #1
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	f200 808a 	bhi.w	800bd6c <_dtoa_r+0x304>
 800bc58:	e8df f003 	tbb	[pc, r3]
 800bc5c:	5b4d4f2d 	.word	0x5b4d4f2d
 800bc60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bc64:	441c      	add	r4, r3
 800bc66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	bfc3      	ittte	gt
 800bc6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bc76:	fa09 f303 	lslgt.w	r3, r9, r3
 800bc7a:	f1c3 0320 	rsble	r3, r3, #32
 800bc7e:	bfc6      	itte	gt
 800bc80:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc84:	4318      	orrgt	r0, r3
 800bc86:	fa06 f003 	lslle.w	r0, r6, r3
 800bc8a:	f7f4 fcd5 	bl	8000638 <__aeabi_ui2d>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bc94:	3c01      	subs	r4, #1
 800bc96:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc98:	e76f      	b.n	800bb7a <_dtoa_r+0x112>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e7b2      	b.n	800bc04 <_dtoa_r+0x19c>
 800bc9e:	900f      	str	r0, [sp, #60]	; 0x3c
 800bca0:	e7b1      	b.n	800bc06 <_dtoa_r+0x19e>
 800bca2:	9b06      	ldr	r3, [sp, #24]
 800bca4:	eba3 030a 	sub.w	r3, r3, sl
 800bca8:	9306      	str	r3, [sp, #24]
 800bcaa:	f1ca 0300 	rsb	r3, sl, #0
 800bcae:	930a      	str	r3, [sp, #40]	; 0x28
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	930e      	str	r3, [sp, #56]	; 0x38
 800bcb4:	e7be      	b.n	800bc34 <_dtoa_r+0x1cc>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc58      	bgt.n	800bd72 <_dtoa_r+0x30a>
 800bcc0:	f04f 0901 	mov.w	r9, #1
 800bcc4:	464b      	mov	r3, r9
 800bcc6:	f8cd 9020 	str.w	r9, [sp, #32]
 800bcca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bcce:	2200      	movs	r2, #0
 800bcd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bcd2:	6042      	str	r2, [r0, #4]
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	f102 0614 	add.w	r6, r2, #20
 800bcda:	429e      	cmp	r6, r3
 800bcdc:	6841      	ldr	r1, [r0, #4]
 800bcde:	d94e      	bls.n	800bd7e <_dtoa_r+0x316>
 800bce0:	4628      	mov	r0, r5
 800bce2:	f001 fa6f 	bl	800d1c4 <_Balloc>
 800bce6:	9003      	str	r0, [sp, #12]
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d14c      	bne.n	800bd86 <_dtoa_r+0x31e>
 800bcec:	4602      	mov	r2, r0
 800bcee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bcf2:	4b17      	ldr	r3, [pc, #92]	; (800bd50 <_dtoa_r+0x2e8>)
 800bcf4:	e6cc      	b.n	800ba90 <_dtoa_r+0x28>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e7de      	b.n	800bcb8 <_dtoa_r+0x250>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd00:	eb0a 0903 	add.w	r9, sl, r3
 800bd04:	f109 0301 	add.w	r3, r9, #1
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	9308      	str	r3, [sp, #32]
 800bd0c:	bfb8      	it	lt
 800bd0e:	2301      	movlt	r3, #1
 800bd10:	e7dd      	b.n	800bcce <_dtoa_r+0x266>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e7f2      	b.n	800bcfc <_dtoa_r+0x294>
 800bd16:	bf00      	nop
 800bd18:	636f4361 	.word	0x636f4361
 800bd1c:	3fd287a7 	.word	0x3fd287a7
 800bd20:	8b60c8b3 	.word	0x8b60c8b3
 800bd24:	3fc68a28 	.word	0x3fc68a28
 800bd28:	509f79fb 	.word	0x509f79fb
 800bd2c:	3fd34413 	.word	0x3fd34413
 800bd30:	0800e7e0 	.word	0x0800e7e0
 800bd34:	0800e99e 	.word	0x0800e99e
 800bd38:	7ff00000 	.word	0x7ff00000
 800bd3c:	0800e99a 	.word	0x0800e99a
 800bd40:	0800e991 	.word	0x0800e991
 800bd44:	0800e761 	.word	0x0800e761
 800bd48:	3ff80000 	.word	0x3ff80000
 800bd4c:	0800eb70 	.word	0x0800eb70
 800bd50:	0800e9f9 	.word	0x0800e9f9
 800bd54:	2401      	movs	r4, #1
 800bd56:	2300      	movs	r3, #0
 800bd58:	940b      	str	r4, [sp, #44]	; 0x2c
 800bd5a:	9322      	str	r3, [sp, #136]	; 0x88
 800bd5c:	f04f 39ff 	mov.w	r9, #4294967295
 800bd60:	2200      	movs	r2, #0
 800bd62:	2312      	movs	r3, #18
 800bd64:	f8cd 9020 	str.w	r9, [sp, #32]
 800bd68:	9223      	str	r2, [sp, #140]	; 0x8c
 800bd6a:	e7b0      	b.n	800bcce <_dtoa_r+0x266>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd70:	e7f4      	b.n	800bd5c <_dtoa_r+0x2f4>
 800bd72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bd76:	464b      	mov	r3, r9
 800bd78:	f8cd 9020 	str.w	r9, [sp, #32]
 800bd7c:	e7a7      	b.n	800bcce <_dtoa_r+0x266>
 800bd7e:	3101      	adds	r1, #1
 800bd80:	6041      	str	r1, [r0, #4]
 800bd82:	0052      	lsls	r2, r2, #1
 800bd84:	e7a7      	b.n	800bcd6 <_dtoa_r+0x26e>
 800bd86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd88:	9a03      	ldr	r2, [sp, #12]
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	9b08      	ldr	r3, [sp, #32]
 800bd8e:	2b0e      	cmp	r3, #14
 800bd90:	f200 80a8 	bhi.w	800bee4 <_dtoa_r+0x47c>
 800bd94:	2c00      	cmp	r4, #0
 800bd96:	f000 80a5 	beq.w	800bee4 <_dtoa_r+0x47c>
 800bd9a:	f1ba 0f00 	cmp.w	sl, #0
 800bd9e:	dd34      	ble.n	800be0a <_dtoa_r+0x3a2>
 800bda0:	4a9a      	ldr	r2, [pc, #616]	; (800c00c <_dtoa_r+0x5a4>)
 800bda2:	f00a 030f 	and.w	r3, sl, #15
 800bda6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bdae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bdb6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bdba:	d016      	beq.n	800bdea <_dtoa_r+0x382>
 800bdbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdc0:	4b93      	ldr	r3, [pc, #588]	; (800c010 <_dtoa_r+0x5a8>)
 800bdc2:	2703      	movs	r7, #3
 800bdc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdc8:	f7f4 fdda 	bl	8000980 <__aeabi_ddiv>
 800bdcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdd0:	f004 040f 	and.w	r4, r4, #15
 800bdd4:	4e8e      	ldr	r6, [pc, #568]	; (800c010 <_dtoa_r+0x5a8>)
 800bdd6:	b954      	cbnz	r4, 800bdee <_dtoa_r+0x386>
 800bdd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde0:	f7f4 fdce 	bl	8000980 <__aeabi_ddiv>
 800bde4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde8:	e029      	b.n	800be3e <_dtoa_r+0x3d6>
 800bdea:	2702      	movs	r7, #2
 800bdec:	e7f2      	b.n	800bdd4 <_dtoa_r+0x36c>
 800bdee:	07e1      	lsls	r1, r4, #31
 800bdf0:	d508      	bpl.n	800be04 <_dtoa_r+0x39c>
 800bdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdfa:	f7f4 fc97 	bl	800072c <__aeabi_dmul>
 800bdfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be02:	3701      	adds	r7, #1
 800be04:	1064      	asrs	r4, r4, #1
 800be06:	3608      	adds	r6, #8
 800be08:	e7e5      	b.n	800bdd6 <_dtoa_r+0x36e>
 800be0a:	f000 80a5 	beq.w	800bf58 <_dtoa_r+0x4f0>
 800be0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be12:	f1ca 0400 	rsb	r4, sl, #0
 800be16:	4b7d      	ldr	r3, [pc, #500]	; (800c00c <_dtoa_r+0x5a4>)
 800be18:	f004 020f 	and.w	r2, r4, #15
 800be1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	f7f4 fc82 	bl	800072c <__aeabi_dmul>
 800be28:	2702      	movs	r7, #2
 800be2a:	2300      	movs	r3, #0
 800be2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be30:	4e77      	ldr	r6, [pc, #476]	; (800c010 <_dtoa_r+0x5a8>)
 800be32:	1124      	asrs	r4, r4, #4
 800be34:	2c00      	cmp	r4, #0
 800be36:	f040 8084 	bne.w	800bf42 <_dtoa_r+0x4da>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1d2      	bne.n	800bde4 <_dtoa_r+0x37c>
 800be3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 808b 	beq.w	800bf5c <_dtoa_r+0x4f4>
 800be46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800be4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800be4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be52:	2200      	movs	r2, #0
 800be54:	4b6f      	ldr	r3, [pc, #444]	; (800c014 <_dtoa_r+0x5ac>)
 800be56:	f7f4 fedb 	bl	8000c10 <__aeabi_dcmplt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d07e      	beq.n	800bf5c <_dtoa_r+0x4f4>
 800be5e:	9b08      	ldr	r3, [sp, #32]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d07b      	beq.n	800bf5c <_dtoa_r+0x4f4>
 800be64:	f1b9 0f00 	cmp.w	r9, #0
 800be68:	dd38      	ble.n	800bedc <_dtoa_r+0x474>
 800be6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be6e:	2200      	movs	r2, #0
 800be70:	4b69      	ldr	r3, [pc, #420]	; (800c018 <_dtoa_r+0x5b0>)
 800be72:	f7f4 fc5b 	bl	800072c <__aeabi_dmul>
 800be76:	464c      	mov	r4, r9
 800be78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800be80:	3701      	adds	r7, #1
 800be82:	4638      	mov	r0, r7
 800be84:	f7f4 fbe8 	bl	8000658 <__aeabi_i2d>
 800be88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be8c:	f7f4 fc4e 	bl	800072c <__aeabi_dmul>
 800be90:	2200      	movs	r2, #0
 800be92:	4b62      	ldr	r3, [pc, #392]	; (800c01c <_dtoa_r+0x5b4>)
 800be94:	f7f4 fa94 	bl	80003c0 <__adddf3>
 800be98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800be9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bea0:	9611      	str	r6, [sp, #68]	; 0x44
 800bea2:	2c00      	cmp	r4, #0
 800bea4:	d15d      	bne.n	800bf62 <_dtoa_r+0x4fa>
 800bea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beaa:	2200      	movs	r2, #0
 800beac:	4b5c      	ldr	r3, [pc, #368]	; (800c020 <_dtoa_r+0x5b8>)
 800beae:	f7f4 fa85 	bl	80003bc <__aeabi_dsub>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800beba:	4633      	mov	r3, r6
 800bebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bebe:	f7f4 fec5 	bl	8000c4c <__aeabi_dcmpgt>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	f040 829c 	bne.w	800c400 <_dtoa_r+0x998>
 800bec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800becc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bece:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bed2:	f7f4 fe9d 	bl	8000c10 <__aeabi_dcmplt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f040 8290 	bne.w	800c3fc <_dtoa_r+0x994>
 800bedc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bee0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f2c0 8152 	blt.w	800c190 <_dtoa_r+0x728>
 800beec:	f1ba 0f0e 	cmp.w	sl, #14
 800bef0:	f300 814e 	bgt.w	800c190 <_dtoa_r+0x728>
 800bef4:	4b45      	ldr	r3, [pc, #276]	; (800c00c <_dtoa_r+0x5a4>)
 800bef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800befa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800befe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bf02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f280 80db 	bge.w	800c0c0 <_dtoa_r+0x658>
 800bf0a:	9b08      	ldr	r3, [sp, #32]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f300 80d7 	bgt.w	800c0c0 <_dtoa_r+0x658>
 800bf12:	f040 8272 	bne.w	800c3fa <_dtoa_r+0x992>
 800bf16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	4b40      	ldr	r3, [pc, #256]	; (800c020 <_dtoa_r+0x5b8>)
 800bf1e:	f7f4 fc05 	bl	800072c <__aeabi_dmul>
 800bf22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf26:	f7f4 fe87 	bl	8000c38 <__aeabi_dcmpge>
 800bf2a:	9c08      	ldr	r4, [sp, #32]
 800bf2c:	4626      	mov	r6, r4
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	f040 8248 	bne.w	800c3c4 <_dtoa_r+0x95c>
 800bf34:	2331      	movs	r3, #49	; 0x31
 800bf36:	9f03      	ldr	r7, [sp, #12]
 800bf38:	f10a 0a01 	add.w	sl, sl, #1
 800bf3c:	f807 3b01 	strb.w	r3, [r7], #1
 800bf40:	e244      	b.n	800c3cc <_dtoa_r+0x964>
 800bf42:	07e2      	lsls	r2, r4, #31
 800bf44:	d505      	bpl.n	800bf52 <_dtoa_r+0x4ea>
 800bf46:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf4a:	f7f4 fbef 	bl	800072c <__aeabi_dmul>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	3701      	adds	r7, #1
 800bf52:	1064      	asrs	r4, r4, #1
 800bf54:	3608      	adds	r6, #8
 800bf56:	e76d      	b.n	800be34 <_dtoa_r+0x3cc>
 800bf58:	2702      	movs	r7, #2
 800bf5a:	e770      	b.n	800be3e <_dtoa_r+0x3d6>
 800bf5c:	46d0      	mov	r8, sl
 800bf5e:	9c08      	ldr	r4, [sp, #32]
 800bf60:	e78f      	b.n	800be82 <_dtoa_r+0x41a>
 800bf62:	9903      	ldr	r1, [sp, #12]
 800bf64:	4b29      	ldr	r3, [pc, #164]	; (800c00c <_dtoa_r+0x5a4>)
 800bf66:	4421      	add	r1, r4
 800bf68:	9112      	str	r1, [sp, #72]	; 0x48
 800bf6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bf74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	d055      	beq.n	800c028 <_dtoa_r+0x5c0>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	4929      	ldr	r1, [pc, #164]	; (800c024 <_dtoa_r+0x5bc>)
 800bf80:	f7f4 fcfe 	bl	8000980 <__aeabi_ddiv>
 800bf84:	463b      	mov	r3, r7
 800bf86:	4632      	mov	r2, r6
 800bf88:	f7f4 fa18 	bl	80003bc <__aeabi_dsub>
 800bf8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf90:	9f03      	ldr	r7, [sp, #12]
 800bf92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf96:	f7f4 fe79 	bl	8000c8c <__aeabi_d2iz>
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	f7f4 fb5c 	bl	8000658 <__aeabi_i2d>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfa8:	f7f4 fa08 	bl	80003bc <__aeabi_dsub>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	3430      	adds	r4, #48	; 0x30
 800bfb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfba:	f807 4b01 	strb.w	r4, [r7], #1
 800bfbe:	f7f4 fe27 	bl	8000c10 <__aeabi_dcmplt>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d174      	bne.n	800c0b0 <_dtoa_r+0x648>
 800bfc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfca:	2000      	movs	r0, #0
 800bfcc:	4911      	ldr	r1, [pc, #68]	; (800c014 <_dtoa_r+0x5ac>)
 800bfce:	f7f4 f9f5 	bl	80003bc <__aeabi_dsub>
 800bfd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfd6:	f7f4 fe1b 	bl	8000c10 <__aeabi_dcmplt>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f040 80b7 	bne.w	800c14e <_dtoa_r+0x6e6>
 800bfe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfe2:	429f      	cmp	r7, r3
 800bfe4:	f43f af7a 	beq.w	800bedc <_dtoa_r+0x474>
 800bfe8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfec:	2200      	movs	r2, #0
 800bfee:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <_dtoa_r+0x5b0>)
 800bff0:	f7f4 fb9c 	bl	800072c <__aeabi_dmul>
 800bff4:	2200      	movs	r2, #0
 800bff6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bffe:	4b06      	ldr	r3, [pc, #24]	; (800c018 <_dtoa_r+0x5b0>)
 800c000:	f7f4 fb94 	bl	800072c <__aeabi_dmul>
 800c004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c008:	e7c3      	b.n	800bf92 <_dtoa_r+0x52a>
 800c00a:	bf00      	nop
 800c00c:	0800eb70 	.word	0x0800eb70
 800c010:	0800eb48 	.word	0x0800eb48
 800c014:	3ff00000 	.word	0x3ff00000
 800c018:	40240000 	.word	0x40240000
 800c01c:	401c0000 	.word	0x401c0000
 800c020:	40140000 	.word	0x40140000
 800c024:	3fe00000 	.word	0x3fe00000
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 fb7e 	bl	800072c <__aeabi_dmul>
 800c030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c032:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c036:	9c03      	ldr	r4, [sp, #12]
 800c038:	9314      	str	r3, [sp, #80]	; 0x50
 800c03a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c03e:	f7f4 fe25 	bl	8000c8c <__aeabi_d2iz>
 800c042:	9015      	str	r0, [sp, #84]	; 0x54
 800c044:	f7f4 fb08 	bl	8000658 <__aeabi_i2d>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c050:	f7f4 f9b4 	bl	80003bc <__aeabi_dsub>
 800c054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c056:	4606      	mov	r6, r0
 800c058:	3330      	adds	r3, #48	; 0x30
 800c05a:	f804 3b01 	strb.w	r3, [r4], #1
 800c05e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c060:	460f      	mov	r7, r1
 800c062:	429c      	cmp	r4, r3
 800c064:	f04f 0200 	mov.w	r2, #0
 800c068:	d124      	bne.n	800c0b4 <_dtoa_r+0x64c>
 800c06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c06e:	4bb0      	ldr	r3, [pc, #704]	; (800c330 <_dtoa_r+0x8c8>)
 800c070:	f7f4 f9a6 	bl	80003c0 <__adddf3>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	4630      	mov	r0, r6
 800c07a:	4639      	mov	r1, r7
 800c07c:	f7f4 fde6 	bl	8000c4c <__aeabi_dcmpgt>
 800c080:	2800      	cmp	r0, #0
 800c082:	d163      	bne.n	800c14c <_dtoa_r+0x6e4>
 800c084:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c088:	2000      	movs	r0, #0
 800c08a:	49a9      	ldr	r1, [pc, #676]	; (800c330 <_dtoa_r+0x8c8>)
 800c08c:	f7f4 f996 	bl	80003bc <__aeabi_dsub>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4630      	mov	r0, r6
 800c096:	4639      	mov	r1, r7
 800c098:	f7f4 fdba 	bl	8000c10 <__aeabi_dcmplt>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	f43f af1d 	beq.w	800bedc <_dtoa_r+0x474>
 800c0a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c0a4:	1e7b      	subs	r3, r7, #1
 800c0a6:	9314      	str	r3, [sp, #80]	; 0x50
 800c0a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c0ac:	2b30      	cmp	r3, #48	; 0x30
 800c0ae:	d0f8      	beq.n	800c0a2 <_dtoa_r+0x63a>
 800c0b0:	46c2      	mov	sl, r8
 800c0b2:	e03b      	b.n	800c12c <_dtoa_r+0x6c4>
 800c0b4:	4b9f      	ldr	r3, [pc, #636]	; (800c334 <_dtoa_r+0x8cc>)
 800c0b6:	f7f4 fb39 	bl	800072c <__aeabi_dmul>
 800c0ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0be:	e7bc      	b.n	800c03a <_dtoa_r+0x5d2>
 800c0c0:	9f03      	ldr	r7, [sp, #12]
 800c0c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c0c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 fc57 	bl	8000980 <__aeabi_ddiv>
 800c0d2:	f7f4 fddb 	bl	8000c8c <__aeabi_d2iz>
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	f7f4 fabe 	bl	8000658 <__aeabi_i2d>
 800c0dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0e0:	f7f4 fb24 	bl	800072c <__aeabi_dmul>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	f7f4 f966 	bl	80003bc <__aeabi_dsub>
 800c0f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c0f4:	f807 6b01 	strb.w	r6, [r7], #1
 800c0f8:	9e03      	ldr	r6, [sp, #12]
 800c0fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c0fe:	1bbe      	subs	r6, r7, r6
 800c100:	45b4      	cmp	ip, r6
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	d136      	bne.n	800c176 <_dtoa_r+0x70e>
 800c108:	f7f4 f95a 	bl	80003c0 <__adddf3>
 800c10c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c110:	4680      	mov	r8, r0
 800c112:	4689      	mov	r9, r1
 800c114:	f7f4 fd9a 	bl	8000c4c <__aeabi_dcmpgt>
 800c118:	bb58      	cbnz	r0, 800c172 <_dtoa_r+0x70a>
 800c11a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c11e:	4640      	mov	r0, r8
 800c120:	4649      	mov	r1, r9
 800c122:	f7f4 fd6b 	bl	8000bfc <__aeabi_dcmpeq>
 800c126:	b108      	cbz	r0, 800c12c <_dtoa_r+0x6c4>
 800c128:	07e1      	lsls	r1, r4, #31
 800c12a:	d422      	bmi.n	800c172 <_dtoa_r+0x70a>
 800c12c:	4628      	mov	r0, r5
 800c12e:	4659      	mov	r1, fp
 800c130:	f001 f888 	bl	800d244 <_Bfree>
 800c134:	2300      	movs	r3, #0
 800c136:	703b      	strb	r3, [r7, #0]
 800c138:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c13a:	f10a 0001 	add.w	r0, sl, #1
 800c13e:	6018      	str	r0, [r3, #0]
 800c140:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c142:	2b00      	cmp	r3, #0
 800c144:	f43f acde 	beq.w	800bb04 <_dtoa_r+0x9c>
 800c148:	601f      	str	r7, [r3, #0]
 800c14a:	e4db      	b.n	800bb04 <_dtoa_r+0x9c>
 800c14c:	4627      	mov	r7, r4
 800c14e:	463b      	mov	r3, r7
 800c150:	461f      	mov	r7, r3
 800c152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c156:	2a39      	cmp	r2, #57	; 0x39
 800c158:	d107      	bne.n	800c16a <_dtoa_r+0x702>
 800c15a:	9a03      	ldr	r2, [sp, #12]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d1f7      	bne.n	800c150 <_dtoa_r+0x6e8>
 800c160:	2230      	movs	r2, #48	; 0x30
 800c162:	9903      	ldr	r1, [sp, #12]
 800c164:	f108 0801 	add.w	r8, r8, #1
 800c168:	700a      	strb	r2, [r1, #0]
 800c16a:	781a      	ldrb	r2, [r3, #0]
 800c16c:	3201      	adds	r2, #1
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	e79e      	b.n	800c0b0 <_dtoa_r+0x648>
 800c172:	46d0      	mov	r8, sl
 800c174:	e7eb      	b.n	800c14e <_dtoa_r+0x6e6>
 800c176:	2200      	movs	r2, #0
 800c178:	4b6e      	ldr	r3, [pc, #440]	; (800c334 <_dtoa_r+0x8cc>)
 800c17a:	f7f4 fad7 	bl	800072c <__aeabi_dmul>
 800c17e:	2200      	movs	r2, #0
 800c180:	2300      	movs	r3, #0
 800c182:	4680      	mov	r8, r0
 800c184:	4689      	mov	r9, r1
 800c186:	f7f4 fd39 	bl	8000bfc <__aeabi_dcmpeq>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d09b      	beq.n	800c0c6 <_dtoa_r+0x65e>
 800c18e:	e7cd      	b.n	800c12c <_dtoa_r+0x6c4>
 800c190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c192:	2a00      	cmp	r2, #0
 800c194:	f000 80d0 	beq.w	800c338 <_dtoa_r+0x8d0>
 800c198:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c19a:	2a01      	cmp	r2, #1
 800c19c:	f300 80ae 	bgt.w	800c2fc <_dtoa_r+0x894>
 800c1a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1a2:	2a00      	cmp	r2, #0
 800c1a4:	f000 80a6 	beq.w	800c2f4 <_dtoa_r+0x88c>
 800c1a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c1ae:	9f06      	ldr	r7, [sp, #24]
 800c1b0:	9a06      	ldr	r2, [sp, #24]
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	441a      	add	r2, r3
 800c1b6:	9206      	str	r2, [sp, #24]
 800c1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	441a      	add	r2, r3
 800c1be:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c0:	f001 f940 	bl	800d444 <__i2b>
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	2f00      	cmp	r7, #0
 800c1c8:	dd0c      	ble.n	800c1e4 <_dtoa_r+0x77c>
 800c1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	dd09      	ble.n	800c1e4 <_dtoa_r+0x77c>
 800c1d0:	42bb      	cmp	r3, r7
 800c1d2:	bfa8      	it	ge
 800c1d4:	463b      	movge	r3, r7
 800c1d6:	9a06      	ldr	r2, [sp, #24]
 800c1d8:	1aff      	subs	r7, r7, r3
 800c1da:	1ad2      	subs	r2, r2, r3
 800c1dc:	9206      	str	r2, [sp, #24]
 800c1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e6:	b1f3      	cbz	r3, 800c226 <_dtoa_r+0x7be>
 800c1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f000 80a8 	beq.w	800c340 <_dtoa_r+0x8d8>
 800c1f0:	2c00      	cmp	r4, #0
 800c1f2:	dd10      	ble.n	800c216 <_dtoa_r+0x7ae>
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f001 f9e1 	bl	800d5c0 <__pow5mult>
 800c1fe:	465a      	mov	r2, fp
 800c200:	4601      	mov	r1, r0
 800c202:	4606      	mov	r6, r0
 800c204:	4628      	mov	r0, r5
 800c206:	f001 f933 	bl	800d470 <__multiply>
 800c20a:	4680      	mov	r8, r0
 800c20c:	4659      	mov	r1, fp
 800c20e:	4628      	mov	r0, r5
 800c210:	f001 f818 	bl	800d244 <_Bfree>
 800c214:	46c3      	mov	fp, r8
 800c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c218:	1b1a      	subs	r2, r3, r4
 800c21a:	d004      	beq.n	800c226 <_dtoa_r+0x7be>
 800c21c:	4659      	mov	r1, fp
 800c21e:	4628      	mov	r0, r5
 800c220:	f001 f9ce 	bl	800d5c0 <__pow5mult>
 800c224:	4683      	mov	fp, r0
 800c226:	2101      	movs	r1, #1
 800c228:	4628      	mov	r0, r5
 800c22a:	f001 f90b 	bl	800d444 <__i2b>
 800c22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c230:	4604      	mov	r4, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	f340 8086 	ble.w	800c344 <_dtoa_r+0x8dc>
 800c238:	461a      	mov	r2, r3
 800c23a:	4601      	mov	r1, r0
 800c23c:	4628      	mov	r0, r5
 800c23e:	f001 f9bf 	bl	800d5c0 <__pow5mult>
 800c242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c244:	4604      	mov	r4, r0
 800c246:	2b01      	cmp	r3, #1
 800c248:	dd7f      	ble.n	800c34a <_dtoa_r+0x8e2>
 800c24a:	f04f 0800 	mov.w	r8, #0
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c254:	6918      	ldr	r0, [r3, #16]
 800c256:	f001 f8a7 	bl	800d3a8 <__hi0bits>
 800c25a:	f1c0 0020 	rsb	r0, r0, #32
 800c25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c260:	4418      	add	r0, r3
 800c262:	f010 001f 	ands.w	r0, r0, #31
 800c266:	f000 8092 	beq.w	800c38e <_dtoa_r+0x926>
 800c26a:	f1c0 0320 	rsb	r3, r0, #32
 800c26e:	2b04      	cmp	r3, #4
 800c270:	f340 808a 	ble.w	800c388 <_dtoa_r+0x920>
 800c274:	f1c0 001c 	rsb	r0, r0, #28
 800c278:	9b06      	ldr	r3, [sp, #24]
 800c27a:	4407      	add	r7, r0
 800c27c:	4403      	add	r3, r0
 800c27e:	9306      	str	r3, [sp, #24]
 800c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c282:	4403      	add	r3, r0
 800c284:	9309      	str	r3, [sp, #36]	; 0x24
 800c286:	9b06      	ldr	r3, [sp, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dd05      	ble.n	800c298 <_dtoa_r+0x830>
 800c28c:	4659      	mov	r1, fp
 800c28e:	461a      	mov	r2, r3
 800c290:	4628      	mov	r0, r5
 800c292:	f001 f9ef 	bl	800d674 <__lshift>
 800c296:	4683      	mov	fp, r0
 800c298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	dd05      	ble.n	800c2aa <_dtoa_r+0x842>
 800c29e:	4621      	mov	r1, r4
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f001 f9e6 	bl	800d674 <__lshift>
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d070      	beq.n	800c392 <_dtoa_r+0x92a>
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f001 fa4e 	bl	800d754 <__mcmp>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	da6a      	bge.n	800c392 <_dtoa_r+0x92a>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4659      	mov	r1, fp
 800c2c0:	220a      	movs	r2, #10
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f000 ffe0 	bl	800d288 <__multadd>
 800c2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ca:	4683      	mov	fp, r0
 800c2cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 8194 	beq.w	800c5fe <_dtoa_r+0xb96>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	2300      	movs	r3, #0
 800c2da:	220a      	movs	r2, #10
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f000 ffd3 	bl	800d288 <__multadd>
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	f300 8093 	bgt.w	800c412 <_dtoa_r+0x9aa>
 800c2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	dc57      	bgt.n	800c3a2 <_dtoa_r+0x93a>
 800c2f2:	e08e      	b.n	800c412 <_dtoa_r+0x9aa>
 800c2f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c2f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2fa:	e757      	b.n	800c1ac <_dtoa_r+0x744>
 800c2fc:	9b08      	ldr	r3, [sp, #32]
 800c2fe:	1e5c      	subs	r4, r3, #1
 800c300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c302:	42a3      	cmp	r3, r4
 800c304:	bfb7      	itett	lt
 800c306:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c308:	1b1c      	subge	r4, r3, r4
 800c30a:	1ae2      	sublt	r2, r4, r3
 800c30c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c30e:	bfbe      	ittt	lt
 800c310:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c312:	189b      	addlt	r3, r3, r2
 800c314:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c316:	9b08      	ldr	r3, [sp, #32]
 800c318:	bfb8      	it	lt
 800c31a:	2400      	movlt	r4, #0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	bfbb      	ittet	lt
 800c320:	9b06      	ldrlt	r3, [sp, #24]
 800c322:	9a08      	ldrlt	r2, [sp, #32]
 800c324:	9f06      	ldrge	r7, [sp, #24]
 800c326:	1a9f      	sublt	r7, r3, r2
 800c328:	bfac      	ite	ge
 800c32a:	9b08      	ldrge	r3, [sp, #32]
 800c32c:	2300      	movlt	r3, #0
 800c32e:	e73f      	b.n	800c1b0 <_dtoa_r+0x748>
 800c330:	3fe00000 	.word	0x3fe00000
 800c334:	40240000 	.word	0x40240000
 800c338:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c33a:	9f06      	ldr	r7, [sp, #24]
 800c33c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c33e:	e742      	b.n	800c1c6 <_dtoa_r+0x75e>
 800c340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c342:	e76b      	b.n	800c21c <_dtoa_r+0x7b4>
 800c344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c346:	2b01      	cmp	r3, #1
 800c348:	dc19      	bgt.n	800c37e <_dtoa_r+0x916>
 800c34a:	9b04      	ldr	r3, [sp, #16]
 800c34c:	b9bb      	cbnz	r3, 800c37e <_dtoa_r+0x916>
 800c34e:	9b05      	ldr	r3, [sp, #20]
 800c350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c354:	b99b      	cbnz	r3, 800c37e <_dtoa_r+0x916>
 800c356:	9b05      	ldr	r3, [sp, #20]
 800c358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c35c:	0d1b      	lsrs	r3, r3, #20
 800c35e:	051b      	lsls	r3, r3, #20
 800c360:	b183      	cbz	r3, 800c384 <_dtoa_r+0x91c>
 800c362:	f04f 0801 	mov.w	r8, #1
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	3301      	adds	r3, #1
 800c36a:	9306      	str	r3, [sp, #24]
 800c36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c36e:	3301      	adds	r3, #1
 800c370:	9309      	str	r3, [sp, #36]	; 0x24
 800c372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c374:	2b00      	cmp	r3, #0
 800c376:	f47f af6a 	bne.w	800c24e <_dtoa_r+0x7e6>
 800c37a:	2001      	movs	r0, #1
 800c37c:	e76f      	b.n	800c25e <_dtoa_r+0x7f6>
 800c37e:	f04f 0800 	mov.w	r8, #0
 800c382:	e7f6      	b.n	800c372 <_dtoa_r+0x90a>
 800c384:	4698      	mov	r8, r3
 800c386:	e7f4      	b.n	800c372 <_dtoa_r+0x90a>
 800c388:	f43f af7d 	beq.w	800c286 <_dtoa_r+0x81e>
 800c38c:	4618      	mov	r0, r3
 800c38e:	301c      	adds	r0, #28
 800c390:	e772      	b.n	800c278 <_dtoa_r+0x810>
 800c392:	9b08      	ldr	r3, [sp, #32]
 800c394:	2b00      	cmp	r3, #0
 800c396:	dc36      	bgt.n	800c406 <_dtoa_r+0x99e>
 800c398:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	dd33      	ble.n	800c406 <_dtoa_r+0x99e>
 800c39e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3a2:	f1b9 0f00 	cmp.w	r9, #0
 800c3a6:	d10d      	bne.n	800c3c4 <_dtoa_r+0x95c>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	464b      	mov	r3, r9
 800c3ac:	2205      	movs	r2, #5
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f000 ff6a 	bl	800d288 <__multadd>
 800c3b4:	4601      	mov	r1, r0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4658      	mov	r0, fp
 800c3ba:	f001 f9cb 	bl	800d754 <__mcmp>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	f73f adb8 	bgt.w	800bf34 <_dtoa_r+0x4cc>
 800c3c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3c6:	9f03      	ldr	r7, [sp, #12]
 800c3c8:	ea6f 0a03 	mvn.w	sl, r3
 800c3cc:	f04f 0800 	mov.w	r8, #0
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f000 ff36 	bl	800d244 <_Bfree>
 800c3d8:	2e00      	cmp	r6, #0
 800c3da:	f43f aea7 	beq.w	800c12c <_dtoa_r+0x6c4>
 800c3de:	f1b8 0f00 	cmp.w	r8, #0
 800c3e2:	d005      	beq.n	800c3f0 <_dtoa_r+0x988>
 800c3e4:	45b0      	cmp	r8, r6
 800c3e6:	d003      	beq.n	800c3f0 <_dtoa_r+0x988>
 800c3e8:	4641      	mov	r1, r8
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f000 ff2a 	bl	800d244 <_Bfree>
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 ff26 	bl	800d244 <_Bfree>
 800c3f8:	e698      	b.n	800c12c <_dtoa_r+0x6c4>
 800c3fa:	2400      	movs	r4, #0
 800c3fc:	4626      	mov	r6, r4
 800c3fe:	e7e1      	b.n	800c3c4 <_dtoa_r+0x95c>
 800c400:	46c2      	mov	sl, r8
 800c402:	4626      	mov	r6, r4
 800c404:	e596      	b.n	800bf34 <_dtoa_r+0x4cc>
 800c406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 80fd 	beq.w	800c60c <_dtoa_r+0xba4>
 800c412:	2f00      	cmp	r7, #0
 800c414:	dd05      	ble.n	800c422 <_dtoa_r+0x9ba>
 800c416:	4631      	mov	r1, r6
 800c418:	463a      	mov	r2, r7
 800c41a:	4628      	mov	r0, r5
 800c41c:	f001 f92a 	bl	800d674 <__lshift>
 800c420:	4606      	mov	r6, r0
 800c422:	f1b8 0f00 	cmp.w	r8, #0
 800c426:	d05c      	beq.n	800c4e2 <_dtoa_r+0xa7a>
 800c428:	4628      	mov	r0, r5
 800c42a:	6871      	ldr	r1, [r6, #4]
 800c42c:	f000 feca 	bl	800d1c4 <_Balloc>
 800c430:	4607      	mov	r7, r0
 800c432:	b928      	cbnz	r0, 800c440 <_dtoa_r+0x9d8>
 800c434:	4602      	mov	r2, r0
 800c436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c43a:	4b7f      	ldr	r3, [pc, #508]	; (800c638 <_dtoa_r+0xbd0>)
 800c43c:	f7ff bb28 	b.w	800ba90 <_dtoa_r+0x28>
 800c440:	6932      	ldr	r2, [r6, #16]
 800c442:	f106 010c 	add.w	r1, r6, #12
 800c446:	3202      	adds	r2, #2
 800c448:	0092      	lsls	r2, r2, #2
 800c44a:	300c      	adds	r0, #12
 800c44c:	f7fd fb64 	bl	8009b18 <memcpy>
 800c450:	2201      	movs	r2, #1
 800c452:	4639      	mov	r1, r7
 800c454:	4628      	mov	r0, r5
 800c456:	f001 f90d 	bl	800d674 <__lshift>
 800c45a:	46b0      	mov	r8, r6
 800c45c:	4606      	mov	r6, r0
 800c45e:	9b03      	ldr	r3, [sp, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	9308      	str	r3, [sp, #32]
 800c464:	9b03      	ldr	r3, [sp, #12]
 800c466:	444b      	add	r3, r9
 800c468:	930a      	str	r3, [sp, #40]	; 0x28
 800c46a:	9b04      	ldr	r3, [sp, #16]
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	9309      	str	r3, [sp, #36]	; 0x24
 800c472:	9b08      	ldr	r3, [sp, #32]
 800c474:	4621      	mov	r1, r4
 800c476:	3b01      	subs	r3, #1
 800c478:	4658      	mov	r0, fp
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	f7ff fa68 	bl	800b950 <quorem>
 800c480:	4603      	mov	r3, r0
 800c482:	4641      	mov	r1, r8
 800c484:	3330      	adds	r3, #48	; 0x30
 800c486:	9006      	str	r0, [sp, #24]
 800c488:	4658      	mov	r0, fp
 800c48a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c48c:	f001 f962 	bl	800d754 <__mcmp>
 800c490:	4632      	mov	r2, r6
 800c492:	4681      	mov	r9, r0
 800c494:	4621      	mov	r1, r4
 800c496:	4628      	mov	r0, r5
 800c498:	f001 f978 	bl	800d78c <__mdiff>
 800c49c:	68c2      	ldr	r2, [r0, #12]
 800c49e:	4607      	mov	r7, r0
 800c4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4a2:	bb02      	cbnz	r2, 800c4e6 <_dtoa_r+0xa7e>
 800c4a4:	4601      	mov	r1, r0
 800c4a6:	4658      	mov	r0, fp
 800c4a8:	f001 f954 	bl	800d754 <__mcmp>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b0:	4639      	mov	r1, r7
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c4b8:	f000 fec4 	bl	800d244 <_Bfree>
 800c4bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4c0:	9f08      	ldr	r7, [sp, #32]
 800c4c2:	ea43 0102 	orr.w	r1, r3, r2
 800c4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c8:	430b      	orrs	r3, r1
 800c4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4cc:	d10d      	bne.n	800c4ea <_dtoa_r+0xa82>
 800c4ce:	2b39      	cmp	r3, #57	; 0x39
 800c4d0:	d029      	beq.n	800c526 <_dtoa_r+0xabe>
 800c4d2:	f1b9 0f00 	cmp.w	r9, #0
 800c4d6:	dd01      	ble.n	800c4dc <_dtoa_r+0xa74>
 800c4d8:	9b06      	ldr	r3, [sp, #24]
 800c4da:	3331      	adds	r3, #49	; 0x31
 800c4dc:	9a04      	ldr	r2, [sp, #16]
 800c4de:	7013      	strb	r3, [r2, #0]
 800c4e0:	e776      	b.n	800c3d0 <_dtoa_r+0x968>
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	e7b9      	b.n	800c45a <_dtoa_r+0x9f2>
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	e7e2      	b.n	800c4b0 <_dtoa_r+0xa48>
 800c4ea:	f1b9 0f00 	cmp.w	r9, #0
 800c4ee:	db06      	blt.n	800c4fe <_dtoa_r+0xa96>
 800c4f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c4f2:	ea41 0909 	orr.w	r9, r1, r9
 800c4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4f8:	ea59 0101 	orrs.w	r1, r9, r1
 800c4fc:	d120      	bne.n	800c540 <_dtoa_r+0xad8>
 800c4fe:	2a00      	cmp	r2, #0
 800c500:	ddec      	ble.n	800c4dc <_dtoa_r+0xa74>
 800c502:	4659      	mov	r1, fp
 800c504:	2201      	movs	r2, #1
 800c506:	4628      	mov	r0, r5
 800c508:	9308      	str	r3, [sp, #32]
 800c50a:	f001 f8b3 	bl	800d674 <__lshift>
 800c50e:	4621      	mov	r1, r4
 800c510:	4683      	mov	fp, r0
 800c512:	f001 f91f 	bl	800d754 <__mcmp>
 800c516:	2800      	cmp	r0, #0
 800c518:	9b08      	ldr	r3, [sp, #32]
 800c51a:	dc02      	bgt.n	800c522 <_dtoa_r+0xaba>
 800c51c:	d1de      	bne.n	800c4dc <_dtoa_r+0xa74>
 800c51e:	07da      	lsls	r2, r3, #31
 800c520:	d5dc      	bpl.n	800c4dc <_dtoa_r+0xa74>
 800c522:	2b39      	cmp	r3, #57	; 0x39
 800c524:	d1d8      	bne.n	800c4d8 <_dtoa_r+0xa70>
 800c526:	2339      	movs	r3, #57	; 0x39
 800c528:	9a04      	ldr	r2, [sp, #16]
 800c52a:	7013      	strb	r3, [r2, #0]
 800c52c:	463b      	mov	r3, r7
 800c52e:	461f      	mov	r7, r3
 800c530:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c534:	3b01      	subs	r3, #1
 800c536:	2a39      	cmp	r2, #57	; 0x39
 800c538:	d050      	beq.n	800c5dc <_dtoa_r+0xb74>
 800c53a:	3201      	adds	r2, #1
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	e747      	b.n	800c3d0 <_dtoa_r+0x968>
 800c540:	2a00      	cmp	r2, #0
 800c542:	dd03      	ble.n	800c54c <_dtoa_r+0xae4>
 800c544:	2b39      	cmp	r3, #57	; 0x39
 800c546:	d0ee      	beq.n	800c526 <_dtoa_r+0xabe>
 800c548:	3301      	adds	r3, #1
 800c54a:	e7c7      	b.n	800c4dc <_dtoa_r+0xa74>
 800c54c:	9a08      	ldr	r2, [sp, #32]
 800c54e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c550:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c554:	428a      	cmp	r2, r1
 800c556:	d02a      	beq.n	800c5ae <_dtoa_r+0xb46>
 800c558:	4659      	mov	r1, fp
 800c55a:	2300      	movs	r3, #0
 800c55c:	220a      	movs	r2, #10
 800c55e:	4628      	mov	r0, r5
 800c560:	f000 fe92 	bl	800d288 <__multadd>
 800c564:	45b0      	cmp	r8, r6
 800c566:	4683      	mov	fp, r0
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	f04f 020a 	mov.w	r2, #10
 800c570:	4641      	mov	r1, r8
 800c572:	4628      	mov	r0, r5
 800c574:	d107      	bne.n	800c586 <_dtoa_r+0xb1e>
 800c576:	f000 fe87 	bl	800d288 <__multadd>
 800c57a:	4680      	mov	r8, r0
 800c57c:	4606      	mov	r6, r0
 800c57e:	9b08      	ldr	r3, [sp, #32]
 800c580:	3301      	adds	r3, #1
 800c582:	9308      	str	r3, [sp, #32]
 800c584:	e775      	b.n	800c472 <_dtoa_r+0xa0a>
 800c586:	f000 fe7f 	bl	800d288 <__multadd>
 800c58a:	4631      	mov	r1, r6
 800c58c:	4680      	mov	r8, r0
 800c58e:	2300      	movs	r3, #0
 800c590:	220a      	movs	r2, #10
 800c592:	4628      	mov	r0, r5
 800c594:	f000 fe78 	bl	800d288 <__multadd>
 800c598:	4606      	mov	r6, r0
 800c59a:	e7f0      	b.n	800c57e <_dtoa_r+0xb16>
 800c59c:	f1b9 0f00 	cmp.w	r9, #0
 800c5a0:	bfcc      	ite	gt
 800c5a2:	464f      	movgt	r7, r9
 800c5a4:	2701      	movle	r7, #1
 800c5a6:	f04f 0800 	mov.w	r8, #0
 800c5aa:	9a03      	ldr	r2, [sp, #12]
 800c5ac:	4417      	add	r7, r2
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	9308      	str	r3, [sp, #32]
 800c5b6:	f001 f85d 	bl	800d674 <__lshift>
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	4683      	mov	fp, r0
 800c5be:	f001 f8c9 	bl	800d754 <__mcmp>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	dcb2      	bgt.n	800c52c <_dtoa_r+0xac4>
 800c5c6:	d102      	bne.n	800c5ce <_dtoa_r+0xb66>
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	07db      	lsls	r3, r3, #31
 800c5cc:	d4ae      	bmi.n	800c52c <_dtoa_r+0xac4>
 800c5ce:	463b      	mov	r3, r7
 800c5d0:	461f      	mov	r7, r3
 800c5d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5d6:	2a30      	cmp	r2, #48	; 0x30
 800c5d8:	d0fa      	beq.n	800c5d0 <_dtoa_r+0xb68>
 800c5da:	e6f9      	b.n	800c3d0 <_dtoa_r+0x968>
 800c5dc:	9a03      	ldr	r2, [sp, #12]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d1a5      	bne.n	800c52e <_dtoa_r+0xac6>
 800c5e2:	2331      	movs	r3, #49	; 0x31
 800c5e4:	f10a 0a01 	add.w	sl, sl, #1
 800c5e8:	e779      	b.n	800c4de <_dtoa_r+0xa76>
 800c5ea:	4b14      	ldr	r3, [pc, #80]	; (800c63c <_dtoa_r+0xbd4>)
 800c5ec:	f7ff baa8 	b.w	800bb40 <_dtoa_r+0xd8>
 800c5f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f47f aa81 	bne.w	800bafa <_dtoa_r+0x92>
 800c5f8:	4b11      	ldr	r3, [pc, #68]	; (800c640 <_dtoa_r+0xbd8>)
 800c5fa:	f7ff baa1 	b.w	800bb40 <_dtoa_r+0xd8>
 800c5fe:	f1b9 0f00 	cmp.w	r9, #0
 800c602:	dc03      	bgt.n	800c60c <_dtoa_r+0xba4>
 800c604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c606:	2b02      	cmp	r3, #2
 800c608:	f73f aecb 	bgt.w	800c3a2 <_dtoa_r+0x93a>
 800c60c:	9f03      	ldr	r7, [sp, #12]
 800c60e:	4621      	mov	r1, r4
 800c610:	4658      	mov	r0, fp
 800c612:	f7ff f99d 	bl	800b950 <quorem>
 800c616:	9a03      	ldr	r2, [sp, #12]
 800c618:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c61c:	f807 3b01 	strb.w	r3, [r7], #1
 800c620:	1aba      	subs	r2, r7, r2
 800c622:	4591      	cmp	r9, r2
 800c624:	ddba      	ble.n	800c59c <_dtoa_r+0xb34>
 800c626:	4659      	mov	r1, fp
 800c628:	2300      	movs	r3, #0
 800c62a:	220a      	movs	r2, #10
 800c62c:	4628      	mov	r0, r5
 800c62e:	f000 fe2b 	bl	800d288 <__multadd>
 800c632:	4683      	mov	fp, r0
 800c634:	e7eb      	b.n	800c60e <_dtoa_r+0xba6>
 800c636:	bf00      	nop
 800c638:	0800e9f9 	.word	0x0800e9f9
 800c63c:	0800e760 	.word	0x0800e760
 800c640:	0800e991 	.word	0x0800e991

0800c644 <__sflush_r>:
 800c644:	898a      	ldrh	r2, [r1, #12]
 800c646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c648:	4605      	mov	r5, r0
 800c64a:	0710      	lsls	r0, r2, #28
 800c64c:	460c      	mov	r4, r1
 800c64e:	d457      	bmi.n	800c700 <__sflush_r+0xbc>
 800c650:	684b      	ldr	r3, [r1, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	dc04      	bgt.n	800c660 <__sflush_r+0x1c>
 800c656:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c658:	2b00      	cmp	r3, #0
 800c65a:	dc01      	bgt.n	800c660 <__sflush_r+0x1c>
 800c65c:	2000      	movs	r0, #0
 800c65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c662:	2e00      	cmp	r6, #0
 800c664:	d0fa      	beq.n	800c65c <__sflush_r+0x18>
 800c666:	2300      	movs	r3, #0
 800c668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c66c:	682f      	ldr	r7, [r5, #0]
 800c66e:	602b      	str	r3, [r5, #0]
 800c670:	d032      	beq.n	800c6d8 <__sflush_r+0x94>
 800c672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	075a      	lsls	r2, r3, #29
 800c678:	d505      	bpl.n	800c686 <__sflush_r+0x42>
 800c67a:	6863      	ldr	r3, [r4, #4]
 800c67c:	1ac0      	subs	r0, r0, r3
 800c67e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c680:	b10b      	cbz	r3, 800c686 <__sflush_r+0x42>
 800c682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c684:	1ac0      	subs	r0, r0, r3
 800c686:	2300      	movs	r3, #0
 800c688:	4602      	mov	r2, r0
 800c68a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c68c:	4628      	mov	r0, r5
 800c68e:	6a21      	ldr	r1, [r4, #32]
 800c690:	47b0      	blx	r6
 800c692:	1c43      	adds	r3, r0, #1
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	d106      	bne.n	800c6a6 <__sflush_r+0x62>
 800c698:	6829      	ldr	r1, [r5, #0]
 800c69a:	291d      	cmp	r1, #29
 800c69c:	d82c      	bhi.n	800c6f8 <__sflush_r+0xb4>
 800c69e:	4a29      	ldr	r2, [pc, #164]	; (800c744 <__sflush_r+0x100>)
 800c6a0:	40ca      	lsrs	r2, r1
 800c6a2:	07d6      	lsls	r6, r2, #31
 800c6a4:	d528      	bpl.n	800c6f8 <__sflush_r+0xb4>
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	6062      	str	r2, [r4, #4]
 800c6aa:	6922      	ldr	r2, [r4, #16]
 800c6ac:	04d9      	lsls	r1, r3, #19
 800c6ae:	6022      	str	r2, [r4, #0]
 800c6b0:	d504      	bpl.n	800c6bc <__sflush_r+0x78>
 800c6b2:	1c42      	adds	r2, r0, #1
 800c6b4:	d101      	bne.n	800c6ba <__sflush_r+0x76>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	b903      	cbnz	r3, 800c6bc <__sflush_r+0x78>
 800c6ba:	6560      	str	r0, [r4, #84]	; 0x54
 800c6bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6be:	602f      	str	r7, [r5, #0]
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	d0cb      	beq.n	800c65c <__sflush_r+0x18>
 800c6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6c8:	4299      	cmp	r1, r3
 800c6ca:	d002      	beq.n	800c6d2 <__sflush_r+0x8e>
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f001 fa45 	bl	800db5c <_free_r>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c6d6:	e7c2      	b.n	800c65e <__sflush_r+0x1a>
 800c6d8:	6a21      	ldr	r1, [r4, #32]
 800c6da:	2301      	movs	r3, #1
 800c6dc:	4628      	mov	r0, r5
 800c6de:	47b0      	blx	r6
 800c6e0:	1c41      	adds	r1, r0, #1
 800c6e2:	d1c7      	bne.n	800c674 <__sflush_r+0x30>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0c4      	beq.n	800c674 <__sflush_r+0x30>
 800c6ea:	2b1d      	cmp	r3, #29
 800c6ec:	d001      	beq.n	800c6f2 <__sflush_r+0xae>
 800c6ee:	2b16      	cmp	r3, #22
 800c6f0:	d101      	bne.n	800c6f6 <__sflush_r+0xb2>
 800c6f2:	602f      	str	r7, [r5, #0]
 800c6f4:	e7b2      	b.n	800c65c <__sflush_r+0x18>
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6fc:	81a3      	strh	r3, [r4, #12]
 800c6fe:	e7ae      	b.n	800c65e <__sflush_r+0x1a>
 800c700:	690f      	ldr	r7, [r1, #16]
 800c702:	2f00      	cmp	r7, #0
 800c704:	d0aa      	beq.n	800c65c <__sflush_r+0x18>
 800c706:	0793      	lsls	r3, r2, #30
 800c708:	bf18      	it	ne
 800c70a:	2300      	movne	r3, #0
 800c70c:	680e      	ldr	r6, [r1, #0]
 800c70e:	bf08      	it	eq
 800c710:	694b      	ldreq	r3, [r1, #20]
 800c712:	1bf6      	subs	r6, r6, r7
 800c714:	600f      	str	r7, [r1, #0]
 800c716:	608b      	str	r3, [r1, #8]
 800c718:	2e00      	cmp	r6, #0
 800c71a:	dd9f      	ble.n	800c65c <__sflush_r+0x18>
 800c71c:	4633      	mov	r3, r6
 800c71e:	463a      	mov	r2, r7
 800c720:	4628      	mov	r0, r5
 800c722:	6a21      	ldr	r1, [r4, #32]
 800c724:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c728:	47e0      	blx	ip
 800c72a:	2800      	cmp	r0, #0
 800c72c:	dc06      	bgt.n	800c73c <__sflush_r+0xf8>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	f04f 30ff 	mov.w	r0, #4294967295
 800c734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c738:	81a3      	strh	r3, [r4, #12]
 800c73a:	e790      	b.n	800c65e <__sflush_r+0x1a>
 800c73c:	4407      	add	r7, r0
 800c73e:	1a36      	subs	r6, r6, r0
 800c740:	e7ea      	b.n	800c718 <__sflush_r+0xd4>
 800c742:	bf00      	nop
 800c744:	20400001 	.word	0x20400001

0800c748 <_fflush_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	690b      	ldr	r3, [r1, #16]
 800c74c:	4605      	mov	r5, r0
 800c74e:	460c      	mov	r4, r1
 800c750:	b913      	cbnz	r3, 800c758 <_fflush_r+0x10>
 800c752:	2500      	movs	r5, #0
 800c754:	4628      	mov	r0, r5
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	b118      	cbz	r0, 800c762 <_fflush_r+0x1a>
 800c75a:	6983      	ldr	r3, [r0, #24]
 800c75c:	b90b      	cbnz	r3, 800c762 <_fflush_r+0x1a>
 800c75e:	f000 f887 	bl	800c870 <__sinit>
 800c762:	4b14      	ldr	r3, [pc, #80]	; (800c7b4 <_fflush_r+0x6c>)
 800c764:	429c      	cmp	r4, r3
 800c766:	d11b      	bne.n	800c7a0 <_fflush_r+0x58>
 800c768:	686c      	ldr	r4, [r5, #4]
 800c76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0ef      	beq.n	800c752 <_fflush_r+0xa>
 800c772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c774:	07d0      	lsls	r0, r2, #31
 800c776:	d404      	bmi.n	800c782 <_fflush_r+0x3a>
 800c778:	0599      	lsls	r1, r3, #22
 800c77a:	d402      	bmi.n	800c782 <_fflush_r+0x3a>
 800c77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c77e:	f000 fc92 	bl	800d0a6 <__retarget_lock_acquire_recursive>
 800c782:	4628      	mov	r0, r5
 800c784:	4621      	mov	r1, r4
 800c786:	f7ff ff5d 	bl	800c644 <__sflush_r>
 800c78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c78c:	4605      	mov	r5, r0
 800c78e:	07da      	lsls	r2, r3, #31
 800c790:	d4e0      	bmi.n	800c754 <_fflush_r+0xc>
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	059b      	lsls	r3, r3, #22
 800c796:	d4dd      	bmi.n	800c754 <_fflush_r+0xc>
 800c798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c79a:	f000 fc85 	bl	800d0a8 <__retarget_lock_release_recursive>
 800c79e:	e7d9      	b.n	800c754 <_fflush_r+0xc>
 800c7a0:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <_fflush_r+0x70>)
 800c7a2:	429c      	cmp	r4, r3
 800c7a4:	d101      	bne.n	800c7aa <_fflush_r+0x62>
 800c7a6:	68ac      	ldr	r4, [r5, #8]
 800c7a8:	e7df      	b.n	800c76a <_fflush_r+0x22>
 800c7aa:	4b04      	ldr	r3, [pc, #16]	; (800c7bc <_fflush_r+0x74>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	bf08      	it	eq
 800c7b0:	68ec      	ldreq	r4, [r5, #12]
 800c7b2:	e7da      	b.n	800c76a <_fflush_r+0x22>
 800c7b4:	0800ea2c 	.word	0x0800ea2c
 800c7b8:	0800ea4c 	.word	0x0800ea4c
 800c7bc:	0800ea0c 	.word	0x0800ea0c

0800c7c0 <std>:
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	b510      	push	{r4, lr}
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7ce:	6083      	str	r3, [r0, #8]
 800c7d0:	8181      	strh	r1, [r0, #12]
 800c7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c7d4:	81c2      	strh	r2, [r0, #14]
 800c7d6:	6183      	str	r3, [r0, #24]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	2208      	movs	r2, #8
 800c7dc:	305c      	adds	r0, #92	; 0x5c
 800c7de:	f7fd f9a9 	bl	8009b34 <memset>
 800c7e2:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <std+0x38>)
 800c7e4:	6224      	str	r4, [r4, #32]
 800c7e6:	6263      	str	r3, [r4, #36]	; 0x24
 800c7e8:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <std+0x3c>)
 800c7ea:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7ec:	4b04      	ldr	r3, [pc, #16]	; (800c800 <std+0x40>)
 800c7ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7f0:	4b04      	ldr	r3, [pc, #16]	; (800c804 <std+0x44>)
 800c7f2:	6323      	str	r3, [r4, #48]	; 0x30
 800c7f4:	bd10      	pop	{r4, pc}
 800c7f6:	bf00      	nop
 800c7f8:	0800e339 	.word	0x0800e339
 800c7fc:	0800e35b 	.word	0x0800e35b
 800c800:	0800e393 	.word	0x0800e393
 800c804:	0800e3b7 	.word	0x0800e3b7

0800c808 <_cleanup_r>:
 800c808:	4901      	ldr	r1, [pc, #4]	; (800c810 <_cleanup_r+0x8>)
 800c80a:	f000 b8c1 	b.w	800c990 <_fwalk_reent>
 800c80e:	bf00      	nop
 800c810:	0800c749 	.word	0x0800c749

0800c814 <__sfmoreglue>:
 800c814:	2268      	movs	r2, #104	; 0x68
 800c816:	b570      	push	{r4, r5, r6, lr}
 800c818:	1e4d      	subs	r5, r1, #1
 800c81a:	4355      	muls	r5, r2
 800c81c:	460e      	mov	r6, r1
 800c81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c822:	f001 fa03 	bl	800dc2c <_malloc_r>
 800c826:	4604      	mov	r4, r0
 800c828:	b140      	cbz	r0, 800c83c <__sfmoreglue+0x28>
 800c82a:	2100      	movs	r1, #0
 800c82c:	e9c0 1600 	strd	r1, r6, [r0]
 800c830:	300c      	adds	r0, #12
 800c832:	60a0      	str	r0, [r4, #8]
 800c834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c838:	f7fd f97c 	bl	8009b34 <memset>
 800c83c:	4620      	mov	r0, r4
 800c83e:	bd70      	pop	{r4, r5, r6, pc}

0800c840 <__sfp_lock_acquire>:
 800c840:	4801      	ldr	r0, [pc, #4]	; (800c848 <__sfp_lock_acquire+0x8>)
 800c842:	f000 bc30 	b.w	800d0a6 <__retarget_lock_acquire_recursive>
 800c846:	bf00      	nop
 800c848:	20000cdd 	.word	0x20000cdd

0800c84c <__sfp_lock_release>:
 800c84c:	4801      	ldr	r0, [pc, #4]	; (800c854 <__sfp_lock_release+0x8>)
 800c84e:	f000 bc2b 	b.w	800d0a8 <__retarget_lock_release_recursive>
 800c852:	bf00      	nop
 800c854:	20000cdd 	.word	0x20000cdd

0800c858 <__sinit_lock_acquire>:
 800c858:	4801      	ldr	r0, [pc, #4]	; (800c860 <__sinit_lock_acquire+0x8>)
 800c85a:	f000 bc24 	b.w	800d0a6 <__retarget_lock_acquire_recursive>
 800c85e:	bf00      	nop
 800c860:	20000cde 	.word	0x20000cde

0800c864 <__sinit_lock_release>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__sinit_lock_release+0x8>)
 800c866:	f000 bc1f 	b.w	800d0a8 <__retarget_lock_release_recursive>
 800c86a:	bf00      	nop
 800c86c:	20000cde 	.word	0x20000cde

0800c870 <__sinit>:
 800c870:	b510      	push	{r4, lr}
 800c872:	4604      	mov	r4, r0
 800c874:	f7ff fff0 	bl	800c858 <__sinit_lock_acquire>
 800c878:	69a3      	ldr	r3, [r4, #24]
 800c87a:	b11b      	cbz	r3, 800c884 <__sinit+0x14>
 800c87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c880:	f7ff bff0 	b.w	800c864 <__sinit_lock_release>
 800c884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c888:	6523      	str	r3, [r4, #80]	; 0x50
 800c88a:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <__sinit+0x68>)
 800c88c:	4a13      	ldr	r2, [pc, #76]	; (800c8dc <__sinit+0x6c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	62a2      	str	r2, [r4, #40]	; 0x28
 800c892:	42a3      	cmp	r3, r4
 800c894:	bf08      	it	eq
 800c896:	2301      	moveq	r3, #1
 800c898:	4620      	mov	r0, r4
 800c89a:	bf08      	it	eq
 800c89c:	61a3      	streq	r3, [r4, #24]
 800c89e:	f000 f81f 	bl	800c8e0 <__sfp>
 800c8a2:	6060      	str	r0, [r4, #4]
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 f81b 	bl	800c8e0 <__sfp>
 800c8aa:	60a0      	str	r0, [r4, #8]
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 f817 	bl	800c8e0 <__sfp>
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2104      	movs	r1, #4
 800c8b6:	60e0      	str	r0, [r4, #12]
 800c8b8:	6860      	ldr	r0, [r4, #4]
 800c8ba:	f7ff ff81 	bl	800c7c0 <std>
 800c8be:	2201      	movs	r2, #1
 800c8c0:	2109      	movs	r1, #9
 800c8c2:	68a0      	ldr	r0, [r4, #8]
 800c8c4:	f7ff ff7c 	bl	800c7c0 <std>
 800c8c8:	2202      	movs	r2, #2
 800c8ca:	2112      	movs	r1, #18
 800c8cc:	68e0      	ldr	r0, [r4, #12]
 800c8ce:	f7ff ff77 	bl	800c7c0 <std>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	61a3      	str	r3, [r4, #24]
 800c8d6:	e7d1      	b.n	800c87c <__sinit+0xc>
 800c8d8:	0800e74c 	.word	0x0800e74c
 800c8dc:	0800c809 	.word	0x0800c809

0800c8e0 <__sfp>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	f7ff ffac 	bl	800c840 <__sfp_lock_acquire>
 800c8e8:	4b1e      	ldr	r3, [pc, #120]	; (800c964 <__sfp+0x84>)
 800c8ea:	681e      	ldr	r6, [r3, #0]
 800c8ec:	69b3      	ldr	r3, [r6, #24]
 800c8ee:	b913      	cbnz	r3, 800c8f6 <__sfp+0x16>
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7ff ffbd 	bl	800c870 <__sinit>
 800c8f6:	3648      	adds	r6, #72	; 0x48
 800c8f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	d503      	bpl.n	800c908 <__sfp+0x28>
 800c900:	6833      	ldr	r3, [r6, #0]
 800c902:	b30b      	cbz	r3, 800c948 <__sfp+0x68>
 800c904:	6836      	ldr	r6, [r6, #0]
 800c906:	e7f7      	b.n	800c8f8 <__sfp+0x18>
 800c908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c90c:	b9d5      	cbnz	r5, 800c944 <__sfp+0x64>
 800c90e:	4b16      	ldr	r3, [pc, #88]	; (800c968 <__sfp+0x88>)
 800c910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c914:	60e3      	str	r3, [r4, #12]
 800c916:	6665      	str	r5, [r4, #100]	; 0x64
 800c918:	f000 fbc4 	bl	800d0a4 <__retarget_lock_init_recursive>
 800c91c:	f7ff ff96 	bl	800c84c <__sfp_lock_release>
 800c920:	2208      	movs	r2, #8
 800c922:	4629      	mov	r1, r5
 800c924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c92c:	6025      	str	r5, [r4, #0]
 800c92e:	61a5      	str	r5, [r4, #24]
 800c930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c934:	f7fd f8fe 	bl	8009b34 <memset>
 800c938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c93c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c940:	4620      	mov	r0, r4
 800c942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c944:	3468      	adds	r4, #104	; 0x68
 800c946:	e7d9      	b.n	800c8fc <__sfp+0x1c>
 800c948:	2104      	movs	r1, #4
 800c94a:	4638      	mov	r0, r7
 800c94c:	f7ff ff62 	bl	800c814 <__sfmoreglue>
 800c950:	4604      	mov	r4, r0
 800c952:	6030      	str	r0, [r6, #0]
 800c954:	2800      	cmp	r0, #0
 800c956:	d1d5      	bne.n	800c904 <__sfp+0x24>
 800c958:	f7ff ff78 	bl	800c84c <__sfp_lock_release>
 800c95c:	230c      	movs	r3, #12
 800c95e:	603b      	str	r3, [r7, #0]
 800c960:	e7ee      	b.n	800c940 <__sfp+0x60>
 800c962:	bf00      	nop
 800c964:	0800e74c 	.word	0x0800e74c
 800c968:	ffff0001 	.word	0xffff0001

0800c96c <fiprintf>:
 800c96c:	b40e      	push	{r1, r2, r3}
 800c96e:	b503      	push	{r0, r1, lr}
 800c970:	4601      	mov	r1, r0
 800c972:	ab03      	add	r3, sp, #12
 800c974:	4805      	ldr	r0, [pc, #20]	; (800c98c <fiprintf+0x20>)
 800c976:	f853 2b04 	ldr.w	r2, [r3], #4
 800c97a:	6800      	ldr	r0, [r0, #0]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	f001 fb4d 	bl	800e01c <_vfiprintf_r>
 800c982:	b002      	add	sp, #8
 800c984:	f85d eb04 	ldr.w	lr, [sp], #4
 800c988:	b003      	add	sp, #12
 800c98a:	4770      	bx	lr
 800c98c:	20000614 	.word	0x20000614

0800c990 <_fwalk_reent>:
 800c990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c994:	4606      	mov	r6, r0
 800c996:	4688      	mov	r8, r1
 800c998:	2700      	movs	r7, #0
 800c99a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c99e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c9a6:	d505      	bpl.n	800c9b4 <_fwalk_reent+0x24>
 800c9a8:	6824      	ldr	r4, [r4, #0]
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	d1f7      	bne.n	800c99e <_fwalk_reent+0xe>
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b4:	89ab      	ldrh	r3, [r5, #12]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d907      	bls.n	800c9ca <_fwalk_reent+0x3a>
 800c9ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	d003      	beq.n	800c9ca <_fwalk_reent+0x3a>
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	47c0      	blx	r8
 800c9c8:	4307      	orrs	r7, r0
 800c9ca:	3568      	adds	r5, #104	; 0x68
 800c9cc:	e7e9      	b.n	800c9a2 <_fwalk_reent+0x12>

0800c9ce <rshift>:
 800c9ce:	6903      	ldr	r3, [r0, #16]
 800c9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9d4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9d8:	f100 0414 	add.w	r4, r0, #20
 800c9dc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9e0:	dd46      	ble.n	800ca70 <rshift+0xa2>
 800c9e2:	f011 011f 	ands.w	r1, r1, #31
 800c9e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9ee:	d10c      	bne.n	800ca0a <rshift+0x3c>
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f100 0710 	add.w	r7, r0, #16
 800c9f6:	42b1      	cmp	r1, r6
 800c9f8:	d335      	bcc.n	800ca66 <rshift+0x98>
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	1eea      	subs	r2, r5, #3
 800ca00:	4296      	cmp	r6, r2
 800ca02:	bf38      	it	cc
 800ca04:	2300      	movcc	r3, #0
 800ca06:	4423      	add	r3, r4
 800ca08:	e015      	b.n	800ca36 <rshift+0x68>
 800ca0a:	46a1      	mov	r9, r4
 800ca0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca10:	f1c1 0820 	rsb	r8, r1, #32
 800ca14:	40cf      	lsrs	r7, r1
 800ca16:	f105 0e04 	add.w	lr, r5, #4
 800ca1a:	4576      	cmp	r6, lr
 800ca1c:	46f4      	mov	ip, lr
 800ca1e:	d816      	bhi.n	800ca4e <rshift+0x80>
 800ca20:	1a9a      	subs	r2, r3, r2
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	3a04      	subs	r2, #4
 800ca26:	3501      	adds	r5, #1
 800ca28:	42ae      	cmp	r6, r5
 800ca2a:	bf38      	it	cc
 800ca2c:	2200      	movcc	r2, #0
 800ca2e:	18a3      	adds	r3, r4, r2
 800ca30:	50a7      	str	r7, [r4, r2]
 800ca32:	b107      	cbz	r7, 800ca36 <rshift+0x68>
 800ca34:	3304      	adds	r3, #4
 800ca36:	42a3      	cmp	r3, r4
 800ca38:	eba3 0204 	sub.w	r2, r3, r4
 800ca3c:	bf08      	it	eq
 800ca3e:	2300      	moveq	r3, #0
 800ca40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca44:	6102      	str	r2, [r0, #16]
 800ca46:	bf08      	it	eq
 800ca48:	6143      	streq	r3, [r0, #20]
 800ca4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	f8dc c000 	ldr.w	ip, [ip]
 800ca52:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca56:	ea4c 0707 	orr.w	r7, ip, r7
 800ca5a:	f849 7b04 	str.w	r7, [r9], #4
 800ca5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca62:	40cf      	lsrs	r7, r1
 800ca64:	e7d9      	b.n	800ca1a <rshift+0x4c>
 800ca66:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca6e:	e7c2      	b.n	800c9f6 <rshift+0x28>
 800ca70:	4623      	mov	r3, r4
 800ca72:	e7e0      	b.n	800ca36 <rshift+0x68>

0800ca74 <__hexdig_fun>:
 800ca74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca78:	2b09      	cmp	r3, #9
 800ca7a:	d802      	bhi.n	800ca82 <__hexdig_fun+0xe>
 800ca7c:	3820      	subs	r0, #32
 800ca7e:	b2c0      	uxtb	r0, r0
 800ca80:	4770      	bx	lr
 800ca82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	d801      	bhi.n	800ca8e <__hexdig_fun+0x1a>
 800ca8a:	3847      	subs	r0, #71	; 0x47
 800ca8c:	e7f7      	b.n	800ca7e <__hexdig_fun+0xa>
 800ca8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca92:	2b05      	cmp	r3, #5
 800ca94:	d801      	bhi.n	800ca9a <__hexdig_fun+0x26>
 800ca96:	3827      	subs	r0, #39	; 0x27
 800ca98:	e7f1      	b.n	800ca7e <__hexdig_fun+0xa>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	4770      	bx	lr
	...

0800caa0 <__gethex>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	b08b      	sub	sp, #44	; 0x2c
 800caa6:	9305      	str	r3, [sp, #20]
 800caa8:	4bb2      	ldr	r3, [pc, #712]	; (800cd74 <__gethex+0x2d4>)
 800caaa:	9002      	str	r0, [sp, #8]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	468b      	mov	fp, r1
 800cab0:	4618      	mov	r0, r3
 800cab2:	4690      	mov	r8, r2
 800cab4:	9303      	str	r3, [sp, #12]
 800cab6:	f7f3 fbc1 	bl	800023c <strlen>
 800caba:	4682      	mov	sl, r0
 800cabc:	9b03      	ldr	r3, [sp, #12]
 800cabe:	f8db 2000 	ldr.w	r2, [fp]
 800cac2:	4403      	add	r3, r0
 800cac4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cac8:	9306      	str	r3, [sp, #24]
 800caca:	1c93      	adds	r3, r2, #2
 800cacc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cad0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cad4:	32fe      	adds	r2, #254	; 0xfe
 800cad6:	18d1      	adds	r1, r2, r3
 800cad8:	461f      	mov	r7, r3
 800cada:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cade:	9101      	str	r1, [sp, #4]
 800cae0:	2830      	cmp	r0, #48	; 0x30
 800cae2:	d0f8      	beq.n	800cad6 <__gethex+0x36>
 800cae4:	f7ff ffc6 	bl	800ca74 <__hexdig_fun>
 800cae8:	4604      	mov	r4, r0
 800caea:	2800      	cmp	r0, #0
 800caec:	d13a      	bne.n	800cb64 <__gethex+0xc4>
 800caee:	4652      	mov	r2, sl
 800caf0:	4638      	mov	r0, r7
 800caf2:	9903      	ldr	r1, [sp, #12]
 800caf4:	f001 fc63 	bl	800e3be <strncmp>
 800caf8:	4605      	mov	r5, r0
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d166      	bne.n	800cbcc <__gethex+0x12c>
 800cafe:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cb02:	eb07 060a 	add.w	r6, r7, sl
 800cb06:	f7ff ffb5 	bl	800ca74 <__hexdig_fun>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d060      	beq.n	800cbd0 <__gethex+0x130>
 800cb0e:	4633      	mov	r3, r6
 800cb10:	7818      	ldrb	r0, [r3, #0]
 800cb12:	461f      	mov	r7, r3
 800cb14:	2830      	cmp	r0, #48	; 0x30
 800cb16:	f103 0301 	add.w	r3, r3, #1
 800cb1a:	d0f9      	beq.n	800cb10 <__gethex+0x70>
 800cb1c:	f7ff ffaa 	bl	800ca74 <__hexdig_fun>
 800cb20:	2301      	movs	r3, #1
 800cb22:	fab0 f480 	clz	r4, r0
 800cb26:	4635      	mov	r5, r6
 800cb28:	0964      	lsrs	r4, r4, #5
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	463a      	mov	r2, r7
 800cb2e:	4616      	mov	r6, r2
 800cb30:	7830      	ldrb	r0, [r6, #0]
 800cb32:	3201      	adds	r2, #1
 800cb34:	f7ff ff9e 	bl	800ca74 <__hexdig_fun>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d1f8      	bne.n	800cb2e <__gethex+0x8e>
 800cb3c:	4652      	mov	r2, sl
 800cb3e:	4630      	mov	r0, r6
 800cb40:	9903      	ldr	r1, [sp, #12]
 800cb42:	f001 fc3c 	bl	800e3be <strncmp>
 800cb46:	b980      	cbnz	r0, 800cb6a <__gethex+0xca>
 800cb48:	b94d      	cbnz	r5, 800cb5e <__gethex+0xbe>
 800cb4a:	eb06 050a 	add.w	r5, r6, sl
 800cb4e:	462a      	mov	r2, r5
 800cb50:	4616      	mov	r6, r2
 800cb52:	7830      	ldrb	r0, [r6, #0]
 800cb54:	3201      	adds	r2, #1
 800cb56:	f7ff ff8d 	bl	800ca74 <__hexdig_fun>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d1f8      	bne.n	800cb50 <__gethex+0xb0>
 800cb5e:	1bad      	subs	r5, r5, r6
 800cb60:	00ad      	lsls	r5, r5, #2
 800cb62:	e004      	b.n	800cb6e <__gethex+0xce>
 800cb64:	2400      	movs	r4, #0
 800cb66:	4625      	mov	r5, r4
 800cb68:	e7e0      	b.n	800cb2c <__gethex+0x8c>
 800cb6a:	2d00      	cmp	r5, #0
 800cb6c:	d1f7      	bne.n	800cb5e <__gethex+0xbe>
 800cb6e:	7833      	ldrb	r3, [r6, #0]
 800cb70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb74:	2b50      	cmp	r3, #80	; 0x50
 800cb76:	d139      	bne.n	800cbec <__gethex+0x14c>
 800cb78:	7873      	ldrb	r3, [r6, #1]
 800cb7a:	2b2b      	cmp	r3, #43	; 0x2b
 800cb7c:	d02a      	beq.n	800cbd4 <__gethex+0x134>
 800cb7e:	2b2d      	cmp	r3, #45	; 0x2d
 800cb80:	d02c      	beq.n	800cbdc <__gethex+0x13c>
 800cb82:	f04f 0900 	mov.w	r9, #0
 800cb86:	1c71      	adds	r1, r6, #1
 800cb88:	7808      	ldrb	r0, [r1, #0]
 800cb8a:	f7ff ff73 	bl	800ca74 <__hexdig_fun>
 800cb8e:	1e43      	subs	r3, r0, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b18      	cmp	r3, #24
 800cb94:	d82a      	bhi.n	800cbec <__gethex+0x14c>
 800cb96:	f1a0 0210 	sub.w	r2, r0, #16
 800cb9a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb9e:	f7ff ff69 	bl	800ca74 <__hexdig_fun>
 800cba2:	1e43      	subs	r3, r0, #1
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b18      	cmp	r3, #24
 800cba8:	d91b      	bls.n	800cbe2 <__gethex+0x142>
 800cbaa:	f1b9 0f00 	cmp.w	r9, #0
 800cbae:	d000      	beq.n	800cbb2 <__gethex+0x112>
 800cbb0:	4252      	negs	r2, r2
 800cbb2:	4415      	add	r5, r2
 800cbb4:	f8cb 1000 	str.w	r1, [fp]
 800cbb8:	b1d4      	cbz	r4, 800cbf0 <__gethex+0x150>
 800cbba:	9b01      	ldr	r3, [sp, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	bf14      	ite	ne
 800cbc0:	2700      	movne	r7, #0
 800cbc2:	2706      	moveq	r7, #6
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	b00b      	add	sp, #44	; 0x2c
 800cbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbcc:	463e      	mov	r6, r7
 800cbce:	4625      	mov	r5, r4
 800cbd0:	2401      	movs	r4, #1
 800cbd2:	e7cc      	b.n	800cb6e <__gethex+0xce>
 800cbd4:	f04f 0900 	mov.w	r9, #0
 800cbd8:	1cb1      	adds	r1, r6, #2
 800cbda:	e7d5      	b.n	800cb88 <__gethex+0xe8>
 800cbdc:	f04f 0901 	mov.w	r9, #1
 800cbe0:	e7fa      	b.n	800cbd8 <__gethex+0x138>
 800cbe2:	230a      	movs	r3, #10
 800cbe4:	fb03 0202 	mla	r2, r3, r2, r0
 800cbe8:	3a10      	subs	r2, #16
 800cbea:	e7d6      	b.n	800cb9a <__gethex+0xfa>
 800cbec:	4631      	mov	r1, r6
 800cbee:	e7e1      	b.n	800cbb4 <__gethex+0x114>
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	1bf3      	subs	r3, r6, r7
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	2b07      	cmp	r3, #7
 800cbf8:	dc0a      	bgt.n	800cc10 <__gethex+0x170>
 800cbfa:	9802      	ldr	r0, [sp, #8]
 800cbfc:	f000 fae2 	bl	800d1c4 <_Balloc>
 800cc00:	4604      	mov	r4, r0
 800cc02:	b940      	cbnz	r0, 800cc16 <__gethex+0x176>
 800cc04:	4602      	mov	r2, r0
 800cc06:	21de      	movs	r1, #222	; 0xde
 800cc08:	4b5b      	ldr	r3, [pc, #364]	; (800cd78 <__gethex+0x2d8>)
 800cc0a:	485c      	ldr	r0, [pc, #368]	; (800cd7c <__gethex+0x2dc>)
 800cc0c:	f7fe fe82 	bl	800b914 <__assert_func>
 800cc10:	3101      	adds	r1, #1
 800cc12:	105b      	asrs	r3, r3, #1
 800cc14:	e7ef      	b.n	800cbf6 <__gethex+0x156>
 800cc16:	f04f 0b00 	mov.w	fp, #0
 800cc1a:	f100 0914 	add.w	r9, r0, #20
 800cc1e:	f1ca 0301 	rsb	r3, sl, #1
 800cc22:	f8cd 9010 	str.w	r9, [sp, #16]
 800cc26:	f8cd b004 	str.w	fp, [sp, #4]
 800cc2a:	9308      	str	r3, [sp, #32]
 800cc2c:	42b7      	cmp	r7, r6
 800cc2e:	d33f      	bcc.n	800ccb0 <__gethex+0x210>
 800cc30:	9f04      	ldr	r7, [sp, #16]
 800cc32:	9b01      	ldr	r3, [sp, #4]
 800cc34:	f847 3b04 	str.w	r3, [r7], #4
 800cc38:	eba7 0709 	sub.w	r7, r7, r9
 800cc3c:	10bf      	asrs	r7, r7, #2
 800cc3e:	6127      	str	r7, [r4, #16]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fbb1 	bl	800d3a8 <__hi0bits>
 800cc46:	017f      	lsls	r7, r7, #5
 800cc48:	f8d8 6000 	ldr.w	r6, [r8]
 800cc4c:	1a3f      	subs	r7, r7, r0
 800cc4e:	42b7      	cmp	r7, r6
 800cc50:	dd62      	ble.n	800cd18 <__gethex+0x278>
 800cc52:	1bbf      	subs	r7, r7, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 ff4b 	bl	800daf2 <__any_on>
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	b1a8      	cbz	r0, 800cc8c <__gethex+0x1ec>
 800cc60:	f04f 0a01 	mov.w	sl, #1
 800cc64:	1e7b      	subs	r3, r7, #1
 800cc66:	1159      	asrs	r1, r3, #5
 800cc68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cc6c:	f003 021f 	and.w	r2, r3, #31
 800cc70:	fa0a f202 	lsl.w	r2, sl, r2
 800cc74:	420a      	tst	r2, r1
 800cc76:	d009      	beq.n	800cc8c <__gethex+0x1ec>
 800cc78:	4553      	cmp	r3, sl
 800cc7a:	dd05      	ble.n	800cc88 <__gethex+0x1e8>
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	1eb9      	subs	r1, r7, #2
 800cc80:	f000 ff37 	bl	800daf2 <__any_on>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d144      	bne.n	800cd12 <__gethex+0x272>
 800cc88:	f04f 0a02 	mov.w	sl, #2
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f7ff fe9d 	bl	800c9ce <rshift>
 800cc94:	443d      	add	r5, r7
 800cc96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc9a:	42ab      	cmp	r3, r5
 800cc9c:	da4a      	bge.n	800cd34 <__gethex+0x294>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	9802      	ldr	r0, [sp, #8]
 800cca2:	f000 facf 	bl	800d244 <_Bfree>
 800cca6:	2300      	movs	r3, #0
 800cca8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccaa:	27a3      	movs	r7, #163	; 0xa3
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	e789      	b.n	800cbc4 <__gethex+0x124>
 800ccb0:	1e73      	subs	r3, r6, #1
 800ccb2:	9a06      	ldr	r2, [sp, #24]
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d019      	beq.n	800ccf2 <__gethex+0x252>
 800ccbe:	f1bb 0f20 	cmp.w	fp, #32
 800ccc2:	d107      	bne.n	800ccd4 <__gethex+0x234>
 800ccc4:	9b04      	ldr	r3, [sp, #16]
 800ccc6:	9a01      	ldr	r2, [sp, #4]
 800ccc8:	f843 2b04 	str.w	r2, [r3], #4
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	469b      	mov	fp, r3
 800ccd2:	9301      	str	r3, [sp, #4]
 800ccd4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ccd8:	f7ff fecc 	bl	800ca74 <__hexdig_fun>
 800ccdc:	9b01      	ldr	r3, [sp, #4]
 800ccde:	f000 000f 	and.w	r0, r0, #15
 800cce2:	fa00 f00b 	lsl.w	r0, r0, fp
 800cce6:	4303      	orrs	r3, r0
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	f10b 0b04 	add.w	fp, fp, #4
 800ccee:	9b07      	ldr	r3, [sp, #28]
 800ccf0:	e00d      	b.n	800cd0e <__gethex+0x26e>
 800ccf2:	9a08      	ldr	r2, [sp, #32]
 800ccf4:	1e73      	subs	r3, r6, #1
 800ccf6:	4413      	add	r3, r2
 800ccf8:	42bb      	cmp	r3, r7
 800ccfa:	d3e0      	bcc.n	800ccbe <__gethex+0x21e>
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	4652      	mov	r2, sl
 800cd00:	9903      	ldr	r1, [sp, #12]
 800cd02:	9309      	str	r3, [sp, #36]	; 0x24
 800cd04:	f001 fb5b 	bl	800e3be <strncmp>
 800cd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d1d7      	bne.n	800ccbe <__gethex+0x21e>
 800cd0e:	461e      	mov	r6, r3
 800cd10:	e78c      	b.n	800cc2c <__gethex+0x18c>
 800cd12:	f04f 0a03 	mov.w	sl, #3
 800cd16:	e7b9      	b.n	800cc8c <__gethex+0x1ec>
 800cd18:	da09      	bge.n	800cd2e <__gethex+0x28e>
 800cd1a:	1bf7      	subs	r7, r6, r7
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	463a      	mov	r2, r7
 800cd20:	9802      	ldr	r0, [sp, #8]
 800cd22:	f000 fca7 	bl	800d674 <__lshift>
 800cd26:	4604      	mov	r4, r0
 800cd28:	1bed      	subs	r5, r5, r7
 800cd2a:	f100 0914 	add.w	r9, r0, #20
 800cd2e:	f04f 0a00 	mov.w	sl, #0
 800cd32:	e7b0      	b.n	800cc96 <__gethex+0x1f6>
 800cd34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd38:	42a8      	cmp	r0, r5
 800cd3a:	dd72      	ble.n	800ce22 <__gethex+0x382>
 800cd3c:	1b45      	subs	r5, r0, r5
 800cd3e:	42ae      	cmp	r6, r5
 800cd40:	dc35      	bgt.n	800cdae <__gethex+0x30e>
 800cd42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d029      	beq.n	800cd9e <__gethex+0x2fe>
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d02b      	beq.n	800cda6 <__gethex+0x306>
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d11c      	bne.n	800cd8c <__gethex+0x2ec>
 800cd52:	42ae      	cmp	r6, r5
 800cd54:	d11a      	bne.n	800cd8c <__gethex+0x2ec>
 800cd56:	2e01      	cmp	r6, #1
 800cd58:	d112      	bne.n	800cd80 <__gethex+0x2e0>
 800cd5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd5e:	9a05      	ldr	r2, [sp, #20]
 800cd60:	2762      	movs	r7, #98	; 0x62
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	2301      	movs	r3, #1
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	f8c9 3000 	str.w	r3, [r9]
 800cd6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd6e:	601c      	str	r4, [r3, #0]
 800cd70:	e728      	b.n	800cbc4 <__gethex+0x124>
 800cd72:	bf00      	nop
 800cd74:	0800ead4 	.word	0x0800ead4
 800cd78:	0800e9f9 	.word	0x0800e9f9
 800cd7c:	0800ea6c 	.word	0x0800ea6c
 800cd80:	4620      	mov	r0, r4
 800cd82:	1e71      	subs	r1, r6, #1
 800cd84:	f000 feb5 	bl	800daf2 <__any_on>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d1e6      	bne.n	800cd5a <__gethex+0x2ba>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	9802      	ldr	r0, [sp, #8]
 800cd90:	f000 fa58 	bl	800d244 <_Bfree>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd98:	2750      	movs	r7, #80	; 0x50
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	e712      	b.n	800cbc4 <__gethex+0x124>
 800cd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1f3      	bne.n	800cd8c <__gethex+0x2ec>
 800cda4:	e7d9      	b.n	800cd5a <__gethex+0x2ba>
 800cda6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1d6      	bne.n	800cd5a <__gethex+0x2ba>
 800cdac:	e7ee      	b.n	800cd8c <__gethex+0x2ec>
 800cdae:	1e6f      	subs	r7, r5, #1
 800cdb0:	f1ba 0f00 	cmp.w	sl, #0
 800cdb4:	d132      	bne.n	800ce1c <__gethex+0x37c>
 800cdb6:	b127      	cbz	r7, 800cdc2 <__gethex+0x322>
 800cdb8:	4639      	mov	r1, r7
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fe99 	bl	800daf2 <__any_on>
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	117b      	asrs	r3, r7, #5
 800cdc6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cdca:	f007 071f 	and.w	r7, r7, #31
 800cdce:	fa01 f707 	lsl.w	r7, r1, r7
 800cdd2:	421f      	tst	r7, r3
 800cdd4:	f04f 0702 	mov.w	r7, #2
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4620      	mov	r0, r4
 800cddc:	bf18      	it	ne
 800cdde:	f04a 0a02 	orrne.w	sl, sl, #2
 800cde2:	1b76      	subs	r6, r6, r5
 800cde4:	f7ff fdf3 	bl	800c9ce <rshift>
 800cde8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdec:	f1ba 0f00 	cmp.w	sl, #0
 800cdf0:	d048      	beq.n	800ce84 <__gethex+0x3e4>
 800cdf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d015      	beq.n	800ce26 <__gethex+0x386>
 800cdfa:	2b03      	cmp	r3, #3
 800cdfc:	d017      	beq.n	800ce2e <__gethex+0x38e>
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d109      	bne.n	800ce16 <__gethex+0x376>
 800ce02:	f01a 0f02 	tst.w	sl, #2
 800ce06:	d006      	beq.n	800ce16 <__gethex+0x376>
 800ce08:	f8d9 0000 	ldr.w	r0, [r9]
 800ce0c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ce10:	f01a 0f01 	tst.w	sl, #1
 800ce14:	d10e      	bne.n	800ce34 <__gethex+0x394>
 800ce16:	f047 0710 	orr.w	r7, r7, #16
 800ce1a:	e033      	b.n	800ce84 <__gethex+0x3e4>
 800ce1c:	f04f 0a01 	mov.w	sl, #1
 800ce20:	e7cf      	b.n	800cdc2 <__gethex+0x322>
 800ce22:	2701      	movs	r7, #1
 800ce24:	e7e2      	b.n	800cdec <__gethex+0x34c>
 800ce26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce28:	f1c3 0301 	rsb	r3, r3, #1
 800ce2c:	9315      	str	r3, [sp, #84]	; 0x54
 800ce2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d0f0      	beq.n	800ce16 <__gethex+0x376>
 800ce34:	f04f 0c00 	mov.w	ip, #0
 800ce38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce3c:	f104 0314 	add.w	r3, r4, #20
 800ce40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce52:	d01c      	beq.n	800ce8e <__gethex+0x3ee>
 800ce54:	3201      	adds	r2, #1
 800ce56:	6002      	str	r2, [r0, #0]
 800ce58:	2f02      	cmp	r7, #2
 800ce5a:	f104 0314 	add.w	r3, r4, #20
 800ce5e:	d13d      	bne.n	800cedc <__gethex+0x43c>
 800ce60:	f8d8 2000 	ldr.w	r2, [r8]
 800ce64:	3a01      	subs	r2, #1
 800ce66:	42b2      	cmp	r2, r6
 800ce68:	d10a      	bne.n	800ce80 <__gethex+0x3e0>
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	1171      	asrs	r1, r6, #5
 800ce6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce72:	f006 061f 	and.w	r6, r6, #31
 800ce76:	fa02 f606 	lsl.w	r6, r2, r6
 800ce7a:	421e      	tst	r6, r3
 800ce7c:	bf18      	it	ne
 800ce7e:	4617      	movne	r7, r2
 800ce80:	f047 0720 	orr.w	r7, r7, #32
 800ce84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce86:	601c      	str	r4, [r3, #0]
 800ce88:	9b05      	ldr	r3, [sp, #20]
 800ce8a:	601d      	str	r5, [r3, #0]
 800ce8c:	e69a      	b.n	800cbc4 <__gethex+0x124>
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce94:	d8d8      	bhi.n	800ce48 <__gethex+0x3a8>
 800ce96:	68a3      	ldr	r3, [r4, #8]
 800ce98:	459b      	cmp	fp, r3
 800ce9a:	db17      	blt.n	800cecc <__gethex+0x42c>
 800ce9c:	6861      	ldr	r1, [r4, #4]
 800ce9e:	9802      	ldr	r0, [sp, #8]
 800cea0:	3101      	adds	r1, #1
 800cea2:	f000 f98f 	bl	800d1c4 <_Balloc>
 800cea6:	4681      	mov	r9, r0
 800cea8:	b918      	cbnz	r0, 800ceb2 <__gethex+0x412>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	2184      	movs	r1, #132	; 0x84
 800ceae:	4b19      	ldr	r3, [pc, #100]	; (800cf14 <__gethex+0x474>)
 800ceb0:	e6ab      	b.n	800cc0a <__gethex+0x16a>
 800ceb2:	6922      	ldr	r2, [r4, #16]
 800ceb4:	f104 010c 	add.w	r1, r4, #12
 800ceb8:	3202      	adds	r2, #2
 800ceba:	0092      	lsls	r2, r2, #2
 800cebc:	300c      	adds	r0, #12
 800cebe:	f7fc fe2b 	bl	8009b18 <memcpy>
 800cec2:	4621      	mov	r1, r4
 800cec4:	9802      	ldr	r0, [sp, #8]
 800cec6:	f000 f9bd 	bl	800d244 <_Bfree>
 800ceca:	464c      	mov	r4, r9
 800cecc:	6923      	ldr	r3, [r4, #16]
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	6122      	str	r2, [r4, #16]
 800ced2:	2201      	movs	r2, #1
 800ced4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ced8:	615a      	str	r2, [r3, #20]
 800ceda:	e7bd      	b.n	800ce58 <__gethex+0x3b8>
 800cedc:	6922      	ldr	r2, [r4, #16]
 800cede:	455a      	cmp	r2, fp
 800cee0:	dd0b      	ble.n	800cefa <__gethex+0x45a>
 800cee2:	2101      	movs	r1, #1
 800cee4:	4620      	mov	r0, r4
 800cee6:	f7ff fd72 	bl	800c9ce <rshift>
 800ceea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceee:	3501      	adds	r5, #1
 800cef0:	42ab      	cmp	r3, r5
 800cef2:	f6ff aed4 	blt.w	800cc9e <__gethex+0x1fe>
 800cef6:	2701      	movs	r7, #1
 800cef8:	e7c2      	b.n	800ce80 <__gethex+0x3e0>
 800cefa:	f016 061f 	ands.w	r6, r6, #31
 800cefe:	d0fa      	beq.n	800cef6 <__gethex+0x456>
 800cf00:	4453      	add	r3, sl
 800cf02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf06:	f000 fa4f 	bl	800d3a8 <__hi0bits>
 800cf0a:	f1c6 0620 	rsb	r6, r6, #32
 800cf0e:	42b0      	cmp	r0, r6
 800cf10:	dbe7      	blt.n	800cee2 <__gethex+0x442>
 800cf12:	e7f0      	b.n	800cef6 <__gethex+0x456>
 800cf14:	0800e9f9 	.word	0x0800e9f9

0800cf18 <L_shift>:
 800cf18:	f1c2 0208 	rsb	r2, r2, #8
 800cf1c:	0092      	lsls	r2, r2, #2
 800cf1e:	b570      	push	{r4, r5, r6, lr}
 800cf20:	f1c2 0620 	rsb	r6, r2, #32
 800cf24:	6843      	ldr	r3, [r0, #4]
 800cf26:	6804      	ldr	r4, [r0, #0]
 800cf28:	fa03 f506 	lsl.w	r5, r3, r6
 800cf2c:	432c      	orrs	r4, r5
 800cf2e:	40d3      	lsrs	r3, r2
 800cf30:	6004      	str	r4, [r0, #0]
 800cf32:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf36:	4288      	cmp	r0, r1
 800cf38:	d3f4      	bcc.n	800cf24 <L_shift+0xc>
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}

0800cf3c <__match>:
 800cf3c:	b530      	push	{r4, r5, lr}
 800cf3e:	6803      	ldr	r3, [r0, #0]
 800cf40:	3301      	adds	r3, #1
 800cf42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf46:	b914      	cbnz	r4, 800cf4e <__match+0x12>
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	bd30      	pop	{r4, r5, pc}
 800cf4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf56:	2d19      	cmp	r5, #25
 800cf58:	bf98      	it	ls
 800cf5a:	3220      	addls	r2, #32
 800cf5c:	42a2      	cmp	r2, r4
 800cf5e:	d0f0      	beq.n	800cf42 <__match+0x6>
 800cf60:	2000      	movs	r0, #0
 800cf62:	e7f3      	b.n	800cf4c <__match+0x10>

0800cf64 <__hexnan>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	2500      	movs	r5, #0
 800cf6a:	680b      	ldr	r3, [r1, #0]
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	115e      	asrs	r6, r3, #5
 800cf70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf74:	f013 031f 	ands.w	r3, r3, #31
 800cf78:	bf18      	it	ne
 800cf7a:	3604      	addne	r6, #4
 800cf7c:	1f37      	subs	r7, r6, #4
 800cf7e:	46b9      	mov	r9, r7
 800cf80:	463c      	mov	r4, r7
 800cf82:	46ab      	mov	fp, r5
 800cf84:	b087      	sub	sp, #28
 800cf86:	4690      	mov	r8, r2
 800cf88:	6802      	ldr	r2, [r0, #0]
 800cf8a:	9301      	str	r3, [sp, #4]
 800cf8c:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf90:	9502      	str	r5, [sp, #8]
 800cf92:	7851      	ldrb	r1, [r2, #1]
 800cf94:	1c53      	adds	r3, r2, #1
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	b341      	cbz	r1, 800cfec <__hexnan+0x88>
 800cf9a:	4608      	mov	r0, r1
 800cf9c:	9205      	str	r2, [sp, #20]
 800cf9e:	9104      	str	r1, [sp, #16]
 800cfa0:	f7ff fd68 	bl	800ca74 <__hexdig_fun>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d14f      	bne.n	800d048 <__hexnan+0xe4>
 800cfa8:	9904      	ldr	r1, [sp, #16]
 800cfaa:	9a05      	ldr	r2, [sp, #20]
 800cfac:	2920      	cmp	r1, #32
 800cfae:	d818      	bhi.n	800cfe2 <__hexnan+0x7e>
 800cfb0:	9b02      	ldr	r3, [sp, #8]
 800cfb2:	459b      	cmp	fp, r3
 800cfb4:	dd13      	ble.n	800cfde <__hexnan+0x7a>
 800cfb6:	454c      	cmp	r4, r9
 800cfb8:	d206      	bcs.n	800cfc8 <__hexnan+0x64>
 800cfba:	2d07      	cmp	r5, #7
 800cfbc:	dc04      	bgt.n	800cfc8 <__hexnan+0x64>
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff ffa8 	bl	800cf18 <L_shift>
 800cfc8:	4544      	cmp	r4, r8
 800cfca:	d950      	bls.n	800d06e <__hexnan+0x10a>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f1a4 0904 	sub.w	r9, r4, #4
 800cfd2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfd6:	461d      	mov	r5, r3
 800cfd8:	464c      	mov	r4, r9
 800cfda:	f8cd b008 	str.w	fp, [sp, #8]
 800cfde:	9a03      	ldr	r2, [sp, #12]
 800cfe0:	e7d7      	b.n	800cf92 <__hexnan+0x2e>
 800cfe2:	2929      	cmp	r1, #41	; 0x29
 800cfe4:	d156      	bne.n	800d094 <__hexnan+0x130>
 800cfe6:	3202      	adds	r2, #2
 800cfe8:	f8ca 2000 	str.w	r2, [sl]
 800cfec:	f1bb 0f00 	cmp.w	fp, #0
 800cff0:	d050      	beq.n	800d094 <__hexnan+0x130>
 800cff2:	454c      	cmp	r4, r9
 800cff4:	d206      	bcs.n	800d004 <__hexnan+0xa0>
 800cff6:	2d07      	cmp	r5, #7
 800cff8:	dc04      	bgt.n	800d004 <__hexnan+0xa0>
 800cffa:	462a      	mov	r2, r5
 800cffc:	4649      	mov	r1, r9
 800cffe:	4620      	mov	r0, r4
 800d000:	f7ff ff8a 	bl	800cf18 <L_shift>
 800d004:	4544      	cmp	r4, r8
 800d006:	d934      	bls.n	800d072 <__hexnan+0x10e>
 800d008:	4623      	mov	r3, r4
 800d00a:	f1a8 0204 	sub.w	r2, r8, #4
 800d00e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d012:	429f      	cmp	r7, r3
 800d014:	f842 1f04 	str.w	r1, [r2, #4]!
 800d018:	d2f9      	bcs.n	800d00e <__hexnan+0xaa>
 800d01a:	1b3b      	subs	r3, r7, r4
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	3304      	adds	r3, #4
 800d022:	3401      	adds	r4, #1
 800d024:	3e03      	subs	r6, #3
 800d026:	42b4      	cmp	r4, r6
 800d028:	bf88      	it	hi
 800d02a:	2304      	movhi	r3, #4
 800d02c:	2200      	movs	r2, #0
 800d02e:	4443      	add	r3, r8
 800d030:	f843 2b04 	str.w	r2, [r3], #4
 800d034:	429f      	cmp	r7, r3
 800d036:	d2fb      	bcs.n	800d030 <__hexnan+0xcc>
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	b91b      	cbnz	r3, 800d044 <__hexnan+0xe0>
 800d03c:	4547      	cmp	r7, r8
 800d03e:	d127      	bne.n	800d090 <__hexnan+0x12c>
 800d040:	2301      	movs	r3, #1
 800d042:	603b      	str	r3, [r7, #0]
 800d044:	2005      	movs	r0, #5
 800d046:	e026      	b.n	800d096 <__hexnan+0x132>
 800d048:	3501      	adds	r5, #1
 800d04a:	2d08      	cmp	r5, #8
 800d04c:	f10b 0b01 	add.w	fp, fp, #1
 800d050:	dd06      	ble.n	800d060 <__hexnan+0xfc>
 800d052:	4544      	cmp	r4, r8
 800d054:	d9c3      	bls.n	800cfde <__hexnan+0x7a>
 800d056:	2300      	movs	r3, #0
 800d058:	2501      	movs	r5, #1
 800d05a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d05e:	3c04      	subs	r4, #4
 800d060:	6822      	ldr	r2, [r4, #0]
 800d062:	f000 000f 	and.w	r0, r0, #15
 800d066:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d06a:	6022      	str	r2, [r4, #0]
 800d06c:	e7b7      	b.n	800cfde <__hexnan+0x7a>
 800d06e:	2508      	movs	r5, #8
 800d070:	e7b5      	b.n	800cfde <__hexnan+0x7a>
 800d072:	9b01      	ldr	r3, [sp, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0df      	beq.n	800d038 <__hexnan+0xd4>
 800d078:	f04f 32ff 	mov.w	r2, #4294967295
 800d07c:	f1c3 0320 	rsb	r3, r3, #32
 800d080:	fa22 f303 	lsr.w	r3, r2, r3
 800d084:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d088:	401a      	ands	r2, r3
 800d08a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d08e:	e7d3      	b.n	800d038 <__hexnan+0xd4>
 800d090:	3f04      	subs	r7, #4
 800d092:	e7d1      	b.n	800d038 <__hexnan+0xd4>
 800d094:	2004      	movs	r0, #4
 800d096:	b007      	add	sp, #28
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d09c <_localeconv_r>:
 800d09c:	4800      	ldr	r0, [pc, #0]	; (800d0a0 <_localeconv_r+0x4>)
 800d09e:	4770      	bx	lr
 800d0a0:	2000076c 	.word	0x2000076c

0800d0a4 <__retarget_lock_init_recursive>:
 800d0a4:	4770      	bx	lr

0800d0a6 <__retarget_lock_acquire_recursive>:
 800d0a6:	4770      	bx	lr

0800d0a8 <__retarget_lock_release_recursive>:
 800d0a8:	4770      	bx	lr

0800d0aa <__swhatbuf_r>:
 800d0aa:	b570      	push	{r4, r5, r6, lr}
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b2:	4614      	mov	r4, r2
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	b096      	sub	sp, #88	; 0x58
 800d0ba:	da08      	bge.n	800d0ce <__swhatbuf_r+0x24>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0c2:	602a      	str	r2, [r5, #0]
 800d0c4:	061a      	lsls	r2, r3, #24
 800d0c6:	d410      	bmi.n	800d0ea <__swhatbuf_r+0x40>
 800d0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0cc:	e00e      	b.n	800d0ec <__swhatbuf_r+0x42>
 800d0ce:	466a      	mov	r2, sp
 800d0d0:	f001 f9c0 	bl	800e454 <_fstat_r>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	dbf1      	blt.n	800d0bc <__swhatbuf_r+0x12>
 800d0d8:	9a01      	ldr	r2, [sp, #4]
 800d0da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0e2:	425a      	negs	r2, r3
 800d0e4:	415a      	adcs	r2, r3
 800d0e6:	602a      	str	r2, [r5, #0]
 800d0e8:	e7ee      	b.n	800d0c8 <__swhatbuf_r+0x1e>
 800d0ea:	2340      	movs	r3, #64	; 0x40
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	6023      	str	r3, [r4, #0]
 800d0f0:	b016      	add	sp, #88	; 0x58
 800d0f2:	bd70      	pop	{r4, r5, r6, pc}

0800d0f4 <__smakebuf_r>:
 800d0f4:	898b      	ldrh	r3, [r1, #12]
 800d0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0f8:	079d      	lsls	r5, r3, #30
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	d507      	bpl.n	800d110 <__smakebuf_r+0x1c>
 800d100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	6123      	str	r3, [r4, #16]
 800d108:	2301      	movs	r3, #1
 800d10a:	6163      	str	r3, [r4, #20]
 800d10c:	b002      	add	sp, #8
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
 800d110:	466a      	mov	r2, sp
 800d112:	ab01      	add	r3, sp, #4
 800d114:	f7ff ffc9 	bl	800d0aa <__swhatbuf_r>
 800d118:	9900      	ldr	r1, [sp, #0]
 800d11a:	4605      	mov	r5, r0
 800d11c:	4630      	mov	r0, r6
 800d11e:	f000 fd85 	bl	800dc2c <_malloc_r>
 800d122:	b948      	cbnz	r0, 800d138 <__smakebuf_r+0x44>
 800d124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d128:	059a      	lsls	r2, r3, #22
 800d12a:	d4ef      	bmi.n	800d10c <__smakebuf_r+0x18>
 800d12c:	f023 0303 	bic.w	r3, r3, #3
 800d130:	f043 0302 	orr.w	r3, r3, #2
 800d134:	81a3      	strh	r3, [r4, #12]
 800d136:	e7e3      	b.n	800d100 <__smakebuf_r+0xc>
 800d138:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <__smakebuf_r+0x7c>)
 800d13a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	6020      	str	r0, [r4, #0]
 800d140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d144:	81a3      	strh	r3, [r4, #12]
 800d146:	9b00      	ldr	r3, [sp, #0]
 800d148:	6120      	str	r0, [r4, #16]
 800d14a:	6163      	str	r3, [r4, #20]
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	b15b      	cbz	r3, 800d168 <__smakebuf_r+0x74>
 800d150:	4630      	mov	r0, r6
 800d152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d156:	f001 f98f 	bl	800e478 <_isatty_r>
 800d15a:	b128      	cbz	r0, 800d168 <__smakebuf_r+0x74>
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	f023 0303 	bic.w	r3, r3, #3
 800d162:	f043 0301 	orr.w	r3, r3, #1
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	89a0      	ldrh	r0, [r4, #12]
 800d16a:	4305      	orrs	r5, r0
 800d16c:	81a5      	strh	r5, [r4, #12]
 800d16e:	e7cd      	b.n	800d10c <__smakebuf_r+0x18>
 800d170:	0800c809 	.word	0x0800c809

0800d174 <malloc>:
 800d174:	4b02      	ldr	r3, [pc, #8]	; (800d180 <malloc+0xc>)
 800d176:	4601      	mov	r1, r0
 800d178:	6818      	ldr	r0, [r3, #0]
 800d17a:	f000 bd57 	b.w	800dc2c <_malloc_r>
 800d17e:	bf00      	nop
 800d180:	20000614 	.word	0x20000614

0800d184 <__ascii_mbtowc>:
 800d184:	b082      	sub	sp, #8
 800d186:	b901      	cbnz	r1, 800d18a <__ascii_mbtowc+0x6>
 800d188:	a901      	add	r1, sp, #4
 800d18a:	b142      	cbz	r2, 800d19e <__ascii_mbtowc+0x1a>
 800d18c:	b14b      	cbz	r3, 800d1a2 <__ascii_mbtowc+0x1e>
 800d18e:	7813      	ldrb	r3, [r2, #0]
 800d190:	600b      	str	r3, [r1, #0]
 800d192:	7812      	ldrb	r2, [r2, #0]
 800d194:	1e10      	subs	r0, r2, #0
 800d196:	bf18      	it	ne
 800d198:	2001      	movne	r0, #1
 800d19a:	b002      	add	sp, #8
 800d19c:	4770      	bx	lr
 800d19e:	4610      	mov	r0, r2
 800d1a0:	e7fb      	b.n	800d19a <__ascii_mbtowc+0x16>
 800d1a2:	f06f 0001 	mvn.w	r0, #1
 800d1a6:	e7f8      	b.n	800d19a <__ascii_mbtowc+0x16>

0800d1a8 <memchr>:
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	b2c9      	uxtb	r1, r1
 800d1ae:	4402      	add	r2, r0
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	d101      	bne.n	800d1ba <memchr+0x12>
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	e003      	b.n	800d1c2 <memchr+0x1a>
 800d1ba:	7804      	ldrb	r4, [r0, #0]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	428c      	cmp	r4, r1
 800d1c0:	d1f6      	bne.n	800d1b0 <memchr+0x8>
 800d1c2:	bd10      	pop	{r4, pc}

0800d1c4 <_Balloc>:
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	460d      	mov	r5, r1
 800d1cc:	b976      	cbnz	r6, 800d1ec <_Balloc+0x28>
 800d1ce:	2010      	movs	r0, #16
 800d1d0:	f7ff ffd0 	bl	800d174 <malloc>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	6260      	str	r0, [r4, #36]	; 0x24
 800d1d8:	b920      	cbnz	r0, 800d1e4 <_Balloc+0x20>
 800d1da:	2166      	movs	r1, #102	; 0x66
 800d1dc:	4b17      	ldr	r3, [pc, #92]	; (800d23c <_Balloc+0x78>)
 800d1de:	4818      	ldr	r0, [pc, #96]	; (800d240 <_Balloc+0x7c>)
 800d1e0:	f7fe fb98 	bl	800b914 <__assert_func>
 800d1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1e8:	6006      	str	r6, [r0, #0]
 800d1ea:	60c6      	str	r6, [r0, #12]
 800d1ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d1ee:	68f3      	ldr	r3, [r6, #12]
 800d1f0:	b183      	cbz	r3, 800d214 <_Balloc+0x50>
 800d1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1fa:	b9b8      	cbnz	r0, 800d22c <_Balloc+0x68>
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	fa01 f605 	lsl.w	r6, r1, r5
 800d202:	1d72      	adds	r2, r6, #5
 800d204:	4620      	mov	r0, r4
 800d206:	0092      	lsls	r2, r2, #2
 800d208:	f000 fc94 	bl	800db34 <_calloc_r>
 800d20c:	b160      	cbz	r0, 800d228 <_Balloc+0x64>
 800d20e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d212:	e00e      	b.n	800d232 <_Balloc+0x6e>
 800d214:	2221      	movs	r2, #33	; 0x21
 800d216:	2104      	movs	r1, #4
 800d218:	4620      	mov	r0, r4
 800d21a:	f000 fc8b 	bl	800db34 <_calloc_r>
 800d21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d220:	60f0      	str	r0, [r6, #12]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1e4      	bne.n	800d1f2 <_Balloc+0x2e>
 800d228:	2000      	movs	r0, #0
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	6802      	ldr	r2, [r0, #0]
 800d22e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d232:	2300      	movs	r3, #0
 800d234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d238:	e7f7      	b.n	800d22a <_Balloc+0x66>
 800d23a:	bf00      	nop
 800d23c:	0800e7e0 	.word	0x0800e7e0
 800d240:	0800eae8 	.word	0x0800eae8

0800d244 <_Bfree>:
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d248:	4605      	mov	r5, r0
 800d24a:	460c      	mov	r4, r1
 800d24c:	b976      	cbnz	r6, 800d26c <_Bfree+0x28>
 800d24e:	2010      	movs	r0, #16
 800d250:	f7ff ff90 	bl	800d174 <malloc>
 800d254:	4602      	mov	r2, r0
 800d256:	6268      	str	r0, [r5, #36]	; 0x24
 800d258:	b920      	cbnz	r0, 800d264 <_Bfree+0x20>
 800d25a:	218a      	movs	r1, #138	; 0x8a
 800d25c:	4b08      	ldr	r3, [pc, #32]	; (800d280 <_Bfree+0x3c>)
 800d25e:	4809      	ldr	r0, [pc, #36]	; (800d284 <_Bfree+0x40>)
 800d260:	f7fe fb58 	bl	800b914 <__assert_func>
 800d264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d268:	6006      	str	r6, [r0, #0]
 800d26a:	60c6      	str	r6, [r0, #12]
 800d26c:	b13c      	cbz	r4, 800d27e <_Bfree+0x3a>
 800d26e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d270:	6862      	ldr	r2, [r4, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d278:	6021      	str	r1, [r4, #0]
 800d27a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	0800e7e0 	.word	0x0800e7e0
 800d284:	0800eae8 	.word	0x0800eae8

0800d288 <__multadd>:
 800d288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28c:	4607      	mov	r7, r0
 800d28e:	460c      	mov	r4, r1
 800d290:	461e      	mov	r6, r3
 800d292:	2000      	movs	r0, #0
 800d294:	690d      	ldr	r5, [r1, #16]
 800d296:	f101 0c14 	add.w	ip, r1, #20
 800d29a:	f8dc 3000 	ldr.w	r3, [ip]
 800d29e:	3001      	adds	r0, #1
 800d2a0:	b299      	uxth	r1, r3
 800d2a2:	fb02 6101 	mla	r1, r2, r1, r6
 800d2a6:	0c1e      	lsrs	r6, r3, #16
 800d2a8:	0c0b      	lsrs	r3, r1, #16
 800d2aa:	fb02 3306 	mla	r3, r2, r6, r3
 800d2ae:	b289      	uxth	r1, r1
 800d2b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d2b4:	4285      	cmp	r5, r0
 800d2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d2be:	dcec      	bgt.n	800d29a <__multadd+0x12>
 800d2c0:	b30e      	cbz	r6, 800d306 <__multadd+0x7e>
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	42ab      	cmp	r3, r5
 800d2c6:	dc19      	bgt.n	800d2fc <__multadd+0x74>
 800d2c8:	6861      	ldr	r1, [r4, #4]
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	3101      	adds	r1, #1
 800d2ce:	f7ff ff79 	bl	800d1c4 <_Balloc>
 800d2d2:	4680      	mov	r8, r0
 800d2d4:	b928      	cbnz	r0, 800d2e2 <__multadd+0x5a>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	21b5      	movs	r1, #181	; 0xb5
 800d2da:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <__multadd+0x84>)
 800d2dc:	480c      	ldr	r0, [pc, #48]	; (800d310 <__multadd+0x88>)
 800d2de:	f7fe fb19 	bl	800b914 <__assert_func>
 800d2e2:	6922      	ldr	r2, [r4, #16]
 800d2e4:	f104 010c 	add.w	r1, r4, #12
 800d2e8:	3202      	adds	r2, #2
 800d2ea:	0092      	lsls	r2, r2, #2
 800d2ec:	300c      	adds	r0, #12
 800d2ee:	f7fc fc13 	bl	8009b18 <memcpy>
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff ffa5 	bl	800d244 <_Bfree>
 800d2fa:	4644      	mov	r4, r8
 800d2fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d300:	3501      	adds	r5, #1
 800d302:	615e      	str	r6, [r3, #20]
 800d304:	6125      	str	r5, [r4, #16]
 800d306:	4620      	mov	r0, r4
 800d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30c:	0800e9f9 	.word	0x0800e9f9
 800d310:	0800eae8 	.word	0x0800eae8

0800d314 <__s2b>:
 800d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d318:	4615      	mov	r5, r2
 800d31a:	2209      	movs	r2, #9
 800d31c:	461f      	mov	r7, r3
 800d31e:	3308      	adds	r3, #8
 800d320:	460c      	mov	r4, r1
 800d322:	fb93 f3f2 	sdiv	r3, r3, r2
 800d326:	4606      	mov	r6, r0
 800d328:	2201      	movs	r2, #1
 800d32a:	2100      	movs	r1, #0
 800d32c:	429a      	cmp	r2, r3
 800d32e:	db09      	blt.n	800d344 <__s2b+0x30>
 800d330:	4630      	mov	r0, r6
 800d332:	f7ff ff47 	bl	800d1c4 <_Balloc>
 800d336:	b940      	cbnz	r0, 800d34a <__s2b+0x36>
 800d338:	4602      	mov	r2, r0
 800d33a:	21ce      	movs	r1, #206	; 0xce
 800d33c:	4b18      	ldr	r3, [pc, #96]	; (800d3a0 <__s2b+0x8c>)
 800d33e:	4819      	ldr	r0, [pc, #100]	; (800d3a4 <__s2b+0x90>)
 800d340:	f7fe fae8 	bl	800b914 <__assert_func>
 800d344:	0052      	lsls	r2, r2, #1
 800d346:	3101      	adds	r1, #1
 800d348:	e7f0      	b.n	800d32c <__s2b+0x18>
 800d34a:	9b08      	ldr	r3, [sp, #32]
 800d34c:	2d09      	cmp	r5, #9
 800d34e:	6143      	str	r3, [r0, #20]
 800d350:	f04f 0301 	mov.w	r3, #1
 800d354:	6103      	str	r3, [r0, #16]
 800d356:	dd16      	ble.n	800d386 <__s2b+0x72>
 800d358:	f104 0909 	add.w	r9, r4, #9
 800d35c:	46c8      	mov	r8, r9
 800d35e:	442c      	add	r4, r5
 800d360:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d364:	4601      	mov	r1, r0
 800d366:	220a      	movs	r2, #10
 800d368:	4630      	mov	r0, r6
 800d36a:	3b30      	subs	r3, #48	; 0x30
 800d36c:	f7ff ff8c 	bl	800d288 <__multadd>
 800d370:	45a0      	cmp	r8, r4
 800d372:	d1f5      	bne.n	800d360 <__s2b+0x4c>
 800d374:	f1a5 0408 	sub.w	r4, r5, #8
 800d378:	444c      	add	r4, r9
 800d37a:	1b2d      	subs	r5, r5, r4
 800d37c:	1963      	adds	r3, r4, r5
 800d37e:	42bb      	cmp	r3, r7
 800d380:	db04      	blt.n	800d38c <__s2b+0x78>
 800d382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d386:	2509      	movs	r5, #9
 800d388:	340a      	adds	r4, #10
 800d38a:	e7f6      	b.n	800d37a <__s2b+0x66>
 800d38c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d390:	4601      	mov	r1, r0
 800d392:	220a      	movs	r2, #10
 800d394:	4630      	mov	r0, r6
 800d396:	3b30      	subs	r3, #48	; 0x30
 800d398:	f7ff ff76 	bl	800d288 <__multadd>
 800d39c:	e7ee      	b.n	800d37c <__s2b+0x68>
 800d39e:	bf00      	nop
 800d3a0:	0800e9f9 	.word	0x0800e9f9
 800d3a4:	0800eae8 	.word	0x0800eae8

0800d3a8 <__hi0bits>:
 800d3a8:	0c02      	lsrs	r2, r0, #16
 800d3aa:	0412      	lsls	r2, r2, #16
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	b9ca      	cbnz	r2, 800d3e4 <__hi0bits+0x3c>
 800d3b0:	0403      	lsls	r3, r0, #16
 800d3b2:	2010      	movs	r0, #16
 800d3b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d3b8:	bf04      	itt	eq
 800d3ba:	021b      	lsleq	r3, r3, #8
 800d3bc:	3008      	addeq	r0, #8
 800d3be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d3c2:	bf04      	itt	eq
 800d3c4:	011b      	lsleq	r3, r3, #4
 800d3c6:	3004      	addeq	r0, #4
 800d3c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d3cc:	bf04      	itt	eq
 800d3ce:	009b      	lsleq	r3, r3, #2
 800d3d0:	3002      	addeq	r0, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	db05      	blt.n	800d3e2 <__hi0bits+0x3a>
 800d3d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d3da:	f100 0001 	add.w	r0, r0, #1
 800d3de:	bf08      	it	eq
 800d3e0:	2020      	moveq	r0, #32
 800d3e2:	4770      	bx	lr
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e7e5      	b.n	800d3b4 <__hi0bits+0xc>

0800d3e8 <__lo0bits>:
 800d3e8:	6803      	ldr	r3, [r0, #0]
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	f013 0007 	ands.w	r0, r3, #7
 800d3f0:	d00b      	beq.n	800d40a <__lo0bits+0x22>
 800d3f2:	07d9      	lsls	r1, r3, #31
 800d3f4:	d421      	bmi.n	800d43a <__lo0bits+0x52>
 800d3f6:	0798      	lsls	r0, r3, #30
 800d3f8:	bf49      	itett	mi
 800d3fa:	085b      	lsrmi	r3, r3, #1
 800d3fc:	089b      	lsrpl	r3, r3, #2
 800d3fe:	2001      	movmi	r0, #1
 800d400:	6013      	strmi	r3, [r2, #0]
 800d402:	bf5c      	itt	pl
 800d404:	2002      	movpl	r0, #2
 800d406:	6013      	strpl	r3, [r2, #0]
 800d408:	4770      	bx	lr
 800d40a:	b299      	uxth	r1, r3
 800d40c:	b909      	cbnz	r1, 800d412 <__lo0bits+0x2a>
 800d40e:	2010      	movs	r0, #16
 800d410:	0c1b      	lsrs	r3, r3, #16
 800d412:	b2d9      	uxtb	r1, r3
 800d414:	b909      	cbnz	r1, 800d41a <__lo0bits+0x32>
 800d416:	3008      	adds	r0, #8
 800d418:	0a1b      	lsrs	r3, r3, #8
 800d41a:	0719      	lsls	r1, r3, #28
 800d41c:	bf04      	itt	eq
 800d41e:	091b      	lsreq	r3, r3, #4
 800d420:	3004      	addeq	r0, #4
 800d422:	0799      	lsls	r1, r3, #30
 800d424:	bf04      	itt	eq
 800d426:	089b      	lsreq	r3, r3, #2
 800d428:	3002      	addeq	r0, #2
 800d42a:	07d9      	lsls	r1, r3, #31
 800d42c:	d403      	bmi.n	800d436 <__lo0bits+0x4e>
 800d42e:	085b      	lsrs	r3, r3, #1
 800d430:	f100 0001 	add.w	r0, r0, #1
 800d434:	d003      	beq.n	800d43e <__lo0bits+0x56>
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	4770      	bx	lr
 800d43a:	2000      	movs	r0, #0
 800d43c:	4770      	bx	lr
 800d43e:	2020      	movs	r0, #32
 800d440:	4770      	bx	lr
	...

0800d444 <__i2b>:
 800d444:	b510      	push	{r4, lr}
 800d446:	460c      	mov	r4, r1
 800d448:	2101      	movs	r1, #1
 800d44a:	f7ff febb 	bl	800d1c4 <_Balloc>
 800d44e:	4602      	mov	r2, r0
 800d450:	b928      	cbnz	r0, 800d45e <__i2b+0x1a>
 800d452:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d456:	4b04      	ldr	r3, [pc, #16]	; (800d468 <__i2b+0x24>)
 800d458:	4804      	ldr	r0, [pc, #16]	; (800d46c <__i2b+0x28>)
 800d45a:	f7fe fa5b 	bl	800b914 <__assert_func>
 800d45e:	2301      	movs	r3, #1
 800d460:	6144      	str	r4, [r0, #20]
 800d462:	6103      	str	r3, [r0, #16]
 800d464:	bd10      	pop	{r4, pc}
 800d466:	bf00      	nop
 800d468:	0800e9f9 	.word	0x0800e9f9
 800d46c:	0800eae8 	.word	0x0800eae8

0800d470 <__multiply>:
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	4691      	mov	r9, r2
 800d476:	690a      	ldr	r2, [r1, #16]
 800d478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d47c:	460c      	mov	r4, r1
 800d47e:	429a      	cmp	r2, r3
 800d480:	bfbe      	ittt	lt
 800d482:	460b      	movlt	r3, r1
 800d484:	464c      	movlt	r4, r9
 800d486:	4699      	movlt	r9, r3
 800d488:	6927      	ldr	r7, [r4, #16]
 800d48a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	eb07 060a 	add.w	r6, r7, sl
 800d496:	42b3      	cmp	r3, r6
 800d498:	b085      	sub	sp, #20
 800d49a:	bfb8      	it	lt
 800d49c:	3101      	addlt	r1, #1
 800d49e:	f7ff fe91 	bl	800d1c4 <_Balloc>
 800d4a2:	b930      	cbnz	r0, 800d4b2 <__multiply+0x42>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	f240 115d 	movw	r1, #349	; 0x15d
 800d4aa:	4b43      	ldr	r3, [pc, #268]	; (800d5b8 <__multiply+0x148>)
 800d4ac:	4843      	ldr	r0, [pc, #268]	; (800d5bc <__multiply+0x14c>)
 800d4ae:	f7fe fa31 	bl	800b914 <__assert_func>
 800d4b2:	f100 0514 	add.w	r5, r0, #20
 800d4b6:	462b      	mov	r3, r5
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4be:	4543      	cmp	r3, r8
 800d4c0:	d321      	bcc.n	800d506 <__multiply+0x96>
 800d4c2:	f104 0314 	add.w	r3, r4, #20
 800d4c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4ca:	f109 0314 	add.w	r3, r9, #20
 800d4ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d4d2:	9202      	str	r2, [sp, #8]
 800d4d4:	1b3a      	subs	r2, r7, r4
 800d4d6:	3a15      	subs	r2, #21
 800d4d8:	f022 0203 	bic.w	r2, r2, #3
 800d4dc:	3204      	adds	r2, #4
 800d4de:	f104 0115 	add.w	r1, r4, #21
 800d4e2:	428f      	cmp	r7, r1
 800d4e4:	bf38      	it	cc
 800d4e6:	2204      	movcc	r2, #4
 800d4e8:	9201      	str	r2, [sp, #4]
 800d4ea:	9a02      	ldr	r2, [sp, #8]
 800d4ec:	9303      	str	r3, [sp, #12]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d80c      	bhi.n	800d50c <__multiply+0x9c>
 800d4f2:	2e00      	cmp	r6, #0
 800d4f4:	dd03      	ble.n	800d4fe <__multiply+0x8e>
 800d4f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d059      	beq.n	800d5b2 <__multiply+0x142>
 800d4fe:	6106      	str	r6, [r0, #16]
 800d500:	b005      	add	sp, #20
 800d502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d506:	f843 2b04 	str.w	r2, [r3], #4
 800d50a:	e7d8      	b.n	800d4be <__multiply+0x4e>
 800d50c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d510:	f1ba 0f00 	cmp.w	sl, #0
 800d514:	d023      	beq.n	800d55e <__multiply+0xee>
 800d516:	46a9      	mov	r9, r5
 800d518:	f04f 0c00 	mov.w	ip, #0
 800d51c:	f104 0e14 	add.w	lr, r4, #20
 800d520:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d524:	f8d9 1000 	ldr.w	r1, [r9]
 800d528:	fa1f fb82 	uxth.w	fp, r2
 800d52c:	b289      	uxth	r1, r1
 800d52e:	fb0a 110b 	mla	r1, sl, fp, r1
 800d532:	4461      	add	r1, ip
 800d534:	f8d9 c000 	ldr.w	ip, [r9]
 800d538:	0c12      	lsrs	r2, r2, #16
 800d53a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d53e:	fb0a c202 	mla	r2, sl, r2, ip
 800d542:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d546:	b289      	uxth	r1, r1
 800d548:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d54c:	4577      	cmp	r7, lr
 800d54e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d552:	f849 1b04 	str.w	r1, [r9], #4
 800d556:	d8e3      	bhi.n	800d520 <__multiply+0xb0>
 800d558:	9a01      	ldr	r2, [sp, #4]
 800d55a:	f845 c002 	str.w	ip, [r5, r2]
 800d55e:	9a03      	ldr	r2, [sp, #12]
 800d560:	3304      	adds	r3, #4
 800d562:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d566:	f1b9 0f00 	cmp.w	r9, #0
 800d56a:	d020      	beq.n	800d5ae <__multiply+0x13e>
 800d56c:	46ae      	mov	lr, r5
 800d56e:	f04f 0a00 	mov.w	sl, #0
 800d572:	6829      	ldr	r1, [r5, #0]
 800d574:	f104 0c14 	add.w	ip, r4, #20
 800d578:	f8bc b000 	ldrh.w	fp, [ip]
 800d57c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d580:	b289      	uxth	r1, r1
 800d582:	fb09 220b 	mla	r2, r9, fp, r2
 800d586:	4492      	add	sl, r2
 800d588:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d58c:	f84e 1b04 	str.w	r1, [lr], #4
 800d590:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d594:	f8be 1000 	ldrh.w	r1, [lr]
 800d598:	0c12      	lsrs	r2, r2, #16
 800d59a:	fb09 1102 	mla	r1, r9, r2, r1
 800d59e:	4567      	cmp	r7, ip
 800d5a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d5a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5a8:	d8e6      	bhi.n	800d578 <__multiply+0x108>
 800d5aa:	9a01      	ldr	r2, [sp, #4]
 800d5ac:	50a9      	str	r1, [r5, r2]
 800d5ae:	3504      	adds	r5, #4
 800d5b0:	e79b      	b.n	800d4ea <__multiply+0x7a>
 800d5b2:	3e01      	subs	r6, #1
 800d5b4:	e79d      	b.n	800d4f2 <__multiply+0x82>
 800d5b6:	bf00      	nop
 800d5b8:	0800e9f9 	.word	0x0800e9f9
 800d5bc:	0800eae8 	.word	0x0800eae8

0800d5c0 <__pow5mult>:
 800d5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c4:	4615      	mov	r5, r2
 800d5c6:	f012 0203 	ands.w	r2, r2, #3
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	d007      	beq.n	800d5e0 <__pow5mult+0x20>
 800d5d0:	4c25      	ldr	r4, [pc, #148]	; (800d668 <__pow5mult+0xa8>)
 800d5d2:	3a01      	subs	r2, #1
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5da:	f7ff fe55 	bl	800d288 <__multadd>
 800d5de:	4607      	mov	r7, r0
 800d5e0:	10ad      	asrs	r5, r5, #2
 800d5e2:	d03d      	beq.n	800d660 <__pow5mult+0xa0>
 800d5e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5e6:	b97c      	cbnz	r4, 800d608 <__pow5mult+0x48>
 800d5e8:	2010      	movs	r0, #16
 800d5ea:	f7ff fdc3 	bl	800d174 <malloc>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	6270      	str	r0, [r6, #36]	; 0x24
 800d5f2:	b928      	cbnz	r0, 800d600 <__pow5mult+0x40>
 800d5f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d5f8:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <__pow5mult+0xac>)
 800d5fa:	481d      	ldr	r0, [pc, #116]	; (800d670 <__pow5mult+0xb0>)
 800d5fc:	f7fe f98a 	bl	800b914 <__assert_func>
 800d600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d604:	6004      	str	r4, [r0, #0]
 800d606:	60c4      	str	r4, [r0, #12]
 800d608:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d60c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d610:	b94c      	cbnz	r4, 800d626 <__pow5mult+0x66>
 800d612:	f240 2171 	movw	r1, #625	; 0x271
 800d616:	4630      	mov	r0, r6
 800d618:	f7ff ff14 	bl	800d444 <__i2b>
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	f8c8 0008 	str.w	r0, [r8, #8]
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	f04f 0900 	mov.w	r9, #0
 800d62a:	07eb      	lsls	r3, r5, #31
 800d62c:	d50a      	bpl.n	800d644 <__pow5mult+0x84>
 800d62e:	4639      	mov	r1, r7
 800d630:	4622      	mov	r2, r4
 800d632:	4630      	mov	r0, r6
 800d634:	f7ff ff1c 	bl	800d470 <__multiply>
 800d638:	4680      	mov	r8, r0
 800d63a:	4639      	mov	r1, r7
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7ff fe01 	bl	800d244 <_Bfree>
 800d642:	4647      	mov	r7, r8
 800d644:	106d      	asrs	r5, r5, #1
 800d646:	d00b      	beq.n	800d660 <__pow5mult+0xa0>
 800d648:	6820      	ldr	r0, [r4, #0]
 800d64a:	b938      	cbnz	r0, 800d65c <__pow5mult+0x9c>
 800d64c:	4622      	mov	r2, r4
 800d64e:	4621      	mov	r1, r4
 800d650:	4630      	mov	r0, r6
 800d652:	f7ff ff0d 	bl	800d470 <__multiply>
 800d656:	6020      	str	r0, [r4, #0]
 800d658:	f8c0 9000 	str.w	r9, [r0]
 800d65c:	4604      	mov	r4, r0
 800d65e:	e7e4      	b.n	800d62a <__pow5mult+0x6a>
 800d660:	4638      	mov	r0, r7
 800d662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d666:	bf00      	nop
 800d668:	0800ec38 	.word	0x0800ec38
 800d66c:	0800e7e0 	.word	0x0800e7e0
 800d670:	0800eae8 	.word	0x0800eae8

0800d674 <__lshift>:
 800d674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d678:	460c      	mov	r4, r1
 800d67a:	4607      	mov	r7, r0
 800d67c:	4691      	mov	r9, r2
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6849      	ldr	r1, [r1, #4]
 800d682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d686:	68a3      	ldr	r3, [r4, #8]
 800d688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d68c:	f108 0601 	add.w	r6, r8, #1
 800d690:	42b3      	cmp	r3, r6
 800d692:	db0b      	blt.n	800d6ac <__lshift+0x38>
 800d694:	4638      	mov	r0, r7
 800d696:	f7ff fd95 	bl	800d1c4 <_Balloc>
 800d69a:	4605      	mov	r5, r0
 800d69c:	b948      	cbnz	r0, 800d6b2 <__lshift+0x3e>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6a4:	4b29      	ldr	r3, [pc, #164]	; (800d74c <__lshift+0xd8>)
 800d6a6:	482a      	ldr	r0, [pc, #168]	; (800d750 <__lshift+0xdc>)
 800d6a8:	f7fe f934 	bl	800b914 <__assert_func>
 800d6ac:	3101      	adds	r1, #1
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	e7ee      	b.n	800d690 <__lshift+0x1c>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f100 0114 	add.w	r1, r0, #20
 800d6b8:	f100 0210 	add.w	r2, r0, #16
 800d6bc:	4618      	mov	r0, r3
 800d6be:	4553      	cmp	r3, sl
 800d6c0:	db37      	blt.n	800d732 <__lshift+0xbe>
 800d6c2:	6920      	ldr	r0, [r4, #16]
 800d6c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6c8:	f104 0314 	add.w	r3, r4, #20
 800d6cc:	f019 091f 	ands.w	r9, r9, #31
 800d6d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6d8:	d02f      	beq.n	800d73a <__lshift+0xc6>
 800d6da:	468a      	mov	sl, r1
 800d6dc:	f04f 0c00 	mov.w	ip, #0
 800d6e0:	f1c9 0e20 	rsb	lr, r9, #32
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	fa02 f209 	lsl.w	r2, r2, r9
 800d6ea:	ea42 020c 	orr.w	r2, r2, ip
 800d6ee:	f84a 2b04 	str.w	r2, [sl], #4
 800d6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f6:	4298      	cmp	r0, r3
 800d6f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d6fc:	d8f2      	bhi.n	800d6e4 <__lshift+0x70>
 800d6fe:	1b03      	subs	r3, r0, r4
 800d700:	3b15      	subs	r3, #21
 800d702:	f023 0303 	bic.w	r3, r3, #3
 800d706:	3304      	adds	r3, #4
 800d708:	f104 0215 	add.w	r2, r4, #21
 800d70c:	4290      	cmp	r0, r2
 800d70e:	bf38      	it	cc
 800d710:	2304      	movcc	r3, #4
 800d712:	f841 c003 	str.w	ip, [r1, r3]
 800d716:	f1bc 0f00 	cmp.w	ip, #0
 800d71a:	d001      	beq.n	800d720 <__lshift+0xac>
 800d71c:	f108 0602 	add.w	r6, r8, #2
 800d720:	3e01      	subs	r6, #1
 800d722:	4638      	mov	r0, r7
 800d724:	4621      	mov	r1, r4
 800d726:	612e      	str	r6, [r5, #16]
 800d728:	f7ff fd8c 	bl	800d244 <_Bfree>
 800d72c:	4628      	mov	r0, r5
 800d72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d732:	f842 0f04 	str.w	r0, [r2, #4]!
 800d736:	3301      	adds	r3, #1
 800d738:	e7c1      	b.n	800d6be <__lshift+0x4a>
 800d73a:	3904      	subs	r1, #4
 800d73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d740:	4298      	cmp	r0, r3
 800d742:	f841 2f04 	str.w	r2, [r1, #4]!
 800d746:	d8f9      	bhi.n	800d73c <__lshift+0xc8>
 800d748:	e7ea      	b.n	800d720 <__lshift+0xac>
 800d74a:	bf00      	nop
 800d74c:	0800e9f9 	.word	0x0800e9f9
 800d750:	0800eae8 	.word	0x0800eae8

0800d754 <__mcmp>:
 800d754:	4603      	mov	r3, r0
 800d756:	690a      	ldr	r2, [r1, #16]
 800d758:	6900      	ldr	r0, [r0, #16]
 800d75a:	b530      	push	{r4, r5, lr}
 800d75c:	1a80      	subs	r0, r0, r2
 800d75e:	d10d      	bne.n	800d77c <__mcmp+0x28>
 800d760:	3314      	adds	r3, #20
 800d762:	3114      	adds	r1, #20
 800d764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d76c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d774:	4295      	cmp	r5, r2
 800d776:	d002      	beq.n	800d77e <__mcmp+0x2a>
 800d778:	d304      	bcc.n	800d784 <__mcmp+0x30>
 800d77a:	2001      	movs	r0, #1
 800d77c:	bd30      	pop	{r4, r5, pc}
 800d77e:	42a3      	cmp	r3, r4
 800d780:	d3f4      	bcc.n	800d76c <__mcmp+0x18>
 800d782:	e7fb      	b.n	800d77c <__mcmp+0x28>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295
 800d788:	e7f8      	b.n	800d77c <__mcmp+0x28>
	...

0800d78c <__mdiff>:
 800d78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d790:	460d      	mov	r5, r1
 800d792:	4607      	mov	r7, r0
 800d794:	4611      	mov	r1, r2
 800d796:	4628      	mov	r0, r5
 800d798:	4614      	mov	r4, r2
 800d79a:	f7ff ffdb 	bl	800d754 <__mcmp>
 800d79e:	1e06      	subs	r6, r0, #0
 800d7a0:	d111      	bne.n	800d7c6 <__mdiff+0x3a>
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	f7ff fd0d 	bl	800d1c4 <_Balloc>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	b928      	cbnz	r0, 800d7ba <__mdiff+0x2e>
 800d7ae:	f240 2132 	movw	r1, #562	; 0x232
 800d7b2:	4b3a      	ldr	r3, [pc, #232]	; (800d89c <__mdiff+0x110>)
 800d7b4:	483a      	ldr	r0, [pc, #232]	; (800d8a0 <__mdiff+0x114>)
 800d7b6:	f7fe f8ad 	bl	800b914 <__assert_func>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c6:	bfa4      	itt	ge
 800d7c8:	4623      	movge	r3, r4
 800d7ca:	462c      	movge	r4, r5
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	6861      	ldr	r1, [r4, #4]
 800d7d0:	bfa6      	itte	ge
 800d7d2:	461d      	movge	r5, r3
 800d7d4:	2600      	movge	r6, #0
 800d7d6:	2601      	movlt	r6, #1
 800d7d8:	f7ff fcf4 	bl	800d1c4 <_Balloc>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	b918      	cbnz	r0, 800d7e8 <__mdiff+0x5c>
 800d7e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d7e4:	4b2d      	ldr	r3, [pc, #180]	; (800d89c <__mdiff+0x110>)
 800d7e6:	e7e5      	b.n	800d7b4 <__mdiff+0x28>
 800d7e8:	f102 0814 	add.w	r8, r2, #20
 800d7ec:	46c2      	mov	sl, r8
 800d7ee:	f04f 0c00 	mov.w	ip, #0
 800d7f2:	6927      	ldr	r7, [r4, #16]
 800d7f4:	60c6      	str	r6, [r0, #12]
 800d7f6:	692e      	ldr	r6, [r5, #16]
 800d7f8:	f104 0014 	add.w	r0, r4, #20
 800d7fc:	f105 0914 	add.w	r9, r5, #20
 800d800:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d804:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d808:	3410      	adds	r4, #16
 800d80a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d80e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d812:	fa1f f18b 	uxth.w	r1, fp
 800d816:	448c      	add	ip, r1
 800d818:	b299      	uxth	r1, r3
 800d81a:	0c1b      	lsrs	r3, r3, #16
 800d81c:	ebac 0101 	sub.w	r1, ip, r1
 800d820:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d824:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d828:	b289      	uxth	r1, r1
 800d82a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d82e:	454e      	cmp	r6, r9
 800d830:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d834:	f84a 3b04 	str.w	r3, [sl], #4
 800d838:	d8e7      	bhi.n	800d80a <__mdiff+0x7e>
 800d83a:	1b73      	subs	r3, r6, r5
 800d83c:	3b15      	subs	r3, #21
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	3515      	adds	r5, #21
 800d844:	3304      	adds	r3, #4
 800d846:	42ae      	cmp	r6, r5
 800d848:	bf38      	it	cc
 800d84a:	2304      	movcc	r3, #4
 800d84c:	4418      	add	r0, r3
 800d84e:	4443      	add	r3, r8
 800d850:	461e      	mov	r6, r3
 800d852:	4605      	mov	r5, r0
 800d854:	4575      	cmp	r5, lr
 800d856:	d30e      	bcc.n	800d876 <__mdiff+0xea>
 800d858:	f10e 0103 	add.w	r1, lr, #3
 800d85c:	1a09      	subs	r1, r1, r0
 800d85e:	f021 0103 	bic.w	r1, r1, #3
 800d862:	3803      	subs	r0, #3
 800d864:	4586      	cmp	lr, r0
 800d866:	bf38      	it	cc
 800d868:	2100      	movcc	r1, #0
 800d86a:	4419      	add	r1, r3
 800d86c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d870:	b18b      	cbz	r3, 800d896 <__mdiff+0x10a>
 800d872:	6117      	str	r7, [r2, #16]
 800d874:	e7a4      	b.n	800d7c0 <__mdiff+0x34>
 800d876:	f855 8b04 	ldr.w	r8, [r5], #4
 800d87a:	fa1f f188 	uxth.w	r1, r8
 800d87e:	4461      	add	r1, ip
 800d880:	140c      	asrs	r4, r1, #16
 800d882:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d886:	b289      	uxth	r1, r1
 800d888:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d88c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d890:	f846 1b04 	str.w	r1, [r6], #4
 800d894:	e7de      	b.n	800d854 <__mdiff+0xc8>
 800d896:	3f01      	subs	r7, #1
 800d898:	e7e8      	b.n	800d86c <__mdiff+0xe0>
 800d89a:	bf00      	nop
 800d89c:	0800e9f9 	.word	0x0800e9f9
 800d8a0:	0800eae8 	.word	0x0800eae8

0800d8a4 <__ulp>:
 800d8a4:	4b11      	ldr	r3, [pc, #68]	; (800d8ec <__ulp+0x48>)
 800d8a6:	400b      	ands	r3, r1
 800d8a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dd02      	ble.n	800d8b6 <__ulp+0x12>
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	4770      	bx	lr
 800d8b6:	425b      	negs	r3, r3
 800d8b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d8bc:	f04f 0000 	mov.w	r0, #0
 800d8c0:	f04f 0100 	mov.w	r1, #0
 800d8c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d8c8:	da04      	bge.n	800d8d4 <__ulp+0x30>
 800d8ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d8ce:	fa43 f102 	asr.w	r1, r3, r2
 800d8d2:	4770      	bx	lr
 800d8d4:	f1a2 0314 	sub.w	r3, r2, #20
 800d8d8:	2b1e      	cmp	r3, #30
 800d8da:	bfd6      	itet	le
 800d8dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d8e0:	2301      	movgt	r3, #1
 800d8e2:	fa22 f303 	lsrle.w	r3, r2, r3
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	7ff00000 	.word	0x7ff00000

0800d8f0 <__b2d>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	6907      	ldr	r7, [r0, #16]
 800d8f6:	f100 0914 	add.w	r9, r0, #20
 800d8fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d8fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d902:	f1a7 0804 	sub.w	r8, r7, #4
 800d906:	4630      	mov	r0, r6
 800d908:	f7ff fd4e 	bl	800d3a8 <__hi0bits>
 800d90c:	f1c0 0320 	rsb	r3, r0, #32
 800d910:	280a      	cmp	r0, #10
 800d912:	600b      	str	r3, [r1, #0]
 800d914:	491f      	ldr	r1, [pc, #124]	; (800d994 <__b2d+0xa4>)
 800d916:	dc17      	bgt.n	800d948 <__b2d+0x58>
 800d918:	45c1      	cmp	r9, r8
 800d91a:	bf28      	it	cs
 800d91c:	2200      	movcs	r2, #0
 800d91e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d922:	fa26 f30c 	lsr.w	r3, r6, ip
 800d926:	bf38      	it	cc
 800d928:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d92c:	ea43 0501 	orr.w	r5, r3, r1
 800d930:	f100 0315 	add.w	r3, r0, #21
 800d934:	fa06 f303 	lsl.w	r3, r6, r3
 800d938:	fa22 f20c 	lsr.w	r2, r2, ip
 800d93c:	ea43 0402 	orr.w	r4, r3, r2
 800d940:	4620      	mov	r0, r4
 800d942:	4629      	mov	r1, r5
 800d944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d948:	45c1      	cmp	r9, r8
 800d94a:	bf2e      	itee	cs
 800d94c:	2200      	movcs	r2, #0
 800d94e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d952:	f1a7 0808 	subcc.w	r8, r7, #8
 800d956:	f1b0 030b 	subs.w	r3, r0, #11
 800d95a:	d016      	beq.n	800d98a <__b2d+0x9a>
 800d95c:	f1c3 0720 	rsb	r7, r3, #32
 800d960:	fa22 f107 	lsr.w	r1, r2, r7
 800d964:	45c8      	cmp	r8, r9
 800d966:	fa06 f603 	lsl.w	r6, r6, r3
 800d96a:	ea46 0601 	orr.w	r6, r6, r1
 800d96e:	bf94      	ite	ls
 800d970:	2100      	movls	r1, #0
 800d972:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d976:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d97a:	fa02 f003 	lsl.w	r0, r2, r3
 800d97e:	40f9      	lsrs	r1, r7
 800d980:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d984:	ea40 0401 	orr.w	r4, r0, r1
 800d988:	e7da      	b.n	800d940 <__b2d+0x50>
 800d98a:	4614      	mov	r4, r2
 800d98c:	ea46 0501 	orr.w	r5, r6, r1
 800d990:	e7d6      	b.n	800d940 <__b2d+0x50>
 800d992:	bf00      	nop
 800d994:	3ff00000 	.word	0x3ff00000

0800d998 <__d2b>:
 800d998:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d99c:	2101      	movs	r1, #1
 800d99e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d9a2:	4690      	mov	r8, r2
 800d9a4:	461d      	mov	r5, r3
 800d9a6:	f7ff fc0d 	bl	800d1c4 <_Balloc>
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	b930      	cbnz	r0, 800d9bc <__d2b+0x24>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	f240 310a 	movw	r1, #778	; 0x30a
 800d9b4:	4b24      	ldr	r3, [pc, #144]	; (800da48 <__d2b+0xb0>)
 800d9b6:	4825      	ldr	r0, [pc, #148]	; (800da4c <__d2b+0xb4>)
 800d9b8:	f7fd ffac 	bl	800b914 <__assert_func>
 800d9bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d9c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d9c4:	bb2d      	cbnz	r5, 800da12 <__d2b+0x7a>
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	f1b8 0300 	subs.w	r3, r8, #0
 800d9cc:	d026      	beq.n	800da1c <__d2b+0x84>
 800d9ce:	4668      	mov	r0, sp
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	f7ff fd09 	bl	800d3e8 <__lo0bits>
 800d9d6:	9900      	ldr	r1, [sp, #0]
 800d9d8:	b1f0      	cbz	r0, 800da18 <__d2b+0x80>
 800d9da:	9a01      	ldr	r2, [sp, #4]
 800d9dc:	f1c0 0320 	rsb	r3, r0, #32
 800d9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e4:	430b      	orrs	r3, r1
 800d9e6:	40c2      	lsrs	r2, r0
 800d9e8:	6163      	str	r3, [r4, #20]
 800d9ea:	9201      	str	r2, [sp, #4]
 800d9ec:	9b01      	ldr	r3, [sp, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf14      	ite	ne
 800d9f2:	2102      	movne	r1, #2
 800d9f4:	2101      	moveq	r1, #1
 800d9f6:	61a3      	str	r3, [r4, #24]
 800d9f8:	6121      	str	r1, [r4, #16]
 800d9fa:	b1c5      	cbz	r5, 800da2e <__d2b+0x96>
 800d9fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da00:	4405      	add	r5, r0
 800da02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da06:	603d      	str	r5, [r7, #0]
 800da08:	6030      	str	r0, [r6, #0]
 800da0a:	4620      	mov	r0, r4
 800da0c:	b002      	add	sp, #8
 800da0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da16:	e7d6      	b.n	800d9c6 <__d2b+0x2e>
 800da18:	6161      	str	r1, [r4, #20]
 800da1a:	e7e7      	b.n	800d9ec <__d2b+0x54>
 800da1c:	a801      	add	r0, sp, #4
 800da1e:	f7ff fce3 	bl	800d3e8 <__lo0bits>
 800da22:	2101      	movs	r1, #1
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	6121      	str	r1, [r4, #16]
 800da28:	6163      	str	r3, [r4, #20]
 800da2a:	3020      	adds	r0, #32
 800da2c:	e7e5      	b.n	800d9fa <__d2b+0x62>
 800da2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800da32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da36:	6038      	str	r0, [r7, #0]
 800da38:	6918      	ldr	r0, [r3, #16]
 800da3a:	f7ff fcb5 	bl	800d3a8 <__hi0bits>
 800da3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800da42:	6031      	str	r1, [r6, #0]
 800da44:	e7e1      	b.n	800da0a <__d2b+0x72>
 800da46:	bf00      	nop
 800da48:	0800e9f9 	.word	0x0800e9f9
 800da4c:	0800eae8 	.word	0x0800eae8

0800da50 <__ratio>:
 800da50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	4688      	mov	r8, r1
 800da56:	4669      	mov	r1, sp
 800da58:	4681      	mov	r9, r0
 800da5a:	f7ff ff49 	bl	800d8f0 <__b2d>
 800da5e:	460f      	mov	r7, r1
 800da60:	4604      	mov	r4, r0
 800da62:	460d      	mov	r5, r1
 800da64:	4640      	mov	r0, r8
 800da66:	a901      	add	r1, sp, #4
 800da68:	f7ff ff42 	bl	800d8f0 <__b2d>
 800da6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da70:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da74:	468b      	mov	fp, r1
 800da76:	eba3 0c02 	sub.w	ip, r3, r2
 800da7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da7e:	1a9b      	subs	r3, r3, r2
 800da80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da84:	2b00      	cmp	r3, #0
 800da86:	bfd5      	itete	le
 800da88:	460a      	movle	r2, r1
 800da8a:	462a      	movgt	r2, r5
 800da8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da90:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da94:	bfd8      	it	le
 800da96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da9a:	465b      	mov	r3, fp
 800da9c:	4602      	mov	r2, r0
 800da9e:	4639      	mov	r1, r7
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7f2 ff6d 	bl	8000980 <__aeabi_ddiv>
 800daa6:	b003      	add	sp, #12
 800daa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800daac <__copybits>:
 800daac:	3901      	subs	r1, #1
 800daae:	b570      	push	{r4, r5, r6, lr}
 800dab0:	1149      	asrs	r1, r1, #5
 800dab2:	6914      	ldr	r4, [r2, #16]
 800dab4:	3101      	adds	r1, #1
 800dab6:	f102 0314 	add.w	r3, r2, #20
 800daba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dabe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dac2:	1f05      	subs	r5, r0, #4
 800dac4:	42a3      	cmp	r3, r4
 800dac6:	d30c      	bcc.n	800dae2 <__copybits+0x36>
 800dac8:	1aa3      	subs	r3, r4, r2
 800daca:	3b11      	subs	r3, #17
 800dacc:	f023 0303 	bic.w	r3, r3, #3
 800dad0:	3211      	adds	r2, #17
 800dad2:	42a2      	cmp	r2, r4
 800dad4:	bf88      	it	hi
 800dad6:	2300      	movhi	r3, #0
 800dad8:	4418      	add	r0, r3
 800dada:	2300      	movs	r3, #0
 800dadc:	4288      	cmp	r0, r1
 800dade:	d305      	bcc.n	800daec <__copybits+0x40>
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
 800dae2:	f853 6b04 	ldr.w	r6, [r3], #4
 800dae6:	f845 6f04 	str.w	r6, [r5, #4]!
 800daea:	e7eb      	b.n	800dac4 <__copybits+0x18>
 800daec:	f840 3b04 	str.w	r3, [r0], #4
 800daf0:	e7f4      	b.n	800dadc <__copybits+0x30>

0800daf2 <__any_on>:
 800daf2:	f100 0214 	add.w	r2, r0, #20
 800daf6:	6900      	ldr	r0, [r0, #16]
 800daf8:	114b      	asrs	r3, r1, #5
 800dafa:	4298      	cmp	r0, r3
 800dafc:	b510      	push	{r4, lr}
 800dafe:	db11      	blt.n	800db24 <__any_on+0x32>
 800db00:	dd0a      	ble.n	800db18 <__any_on+0x26>
 800db02:	f011 011f 	ands.w	r1, r1, #31
 800db06:	d007      	beq.n	800db18 <__any_on+0x26>
 800db08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db0c:	fa24 f001 	lsr.w	r0, r4, r1
 800db10:	fa00 f101 	lsl.w	r1, r0, r1
 800db14:	428c      	cmp	r4, r1
 800db16:	d10b      	bne.n	800db30 <__any_on+0x3e>
 800db18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d803      	bhi.n	800db28 <__any_on+0x36>
 800db20:	2000      	movs	r0, #0
 800db22:	bd10      	pop	{r4, pc}
 800db24:	4603      	mov	r3, r0
 800db26:	e7f7      	b.n	800db18 <__any_on+0x26>
 800db28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db2c:	2900      	cmp	r1, #0
 800db2e:	d0f5      	beq.n	800db1c <__any_on+0x2a>
 800db30:	2001      	movs	r0, #1
 800db32:	e7f6      	b.n	800db22 <__any_on+0x30>

0800db34 <_calloc_r>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	fba1 5402 	umull	r5, r4, r1, r2
 800db3a:	b934      	cbnz	r4, 800db4a <_calloc_r+0x16>
 800db3c:	4629      	mov	r1, r5
 800db3e:	f000 f875 	bl	800dc2c <_malloc_r>
 800db42:	4606      	mov	r6, r0
 800db44:	b928      	cbnz	r0, 800db52 <_calloc_r+0x1e>
 800db46:	4630      	mov	r0, r6
 800db48:	bd70      	pop	{r4, r5, r6, pc}
 800db4a:	220c      	movs	r2, #12
 800db4c:	2600      	movs	r6, #0
 800db4e:	6002      	str	r2, [r0, #0]
 800db50:	e7f9      	b.n	800db46 <_calloc_r+0x12>
 800db52:	462a      	mov	r2, r5
 800db54:	4621      	mov	r1, r4
 800db56:	f7fb ffed 	bl	8009b34 <memset>
 800db5a:	e7f4      	b.n	800db46 <_calloc_r+0x12>

0800db5c <_free_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4605      	mov	r5, r0
 800db60:	2900      	cmp	r1, #0
 800db62:	d040      	beq.n	800dbe6 <_free_r+0x8a>
 800db64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db68:	1f0c      	subs	r4, r1, #4
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	bfb8      	it	lt
 800db6e:	18e4      	addlt	r4, r4, r3
 800db70:	f000 fcbe 	bl	800e4f0 <__malloc_lock>
 800db74:	4a1c      	ldr	r2, [pc, #112]	; (800dbe8 <_free_r+0x8c>)
 800db76:	6813      	ldr	r3, [r2, #0]
 800db78:	b933      	cbnz	r3, 800db88 <_free_r+0x2c>
 800db7a:	6063      	str	r3, [r4, #4]
 800db7c:	6014      	str	r4, [r2, #0]
 800db7e:	4628      	mov	r0, r5
 800db80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db84:	f000 bcba 	b.w	800e4fc <__malloc_unlock>
 800db88:	42a3      	cmp	r3, r4
 800db8a:	d908      	bls.n	800db9e <_free_r+0x42>
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	1821      	adds	r1, r4, r0
 800db90:	428b      	cmp	r3, r1
 800db92:	bf01      	itttt	eq
 800db94:	6819      	ldreq	r1, [r3, #0]
 800db96:	685b      	ldreq	r3, [r3, #4]
 800db98:	1809      	addeq	r1, r1, r0
 800db9a:	6021      	streq	r1, [r4, #0]
 800db9c:	e7ed      	b.n	800db7a <_free_r+0x1e>
 800db9e:	461a      	mov	r2, r3
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	b10b      	cbz	r3, 800dba8 <_free_r+0x4c>
 800dba4:	42a3      	cmp	r3, r4
 800dba6:	d9fa      	bls.n	800db9e <_free_r+0x42>
 800dba8:	6811      	ldr	r1, [r2, #0]
 800dbaa:	1850      	adds	r0, r2, r1
 800dbac:	42a0      	cmp	r0, r4
 800dbae:	d10b      	bne.n	800dbc8 <_free_r+0x6c>
 800dbb0:	6820      	ldr	r0, [r4, #0]
 800dbb2:	4401      	add	r1, r0
 800dbb4:	1850      	adds	r0, r2, r1
 800dbb6:	4283      	cmp	r3, r0
 800dbb8:	6011      	str	r1, [r2, #0]
 800dbba:	d1e0      	bne.n	800db7e <_free_r+0x22>
 800dbbc:	6818      	ldr	r0, [r3, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	4401      	add	r1, r0
 800dbc2:	6011      	str	r1, [r2, #0]
 800dbc4:	6053      	str	r3, [r2, #4]
 800dbc6:	e7da      	b.n	800db7e <_free_r+0x22>
 800dbc8:	d902      	bls.n	800dbd0 <_free_r+0x74>
 800dbca:	230c      	movs	r3, #12
 800dbcc:	602b      	str	r3, [r5, #0]
 800dbce:	e7d6      	b.n	800db7e <_free_r+0x22>
 800dbd0:	6820      	ldr	r0, [r4, #0]
 800dbd2:	1821      	adds	r1, r4, r0
 800dbd4:	428b      	cmp	r3, r1
 800dbd6:	bf01      	itttt	eq
 800dbd8:	6819      	ldreq	r1, [r3, #0]
 800dbda:	685b      	ldreq	r3, [r3, #4]
 800dbdc:	1809      	addeq	r1, r1, r0
 800dbde:	6021      	streq	r1, [r4, #0]
 800dbe0:	6063      	str	r3, [r4, #4]
 800dbe2:	6054      	str	r4, [r2, #4]
 800dbe4:	e7cb      	b.n	800db7e <_free_r+0x22>
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	20000ce0 	.word	0x20000ce0

0800dbec <sbrk_aligned>:
 800dbec:	b570      	push	{r4, r5, r6, lr}
 800dbee:	4e0e      	ldr	r6, [pc, #56]	; (800dc28 <sbrk_aligned+0x3c>)
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	6831      	ldr	r1, [r6, #0]
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	b911      	cbnz	r1, 800dbfe <sbrk_aligned+0x12>
 800dbf8:	f000 fb8e 	bl	800e318 <_sbrk_r>
 800dbfc:	6030      	str	r0, [r6, #0]
 800dbfe:	4621      	mov	r1, r4
 800dc00:	4628      	mov	r0, r5
 800dc02:	f000 fb89 	bl	800e318 <_sbrk_r>
 800dc06:	1c43      	adds	r3, r0, #1
 800dc08:	d00a      	beq.n	800dc20 <sbrk_aligned+0x34>
 800dc0a:	1cc4      	adds	r4, r0, #3
 800dc0c:	f024 0403 	bic.w	r4, r4, #3
 800dc10:	42a0      	cmp	r0, r4
 800dc12:	d007      	beq.n	800dc24 <sbrk_aligned+0x38>
 800dc14:	1a21      	subs	r1, r4, r0
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 fb7e 	bl	800e318 <_sbrk_r>
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d101      	bne.n	800dc24 <sbrk_aligned+0x38>
 800dc20:	f04f 34ff 	mov.w	r4, #4294967295
 800dc24:	4620      	mov	r0, r4
 800dc26:	bd70      	pop	{r4, r5, r6, pc}
 800dc28:	20000ce4 	.word	0x20000ce4

0800dc2c <_malloc_r>:
 800dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	1ccd      	adds	r5, r1, #3
 800dc32:	f025 0503 	bic.w	r5, r5, #3
 800dc36:	3508      	adds	r5, #8
 800dc38:	2d0c      	cmp	r5, #12
 800dc3a:	bf38      	it	cc
 800dc3c:	250c      	movcc	r5, #12
 800dc3e:	2d00      	cmp	r5, #0
 800dc40:	4607      	mov	r7, r0
 800dc42:	db01      	blt.n	800dc48 <_malloc_r+0x1c>
 800dc44:	42a9      	cmp	r1, r5
 800dc46:	d905      	bls.n	800dc54 <_malloc_r+0x28>
 800dc48:	230c      	movs	r3, #12
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	603b      	str	r3, [r7, #0]
 800dc4e:	4630      	mov	r0, r6
 800dc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc54:	4e2e      	ldr	r6, [pc, #184]	; (800dd10 <_malloc_r+0xe4>)
 800dc56:	f000 fc4b 	bl	800e4f0 <__malloc_lock>
 800dc5a:	6833      	ldr	r3, [r6, #0]
 800dc5c:	461c      	mov	r4, r3
 800dc5e:	bb34      	cbnz	r4, 800dcae <_malloc_r+0x82>
 800dc60:	4629      	mov	r1, r5
 800dc62:	4638      	mov	r0, r7
 800dc64:	f7ff ffc2 	bl	800dbec <sbrk_aligned>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	d14d      	bne.n	800dd0a <_malloc_r+0xde>
 800dc6e:	6834      	ldr	r4, [r6, #0]
 800dc70:	4626      	mov	r6, r4
 800dc72:	2e00      	cmp	r6, #0
 800dc74:	d140      	bne.n	800dcf8 <_malloc_r+0xcc>
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	4631      	mov	r1, r6
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	eb04 0803 	add.w	r8, r4, r3
 800dc80:	f000 fb4a 	bl	800e318 <_sbrk_r>
 800dc84:	4580      	cmp	r8, r0
 800dc86:	d13a      	bne.n	800dcfe <_malloc_r+0xd2>
 800dc88:	6821      	ldr	r1, [r4, #0]
 800dc8a:	3503      	adds	r5, #3
 800dc8c:	1a6d      	subs	r5, r5, r1
 800dc8e:	f025 0503 	bic.w	r5, r5, #3
 800dc92:	3508      	adds	r5, #8
 800dc94:	2d0c      	cmp	r5, #12
 800dc96:	bf38      	it	cc
 800dc98:	250c      	movcc	r5, #12
 800dc9a:	4638      	mov	r0, r7
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	f7ff ffa5 	bl	800dbec <sbrk_aligned>
 800dca2:	3001      	adds	r0, #1
 800dca4:	d02b      	beq.n	800dcfe <_malloc_r+0xd2>
 800dca6:	6823      	ldr	r3, [r4, #0]
 800dca8:	442b      	add	r3, r5
 800dcaa:	6023      	str	r3, [r4, #0]
 800dcac:	e00e      	b.n	800dccc <_malloc_r+0xa0>
 800dcae:	6822      	ldr	r2, [r4, #0]
 800dcb0:	1b52      	subs	r2, r2, r5
 800dcb2:	d41e      	bmi.n	800dcf2 <_malloc_r+0xc6>
 800dcb4:	2a0b      	cmp	r2, #11
 800dcb6:	d916      	bls.n	800dce6 <_malloc_r+0xba>
 800dcb8:	1961      	adds	r1, r4, r5
 800dcba:	42a3      	cmp	r3, r4
 800dcbc:	6025      	str	r5, [r4, #0]
 800dcbe:	bf18      	it	ne
 800dcc0:	6059      	strne	r1, [r3, #4]
 800dcc2:	6863      	ldr	r3, [r4, #4]
 800dcc4:	bf08      	it	eq
 800dcc6:	6031      	streq	r1, [r6, #0]
 800dcc8:	5162      	str	r2, [r4, r5]
 800dcca:	604b      	str	r3, [r1, #4]
 800dccc:	4638      	mov	r0, r7
 800dcce:	f104 060b 	add.w	r6, r4, #11
 800dcd2:	f000 fc13 	bl	800e4fc <__malloc_unlock>
 800dcd6:	f026 0607 	bic.w	r6, r6, #7
 800dcda:	1d23      	adds	r3, r4, #4
 800dcdc:	1af2      	subs	r2, r6, r3
 800dcde:	d0b6      	beq.n	800dc4e <_malloc_r+0x22>
 800dce0:	1b9b      	subs	r3, r3, r6
 800dce2:	50a3      	str	r3, [r4, r2]
 800dce4:	e7b3      	b.n	800dc4e <_malloc_r+0x22>
 800dce6:	6862      	ldr	r2, [r4, #4]
 800dce8:	42a3      	cmp	r3, r4
 800dcea:	bf0c      	ite	eq
 800dcec:	6032      	streq	r2, [r6, #0]
 800dcee:	605a      	strne	r2, [r3, #4]
 800dcf0:	e7ec      	b.n	800dccc <_malloc_r+0xa0>
 800dcf2:	4623      	mov	r3, r4
 800dcf4:	6864      	ldr	r4, [r4, #4]
 800dcf6:	e7b2      	b.n	800dc5e <_malloc_r+0x32>
 800dcf8:	4634      	mov	r4, r6
 800dcfa:	6876      	ldr	r6, [r6, #4]
 800dcfc:	e7b9      	b.n	800dc72 <_malloc_r+0x46>
 800dcfe:	230c      	movs	r3, #12
 800dd00:	4638      	mov	r0, r7
 800dd02:	603b      	str	r3, [r7, #0]
 800dd04:	f000 fbfa 	bl	800e4fc <__malloc_unlock>
 800dd08:	e7a1      	b.n	800dc4e <_malloc_r+0x22>
 800dd0a:	6025      	str	r5, [r4, #0]
 800dd0c:	e7de      	b.n	800dccc <_malloc_r+0xa0>
 800dd0e:	bf00      	nop
 800dd10:	20000ce0 	.word	0x20000ce0

0800dd14 <__ssputs_r>:
 800dd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd18:	688e      	ldr	r6, [r1, #8]
 800dd1a:	4682      	mov	sl, r0
 800dd1c:	429e      	cmp	r6, r3
 800dd1e:	460c      	mov	r4, r1
 800dd20:	4690      	mov	r8, r2
 800dd22:	461f      	mov	r7, r3
 800dd24:	d838      	bhi.n	800dd98 <__ssputs_r+0x84>
 800dd26:	898a      	ldrh	r2, [r1, #12]
 800dd28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd2c:	d032      	beq.n	800dd94 <__ssputs_r+0x80>
 800dd2e:	6825      	ldr	r5, [r4, #0]
 800dd30:	6909      	ldr	r1, [r1, #16]
 800dd32:	3301      	adds	r3, #1
 800dd34:	eba5 0901 	sub.w	r9, r5, r1
 800dd38:	6965      	ldr	r5, [r4, #20]
 800dd3a:	444b      	add	r3, r9
 800dd3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd44:	106d      	asrs	r5, r5, #1
 800dd46:	429d      	cmp	r5, r3
 800dd48:	bf38      	it	cc
 800dd4a:	461d      	movcc	r5, r3
 800dd4c:	0553      	lsls	r3, r2, #21
 800dd4e:	d531      	bpl.n	800ddb4 <__ssputs_r+0xa0>
 800dd50:	4629      	mov	r1, r5
 800dd52:	f7ff ff6b 	bl	800dc2c <_malloc_r>
 800dd56:	4606      	mov	r6, r0
 800dd58:	b950      	cbnz	r0, 800dd70 <__ssputs_r+0x5c>
 800dd5a:	230c      	movs	r3, #12
 800dd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd60:	f8ca 3000 	str.w	r3, [sl]
 800dd64:	89a3      	ldrh	r3, [r4, #12]
 800dd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd70:	464a      	mov	r2, r9
 800dd72:	6921      	ldr	r1, [r4, #16]
 800dd74:	f7fb fed0 	bl	8009b18 <memcpy>
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd82:	81a3      	strh	r3, [r4, #12]
 800dd84:	6126      	str	r6, [r4, #16]
 800dd86:	444e      	add	r6, r9
 800dd88:	6026      	str	r6, [r4, #0]
 800dd8a:	463e      	mov	r6, r7
 800dd8c:	6165      	str	r5, [r4, #20]
 800dd8e:	eba5 0509 	sub.w	r5, r5, r9
 800dd92:	60a5      	str	r5, [r4, #8]
 800dd94:	42be      	cmp	r6, r7
 800dd96:	d900      	bls.n	800dd9a <__ssputs_r+0x86>
 800dd98:	463e      	mov	r6, r7
 800dd9a:	4632      	mov	r2, r6
 800dd9c:	4641      	mov	r1, r8
 800dd9e:	6820      	ldr	r0, [r4, #0]
 800dda0:	f000 fb8c 	bl	800e4bc <memmove>
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	2000      	movs	r0, #0
 800dda8:	1b9b      	subs	r3, r3, r6
 800ddaa:	60a3      	str	r3, [r4, #8]
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	4433      	add	r3, r6
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	e7db      	b.n	800dd6c <__ssputs_r+0x58>
 800ddb4:	462a      	mov	r2, r5
 800ddb6:	f000 fba7 	bl	800e508 <_realloc_r>
 800ddba:	4606      	mov	r6, r0
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d1e1      	bne.n	800dd84 <__ssputs_r+0x70>
 800ddc0:	4650      	mov	r0, sl
 800ddc2:	6921      	ldr	r1, [r4, #16]
 800ddc4:	f7ff feca 	bl	800db5c <_free_r>
 800ddc8:	e7c7      	b.n	800dd5a <__ssputs_r+0x46>
	...

0800ddcc <_svfiprintf_r>:
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	4698      	mov	r8, r3
 800ddd2:	898b      	ldrh	r3, [r1, #12]
 800ddd4:	4607      	mov	r7, r0
 800ddd6:	061b      	lsls	r3, r3, #24
 800ddd8:	460d      	mov	r5, r1
 800ddda:	4614      	mov	r4, r2
 800dddc:	b09d      	sub	sp, #116	; 0x74
 800ddde:	d50e      	bpl.n	800ddfe <_svfiprintf_r+0x32>
 800dde0:	690b      	ldr	r3, [r1, #16]
 800dde2:	b963      	cbnz	r3, 800ddfe <_svfiprintf_r+0x32>
 800dde4:	2140      	movs	r1, #64	; 0x40
 800dde6:	f7ff ff21 	bl	800dc2c <_malloc_r>
 800ddea:	6028      	str	r0, [r5, #0]
 800ddec:	6128      	str	r0, [r5, #16]
 800ddee:	b920      	cbnz	r0, 800ddfa <_svfiprintf_r+0x2e>
 800ddf0:	230c      	movs	r3, #12
 800ddf2:	603b      	str	r3, [r7, #0]
 800ddf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf8:	e0d1      	b.n	800df9e <_svfiprintf_r+0x1d2>
 800ddfa:	2340      	movs	r3, #64	; 0x40
 800ddfc:	616b      	str	r3, [r5, #20]
 800ddfe:	2300      	movs	r3, #0
 800de00:	9309      	str	r3, [sp, #36]	; 0x24
 800de02:	2320      	movs	r3, #32
 800de04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de08:	2330      	movs	r3, #48	; 0x30
 800de0a:	f04f 0901 	mov.w	r9, #1
 800de0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dfb8 <_svfiprintf_r+0x1ec>
 800de16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de1a:	4623      	mov	r3, r4
 800de1c:	469a      	mov	sl, r3
 800de1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de22:	b10a      	cbz	r2, 800de28 <_svfiprintf_r+0x5c>
 800de24:	2a25      	cmp	r2, #37	; 0x25
 800de26:	d1f9      	bne.n	800de1c <_svfiprintf_r+0x50>
 800de28:	ebba 0b04 	subs.w	fp, sl, r4
 800de2c:	d00b      	beq.n	800de46 <_svfiprintf_r+0x7a>
 800de2e:	465b      	mov	r3, fp
 800de30:	4622      	mov	r2, r4
 800de32:	4629      	mov	r1, r5
 800de34:	4638      	mov	r0, r7
 800de36:	f7ff ff6d 	bl	800dd14 <__ssputs_r>
 800de3a:	3001      	adds	r0, #1
 800de3c:	f000 80aa 	beq.w	800df94 <_svfiprintf_r+0x1c8>
 800de40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de42:	445a      	add	r2, fp
 800de44:	9209      	str	r2, [sp, #36]	; 0x24
 800de46:	f89a 3000 	ldrb.w	r3, [sl]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 80a2 	beq.w	800df94 <_svfiprintf_r+0x1c8>
 800de50:	2300      	movs	r3, #0
 800de52:	f04f 32ff 	mov.w	r2, #4294967295
 800de56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de5a:	f10a 0a01 	add.w	sl, sl, #1
 800de5e:	9304      	str	r3, [sp, #16]
 800de60:	9307      	str	r3, [sp, #28]
 800de62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de66:	931a      	str	r3, [sp, #104]	; 0x68
 800de68:	4654      	mov	r4, sl
 800de6a:	2205      	movs	r2, #5
 800de6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de70:	4851      	ldr	r0, [pc, #324]	; (800dfb8 <_svfiprintf_r+0x1ec>)
 800de72:	f7ff f999 	bl	800d1a8 <memchr>
 800de76:	9a04      	ldr	r2, [sp, #16]
 800de78:	b9d8      	cbnz	r0, 800deb2 <_svfiprintf_r+0xe6>
 800de7a:	06d0      	lsls	r0, r2, #27
 800de7c:	bf44      	itt	mi
 800de7e:	2320      	movmi	r3, #32
 800de80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de84:	0711      	lsls	r1, r2, #28
 800de86:	bf44      	itt	mi
 800de88:	232b      	movmi	r3, #43	; 0x2b
 800de8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de8e:	f89a 3000 	ldrb.w	r3, [sl]
 800de92:	2b2a      	cmp	r3, #42	; 0x2a
 800de94:	d015      	beq.n	800dec2 <_svfiprintf_r+0xf6>
 800de96:	4654      	mov	r4, sl
 800de98:	2000      	movs	r0, #0
 800de9a:	f04f 0c0a 	mov.w	ip, #10
 800de9e:	9a07      	ldr	r2, [sp, #28]
 800dea0:	4621      	mov	r1, r4
 800dea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dea6:	3b30      	subs	r3, #48	; 0x30
 800dea8:	2b09      	cmp	r3, #9
 800deaa:	d94e      	bls.n	800df4a <_svfiprintf_r+0x17e>
 800deac:	b1b0      	cbz	r0, 800dedc <_svfiprintf_r+0x110>
 800deae:	9207      	str	r2, [sp, #28]
 800deb0:	e014      	b.n	800dedc <_svfiprintf_r+0x110>
 800deb2:	eba0 0308 	sub.w	r3, r0, r8
 800deb6:	fa09 f303 	lsl.w	r3, r9, r3
 800deba:	4313      	orrs	r3, r2
 800debc:	46a2      	mov	sl, r4
 800debe:	9304      	str	r3, [sp, #16]
 800dec0:	e7d2      	b.n	800de68 <_svfiprintf_r+0x9c>
 800dec2:	9b03      	ldr	r3, [sp, #12]
 800dec4:	1d19      	adds	r1, r3, #4
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	9103      	str	r1, [sp, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	bfbb      	ittet	lt
 800dece:	425b      	neglt	r3, r3
 800ded0:	f042 0202 	orrlt.w	r2, r2, #2
 800ded4:	9307      	strge	r3, [sp, #28]
 800ded6:	9307      	strlt	r3, [sp, #28]
 800ded8:	bfb8      	it	lt
 800deda:	9204      	strlt	r2, [sp, #16]
 800dedc:	7823      	ldrb	r3, [r4, #0]
 800dede:	2b2e      	cmp	r3, #46	; 0x2e
 800dee0:	d10c      	bne.n	800defc <_svfiprintf_r+0x130>
 800dee2:	7863      	ldrb	r3, [r4, #1]
 800dee4:	2b2a      	cmp	r3, #42	; 0x2a
 800dee6:	d135      	bne.n	800df54 <_svfiprintf_r+0x188>
 800dee8:	9b03      	ldr	r3, [sp, #12]
 800deea:	3402      	adds	r4, #2
 800deec:	1d1a      	adds	r2, r3, #4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	9203      	str	r2, [sp, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	bfb8      	it	lt
 800def6:	f04f 33ff 	movlt.w	r3, #4294967295
 800defa:	9305      	str	r3, [sp, #20]
 800defc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dfbc <_svfiprintf_r+0x1f0>
 800df00:	2203      	movs	r2, #3
 800df02:	4650      	mov	r0, sl
 800df04:	7821      	ldrb	r1, [r4, #0]
 800df06:	f7ff f94f 	bl	800d1a8 <memchr>
 800df0a:	b140      	cbz	r0, 800df1e <_svfiprintf_r+0x152>
 800df0c:	2340      	movs	r3, #64	; 0x40
 800df0e:	eba0 000a 	sub.w	r0, r0, sl
 800df12:	fa03 f000 	lsl.w	r0, r3, r0
 800df16:	9b04      	ldr	r3, [sp, #16]
 800df18:	3401      	adds	r4, #1
 800df1a:	4303      	orrs	r3, r0
 800df1c:	9304      	str	r3, [sp, #16]
 800df1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df22:	2206      	movs	r2, #6
 800df24:	4826      	ldr	r0, [pc, #152]	; (800dfc0 <_svfiprintf_r+0x1f4>)
 800df26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df2a:	f7ff f93d 	bl	800d1a8 <memchr>
 800df2e:	2800      	cmp	r0, #0
 800df30:	d038      	beq.n	800dfa4 <_svfiprintf_r+0x1d8>
 800df32:	4b24      	ldr	r3, [pc, #144]	; (800dfc4 <_svfiprintf_r+0x1f8>)
 800df34:	bb1b      	cbnz	r3, 800df7e <_svfiprintf_r+0x1b2>
 800df36:	9b03      	ldr	r3, [sp, #12]
 800df38:	3307      	adds	r3, #7
 800df3a:	f023 0307 	bic.w	r3, r3, #7
 800df3e:	3308      	adds	r3, #8
 800df40:	9303      	str	r3, [sp, #12]
 800df42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df44:	4433      	add	r3, r6
 800df46:	9309      	str	r3, [sp, #36]	; 0x24
 800df48:	e767      	b.n	800de1a <_svfiprintf_r+0x4e>
 800df4a:	460c      	mov	r4, r1
 800df4c:	2001      	movs	r0, #1
 800df4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df52:	e7a5      	b.n	800dea0 <_svfiprintf_r+0xd4>
 800df54:	2300      	movs	r3, #0
 800df56:	f04f 0c0a 	mov.w	ip, #10
 800df5a:	4619      	mov	r1, r3
 800df5c:	3401      	adds	r4, #1
 800df5e:	9305      	str	r3, [sp, #20]
 800df60:	4620      	mov	r0, r4
 800df62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df66:	3a30      	subs	r2, #48	; 0x30
 800df68:	2a09      	cmp	r2, #9
 800df6a:	d903      	bls.n	800df74 <_svfiprintf_r+0x1a8>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d0c5      	beq.n	800defc <_svfiprintf_r+0x130>
 800df70:	9105      	str	r1, [sp, #20]
 800df72:	e7c3      	b.n	800defc <_svfiprintf_r+0x130>
 800df74:	4604      	mov	r4, r0
 800df76:	2301      	movs	r3, #1
 800df78:	fb0c 2101 	mla	r1, ip, r1, r2
 800df7c:	e7f0      	b.n	800df60 <_svfiprintf_r+0x194>
 800df7e:	ab03      	add	r3, sp, #12
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	462a      	mov	r2, r5
 800df84:	4638      	mov	r0, r7
 800df86:	4b10      	ldr	r3, [pc, #64]	; (800dfc8 <_svfiprintf_r+0x1fc>)
 800df88:	a904      	add	r1, sp, #16
 800df8a:	f7fb fe79 	bl	8009c80 <_printf_float>
 800df8e:	1c42      	adds	r2, r0, #1
 800df90:	4606      	mov	r6, r0
 800df92:	d1d6      	bne.n	800df42 <_svfiprintf_r+0x176>
 800df94:	89ab      	ldrh	r3, [r5, #12]
 800df96:	065b      	lsls	r3, r3, #25
 800df98:	f53f af2c 	bmi.w	800ddf4 <_svfiprintf_r+0x28>
 800df9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df9e:	b01d      	add	sp, #116	; 0x74
 800dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa4:	ab03      	add	r3, sp, #12
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	462a      	mov	r2, r5
 800dfaa:	4638      	mov	r0, r7
 800dfac:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <_svfiprintf_r+0x1fc>)
 800dfae:	a904      	add	r1, sp, #16
 800dfb0:	f7fc f902 	bl	800a1b8 <_printf_i>
 800dfb4:	e7eb      	b.n	800df8e <_svfiprintf_r+0x1c2>
 800dfb6:	bf00      	nop
 800dfb8:	0800ec44 	.word	0x0800ec44
 800dfbc:	0800ec4a 	.word	0x0800ec4a
 800dfc0:	0800ec4e 	.word	0x0800ec4e
 800dfc4:	08009c81 	.word	0x08009c81
 800dfc8:	0800dd15 	.word	0x0800dd15

0800dfcc <__sfputc_r>:
 800dfcc:	6893      	ldr	r3, [r2, #8]
 800dfce:	b410      	push	{r4}
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	6093      	str	r3, [r2, #8]
 800dfd6:	da07      	bge.n	800dfe8 <__sfputc_r+0x1c>
 800dfd8:	6994      	ldr	r4, [r2, #24]
 800dfda:	42a3      	cmp	r3, r4
 800dfdc:	db01      	blt.n	800dfe2 <__sfputc_r+0x16>
 800dfde:	290a      	cmp	r1, #10
 800dfe0:	d102      	bne.n	800dfe8 <__sfputc_r+0x1c>
 800dfe2:	bc10      	pop	{r4}
 800dfe4:	f7fd bbd6 	b.w	800b794 <__swbuf_r>
 800dfe8:	6813      	ldr	r3, [r2, #0]
 800dfea:	1c58      	adds	r0, r3, #1
 800dfec:	6010      	str	r0, [r2, #0]
 800dfee:	7019      	strb	r1, [r3, #0]
 800dff0:	4608      	mov	r0, r1
 800dff2:	bc10      	pop	{r4}
 800dff4:	4770      	bx	lr

0800dff6 <__sfputs_r>:
 800dff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff8:	4606      	mov	r6, r0
 800dffa:	460f      	mov	r7, r1
 800dffc:	4614      	mov	r4, r2
 800dffe:	18d5      	adds	r5, r2, r3
 800e000:	42ac      	cmp	r4, r5
 800e002:	d101      	bne.n	800e008 <__sfputs_r+0x12>
 800e004:	2000      	movs	r0, #0
 800e006:	e007      	b.n	800e018 <__sfputs_r+0x22>
 800e008:	463a      	mov	r2, r7
 800e00a:	4630      	mov	r0, r6
 800e00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e010:	f7ff ffdc 	bl	800dfcc <__sfputc_r>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d1f3      	bne.n	800e000 <__sfputs_r+0xa>
 800e018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e01c <_vfiprintf_r>:
 800e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e020:	460d      	mov	r5, r1
 800e022:	4614      	mov	r4, r2
 800e024:	4698      	mov	r8, r3
 800e026:	4606      	mov	r6, r0
 800e028:	b09d      	sub	sp, #116	; 0x74
 800e02a:	b118      	cbz	r0, 800e034 <_vfiprintf_r+0x18>
 800e02c:	6983      	ldr	r3, [r0, #24]
 800e02e:	b90b      	cbnz	r3, 800e034 <_vfiprintf_r+0x18>
 800e030:	f7fe fc1e 	bl	800c870 <__sinit>
 800e034:	4b89      	ldr	r3, [pc, #548]	; (800e25c <_vfiprintf_r+0x240>)
 800e036:	429d      	cmp	r5, r3
 800e038:	d11b      	bne.n	800e072 <_vfiprintf_r+0x56>
 800e03a:	6875      	ldr	r5, [r6, #4]
 800e03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e03e:	07d9      	lsls	r1, r3, #31
 800e040:	d405      	bmi.n	800e04e <_vfiprintf_r+0x32>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	059a      	lsls	r2, r3, #22
 800e046:	d402      	bmi.n	800e04e <_vfiprintf_r+0x32>
 800e048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e04a:	f7ff f82c 	bl	800d0a6 <__retarget_lock_acquire_recursive>
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	071b      	lsls	r3, r3, #28
 800e052:	d501      	bpl.n	800e058 <_vfiprintf_r+0x3c>
 800e054:	692b      	ldr	r3, [r5, #16]
 800e056:	b9eb      	cbnz	r3, 800e094 <_vfiprintf_r+0x78>
 800e058:	4629      	mov	r1, r5
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7fd fbec 	bl	800b838 <__swsetup_r>
 800e060:	b1c0      	cbz	r0, 800e094 <_vfiprintf_r+0x78>
 800e062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e064:	07dc      	lsls	r4, r3, #31
 800e066:	d50e      	bpl.n	800e086 <_vfiprintf_r+0x6a>
 800e068:	f04f 30ff 	mov.w	r0, #4294967295
 800e06c:	b01d      	add	sp, #116	; 0x74
 800e06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e072:	4b7b      	ldr	r3, [pc, #492]	; (800e260 <_vfiprintf_r+0x244>)
 800e074:	429d      	cmp	r5, r3
 800e076:	d101      	bne.n	800e07c <_vfiprintf_r+0x60>
 800e078:	68b5      	ldr	r5, [r6, #8]
 800e07a:	e7df      	b.n	800e03c <_vfiprintf_r+0x20>
 800e07c:	4b79      	ldr	r3, [pc, #484]	; (800e264 <_vfiprintf_r+0x248>)
 800e07e:	429d      	cmp	r5, r3
 800e080:	bf08      	it	eq
 800e082:	68f5      	ldreq	r5, [r6, #12]
 800e084:	e7da      	b.n	800e03c <_vfiprintf_r+0x20>
 800e086:	89ab      	ldrh	r3, [r5, #12]
 800e088:	0598      	lsls	r0, r3, #22
 800e08a:	d4ed      	bmi.n	800e068 <_vfiprintf_r+0x4c>
 800e08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e08e:	f7ff f80b 	bl	800d0a8 <__retarget_lock_release_recursive>
 800e092:	e7e9      	b.n	800e068 <_vfiprintf_r+0x4c>
 800e094:	2300      	movs	r3, #0
 800e096:	9309      	str	r3, [sp, #36]	; 0x24
 800e098:	2320      	movs	r3, #32
 800e09a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e09e:	2330      	movs	r3, #48	; 0x30
 800e0a0:	f04f 0901 	mov.w	r9, #1
 800e0a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e268 <_vfiprintf_r+0x24c>
 800e0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0b0:	4623      	mov	r3, r4
 800e0b2:	469a      	mov	sl, r3
 800e0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b8:	b10a      	cbz	r2, 800e0be <_vfiprintf_r+0xa2>
 800e0ba:	2a25      	cmp	r2, #37	; 0x25
 800e0bc:	d1f9      	bne.n	800e0b2 <_vfiprintf_r+0x96>
 800e0be:	ebba 0b04 	subs.w	fp, sl, r4
 800e0c2:	d00b      	beq.n	800e0dc <_vfiprintf_r+0xc0>
 800e0c4:	465b      	mov	r3, fp
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f7ff ff93 	bl	800dff6 <__sfputs_r>
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	f000 80aa 	beq.w	800e22a <_vfiprintf_r+0x20e>
 800e0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d8:	445a      	add	r2, fp
 800e0da:	9209      	str	r2, [sp, #36]	; 0x24
 800e0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 80a2 	beq.w	800e22a <_vfiprintf_r+0x20e>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0f0:	f10a 0a01 	add.w	sl, sl, #1
 800e0f4:	9304      	str	r3, [sp, #16]
 800e0f6:	9307      	str	r3, [sp, #28]
 800e0f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0fc:	931a      	str	r3, [sp, #104]	; 0x68
 800e0fe:	4654      	mov	r4, sl
 800e100:	2205      	movs	r2, #5
 800e102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e106:	4858      	ldr	r0, [pc, #352]	; (800e268 <_vfiprintf_r+0x24c>)
 800e108:	f7ff f84e 	bl	800d1a8 <memchr>
 800e10c:	9a04      	ldr	r2, [sp, #16]
 800e10e:	b9d8      	cbnz	r0, 800e148 <_vfiprintf_r+0x12c>
 800e110:	06d1      	lsls	r1, r2, #27
 800e112:	bf44      	itt	mi
 800e114:	2320      	movmi	r3, #32
 800e116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e11a:	0713      	lsls	r3, r2, #28
 800e11c:	bf44      	itt	mi
 800e11e:	232b      	movmi	r3, #43	; 0x2b
 800e120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e124:	f89a 3000 	ldrb.w	r3, [sl]
 800e128:	2b2a      	cmp	r3, #42	; 0x2a
 800e12a:	d015      	beq.n	800e158 <_vfiprintf_r+0x13c>
 800e12c:	4654      	mov	r4, sl
 800e12e:	2000      	movs	r0, #0
 800e130:	f04f 0c0a 	mov.w	ip, #10
 800e134:	9a07      	ldr	r2, [sp, #28]
 800e136:	4621      	mov	r1, r4
 800e138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e13c:	3b30      	subs	r3, #48	; 0x30
 800e13e:	2b09      	cmp	r3, #9
 800e140:	d94e      	bls.n	800e1e0 <_vfiprintf_r+0x1c4>
 800e142:	b1b0      	cbz	r0, 800e172 <_vfiprintf_r+0x156>
 800e144:	9207      	str	r2, [sp, #28]
 800e146:	e014      	b.n	800e172 <_vfiprintf_r+0x156>
 800e148:	eba0 0308 	sub.w	r3, r0, r8
 800e14c:	fa09 f303 	lsl.w	r3, r9, r3
 800e150:	4313      	orrs	r3, r2
 800e152:	46a2      	mov	sl, r4
 800e154:	9304      	str	r3, [sp, #16]
 800e156:	e7d2      	b.n	800e0fe <_vfiprintf_r+0xe2>
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	1d19      	adds	r1, r3, #4
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	9103      	str	r1, [sp, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	bfbb      	ittet	lt
 800e164:	425b      	neglt	r3, r3
 800e166:	f042 0202 	orrlt.w	r2, r2, #2
 800e16a:	9307      	strge	r3, [sp, #28]
 800e16c:	9307      	strlt	r3, [sp, #28]
 800e16e:	bfb8      	it	lt
 800e170:	9204      	strlt	r2, [sp, #16]
 800e172:	7823      	ldrb	r3, [r4, #0]
 800e174:	2b2e      	cmp	r3, #46	; 0x2e
 800e176:	d10c      	bne.n	800e192 <_vfiprintf_r+0x176>
 800e178:	7863      	ldrb	r3, [r4, #1]
 800e17a:	2b2a      	cmp	r3, #42	; 0x2a
 800e17c:	d135      	bne.n	800e1ea <_vfiprintf_r+0x1ce>
 800e17e:	9b03      	ldr	r3, [sp, #12]
 800e180:	3402      	adds	r4, #2
 800e182:	1d1a      	adds	r2, r3, #4
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	9203      	str	r2, [sp, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	bfb8      	it	lt
 800e18c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e190:	9305      	str	r3, [sp, #20]
 800e192:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e26c <_vfiprintf_r+0x250>
 800e196:	2203      	movs	r2, #3
 800e198:	4650      	mov	r0, sl
 800e19a:	7821      	ldrb	r1, [r4, #0]
 800e19c:	f7ff f804 	bl	800d1a8 <memchr>
 800e1a0:	b140      	cbz	r0, 800e1b4 <_vfiprintf_r+0x198>
 800e1a2:	2340      	movs	r3, #64	; 0x40
 800e1a4:	eba0 000a 	sub.w	r0, r0, sl
 800e1a8:	fa03 f000 	lsl.w	r0, r3, r0
 800e1ac:	9b04      	ldr	r3, [sp, #16]
 800e1ae:	3401      	adds	r4, #1
 800e1b0:	4303      	orrs	r3, r0
 800e1b2:	9304      	str	r3, [sp, #16]
 800e1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b8:	2206      	movs	r2, #6
 800e1ba:	482d      	ldr	r0, [pc, #180]	; (800e270 <_vfiprintf_r+0x254>)
 800e1bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1c0:	f7fe fff2 	bl	800d1a8 <memchr>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d03f      	beq.n	800e248 <_vfiprintf_r+0x22c>
 800e1c8:	4b2a      	ldr	r3, [pc, #168]	; (800e274 <_vfiprintf_r+0x258>)
 800e1ca:	bb1b      	cbnz	r3, 800e214 <_vfiprintf_r+0x1f8>
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	3307      	adds	r3, #7
 800e1d0:	f023 0307 	bic.w	r3, r3, #7
 800e1d4:	3308      	adds	r3, #8
 800e1d6:	9303      	str	r3, [sp, #12]
 800e1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1da:	443b      	add	r3, r7
 800e1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1de:	e767      	b.n	800e0b0 <_vfiprintf_r+0x94>
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1e8:	e7a5      	b.n	800e136 <_vfiprintf_r+0x11a>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	f04f 0c0a 	mov.w	ip, #10
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	3401      	adds	r4, #1
 800e1f4:	9305      	str	r3, [sp, #20]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1fc:	3a30      	subs	r2, #48	; 0x30
 800e1fe:	2a09      	cmp	r2, #9
 800e200:	d903      	bls.n	800e20a <_vfiprintf_r+0x1ee>
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0c5      	beq.n	800e192 <_vfiprintf_r+0x176>
 800e206:	9105      	str	r1, [sp, #20]
 800e208:	e7c3      	b.n	800e192 <_vfiprintf_r+0x176>
 800e20a:	4604      	mov	r4, r0
 800e20c:	2301      	movs	r3, #1
 800e20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e212:	e7f0      	b.n	800e1f6 <_vfiprintf_r+0x1da>
 800e214:	ab03      	add	r3, sp, #12
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	462a      	mov	r2, r5
 800e21a:	4630      	mov	r0, r6
 800e21c:	4b16      	ldr	r3, [pc, #88]	; (800e278 <_vfiprintf_r+0x25c>)
 800e21e:	a904      	add	r1, sp, #16
 800e220:	f7fb fd2e 	bl	8009c80 <_printf_float>
 800e224:	4607      	mov	r7, r0
 800e226:	1c78      	adds	r0, r7, #1
 800e228:	d1d6      	bne.n	800e1d8 <_vfiprintf_r+0x1bc>
 800e22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e22c:	07d9      	lsls	r1, r3, #31
 800e22e:	d405      	bmi.n	800e23c <_vfiprintf_r+0x220>
 800e230:	89ab      	ldrh	r3, [r5, #12]
 800e232:	059a      	lsls	r2, r3, #22
 800e234:	d402      	bmi.n	800e23c <_vfiprintf_r+0x220>
 800e236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e238:	f7fe ff36 	bl	800d0a8 <__retarget_lock_release_recursive>
 800e23c:	89ab      	ldrh	r3, [r5, #12]
 800e23e:	065b      	lsls	r3, r3, #25
 800e240:	f53f af12 	bmi.w	800e068 <_vfiprintf_r+0x4c>
 800e244:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e246:	e711      	b.n	800e06c <_vfiprintf_r+0x50>
 800e248:	ab03      	add	r3, sp, #12
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	462a      	mov	r2, r5
 800e24e:	4630      	mov	r0, r6
 800e250:	4b09      	ldr	r3, [pc, #36]	; (800e278 <_vfiprintf_r+0x25c>)
 800e252:	a904      	add	r1, sp, #16
 800e254:	f7fb ffb0 	bl	800a1b8 <_printf_i>
 800e258:	e7e4      	b.n	800e224 <_vfiprintf_r+0x208>
 800e25a:	bf00      	nop
 800e25c:	0800ea2c 	.word	0x0800ea2c
 800e260:	0800ea4c 	.word	0x0800ea4c
 800e264:	0800ea0c 	.word	0x0800ea0c
 800e268:	0800ec44 	.word	0x0800ec44
 800e26c:	0800ec4a 	.word	0x0800ec4a
 800e270:	0800ec4e 	.word	0x0800ec4e
 800e274:	08009c81 	.word	0x08009c81
 800e278:	0800dff7 	.word	0x0800dff7

0800e27c <_putc_r>:
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	460d      	mov	r5, r1
 800e280:	4614      	mov	r4, r2
 800e282:	4606      	mov	r6, r0
 800e284:	b118      	cbz	r0, 800e28e <_putc_r+0x12>
 800e286:	6983      	ldr	r3, [r0, #24]
 800e288:	b90b      	cbnz	r3, 800e28e <_putc_r+0x12>
 800e28a:	f7fe faf1 	bl	800c870 <__sinit>
 800e28e:	4b1c      	ldr	r3, [pc, #112]	; (800e300 <_putc_r+0x84>)
 800e290:	429c      	cmp	r4, r3
 800e292:	d124      	bne.n	800e2de <_putc_r+0x62>
 800e294:	6874      	ldr	r4, [r6, #4]
 800e296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e298:	07d8      	lsls	r0, r3, #31
 800e29a:	d405      	bmi.n	800e2a8 <_putc_r+0x2c>
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	0599      	lsls	r1, r3, #22
 800e2a0:	d402      	bmi.n	800e2a8 <_putc_r+0x2c>
 800e2a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2a4:	f7fe feff 	bl	800d0a6 <__retarget_lock_acquire_recursive>
 800e2a8:	68a3      	ldr	r3, [r4, #8]
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	60a3      	str	r3, [r4, #8]
 800e2b0:	da05      	bge.n	800e2be <_putc_r+0x42>
 800e2b2:	69a2      	ldr	r2, [r4, #24]
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	db1c      	blt.n	800e2f2 <_putc_r+0x76>
 800e2b8:	b2eb      	uxtb	r3, r5
 800e2ba:	2b0a      	cmp	r3, #10
 800e2bc:	d019      	beq.n	800e2f2 <_putc_r+0x76>
 800e2be:	6823      	ldr	r3, [r4, #0]
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	6022      	str	r2, [r4, #0]
 800e2c4:	701d      	strb	r5, [r3, #0]
 800e2c6:	b2ed      	uxtb	r5, r5
 800e2c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2ca:	07da      	lsls	r2, r3, #31
 800e2cc:	d405      	bmi.n	800e2da <_putc_r+0x5e>
 800e2ce:	89a3      	ldrh	r3, [r4, #12]
 800e2d0:	059b      	lsls	r3, r3, #22
 800e2d2:	d402      	bmi.n	800e2da <_putc_r+0x5e>
 800e2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2d6:	f7fe fee7 	bl	800d0a8 <__retarget_lock_release_recursive>
 800e2da:	4628      	mov	r0, r5
 800e2dc:	bd70      	pop	{r4, r5, r6, pc}
 800e2de:	4b09      	ldr	r3, [pc, #36]	; (800e304 <_putc_r+0x88>)
 800e2e0:	429c      	cmp	r4, r3
 800e2e2:	d101      	bne.n	800e2e8 <_putc_r+0x6c>
 800e2e4:	68b4      	ldr	r4, [r6, #8]
 800e2e6:	e7d6      	b.n	800e296 <_putc_r+0x1a>
 800e2e8:	4b07      	ldr	r3, [pc, #28]	; (800e308 <_putc_r+0x8c>)
 800e2ea:	429c      	cmp	r4, r3
 800e2ec:	bf08      	it	eq
 800e2ee:	68f4      	ldreq	r4, [r6, #12]
 800e2f0:	e7d1      	b.n	800e296 <_putc_r+0x1a>
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f7fd fa4c 	bl	800b794 <__swbuf_r>
 800e2fc:	4605      	mov	r5, r0
 800e2fe:	e7e3      	b.n	800e2c8 <_putc_r+0x4c>
 800e300:	0800ea2c 	.word	0x0800ea2c
 800e304:	0800ea4c 	.word	0x0800ea4c
 800e308:	0800ea0c 	.word	0x0800ea0c

0800e30c <nan>:
 800e30c:	2000      	movs	r0, #0
 800e30e:	4901      	ldr	r1, [pc, #4]	; (800e314 <nan+0x8>)
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	7ff80000 	.word	0x7ff80000

0800e318 <_sbrk_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	2300      	movs	r3, #0
 800e31c:	4d05      	ldr	r5, [pc, #20]	; (800e334 <_sbrk_r+0x1c>)
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f5 fbc4 	bl	8003ab0 <_sbrk>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_sbrk_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_sbrk_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	20000ce8 	.word	0x20000ce8

0800e338 <__sread>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	460c      	mov	r4, r1
 800e33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e340:	f000 f912 	bl	800e568 <_read_r>
 800e344:	2800      	cmp	r0, #0
 800e346:	bfab      	itete	ge
 800e348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e34a:	89a3      	ldrhlt	r3, [r4, #12]
 800e34c:	181b      	addge	r3, r3, r0
 800e34e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e352:	bfac      	ite	ge
 800e354:	6563      	strge	r3, [r4, #84]	; 0x54
 800e356:	81a3      	strhlt	r3, [r4, #12]
 800e358:	bd10      	pop	{r4, pc}

0800e35a <__swrite>:
 800e35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35e:	461f      	mov	r7, r3
 800e360:	898b      	ldrh	r3, [r1, #12]
 800e362:	4605      	mov	r5, r0
 800e364:	05db      	lsls	r3, r3, #23
 800e366:	460c      	mov	r4, r1
 800e368:	4616      	mov	r6, r2
 800e36a:	d505      	bpl.n	800e378 <__swrite+0x1e>
 800e36c:	2302      	movs	r3, #2
 800e36e:	2200      	movs	r2, #0
 800e370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e374:	f000 f890 	bl	800e498 <_lseek_r>
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	4632      	mov	r2, r6
 800e37c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e380:	81a3      	strh	r3, [r4, #12]
 800e382:	4628      	mov	r0, r5
 800e384:	463b      	mov	r3, r7
 800e386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	f000 b837 	b.w	800e400 <_write_r>

0800e392 <__sseek>:
 800e392:	b510      	push	{r4, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39a:	f000 f87d 	bl	800e498 <_lseek_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	bf15      	itete	ne
 800e3a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3ae:	81a3      	strheq	r3, [r4, #12]
 800e3b0:	bf18      	it	ne
 800e3b2:	81a3      	strhne	r3, [r4, #12]
 800e3b4:	bd10      	pop	{r4, pc}

0800e3b6 <__sclose>:
 800e3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ba:	f000 b83b 	b.w	800e434 <_close_r>

0800e3be <strncmp>:
 800e3be:	4603      	mov	r3, r0
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	b172      	cbz	r2, 800e3e2 <strncmp+0x24>
 800e3c4:	3901      	subs	r1, #1
 800e3c6:	1884      	adds	r4, r0, r2
 800e3c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e3cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e3d0:	4290      	cmp	r0, r2
 800e3d2:	d101      	bne.n	800e3d8 <strncmp+0x1a>
 800e3d4:	42a3      	cmp	r3, r4
 800e3d6:	d101      	bne.n	800e3dc <strncmp+0x1e>
 800e3d8:	1a80      	subs	r0, r0, r2
 800e3da:	bd10      	pop	{r4, pc}
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d1f3      	bne.n	800e3c8 <strncmp+0xa>
 800e3e0:	e7fa      	b.n	800e3d8 <strncmp+0x1a>
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	e7f9      	b.n	800e3da <strncmp+0x1c>

0800e3e6 <__ascii_wctomb>:
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	4608      	mov	r0, r1
 800e3ea:	b141      	cbz	r1, 800e3fe <__ascii_wctomb+0x18>
 800e3ec:	2aff      	cmp	r2, #255	; 0xff
 800e3ee:	d904      	bls.n	800e3fa <__ascii_wctomb+0x14>
 800e3f0:	228a      	movs	r2, #138	; 0x8a
 800e3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	4770      	bx	lr
 800e3fa:	2001      	movs	r0, #1
 800e3fc:	700a      	strb	r2, [r1, #0]
 800e3fe:	4770      	bx	lr

0800e400 <_write_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4604      	mov	r4, r0
 800e404:	4608      	mov	r0, r1
 800e406:	4611      	mov	r1, r2
 800e408:	2200      	movs	r2, #0
 800e40a:	4d05      	ldr	r5, [pc, #20]	; (800e420 <_write_r+0x20>)
 800e40c:	602a      	str	r2, [r5, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	f7f5 fb02 	bl	8003a18 <_write>
 800e414:	1c43      	adds	r3, r0, #1
 800e416:	d102      	bne.n	800e41e <_write_r+0x1e>
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	b103      	cbz	r3, 800e41e <_write_r+0x1e>
 800e41c:	6023      	str	r3, [r4, #0]
 800e41e:	bd38      	pop	{r3, r4, r5, pc}
 800e420:	20000ce8 	.word	0x20000ce8

0800e424 <abort>:
 800e424:	2006      	movs	r0, #6
 800e426:	b508      	push	{r3, lr}
 800e428:	f000 f8d8 	bl	800e5dc <raise>
 800e42c:	2001      	movs	r0, #1
 800e42e:	f7f5 facc 	bl	80039ca <_exit>
	...

0800e434 <_close_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	2300      	movs	r3, #0
 800e438:	4d05      	ldr	r5, [pc, #20]	; (800e450 <_close_r+0x1c>)
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	602b      	str	r3, [r5, #0]
 800e440:	f7f5 fb06 	bl	8003a50 <_close>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	d102      	bne.n	800e44e <_close_r+0x1a>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	b103      	cbz	r3, 800e44e <_close_r+0x1a>
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	20000ce8 	.word	0x20000ce8

0800e454 <_fstat_r>:
 800e454:	b538      	push	{r3, r4, r5, lr}
 800e456:	2300      	movs	r3, #0
 800e458:	4d06      	ldr	r5, [pc, #24]	; (800e474 <_fstat_r+0x20>)
 800e45a:	4604      	mov	r4, r0
 800e45c:	4608      	mov	r0, r1
 800e45e:	4611      	mov	r1, r2
 800e460:	602b      	str	r3, [r5, #0]
 800e462:	f7f5 fb00 	bl	8003a66 <_fstat>
 800e466:	1c43      	adds	r3, r0, #1
 800e468:	d102      	bne.n	800e470 <_fstat_r+0x1c>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	b103      	cbz	r3, 800e470 <_fstat_r+0x1c>
 800e46e:	6023      	str	r3, [r4, #0]
 800e470:	bd38      	pop	{r3, r4, r5, pc}
 800e472:	bf00      	nop
 800e474:	20000ce8 	.word	0x20000ce8

0800e478 <_isatty_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	2300      	movs	r3, #0
 800e47c:	4d05      	ldr	r5, [pc, #20]	; (800e494 <_isatty_r+0x1c>)
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	f7f5 fafe 	bl	8003a84 <_isatty>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_isatty_r+0x1a>
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_isatty_r+0x1a>
 800e490:	6023      	str	r3, [r4, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	20000ce8 	.word	0x20000ce8

0800e498 <_lseek_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4604      	mov	r4, r0
 800e49c:	4608      	mov	r0, r1
 800e49e:	4611      	mov	r1, r2
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	4d05      	ldr	r5, [pc, #20]	; (800e4b8 <_lseek_r+0x20>)
 800e4a4:	602a      	str	r2, [r5, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f7f5 faf6 	bl	8003a98 <_lseek>
 800e4ac:	1c43      	adds	r3, r0, #1
 800e4ae:	d102      	bne.n	800e4b6 <_lseek_r+0x1e>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	b103      	cbz	r3, 800e4b6 <_lseek_r+0x1e>
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	20000ce8 	.word	0x20000ce8

0800e4bc <memmove>:
 800e4bc:	4288      	cmp	r0, r1
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	eb01 0402 	add.w	r4, r1, r2
 800e4c4:	d902      	bls.n	800e4cc <memmove+0x10>
 800e4c6:	4284      	cmp	r4, r0
 800e4c8:	4623      	mov	r3, r4
 800e4ca:	d807      	bhi.n	800e4dc <memmove+0x20>
 800e4cc:	1e43      	subs	r3, r0, #1
 800e4ce:	42a1      	cmp	r1, r4
 800e4d0:	d008      	beq.n	800e4e4 <memmove+0x28>
 800e4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4da:	e7f8      	b.n	800e4ce <memmove+0x12>
 800e4dc:	4601      	mov	r1, r0
 800e4de:	4402      	add	r2, r0
 800e4e0:	428a      	cmp	r2, r1
 800e4e2:	d100      	bne.n	800e4e6 <memmove+0x2a>
 800e4e4:	bd10      	pop	{r4, pc}
 800e4e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4ee:	e7f7      	b.n	800e4e0 <memmove+0x24>

0800e4f0 <__malloc_lock>:
 800e4f0:	4801      	ldr	r0, [pc, #4]	; (800e4f8 <__malloc_lock+0x8>)
 800e4f2:	f7fe bdd8 	b.w	800d0a6 <__retarget_lock_acquire_recursive>
 800e4f6:	bf00      	nop
 800e4f8:	20000cdc 	.word	0x20000cdc

0800e4fc <__malloc_unlock>:
 800e4fc:	4801      	ldr	r0, [pc, #4]	; (800e504 <__malloc_unlock+0x8>)
 800e4fe:	f7fe bdd3 	b.w	800d0a8 <__retarget_lock_release_recursive>
 800e502:	bf00      	nop
 800e504:	20000cdc 	.word	0x20000cdc

0800e508 <_realloc_r>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	4680      	mov	r8, r0
 800e50e:	4614      	mov	r4, r2
 800e510:	460e      	mov	r6, r1
 800e512:	b921      	cbnz	r1, 800e51e <_realloc_r+0x16>
 800e514:	4611      	mov	r1, r2
 800e516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e51a:	f7ff bb87 	b.w	800dc2c <_malloc_r>
 800e51e:	b92a      	cbnz	r2, 800e52c <_realloc_r+0x24>
 800e520:	f7ff fb1c 	bl	800db5c <_free_r>
 800e524:	4625      	mov	r5, r4
 800e526:	4628      	mov	r0, r5
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52c:	f000 f872 	bl	800e614 <_malloc_usable_size_r>
 800e530:	4284      	cmp	r4, r0
 800e532:	4607      	mov	r7, r0
 800e534:	d802      	bhi.n	800e53c <_realloc_r+0x34>
 800e536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e53a:	d812      	bhi.n	800e562 <_realloc_r+0x5a>
 800e53c:	4621      	mov	r1, r4
 800e53e:	4640      	mov	r0, r8
 800e540:	f7ff fb74 	bl	800dc2c <_malloc_r>
 800e544:	4605      	mov	r5, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	d0ed      	beq.n	800e526 <_realloc_r+0x1e>
 800e54a:	42bc      	cmp	r4, r7
 800e54c:	4622      	mov	r2, r4
 800e54e:	4631      	mov	r1, r6
 800e550:	bf28      	it	cs
 800e552:	463a      	movcs	r2, r7
 800e554:	f7fb fae0 	bl	8009b18 <memcpy>
 800e558:	4631      	mov	r1, r6
 800e55a:	4640      	mov	r0, r8
 800e55c:	f7ff fafe 	bl	800db5c <_free_r>
 800e560:	e7e1      	b.n	800e526 <_realloc_r+0x1e>
 800e562:	4635      	mov	r5, r6
 800e564:	e7df      	b.n	800e526 <_realloc_r+0x1e>
	...

0800e568 <_read_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4604      	mov	r4, r0
 800e56c:	4608      	mov	r0, r1
 800e56e:	4611      	mov	r1, r2
 800e570:	2200      	movs	r2, #0
 800e572:	4d05      	ldr	r5, [pc, #20]	; (800e588 <_read_r+0x20>)
 800e574:	602a      	str	r2, [r5, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	f7f5 fa31 	bl	80039de <_read>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_read_r+0x1e>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	b103      	cbz	r3, 800e586 <_read_r+0x1e>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	20000ce8 	.word	0x20000ce8

0800e58c <_raise_r>:
 800e58c:	291f      	cmp	r1, #31
 800e58e:	b538      	push	{r3, r4, r5, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	d904      	bls.n	800e5a0 <_raise_r+0x14>
 800e596:	2316      	movs	r3, #22
 800e598:	6003      	str	r3, [r0, #0]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5a2:	b112      	cbz	r2, 800e5aa <_raise_r+0x1e>
 800e5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5a8:	b94b      	cbnz	r3, 800e5be <_raise_r+0x32>
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 f830 	bl	800e610 <_getpid_r>
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ba:	f000 b817 	b.w	800e5ec <_kill_r>
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d00a      	beq.n	800e5d8 <_raise_r+0x4c>
 800e5c2:	1c59      	adds	r1, r3, #1
 800e5c4:	d103      	bne.n	800e5ce <_raise_r+0x42>
 800e5c6:	2316      	movs	r3, #22
 800e5c8:	6003      	str	r3, [r0, #0]
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	e7e7      	b.n	800e59e <_raise_r+0x12>
 800e5ce:	2400      	movs	r4, #0
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e5d6:	4798      	blx	r3
 800e5d8:	2000      	movs	r0, #0
 800e5da:	e7e0      	b.n	800e59e <_raise_r+0x12>

0800e5dc <raise>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	; (800e5e8 <raise+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f7ff bfd3 	b.w	800e58c <_raise_r>
 800e5e6:	bf00      	nop
 800e5e8:	20000614 	.word	0x20000614

0800e5ec <_kill_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	4d06      	ldr	r5, [pc, #24]	; (800e60c <_kill_r+0x20>)
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f7f5 f9d6 	bl	80039aa <_kill>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d102      	bne.n	800e608 <_kill_r+0x1c>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b103      	cbz	r3, 800e608 <_kill_r+0x1c>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	20000ce8 	.word	0x20000ce8

0800e610 <_getpid_r>:
 800e610:	f7f5 b9c4 	b.w	800399c <_getpid>

0800e614 <_malloc_usable_size_r>:
 800e614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e618:	1f18      	subs	r0, r3, #4
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bfbc      	itt	lt
 800e61e:	580b      	ldrlt	r3, [r1, r0]
 800e620:	18c0      	addlt	r0, r0, r3
 800e622:	4770      	bx	lr

0800e624 <_init>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	bf00      	nop
 800e628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62a:	bc08      	pop	{r3}
 800e62c:	469e      	mov	lr, r3
 800e62e:	4770      	bx	lr

0800e630 <_fini>:
 800e630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e632:	bf00      	nop
 800e634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e636:	bc08      	pop	{r3}
 800e638:	469e      	mov	lr, r3
 800e63a:	4770      	bx	lr
