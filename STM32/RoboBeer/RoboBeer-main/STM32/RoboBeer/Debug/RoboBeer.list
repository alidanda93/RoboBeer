
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  00020564  2**0
                  CONTENTS
  4 .ARM          00000000  0800666c  0800666c  00020564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800666c  0800666c  00020564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000564  20000000  08006674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000564  08006bd8  00020564  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  08006bd8  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fed  00000000  00000000  0002058d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d6  00000000  00000000  0003457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00037c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  000390f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d575  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d6b  00000000  00000000  00057985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f88  00000000  00000000  000716f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f30  00000000  00000000  0011b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000564 	.word	0x20000564
 800020c:	00000000 	.word	0x00000000
 8000210:	080062fc 	.word	0x080062fc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000568 	.word	0x20000568
 800022c:	080062fc 	.word	0x080062fc

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <Avancer>:
#include "MCC.h"



void Avancer(int vitesse)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2bc8      	cmp	r3, #200	; 0xc8
 8000250:	dc02      	bgt.n	8000258 <Avancer+0x14>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2b00      	cmp	r3, #0
 8000256:	da01      	bge.n	800025c <Avancer+0x18>
 8000258:	f000 fc02 	bl	8000a60 <Error_Handler>
	TIM1->CCR1=vitesse;
 800025c:	4a07      	ldr	r2, [pc, #28]	; (800027c <Avancer+0x38>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <Avancer+0x38>)
 8000264:	2200      	movs	r2, #0
 8000266:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <Avancer+0x38>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <Avancer+0x38>)
 8000270:	2200      	movs	r2, #0
 8000272:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40012c00 	.word	0x40012c00

08000280 <Reculer>:

void Reculer(int vitesse)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2bc8      	cmp	r3, #200	; 0xc8
 800028c:	dc02      	bgt.n	8000294 <Reculer+0x14>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	da01      	bge.n	8000298 <Reculer+0x18>
 8000294:	f000 fbe4 	bl	8000a60 <Error_Handler>
	TIM1->CCR1=0;
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <Reculer+0x38>)
 800029a:	2200      	movs	r2, #0
 800029c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 800029e:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <Reculer+0x38>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <Reculer+0x38>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 80002aa:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <Reculer+0x38>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40012c00 	.word	0x40012c00

080002bc <Stop>:

void Stop(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <Stop+0x24>)
 80002c2:	22c8      	movs	r2, #200	; 0xc8
 80002c4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <Stop+0x24>)
 80002c8:	22c8      	movs	r2, #200	; 0xc8
 80002ca:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <Stop+0x24>)
 80002ce:	22c8      	movs	r2, #200	; 0xc8
 80002d0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <Stop+0x24>)
 80002d4:	22c8      	movs	r2, #200	; 0xc8
 80002d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40012c00 	.word	0x40012c00

080002e4 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	2bc8      	cmp	r3, #200	; 0xc8
 80002f2:	dc02      	bgt.n	80002fa <Tourner+0x16>
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	da01      	bge.n	80002fe <Tourner+0x1a>
 80002fa:	f000 fbb1 	bl	8000a60 <Error_Handler>
	if(sens)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d00c      	beq.n	800031e <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <Tourner+0x68>)
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <Tourner+0x68>)
 800030c:	2200      	movs	r2, #0
 800030e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <Tourner+0x68>)
 8000312:	2200      	movs	r2, #0
 8000314:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8000316:	4a0d      	ldr	r2, [pc, #52]	; (800034c <Tourner+0x68>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 800031c:	e011      	b.n	8000342 <Tourner+0x5e>
	else if(!sens)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10c      	bne.n	800033e <Tourner+0x5a>
		    TIM1->CCR1=0;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <Tourner+0x68>)
 8000326:	2200      	movs	r2, #0
 8000328:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 800032a:	4a08      	ldr	r2, [pc, #32]	; (800034c <Tourner+0x68>)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 8000330:	4a06      	ldr	r2, [pc, #24]	; (800034c <Tourner+0x68>)
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <Tourner+0x68>)
 8000338:	2200      	movs	r2, #0
 800033a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800033c:	e001      	b.n	8000342 <Tourner+0x5e>
	else Error_Handler();
 800033e:	f000 fb8f 	bl	8000a60 <Error_Handler>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40012c00 	.word	0x40012c00

08000350 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f640 0298 	movw	r2, #2200	; 0x898
 800035e:	4293      	cmp	r3, r2
 8000360:	dc08      	bgt.n	8000374 <ControlServo+0x24>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000368:	db04      	blt.n	8000374 <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <ControlServo+0x30>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 8000370:	2300      	movs	r3, #0
 8000372:	e000      	b.n	8000376 <ControlServo+0x26>
	}
	else
	{
		return 1;
 8000374:	2301      	movs	r3, #1
	}
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40000400 	.word	0x40000400

08000384 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_ADC1_Init+0x74>)
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <MX_ADC1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_ADC1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003c2:	f001 faf9 	bl	80019b8 <HAL_ADC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003cc:	f000 fb48 	bl	8000a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003d0:	2304      	movs	r3, #4
 80003d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003e2:	f001 fbd3 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003ec:	f000 fb38 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000580 	.word	0x20000580
 80003fc:	40012400 	.word	0x40012400

08000400 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <HAL_ADC_MspInit+0x98>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d137      	bne.n	8000490 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <HAL_ADC_MspInit+0x9c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1d      	ldr	r2, [pc, #116]	; (800049c <HAL_ADC_MspInit+0x9c>)
 8000426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <HAL_ADC_MspInit+0x9c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <HAL_ADC_MspInit+0x9c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <HAL_ADC_MspInit+0x9c>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_ADC_MspInit+0x9c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	613b      	str	r3, [r7, #16]
 800044e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_ADC_MspInit+0x9c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a11      	ldr	r2, [pc, #68]	; (800049c <HAL_ADC_MspInit+0x9c>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_ADC_MspInit+0x9c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8000468:	23f0      	movs	r3, #240	; 0xf0
 800046a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046c:	2303      	movs	r3, #3
 800046e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0318 	add.w	r3, r7, #24
 8000474:	4619      	mov	r1, r3
 8000476:	480a      	ldr	r0, [pc, #40]	; (80004a0 <HAL_ADC_MspInit+0xa0>)
 8000478:	f001 ff12 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 800047c:	2303      	movs	r3, #3
 800047e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000480:	2303      	movs	r3, #3
 8000482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 0318 	add.w	r3, r7, #24
 8000488:	4619      	mov	r1, r3
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <HAL_ADC_MspInit+0xa4>)
 800048c:	f001 ff08 	bl	80022a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000490:	bf00      	nop
 8000492:	3728      	adds	r7, #40	; 0x28
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40012400 	.word	0x40012400
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a33      	ldr	r2, [pc, #204]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b31      	ldr	r3, [pc, #196]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a2d      	ldr	r2, [pc, #180]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a27      	ldr	r2, [pc, #156]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xe8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a21      	ldr	r2, [pc, #132]	; (8000590 <MX_GPIO_Init+0xe8>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0xe8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800051c:	2200      	movs	r2, #0
 800051e:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <MX_GPIO_Init+0xec>)
 8000524:	f002 f850 	bl	80025c8 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_GPIO_Init+0xf0>)
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4817      	ldr	r0, [pc, #92]	; (800059c <MX_GPIO_Init+0xf4>)
 800053e:	f001 feaf 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000542:	f24f 0320 	movw	r3, #61472	; 0xf020
 8000546:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	480e      	ldr	r0, [pc, #56]	; (8000594 <MX_GPIO_Init+0xec>)
 800055c:	f001 fea0 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8000560:	2310      	movs	r3, #16
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_GPIO_Init+0xf0>)
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <MX_GPIO_Init+0xec>)
 8000574:	f001 fe94 	bl	80022a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2105      	movs	r1, #5
 800057c:	2028      	movs	r0, #40	; 0x28
 800057e:	f001 fd16 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000582:	2028      	movs	r0, #40	; 0x28
 8000584:	f001 fd2f 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	40010c00 	.word	0x40010c00
 8000598:	10110000 	.word	0x10110000
 800059c:	40011000 	.word	0x40011000

080005a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <MX_I2C1_Init+0x54>)
 80005a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x58>)
 80005ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_I2C1_Init+0x50>)
 80005de:	f002 f83d 	bl	800265c <HAL_I2C_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e8:	f000 fa3a 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200005b0 	.word	0x200005b0
 80005f4:	40005400 	.word	0x40005400
 80005f8:	000186a0 	.word	0x000186a0

080005fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C2_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C2_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C2_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C2_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C2_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C2_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C2_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C2_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C2_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C2_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C2_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C2_Init+0x50>)
 800063a:	f002 f80f 	bl	800265c <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 fa0c 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000604 	.word	0x20000604
 8000650:	40005800 	.word	0x40005800
 8000654:	000186a0 	.word	0x000186a0

08000658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a32      	ldr	r2, [pc, #200]	; (800073c <HAL_I2C_MspInit+0xe4>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d133      	bne.n	80006e0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a30      	ldr	r2, [pc, #192]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 8000690:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4827      	ldr	r0, [pc, #156]	; (8000744 <HAL_I2C_MspInit+0xec>)
 80006a6:	f001 fdfb 	bl	80022a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <HAL_I2C_MspInit+0xf0>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <HAL_I2C_MspInit+0xf0>)
 80006c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 80006cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006de:	e029      	b.n	8000734 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <HAL_I2C_MspInit+0xf4>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d124      	bne.n	8000734 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 8000702:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000708:	2312      	movs	r3, #18
 800070a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_I2C_MspInit+0xec>)
 8000718:	f001 fdc2 	bl	80022a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 8000722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000726:	61d3      	str	r3, [r2, #28]
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_I2C_MspInit+0xe8>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	bf00      	nop
 8000736:	3730      	adds	r7, #48	; 0x30
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40005400 	.word	0x40005400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010c00 	.word	0x40010c00
 8000748:	40010000 	.word	0x40010000
 800074c:	40005800 	.word	0x40005800

08000750 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	switch (i)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	2b03      	cmp	r3, #3
 800075e:	d827      	bhi.n	80007b0 <TurnOffLed+0x60>
 8000760:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <TurnOffLed+0x18>)
 8000762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000766:	bf00      	nop
 8000768:	08000779 	.word	0x08000779
 800076c:	08000787 	.word	0x08000787
 8000770:	08000795 	.word	0x08000795
 8000774:	080007a3 	.word	0x080007a3
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <TurnOffLed+0x68>)
 8000780:	f001 ff22 	bl	80025c8 <HAL_GPIO_WritePin>
		    break;
 8000784:	e014      	b.n	80007b0 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <TurnOffLed+0x68>)
 800078e:	f001 ff1b 	bl	80025c8 <HAL_GPIO_WritePin>
			break;
 8000792:	e00d      	b.n	80007b0 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <TurnOffLed+0x68>)
 800079c:	f001 ff14 	bl	80025c8 <HAL_GPIO_WritePin>
			break;
 80007a0:	e006      	b.n	80007b0 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <TurnOffLed+0x68>)
 80007aa:	f001 ff0d 	bl	80025c8 <HAL_GPIO_WritePin>
			break;
 80007ae:	bf00      	nop
	}

}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40010c00 	.word	0x40010c00

080007bc <SwitchLed>:



void SwitchLed(int i)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	switch (i)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d823      	bhi.n	8000814 <SwitchLed+0x58>
 80007cc:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <SwitchLed+0x18>)
 80007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d2:	bf00      	nop
 80007d4:	080007e5 	.word	0x080007e5
 80007d8:	080007f1 	.word	0x080007f1
 80007dc:	080007fd 	.word	0x080007fd
 80007e0:	08000809 	.word	0x08000809
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80007e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <SwitchLed+0x60>)
 80007ea:	f001 ff05 	bl	80025f8 <HAL_GPIO_TogglePin>
			break;
 80007ee:	e011      	b.n	8000814 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80007f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <SwitchLed+0x60>)
 80007f6:	f001 feff 	bl	80025f8 <HAL_GPIO_TogglePin>
			break;
 80007fa:	e00b      	b.n	8000814 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80007fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <SwitchLed+0x60>)
 8000802:	f001 fef9 	bl	80025f8 <HAL_GPIO_TogglePin>
			break;
 8000806:	e005      	b.n	8000814 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <SwitchLed+0x60>)
 800080e:	f001 fef3 	bl	80025f8 <HAL_GPIO_TogglePin>
			break;
 8000812:	bf00      	nop
	}

}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40010c00 	.word	0x40010c00

08000820 <LedError>:



void LedError()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <LedError+0x38>)
 800082c:	f001 fecc 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	4808      	ldr	r0, [pc, #32]	; (8000858 <LedError+0x38>)
 8000838:	f001 fec6 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <LedError+0x38>)
 8000844:	f001 fec0 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	4802      	ldr	r0, [pc, #8]	; (8000858 <LedError+0x38>)
 8000850:	f001 feba 	bl	80025c8 <HAL_GPIO_WritePin>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010c00 	.word	0x40010c00

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f001 f824 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f85e 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff fe1e 	bl	80004a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800086c:	f7ff fe98 	bl	80005a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000870:	f7ff fec4 	bl	80005fc <MX_I2C2_Init>
  MX_TIM3_Init();
 8000874:	f000 fcfc 	bl	8001270 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000878:	f000 fefa 	bl	8001670 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800087c:	f000 ff22 	bl	80016c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000880:	f000 fbde 	bl	8001040 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000884:	f000 fca0 	bl	80011c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000888:	f000 fd6a 	bl	8001360 <MX_TIM5_Init>
  MX_ADC1_Init();
 800088c:	f7ff fd7a 	bl	8000384 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000890:	2201      	movs	r2, #1
 8000892:	491e      	ldr	r1, [pc, #120]	; (800090c <main+0xb0>)
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <main+0xb4>)
 8000896:	f003 fd9f 	bl	80043d8 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f001 f868 	bl	8001970 <HAL_Delay>
  shellInit();
 80008a0:	f000 f8e6 	bl	8000a70 <shellInit>

  TurnOffLed(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff ff53 	bl	8000750 <TurnOffLed>
  TurnOffLed(2);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff ff50 	bl	8000750 <TurnOffLed>
  TurnOffLed(3);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f7ff ff4d 	bl	8000750 <TurnOffLed>
  TurnOffLed(4);
 80008b6:	2004      	movs	r0, #4
 80008b8:	f7ff ff4a 	bl	8000750 <TurnOffLed>

  SwitchLed(4);
 80008bc:	2004      	movs	r0, #4
 80008be:	f7ff ff7d 	bl	80007bc <SwitchLed>

  HAL_TIM_Base_Start_IT(&htim3);
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <main+0xb8>)
 80008c4:	f002 fd30 	bl	8003328 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80008c8:	2100      	movs	r1, #0
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <main+0xb8>)
 80008cc:	f002 fde4 	bl	8003498 <HAL_TIM_PWM_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(uartRxReceived){
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <main+0xbc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00b      	beq.n	80008f0 <main+0x94>
		  if(shellGetChar())
 80008d8:	f000 f902 	bl	8000ae0 <shellGetChar>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <main+0x8e>
		  {
			  shellExec();
 80008e2:	f000 f971 	bl	8000bc8 <shellExec>
			  shellPrompt();
 80008e6:	f000 f8db 	bl	8000aa0 <shellPrompt>
		  }
		  uartRxReceived = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <main+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
		  	  Error_Handler();
		    }
		  HAL_Delay(500);
	  }*/

	  if(it_userButton)
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <main+0xc0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0eb      	beq.n	80008d0 <main+0x74>
	  {
		  SwitchLed(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff ff5f 	bl	80007bc <SwitchLed>
		  it_userButton = 0;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <main+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
		  printf("userButton\n\r");
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <main+0xc4>)
 8000906:	f004 fbff 	bl	8005108 <iprintf>
	  if(uartRxReceived){
 800090a:	e7e1      	b.n	80008d0 <main+0x74>
 800090c:	200007f0 	.word	0x200007f0
 8000910:	200007f4 	.word	0x200007f4
 8000914:	2000075c 	.word	0x2000075c
 8000918:	200007ec 	.word	0x200007ec
 800091c:	20000658 	.word	0x20000658
 8000920:	080063a0 	.word	0x080063a0

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	; 0x58
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092e:	2228      	movs	r2, #40	; 0x28
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f004 fbe0 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000976:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000980:	4618      	mov	r0, r3
 8000982:	f001 ffaf 	bl	80028e4 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800098c:	f000 f868 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fa1b 	bl	8002de8 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b8:	f000 f852 	bl	8000a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009bc:	2302      	movs	r3, #2
 80009be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fba7 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009d4:	f000 f844 	bl	8000a60 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3758      	adds	r7, #88	; 0x58
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009e8:	1d39      	adds	r1, r7, #4
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2201      	movs	r2, #1
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <__io_putchar+0x20>)
 80009f2:	f003 fc5f 	bl	80042b4 <HAL_UART_Transmit>
	return ch;
 80009f6:	687b      	ldr	r3, [r7, #4]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200007f4 	.word	0x200007f4

08000a04 <HAL_GPIO_EXTI_Callback>:
{
	if (htim->Instance == TIM3) it_tim3=1; // Tim 3 avce servo donc pas d'interrupt...inutile
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
	it_userButton = 1;
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000658 	.word	0x20000658

08000a24 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_UART_RxCpltCallback+0x2c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d107      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0x22>
	{
		uartRxReceived = 1;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_UART_RxCpltCallback+0x30>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4906      	ldr	r1, [pc, #24]	; (8000a58 <HAL_UART_RxCpltCallback+0x34>)
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <HAL_UART_RxCpltCallback+0x38>)
 8000a42:	f003 fcc9 	bl	80043d8 <HAL_UART_Receive_IT>
	}
	else if(huart->Instance == USART2)
	{
		//interruption Raspberry
	}
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40013800 	.word	0x40013800
 8000a54:	200007ec 	.word	0x200007ec
 8000a58:	200007f0 	.word	0x200007f0
 8000a5c:	200007f4 	.word	0x200007f4

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8000a68:	f7ff feda 	bl	8000820 <LedError>
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0xc>
	...

08000a70 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	226c      	movs	r2, #108	; 0x6c
 8000a7a:	4906      	ldr	r1, [pc, #24]	; (8000a94 <shellInit+0x24>)
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <shellInit+0x28>)
 8000a7e:	f003 fc19 	bl	80042b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	220a      	movs	r2, #10
 8000a88:	4904      	ldr	r1, [pc, #16]	; (8000a9c <shellInit+0x2c>)
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <shellInit+0x28>)
 8000a8c:	f003 fc12 	bl	80042b4 <HAL_UART_Transmit>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	200007f4 	.word	0x200007f4
 8000a9c:	20000000 	.word	0x20000000

08000aa0 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	4903      	ldr	r1, [pc, #12]	; (8000ab8 <shellPrompt+0x18>)
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <shellPrompt+0x1c>)
 8000aae:	f003 fc01 	bl	80042b4 <HAL_UART_Transmit>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	200007f4 	.word	0x200007f4

08000ac0 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	2214      	movs	r2, #20
 8000aca:	4903      	ldr	r1, [pc, #12]	; (8000ad8 <shellCmdNotFound+0x18>)
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <shellCmdNotFound+0x1c>)
 8000ace:	f003 fbf1 	bl	80042b4 <HAL_UART_Transmit>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200004e0 	.word	0x200004e0
 8000adc:	200007f4 	.word	0x200007f4

08000ae0 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <shellGetChar+0xc8>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d030      	beq.n	8000b54 <shellGetChar+0x74>
 8000af2:	2b0d      	cmp	r3, #13
 8000af4:	d140      	bne.n	8000b78 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	2203      	movs	r2, #3
 8000afc:	492b      	ldr	r1, [pc, #172]	; (8000bac <shellGetChar+0xcc>)
 8000afe:	482c      	ldr	r0, [pc, #176]	; (8000bb0 <shellGetChar+0xd0>)
 8000b00:	f003 fbd8 	bl	80042b4 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <shellGetChar+0xd4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <shellGetChar+0xd8>)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <shellGetChar+0xdc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8000b16:	492a      	ldr	r1, [pc, #168]	; (8000bc0 <shellGetChar+0xe0>)
 8000b18:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <shellGetChar+0xd8>)
 8000b1a:	f004 fb0d 	bl	8005138 <strtok>
 8000b1e:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000b20:	e00f      	b.n	8000b42 <shellGetChar+0x62>
			argv[argc++] = token;
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <shellGetChar+0xdc>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	b2d1      	uxtb	r1, r2
 8000b2a:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <shellGetChar+0xdc>)
 8000b2c:	7011      	strb	r1, [r2, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <shellGetChar+0xe4>)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8000b38:	4921      	ldr	r1, [pc, #132]	; (8000bc0 <shellGetChar+0xe0>)
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f004 fafc 	bl	8005138 <strtok>
 8000b40:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1ec      	bne.n	8000b22 <shellGetChar+0x42>
		}

		idxCmd = 0;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <shellGetChar+0xd4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71fb      	strb	r3, [r7, #7]
		break;
 8000b52:	e023      	b.n	8000b9c <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <shellGetChar+0xd4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	b2d1      	uxtb	r1, r2
 8000b5c:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <shellGetChar+0xd4>)
 8000b5e:	7011      	strb	r1, [r2, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <shellGetChar+0xd8>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <shellGetChar+0xc8>)
 8000b70:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <shellGetChar+0xd0>)
 8000b72:	f003 fb9f 	bl	80042b4 <HAL_UART_Transmit>
		break;
 8000b76:	e011      	b.n	8000b9c <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <shellGetChar+0xd4>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	b2d1      	uxtb	r1, r2
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <shellGetChar+0xd4>)
 8000b82:	7011      	strb	r1, [r2, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <shellGetChar+0xc8>)
 8000b88:	7819      	ldrb	r1, [r3, #0]
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <shellGetChar+0xd8>)
 8000b8c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	2201      	movs	r2, #1
 8000b94:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <shellGetChar+0xc8>)
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <shellGetChar+0xd0>)
 8000b98:	f003 fb8c 	bl	80042b4 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200007f0 	.word	0x200007f0
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	200007f4 	.word	0x200007f4
 8000bb4:	2000069c 	.word	0x2000069c
 8000bb8:	2000065c 	.word	0x2000065c
 8000bbc:	200006c4 	.word	0x200006c4
 8000bc0:	080063b0 	.word	0x080063b0
 8000bc4:	200006a0 	.word	0x200006a0

08000bc8 <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 8000bc8:	b598      	push	{r3, r4, r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 8000bcc:	4b6a      	ldr	r3, [pc, #424]	; (8000d78 <shellExec+0x1b0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	496a      	ldr	r1, [pc, #424]	; (8000d7c <shellExec+0x1b4>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fb2c 	bl	8000230 <strcmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d108      	bne.n	8000bf0 <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	f240 2231 	movw	r2, #561	; 0x231
 8000be6:	4966      	ldr	r1, [pc, #408]	; (8000d80 <shellExec+0x1b8>)
 8000be8:	4866      	ldr	r0, [pc, #408]	; (8000d84 <shellExec+0x1bc>)
 8000bea:	f003 fb63 	bl	80042b4 <HAL_UART_Transmit>
	}
	else{
		shellCmdNotFound();
	}

}
 8000bee:	e0c1      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"RTFM")==0)
 8000bf0:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <shellExec+0x1b0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4964      	ldr	r1, [pc, #400]	; (8000d88 <shellExec+0x1c0>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb1a 	bl	8000230 <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d108      	bne.n	8000c14 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8000c0a:	4960      	ldr	r1, [pc, #384]	; (8000d8c <shellExec+0x1c4>)
 8000c0c:	485d      	ldr	r0, [pc, #372]	; (8000d84 <shellExec+0x1bc>)
 8000c0e:	f003 fb51 	bl	80042b4 <HAL_UART_Transmit>
}
 8000c12:	e0af      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"led")==0)
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <shellExec+0x1b0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	495d      	ldr	r1, [pc, #372]	; (8000d90 <shellExec+0x1c8>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb08 	bl	8000230 <strcmp>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d110      	bne.n	8000c48 <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2222      	movs	r2, #34	; 0x22
 8000c2c:	4959      	ldr	r1, [pc, #356]	; (8000d94 <shellExec+0x1cc>)
 8000c2e:	4855      	ldr	r0, [pc, #340]	; (8000d84 <shellExec+0x1bc>)
 8000c30:	f003 fb40 	bl	80042b4 <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <shellExec+0x1b0>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fa2f 	bl	800509c <atoi>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdbb 	bl	80007bc <SwitchLed>
}
 8000c46:	e095      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"avancer")==0)
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <shellExec+0x1b0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4952      	ldr	r1, [pc, #328]	; (8000d98 <shellExec+0x1d0>)
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff faee 	bl	8000230 <strcmp>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d110      	bne.n	8000c7c <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	2225      	movs	r2, #37	; 0x25
 8000c60:	494e      	ldr	r1, [pc, #312]	; (8000d9c <shellExec+0x1d4>)
 8000c62:	4848      	ldr	r0, [pc, #288]	; (8000d84 <shellExec+0x1bc>)
 8000c64:	f003 fb26 	bl	80042b4 <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <shellExec+0x1b0>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 fa15 	bl	800509c <atoi>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fae5 	bl	8000244 <Avancer>
}
 8000c7a:	e07b      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"reculer")==0)
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <shellExec+0x1b0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4947      	ldr	r1, [pc, #284]	; (8000da0 <shellExec+0x1d8>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fad4 	bl	8000230 <strcmp>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d110      	bne.n	8000cb0 <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	2227      	movs	r2, #39	; 0x27
 8000c94:	4943      	ldr	r1, [pc, #268]	; (8000da4 <shellExec+0x1dc>)
 8000c96:	483b      	ldr	r0, [pc, #236]	; (8000d84 <shellExec+0x1bc>)
 8000c98:	f003 fb0c 	bl	80042b4 <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <shellExec+0x1b0>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 f9fb 	bl	800509c <atoi>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fae9 	bl	8000280 <Reculer>
}
 8000cae:	e061      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"stop")==0)
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <shellExec+0x1b0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	493c      	ldr	r1, [pc, #240]	; (8000da8 <shellExec+0x1e0>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff faba 	bl	8000230 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d109      	bne.n	8000cd6 <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	2216      	movs	r2, #22
 8000cc8:	4938      	ldr	r1, [pc, #224]	; (8000dac <shellExec+0x1e4>)
 8000cca:	482e      	ldr	r0, [pc, #184]	; (8000d84 <shellExec+0x1bc>)
 8000ccc:	f003 faf2 	bl	80042b4 <HAL_UART_Transmit>
		Stop();
 8000cd0:	f7ff faf4 	bl	80002bc <Stop>
}
 8000cd4:	e04e      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"tourner")==0)
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <shellExec+0x1b0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4935      	ldr	r1, [pc, #212]	; (8000db0 <shellExec+0x1e8>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff faa7 	bl	8000230 <strcmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d129      	bne.n	8000d3c <shellExec+0x174>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <shellExec+0x1b0>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4931      	ldr	r1, [pc, #196]	; (8000db4 <shellExec+0x1ec>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fa9e 	bl	8000230 <strcmp>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d108      	bne.n	8000d0c <shellExec+0x144>
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <shellExec+0x1b0>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	492e      	ldr	r1, [pc, #184]	; (8000db8 <shellExec+0x1f0>)
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa95 	bl	8000230 <strcmp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d033      	beq.n	8000d74 <shellExec+0x1ac>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	2230      	movs	r2, #48	; 0x30
 8000d12:	492a      	ldr	r1, [pc, #168]	; (8000dbc <shellExec+0x1f4>)
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <shellExec+0x1bc>)
 8000d16:	f003 facd 	bl	80042b4 <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <shellExec+0x1b0>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f004 f9bc 	bl	800509c <atoi>
 8000d24:	4604      	mov	r4, r0
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <shellExec+0x1b0>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 f9b6 	bl	800509c <atoi>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4619      	mov	r1, r3
 8000d34:	4620      	mov	r0, r4
 8000d36:	f7ff fad5 	bl	80002e4 <Tourner>
}
 8000d3a:	e01b      	b.n	8000d74 <shellExec+0x1ac>
	else if(strcmp(argv[0],"servo")==0)
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <shellExec+0x1b0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	491f      	ldr	r1, [pc, #124]	; (8000dc0 <shellExec+0x1f8>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa74 	bl	8000230 <strcmp>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d110      	bne.n	8000d70 <shellExec+0x1a8>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2217      	movs	r2, #23
 8000d54:	491b      	ldr	r1, [pc, #108]	; (8000dc4 <shellExec+0x1fc>)
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <shellExec+0x1bc>)
 8000d58:	f003 faac 	bl	80042b4 <HAL_UART_Transmit>
		ControlServo(atoi(argv[1]));
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <shellExec+0x1b0>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f99b 	bl	800509c <atoi>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff faf1 	bl	8000350 <ControlServo>
}
 8000d6e:	e001      	b.n	8000d74 <shellExec+0x1ac>
		shellCmdNotFound();
 8000d70:	f7ff fea6 	bl	8000ac0 <shellCmdNotFound>
}
 8000d74:	bf00      	nop
 8000d76:	bd98      	pop	{r3, r4, r7, pc}
 8000d78:	200006a0 	.word	0x200006a0
 8000d7c:	080063b4 	.word	0x080063b4
 8000d80:	2000007c 	.word	0x2000007c
 8000d84:	200007f4 	.word	0x200007f4
 8000d88:	080063bc 	.word	0x080063bc
 8000d8c:	200002b0 	.word	0x200002b0
 8000d90:	080063c4 	.word	0x080063c4
 8000d94:	2000040c 	.word	0x2000040c
 8000d98:	080063c8 	.word	0x080063c8
 8000d9c:	20000430 	.word	0x20000430
 8000da0:	080063d0 	.word	0x080063d0
 8000da4:	20000458 	.word	0x20000458
 8000da8:	080063d8 	.word	0x080063d8
 8000dac:	20000480 	.word	0x20000480
 8000db0:	080063e0 	.word	0x080063e0
 8000db4:	080063e8 	.word	0x080063e8
 8000db8:	080063ec 	.word	0x080063ec
 8000dbc:	20000498 	.word	0x20000498
 8000dc0:	080063f0 	.word	0x080063f0
 8000dc4:	200004c8 	.word	0x200004c8

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_MspInit+0x68>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_MspInit+0x68>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_MspInit+0x68>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_MspInit+0x68>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_MspInit+0x68>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x68>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f001 f8d2 	bl	8001fae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_MspInit+0x6c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_MspInit+0x6c>)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e66:	f000 fd67 	bl	8001938 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e6a:	f004 f895 	bl	8004f98 <xTaskGetSchedulerState>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d001      	beq.n	8000e78 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e74:	f004 f8f0 	bl	8005058 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <USART1_IRQHandler+0x10>)
 8000e82:	f003 fad9 	bl	8004438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200007f4 	.word	0x200007f4

08000e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USART2_IRQHandler+0x10>)
 8000e96:	f003 facf 	bl	8004438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000838 	.word	0x20000838

08000ea4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8000ea8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eac:	f001 fbbe 	bl	800262c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <_kill>:

int _kill(int pid, int sig)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ecc:	f004 f8ea 	bl	80050a4 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2216      	movs	r2, #22
 8000ed4:	601a      	str	r2, [r3, #0]
	return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_exit>:

void _exit (int status)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffe7 	bl	8000ec2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ef4:	e7fe      	b.n	8000ef4 <_exit+0x12>

08000ef6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e00a      	b.n	8000f1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f08:	f3af 8000 	nop.w
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	60ba      	str	r2, [r7, #8]
 8000f14:	b2ca      	uxtb	r2, r1
 8000f16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbf0      	blt.n	8000f08 <_read+0x12>
	}

return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e009      	b.n	8000f56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	60ba      	str	r2, [r7, #8]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fd48 	bl	80009e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf1      	blt.n	8000f42 <_write+0x12>
	}
	return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_close>:

int _close(int file)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <_isatty>:

int _isatty(int file)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f004 f854 	bl	80050a4 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000c000 	.word	0x2000c000
 8001028:	00000400 	.word	0x00000400
 800102c:	200006c8 	.word	0x200006c8
 8001030:	20000948 	.word	0x20000948

08001034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b096      	sub	sp, #88	; 0x58
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2220      	movs	r2, #32
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f004 f83d 	bl	80050f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800107e:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <MX_TIM1_Init+0x184>)
 8001082:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001086:	2211      	movs	r2, #17
 8001088:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <MX_TIM1_Init+0x180>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001092:	22c7      	movs	r2, #199	; 0xc7
 8001094:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <MX_TIM1_Init+0x180>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <MX_TIM1_Init+0x180>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a8:	4845      	ldr	r0, [pc, #276]	; (80011c0 <MX_TIM1_Init+0x180>)
 80010aa:	f002 f8ed 	bl	8003288 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010b4:	f7ff fcd4 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010c2:	4619      	mov	r1, r3
 80010c4:	483e      	ldr	r0, [pc, #248]	; (80011c0 <MX_TIM1_Init+0x180>)
 80010c6:	f002 fc47 	bl	8003958 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010d0:	f7ff fcc6 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010d4:	483a      	ldr	r0, [pc, #232]	; (80011c0 <MX_TIM1_Init+0x180>)
 80010d6:	f002 f987 	bl	80033e8 <HAL_TIM_PWM_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010e0:	f7ff fcbe 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f0:	4619      	mov	r1, r3
 80010f2:	4833      	ldr	r0, [pc, #204]	; (80011c0 <MX_TIM1_Init+0x180>)
 80010f4:	f002 ffd4 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010fe:	f7ff fcaf 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001102:	2360      	movs	r3, #96	; 0x60
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	4826      	ldr	r0, [pc, #152]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001128:	f002 fb58 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001132:	f7ff fc95 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	2204      	movs	r2, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001140:	f002 fb4c 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800114a:	f7ff fc89 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	2208      	movs	r2, #8
 8001154:	4619      	mov	r1, r3
 8001156:	481a      	ldr	r0, [pc, #104]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001158:	f002 fb40 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001162:	f7ff fc7d 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	220c      	movs	r2, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_TIM1_Init+0x180>)
 8001170:	f002 fb34 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800117a:	f7ff fc71 	bl	8000a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM1_Init+0x180>)
 80011a2:	f002 ffe9 	bl	8004178 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80011ac:	f7ff fc58 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM1_Init+0x180>)
 80011b2:	f000 f9f3 	bl	800159c <HAL_TIM_MspPostInit>

}
 80011b6:	bf00      	nop
 80011b8:	3758      	adds	r7, #88	; 0x58
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200006cc 	.word	0x200006cc
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 ff8e 	bl	80050f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_TIM2_Init+0xa4>)
 80011e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM2_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM2_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM2_Init+0xa4>)
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM2_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM2_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM2_Init+0xa4>)
 8001238:	f002 fa2e 	bl	8003698 <HAL_TIM_Encoder_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001242:	f7ff fc0d 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM2_Init+0xa4>)
 8001254:	f002 ff24 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800125e:	f7ff fbff 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000714 	.word	0x20000714

08001270 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012a2:	4a2e      	ldr	r2, [pc, #184]	; (800135c <MX_TIM3_Init+0xec>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012a8:	2247      	movs	r2, #71	; 0x47
 80012aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012b4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c6:	4824      	ldr	r0, [pc, #144]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012c8:	f001 ffde 	bl	8003288 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012d2:	f7ff fbc5 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e0:	4619      	mov	r1, r3
 80012e2:	481d      	ldr	r0, [pc, #116]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012e4:	f002 fb38 	bl	8003958 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012ee:	f7ff fbb7 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f2:	4819      	ldr	r0, [pc, #100]	; (8001358 <MX_TIM3_Init+0xe8>)
 80012f4:	f002 f878 	bl	80033e8 <HAL_TIM_PWM_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012fe:	f7ff fbaf 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	4619      	mov	r1, r3
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_TIM3_Init+0xe8>)
 8001312:	f002 fec5 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800131c:	f7ff fba0 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM3_Init+0xe8>)
 800133a:	f002 fa4f 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001344:	f7ff fb8c 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM3_Init+0xe8>)
 800134a:	f000 f927 	bl	800159c <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000075c 	.word	0x2000075c
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fec2 	bl	80050f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_TIM5_Init+0xa0>)
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <MX_TIM5_Init+0xa4>)
 8001380:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_TIM5_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_TIM5_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_TIM5_Init+0xa0>)
 8001390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001394:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_TIM5_Init+0xa0>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM5_Init+0xa0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM5_Init+0xa0>)
 80013ce:	f002 f963 	bl	8003698 <HAL_TIM_Encoder_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f7ff fb42 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM5_Init+0xa0>)
 80013ea:	f002 fe59 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80013f4:	f7ff fb34 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200007a4 	.word	0x200007a4
 8001404:	40000c00 	.word	0x40000c00

08001408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_TIM_Base_MspInit+0x58>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10c      	bne.n	8001434 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_TIM_Base_MspInit+0x5c>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_TIM_Base_MspInit+0x5c>)
 8001420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_TIM_Base_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001432:	e010      	b.n	8001456 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_TIM_Base_MspInit+0x60>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10b      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_TIM_Base_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_TIM_Base_MspInit+0x5c>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_TIM_Base_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40012c00 	.word	0x40012c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40000400 	.word	0x40000400

0800146c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148a:	d14f      	bne.n	800152c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148c:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	61d3      	str	r3, [r2, #28]
 8001498:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a37      	ldr	r2, [pc, #220]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a31      	ldr	r2, [pc, #196]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 80014d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4828      	ldr	r0, [pc, #160]	; (800158c <HAL_TIM_Encoder_MspInit+0x120>)
 80014ea:	f000 fed9 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 80014ee:	2308      	movs	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4823      	ldr	r0, [pc, #140]	; (8001590 <HAL_TIM_Encoder_MspInit+0x124>)
 8001502:	f000 fecd 	bl	80022a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_TIM_Encoder_MspInit+0x128>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_TIM_Encoder_MspInit+0x128>)
 8001526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800152a:	e028      	b.n	800157e <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a19      	ldr	r2, [pc, #100]	; (8001598 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d123      	bne.n	800157e <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_TIM_Encoder_MspInit+0x11c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8001566:	2303      	movs	r3, #3
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <HAL_TIM_Encoder_MspInit+0x120>)
 800157a:	f000 fe91 	bl	80022a0 <HAL_GPIO_Init>
}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40010800 	.word	0x40010800
 8001590:	40010c00 	.word	0x40010c00
 8001594:	40010000 	.word	0x40010000
 8001598:	40000c00 	.word	0x40000c00

0800159c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a28      	ldr	r2, [pc, #160]	; (8001658 <HAL_TIM_MspPostInit+0xbc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d119      	bne.n	80015f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_TIM_MspPostInit+0xc0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_TIM_MspPostInit+0xc0>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_TIM_MspPostInit+0xc0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 80015d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2302      	movs	r3, #2
 80015e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	481d      	ldr	r0, [pc, #116]	; (8001660 <HAL_TIM_MspPostInit+0xc4>)
 80015ea:	f000 fe59 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ee:	e02e      	b.n	800164e <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d129      	bne.n	800164e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_TIM_MspPostInit+0xc0>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_TIM_MspPostInit+0xc0>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_TIM_MspPostInit+0xc0>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 8001626:	f000 fe3b 	bl	80022a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_TIM_MspPostInit+0xd0>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_TIM_MspPostInit+0xd0>)
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	6053      	str	r3, [r2, #4]
}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800
 8001664:	40000400 	.word	0x40000400
 8001668:	40011000 	.word	0x40011000
 800166c:	40010000 	.word	0x40010000

08001670 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a8:	f002 fdb7 	bl	800421a <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f7ff f9d5 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200007f4 	.word	0x200007f4
 80016c0:	40013800 	.word	0x40013800

080016c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART2_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016fc:	f002 fd8d 	bl	800421a <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f7ff f9ab 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000838 	.word	0x20000838
 8001714:	40004400 	.word	0x40004400

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a45      	ldr	r2, [pc, #276]	; (8001848 <HAL_UART_MspInit+0x130>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d146      	bne.n	80017c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_UART_MspInit+0x134>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_UART_MspInit+0x134>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_UART_MspInit+0x134>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <HAL_UART_MspInit+0x134>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a3d      	ldr	r2, [pc, #244]	; (800184c <HAL_UART_MspInit+0x134>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_UART_MspInit+0x134>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 8001768:	2340      	movs	r3, #64	; 0x40
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4835      	ldr	r0, [pc, #212]	; (8001850 <HAL_UART_MspInit+0x138>)
 800177c:	f000 fd90 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	482f      	ldr	r0, [pc, #188]	; (8001850 <HAL_UART_MspInit+0x138>)
 8001794:	f000 fd84 	bl	80022a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_UART_MspInit+0x13c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <HAL_UART_MspInit+0x13c>)
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2105      	movs	r1, #5
 80017b8:	2025      	movs	r0, #37	; 0x25
 80017ba:	f000 fbf8 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017be:	2025      	movs	r0, #37	; 0x25
 80017c0:	f000 fc11 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017c4:	e03c      	b.n	8001840 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_UART_MspInit+0x140>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d137      	bne.n	8001840 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_UART_MspInit+0x134>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_UART_MspInit+0x134>)
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_UART_MspInit+0x134>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_UART_MspInit+0x134>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_UART_MspInit+0x134>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x134>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8001800:	2304      	movs	r3, #4
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <HAL_UART_MspInit+0x144>)
 8001814:	f000 fd44 	bl	80022a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 8001818:	2308      	movs	r3, #8
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <HAL_UART_MspInit+0x144>)
 800182c:	f000 fd38 	bl	80022a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2105      	movs	r1, #5
 8001834:	2026      	movs	r0, #38	; 0x26
 8001836:	f000 fbba 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800183a:	2026      	movs	r0, #38	; 0x26
 800183c:	f000 fbd3 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3730      	adds	r7, #48	; 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013800 	.word	0x40013800
 800184c:	40021000 	.word	0x40021000
 8001850:	40010c00 	.word	0x40010c00
 8001854:	40010000 	.word	0x40010000
 8001858:	40004400 	.word	0x40004400
 800185c:	40010800 	.word	0x40010800

08001860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001886:	f7ff fbd5 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f003 fc11 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7fe ffe5 	bl	800085c <main>
  bx lr
 8001892:	4770      	bx	lr
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000564 	.word	0x20000564
  ldr r2, =_sidata
 800189c:	08006674 	.word	0x08006674
  ldr r2, =_sbss
 80018a0:	20000564 	.word	0x20000564
  ldr r4, =_ebss
 80018a4:	20000948 	.word	0x20000948

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x28>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x28>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 fb6b 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fa7e 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fb83 	bl	8002002 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 fb4b 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200004f4 	.word	0x200004f4
 8001930:	200004fc 	.word	0x200004fc
 8001934:	200004f8 	.word	0x200004f8

08001938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x1c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x20>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_IncTick+0x20>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	200004fc 	.word	0x200004fc
 8001958:	2000087c 	.word	0x2000087c

0800195c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_GetTick+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	2000087c 	.word	0x2000087c

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fff0 	bl	800195c <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffe0 	bl	800195c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200004fc 	.word	0x200004fc

080019b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ce      	b.n	8001b78 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fd02 	bl	8000400 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f9bd 	bl	8001d7c <ADC_ConversionStop_Disable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 80a9 	bne.w	8001b66 <HAL_ADC_Init+0x1ae>
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 80a5 	bne.w	8001b66 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a24:	f023 0302 	bic.w	r3, r3, #2
 8001a28:	f043 0202 	orr.w	r2, r3, #2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4951      	ldr	r1, [pc, #324]	; (8001b80 <HAL_ADC_Init+0x1c8>)
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	d10a      	bne.n	8001a54 <HAL_ADC_Init+0x9c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001a46:	d002      	beq.n	8001a4e <HAL_ADC_Init+0x96>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_Init+0xa0>
 8001a4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a52:	e001      	b.n	8001a58 <HAL_ADC_Init+0xa0>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7b1b      	ldrb	r3, [r3, #12]
 8001a5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a70:	d003      	beq.n	8001a7a <HAL_ADC_Init+0xc2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_ADC_Init+0xc8>
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	e000      	b.n	8001a82 <HAL_ADC_Init+0xca>
 8001a80:	2300      	movs	r3, #0
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7d1b      	ldrb	r3, [r3, #20]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d119      	bne.n	8001ac4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7b1b      	ldrb	r3, [r3, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	035a      	lsls	r2, r3, #13
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_ADC_Init+0x1cc>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af4:	d003      	beq.n	8001afe <HAL_ADC_Init+0x146>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d104      	bne.n	8001b08 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_ADC_Init+0x1d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10b      	bne.n	8001b44 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b42:	e018      	b.n	8001b76 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f023 0312 	bic.w	r3, r3, #18
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b64:	e007      	b.n	8001b76 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f043 0210 	orr.w	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40013c00 	.word	0x40013c00
 8001b84:	ffe1f7fd 	.word	0xffe1f7fd
 8001b88:	ff1f0efe 	.word	0xff1f0efe

08001b8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x20>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e0dc      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x1da>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d81c      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b05      	subs	r3, #5
 8001bce:	221f      	movs	r2, #31
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3b05      	subs	r3, #5
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf4:	e03c      	b.n	8001c70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d81c      	bhi.n	8001c38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b23      	subs	r3, #35	; 0x23
 8001c10:	221f      	movs	r2, #31
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4019      	ands	r1, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b23      	subs	r3, #35	; 0x23
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
 8001c36:	e01b      	b.n	8001c70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b41      	subs	r3, #65	; 0x41
 8001c4a:	221f      	movs	r2, #31
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b41      	subs	r3, #65	; 0x41
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	d91c      	bls.n	8001cb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68d9      	ldr	r1, [r3, #12]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	3b1e      	subs	r3, #30
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6898      	ldr	r0, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b1e      	subs	r3, #30
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	e019      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d003      	beq.n	8001cf6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cf2:	2b11      	cmp	r3, #17
 8001cf4:	d132      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d125      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d126      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d11a      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9a      	lsrs	r2, r3, #18
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x1b2>
 8001d4a:	e007      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40012400 	.word	0x40012400
 8001d74:	200004f4 	.word	0x200004f4
 8001d78:	431bde83 	.word	0x431bde83

08001d7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d12e      	bne.n	8001df4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001da6:	f7ff fdd9 	bl	800195c <HAL_GetTick>
 8001daa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dac:	e01b      	b.n	8001de6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dae:	f7ff fdd5 	bl	800195c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d914      	bls.n	8001de6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10d      	bne.n	8001de6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e007      	b.n	8001df6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d0dc      	beq.n	8001dae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <__NVIC_EnableIRQ+0x34>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff90 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff2d 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff42 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff90 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5f 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff35 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800202c:	2b02      	cmp	r3, #2
 800202e:	d008      	beq.n	8002042 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2204      	movs	r2, #4
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e020      	b.n	8002084 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020e 	bic.w	r2, r2, #14
 8002050:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d005      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e0d6      	b.n	8002260 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 020e 	bic.w	r2, r2, #14
 80020c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_DMA_Abort_IT+0x1dc>)
 80020da:	429a      	cmp	r2, r3
 80020dc:	d958      	bls.n	8002190 <HAL_DMA_Abort_IT+0x100>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_DMA_Abort_IT+0x1e0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04f      	beq.n	8002188 <HAL_DMA_Abort_IT+0xf8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a61      	ldr	r2, [pc, #388]	; (8002274 <HAL_DMA_Abort_IT+0x1e4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d048      	beq.n	8002184 <HAL_DMA_Abort_IT+0xf4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a60      	ldr	r2, [pc, #384]	; (8002278 <HAL_DMA_Abort_IT+0x1e8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d040      	beq.n	800217e <HAL_DMA_Abort_IT+0xee>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5e      	ldr	r2, [pc, #376]	; (800227c <HAL_DMA_Abort_IT+0x1ec>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d038      	beq.n	8002178 <HAL_DMA_Abort_IT+0xe8>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_DMA_Abort_IT+0x1f0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d030      	beq.n	8002172 <HAL_DMA_Abort_IT+0xe2>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5b      	ldr	r2, [pc, #364]	; (8002284 <HAL_DMA_Abort_IT+0x1f4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d028      	beq.n	800216c <HAL_DMA_Abort_IT+0xdc>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_DMA_Abort_IT+0x1dc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d020      	beq.n	8002166 <HAL_DMA_Abort_IT+0xd6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_DMA_Abort_IT+0x1f8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_DMA_Abort_IT+0xd2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a56      	ldr	r2, [pc, #344]	; (800228c <HAL_DMA_Abort_IT+0x1fc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d012      	beq.n	800215e <HAL_DMA_Abort_IT+0xce>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a54      	ldr	r2, [pc, #336]	; (8002290 <HAL_DMA_Abort_IT+0x200>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00a      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a53      	ldr	r2, [pc, #332]	; (8002294 <HAL_DMA_Abort_IT+0x204>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d102      	bne.n	8002152 <HAL_DMA_Abort_IT+0xc2>
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	e01b      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002156:	e018      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215c:	e015      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 800215e:	2310      	movs	r3, #16
 8002160:	e013      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002162:	2301      	movs	r3, #1
 8002164:	e011      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800216a:	e00e      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 800216c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002170:	e00b      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002176:	e008      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217c:	e005      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 800217e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002182:	e002      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002184:	2310      	movs	r3, #16
 8002186:	e000      	b.n	800218a <HAL_DMA_Abort_IT+0xfa>
 8002188:	2301      	movs	r3, #1
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_DMA_Abort_IT+0x208>)
 800218c:	6053      	str	r3, [r2, #4]
 800218e:	e057      	b.n	8002240 <HAL_DMA_Abort_IT+0x1b0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a36      	ldr	r2, [pc, #216]	; (8002270 <HAL_DMA_Abort_IT+0x1e0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d04f      	beq.n	800223a <HAL_DMA_Abort_IT+0x1aa>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a35      	ldr	r2, [pc, #212]	; (8002274 <HAL_DMA_Abort_IT+0x1e4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d048      	beq.n	8002236 <HAL_DMA_Abort_IT+0x1a6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a33      	ldr	r2, [pc, #204]	; (8002278 <HAL_DMA_Abort_IT+0x1e8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d040      	beq.n	8002230 <HAL_DMA_Abort_IT+0x1a0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_DMA_Abort_IT+0x1ec>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d038      	beq.n	800222a <HAL_DMA_Abort_IT+0x19a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a30      	ldr	r2, [pc, #192]	; (8002280 <HAL_DMA_Abort_IT+0x1f0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d030      	beq.n	8002224 <HAL_DMA_Abort_IT+0x194>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_DMA_Abort_IT+0x1f4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d028      	beq.n	800221e <HAL_DMA_Abort_IT+0x18e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <HAL_DMA_Abort_IT+0x1dc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d020      	beq.n	8002218 <HAL_DMA_Abort_IT+0x188>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_DMA_Abort_IT+0x1f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d019      	beq.n	8002214 <HAL_DMA_Abort_IT+0x184>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_DMA_Abort_IT+0x1fc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d012      	beq.n	8002210 <HAL_DMA_Abort_IT+0x180>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a28      	ldr	r2, [pc, #160]	; (8002290 <HAL_DMA_Abort_IT+0x200>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00a      	beq.n	800220a <HAL_DMA_Abort_IT+0x17a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <HAL_DMA_Abort_IT+0x204>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d102      	bne.n	8002204 <HAL_DMA_Abort_IT+0x174>
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	e01b      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002208:	e018      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 800220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220e:	e015      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002210:	2310      	movs	r3, #16
 8002212:	e013      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002214:	2301      	movs	r3, #1
 8002216:	e011      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	e00e      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 800221e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002222:	e00b      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002228:	e008      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 800222a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222e:	e005      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002234:	e002      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 8002236:	2310      	movs	r3, #16
 8002238:	e000      	b.n	800223c <HAL_DMA_Abort_IT+0x1ac>
 800223a:	2301      	movs	r3, #1
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_DMA_Abort_IT+0x20c>)
 800223e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
    } 
  }
  return status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40020080 	.word	0x40020080
 8002270:	40020008 	.word	0x40020008
 8002274:	4002001c 	.word	0x4002001c
 8002278:	40020030 	.word	0x40020030
 800227c:	40020044 	.word	0x40020044
 8002280:	40020058 	.word	0x40020058
 8002284:	4002006c 	.word	0x4002006c
 8002288:	40020408 	.word	0x40020408
 800228c:	4002041c 	.word	0x4002041c
 8002290:	40020430 	.word	0x40020430
 8002294:	40020444 	.word	0x40020444
 8002298:	40020400 	.word	0x40020400
 800229c:	40020000 	.word	0x40020000

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b08b      	sub	sp, #44	; 0x2c
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e179      	b.n	80025a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b4:	2201      	movs	r2, #1
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8168 	bne.w	80025a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a96      	ldr	r2, [pc, #600]	; (8002530 <HAL_GPIO_Init+0x290>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d05e      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022dc:	4a94      	ldr	r2, [pc, #592]	; (8002530 <HAL_GPIO_Init+0x290>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d875      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022e2:	4a94      	ldr	r2, [pc, #592]	; (8002534 <HAL_GPIO_Init+0x294>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d058      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022e8:	4a92      	ldr	r2, [pc, #584]	; (8002534 <HAL_GPIO_Init+0x294>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d86f      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022ee:	4a92      	ldr	r2, [pc, #584]	; (8002538 <HAL_GPIO_Init+0x298>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d052      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022f4:	4a90      	ldr	r2, [pc, #576]	; (8002538 <HAL_GPIO_Init+0x298>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d869      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022fa:	4a90      	ldr	r2, [pc, #576]	; (800253c <HAL_GPIO_Init+0x29c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d04c      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 8002300:	4a8e      	ldr	r2, [pc, #568]	; (800253c <HAL_GPIO_Init+0x29c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d863      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 8002306:	4a8e      	ldr	r2, [pc, #568]	; (8002540 <HAL_GPIO_Init+0x2a0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d046      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 800230c:	4a8c      	ldr	r2, [pc, #560]	; (8002540 <HAL_GPIO_Init+0x2a0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d85d      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 8002312:	2b12      	cmp	r3, #18
 8002314:	d82a      	bhi.n	800236c <HAL_GPIO_Init+0xcc>
 8002316:	2b12      	cmp	r3, #18
 8002318:	d859      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <HAL_GPIO_Init+0x80>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	0800239b 	.word	0x0800239b
 8002324:	08002375 	.word	0x08002375
 8002328:	08002387 	.word	0x08002387
 800232c:	080023c9 	.word	0x080023c9
 8002330:	080023cf 	.word	0x080023cf
 8002334:	080023cf 	.word	0x080023cf
 8002338:	080023cf 	.word	0x080023cf
 800233c:	080023cf 	.word	0x080023cf
 8002340:	080023cf 	.word	0x080023cf
 8002344:	080023cf 	.word	0x080023cf
 8002348:	080023cf 	.word	0x080023cf
 800234c:	080023cf 	.word	0x080023cf
 8002350:	080023cf 	.word	0x080023cf
 8002354:	080023cf 	.word	0x080023cf
 8002358:	080023cf 	.word	0x080023cf
 800235c:	080023cf 	.word	0x080023cf
 8002360:	080023cf 	.word	0x080023cf
 8002364:	0800237d 	.word	0x0800237d
 8002368:	08002391 	.word	0x08002391
 800236c:	4a75      	ldr	r2, [pc, #468]	; (8002544 <HAL_GPIO_Init+0x2a4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002372:	e02c      	b.n	80023ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e029      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	3304      	adds	r3, #4
 8002382:	623b      	str	r3, [r7, #32]
          break;
 8002384:	e024      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	3308      	adds	r3, #8
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e01f      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	330c      	adds	r3, #12
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e01a      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a2:	2304      	movs	r3, #4
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e013      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b0:	2308      	movs	r3, #8
 80023b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	611a      	str	r2, [r3, #16]
          break;
 80023ba:	e009      	b.n	80023d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	615a      	str	r2, [r3, #20]
          break;
 80023c6:	e003      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          break;
 80023ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2bff      	cmp	r3, #255	; 0xff
 80023d4:	d801      	bhi.n	80023da <HAL_GPIO_Init+0x13a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	e001      	b.n	80023de <HAL_GPIO_Init+0x13e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d802      	bhi.n	80023ec <HAL_GPIO_Init+0x14c>
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x152>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	3b08      	subs	r3, #8
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	210f      	movs	r1, #15
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	431a      	orrs	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80c1 	beq.w	80025a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002420:	4b49      	ldr	r3, [pc, #292]	; (8002548 <HAL_GPIO_Init+0x2a8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_GPIO_Init+0x2a8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b46      	ldr	r3, [pc, #280]	; (8002548 <HAL_GPIO_Init+0x2a8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002438:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_GPIO_Init+0x2ac>)
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3c      	ldr	r2, [pc, #240]	; (8002550 <HAL_GPIO_Init+0x2b0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01f      	beq.n	80024a4 <HAL_GPIO_Init+0x204>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_GPIO_Init+0x2b4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d019      	beq.n	80024a0 <HAL_GPIO_Init+0x200>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3a      	ldr	r2, [pc, #232]	; (8002558 <HAL_GPIO_Init+0x2b8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1fc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a39      	ldr	r2, [pc, #228]	; (800255c <HAL_GPIO_Init+0x2bc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1f8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_GPIO_Init+0x2c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1f4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a37      	ldr	r2, [pc, #220]	; (8002564 <HAL_GPIO_Init+0x2c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1f0>
 800248c:	2305      	movs	r3, #5
 800248e:	e00a      	b.n	80024a6 <HAL_GPIO_Init+0x206>
 8002490:	2306      	movs	r3, #6
 8002492:	e008      	b.n	80024a6 <HAL_GPIO_Init+0x206>
 8002494:	2304      	movs	r3, #4
 8002496:	e006      	b.n	80024a6 <HAL_GPIO_Init+0x206>
 8002498:	2303      	movs	r3, #3
 800249a:	e004      	b.n	80024a6 <HAL_GPIO_Init+0x206>
 800249c:	2302      	movs	r3, #2
 800249e:	e002      	b.n	80024a6 <HAL_GPIO_Init+0x206>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_GPIO_Init+0x206>
 80024a4:	2300      	movs	r3, #0
 80024a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a8:	f002 0203 	and.w	r2, r2, #3
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	4093      	lsls	r3, r2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_GPIO_Init+0x2ac>)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4924      	ldr	r1, [pc, #144]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4920      	ldr	r1, [pc, #128]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	491a      	ldr	r1, [pc, #104]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 8002510:	4013      	ands	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d025      	beq.n	800256c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4910      	ldr	r1, [pc, #64]	; (8002568 <HAL_GPIO_Init+0x2c8>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
 800252c:	e025      	b.n	800257a <HAL_GPIO_Init+0x2da>
 800252e:	bf00      	nop
 8002530:	10320000 	.word	0x10320000
 8002534:	10310000 	.word	0x10310000
 8002538:	10220000 	.word	0x10220000
 800253c:	10210000 	.word	0x10210000
 8002540:	10120000 	.word	0x10120000
 8002544:	10110000 	.word	0x10110000
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	40010800 	.word	0x40010800
 8002554:	40010c00 	.word	0x40010c00
 8002558:	40011000 	.word	0x40011000
 800255c:	40011400 	.word	0x40011400
 8002560:	40011800 	.word	0x40011800
 8002564:	40011c00 	.word	0x40011c00
 8002568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_GPIO_Init+0x324>)
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	43db      	mvns	r3, r3
 8002574:	4913      	ldr	r1, [pc, #76]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002576:	4013      	ands	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_GPIO_Init+0x324>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]
 8002592:	e006      	b.n	80025a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	43db      	mvns	r3, r3
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <HAL_GPIO_Init+0x324>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae7e 	bne.w	80022b4 <HAL_GPIO_Init+0x14>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	372c      	adds	r7, #44	; 0x2c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43d9      	mvns	r1, r3
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	400b      	ands	r3, r1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe f9da 	bl	8000a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40010400 	.word	0x40010400

0800265c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e12b      	b.n	80028c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fd ffe8 	bl	8000658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c0:	f000 fce6 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 80026c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a81      	ldr	r2, [pc, #516]	; (80028d0 <HAL_I2C_Init+0x274>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d807      	bhi.n	80026e0 <HAL_I2C_Init+0x84>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a80      	ldr	r2, [pc, #512]	; (80028d4 <HAL_I2C_Init+0x278>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e006      	b.n	80026ee <HAL_I2C_Init+0x92>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a7d      	ldr	r2, [pc, #500]	; (80028d8 <HAL_I2C_Init+0x27c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0e7      	b.n	80028c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a78      	ldr	r2, [pc, #480]	; (80028dc <HAL_I2C_Init+0x280>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9b      	lsrs	r3, r3, #18
 8002700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a6a      	ldr	r2, [pc, #424]	; (80028d0 <HAL_I2C_Init+0x274>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d802      	bhi.n	8002730 <HAL_I2C_Init+0xd4>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3301      	adds	r3, #1
 800272e:	e009      	b.n	8002744 <HAL_I2C_Init+0xe8>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_I2C_Init+0x284>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	3301      	adds	r3, #1
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	430b      	orrs	r3, r1
 800274a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002756:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	495c      	ldr	r1, [pc, #368]	; (80028d0 <HAL_I2C_Init+0x274>)
 8002760:	428b      	cmp	r3, r1
 8002762:	d819      	bhi.n	8002798 <HAL_I2C_Init+0x13c>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e59      	subs	r1, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002772:	1c59      	adds	r1, r3, #1
 8002774:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002778:	400b      	ands	r3, r1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_I2C_Init+0x138>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e59      	subs	r1, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fbb1 f3f3 	udiv	r3, r1, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002792:	e051      	b.n	8002838 <HAL_I2C_Init+0x1dc>
 8002794:	2304      	movs	r3, #4
 8002796:	e04f      	b.n	8002838 <HAL_I2C_Init+0x1dc>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d111      	bne.n	80027c4 <HAL_I2C_Init+0x168>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1e58      	subs	r0, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e012      	b.n	80027ea <HAL_I2C_Init+0x18e>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	0099      	lsls	r1, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Init+0x196>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e022      	b.n	8002838 <HAL_I2C_Init+0x1dc>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10e      	bne.n	8002818 <HAL_I2C_Init+0x1bc>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e58      	subs	r0, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	440b      	add	r3, r1
 8002808:	fbb0 f3f3 	udiv	r3, r0, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	e00f      	b.n	8002838 <HAL_I2C_Init+0x1dc>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	0099      	lsls	r1, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	6809      	ldr	r1, [r1, #0]
 800283c:	4313      	orrs	r3, r2
 800283e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6911      	ldr	r1, [r2, #16]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	4311      	orrs	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	430b      	orrs	r3, r1
 800287a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	000186a0 	.word	0x000186a0
 80028d4:	001e847f 	.word	0x001e847f
 80028d8:	003d08ff 	.word	0x003d08ff
 80028dc:	431bde83 	.word	0x431bde83
 80028e0:	10624dd3 	.word	0x10624dd3

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e272      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8087 	beq.w	8002a12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002904:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b04      	cmp	r3, #4
 800290e:	d00c      	beq.n	800292a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002910:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d112      	bne.n	8002942 <HAL_RCC_OscConfig+0x5e>
 800291c:	4b8c      	ldr	r3, [pc, #560]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d10b      	bne.n	8002942 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292a:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d06c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x12c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d168      	bne.n	8002a10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e24c      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x76>
 800294c:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a7f      	ldr	r2, [pc, #508]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	e02e      	b.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x98>
 8002962:	4b7b      	ldr	r3, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7a      	ldr	r2, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b78      	ldr	r3, [pc, #480]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a77      	ldr	r2, [pc, #476]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0xbc>
 8002986:	4b72      	ldr	r3, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a71      	ldr	r2, [pc, #452]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe ffcc 	bl	800195c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe ffc8 	bl	800195c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e200      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xe4>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe ffb8 	bl	800195c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe ffb4 	bl	800195c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1ec      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x10c>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x18c>
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x176>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c0      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4939      	ldr	r1, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe ff6d 	bl	800195c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe ff69 	bl	800195c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a1      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4927      	ldr	r1, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff4c 	bl	800195c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe ff48 	bl	800195c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e180      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03a      	beq.n	8002b68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_RCC_OscConfig+0x274>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe ff2c 	bl	800195c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe ff28 	bl	800195c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e160      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f000 fada 	bl	80030e0 <RCC_Delay>
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_RCC_OscConfig+0x274>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe ff12 	bl	800195c <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe ff0e 	bl	800195c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d908      	bls.n	8002b5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e146      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	42420000 	.word	0x42420000
 8002b58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	4b92      	ldr	r3, [pc, #584]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e9      	bne.n	8002b3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a6 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b8b      	ldr	r3, [pc, #556]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a87      	ldr	r2, [pc, #540]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b90:	61d3      	str	r3, [r2, #28]
 8002b92:	4b85      	ldr	r3, [pc, #532]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bae:	4b7f      	ldr	r3, [pc, #508]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7e      	ldr	r2, [pc, #504]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fecf 	bl	800195c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fecb 	bl	800195c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e103      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b75      	ldr	r3, [pc, #468]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x312>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e02d      	b.n	8002c52 <HAL_RCC_OscConfig+0x36e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x334>
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a69      	ldr	r2, [pc, #420]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6213      	str	r3, [r2, #32]
 8002c0a:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	e01c      	b.n	8002c52 <HAL_RCC_OscConfig+0x36e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x356>
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	4b5e      	ldr	r3, [pc, #376]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a5d      	ldr	r2, [pc, #372]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	e00b      	b.n	8002c52 <HAL_RCC_OscConfig+0x36e>
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a5a      	ldr	r2, [pc, #360]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6213      	str	r3, [r2, #32]
 8002c46:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d015      	beq.n	8002c86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fe7f 	bl	800195c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fe7b 	bl	800195c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0b1      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ee      	beq.n	8002c62 <HAL_RCC_OscConfig+0x37e>
 8002c84:	e014      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe69 	bl	800195c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fe65 	bl	800195c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e09b      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ee      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8087 	beq.w	8002dda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d061      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d146      	bne.n	8002d6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fe39 	bl	800195c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fe35 	bl	800195c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e06d      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4921      	ldr	r1, [pc, #132]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a19      	ldr	r1, [r3, #32]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	491b      	ldr	r1, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fe09 	bl	800195c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fe05 	bl	800195c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e03d      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x46a>
 8002d6c:	e035      	b.n	8002dda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fdf2 	bl	800195c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fdee 	bl	800195c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e026      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x498>
 8002d9a:	e01e      	b.n	8002dda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e019      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_OscConfig+0x500>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d0      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d910      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	4965      	ldr	r1, [pc, #404]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b8      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	494d      	ldr	r1, [pc, #308]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d040      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d115      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e073      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06b      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4936      	ldr	r1, [pc, #216]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe fd40 	bl	800195c <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe fd3c 	bl	800195c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e053      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d210      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4922      	ldr	r1, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e032      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4916      	ldr	r1, [pc, #88]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	490e      	ldr	r1, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f76:	f000 f821 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8002f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fc9e 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08006408 	.word	0x08006408
 8002fb4:	200004f4 	.word	0x200004f4
 8002fb8:	200004f8 	.word	0x200004f8

08002fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b490      	push	{r4, r7}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fc4:	1d3c      	adds	r4, r7, #4
 8002fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fcc:	f240 2301 	movw	r3, #513	; 0x201
 8002fd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d002      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x40>
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x46>
 8002ffa:	e02b      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ffe:	623b      	str	r3, [r7, #32]
      break;
 8003000:	e02b      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	0c9b      	lsrs	r3, r3, #18
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	3328      	adds	r3, #40	; 0x28
 800300c:	443b      	add	r3, r7
 800300e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003012:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0c5b      	lsrs	r3, r3, #17
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	3328      	adds	r3, #40	; 0x28
 800302a:	443b      	add	r3, r7
 800302c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003030:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003036:	fb03 f202 	mul.w	r2, r3, r2
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	e004      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	623b      	str	r3, [r7, #32]
      break;
 8003052:	e002      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003056:	623b      	str	r3, [r7, #32]
      break;
 8003058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305a:	6a3b      	ldr	r3, [r7, #32]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bc90      	pop	{r4, r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	080063f8 	.word	0x080063f8
 800306c:	40021000 	.word	0x40021000
 8003070:	00f42400 	.word	0x00f42400
 8003074:	003d0900 	.word	0x003d0900
 8003078:	007a1200 	.word	0x007a1200

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b02      	ldr	r3, [pc, #8]	; (800308c <HAL_RCC_GetHCLKFreq+0x10>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	200004f4 	.word	0x200004f4

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003094:	f7ff fff2 	bl	800307c <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08006418 	.word	0x08006418

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030bc:	f7ff ffde 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08006418 	.word	0x08006418

080030e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <RCC_Delay+0x34>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <RCC_Delay+0x38>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0a5b      	lsrs	r3, r3, #9
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030fc:	bf00      	nop
  }
  while (Delay --);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <RCC_Delay+0x1c>
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	200004f4 	.word	0x200004f4
 8003118:	10624dd3 	.word	0x10624dd3

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d07d      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313c:	4b4f      	ldr	r3, [pc, #316]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b49      	ldr	r3, [pc, #292]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d118      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a42      	ldr	r2, [pc, #264]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317c:	f7fe fbee 	bl	800195c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	e008      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fe fbea 	bl	800195c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e06d      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d027      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d0:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031d6:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d014      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fbb9 	bl	800195c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fbb5 	bl	800195c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e036      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4917      	ldr	r1, [pc, #92]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	4313      	orrs	r3, r2
 8003220:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	4a13      	ldr	r2, [pc, #76]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003232:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	490b      	ldr	r1, [pc, #44]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4904      	ldr	r1, [pc, #16]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	40007000 	.word	0x40007000
 8003284:	42420440 	.word	0x42420440

08003288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e041      	b.n	800331e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe f8aa 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f000 fc0a 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e044      	b.n	80033ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_TIM_Base_Start_IT+0xac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d018      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003374:	d00e      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_TIM_Base_Start_IT+0xb4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d010      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	e007      	b.n	80033c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00

080033e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e041      	b.n	800347e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f839 	bl	8003486 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f000 fb5a 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start_IT+0x24>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e022      	b.n	8003502 <HAL_TIM_PWM_Start_IT+0x6a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start_IT+0x3e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e015      	b.n	8003502 <HAL_TIM_PWM_Start_IT+0x6a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start_IT+0x58>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_TIM_PWM_Start_IT+0x6a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0b8      	b.n	800367c <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start_IT+0x82>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003518:	e013      	b.n	8003542 <HAL_TIM_PWM_Start_IT+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start_IT+0x92>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003528:	e00b      	b.n	8003542 <HAL_TIM_PWM_Start_IT+0xaa>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start_IT+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003538:	e003      	b.n	8003542 <HAL_TIM_PWM_Start_IT+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d841      	bhi.n	80035cc <HAL_TIM_PWM_Start_IT+0x134>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <HAL_TIM_PWM_Start_IT+0xb8>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003585 	.word	0x08003585
 8003554:	080035cd 	.word	0x080035cd
 8003558:	080035cd 	.word	0x080035cd
 800355c:	080035cd 	.word	0x080035cd
 8003560:	08003597 	.word	0x08003597
 8003564:	080035cd 	.word	0x080035cd
 8003568:	080035cd 	.word	0x080035cd
 800356c:	080035cd 	.word	0x080035cd
 8003570:	080035a9 	.word	0x080035a9
 8003574:	080035cd 	.word	0x080035cd
 8003578:	080035cd 	.word	0x080035cd
 800357c:	080035cd 	.word	0x080035cd
 8003580:	080035bb 	.word	0x080035bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0202 	orr.w	r2, r2, #2
 8003592:	60da      	str	r2, [r3, #12]
      break;
 8003594:	e01b      	b.n	80035ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0204 	orr.w	r2, r2, #4
 80035a4:	60da      	str	r2, [r3, #12]
      break;
 80035a6:	e012      	b.n	80035ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	60da      	str	r2, [r3, #12]
      break;
 80035b8:	e009      	b.n	80035ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0210 	orr.w	r2, r2, #16
 80035c8:	60da      	str	r2, [r3, #12]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80035cc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2201      	movs	r2, #1
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fd3e 	bl	8004058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a28      	ldr	r2, [pc, #160]	; (8003684 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_TIM_PWM_Start_IT+0x158>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a27      	ldr	r2, [pc, #156]	; (8003688 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_TIM_PWM_Start_IT+0x15c>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_TIM_PWM_Start_IT+0x15e>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_TIM_PWM_Start_IT+0x1ae>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_TIM_PWM_Start_IT+0x1ae>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d00e      	beq.n	8003646 <HAL_TIM_PWM_Start_IT+0x1ae>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_TIM_PWM_Start_IT+0x1f4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_TIM_PWM_Start_IT+0x1ae>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_TIM_PWM_Start_IT+0x1ae>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d111      	bne.n	800366a <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b06      	cmp	r3, #6
 8003656:	d010      	beq.n	800367a <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003668:	e007      	b.n	800367a <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40013400 	.word	0x40013400
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40000c00 	.word	0x40000c00

08003698 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e093      	b.n	80037d4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fd fed3 	bl	800146c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036dc:	f023 0307 	bic.w	r3, r3, #7
 80036e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 f9f7 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	4313      	orrs	r3, r2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003738:	f023 030c 	bic.w	r3, r3, #12
 800373c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	4313      	orrs	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	011a      	lsls	r2, r3, #4
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	031b      	lsls	r3, r3, #12
 8003768:	4313      	orrs	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4313      	orrs	r3, r2
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0ac      	b.n	8003950 <HAL_TIM_PWM_ConfigChannel+0x174>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f200 809f 	bhi.w	8003944 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003841 	.word	0x08003841
 8003810:	08003945 	.word	0x08003945
 8003814:	08003945 	.word	0x08003945
 8003818:	08003945 	.word	0x08003945
 800381c:	08003881 	.word	0x08003881
 8003820:	08003945 	.word	0x08003945
 8003824:	08003945 	.word	0x08003945
 8003828:	08003945 	.word	0x08003945
 800382c:	080038c3 	.word	0x080038c3
 8003830:	08003945 	.word	0x08003945
 8003834:	08003945 	.word	0x08003945
 8003838:	08003945 	.word	0x08003945
 800383c:	08003903 	.word	0x08003903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f9c4 	bl	8003bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	619a      	str	r2, [r3, #24]
      break;
 800387e:	e062      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa14 	bl	8003cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
      break;
 80038c0:	e041      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fa67 	bl	8003d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0208 	orr.w	r2, r2, #8
 80038dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0204 	bic.w	r2, r2, #4
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
      break;
 8003900:	e021      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fabb 	bl	8003e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
      break;
 8003942:	e000      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_TIM_ConfigClockSource+0x18>
 800396c:	2302      	movs	r3, #2
 800396e:	e0b3      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x180>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800398e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003996:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a8:	d03e      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0xd0>
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	f200 8087 	bhi.w	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b6:	f000 8085 	beq.w	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039be:	d87f      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d01a      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0xa2>
 80039c4:	2b70      	cmp	r3, #112	; 0x70
 80039c6:	d87b      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039c8:	2b60      	cmp	r3, #96	; 0x60
 80039ca:	d050      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0x116>
 80039cc:	2b60      	cmp	r3, #96	; 0x60
 80039ce:	d877      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039d0:	2b50      	cmp	r3, #80	; 0x50
 80039d2:	d03c      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0xf6>
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d873      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d058      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x136>
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d86f      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039e0:	2b30      	cmp	r3, #48	; 0x30
 80039e2:	d064      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x156>
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d86b      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d060      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x156>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d867      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d05c      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x156>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d05a      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039f8:	e062      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6899      	ldr	r1, [r3, #8]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f000 fb06 	bl	800401a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	609a      	str	r2, [r3, #8]
      break;
 8003a26:	e04e      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f000 faef 	bl	800401a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a4a:	609a      	str	r2, [r3, #8]
      break;
 8003a4c:	e03b      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f000 fa66 	bl	8003f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2150      	movs	r1, #80	; 0x50
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fabd 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003a6c:	e02b      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 fa84 	bl	8003f88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2160      	movs	r1, #96	; 0x60
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 faad 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003a8c:	e01b      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 fa46 	bl	8003f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fa9d 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003aac:	e00b      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f000 fa94 	bl	8003fe6 <TIM_ITRx_SetConfig>
        break;
 8003abe:	e002      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ac4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a33      	ldr	r2, [pc, #204]	; (8003bc0 <TIM_Base_SetConfig+0xe0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2f      	ldr	r2, [pc, #188]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <TIM_Base_SetConfig+0xf0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <TIM_Base_SetConfig+0xe0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <TIM_Base_SetConfig+0x82>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00f      	beq.n	8003b62 <TIM_Base_SetConfig+0x82>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d00b      	beq.n	8003b62 <TIM_Base_SetConfig+0x82>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <TIM_Base_SetConfig+0x82>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d003      	beq.n	8003b62 <TIM_Base_SetConfig+0x82>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <TIM_Base_SetConfig+0xf0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <TIM_Base_SetConfig+0xe0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0xc8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d103      	bne.n	8003bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00

08003bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_OC1_SetConfig+0xd8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_OC1_SetConfig+0x64>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <TIM_OC1_SetConfig+0xdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d10c      	bne.n	8003c52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0308 	bic.w	r3, r3, #8
 8003c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <TIM_OC1_SetConfig+0xd8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC1_SetConfig+0x8e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <TIM_OC1_SetConfig+0xdc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d111      	bne.n	8003c86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40013400 	.word	0x40013400

08003cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0210 	bic.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0320 	bic.w	r3, r3, #32
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_OC2_SetConfig+0xe0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC2_SetConfig+0x68>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <TIM_OC2_SetConfig+0xe4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <TIM_OC2_SetConfig+0xe0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC2_SetConfig+0x94>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <TIM_OC2_SetConfig+0xe4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d113      	bne.n	8003d70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	40012c00 	.word	0x40012c00
 8003d98:	40013400 	.word	0x40013400

08003d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <TIM_OC3_SetConfig+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_OC3_SetConfig+0x66>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <TIM_OC3_SetConfig+0xe4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10d      	bne.n	8003e1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <TIM_OC3_SetConfig+0xe0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_OC3_SetConfig+0x92>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <TIM_OC3_SetConfig+0xe4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d113      	bne.n	8003e56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40012c00 	.word	0x40012c00
 8003e80:	40013400 	.word	0x40013400

08003e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	031b      	lsls	r3, r3, #12
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <TIM_OC4_SetConfig+0xa0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC4_SetConfig+0x68>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <TIM_OC4_SetConfig+0xa4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d109      	bne.n	8003f00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40013400 	.word	0x40013400

08003f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 030a 	bic.w	r3, r3, #10
 8003f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f023 0210 	bic.w	r2, r3, #16
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	031b      	lsls	r3, r3, #12
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	f043 0307 	orr.w	r3, r3, #7
 8004008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	609a      	str	r2, [r3, #8]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004034:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	021a      	lsls	r2, r3, #8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	431a      	orrs	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	609a      	str	r2, [r3, #8]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2201      	movs	r2, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1a      	ldr	r2, [r3, #32]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e050      	b.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d00e      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a12      	ldr	r2, [pc, #72]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40013400 	.word	0x40013400
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00

08004178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e03d      	b.n	8004210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e03f      	b.n	80042ac <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fd fa69 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2224      	movs	r2, #36	; 0x24
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800425c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc84 	bl	8004b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004272:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004282:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004292:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d17c      	bne.n	80043ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_UART_Transmit+0x2c>
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e075      	b.n	80043d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Transmit+0x3e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e06e      	b.n	80043d0 <HAL_UART_Transmit+0x11c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2221      	movs	r2, #33	; 0x21
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004308:	f7fd fb28 	bl	800195c <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	88fa      	ldrh	r2, [r7, #6]
 8004312:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d108      	bne.n	8004336 <HAL_UART_Transmit+0x82>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e003      	b.n	800433e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004346:	e02a      	b.n	800439e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fa37 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e036      	b.n	80043d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004376:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3302      	adds	r3, #2
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e007      	b.n	8004390 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1cf      	bne.n	8004348 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fa07 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e006      	b.n	80043d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d11d      	bne.n	800442e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_UART_Receive_IT+0x26>
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e016      	b.n	8004430 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UART_Receive_IT+0x38>
 800440c:	2302      	movs	r3, #2
 800440e:	e00f      	b.n	8004430 <HAL_UART_Receive_IT+0x58>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	461a      	mov	r2, r3
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fa18 	bl	800485a <UART_Start_Receive_IT>
 800442a:	4603      	mov	r3, r0
 800442c:	e000      	b.n	8004430 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_UART_IRQHandler+0x52>
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fac9 	bl	8004a1a <UART_Receive_IT>
      return;
 8004488:	e17b      	b.n	8004782 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80b1 	beq.w	80045f4 <HAL_UART_IRQHandler+0x1bc>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_UART_IRQHandler+0x70>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80a6 	beq.w	80045f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_UART_IRQHandler+0x90>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_UART_IRQHandler+0xb0>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f043 0202 	orr.w	r2, r3, #2
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_UART_IRQHandler+0xd0>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f043 0204 	orr.w	r2, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <HAL_UART_IRQHandler+0xfa>
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_UART_IRQHandler+0xee>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f043 0208 	orr.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 811e 	beq.w	8004778 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_UART_IRQHandler+0x11e>
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fa62 	bl	8004a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <HAL_UART_IRQHandler+0x146>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d031      	beq.n	80045e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9a4 	bl	80048cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d023      	beq.n	80045da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d013      	beq.n	80045d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	4a76      	ldr	r2, [pc, #472]	; (8004788 <HAL_UART_IRQHandler+0x350>)
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fd6a 	bl	8002090 <HAL_DMA_Abort_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d016      	beq.n	80045f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045cc:	4610      	mov	r0, r2
 80045ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e00e      	b.n	80045f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8e3 	bl	800479e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e00a      	b.n	80045f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8df 	bl	800479e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e006      	b.n	80045f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8db 	bl	800479e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045ee:	e0c3      	b.n	8004778 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	bf00      	nop
    return;
 80045f2:	e0c1      	b.n	8004778 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	f040 80a1 	bne.w	8004740 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 809b 	beq.w	8004740 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8095 	beq.w	8004740 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d04e      	beq.n	80046d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004644:	8a3b      	ldrh	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8098 	beq.w	800477c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004650:	8a3a      	ldrh	r2, [r7, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	f080 8092 	bcs.w	800477c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8a3a      	ldrh	r2, [r7, #16]
 800465c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b20      	cmp	r3, #32
 8004666:	d02b      	beq.n	80046c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004676:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0210 	bic.w	r2, r2, #16
 80046b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fcad 	bl	800201a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f86d 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046d6:	e051      	b.n	800477c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d047      	beq.n	8004780 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046f0:	8a7b      	ldrh	r3, [r7, #18]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d044      	beq.n	8004780 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004704:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0210 	bic.w	r2, r2, #16
 8004732:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004734:	8a7b      	ldrh	r3, [r7, #18]
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f839 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800473e:	e01f      	b.n	8004780 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_UART_IRQHandler+0x324>
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8f9 	bl	800494c <UART_Transmit_IT>
    return;
 800475a:	e012      	b.n	8004782 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <HAL_UART_IRQHandler+0x34a>
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f93a 	bl	80049ea <UART_EndTransmit_IT>
    return;
 8004776:	e004      	b.n	8004782 <HAL_UART_IRQHandler+0x34a>
    return;
 8004778:	bf00      	nop
 800477a:	e002      	b.n	8004782 <HAL_UART_IRQHandler+0x34a>
      return;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HAL_UART_IRQHandler+0x34a>
      return;
 8004780:	bf00      	nop
  }
}
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	08004925 	.word	0x08004925

0800478c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	e02c      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d028      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e6:	f7fd f8b9 	bl	800195c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d21d      	bcs.n	8004832 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004804:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00f      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	429a      	cmp	r2, r3
 800484e:	d0c3      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2222      	movs	r2, #34	; 0x22
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0220 	orr.w	r2, r2, #32
 80048be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0210 	bic.w	r2, r2, #16
 800490a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ff2d 	bl	800479e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b21      	cmp	r3, #33	; 0x21
 800495e:	d13e      	bne.n	80049de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d114      	bne.n	8004994 <UART_Transmit_IT+0x48>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d110      	bne.n	8004994 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004986:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	621a      	str	r2, [r3, #32]
 8004992:	e008      	b.n	80049a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	1c59      	adds	r1, r3, #1
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6211      	str	r1, [r2, #32]
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4619      	mov	r1, r3
 80049b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff febe 	bl	800478c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b22      	cmp	r3, #34	; 0x22
 8004a2c:	f040 8099 	bne.w	8004b62 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d117      	bne.n	8004a6a <UART_Receive_IT+0x50>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d113      	bne.n	8004a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	1c9a      	adds	r2, r3, #2
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
 8004a68:	e026      	b.n	8004ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d007      	beq.n	8004a8e <UART_Receive_IT+0x74>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <UART_Receive_IT+0x82>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e008      	b.n	8004aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d148      	bne.n	8004b5e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0220 	bic.w	r2, r2, #32
 8004ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d123      	bne.n	8004b54 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0210 	bic.w	r2, r2, #16
 8004b20:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d10a      	bne.n	8004b46 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fe2f 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
 8004b52:	e002      	b.n	8004b5a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fb ff65 	bl	8000a24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e002      	b.n	8004b64 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ba6:	f023 030c 	bic.w	r3, r3, #12
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <UART_SetConfig+0x114>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d103      	bne.n	8004bdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe fa70 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	e002      	b.n	8004be2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe fa58 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8004be0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <UART_SetConfig+0x118>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	0119      	lsls	r1, r3, #4
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009a      	lsls	r2, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <UART_SetConfig+0x118>)
 8004c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	2064      	movs	r0, #100	; 0x64
 8004c22:	fb00 f303 	mul.w	r3, r0, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	3332      	adds	r3, #50	; 0x32
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <UART_SetConfig+0x118>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c38:	4419      	add	r1, r3
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009a      	lsls	r2, r3, #2
 8004c44:	441a      	add	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <UART_SetConfig+0x118>)
 8004c52:	fba3 0302 	umull	r0, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	2064      	movs	r0, #100	; 0x64
 8004c5a:	fb00 f303 	mul.w	r3, r0, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	3332      	adds	r3, #50	; 0x32
 8004c64:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <UART_SetConfig+0x118>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	f003 020f 	and.w	r2, r3, #15
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	440a      	add	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40013800 	.word	0x40013800
 8004c84:	51eb851f 	.word	0x51eb851f

08004c88 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6852      	ldr	r2, [r2, #4]
 8004cee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d103      	bne.n	8004d02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <xTaskIncrementTick+0x150>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 808d 	bne.w	8004e4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d34:	4b4f      	ldr	r3, [pc, #316]	; (8004e74 <xTaskIncrementTick+0x154>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d3c:	4a4d      	ldr	r2, [pc, #308]	; (8004e74 <xTaskIncrementTick+0x154>)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d120      	bne.n	8004d8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xTaskIncrementTick+0x46>
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <xTaskIncrementTick+0x15c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a41      	ldr	r2, [pc, #260]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4a41      	ldr	r2, [pc, #260]	; (8004e7c <xTaskIncrementTick+0x15c>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <xTaskIncrementTick+0x160>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	4a3f      	ldr	r2, [pc, #252]	; (8004e80 <xTaskIncrementTick+0x160>)
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	f000 f8e3 	bl	8004f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d34d      	bcc.n	8004e30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d94:	4b38      	ldr	r3, [pc, #224]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <xTaskIncrementTick+0x82>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <xTaskIncrementTick+0x84>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dae:	601a      	str	r2, [r3, #0]
					break;
 8004db0:	e03e      	b.n	8004e30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004db2:	4b31      	ldr	r3, [pc, #196]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d203      	bcs.n	8004dd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dca:	4a2e      	ldr	r2, [pc, #184]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6013      	str	r3, [r2, #0]
						break;
 8004dd0:	e02e      	b.n	8004e30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ff79 	bl	8004cce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3318      	adds	r3, #24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff70 	bl	8004cce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	2201      	movs	r2, #1
 8004df4:	409a      	lsls	r2, r3
 8004df6:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <xTaskIncrementTick+0x168>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	4a22      	ldr	r2, [pc, #136]	; (8004e88 <xTaskIncrementTick+0x168>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <xTaskIncrementTick+0x16c>)
 8004e0e:	441a      	add	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7ff ff36 	bl	8004c88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <xTaskIncrementTick+0x170>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d3b4      	bcc.n	8004d94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e2e:	e7b1      	b.n	8004d94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <xTaskIncrementTick+0x170>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	4915      	ldr	r1, [pc, #84]	; (8004e8c <xTaskIncrementTick+0x16c>)
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d907      	bls.n	8004e58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e004      	b.n	8004e58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <xTaskIncrementTick+0x174>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <xTaskIncrementTick+0x174>)
 8004e56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <xTaskIncrementTick+0x178>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e64:	697b      	ldr	r3, [r7, #20]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000934 	.word	0x20000934
 8004e74:	20000918 	.word	0x20000918
 8004e78:	20000910 	.word	0x20000910
 8004e7c:	20000914 	.word	0x20000914
 8004e80:	2000092c 	.word	0x2000092c
 8004e84:	20000930 	.word	0x20000930
 8004e88:	2000091c 	.word	0x2000091c
 8004e8c:	20000884 	.word	0x20000884
 8004e90:	20000880 	.word	0x20000880
 8004e94:	20000924 	.word	0x20000924
 8004e98:	20000928 	.word	0x20000928

08004e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ea2:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <vTaskSwitchContext+0xa0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <vTaskSwitchContext+0xa4>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004eb0:	e03f      	b.n	8004f32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <vTaskSwitchContext+0xa4>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004eb8:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <vTaskSwitchContext+0xa8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	f1c3 031f 	rsb	r3, r3, #31
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	491e      	ldr	r1, [pc, #120]	; (8004f48 <vTaskSwitchContext+0xac>)
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <vTaskSwitchContext+0x5a>
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <vTaskSwitchContext+0xac>)
 8004f04:	4413      	add	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d104      	bne.n	8004f28 <vTaskSwitchContext+0x8c>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <vTaskSwitchContext+0xb0>)
 8004f30:	6013      	str	r3, [r2, #0]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000934 	.word	0x20000934
 8004f40:	20000928 	.word	0x20000928
 8004f44:	2000091c 	.word	0x2000091c
 8004f48:	20000884 	.word	0x20000884
 8004f4c:	20000880 	.word	0x20000880

08004f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f56:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <prvResetNextTaskUnblockTime+0x40>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <prvResetNextTaskUnblockTime+0x14>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <prvResetNextTaskUnblockTime+0x16>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <prvResetNextTaskUnblockTime+0x44>)
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f72:	e008      	b.n	8004f86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <prvResetNextTaskUnblockTime+0x40>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <prvResetNextTaskUnblockTime+0x44>)
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	20000910 	.word	0x20000910
 8004f94:	20000930 	.word	0x20000930

08004f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <xTaskGetSchedulerState+0x34>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	e008      	b.n	8004fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <xTaskGetSchedulerState+0x38>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e001      	b.n	8004fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fbe:	687b      	ldr	r3, [r7, #4]
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000920 	.word	0x20000920
 8004fd0:	20000934 	.word	0x20000934
	...

08004fe0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <pxCurrentTCBConst2>)
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fea:	f380 8809 	msr	PSP, r0
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8811 	msr	BASEPRI, r0
 8004ffa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ffe:	4770      	bx	lr

08005000 <pxCurrentTCBConst2>:
 8005000:	20000880 	.word	0x20000880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
	...

08005010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005010:	f3ef 8009 	mrs	r0, PSP
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <pxCurrentTCBConst>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005020:	6010      	str	r0, [r2, #0]
 8005022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800502a:	f380 8811 	msr	BASEPRI, r0
 800502e:	f7ff ff35 	bl	8004e9c <vTaskSwitchContext>
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005046:	f380 8809 	msr	PSP, r0
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	4770      	bx	lr

08005050 <pxCurrentTCBConst>:
 8005050:	20000880 	.word	0x20000880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
}
 8005070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005072:	f7ff fe55 	bl	8004d20 <xTaskIncrementTick>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <xPortSysTickHandler+0x40>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800508e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <atoi>:
 800509c:	220a      	movs	r2, #10
 800509e:	2100      	movs	r1, #0
 80050a0:	f000 b922 	b.w	80052e8 <strtol>

080050a4 <__errno>:
 80050a4:	4b01      	ldr	r3, [pc, #4]	; (80050ac <__errno+0x8>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000500 	.word	0x20000500

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	2600      	movs	r6, #0
 80050b4:	4d0c      	ldr	r5, [pc, #48]	; (80050e8 <__libc_init_array+0x38>)
 80050b6:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b8:	1b64      	subs	r4, r4, r5
 80050ba:	10a4      	asrs	r4, r4, #2
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	f001 f91c 	bl	80062fc <_init>
 80050c4:	2600      	movs	r6, #0
 80050c6:	4d0a      	ldr	r5, [pc, #40]	; (80050f0 <__libc_init_array+0x40>)
 80050c8:	4c0a      	ldr	r4, [pc, #40]	; (80050f4 <__libc_init_array+0x44>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	0800666c 	.word	0x0800666c
 80050ec:	0800666c 	.word	0x0800666c
 80050f0:	0800666c 	.word	0x0800666c
 80050f4:	08006670 	.word	0x08006670

080050f8 <memset>:
 80050f8:	4603      	mov	r3, r0
 80050fa:	4402      	add	r2, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <iprintf>:
 8005108:	b40f      	push	{r0, r1, r2, r3}
 800510a:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <iprintf+0x2c>)
 800510c:	b513      	push	{r0, r1, r4, lr}
 800510e:	681c      	ldr	r4, [r3, #0]
 8005110:	b124      	cbz	r4, 800511c <iprintf+0x14>
 8005112:	69a3      	ldr	r3, [r4, #24]
 8005114:	b913      	cbnz	r3, 800511c <iprintf+0x14>
 8005116:	4620      	mov	r0, r4
 8005118:	f000 fae4 	bl	80056e4 <__sinit>
 800511c:	ab05      	add	r3, sp, #20
 800511e:	4620      	mov	r0, r4
 8005120:	9a04      	ldr	r2, [sp, #16]
 8005122:	68a1      	ldr	r1, [r4, #8]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	f000 fd01 	bl	8005b2c <_vfiprintf_r>
 800512a:	b002      	add	sp, #8
 800512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005130:	b004      	add	sp, #16
 8005132:	4770      	bx	lr
 8005134:	20000500 	.word	0x20000500

08005138 <strtok>:
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <strtok+0x5c>)
 800513a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513e:	681f      	ldr	r7, [r3, #0]
 8005140:	4605      	mov	r5, r0
 8005142:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005144:	460e      	mov	r6, r1
 8005146:	b9ec      	cbnz	r4, 8005184 <strtok+0x4c>
 8005148:	2050      	movs	r0, #80	; 0x50
 800514a:	f000 fbe3 	bl	8005914 <malloc>
 800514e:	4602      	mov	r2, r0
 8005150:	65b8      	str	r0, [r7, #88]	; 0x58
 8005152:	b920      	cbnz	r0, 800515e <strtok+0x26>
 8005154:	2157      	movs	r1, #87	; 0x57
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <strtok+0x60>)
 8005158:	4810      	ldr	r0, [pc, #64]	; (800519c <strtok+0x64>)
 800515a:	f000 f98f 	bl	800547c <__assert_func>
 800515e:	e9c0 4400 	strd	r4, r4, [r0]
 8005162:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005166:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800516a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800516e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005172:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005176:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800517a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800517e:	6184      	str	r4, [r0, #24]
 8005180:	7704      	strb	r4, [r0, #28]
 8005182:	6244      	str	r4, [r0, #36]	; 0x24
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800518a:	2301      	movs	r3, #1
 800518c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	f000 b806 	b.w	80051a0 <__strtok_r>
 8005194:	20000500 	.word	0x20000500
 8005198:	08006424 	.word	0x08006424
 800519c:	0800643b 	.word	0x0800643b

080051a0 <__strtok_r>:
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b908      	cbnz	r0, 80051a8 <__strtok_r+0x8>
 80051a4:	6810      	ldr	r0, [r2, #0]
 80051a6:	b188      	cbz	r0, 80051cc <__strtok_r+0x2c>
 80051a8:	4604      	mov	r4, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	4620      	mov	r0, r4
 80051ae:	f814 5b01 	ldrb.w	r5, [r4], #1
 80051b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80051b6:	b91e      	cbnz	r6, 80051c0 <__strtok_r+0x20>
 80051b8:	b965      	cbnz	r5, 80051d4 <__strtok_r+0x34>
 80051ba:	4628      	mov	r0, r5
 80051bc:	6015      	str	r5, [r2, #0]
 80051be:	e005      	b.n	80051cc <__strtok_r+0x2c>
 80051c0:	42b5      	cmp	r5, r6
 80051c2:	d1f6      	bne.n	80051b2 <__strtok_r+0x12>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <__strtok_r+0xa>
 80051c8:	6014      	str	r4, [r2, #0]
 80051ca:	7003      	strb	r3, [r0, #0]
 80051cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ce:	461c      	mov	r4, r3
 80051d0:	e00c      	b.n	80051ec <__strtok_r+0x4c>
 80051d2:	b915      	cbnz	r5, 80051da <__strtok_r+0x3a>
 80051d4:	460e      	mov	r6, r1
 80051d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80051da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80051de:	42ab      	cmp	r3, r5
 80051e0:	d1f7      	bne.n	80051d2 <__strtok_r+0x32>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f3      	beq.n	80051ce <__strtok_r+0x2e>
 80051e6:	2300      	movs	r3, #0
 80051e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80051ec:	6014      	str	r4, [r2, #0]
 80051ee:	e7ed      	b.n	80051cc <__strtok_r+0x2c>

080051f0 <_strtol_l.constprop.0>:
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f6:	4680      	mov	r8, r0
 80051f8:	d001      	beq.n	80051fe <_strtol_l.constprop.0+0xe>
 80051fa:	2b24      	cmp	r3, #36	; 0x24
 80051fc:	d906      	bls.n	800520c <_strtol_l.constprop.0+0x1c>
 80051fe:	f7ff ff51 	bl	80050a4 <__errno>
 8005202:	2316      	movs	r3, #22
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	460d      	mov	r5, r1
 800520e:	4f35      	ldr	r7, [pc, #212]	; (80052e4 <_strtol_l.constprop.0+0xf4>)
 8005210:	4628      	mov	r0, r5
 8005212:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005216:	5de6      	ldrb	r6, [r4, r7]
 8005218:	f016 0608 	ands.w	r6, r6, #8
 800521c:	d1f8      	bne.n	8005210 <_strtol_l.constprop.0+0x20>
 800521e:	2c2d      	cmp	r4, #45	; 0x2d
 8005220:	d12f      	bne.n	8005282 <_strtol_l.constprop.0+0x92>
 8005222:	2601      	movs	r6, #1
 8005224:	782c      	ldrb	r4, [r5, #0]
 8005226:	1c85      	adds	r5, r0, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d057      	beq.n	80052dc <_strtol_l.constprop.0+0xec>
 800522c:	2b10      	cmp	r3, #16
 800522e:	d109      	bne.n	8005244 <_strtol_l.constprop.0+0x54>
 8005230:	2c30      	cmp	r4, #48	; 0x30
 8005232:	d107      	bne.n	8005244 <_strtol_l.constprop.0+0x54>
 8005234:	7828      	ldrb	r0, [r5, #0]
 8005236:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800523a:	2858      	cmp	r0, #88	; 0x58
 800523c:	d149      	bne.n	80052d2 <_strtol_l.constprop.0+0xe2>
 800523e:	2310      	movs	r3, #16
 8005240:	786c      	ldrb	r4, [r5, #1]
 8005242:	3502      	adds	r5, #2
 8005244:	2700      	movs	r7, #0
 8005246:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800524a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800524e:	fbbe f9f3 	udiv	r9, lr, r3
 8005252:	4638      	mov	r0, r7
 8005254:	fb03 ea19 	mls	sl, r3, r9, lr
 8005258:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800525c:	f1bc 0f09 	cmp.w	ip, #9
 8005260:	d814      	bhi.n	800528c <_strtol_l.constprop.0+0x9c>
 8005262:	4664      	mov	r4, ip
 8005264:	42a3      	cmp	r3, r4
 8005266:	dd22      	ble.n	80052ae <_strtol_l.constprop.0+0xbe>
 8005268:	2f00      	cmp	r7, #0
 800526a:	db1d      	blt.n	80052a8 <_strtol_l.constprop.0+0xb8>
 800526c:	4581      	cmp	r9, r0
 800526e:	d31b      	bcc.n	80052a8 <_strtol_l.constprop.0+0xb8>
 8005270:	d101      	bne.n	8005276 <_strtol_l.constprop.0+0x86>
 8005272:	45a2      	cmp	sl, r4
 8005274:	db18      	blt.n	80052a8 <_strtol_l.constprop.0+0xb8>
 8005276:	2701      	movs	r7, #1
 8005278:	fb00 4003 	mla	r0, r0, r3, r4
 800527c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005280:	e7ea      	b.n	8005258 <_strtol_l.constprop.0+0x68>
 8005282:	2c2b      	cmp	r4, #43	; 0x2b
 8005284:	bf04      	itt	eq
 8005286:	782c      	ldrbeq	r4, [r5, #0]
 8005288:	1c85      	addeq	r5, r0, #2
 800528a:	e7cd      	b.n	8005228 <_strtol_l.constprop.0+0x38>
 800528c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005290:	f1bc 0f19 	cmp.w	ip, #25
 8005294:	d801      	bhi.n	800529a <_strtol_l.constprop.0+0xaa>
 8005296:	3c37      	subs	r4, #55	; 0x37
 8005298:	e7e4      	b.n	8005264 <_strtol_l.constprop.0+0x74>
 800529a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800529e:	f1bc 0f19 	cmp.w	ip, #25
 80052a2:	d804      	bhi.n	80052ae <_strtol_l.constprop.0+0xbe>
 80052a4:	3c57      	subs	r4, #87	; 0x57
 80052a6:	e7dd      	b.n	8005264 <_strtol_l.constprop.0+0x74>
 80052a8:	f04f 37ff 	mov.w	r7, #4294967295
 80052ac:	e7e6      	b.n	800527c <_strtol_l.constprop.0+0x8c>
 80052ae:	2f00      	cmp	r7, #0
 80052b0:	da07      	bge.n	80052c2 <_strtol_l.constprop.0+0xd2>
 80052b2:	2322      	movs	r3, #34	; 0x22
 80052b4:	4670      	mov	r0, lr
 80052b6:	f8c8 3000 	str.w	r3, [r8]
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d0a4      	beq.n	8005208 <_strtol_l.constprop.0+0x18>
 80052be:	1e69      	subs	r1, r5, #1
 80052c0:	e005      	b.n	80052ce <_strtol_l.constprop.0+0xde>
 80052c2:	b106      	cbz	r6, 80052c6 <_strtol_l.constprop.0+0xd6>
 80052c4:	4240      	negs	r0, r0
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d09e      	beq.n	8005208 <_strtol_l.constprop.0+0x18>
 80052ca:	2f00      	cmp	r7, #0
 80052cc:	d1f7      	bne.n	80052be <_strtol_l.constprop.0+0xce>
 80052ce:	6011      	str	r1, [r2, #0]
 80052d0:	e79a      	b.n	8005208 <_strtol_l.constprop.0+0x18>
 80052d2:	2430      	movs	r4, #48	; 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1b5      	bne.n	8005244 <_strtol_l.constprop.0+0x54>
 80052d8:	2308      	movs	r3, #8
 80052da:	e7b3      	b.n	8005244 <_strtol_l.constprop.0+0x54>
 80052dc:	2c30      	cmp	r4, #48	; 0x30
 80052de:	d0a9      	beq.n	8005234 <_strtol_l.constprop.0+0x44>
 80052e0:	230a      	movs	r3, #10
 80052e2:	e7af      	b.n	8005244 <_strtol_l.constprop.0+0x54>
 80052e4:	080064d5 	.word	0x080064d5

080052e8 <strtol>:
 80052e8:	4613      	mov	r3, r2
 80052ea:	460a      	mov	r2, r1
 80052ec:	4601      	mov	r1, r0
 80052ee:	4802      	ldr	r0, [pc, #8]	; (80052f8 <strtol+0x10>)
 80052f0:	6800      	ldr	r0, [r0, #0]
 80052f2:	f7ff bf7d 	b.w	80051f0 <_strtol_l.constprop.0>
 80052f6:	bf00      	nop
 80052f8:	20000500 	.word	0x20000500

080052fc <__swbuf_r>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	460e      	mov	r6, r1
 8005300:	4614      	mov	r4, r2
 8005302:	4605      	mov	r5, r0
 8005304:	b118      	cbz	r0, 800530e <__swbuf_r+0x12>
 8005306:	6983      	ldr	r3, [r0, #24]
 8005308:	b90b      	cbnz	r3, 800530e <__swbuf_r+0x12>
 800530a:	f000 f9eb 	bl	80056e4 <__sinit>
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <__swbuf_r+0x98>)
 8005310:	429c      	cmp	r4, r3
 8005312:	d12b      	bne.n	800536c <__swbuf_r+0x70>
 8005314:	686c      	ldr	r4, [r5, #4]
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	071a      	lsls	r2, r3, #28
 800531e:	d52f      	bpl.n	8005380 <__swbuf_r+0x84>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	b36b      	cbz	r3, 8005380 <__swbuf_r+0x84>
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	b2f6      	uxtb	r6, r6
 800532a:	1ac0      	subs	r0, r0, r3
 800532c:	6963      	ldr	r3, [r4, #20]
 800532e:	4637      	mov	r7, r6
 8005330:	4283      	cmp	r3, r0
 8005332:	dc04      	bgt.n	800533e <__swbuf_r+0x42>
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f000 f940 	bl	80055bc <_fflush_r>
 800533c:	bb30      	cbnz	r0, 800538c <__swbuf_r+0x90>
 800533e:	68a3      	ldr	r3, [r4, #8]
 8005340:	3001      	adds	r0, #1
 8005342:	3b01      	subs	r3, #1
 8005344:	60a3      	str	r3, [r4, #8]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	6022      	str	r2, [r4, #0]
 800534c:	701e      	strb	r6, [r3, #0]
 800534e:	6963      	ldr	r3, [r4, #20]
 8005350:	4283      	cmp	r3, r0
 8005352:	d004      	beq.n	800535e <__swbuf_r+0x62>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d506      	bpl.n	8005368 <__swbuf_r+0x6c>
 800535a:	2e0a      	cmp	r6, #10
 800535c:	d104      	bne.n	8005368 <__swbuf_r+0x6c>
 800535e:	4621      	mov	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f000 f92b 	bl	80055bc <_fflush_r>
 8005366:	b988      	cbnz	r0, 800538c <__swbuf_r+0x90>
 8005368:	4638      	mov	r0, r7
 800536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <__swbuf_r+0x9c>)
 800536e:	429c      	cmp	r4, r3
 8005370:	d101      	bne.n	8005376 <__swbuf_r+0x7a>
 8005372:	68ac      	ldr	r4, [r5, #8]
 8005374:	e7cf      	b.n	8005316 <__swbuf_r+0x1a>
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <__swbuf_r+0xa0>)
 8005378:	429c      	cmp	r4, r3
 800537a:	bf08      	it	eq
 800537c:	68ec      	ldreq	r4, [r5, #12]
 800537e:	e7ca      	b.n	8005316 <__swbuf_r+0x1a>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f80c 	bl	80053a0 <__swsetup_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	d0cb      	beq.n	8005324 <__swbuf_r+0x28>
 800538c:	f04f 37ff 	mov.w	r7, #4294967295
 8005390:	e7ea      	b.n	8005368 <__swbuf_r+0x6c>
 8005392:	bf00      	nop
 8005394:	080065f8 	.word	0x080065f8
 8005398:	08006618 	.word	0x08006618
 800539c:	080065d8 	.word	0x080065d8

080053a0 <__swsetup_r>:
 80053a0:	4b32      	ldr	r3, [pc, #200]	; (800546c <__swsetup_r+0xcc>)
 80053a2:	b570      	push	{r4, r5, r6, lr}
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	4606      	mov	r6, r0
 80053a8:	460c      	mov	r4, r1
 80053aa:	b125      	cbz	r5, 80053b6 <__swsetup_r+0x16>
 80053ac:	69ab      	ldr	r3, [r5, #24]
 80053ae:	b913      	cbnz	r3, 80053b6 <__swsetup_r+0x16>
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f997 	bl	80056e4 <__sinit>
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <__swsetup_r+0xd0>)
 80053b8:	429c      	cmp	r4, r3
 80053ba:	d10f      	bne.n	80053dc <__swsetup_r+0x3c>
 80053bc:	686c      	ldr	r4, [r5, #4]
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053c4:	0719      	lsls	r1, r3, #28
 80053c6:	d42c      	bmi.n	8005422 <__swsetup_r+0x82>
 80053c8:	06dd      	lsls	r5, r3, #27
 80053ca:	d411      	bmi.n	80053f0 <__swsetup_r+0x50>
 80053cc:	2309      	movs	r3, #9
 80053ce:	6033      	str	r3, [r6, #0]
 80053d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	e03e      	b.n	800545a <__swsetup_r+0xba>
 80053dc:	4b25      	ldr	r3, [pc, #148]	; (8005474 <__swsetup_r+0xd4>)
 80053de:	429c      	cmp	r4, r3
 80053e0:	d101      	bne.n	80053e6 <__swsetup_r+0x46>
 80053e2:	68ac      	ldr	r4, [r5, #8]
 80053e4:	e7eb      	b.n	80053be <__swsetup_r+0x1e>
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <__swsetup_r+0xd8>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	bf08      	it	eq
 80053ec:	68ec      	ldreq	r4, [r5, #12]
 80053ee:	e7e6      	b.n	80053be <__swsetup_r+0x1e>
 80053f0:	0758      	lsls	r0, r3, #29
 80053f2:	d512      	bpl.n	800541a <__swsetup_r+0x7a>
 80053f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053f6:	b141      	cbz	r1, 800540a <__swsetup_r+0x6a>
 80053f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053fc:	4299      	cmp	r1, r3
 80053fe:	d002      	beq.n	8005406 <__swsetup_r+0x66>
 8005400:	4630      	mov	r0, r6
 8005402:	f000 fa8f 	bl	8005924 <_free_r>
 8005406:	2300      	movs	r3, #0
 8005408:	6363      	str	r3, [r4, #52]	; 0x34
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	2300      	movs	r3, #0
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f043 0308 	orr.w	r3, r3, #8
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	b94b      	cbnz	r3, 800543a <__swsetup_r+0x9a>
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800542c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005430:	d003      	beq.n	800543a <__swsetup_r+0x9a>
 8005432:	4621      	mov	r1, r4
 8005434:	4630      	mov	r0, r6
 8005436:	f000 fa2d 	bl	8005894 <__smakebuf_r>
 800543a:	89a0      	ldrh	r0, [r4, #12]
 800543c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005440:	f010 0301 	ands.w	r3, r0, #1
 8005444:	d00a      	beq.n	800545c <__swsetup_r+0xbc>
 8005446:	2300      	movs	r3, #0
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	6963      	ldr	r3, [r4, #20]
 800544c:	425b      	negs	r3, r3
 800544e:	61a3      	str	r3, [r4, #24]
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	b943      	cbnz	r3, 8005466 <__swsetup_r+0xc6>
 8005454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005458:	d1ba      	bne.n	80053d0 <__swsetup_r+0x30>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	0781      	lsls	r1, r0, #30
 800545e:	bf58      	it	pl
 8005460:	6963      	ldrpl	r3, [r4, #20]
 8005462:	60a3      	str	r3, [r4, #8]
 8005464:	e7f4      	b.n	8005450 <__swsetup_r+0xb0>
 8005466:	2000      	movs	r0, #0
 8005468:	e7f7      	b.n	800545a <__swsetup_r+0xba>
 800546a:	bf00      	nop
 800546c:	20000500 	.word	0x20000500
 8005470:	080065f8 	.word	0x080065f8
 8005474:	08006618 	.word	0x08006618
 8005478:	080065d8 	.word	0x080065d8

0800547c <__assert_func>:
 800547c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800547e:	4614      	mov	r4, r2
 8005480:	461a      	mov	r2, r3
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <__assert_func+0x2c>)
 8005484:	4605      	mov	r5, r0
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68d8      	ldr	r0, [r3, #12]
 800548a:	b14c      	cbz	r4, 80054a0 <__assert_func+0x24>
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <__assert_func+0x30>)
 800548e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005492:	9100      	str	r1, [sp, #0]
 8005494:	462b      	mov	r3, r5
 8005496:	4906      	ldr	r1, [pc, #24]	; (80054b0 <__assert_func+0x34>)
 8005498:	f000 f9a2 	bl	80057e0 <fiprintf>
 800549c:	f000 fe72 	bl	8006184 <abort>
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <__assert_func+0x38>)
 80054a2:	461c      	mov	r4, r3
 80054a4:	e7f3      	b.n	800548e <__assert_func+0x12>
 80054a6:	bf00      	nop
 80054a8:	20000500 	.word	0x20000500
 80054ac:	08006498 	.word	0x08006498
 80054b0:	080064a5 	.word	0x080064a5
 80054b4:	080064d3 	.word	0x080064d3

080054b8 <__sflush_r>:
 80054b8:	898a      	ldrh	r2, [r1, #12]
 80054ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054bc:	4605      	mov	r5, r0
 80054be:	0710      	lsls	r0, r2, #28
 80054c0:	460c      	mov	r4, r1
 80054c2:	d457      	bmi.n	8005574 <__sflush_r+0xbc>
 80054c4:	684b      	ldr	r3, [r1, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dc04      	bgt.n	80054d4 <__sflush_r+0x1c>
 80054ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dc01      	bgt.n	80054d4 <__sflush_r+0x1c>
 80054d0:	2000      	movs	r0, #0
 80054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d6:	2e00      	cmp	r6, #0
 80054d8:	d0fa      	beq.n	80054d0 <__sflush_r+0x18>
 80054da:	2300      	movs	r3, #0
 80054dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054e0:	682f      	ldr	r7, [r5, #0]
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	d032      	beq.n	800554c <__sflush_r+0x94>
 80054e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	075a      	lsls	r2, r3, #29
 80054ec:	d505      	bpl.n	80054fa <__sflush_r+0x42>
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	1ac0      	subs	r0, r0, r3
 80054f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054f4:	b10b      	cbz	r3, 80054fa <__sflush_r+0x42>
 80054f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f8:	1ac0      	subs	r0, r0, r3
 80054fa:	2300      	movs	r3, #0
 80054fc:	4602      	mov	r2, r0
 80054fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005500:	4628      	mov	r0, r5
 8005502:	6a21      	ldr	r1, [r4, #32]
 8005504:	47b0      	blx	r6
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	d106      	bne.n	800551a <__sflush_r+0x62>
 800550c:	6829      	ldr	r1, [r5, #0]
 800550e:	291d      	cmp	r1, #29
 8005510:	d82c      	bhi.n	800556c <__sflush_r+0xb4>
 8005512:	4a29      	ldr	r2, [pc, #164]	; (80055b8 <__sflush_r+0x100>)
 8005514:	40ca      	lsrs	r2, r1
 8005516:	07d6      	lsls	r6, r2, #31
 8005518:	d528      	bpl.n	800556c <__sflush_r+0xb4>
 800551a:	2200      	movs	r2, #0
 800551c:	6062      	str	r2, [r4, #4]
 800551e:	6922      	ldr	r2, [r4, #16]
 8005520:	04d9      	lsls	r1, r3, #19
 8005522:	6022      	str	r2, [r4, #0]
 8005524:	d504      	bpl.n	8005530 <__sflush_r+0x78>
 8005526:	1c42      	adds	r2, r0, #1
 8005528:	d101      	bne.n	800552e <__sflush_r+0x76>
 800552a:	682b      	ldr	r3, [r5, #0]
 800552c:	b903      	cbnz	r3, 8005530 <__sflush_r+0x78>
 800552e:	6560      	str	r0, [r4, #84]	; 0x54
 8005530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005532:	602f      	str	r7, [r5, #0]
 8005534:	2900      	cmp	r1, #0
 8005536:	d0cb      	beq.n	80054d0 <__sflush_r+0x18>
 8005538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800553c:	4299      	cmp	r1, r3
 800553e:	d002      	beq.n	8005546 <__sflush_r+0x8e>
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f9ef 	bl	8005924 <_free_r>
 8005546:	2000      	movs	r0, #0
 8005548:	6360      	str	r0, [r4, #52]	; 0x34
 800554a:	e7c2      	b.n	80054d2 <__sflush_r+0x1a>
 800554c:	6a21      	ldr	r1, [r4, #32]
 800554e:	2301      	movs	r3, #1
 8005550:	4628      	mov	r0, r5
 8005552:	47b0      	blx	r6
 8005554:	1c41      	adds	r1, r0, #1
 8005556:	d1c7      	bne.n	80054e8 <__sflush_r+0x30>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0c4      	beq.n	80054e8 <__sflush_r+0x30>
 800555e:	2b1d      	cmp	r3, #29
 8005560:	d001      	beq.n	8005566 <__sflush_r+0xae>
 8005562:	2b16      	cmp	r3, #22
 8005564:	d101      	bne.n	800556a <__sflush_r+0xb2>
 8005566:	602f      	str	r7, [r5, #0]
 8005568:	e7b2      	b.n	80054d0 <__sflush_r+0x18>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	e7ae      	b.n	80054d2 <__sflush_r+0x1a>
 8005574:	690f      	ldr	r7, [r1, #16]
 8005576:	2f00      	cmp	r7, #0
 8005578:	d0aa      	beq.n	80054d0 <__sflush_r+0x18>
 800557a:	0793      	lsls	r3, r2, #30
 800557c:	bf18      	it	ne
 800557e:	2300      	movne	r3, #0
 8005580:	680e      	ldr	r6, [r1, #0]
 8005582:	bf08      	it	eq
 8005584:	694b      	ldreq	r3, [r1, #20]
 8005586:	1bf6      	subs	r6, r6, r7
 8005588:	600f      	str	r7, [r1, #0]
 800558a:	608b      	str	r3, [r1, #8]
 800558c:	2e00      	cmp	r6, #0
 800558e:	dd9f      	ble.n	80054d0 <__sflush_r+0x18>
 8005590:	4633      	mov	r3, r6
 8005592:	463a      	mov	r2, r7
 8005594:	4628      	mov	r0, r5
 8005596:	6a21      	ldr	r1, [r4, #32]
 8005598:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800559c:	47e0      	blx	ip
 800559e:	2800      	cmp	r0, #0
 80055a0:	dc06      	bgt.n	80055b0 <__sflush_r+0xf8>
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	e790      	b.n	80054d2 <__sflush_r+0x1a>
 80055b0:	4407      	add	r7, r0
 80055b2:	1a36      	subs	r6, r6, r0
 80055b4:	e7ea      	b.n	800558c <__sflush_r+0xd4>
 80055b6:	bf00      	nop
 80055b8:	20400001 	.word	0x20400001

080055bc <_fflush_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	690b      	ldr	r3, [r1, #16]
 80055c0:	4605      	mov	r5, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	b913      	cbnz	r3, 80055cc <_fflush_r+0x10>
 80055c6:	2500      	movs	r5, #0
 80055c8:	4628      	mov	r0, r5
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	b118      	cbz	r0, 80055d6 <_fflush_r+0x1a>
 80055ce:	6983      	ldr	r3, [r0, #24]
 80055d0:	b90b      	cbnz	r3, 80055d6 <_fflush_r+0x1a>
 80055d2:	f000 f887 	bl	80056e4 <__sinit>
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <_fflush_r+0x6c>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	d11b      	bne.n	8005614 <_fflush_r+0x58>
 80055dc:	686c      	ldr	r4, [r5, #4]
 80055de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <_fflush_r+0xa>
 80055e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055e8:	07d0      	lsls	r0, r2, #31
 80055ea:	d404      	bmi.n	80055f6 <_fflush_r+0x3a>
 80055ec:	0599      	lsls	r1, r3, #22
 80055ee:	d402      	bmi.n	80055f6 <_fflush_r+0x3a>
 80055f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f2:	f000 f927 	bl	8005844 <__retarget_lock_acquire_recursive>
 80055f6:	4628      	mov	r0, r5
 80055f8:	4621      	mov	r1, r4
 80055fa:	f7ff ff5d 	bl	80054b8 <__sflush_r>
 80055fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005600:	4605      	mov	r5, r0
 8005602:	07da      	lsls	r2, r3, #31
 8005604:	d4e0      	bmi.n	80055c8 <_fflush_r+0xc>
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	059b      	lsls	r3, r3, #22
 800560a:	d4dd      	bmi.n	80055c8 <_fflush_r+0xc>
 800560c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560e:	f000 f91a 	bl	8005846 <__retarget_lock_release_recursive>
 8005612:	e7d9      	b.n	80055c8 <_fflush_r+0xc>
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <_fflush_r+0x70>)
 8005616:	429c      	cmp	r4, r3
 8005618:	d101      	bne.n	800561e <_fflush_r+0x62>
 800561a:	68ac      	ldr	r4, [r5, #8]
 800561c:	e7df      	b.n	80055de <_fflush_r+0x22>
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <_fflush_r+0x74>)
 8005620:	429c      	cmp	r4, r3
 8005622:	bf08      	it	eq
 8005624:	68ec      	ldreq	r4, [r5, #12]
 8005626:	e7da      	b.n	80055de <_fflush_r+0x22>
 8005628:	080065f8 	.word	0x080065f8
 800562c:	08006618 	.word	0x08006618
 8005630:	080065d8 	.word	0x080065d8

08005634 <std>:
 8005634:	2300      	movs	r3, #0
 8005636:	b510      	push	{r4, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	e9c0 3300 	strd	r3, r3, [r0]
 800563e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005642:	6083      	str	r3, [r0, #8]
 8005644:	8181      	strh	r1, [r0, #12]
 8005646:	6643      	str	r3, [r0, #100]	; 0x64
 8005648:	81c2      	strh	r2, [r0, #14]
 800564a:	6183      	str	r3, [r0, #24]
 800564c:	4619      	mov	r1, r3
 800564e:	2208      	movs	r2, #8
 8005650:	305c      	adds	r0, #92	; 0x5c
 8005652:	f7ff fd51 	bl	80050f8 <memset>
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <std+0x38>)
 8005658:	6224      	str	r4, [r4, #32]
 800565a:	6263      	str	r3, [r4, #36]	; 0x24
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <std+0x3c>)
 800565e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <std+0x40>)
 8005662:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <std+0x44>)
 8005666:	6323      	str	r3, [r4, #48]	; 0x30
 8005668:	bd10      	pop	{r4, pc}
 800566a:	bf00      	nop
 800566c:	080060d9 	.word	0x080060d9
 8005670:	080060fb 	.word	0x080060fb
 8005674:	08006133 	.word	0x08006133
 8005678:	08006157 	.word	0x08006157

0800567c <_cleanup_r>:
 800567c:	4901      	ldr	r1, [pc, #4]	; (8005684 <_cleanup_r+0x8>)
 800567e:	f000 b8c1 	b.w	8005804 <_fwalk_reent>
 8005682:	bf00      	nop
 8005684:	080055bd 	.word	0x080055bd

08005688 <__sfmoreglue>:
 8005688:	2268      	movs	r2, #104	; 0x68
 800568a:	b570      	push	{r4, r5, r6, lr}
 800568c:	1e4d      	subs	r5, r1, #1
 800568e:	4355      	muls	r5, r2
 8005690:	460e      	mov	r6, r1
 8005692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005696:	f000 f9ad 	bl	80059f4 <_malloc_r>
 800569a:	4604      	mov	r4, r0
 800569c:	b140      	cbz	r0, 80056b0 <__sfmoreglue+0x28>
 800569e:	2100      	movs	r1, #0
 80056a0:	e9c0 1600 	strd	r1, r6, [r0]
 80056a4:	300c      	adds	r0, #12
 80056a6:	60a0      	str	r0, [r4, #8]
 80056a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056ac:	f7ff fd24 	bl	80050f8 <memset>
 80056b0:	4620      	mov	r0, r4
 80056b2:	bd70      	pop	{r4, r5, r6, pc}

080056b4 <__sfp_lock_acquire>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__sfp_lock_acquire+0x8>)
 80056b6:	f000 b8c5 	b.w	8005844 <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	20000939 	.word	0x20000939

080056c0 <__sfp_lock_release>:
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <__sfp_lock_release+0x8>)
 80056c2:	f000 b8c0 	b.w	8005846 <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	20000939 	.word	0x20000939

080056cc <__sinit_lock_acquire>:
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <__sinit_lock_acquire+0x8>)
 80056ce:	f000 b8b9 	b.w	8005844 <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	2000093a 	.word	0x2000093a

080056d8 <__sinit_lock_release>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sinit_lock_release+0x8>)
 80056da:	f000 b8b4 	b.w	8005846 <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	2000093a 	.word	0x2000093a

080056e4 <__sinit>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4604      	mov	r4, r0
 80056e8:	f7ff fff0 	bl	80056cc <__sinit_lock_acquire>
 80056ec:	69a3      	ldr	r3, [r4, #24]
 80056ee:	b11b      	cbz	r3, 80056f8 <__sinit+0x14>
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f7ff bff0 	b.w	80056d8 <__sinit_lock_release>
 80056f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056fc:	6523      	str	r3, [r4, #80]	; 0x50
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <__sinit+0x68>)
 8005700:	4a13      	ldr	r2, [pc, #76]	; (8005750 <__sinit+0x6c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	62a2      	str	r2, [r4, #40]	; 0x28
 8005706:	42a3      	cmp	r3, r4
 8005708:	bf08      	it	eq
 800570a:	2301      	moveq	r3, #1
 800570c:	4620      	mov	r0, r4
 800570e:	bf08      	it	eq
 8005710:	61a3      	streq	r3, [r4, #24]
 8005712:	f000 f81f 	bl	8005754 <__sfp>
 8005716:	6060      	str	r0, [r4, #4]
 8005718:	4620      	mov	r0, r4
 800571a:	f000 f81b 	bl	8005754 <__sfp>
 800571e:	60a0      	str	r0, [r4, #8]
 8005720:	4620      	mov	r0, r4
 8005722:	f000 f817 	bl	8005754 <__sfp>
 8005726:	2200      	movs	r2, #0
 8005728:	2104      	movs	r1, #4
 800572a:	60e0      	str	r0, [r4, #12]
 800572c:	6860      	ldr	r0, [r4, #4]
 800572e:	f7ff ff81 	bl	8005634 <std>
 8005732:	2201      	movs	r2, #1
 8005734:	2109      	movs	r1, #9
 8005736:	68a0      	ldr	r0, [r4, #8]
 8005738:	f7ff ff7c 	bl	8005634 <std>
 800573c:	2202      	movs	r2, #2
 800573e:	2112      	movs	r1, #18
 8005740:	68e0      	ldr	r0, [r4, #12]
 8005742:	f7ff ff77 	bl	8005634 <std>
 8005746:	2301      	movs	r3, #1
 8005748:	61a3      	str	r3, [r4, #24]
 800574a:	e7d1      	b.n	80056f0 <__sinit+0xc>
 800574c:	08006420 	.word	0x08006420
 8005750:	0800567d 	.word	0x0800567d

08005754 <__sfp>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	4607      	mov	r7, r0
 8005758:	f7ff ffac 	bl	80056b4 <__sfp_lock_acquire>
 800575c:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <__sfp+0x84>)
 800575e:	681e      	ldr	r6, [r3, #0]
 8005760:	69b3      	ldr	r3, [r6, #24]
 8005762:	b913      	cbnz	r3, 800576a <__sfp+0x16>
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffbd 	bl	80056e4 <__sinit>
 800576a:	3648      	adds	r6, #72	; 0x48
 800576c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005770:	3b01      	subs	r3, #1
 8005772:	d503      	bpl.n	800577c <__sfp+0x28>
 8005774:	6833      	ldr	r3, [r6, #0]
 8005776:	b30b      	cbz	r3, 80057bc <__sfp+0x68>
 8005778:	6836      	ldr	r6, [r6, #0]
 800577a:	e7f7      	b.n	800576c <__sfp+0x18>
 800577c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005780:	b9d5      	cbnz	r5, 80057b8 <__sfp+0x64>
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <__sfp+0x88>)
 8005784:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005788:	60e3      	str	r3, [r4, #12]
 800578a:	6665      	str	r5, [r4, #100]	; 0x64
 800578c:	f000 f859 	bl	8005842 <__retarget_lock_init_recursive>
 8005790:	f7ff ff96 	bl	80056c0 <__sfp_lock_release>
 8005794:	2208      	movs	r2, #8
 8005796:	4629      	mov	r1, r5
 8005798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800579c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057a0:	6025      	str	r5, [r4, #0]
 80057a2:	61a5      	str	r5, [r4, #24]
 80057a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057a8:	f7ff fca6 	bl	80050f8 <memset>
 80057ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b4:	4620      	mov	r0, r4
 80057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b8:	3468      	adds	r4, #104	; 0x68
 80057ba:	e7d9      	b.n	8005770 <__sfp+0x1c>
 80057bc:	2104      	movs	r1, #4
 80057be:	4638      	mov	r0, r7
 80057c0:	f7ff ff62 	bl	8005688 <__sfmoreglue>
 80057c4:	4604      	mov	r4, r0
 80057c6:	6030      	str	r0, [r6, #0]
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d1d5      	bne.n	8005778 <__sfp+0x24>
 80057cc:	f7ff ff78 	bl	80056c0 <__sfp_lock_release>
 80057d0:	230c      	movs	r3, #12
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	e7ee      	b.n	80057b4 <__sfp+0x60>
 80057d6:	bf00      	nop
 80057d8:	08006420 	.word	0x08006420
 80057dc:	ffff0001 	.word	0xffff0001

080057e0 <fiprintf>:
 80057e0:	b40e      	push	{r1, r2, r3}
 80057e2:	b503      	push	{r0, r1, lr}
 80057e4:	4601      	mov	r1, r0
 80057e6:	ab03      	add	r3, sp, #12
 80057e8:	4805      	ldr	r0, [pc, #20]	; (8005800 <fiprintf+0x20>)
 80057ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	f000 f99b 	bl	8005b2c <_vfiprintf_r>
 80057f6:	b002      	add	sp, #8
 80057f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057fc:	b003      	add	sp, #12
 80057fe:	4770      	bx	lr
 8005800:	20000500 	.word	0x20000500

08005804 <_fwalk_reent>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	4606      	mov	r6, r0
 800580a:	4688      	mov	r8, r1
 800580c:	2700      	movs	r7, #0
 800580e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005816:	f1b9 0901 	subs.w	r9, r9, #1
 800581a:	d505      	bpl.n	8005828 <_fwalk_reent+0x24>
 800581c:	6824      	ldr	r4, [r4, #0]
 800581e:	2c00      	cmp	r4, #0
 8005820:	d1f7      	bne.n	8005812 <_fwalk_reent+0xe>
 8005822:	4638      	mov	r0, r7
 8005824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005828:	89ab      	ldrh	r3, [r5, #12]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d907      	bls.n	800583e <_fwalk_reent+0x3a>
 800582e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005832:	3301      	adds	r3, #1
 8005834:	d003      	beq.n	800583e <_fwalk_reent+0x3a>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	47c0      	blx	r8
 800583c:	4307      	orrs	r7, r0
 800583e:	3568      	adds	r5, #104	; 0x68
 8005840:	e7e9      	b.n	8005816 <_fwalk_reent+0x12>

08005842 <__retarget_lock_init_recursive>:
 8005842:	4770      	bx	lr

08005844 <__retarget_lock_acquire_recursive>:
 8005844:	4770      	bx	lr

08005846 <__retarget_lock_release_recursive>:
 8005846:	4770      	bx	lr

08005848 <__swhatbuf_r>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	460e      	mov	r6, r1
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	4614      	mov	r4, r2
 8005852:	2900      	cmp	r1, #0
 8005854:	461d      	mov	r5, r3
 8005856:	b096      	sub	sp, #88	; 0x58
 8005858:	da08      	bge.n	800586c <__swhatbuf_r+0x24>
 800585a:	2200      	movs	r2, #0
 800585c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	061a      	lsls	r2, r3, #24
 8005864:	d410      	bmi.n	8005888 <__swhatbuf_r+0x40>
 8005866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586a:	e00e      	b.n	800588a <__swhatbuf_r+0x42>
 800586c:	466a      	mov	r2, sp
 800586e:	f000 fca1 	bl	80061b4 <_fstat_r>
 8005872:	2800      	cmp	r0, #0
 8005874:	dbf1      	blt.n	800585a <__swhatbuf_r+0x12>
 8005876:	9a01      	ldr	r2, [sp, #4]
 8005878:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800587c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005880:	425a      	negs	r2, r3
 8005882:	415a      	adcs	r2, r3
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	e7ee      	b.n	8005866 <__swhatbuf_r+0x1e>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	2000      	movs	r0, #0
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	b016      	add	sp, #88	; 0x58
 8005890:	bd70      	pop	{r4, r5, r6, pc}
	...

08005894 <__smakebuf_r>:
 8005894:	898b      	ldrh	r3, [r1, #12]
 8005896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005898:	079d      	lsls	r5, r3, #30
 800589a:	4606      	mov	r6, r0
 800589c:	460c      	mov	r4, r1
 800589e:	d507      	bpl.n	80058b0 <__smakebuf_r+0x1c>
 80058a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	2301      	movs	r3, #1
 80058aa:	6163      	str	r3, [r4, #20]
 80058ac:	b002      	add	sp, #8
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	466a      	mov	r2, sp
 80058b2:	ab01      	add	r3, sp, #4
 80058b4:	f7ff ffc8 	bl	8005848 <__swhatbuf_r>
 80058b8:	9900      	ldr	r1, [sp, #0]
 80058ba:	4605      	mov	r5, r0
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f899 	bl	80059f4 <_malloc_r>
 80058c2:	b948      	cbnz	r0, 80058d8 <__smakebuf_r+0x44>
 80058c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c8:	059a      	lsls	r2, r3, #22
 80058ca:	d4ef      	bmi.n	80058ac <__smakebuf_r+0x18>
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e7e3      	b.n	80058a0 <__smakebuf_r+0xc>
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <__smakebuf_r+0x7c>)
 80058da:	62b3      	str	r3, [r6, #40]	; 0x28
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	6020      	str	r0, [r4, #0]
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	6120      	str	r0, [r4, #16]
 80058ea:	6163      	str	r3, [r4, #20]
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	b15b      	cbz	r3, 8005908 <__smakebuf_r+0x74>
 80058f0:	4630      	mov	r0, r6
 80058f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f6:	f000 fc6f 	bl	80061d8 <_isatty_r>
 80058fa:	b128      	cbz	r0, 8005908 <__smakebuf_r+0x74>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	89a0      	ldrh	r0, [r4, #12]
 800590a:	4305      	orrs	r5, r0
 800590c:	81a5      	strh	r5, [r4, #12]
 800590e:	e7cd      	b.n	80058ac <__smakebuf_r+0x18>
 8005910:	0800567d 	.word	0x0800567d

08005914 <malloc>:
 8005914:	4b02      	ldr	r3, [pc, #8]	; (8005920 <malloc+0xc>)
 8005916:	4601      	mov	r1, r0
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	f000 b86b 	b.w	80059f4 <_malloc_r>
 800591e:	bf00      	nop
 8005920:	20000500 	.word	0x20000500

08005924 <_free_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4605      	mov	r5, r0
 8005928:	2900      	cmp	r1, #0
 800592a:	d040      	beq.n	80059ae <_free_r+0x8a>
 800592c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005930:	1f0c      	subs	r4, r1, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfb8      	it	lt
 8005936:	18e4      	addlt	r4, r4, r3
 8005938:	f000 fc7e 	bl	8006238 <__malloc_lock>
 800593c:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <_free_r+0x8c>)
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	b933      	cbnz	r3, 8005950 <_free_r+0x2c>
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	6014      	str	r4, [r2, #0]
 8005946:	4628      	mov	r0, r5
 8005948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800594c:	f000 bc7a 	b.w	8006244 <__malloc_unlock>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d908      	bls.n	8005966 <_free_r+0x42>
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	1821      	adds	r1, r4, r0
 8005958:	428b      	cmp	r3, r1
 800595a:	bf01      	itttt	eq
 800595c:	6819      	ldreq	r1, [r3, #0]
 800595e:	685b      	ldreq	r3, [r3, #4]
 8005960:	1809      	addeq	r1, r1, r0
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	e7ed      	b.n	8005942 <_free_r+0x1e>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x4c>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x42>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1850      	adds	r0, r2, r1
 8005974:	42a0      	cmp	r0, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x6c>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	4401      	add	r1, r0
 800597c:	1850      	adds	r0, r2, r1
 800597e:	4283      	cmp	r3, r0
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1e0      	bne.n	8005946 <_free_r+0x22>
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4401      	add	r1, r0
 800598a:	6011      	str	r1, [r2, #0]
 800598c:	6053      	str	r3, [r2, #4]
 800598e:	e7da      	b.n	8005946 <_free_r+0x22>
 8005990:	d902      	bls.n	8005998 <_free_r+0x74>
 8005992:	230c      	movs	r3, #12
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	e7d6      	b.n	8005946 <_free_r+0x22>
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	1821      	adds	r1, r4, r0
 800599c:	428b      	cmp	r3, r1
 800599e:	bf01      	itttt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	1809      	addeq	r1, r1, r0
 80059a6:	6021      	streq	r1, [r4, #0]
 80059a8:	6063      	str	r3, [r4, #4]
 80059aa:	6054      	str	r4, [r2, #4]
 80059ac:	e7cb      	b.n	8005946 <_free_r+0x22>
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	2000093c 	.word	0x2000093c

080059b4 <sbrk_aligned>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4e0e      	ldr	r6, [pc, #56]	; (80059f0 <sbrk_aligned+0x3c>)
 80059b8:	460c      	mov	r4, r1
 80059ba:	6831      	ldr	r1, [r6, #0]
 80059bc:	4605      	mov	r5, r0
 80059be:	b911      	cbnz	r1, 80059c6 <sbrk_aligned+0x12>
 80059c0:	f000 fb7a 	bl	80060b8 <_sbrk_r>
 80059c4:	6030      	str	r0, [r6, #0]
 80059c6:	4621      	mov	r1, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 fb75 	bl	80060b8 <_sbrk_r>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d00a      	beq.n	80059e8 <sbrk_aligned+0x34>
 80059d2:	1cc4      	adds	r4, r0, #3
 80059d4:	f024 0403 	bic.w	r4, r4, #3
 80059d8:	42a0      	cmp	r0, r4
 80059da:	d007      	beq.n	80059ec <sbrk_aligned+0x38>
 80059dc:	1a21      	subs	r1, r4, r0
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fb6a 	bl	80060b8 <_sbrk_r>
 80059e4:	3001      	adds	r0, #1
 80059e6:	d101      	bne.n	80059ec <sbrk_aligned+0x38>
 80059e8:	f04f 34ff 	mov.w	r4, #4294967295
 80059ec:	4620      	mov	r0, r4
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	20000940 	.word	0x20000940

080059f4 <_malloc_r>:
 80059f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f8:	1ccd      	adds	r5, r1, #3
 80059fa:	f025 0503 	bic.w	r5, r5, #3
 80059fe:	3508      	adds	r5, #8
 8005a00:	2d0c      	cmp	r5, #12
 8005a02:	bf38      	it	cc
 8005a04:	250c      	movcc	r5, #12
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	4607      	mov	r7, r0
 8005a0a:	db01      	blt.n	8005a10 <_malloc_r+0x1c>
 8005a0c:	42a9      	cmp	r1, r5
 8005a0e:	d905      	bls.n	8005a1c <_malloc_r+0x28>
 8005a10:	230c      	movs	r3, #12
 8005a12:	2600      	movs	r6, #0
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4630      	mov	r0, r6
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1c:	4e2e      	ldr	r6, [pc, #184]	; (8005ad8 <_malloc_r+0xe4>)
 8005a1e:	f000 fc0b 	bl	8006238 <__malloc_lock>
 8005a22:	6833      	ldr	r3, [r6, #0]
 8005a24:	461c      	mov	r4, r3
 8005a26:	bb34      	cbnz	r4, 8005a76 <_malloc_r+0x82>
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f7ff ffc2 	bl	80059b4 <sbrk_aligned>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	4604      	mov	r4, r0
 8005a34:	d14d      	bne.n	8005ad2 <_malloc_r+0xde>
 8005a36:	6834      	ldr	r4, [r6, #0]
 8005a38:	4626      	mov	r6, r4
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	d140      	bne.n	8005ac0 <_malloc_r+0xcc>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	4631      	mov	r1, r6
 8005a42:	4638      	mov	r0, r7
 8005a44:	eb04 0803 	add.w	r8, r4, r3
 8005a48:	f000 fb36 	bl	80060b8 <_sbrk_r>
 8005a4c:	4580      	cmp	r8, r0
 8005a4e:	d13a      	bne.n	8005ac6 <_malloc_r+0xd2>
 8005a50:	6821      	ldr	r1, [r4, #0]
 8005a52:	3503      	adds	r5, #3
 8005a54:	1a6d      	subs	r5, r5, r1
 8005a56:	f025 0503 	bic.w	r5, r5, #3
 8005a5a:	3508      	adds	r5, #8
 8005a5c:	2d0c      	cmp	r5, #12
 8005a5e:	bf38      	it	cc
 8005a60:	250c      	movcc	r5, #12
 8005a62:	4638      	mov	r0, r7
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7ff ffa5 	bl	80059b4 <sbrk_aligned>
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d02b      	beq.n	8005ac6 <_malloc_r+0xd2>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	442b      	add	r3, r5
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	e00e      	b.n	8005a94 <_malloc_r+0xa0>
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	1b52      	subs	r2, r2, r5
 8005a7a:	d41e      	bmi.n	8005aba <_malloc_r+0xc6>
 8005a7c:	2a0b      	cmp	r2, #11
 8005a7e:	d916      	bls.n	8005aae <_malloc_r+0xba>
 8005a80:	1961      	adds	r1, r4, r5
 8005a82:	42a3      	cmp	r3, r4
 8005a84:	6025      	str	r5, [r4, #0]
 8005a86:	bf18      	it	ne
 8005a88:	6059      	strne	r1, [r3, #4]
 8005a8a:	6863      	ldr	r3, [r4, #4]
 8005a8c:	bf08      	it	eq
 8005a8e:	6031      	streq	r1, [r6, #0]
 8005a90:	5162      	str	r2, [r4, r5]
 8005a92:	604b      	str	r3, [r1, #4]
 8005a94:	4638      	mov	r0, r7
 8005a96:	f104 060b 	add.w	r6, r4, #11
 8005a9a:	f000 fbd3 	bl	8006244 <__malloc_unlock>
 8005a9e:	f026 0607 	bic.w	r6, r6, #7
 8005aa2:	1d23      	adds	r3, r4, #4
 8005aa4:	1af2      	subs	r2, r6, r3
 8005aa6:	d0b6      	beq.n	8005a16 <_malloc_r+0x22>
 8005aa8:	1b9b      	subs	r3, r3, r6
 8005aaa:	50a3      	str	r3, [r4, r2]
 8005aac:	e7b3      	b.n	8005a16 <_malloc_r+0x22>
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	42a3      	cmp	r3, r4
 8005ab2:	bf0c      	ite	eq
 8005ab4:	6032      	streq	r2, [r6, #0]
 8005ab6:	605a      	strne	r2, [r3, #4]
 8005ab8:	e7ec      	b.n	8005a94 <_malloc_r+0xa0>
 8005aba:	4623      	mov	r3, r4
 8005abc:	6864      	ldr	r4, [r4, #4]
 8005abe:	e7b2      	b.n	8005a26 <_malloc_r+0x32>
 8005ac0:	4634      	mov	r4, r6
 8005ac2:	6876      	ldr	r6, [r6, #4]
 8005ac4:	e7b9      	b.n	8005a3a <_malloc_r+0x46>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	4638      	mov	r0, r7
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	f000 fbba 	bl	8006244 <__malloc_unlock>
 8005ad0:	e7a1      	b.n	8005a16 <_malloc_r+0x22>
 8005ad2:	6025      	str	r5, [r4, #0]
 8005ad4:	e7de      	b.n	8005a94 <_malloc_r+0xa0>
 8005ad6:	bf00      	nop
 8005ad8:	2000093c 	.word	0x2000093c

08005adc <__sfputc_r>:
 8005adc:	6893      	ldr	r3, [r2, #8]
 8005ade:	b410      	push	{r4}
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	6093      	str	r3, [r2, #8]
 8005ae6:	da07      	bge.n	8005af8 <__sfputc_r+0x1c>
 8005ae8:	6994      	ldr	r4, [r2, #24]
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	db01      	blt.n	8005af2 <__sfputc_r+0x16>
 8005aee:	290a      	cmp	r1, #10
 8005af0:	d102      	bne.n	8005af8 <__sfputc_r+0x1c>
 8005af2:	bc10      	pop	{r4}
 8005af4:	f7ff bc02 	b.w	80052fc <__swbuf_r>
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	1c58      	adds	r0, r3, #1
 8005afc:	6010      	str	r0, [r2, #0]
 8005afe:	7019      	strb	r1, [r3, #0]
 8005b00:	4608      	mov	r0, r1
 8005b02:	bc10      	pop	{r4}
 8005b04:	4770      	bx	lr

08005b06 <__sfputs_r>:
 8005b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	18d5      	adds	r5, r2, r3
 8005b10:	42ac      	cmp	r4, r5
 8005b12:	d101      	bne.n	8005b18 <__sfputs_r+0x12>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e007      	b.n	8005b28 <__sfputs_r+0x22>
 8005b18:	463a      	mov	r2, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b20:	f7ff ffdc 	bl	8005adc <__sfputc_r>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d1f3      	bne.n	8005b10 <__sfputs_r+0xa>
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b2c <_vfiprintf_r>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	460d      	mov	r5, r1
 8005b32:	4614      	mov	r4, r2
 8005b34:	4698      	mov	r8, r3
 8005b36:	4606      	mov	r6, r0
 8005b38:	b09d      	sub	sp, #116	; 0x74
 8005b3a:	b118      	cbz	r0, 8005b44 <_vfiprintf_r+0x18>
 8005b3c:	6983      	ldr	r3, [r0, #24]
 8005b3e:	b90b      	cbnz	r3, 8005b44 <_vfiprintf_r+0x18>
 8005b40:	f7ff fdd0 	bl	80056e4 <__sinit>
 8005b44:	4b89      	ldr	r3, [pc, #548]	; (8005d6c <_vfiprintf_r+0x240>)
 8005b46:	429d      	cmp	r5, r3
 8005b48:	d11b      	bne.n	8005b82 <_vfiprintf_r+0x56>
 8005b4a:	6875      	ldr	r5, [r6, #4]
 8005b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4e:	07d9      	lsls	r1, r3, #31
 8005b50:	d405      	bmi.n	8005b5e <_vfiprintf_r+0x32>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	059a      	lsls	r2, r3, #22
 8005b56:	d402      	bmi.n	8005b5e <_vfiprintf_r+0x32>
 8005b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b5a:	f7ff fe73 	bl	8005844 <__retarget_lock_acquire_recursive>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	071b      	lsls	r3, r3, #28
 8005b62:	d501      	bpl.n	8005b68 <_vfiprintf_r+0x3c>
 8005b64:	692b      	ldr	r3, [r5, #16]
 8005b66:	b9eb      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x78>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff fc18 	bl	80053a0 <__swsetup_r>
 8005b70:	b1c0      	cbz	r0, 8005ba4 <_vfiprintf_r+0x78>
 8005b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b74:	07dc      	lsls	r4, r3, #31
 8005b76:	d50e      	bpl.n	8005b96 <_vfiprintf_r+0x6a>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	b01d      	add	sp, #116	; 0x74
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	4b7b      	ldr	r3, [pc, #492]	; (8005d70 <_vfiprintf_r+0x244>)
 8005b84:	429d      	cmp	r5, r3
 8005b86:	d101      	bne.n	8005b8c <_vfiprintf_r+0x60>
 8005b88:	68b5      	ldr	r5, [r6, #8]
 8005b8a:	e7df      	b.n	8005b4c <_vfiprintf_r+0x20>
 8005b8c:	4b79      	ldr	r3, [pc, #484]	; (8005d74 <_vfiprintf_r+0x248>)
 8005b8e:	429d      	cmp	r5, r3
 8005b90:	bf08      	it	eq
 8005b92:	68f5      	ldreq	r5, [r6, #12]
 8005b94:	e7da      	b.n	8005b4c <_vfiprintf_r+0x20>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	0598      	lsls	r0, r3, #22
 8005b9a:	d4ed      	bmi.n	8005b78 <_vfiprintf_r+0x4c>
 8005b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b9e:	f7ff fe52 	bl	8005846 <__retarget_lock_release_recursive>
 8005ba2:	e7e9      	b.n	8005b78 <_vfiprintf_r+0x4c>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bae:	2330      	movs	r3, #48	; 0x30
 8005bb0:	f04f 0901 	mov.w	r9, #1
 8005bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005d78 <_vfiprintf_r+0x24c>
 8005bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc8:	b10a      	cbz	r2, 8005bce <_vfiprintf_r+0xa2>
 8005bca:	2a25      	cmp	r2, #37	; 0x25
 8005bcc:	d1f9      	bne.n	8005bc2 <_vfiprintf_r+0x96>
 8005bce:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd2:	d00b      	beq.n	8005bec <_vfiprintf_r+0xc0>
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ff93 	bl	8005b06 <__sfputs_r>
 8005be0:	3001      	adds	r0, #1
 8005be2:	f000 80aa 	beq.w	8005d3a <_vfiprintf_r+0x20e>
 8005be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be8:	445a      	add	r2, fp
 8005bea:	9209      	str	r2, [sp, #36]	; 0x24
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a2 	beq.w	8005d3a <_vfiprintf_r+0x20e>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2205      	movs	r2, #5
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	4858      	ldr	r0, [pc, #352]	; (8005d78 <_vfiprintf_r+0x24c>)
 8005c18:	f000 fb00 	bl	800621c <memchr>
 8005c1c:	9a04      	ldr	r2, [sp, #16]
 8005c1e:	b9d8      	cbnz	r0, 8005c58 <_vfiprintf_r+0x12c>
 8005c20:	06d1      	lsls	r1, r2, #27
 8005c22:	bf44      	itt	mi
 8005c24:	2320      	movmi	r3, #32
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2a:	0713      	lsls	r3, r2, #28
 8005c2c:	bf44      	itt	mi
 8005c2e:	232b      	movmi	r3, #43	; 0x2b
 8005c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c34:	f89a 3000 	ldrb.w	r3, [sl]
 8005c38:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3a:	d015      	beq.n	8005c68 <_vfiprintf_r+0x13c>
 8005c3c:	4654      	mov	r4, sl
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f04f 0c0a 	mov.w	ip, #10
 8005c44:	9a07      	ldr	r2, [sp, #28]
 8005c46:	4621      	mov	r1, r4
 8005c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4c:	3b30      	subs	r3, #48	; 0x30
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	d94e      	bls.n	8005cf0 <_vfiprintf_r+0x1c4>
 8005c52:	b1b0      	cbz	r0, 8005c82 <_vfiprintf_r+0x156>
 8005c54:	9207      	str	r2, [sp, #28]
 8005c56:	e014      	b.n	8005c82 <_vfiprintf_r+0x156>
 8005c58:	eba0 0308 	sub.w	r3, r0, r8
 8005c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	46a2      	mov	sl, r4
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	e7d2      	b.n	8005c0e <_vfiprintf_r+0xe2>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	9103      	str	r1, [sp, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfbb      	ittet	lt
 8005c74:	425b      	neglt	r3, r3
 8005c76:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7a:	9307      	strge	r3, [sp, #28]
 8005c7c:	9307      	strlt	r3, [sp, #28]
 8005c7e:	bfb8      	it	lt
 8005c80:	9204      	strlt	r2, [sp, #16]
 8005c82:	7823      	ldrb	r3, [r4, #0]
 8005c84:	2b2e      	cmp	r3, #46	; 0x2e
 8005c86:	d10c      	bne.n	8005ca2 <_vfiprintf_r+0x176>
 8005c88:	7863      	ldrb	r3, [r4, #1]
 8005c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8c:	d135      	bne.n	8005cfa <_vfiprintf_r+0x1ce>
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	3402      	adds	r4, #2
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	9203      	str	r2, [sp, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfb8      	it	lt
 8005c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005d7c <_vfiprintf_r+0x250>
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4650      	mov	r0, sl
 8005caa:	7821      	ldrb	r1, [r4, #0]
 8005cac:	f000 fab6 	bl	800621c <memchr>
 8005cb0:	b140      	cbz	r0, 8005cc4 <_vfiprintf_r+0x198>
 8005cb2:	2340      	movs	r3, #64	; 0x40
 8005cb4:	eba0 000a 	sub.w	r0, r0, sl
 8005cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005cbc:	9b04      	ldr	r3, [sp, #16]
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	4303      	orrs	r3, r0
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc8:	2206      	movs	r2, #6
 8005cca:	482d      	ldr	r0, [pc, #180]	; (8005d80 <_vfiprintf_r+0x254>)
 8005ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cd0:	f000 faa4 	bl	800621c <memchr>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d03f      	beq.n	8005d58 <_vfiprintf_r+0x22c>
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <_vfiprintf_r+0x258>)
 8005cda:	bb1b      	cbnz	r3, 8005d24 <_vfiprintf_r+0x1f8>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	3307      	adds	r3, #7
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	443b      	add	r3, r7
 8005cec:	9309      	str	r3, [sp, #36]	; 0x24
 8005cee:	e767      	b.n	8005bc0 <_vfiprintf_r+0x94>
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf8:	e7a5      	b.n	8005c46 <_vfiprintf_r+0x11a>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4619      	mov	r1, r3
 8005d02:	3401      	adds	r4, #1
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	4620      	mov	r0, r4
 8005d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0c:	3a30      	subs	r2, #48	; 0x30
 8005d0e:	2a09      	cmp	r2, #9
 8005d10:	d903      	bls.n	8005d1a <_vfiprintf_r+0x1ee>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0c5      	beq.n	8005ca2 <_vfiprintf_r+0x176>
 8005d16:	9105      	str	r1, [sp, #20]
 8005d18:	e7c3      	b.n	8005ca2 <_vfiprintf_r+0x176>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d22:	e7f0      	b.n	8005d06 <_vfiprintf_r+0x1da>
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <_vfiprintf_r+0x25c>)
 8005d2e:	a904      	add	r1, sp, #16
 8005d30:	f3af 8000 	nop.w
 8005d34:	4607      	mov	r7, r0
 8005d36:	1c78      	adds	r0, r7, #1
 8005d38:	d1d6      	bne.n	8005ce8 <_vfiprintf_r+0x1bc>
 8005d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3c:	07d9      	lsls	r1, r3, #31
 8005d3e:	d405      	bmi.n	8005d4c <_vfiprintf_r+0x220>
 8005d40:	89ab      	ldrh	r3, [r5, #12]
 8005d42:	059a      	lsls	r2, r3, #22
 8005d44:	d402      	bmi.n	8005d4c <_vfiprintf_r+0x220>
 8005d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d48:	f7ff fd7d 	bl	8005846 <__retarget_lock_release_recursive>
 8005d4c:	89ab      	ldrh	r3, [r5, #12]
 8005d4e:	065b      	lsls	r3, r3, #25
 8005d50:	f53f af12 	bmi.w	8005b78 <_vfiprintf_r+0x4c>
 8005d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d56:	e711      	b.n	8005b7c <_vfiprintf_r+0x50>
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <_vfiprintf_r+0x25c>)
 8005d62:	a904      	add	r1, sp, #16
 8005d64:	f000 f882 	bl	8005e6c <_printf_i>
 8005d68:	e7e4      	b.n	8005d34 <_vfiprintf_r+0x208>
 8005d6a:	bf00      	nop
 8005d6c:	080065f8 	.word	0x080065f8
 8005d70:	08006618 	.word	0x08006618
 8005d74:	080065d8 	.word	0x080065d8
 8005d78:	08006638 	.word	0x08006638
 8005d7c:	0800663e 	.word	0x0800663e
 8005d80:	08006642 	.word	0x08006642
 8005d84:	00000000 	.word	0x00000000
 8005d88:	08005b07 	.word	0x08005b07

08005d8c <_printf_common>:
 8005d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d90:	4616      	mov	r6, r2
 8005d92:	4699      	mov	r9, r3
 8005d94:	688a      	ldr	r2, [r1, #8]
 8005d96:	690b      	ldr	r3, [r1, #16]
 8005d98:	4607      	mov	r7, r0
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	bfb8      	it	lt
 8005d9e:	4613      	movlt	r3, r2
 8005da0:	6033      	str	r3, [r6, #0]
 8005da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da6:	460c      	mov	r4, r1
 8005da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dac:	b10a      	cbz	r2, 8005db2 <_printf_common+0x26>
 8005dae:	3301      	adds	r3, #1
 8005db0:	6033      	str	r3, [r6, #0]
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	0699      	lsls	r1, r3, #26
 8005db6:	bf42      	ittt	mi
 8005db8:	6833      	ldrmi	r3, [r6, #0]
 8005dba:	3302      	addmi	r3, #2
 8005dbc:	6033      	strmi	r3, [r6, #0]
 8005dbe:	6825      	ldr	r5, [r4, #0]
 8005dc0:	f015 0506 	ands.w	r5, r5, #6
 8005dc4:	d106      	bne.n	8005dd4 <_printf_common+0x48>
 8005dc6:	f104 0a19 	add.w	sl, r4, #25
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	6832      	ldr	r2, [r6, #0]
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	42ab      	cmp	r3, r5
 8005dd2:	dc28      	bgt.n	8005e26 <_printf_common+0x9a>
 8005dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dd8:	1e13      	subs	r3, r2, #0
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	bf18      	it	ne
 8005dde:	2301      	movne	r3, #1
 8005de0:	0692      	lsls	r2, r2, #26
 8005de2:	d42d      	bmi.n	8005e40 <_printf_common+0xb4>
 8005de4:	4649      	mov	r1, r9
 8005de6:	4638      	mov	r0, r7
 8005de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dec:	47c0      	blx	r8
 8005dee:	3001      	adds	r0, #1
 8005df0:	d020      	beq.n	8005e34 <_printf_common+0xa8>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	68e5      	ldr	r5, [r4, #12]
 8005df6:	f003 0306 	and.w	r3, r3, #6
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	bf18      	it	ne
 8005dfe:	2500      	movne	r5, #0
 8005e00:	6832      	ldr	r2, [r6, #0]
 8005e02:	f04f 0600 	mov.w	r6, #0
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	bf08      	it	eq
 8005e0a:	1aad      	subeq	r5, r5, r2
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	bf08      	it	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfc4      	itt	gt
 8005e18:	1a9b      	subgt	r3, r3, r2
 8005e1a:	18ed      	addgt	r5, r5, r3
 8005e1c:	341a      	adds	r4, #26
 8005e1e:	42b5      	cmp	r5, r6
 8005e20:	d11a      	bne.n	8005e58 <_printf_common+0xcc>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e008      	b.n	8005e38 <_printf_common+0xac>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4652      	mov	r2, sl
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	47c0      	blx	r8
 8005e30:	3001      	adds	r0, #1
 8005e32:	d103      	bne.n	8005e3c <_printf_common+0xb0>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	e7c4      	b.n	8005dca <_printf_common+0x3e>
 8005e40:	2030      	movs	r0, #48	; 0x30
 8005e42:	18e1      	adds	r1, r4, r3
 8005e44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e4e:	4422      	add	r2, r4
 8005e50:	3302      	adds	r3, #2
 8005e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e56:	e7c5      	b.n	8005de4 <_printf_common+0x58>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4638      	mov	r0, r7
 8005e60:	47c0      	blx	r8
 8005e62:	3001      	adds	r0, #1
 8005e64:	d0e6      	beq.n	8005e34 <_printf_common+0xa8>
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7d9      	b.n	8005e1e <_printf_common+0x92>
	...

08005e6c <_printf_i>:
 8005e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e70:	7e0f      	ldrb	r7, [r1, #24]
 8005e72:	4691      	mov	r9, r2
 8005e74:	2f78      	cmp	r7, #120	; 0x78
 8005e76:	4680      	mov	r8, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	469a      	mov	sl, r3
 8005e7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e82:	d807      	bhi.n	8005e94 <_printf_i+0x28>
 8005e84:	2f62      	cmp	r7, #98	; 0x62
 8005e86:	d80a      	bhi.n	8005e9e <_printf_i+0x32>
 8005e88:	2f00      	cmp	r7, #0
 8005e8a:	f000 80d9 	beq.w	8006040 <_printf_i+0x1d4>
 8005e8e:	2f58      	cmp	r7, #88	; 0x58
 8005e90:	f000 80a4 	beq.w	8005fdc <_printf_i+0x170>
 8005e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e9c:	e03a      	b.n	8005f14 <_printf_i+0xa8>
 8005e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ea2:	2b15      	cmp	r3, #21
 8005ea4:	d8f6      	bhi.n	8005e94 <_printf_i+0x28>
 8005ea6:	a101      	add	r1, pc, #4	; (adr r1, 8005eac <_printf_i+0x40>)
 8005ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eac:	08005f05 	.word	0x08005f05
 8005eb0:	08005f19 	.word	0x08005f19
 8005eb4:	08005e95 	.word	0x08005e95
 8005eb8:	08005e95 	.word	0x08005e95
 8005ebc:	08005e95 	.word	0x08005e95
 8005ec0:	08005e95 	.word	0x08005e95
 8005ec4:	08005f19 	.word	0x08005f19
 8005ec8:	08005e95 	.word	0x08005e95
 8005ecc:	08005e95 	.word	0x08005e95
 8005ed0:	08005e95 	.word	0x08005e95
 8005ed4:	08005e95 	.word	0x08005e95
 8005ed8:	08006027 	.word	0x08006027
 8005edc:	08005f49 	.word	0x08005f49
 8005ee0:	08006009 	.word	0x08006009
 8005ee4:	08005e95 	.word	0x08005e95
 8005ee8:	08005e95 	.word	0x08005e95
 8005eec:	08006049 	.word	0x08006049
 8005ef0:	08005e95 	.word	0x08005e95
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	08005e95 	.word	0x08005e95
 8005efc:	08005e95 	.word	0x08005e95
 8005f00:	08006011 	.word	0x08006011
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	1d1a      	adds	r2, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0a4      	b.n	8006062 <_printf_i+0x1f6>
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	6829      	ldr	r1, [r5, #0]
 8005f1c:	0606      	lsls	r6, r0, #24
 8005f1e:	f101 0304 	add.w	r3, r1, #4
 8005f22:	d50a      	bpl.n	8005f3a <_printf_i+0xce>
 8005f24:	680e      	ldr	r6, [r1, #0]
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	da03      	bge.n	8005f34 <_printf_i+0xc8>
 8005f2c:	232d      	movs	r3, #45	; 0x2d
 8005f2e:	4276      	negs	r6, r6
 8005f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f34:	230a      	movs	r3, #10
 8005f36:	485e      	ldr	r0, [pc, #376]	; (80060b0 <_printf_i+0x244>)
 8005f38:	e019      	b.n	8005f6e <_printf_i+0x102>
 8005f3a:	680e      	ldr	r6, [r1, #0]
 8005f3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	bf18      	it	ne
 8005f44:	b236      	sxthne	r6, r6
 8005f46:	e7ef      	b.n	8005f28 <_printf_i+0xbc>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	1d19      	adds	r1, r3, #4
 8005f4e:	6029      	str	r1, [r5, #0]
 8005f50:	0601      	lsls	r1, r0, #24
 8005f52:	d501      	bpl.n	8005f58 <_printf_i+0xec>
 8005f54:	681e      	ldr	r6, [r3, #0]
 8005f56:	e002      	b.n	8005f5e <_printf_i+0xf2>
 8005f58:	0646      	lsls	r6, r0, #25
 8005f5a:	d5fb      	bpl.n	8005f54 <_printf_i+0xe8>
 8005f5c:	881e      	ldrh	r6, [r3, #0]
 8005f5e:	2f6f      	cmp	r7, #111	; 0x6f
 8005f60:	bf0c      	ite	eq
 8005f62:	2308      	moveq	r3, #8
 8005f64:	230a      	movne	r3, #10
 8005f66:	4852      	ldr	r0, [pc, #328]	; (80060b0 <_printf_i+0x244>)
 8005f68:	2100      	movs	r1, #0
 8005f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f6e:	6865      	ldr	r5, [r4, #4]
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	bfa8      	it	ge
 8005f74:	6821      	ldrge	r1, [r4, #0]
 8005f76:	60a5      	str	r5, [r4, #8]
 8005f78:	bfa4      	itt	ge
 8005f7a:	f021 0104 	bicge.w	r1, r1, #4
 8005f7e:	6021      	strge	r1, [r4, #0]
 8005f80:	b90e      	cbnz	r6, 8005f86 <_printf_i+0x11a>
 8005f82:	2d00      	cmp	r5, #0
 8005f84:	d04d      	beq.n	8006022 <_printf_i+0x1b6>
 8005f86:	4615      	mov	r5, r2
 8005f88:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f8c:	fb03 6711 	mls	r7, r3, r1, r6
 8005f90:	5dc7      	ldrb	r7, [r0, r7]
 8005f92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f96:	4637      	mov	r7, r6
 8005f98:	42bb      	cmp	r3, r7
 8005f9a:	460e      	mov	r6, r1
 8005f9c:	d9f4      	bls.n	8005f88 <_printf_i+0x11c>
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d10b      	bne.n	8005fba <_printf_i+0x14e>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	07de      	lsls	r6, r3, #31
 8005fa6:	d508      	bpl.n	8005fba <_printf_i+0x14e>
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	6861      	ldr	r1, [r4, #4]
 8005fac:	4299      	cmp	r1, r3
 8005fae:	bfde      	ittt	le
 8005fb0:	2330      	movle	r3, #48	; 0x30
 8005fb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fba:	1b52      	subs	r2, r2, r5
 8005fbc:	6122      	str	r2, [r4, #16]
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f8cd a000 	str.w	sl, [sp]
 8005fc8:	aa03      	add	r2, sp, #12
 8005fca:	f7ff fedf 	bl	8005d8c <_printf_common>
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d14c      	bne.n	800606c <_printf_i+0x200>
 8005fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd6:	b004      	add	sp, #16
 8005fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fdc:	4834      	ldr	r0, [pc, #208]	; (80060b0 <_printf_i+0x244>)
 8005fde:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fe2:	6829      	ldr	r1, [r5, #0]
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fea:	6029      	str	r1, [r5, #0]
 8005fec:	061d      	lsls	r5, r3, #24
 8005fee:	d514      	bpl.n	800601a <_printf_i+0x1ae>
 8005ff0:	07df      	lsls	r7, r3, #31
 8005ff2:	bf44      	itt	mi
 8005ff4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ff8:	6023      	strmi	r3, [r4, #0]
 8005ffa:	b91e      	cbnz	r6, 8006004 <_printf_i+0x198>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	f023 0320 	bic.w	r3, r3, #32
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	2310      	movs	r3, #16
 8006006:	e7af      	b.n	8005f68 <_printf_i+0xfc>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f043 0320 	orr.w	r3, r3, #32
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	2378      	movs	r3, #120	; 0x78
 8006012:	4828      	ldr	r0, [pc, #160]	; (80060b4 <_printf_i+0x248>)
 8006014:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006018:	e7e3      	b.n	8005fe2 <_printf_i+0x176>
 800601a:	0659      	lsls	r1, r3, #25
 800601c:	bf48      	it	mi
 800601e:	b2b6      	uxthmi	r6, r6
 8006020:	e7e6      	b.n	8005ff0 <_printf_i+0x184>
 8006022:	4615      	mov	r5, r2
 8006024:	e7bb      	b.n	8005f9e <_printf_i+0x132>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	6826      	ldr	r6, [r4, #0]
 800602a:	1d18      	adds	r0, r3, #4
 800602c:	6961      	ldr	r1, [r4, #20]
 800602e:	6028      	str	r0, [r5, #0]
 8006030:	0635      	lsls	r5, r6, #24
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	d501      	bpl.n	800603a <_printf_i+0x1ce>
 8006036:	6019      	str	r1, [r3, #0]
 8006038:	e002      	b.n	8006040 <_printf_i+0x1d4>
 800603a:	0670      	lsls	r0, r6, #25
 800603c:	d5fb      	bpl.n	8006036 <_printf_i+0x1ca>
 800603e:	8019      	strh	r1, [r3, #0]
 8006040:	2300      	movs	r3, #0
 8006042:	4615      	mov	r5, r2
 8006044:	6123      	str	r3, [r4, #16]
 8006046:	e7ba      	b.n	8005fbe <_printf_i+0x152>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	2100      	movs	r1, #0
 800604c:	1d1a      	adds	r2, r3, #4
 800604e:	602a      	str	r2, [r5, #0]
 8006050:	681d      	ldr	r5, [r3, #0]
 8006052:	6862      	ldr	r2, [r4, #4]
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f8e1 	bl	800621c <memchr>
 800605a:	b108      	cbz	r0, 8006060 <_printf_i+0x1f4>
 800605c:	1b40      	subs	r0, r0, r5
 800605e:	6060      	str	r0, [r4, #4]
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	2300      	movs	r3, #0
 8006066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800606a:	e7a8      	b.n	8005fbe <_printf_i+0x152>
 800606c:	462a      	mov	r2, r5
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	47d0      	blx	sl
 8006076:	3001      	adds	r0, #1
 8006078:	d0ab      	beq.n	8005fd2 <_printf_i+0x166>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	079b      	lsls	r3, r3, #30
 800607e:	d413      	bmi.n	80060a8 <_printf_i+0x23c>
 8006080:	68e0      	ldr	r0, [r4, #12]
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	4298      	cmp	r0, r3
 8006086:	bfb8      	it	lt
 8006088:	4618      	movlt	r0, r3
 800608a:	e7a4      	b.n	8005fd6 <_printf_i+0x16a>
 800608c:	2301      	movs	r3, #1
 800608e:	4632      	mov	r2, r6
 8006090:	4649      	mov	r1, r9
 8006092:	4640      	mov	r0, r8
 8006094:	47d0      	blx	sl
 8006096:	3001      	adds	r0, #1
 8006098:	d09b      	beq.n	8005fd2 <_printf_i+0x166>
 800609a:	3501      	adds	r5, #1
 800609c:	68e3      	ldr	r3, [r4, #12]
 800609e:	9903      	ldr	r1, [sp, #12]
 80060a0:	1a5b      	subs	r3, r3, r1
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	dcf2      	bgt.n	800608c <_printf_i+0x220>
 80060a6:	e7eb      	b.n	8006080 <_printf_i+0x214>
 80060a8:	2500      	movs	r5, #0
 80060aa:	f104 0619 	add.w	r6, r4, #25
 80060ae:	e7f5      	b.n	800609c <_printf_i+0x230>
 80060b0:	08006649 	.word	0x08006649
 80060b4:	0800665a 	.word	0x0800665a

080060b8 <_sbrk_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	2300      	movs	r3, #0
 80060bc:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_sbrk_r+0x1c>)
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fa ff80 	bl	8000fc8 <_sbrk>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_sbrk_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_sbrk_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000944 	.word	0x20000944

080060d8 <__sread>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	460c      	mov	r4, r1
 80060dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e0:	f000 f8b6 	bl	8006250 <_read_r>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	bfab      	itete	ge
 80060e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ea:	89a3      	ldrhlt	r3, [r4, #12]
 80060ec:	181b      	addge	r3, r3, r0
 80060ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060f2:	bfac      	ite	ge
 80060f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060f6:	81a3      	strhlt	r3, [r4, #12]
 80060f8:	bd10      	pop	{r4, pc}

080060fa <__swrite>:
 80060fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	461f      	mov	r7, r3
 8006100:	898b      	ldrh	r3, [r1, #12]
 8006102:	4605      	mov	r5, r0
 8006104:	05db      	lsls	r3, r3, #23
 8006106:	460c      	mov	r4, r1
 8006108:	4616      	mov	r6, r2
 800610a:	d505      	bpl.n	8006118 <__swrite+0x1e>
 800610c:	2302      	movs	r3, #2
 800610e:	2200      	movs	r2, #0
 8006110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006114:	f000 f870 	bl	80061f8 <_lseek_r>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	4632      	mov	r2, r6
 800611c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	4628      	mov	r0, r5
 8006124:	463b      	mov	r3, r7
 8006126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800612a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800612e:	f000 b817 	b.w	8006160 <_write_r>

08006132 <__sseek>:
 8006132:	b510      	push	{r4, lr}
 8006134:	460c      	mov	r4, r1
 8006136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800613a:	f000 f85d 	bl	80061f8 <_lseek_r>
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	bf15      	itete	ne
 8006144:	6560      	strne	r0, [r4, #84]	; 0x54
 8006146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800614a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800614e:	81a3      	strheq	r3, [r4, #12]
 8006150:	bf18      	it	ne
 8006152:	81a3      	strhne	r3, [r4, #12]
 8006154:	bd10      	pop	{r4, pc}

08006156 <__sclose>:
 8006156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615a:	f000 b81b 	b.w	8006194 <_close_r>
	...

08006160 <_write_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	2200      	movs	r2, #0
 800616a:	4d05      	ldr	r5, [pc, #20]	; (8006180 <_write_r+0x20>)
 800616c:	602a      	str	r2, [r5, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	f7fa fede 	bl	8000f30 <_write>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_write_r+0x1e>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_write_r+0x1e>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	20000944 	.word	0x20000944

08006184 <abort>:
 8006184:	2006      	movs	r0, #6
 8006186:	b508      	push	{r3, lr}
 8006188:	f000 f89c 	bl	80062c4 <raise>
 800618c:	2001      	movs	r0, #1
 800618e:	f7fa fea8 	bl	8000ee2 <_exit>
	...

08006194 <_close_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	2300      	movs	r3, #0
 8006198:	4d05      	ldr	r5, [pc, #20]	; (80061b0 <_close_r+0x1c>)
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	602b      	str	r3, [r5, #0]
 80061a0:	f7fa fee2 	bl	8000f68 <_close>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_close_r+0x1a>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_close_r+0x1a>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20000944 	.word	0x20000944

080061b4 <_fstat_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	2300      	movs	r3, #0
 80061b8:	4d06      	ldr	r5, [pc, #24]	; (80061d4 <_fstat_r+0x20>)
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	f7fa fedc 	bl	8000f7e <_fstat>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d102      	bne.n	80061d0 <_fstat_r+0x1c>
 80061ca:	682b      	ldr	r3, [r5, #0]
 80061cc:	b103      	cbz	r3, 80061d0 <_fstat_r+0x1c>
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
 80061d2:	bf00      	nop
 80061d4:	20000944 	.word	0x20000944

080061d8 <_isatty_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	2300      	movs	r3, #0
 80061dc:	4d05      	ldr	r5, [pc, #20]	; (80061f4 <_isatty_r+0x1c>)
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	f7fa feda 	bl	8000f9c <_isatty>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_isatty_r+0x1a>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_isatty_r+0x1a>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20000944 	.word	0x20000944

080061f8 <_lseek_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	2200      	movs	r2, #0
 8006202:	4d05      	ldr	r5, [pc, #20]	; (8006218 <_lseek_r+0x20>)
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fa fed2 	bl	8000fb0 <_lseek>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_lseek_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_lseek_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20000944 	.word	0x20000944

0800621c <memchr>:
 800621c:	4603      	mov	r3, r0
 800621e:	b510      	push	{r4, lr}
 8006220:	b2c9      	uxtb	r1, r1
 8006222:	4402      	add	r2, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	4618      	mov	r0, r3
 8006228:	d101      	bne.n	800622e <memchr+0x12>
 800622a:	2000      	movs	r0, #0
 800622c:	e003      	b.n	8006236 <memchr+0x1a>
 800622e:	7804      	ldrb	r4, [r0, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	428c      	cmp	r4, r1
 8006234:	d1f6      	bne.n	8006224 <memchr+0x8>
 8006236:	bd10      	pop	{r4, pc}

08006238 <__malloc_lock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_lock+0x8>)
 800623a:	f7ff bb03 	b.w	8005844 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	20000938 	.word	0x20000938

08006244 <__malloc_unlock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_unlock+0x8>)
 8006246:	f7ff bafe 	b.w	8005846 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	20000938 	.word	0x20000938

08006250 <_read_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	2200      	movs	r2, #0
 800625a:	4d05      	ldr	r5, [pc, #20]	; (8006270 <_read_r+0x20>)
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fa fe49 	bl	8000ef6 <_read>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_read_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_read_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20000944 	.word	0x20000944

08006274 <_raise_r>:
 8006274:	291f      	cmp	r1, #31
 8006276:	b538      	push	{r3, r4, r5, lr}
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	d904      	bls.n	8006288 <_raise_r+0x14>
 800627e:	2316      	movs	r3, #22
 8006280:	6003      	str	r3, [r0, #0]
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800628a:	b112      	cbz	r2, 8006292 <_raise_r+0x1e>
 800628c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006290:	b94b      	cbnz	r3, 80062a6 <_raise_r+0x32>
 8006292:	4620      	mov	r0, r4
 8006294:	f000 f830 	bl	80062f8 <_getpid_r>
 8006298:	462a      	mov	r2, r5
 800629a:	4601      	mov	r1, r0
 800629c:	4620      	mov	r0, r4
 800629e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a2:	f000 b817 	b.w	80062d4 <_kill_r>
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d00a      	beq.n	80062c0 <_raise_r+0x4c>
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	d103      	bne.n	80062b6 <_raise_r+0x42>
 80062ae:	2316      	movs	r3, #22
 80062b0:	6003      	str	r3, [r0, #0]
 80062b2:	2001      	movs	r0, #1
 80062b4:	e7e7      	b.n	8006286 <_raise_r+0x12>
 80062b6:	2400      	movs	r4, #0
 80062b8:	4628      	mov	r0, r5
 80062ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062be:	4798      	blx	r3
 80062c0:	2000      	movs	r0, #0
 80062c2:	e7e0      	b.n	8006286 <_raise_r+0x12>

080062c4 <raise>:
 80062c4:	4b02      	ldr	r3, [pc, #8]	; (80062d0 <raise+0xc>)
 80062c6:	4601      	mov	r1, r0
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f7ff bfd3 	b.w	8006274 <_raise_r>
 80062ce:	bf00      	nop
 80062d0:	20000500 	.word	0x20000500

080062d4 <_kill_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	2300      	movs	r3, #0
 80062d8:	4d06      	ldr	r5, [pc, #24]	; (80062f4 <_kill_r+0x20>)
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f7fa fdee 	bl	8000ec2 <_kill>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d102      	bne.n	80062f0 <_kill_r+0x1c>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	b103      	cbz	r3, 80062f0 <_kill_r+0x1c>
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	bd38      	pop	{r3, r4, r5, pc}
 80062f2:	bf00      	nop
 80062f4:	20000944 	.word	0x20000944

080062f8 <_getpid_r>:
 80062f8:	f7fa bddc 	b.w	8000eb4 <_getpid>

080062fc <_init>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr

08006308 <_fini>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr
