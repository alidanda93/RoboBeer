
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4bc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800b6b0  0800b6b0  0001b6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc50  0800bc50  000206d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc50  0800bc50  000206d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc50  0800bc50  000206d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc50  0800bc50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc54  0800bc54  0001bc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  0800bc58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  200006d8  0800c330  000206d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800c330  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f77  00000000  00000000  00020701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038db  00000000  00000000  00035678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00038f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d972  00000000  00000000  0003b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa34  00000000  00000000  0005915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa162  00000000  00000000  00073b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dcf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d10  00000000  00000000  0011dd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200006d8 	.word	0x200006d8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800b694 	.word	0x0800b694

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200006dc 	.word	0x200006dc
 800022c:	0800b694 	.word	0x0800b694

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_fmul>:
 8000254:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000258:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800025c:	bf1e      	ittt	ne
 800025e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000262:	ea92 0f0c 	teqne	r2, ip
 8000266:	ea93 0f0c 	teqne	r3, ip
 800026a:	d06f      	beq.n	800034c <__aeabi_fmul+0xf8>
 800026c:	441a      	add	r2, r3
 800026e:	ea80 0c01 	eor.w	ip, r0, r1
 8000272:	0240      	lsls	r0, r0, #9
 8000274:	bf18      	it	ne
 8000276:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800027a:	d01e      	beq.n	80002ba <__aeabi_fmul+0x66>
 800027c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000280:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000284:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000288:	fba0 3101 	umull	r3, r1, r0, r1
 800028c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000290:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000294:	bf3e      	ittt	cc
 8000296:	0049      	lslcc	r1, r1, #1
 8000298:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800029c:	005b      	lslcc	r3, r3, #1
 800029e:	ea40 0001 	orr.w	r0, r0, r1
 80002a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002a6:	2afd      	cmp	r2, #253	; 0xfd
 80002a8:	d81d      	bhi.n	80002e6 <__aeabi_fmul+0x92>
 80002aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b2:	bf08      	it	eq
 80002b4:	f020 0001 	biceq.w	r0, r0, #1
 80002b8:	4770      	bx	lr
 80002ba:	f090 0f00 	teq	r0, #0
 80002be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002c2:	bf08      	it	eq
 80002c4:	0249      	lsleq	r1, r1, #9
 80002c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ce:	3a7f      	subs	r2, #127	; 0x7f
 80002d0:	bfc2      	ittt	gt
 80002d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002da:	4770      	bxgt	lr
 80002dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	3a01      	subs	r2, #1
 80002e6:	dc5d      	bgt.n	80003a4 <__aeabi_fmul+0x150>
 80002e8:	f112 0f19 	cmn.w	r2, #25
 80002ec:	bfdc      	itt	le
 80002ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002f2:	4770      	bxle	lr
 80002f4:	f1c2 0200 	rsb	r2, r2, #0
 80002f8:	0041      	lsls	r1, r0, #1
 80002fa:	fa21 f102 	lsr.w	r1, r1, r2
 80002fe:	f1c2 0220 	rsb	r2, r2, #32
 8000302:	fa00 fc02 	lsl.w	ip, r0, r2
 8000306:	ea5f 0031 	movs.w	r0, r1, rrx
 800030a:	f140 0000 	adc.w	r0, r0, #0
 800030e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000312:	bf08      	it	eq
 8000314:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000318:	4770      	bx	lr
 800031a:	f092 0f00 	teq	r2, #0
 800031e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000322:	bf02      	ittt	eq
 8000324:	0040      	lsleq	r0, r0, #1
 8000326:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800032a:	3a01      	subeq	r2, #1
 800032c:	d0f9      	beq.n	8000322 <__aeabi_fmul+0xce>
 800032e:	ea40 000c 	orr.w	r0, r0, ip
 8000332:	f093 0f00 	teq	r3, #0
 8000336:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800033a:	bf02      	ittt	eq
 800033c:	0049      	lsleq	r1, r1, #1
 800033e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000342:	3b01      	subeq	r3, #1
 8000344:	d0f9      	beq.n	800033a <__aeabi_fmul+0xe6>
 8000346:	ea41 010c 	orr.w	r1, r1, ip
 800034a:	e78f      	b.n	800026c <__aeabi_fmul+0x18>
 800034c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000350:	ea92 0f0c 	teq	r2, ip
 8000354:	bf18      	it	ne
 8000356:	ea93 0f0c 	teqne	r3, ip
 800035a:	d00a      	beq.n	8000372 <__aeabi_fmul+0x11e>
 800035c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000360:	bf18      	it	ne
 8000362:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000366:	d1d8      	bne.n	800031a <__aeabi_fmul+0xc6>
 8000368:	ea80 0001 	eor.w	r0, r0, r1
 800036c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000370:	4770      	bx	lr
 8000372:	f090 0f00 	teq	r0, #0
 8000376:	bf17      	itett	ne
 8000378:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800037c:	4608      	moveq	r0, r1
 800037e:	f091 0f00 	teqne	r1, #0
 8000382:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000386:	d014      	beq.n	80003b2 <__aeabi_fmul+0x15e>
 8000388:	ea92 0f0c 	teq	r2, ip
 800038c:	d101      	bne.n	8000392 <__aeabi_fmul+0x13e>
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	d10f      	bne.n	80003b2 <__aeabi_fmul+0x15e>
 8000392:	ea93 0f0c 	teq	r3, ip
 8000396:	d103      	bne.n	80003a0 <__aeabi_fmul+0x14c>
 8000398:	024b      	lsls	r3, r1, #9
 800039a:	bf18      	it	ne
 800039c:	4608      	movne	r0, r1
 800039e:	d108      	bne.n	80003b2 <__aeabi_fmul+0x15e>
 80003a0:	ea80 0001 	eor.w	r0, r0, r1
 80003a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003b0:	4770      	bx	lr
 80003b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003ba:	4770      	bx	lr

080003bc <__aeabi_drsub>:
 80003bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	e002      	b.n	80003c8 <__adddf3>
 80003c2:	bf00      	nop

080003c4 <__aeabi_dsub>:
 80003c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c8 <__adddf3>:
 80003c8:	b530      	push	{r4, r5, lr}
 80003ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	bf1f      	itttt	ne
 80003de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ee:	f000 80e2 	beq.w	80005b6 <__adddf3+0x1ee>
 80003f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fa:	bfb8      	it	lt
 80003fc:	426d      	neglt	r5, r5
 80003fe:	dd0c      	ble.n	800041a <__adddf3+0x52>
 8000400:	442c      	add	r4, r5
 8000402:	ea80 0202 	eor.w	r2, r0, r2
 8000406:	ea81 0303 	eor.w	r3, r1, r3
 800040a:	ea82 0000 	eor.w	r0, r2, r0
 800040e:	ea83 0101 	eor.w	r1, r3, r1
 8000412:	ea80 0202 	eor.w	r2, r0, r2
 8000416:	ea81 0303 	eor.w	r3, r1, r3
 800041a:	2d36      	cmp	r5, #54	; 0x36
 800041c:	bf88      	it	hi
 800041e:	bd30      	pophi	{r4, r5, pc}
 8000420:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000424:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000428:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800042c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000430:	d002      	beq.n	8000438 <__adddf3+0x70>
 8000432:	4240      	negs	r0, r0
 8000434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000438:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800043c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000440:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000444:	d002      	beq.n	800044c <__adddf3+0x84>
 8000446:	4252      	negs	r2, r2
 8000448:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044c:	ea94 0f05 	teq	r4, r5
 8000450:	f000 80a7 	beq.w	80005a2 <__adddf3+0x1da>
 8000454:	f1a4 0401 	sub.w	r4, r4, #1
 8000458:	f1d5 0e20 	rsbs	lr, r5, #32
 800045c:	db0d      	blt.n	800047a <__adddf3+0xb2>
 800045e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000462:	fa22 f205 	lsr.w	r2, r2, r5
 8000466:	1880      	adds	r0, r0, r2
 8000468:	f141 0100 	adc.w	r1, r1, #0
 800046c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000470:	1880      	adds	r0, r0, r2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	4159      	adcs	r1, r3
 8000478:	e00e      	b.n	8000498 <__adddf3+0xd0>
 800047a:	f1a5 0520 	sub.w	r5, r5, #32
 800047e:	f10e 0e20 	add.w	lr, lr, #32
 8000482:	2a01      	cmp	r2, #1
 8000484:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000488:	bf28      	it	cs
 800048a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048e:	fa43 f305 	asr.w	r3, r3, r5
 8000492:	18c0      	adds	r0, r0, r3
 8000494:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	d507      	bpl.n	80004ae <__adddf3+0xe6>
 800049e:	f04f 0e00 	mov.w	lr, #0
 80004a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b2:	d31b      	bcc.n	80004ec <__adddf3+0x124>
 80004b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b8:	d30c      	bcc.n	80004d4 <__adddf3+0x10c>
 80004ba:	0849      	lsrs	r1, r1, #1
 80004bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c4:	f104 0401 	add.w	r4, r4, #1
 80004c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d0:	f080 809a 	bcs.w	8000608 <__adddf3+0x240>
 80004d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d8:	bf08      	it	eq
 80004da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004de:	f150 0000 	adcs.w	r0, r0, #0
 80004e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e6:	ea41 0105 	orr.w	r1, r1, r5
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f0:	4140      	adcs	r0, r0
 80004f2:	eb41 0101 	adc.w	r1, r1, r1
 80004f6:	3c01      	subs	r4, #1
 80004f8:	bf28      	it	cs
 80004fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004fe:	d2e9      	bcs.n	80004d4 <__adddf3+0x10c>
 8000500:	f091 0f00 	teq	r1, #0
 8000504:	bf04      	itt	eq
 8000506:	4601      	moveq	r1, r0
 8000508:	2000      	moveq	r0, #0
 800050a:	fab1 f381 	clz	r3, r1
 800050e:	bf08      	it	eq
 8000510:	3320      	addeq	r3, #32
 8000512:	f1a3 030b 	sub.w	r3, r3, #11
 8000516:	f1b3 0220 	subs.w	r2, r3, #32
 800051a:	da0c      	bge.n	8000536 <__adddf3+0x16e>
 800051c:	320c      	adds	r2, #12
 800051e:	dd08      	ble.n	8000532 <__adddf3+0x16a>
 8000520:	f102 0c14 	add.w	ip, r2, #20
 8000524:	f1c2 020c 	rsb	r2, r2, #12
 8000528:	fa01 f00c 	lsl.w	r0, r1, ip
 800052c:	fa21 f102 	lsr.w	r1, r1, r2
 8000530:	e00c      	b.n	800054c <__adddf3+0x184>
 8000532:	f102 0214 	add.w	r2, r2, #20
 8000536:	bfd8      	it	le
 8000538:	f1c2 0c20 	rsble	ip, r2, #32
 800053c:	fa01 f102 	lsl.w	r1, r1, r2
 8000540:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000544:	bfdc      	itt	le
 8000546:	ea41 010c 	orrle.w	r1, r1, ip
 800054a:	4090      	lslle	r0, r2
 800054c:	1ae4      	subs	r4, r4, r3
 800054e:	bfa2      	ittt	ge
 8000550:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000554:	4329      	orrge	r1, r5
 8000556:	bd30      	popge	{r4, r5, pc}
 8000558:	ea6f 0404 	mvn.w	r4, r4
 800055c:	3c1f      	subs	r4, #31
 800055e:	da1c      	bge.n	800059a <__adddf3+0x1d2>
 8000560:	340c      	adds	r4, #12
 8000562:	dc0e      	bgt.n	8000582 <__adddf3+0x1ba>
 8000564:	f104 0414 	add.w	r4, r4, #20
 8000568:	f1c4 0220 	rsb	r2, r4, #32
 800056c:	fa20 f004 	lsr.w	r0, r0, r4
 8000570:	fa01 f302 	lsl.w	r3, r1, r2
 8000574:	ea40 0003 	orr.w	r0, r0, r3
 8000578:	fa21 f304 	lsr.w	r3, r1, r4
 800057c:	ea45 0103 	orr.w	r1, r5, r3
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	f1c4 040c 	rsb	r4, r4, #12
 8000586:	f1c4 0220 	rsb	r2, r4, #32
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 f304 	lsl.w	r3, r1, r4
 8000592:	ea40 0003 	orr.w	r0, r0, r3
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	fa21 f004 	lsr.w	r0, r1, r4
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	f094 0f00 	teq	r4, #0
 80005a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005aa:	bf06      	itte	eq
 80005ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b0:	3401      	addeq	r4, #1
 80005b2:	3d01      	subne	r5, #1
 80005b4:	e74e      	b.n	8000454 <__adddf3+0x8c>
 80005b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ba:	bf18      	it	ne
 80005bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c0:	d029      	beq.n	8000616 <__adddf3+0x24e>
 80005c2:	ea94 0f05 	teq	r4, r5
 80005c6:	bf08      	it	eq
 80005c8:	ea90 0f02 	teqeq	r0, r2
 80005cc:	d005      	beq.n	80005da <__adddf3+0x212>
 80005ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d2:	bf04      	itt	eq
 80005d4:	4619      	moveq	r1, r3
 80005d6:	4610      	moveq	r0, r2
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf1e      	ittt	ne
 80005e0:	2100      	movne	r1, #0
 80005e2:	2000      	movne	r0, #0
 80005e4:	bd30      	popne	{r4, r5, pc}
 80005e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ea:	d105      	bne.n	80005f8 <__adddf3+0x230>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	4149      	adcs	r1, r1
 80005f0:	bf28      	it	cs
 80005f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd30      	pop	{r4, r5, pc}
 80005f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005fc:	bf3c      	itt	cc
 80005fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000602:	bd30      	popcc	{r4, r5, pc}
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000608:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800060c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf1a      	itte	ne
 800061c:	4619      	movne	r1, r3
 800061e:	4610      	movne	r0, r2
 8000620:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000624:	bf1c      	itt	ne
 8000626:	460b      	movne	r3, r1
 8000628:	4602      	movne	r2, r0
 800062a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062e:	bf06      	itte	eq
 8000630:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000634:	ea91 0f03 	teqeq	r1, r3
 8000638:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	bf00      	nop

08000640 <__aeabi_ui2d>:
 8000640:	f090 0f00 	teq	r0, #0
 8000644:	bf04      	itt	eq
 8000646:	2100      	moveq	r1, #0
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000650:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000654:	f04f 0500 	mov.w	r5, #0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e750      	b.n	8000500 <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_i2d>:
 8000660:	f090 0f00 	teq	r0, #0
 8000664:	bf04      	itt	eq
 8000666:	2100      	moveq	r1, #0
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000670:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000674:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000678:	bf48      	it	mi
 800067a:	4240      	negmi	r0, r0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e73e      	b.n	8000500 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_f2d>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000692:	bf1f      	itttt	ne
 8000694:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000698:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800069c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a0:	4770      	bxne	lr
 80006a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006a6:	bf08      	it	eq
 80006a8:	4770      	bxeq	lr
 80006aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ae:	bf04      	itt	eq
 80006b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	e71c      	b.n	8000500 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_ul2d>:
 80006c8:	ea50 0201 	orrs.w	r2, r0, r1
 80006cc:	bf08      	it	eq
 80006ce:	4770      	bxeq	lr
 80006d0:	b530      	push	{r4, r5, lr}
 80006d2:	f04f 0500 	mov.w	r5, #0
 80006d6:	e00a      	b.n	80006ee <__aeabi_l2d+0x16>

080006d8 <__aeabi_l2d>:
 80006d8:	ea50 0201 	orrs.w	r2, r0, r1
 80006dc:	bf08      	it	eq
 80006de:	4770      	bxeq	lr
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e6:	d502      	bpl.n	80006ee <__aeabi_l2d+0x16>
 80006e8:	4240      	negs	r0, r0
 80006ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fa:	f43f aed8 	beq.w	80004ae <__adddf3+0xe6>
 80006fe:	f04f 0203 	mov.w	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000716:	f1c2 0320 	rsb	r3, r2, #32
 800071a:	fa00 fc03 	lsl.w	ip, r0, r3
 800071e:	fa20 f002 	lsr.w	r0, r0, r2
 8000722:	fa01 fe03 	lsl.w	lr, r1, r3
 8000726:	ea40 000e 	orr.w	r0, r0, lr
 800072a:	fa21 f102 	lsr.w	r1, r1, r2
 800072e:	4414      	add	r4, r2
 8000730:	e6bd      	b.n	80004ae <__adddf3+0xe6>
 8000732:	bf00      	nop

08000734 <__aeabi_dmul>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000742:	bf1d      	ittte	ne
 8000744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000748:	ea94 0f0c 	teqne	r4, ip
 800074c:	ea95 0f0c 	teqne	r5, ip
 8000750:	f000 f8de 	bleq	8000910 <__aeabi_dmul+0x1dc>
 8000754:	442c      	add	r4, r5
 8000756:	ea81 0603 	eor.w	r6, r1, r3
 800075a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800075e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000762:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000766:	bf18      	it	ne
 8000768:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000774:	d038      	beq.n	80007e8 <__aeabi_dmul+0xb4>
 8000776:	fba0 ce02 	umull	ip, lr, r0, r2
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000782:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000786:	fbe0 e503 	umlal	lr, r5, r0, r3
 800078a:	f04f 0600 	mov.w	r6, #0
 800078e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000792:	f09c 0f00 	teq	ip, #0
 8000796:	bf18      	it	ne
 8000798:	f04e 0e01 	orrne.w	lr, lr, #1
 800079c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a8:	d204      	bcs.n	80007b4 <__aeabi_dmul+0x80>
 80007aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ae:	416d      	adcs	r5, r5
 80007b0:	eb46 0606 	adc.w	r6, r6, r6
 80007b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007cc:	bf88      	it	hi
 80007ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007d2:	d81e      	bhi.n	8000812 <__aeabi_dmul+0xde>
 80007d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d8:	bf08      	it	eq
 80007da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007de:	f150 0000 	adcs.w	r0, r0, #0
 80007e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007ec:	ea46 0101 	orr.w	r1, r6, r1
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007fc:	bfc2      	ittt	gt
 80007fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000806:	bd70      	popgt	{r4, r5, r6, pc}
 8000808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800080c:	f04f 0e00 	mov.w	lr, #0
 8000810:	3c01      	subs	r4, #1
 8000812:	f300 80ab 	bgt.w	800096c <__aeabi_dmul+0x238>
 8000816:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800081a:	bfde      	ittt	le
 800081c:	2000      	movle	r0, #0
 800081e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000822:	bd70      	pople	{r4, r5, r6, pc}
 8000824:	f1c4 0400 	rsb	r4, r4, #0
 8000828:	3c20      	subs	r4, #32
 800082a:	da35      	bge.n	8000898 <__aeabi_dmul+0x164>
 800082c:	340c      	adds	r4, #12
 800082e:	dc1b      	bgt.n	8000868 <__aeabi_dmul+0x134>
 8000830:	f104 0414 	add.w	r4, r4, #20
 8000834:	f1c4 0520 	rsb	r5, r4, #32
 8000838:	fa00 f305 	lsl.w	r3, r0, r5
 800083c:	fa20 f004 	lsr.w	r0, r0, r4
 8000840:	fa01 f205 	lsl.w	r2, r1, r5
 8000844:	ea40 0002 	orr.w	r0, r0, r2
 8000848:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800084c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000854:	fa21 f604 	lsr.w	r6, r1, r4
 8000858:	eb42 0106 	adc.w	r1, r2, r6
 800085c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000860:	bf08      	it	eq
 8000862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f1c4 040c 	rsb	r4, r4, #12
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f304 	lsl.w	r3, r0, r4
 8000874:	fa20 f005 	lsr.w	r0, r0, r5
 8000878:	fa01 f204 	lsl.w	r2, r1, r4
 800087c:	ea40 0002 	orr.w	r0, r0, r2
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000888:	f141 0100 	adc.w	r1, r1, #0
 800088c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000890:	bf08      	it	eq
 8000892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f1c4 0520 	rsb	r5, r4, #32
 800089c:	fa00 f205 	lsl.w	r2, r0, r5
 80008a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80008a4:	fa20 f304 	lsr.w	r3, r0, r4
 80008a8:	fa01 f205 	lsl.w	r2, r1, r5
 80008ac:	ea43 0302 	orr.w	r3, r3, r2
 80008b0:	fa21 f004 	lsr.w	r0, r1, r4
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	fa21 f204 	lsr.w	r2, r1, r4
 80008bc:	ea20 0002 	bic.w	r0, r0, r2
 80008c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c8:	bf08      	it	eq
 80008ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f094 0f00 	teq	r4, #0
 80008d4:	d10f      	bne.n	80008f6 <__aeabi_dmul+0x1c2>
 80008d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008da:	0040      	lsls	r0, r0, #1
 80008dc:	eb41 0101 	adc.w	r1, r1, r1
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf08      	it	eq
 80008e6:	3c01      	subeq	r4, #1
 80008e8:	d0f7      	beq.n	80008da <__aeabi_dmul+0x1a6>
 80008ea:	ea41 0106 	orr.w	r1, r1, r6
 80008ee:	f095 0f00 	teq	r5, #0
 80008f2:	bf18      	it	ne
 80008f4:	4770      	bxne	lr
 80008f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	eb43 0303 	adc.w	r3, r3, r3
 8000900:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000904:	bf08      	it	eq
 8000906:	3d01      	subeq	r5, #1
 8000908:	d0f7      	beq.n	80008fa <__aeabi_dmul+0x1c6>
 800090a:	ea43 0306 	orr.w	r3, r3, r6
 800090e:	4770      	bx	lr
 8000910:	ea94 0f0c 	teq	r4, ip
 8000914:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000918:	bf18      	it	ne
 800091a:	ea95 0f0c 	teqne	r5, ip
 800091e:	d00c      	beq.n	800093a <__aeabi_dmul+0x206>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	d1d1      	bne.n	80008d0 <__aeabi_dmul+0x19c>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093e:	bf06      	itte	eq
 8000940:	4610      	moveq	r0, r2
 8000942:	4619      	moveq	r1, r3
 8000944:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000948:	d019      	beq.n	800097e <__aeabi_dmul+0x24a>
 800094a:	ea94 0f0c 	teq	r4, ip
 800094e:	d102      	bne.n	8000956 <__aeabi_dmul+0x222>
 8000950:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000954:	d113      	bne.n	800097e <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	d105      	bne.n	8000968 <__aeabi_dmul+0x234>
 800095c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000960:	bf1c      	itt	ne
 8000962:	4610      	movne	r0, r2
 8000964:	4619      	movne	r1, r3
 8000966:	d10a      	bne.n	800097e <__aeabi_dmul+0x24a>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000970:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000974:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000978:	f04f 0000 	mov.w	r0, #0
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000982:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000986:	bd70      	pop	{r4, r5, r6, pc}

08000988 <__aeabi_ddiv>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000992:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000996:	bf1d      	ittte	ne
 8000998:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800099c:	ea94 0f0c 	teqne	r4, ip
 80009a0:	ea95 0f0c 	teqne	r5, ip
 80009a4:	f000 f8a7 	bleq	8000af6 <__aeabi_ddiv+0x16e>
 80009a8:	eba4 0405 	sub.w	r4, r4, r5
 80009ac:	ea81 0e03 	eor.w	lr, r1, r3
 80009b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b8:	f000 8088 	beq.w	8000acc <__aeabi_ddiv+0x144>
 80009bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009e0:	429d      	cmp	r5, r3
 80009e2:	bf08      	it	eq
 80009e4:	4296      	cmpeq	r6, r2
 80009e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ee:	d202      	bcs.n	80009f6 <__aeabi_ddiv+0x6e>
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	1ab6      	subs	r6, r6, r2
 80009f8:	eb65 0503 	sbc.w	r5, r5, r3
 80009fc:	085b      	lsrs	r3, r3, #1
 80009fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a22:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2a:	bf22      	ittt	cs
 8000a2c:	1ab6      	subcs	r6, r6, r2
 8000a2e:	4675      	movcs	r5, lr
 8000a30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a42:	bf22      	ittt	cs
 8000a44:	1ab6      	subcs	r6, r6, r2
 8000a46:	4675      	movcs	r5, lr
 8000a48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a5a:	bf22      	ittt	cs
 8000a5c:	1ab6      	subcs	r6, r6, r2
 8000a5e:	4675      	movcs	r5, lr
 8000a60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a64:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a68:	d018      	beq.n	8000a9c <__aeabi_ddiv+0x114>
 8000a6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a86:	d1c0      	bne.n	8000a0a <__aeabi_ddiv+0x82>
 8000a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a8c:	d10b      	bne.n	8000aa6 <__aeabi_ddiv+0x11e>
 8000a8e:	ea41 0100 	orr.w	r1, r1, r0
 8000a92:	f04f 0000 	mov.w	r0, #0
 8000a96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a9a:	e7b6      	b.n	8000a0a <__aeabi_ddiv+0x82>
 8000a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000aa0:	bf04      	itt	eq
 8000aa2:	4301      	orreq	r1, r0
 8000aa4:	2000      	moveq	r0, #0
 8000aa6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aaa:	bf88      	it	hi
 8000aac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ab0:	f63f aeaf 	bhi.w	8000812 <__aeabi_dmul+0xde>
 8000ab4:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab8:	bf04      	itt	eq
 8000aba:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ac2:	f150 0000 	adcs.w	r0, r0, #0
 8000ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ad0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ad4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad8:	bfc2      	ittt	gt
 8000ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae8:	f04f 0e00 	mov.w	lr, #0
 8000aec:	3c01      	subs	r4, #1
 8000aee:	e690      	b.n	8000812 <__aeabi_dmul+0xde>
 8000af0:	ea45 0e06 	orr.w	lr, r5, r6
 8000af4:	e68d      	b.n	8000812 <__aeabi_dmul+0xde>
 8000af6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000afa:	ea94 0f0c 	teq	r4, ip
 8000afe:	bf08      	it	eq
 8000b00:	ea95 0f0c 	teqeq	r5, ip
 8000b04:	f43f af3b 	beq.w	800097e <__aeabi_dmul+0x24a>
 8000b08:	ea94 0f0c 	teq	r4, ip
 8000b0c:	d10a      	bne.n	8000b24 <__aeabi_ddiv+0x19c>
 8000b0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b12:	f47f af34 	bne.w	800097e <__aeabi_dmul+0x24a>
 8000b16:	ea95 0f0c 	teq	r5, ip
 8000b1a:	f47f af25 	bne.w	8000968 <__aeabi_dmul+0x234>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	e72c      	b.n	800097e <__aeabi_dmul+0x24a>
 8000b24:	ea95 0f0c 	teq	r5, ip
 8000b28:	d106      	bne.n	8000b38 <__aeabi_ddiv+0x1b0>
 8000b2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b2e:	f43f aefd 	beq.w	800092c <__aeabi_dmul+0x1f8>
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	e722      	b.n	800097e <__aeabi_dmul+0x24a>
 8000b38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b3c:	bf18      	it	ne
 8000b3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b42:	f47f aec5 	bne.w	80008d0 <__aeabi_dmul+0x19c>
 8000b46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b4a:	f47f af0d 	bne.w	8000968 <__aeabi_dmul+0x234>
 8000b4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b52:	f47f aeeb 	bne.w	800092c <__aeabi_dmul+0x1f8>
 8000b56:	e712      	b.n	800097e <__aeabi_dmul+0x24a>

08000b58 <__gedf2>:
 8000b58:	f04f 3cff 	mov.w	ip, #4294967295
 8000b5c:	e006      	b.n	8000b6c <__cmpdf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__ledf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	e002      	b.n	8000b6c <__cmpdf2+0x4>
 8000b66:	bf00      	nop

08000b68 <__cmpdf2>:
 8000b68:	f04f 0c01 	mov.w	ip, #1
 8000b6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b7c:	bf18      	it	ne
 8000b7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b82:	d01b      	beq.n	8000bbc <__cmpdf2+0x54>
 8000b84:	b001      	add	sp, #4
 8000b86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b8a:	bf0c      	ite	eq
 8000b8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b90:	ea91 0f03 	teqne	r1, r3
 8000b94:	bf02      	ittt	eq
 8000b96:	ea90 0f02 	teqeq	r0, r2
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	4770      	bxeq	lr
 8000b9e:	f110 0f00 	cmn.w	r0, #0
 8000ba2:	ea91 0f03 	teq	r1, r3
 8000ba6:	bf58      	it	pl
 8000ba8:	4299      	cmppl	r1, r3
 8000baa:	bf08      	it	eq
 8000bac:	4290      	cmpeq	r0, r2
 8000bae:	bf2c      	ite	cs
 8000bb0:	17d8      	asrcs	r0, r3, #31
 8000bb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bb6:	f040 0001 	orr.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__cmpdf2+0x64>
 8000bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bca:	d107      	bne.n	8000bdc <__cmpdf2+0x74>
 8000bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d1d6      	bne.n	8000b84 <__cmpdf2+0x1c>
 8000bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bda:	d0d3      	beq.n	8000b84 <__cmpdf2+0x1c>
 8000bdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_cdrcmple>:
 8000be4:	4684      	mov	ip, r0
 8000be6:	4610      	mov	r0, r2
 8000be8:	4662      	mov	r2, ip
 8000bea:	468c      	mov	ip, r1
 8000bec:	4619      	mov	r1, r3
 8000bee:	4663      	mov	r3, ip
 8000bf0:	e000      	b.n	8000bf4 <__aeabi_cdcmpeq>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_cdcmpeq>:
 8000bf4:	b501      	push	{r0, lr}
 8000bf6:	f7ff ffb7 	bl	8000b68 <__cmpdf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd01      	pop	{r0, pc}

08000c04 <__aeabi_dcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cdcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cdcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cdcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_dcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffce 	bl	8000be4 <__aeabi_cdrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc4 	bl	8000be4 <__aeabi_cdrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmpun>:
 8000c68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c70:	d102      	bne.n	8000c78 <__aeabi_dcmpun+0x10>
 8000c72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c76:	d10a      	bne.n	8000c8e <__aeabi_dcmpun+0x26>
 8000c78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c80:	d102      	bne.n	8000c88 <__aeabi_dcmpun+0x20>
 8000c82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c86:	d102      	bne.n	8000c8e <__aeabi_dcmpun+0x26>
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	f04f 0001 	mov.w	r0, #1
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_d2iz>:
 8000c94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c9c:	d215      	bcs.n	8000cca <__aeabi_d2iz+0x36>
 8000c9e:	d511      	bpl.n	8000cc4 <__aeabi_d2iz+0x30>
 8000ca0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca8:	d912      	bls.n	8000cd0 <__aeabi_d2iz+0x3c>
 8000caa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	bf18      	it	ne
 8000cc0:	4240      	negne	r0, r0
 8000cc2:	4770      	bx	lr
 8000cc4:	f04f 0000 	mov.w	r0, #0
 8000cc8:	4770      	bx	lr
 8000cca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cce:	d105      	bne.n	8000cdc <__aeabi_d2iz+0x48>
 8000cd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	bf08      	it	eq
 8000cd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cda:	4770      	bx	lr
 8000cdc:	f04f 0000 	mov.w	r0, #0
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_d2uiz>:
 8000ce4:	004a      	lsls	r2, r1, #1
 8000ce6:	d211      	bcs.n	8000d0c <__aeabi_d2uiz+0x28>
 8000ce8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cec:	d211      	bcs.n	8000d12 <__aeabi_d2uiz+0x2e>
 8000cee:	d50d      	bpl.n	8000d0c <__aeabi_d2uiz+0x28>
 8000cf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf8:	d40e      	bmi.n	8000d18 <__aeabi_d2uiz+0x34>
 8000cfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d06:	fa23 f002 	lsr.w	r0, r3, r2
 8000d0a:	4770      	bx	lr
 8000d0c:	f04f 0000 	mov.w	r0, #0
 8000d10:	4770      	bx	lr
 8000d12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d16:	d102      	bne.n	8000d1e <__aeabi_d2uiz+0x3a>
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_d2f>:
 8000d24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d2c:	bf24      	itt	cs
 8000d2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d36:	d90d      	bls.n	8000d54 <__aeabi_d2f+0x30>
 8000d38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d58:	d121      	bne.n	8000d9e <__aeabi_d2f+0x7a>
 8000d5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d5e:	bfbc      	itt	lt
 8000d60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d64:	4770      	bxlt	lr
 8000d66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d6e:	f1c2 0218 	rsb	r2, r2, #24
 8000d72:	f1c2 0c20 	rsb	ip, r2, #32
 8000d76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000d7e:	bf18      	it	ne
 8000d80:	f040 0001 	orrne.w	r0, r0, #1
 8000d84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d90:	ea40 000c 	orr.w	r0, r0, ip
 8000d94:	fa23 f302 	lsr.w	r3, r3, r2
 8000d98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d9c:	e7cc      	b.n	8000d38 <__aeabi_d2f+0x14>
 8000d9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000da2:	d107      	bne.n	8000db4 <__aeabi_d2f+0x90>
 8000da4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da8:	bf1e      	ittt	ne
 8000daa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000dae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000db2:	4770      	bxne	lr
 8000db4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_frsub>:
 8000dc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	e002      	b.n	8000dd0 <__addsf3>
 8000dca:	bf00      	nop

08000dcc <__aeabi_fsub>:
 8000dcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dd0 <__addsf3>:
 8000dd0:	0042      	lsls	r2, r0, #1
 8000dd2:	bf1f      	itttt	ne
 8000dd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd8:	ea92 0f03 	teqne	r2, r3
 8000ddc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000de0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de4:	d06a      	beq.n	8000ebc <__addsf3+0xec>
 8000de6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dee:	bfc1      	itttt	gt
 8000df0:	18d2      	addgt	r2, r2, r3
 8000df2:	4041      	eorgt	r1, r0
 8000df4:	4048      	eorgt	r0, r1
 8000df6:	4041      	eorgt	r1, r0
 8000df8:	bfb8      	it	lt
 8000dfa:	425b      	neglt	r3, r3
 8000dfc:	2b19      	cmp	r3, #25
 8000dfe:	bf88      	it	hi
 8000e00:	4770      	bxhi	lr
 8000e02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e0e:	bf18      	it	ne
 8000e10:	4240      	negne	r0, r0
 8000e12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e1e:	bf18      	it	ne
 8000e20:	4249      	negne	r1, r1
 8000e22:	ea92 0f03 	teq	r2, r3
 8000e26:	d03f      	beq.n	8000ea8 <__addsf3+0xd8>
 8000e28:	f1a2 0201 	sub.w	r2, r2, #1
 8000e2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000e30:	eb10 000c 	adds.w	r0, r0, ip
 8000e34:	f1c3 0320 	rsb	r3, r3, #32
 8000e38:	fa01 f103 	lsl.w	r1, r1, r3
 8000e3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__addsf3+0x78>
 8000e42:	4249      	negs	r1, r1
 8000e44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e4c:	d313      	bcc.n	8000e76 <__addsf3+0xa6>
 8000e4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e52:	d306      	bcc.n	8000e62 <__addsf3+0x92>
 8000e54:	0840      	lsrs	r0, r0, #1
 8000e56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e5a:	f102 0201 	add.w	r2, r2, #1
 8000e5e:	2afe      	cmp	r2, #254	; 0xfe
 8000e60:	d251      	bcs.n	8000f06 <__addsf3+0x136>
 8000e62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6a:	bf08      	it	eq
 8000e6c:	f020 0001 	biceq.w	r0, r0, #1
 8000e70:	ea40 0003 	orr.w	r0, r0, r3
 8000e74:	4770      	bx	lr
 8000e76:	0049      	lsls	r1, r1, #1
 8000e78:	eb40 0000 	adc.w	r0, r0, r0
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	bf28      	it	cs
 8000e80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e84:	d2ed      	bcs.n	8000e62 <__addsf3+0x92>
 8000e86:	fab0 fc80 	clz	ip, r0
 8000e8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000e92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e96:	bfaa      	itet	ge
 8000e98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e9c:	4252      	neglt	r2, r2
 8000e9e:	4318      	orrge	r0, r3
 8000ea0:	bfbc      	itt	lt
 8000ea2:	40d0      	lsrlt	r0, r2
 8000ea4:	4318      	orrlt	r0, r3
 8000ea6:	4770      	bx	lr
 8000ea8:	f092 0f00 	teq	r2, #0
 8000eac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000eb0:	bf06      	itte	eq
 8000eb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eb6:	3201      	addeq	r2, #1
 8000eb8:	3b01      	subne	r3, #1
 8000eba:	e7b5      	b.n	8000e28 <__addsf3+0x58>
 8000ebc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	bf18      	it	ne
 8000ec6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eca:	d021      	beq.n	8000f10 <__addsf3+0x140>
 8000ecc:	ea92 0f03 	teq	r2, r3
 8000ed0:	d004      	beq.n	8000edc <__addsf3+0x10c>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	bf08      	it	eq
 8000ed8:	4608      	moveq	r0, r1
 8000eda:	4770      	bx	lr
 8000edc:	ea90 0f01 	teq	r0, r1
 8000ee0:	bf1c      	itt	ne
 8000ee2:	2000      	movne	r0, #0
 8000ee4:	4770      	bxne	lr
 8000ee6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000eea:	d104      	bne.n	8000ef6 <__addsf3+0x126>
 8000eec:	0040      	lsls	r0, r0, #1
 8000eee:	bf28      	it	cs
 8000ef0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ef4:	4770      	bx	lr
 8000ef6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000efa:	bf3c      	itt	cc
 8000efc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bxcc	lr
 8000f02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f14:	bf16      	itet	ne
 8000f16:	4608      	movne	r0, r1
 8000f18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f1c:	4601      	movne	r1, r0
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	bf06      	itte	eq
 8000f22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f26:	ea90 0f01 	teqeq	r0, r1
 8000f2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_ui2f>:
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	e004      	b.n	8000f40 <__aeabi_i2f+0x8>
 8000f36:	bf00      	nop

08000f38 <__aeabi_i2f>:
 8000f38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f3c:	bf48      	it	mi
 8000f3e:	4240      	negmi	r0, r0
 8000f40:	ea5f 0c00 	movs.w	ip, r0
 8000f44:	bf08      	it	eq
 8000f46:	4770      	bxeq	lr
 8000f48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	e01c      	b.n	8000f8e <__aeabi_l2f+0x2a>

08000f54 <__aeabi_ul2f>:
 8000f54:	ea50 0201 	orrs.w	r2, r0, r1
 8000f58:	bf08      	it	eq
 8000f5a:	4770      	bxeq	lr
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e00a      	b.n	8000f78 <__aeabi_l2f+0x14>
 8000f62:	bf00      	nop

08000f64 <__aeabi_l2f>:
 8000f64:	ea50 0201 	orrs.w	r2, r0, r1
 8000f68:	bf08      	it	eq
 8000f6a:	4770      	bxeq	lr
 8000f6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	d502      	bpl.n	8000f78 <__aeabi_l2f+0x14>
 8000f72:	4240      	negs	r0, r0
 8000f74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f78:	ea5f 0c01 	movs.w	ip, r1
 8000f7c:	bf02      	ittt	eq
 8000f7e:	4684      	moveq	ip, r0
 8000f80:	4601      	moveq	r1, r0
 8000f82:	2000      	moveq	r0, #0
 8000f84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f88:	bf08      	it	eq
 8000f8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f92:	fabc f28c 	clz	r2, ip
 8000f96:	3a08      	subs	r2, #8
 8000f98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f9c:	db10      	blt.n	8000fc0 <__aeabi_l2f+0x5c>
 8000f9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa8:	f1c2 0220 	rsb	r2, r2, #32
 8000fac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb4:	eb43 0002 	adc.w	r0, r3, r2
 8000fb8:	bf08      	it	eq
 8000fba:	f020 0001 	biceq.w	r0, r0, #1
 8000fbe:	4770      	bx	lr
 8000fc0:	f102 0220 	add.w	r2, r2, #32
 8000fc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc8:	f1c2 0220 	rsb	r2, r2, #32
 8000fcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000fd4:	eb43 0002 	adc.w	r0, r3, r2
 8000fd8:	bf08      	it	eq
 8000fda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fde:	4770      	bx	lr

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_d2lz>:
 8001118:	b538      	push	{r3, r4, r5, lr}
 800111a:	4605      	mov	r5, r0
 800111c:	460c      	mov	r4, r1
 800111e:	2200      	movs	r2, #0
 8001120:	2300      	movs	r3, #0
 8001122:	4628      	mov	r0, r5
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff fd77 	bl	8000c18 <__aeabi_dcmplt>
 800112a:	b928      	cbnz	r0, 8001138 <__aeabi_d2lz+0x20>
 800112c:	4628      	mov	r0, r5
 800112e:	4621      	mov	r1, r4
 8001130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001134:	f000 b80a 	b.w	800114c <__aeabi_d2ulz>
 8001138:	4628      	mov	r0, r5
 800113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800113e:	f000 f805 	bl	800114c <__aeabi_d2ulz>
 8001142:	4240      	negs	r0, r0
 8001144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001148:	bd38      	pop	{r3, r4, r5, pc}
 800114a:	bf00      	nop

0800114c <__aeabi_d2ulz>:
 800114c:	b5d0      	push	{r4, r6, r7, lr}
 800114e:	2200      	movs	r2, #0
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <__aeabi_d2ulz+0x34>)
 8001152:	4606      	mov	r6, r0
 8001154:	460f      	mov	r7, r1
 8001156:	f7ff faed 	bl	8000734 <__aeabi_dmul>
 800115a:	f7ff fdc3 	bl	8000ce4 <__aeabi_d2uiz>
 800115e:	4604      	mov	r4, r0
 8001160:	f7ff fa6e 	bl	8000640 <__aeabi_ui2d>
 8001164:	2200      	movs	r2, #0
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <__aeabi_d2ulz+0x38>)
 8001168:	f7ff fae4 	bl	8000734 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4630      	mov	r0, r6
 8001172:	4639      	mov	r1, r7
 8001174:	f7ff f926 	bl	80003c4 <__aeabi_dsub>
 8001178:	f7ff fdb4 	bl	8000ce4 <__aeabi_d2uiz>
 800117c:	4621      	mov	r1, r4
 800117e:	bdd0      	pop	{r4, r6, r7, pc}
 8001180:	3df00000 	.word	0x3df00000
 8001184:	41f00000 	.word	0x41f00000

08001188 <InitMCC>:
extern int speedD;
extern int speedG;


void InitMCC()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <InitMCC+0x2c>)
 8001190:	f003 fd2e 	bl	8004bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001194:	2104      	movs	r1, #4
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <InitMCC+0x2c>)
 8001198:	f003 fd2a 	bl	8004bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800119c:	2108      	movs	r1, #8
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <InitMCC+0x2c>)
 80011a0:	f003 fd26 	bl	8004bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011a4:	210c      	movs	r1, #12
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <InitMCC+0x2c>)
 80011a8:	f003 fd22 	bl	8004bf0 <HAL_TIM_PWM_Start>
	Stop();
 80011ac:	f000 f888 	bl	80012c0 <Stop>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200008a4 	.word	0x200008a4

080011b8 <Avancer>:

void Avancer(int vitesse)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2bc8      	cmp	r3, #200	; 0xc8
 80011c4:	dc02      	bgt.n	80011cc <Avancer+0x14>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da01      	bge.n	80011d0 <Avancer+0x18>
 80011cc:	f000 fea6 	bl	8001f1c <Error_Handler>
	TIM1->CCR1=vitesse;
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <Avancer+0x38>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <Avancer+0x38>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <Avancer+0x38>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 80011e2:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <Avancer+0x38>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40012c00 	.word	0x40012c00

080011f4 <AvancerPI>:

void AvancerPI(int moteur, int vitesse)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2bc8      	cmp	r3, #200	; 0xc8
 8001202:	dc02      	bgt.n	800120a <AvancerPI+0x16>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	da01      	bge.n	800120e <AvancerPI+0x1a>
 800120a:	f000 fe87 	bl	8001f1c <Error_Handler>
	if (moteur)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <AvancerPI+0x2e>
	{
		TIM1->CCR1=0;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <AvancerPI+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=vitesse;
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <AvancerPI+0x44>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM1->CCR3=0;
		TIM1->CCR4=vitesse;
	}
}
 8001220:	e005      	b.n	800122e <AvancerPI+0x3a>
		TIM1->CCR3=0;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <AvancerPI+0x44>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <AvancerPI+0x44>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40012c00 	.word	0x40012c00

0800123c <Reculer>:

void Reculer(int vitesse)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2bc8      	cmp	r3, #200	; 0xc8
 8001248:	dc02      	bgt.n	8001250 <Reculer+0x14>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da01      	bge.n	8001254 <Reculer+0x18>
 8001250:	f000 fe64 	bl	8001f1c <Error_Handler>
	TIM1->CCR1=0;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <Reculer+0x38>)
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <Reculer+0x38>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <Reculer+0x38>)
 8001262:	2200      	movs	r2, #0
 8001264:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 8001266:	4a03      	ldr	r2, [pc, #12]	; (8001274 <Reculer+0x38>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40012c00 	.word	0x40012c00

08001278 <ReculerPI>:

void ReculerPI(int moteur, int vitesse)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2bc8      	cmp	r3, #200	; 0xc8
 8001286:	dc02      	bgt.n	800128e <ReculerPI+0x16>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da01      	bge.n	8001292 <ReculerPI+0x1a>
 800128e:	f000 fe45 	bl	8001f1c <Error_Handler>
	if (moteur)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <ReculerPI+0x2e>
	{
		TIM1->CCR1=vitesse;
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <ReculerPI+0x44>)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <ReculerPI+0x44>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM1->CCR3=vitesse;
		TIM1->CCR4=0;
	}
}
 80012a4:	e005      	b.n	80012b2 <ReculerPI+0x3a>
		TIM1->CCR3=vitesse;
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <ReculerPI+0x44>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4=0;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <ReculerPI+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40012c00 	.word	0x40012c00

080012c0 <Stop>:

void Stop(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <Stop+0x24>)
 80012c6:	22c8      	movs	r2, #200	; 0xc8
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <Stop+0x24>)
 80012cc:	22c8      	movs	r2, #200	; 0xc8
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <Stop+0x24>)
 80012d2:	22c8      	movs	r2, #200	; 0xc8
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80012d6:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <Stop+0x24>)
 80012d8:	22c8      	movs	r2, #200	; 0xc8
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40012c00 	.word	0x40012c00

080012e8 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2bc8      	cmp	r3, #200	; 0xc8
 80012f6:	dc02      	bgt.n	80012fe <Tourner+0x16>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da01      	bge.n	8001302 <Tourner+0x1a>
 80012fe:	f000 fe0d 	bl	8001f1c <Error_Handler>
	if(sens)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <Tourner+0x68>)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <Tourner+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <Tourner+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 800131a:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <Tourner+0x68>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8001320:	e011      	b.n	8001346 <Tourner+0x5e>
	else if(!sens)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10c      	bne.n	8001342 <Tourner+0x5a>
		    TIM1->CCR1=0;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <Tourner+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <Tourner+0x68>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <Tourner+0x68>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <Tourner+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001340:	e001      	b.n	8001346 <Tourner+0x5e>
	else Error_Handler();
 8001342:	f000 fdeb 	bl	8001f1c <Error_Handler>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012c00 	.word	0x40012c00

08001354 <ReadEncodeur>:

void ReadEncodeur()
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	tickD = Mid_Period_TIM2 - (TIM2->CNT);
 8001358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8001362:	337f      	adds	r3, #127	; 0x7f
 8001364:	461a      	mov	r2, r3
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <ReadEncodeur+0x40>)
 8001368:	601a      	str	r2, [r3, #0]
	TIM2->CNT = Mid_Period_TIM2;
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
	tickG = (TIM5->CNT) - Mid_Period_TIM5;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <ReadEncodeur+0x44>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800137c:	3b7f      	subs	r3, #127	; 0x7f
 800137e:	461a      	mov	r2, r3
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <ReadEncodeur+0x48>)
 8001382:	601a      	str	r2, [r3, #0]
	TIM5->CNT = Mid_Period_TIM5;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <ReadEncodeur+0x44>)
 8001386:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200007cc 	.word	0x200007cc
 8001398:	40000c00 	.word	0x40000c00
 800139c:	200007d4 	.word	0x200007d4

080013a0 <PIController_Init>:
 * @param struct pi
 *
 * @return None
 */
void PIController_Init(PIController *pi)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

	pi->integrator = 0.0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
	pi->prevError  = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]

	pi->out = 0.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

	pi->Kp = 1.0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c6:	601a      	str	r2, [r3, #0]
	pi->Ki = 0.5;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013ce:	605a      	str	r2, [r3, #4]

	pi->limMin_output = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
	pi->limMax_output = MAX_ARR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <PIController_Init+0x74>)
 80013dc:	60da      	str	r2, [r3, #12]

		/* Integrator limits */
	pi->limMin_integrator = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
	pi->limMax_integrator = MAX_ARR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <PIController_Init+0x74>)
 80013ea:	615a      	str	r2, [r3, #20]

		/* Sample time (in seconds) */
	pi->T = 0.1; // 10Hz frequence Tim1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <PIController_Init+0x78>)
 80013f0:	619a      	str	r2, [r3, #24]

		/* Controller "memory" */
	pi->integrator = 0.0;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
	pi->prevError = 0.0;		/* Required for integrator */
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	621a      	str	r2, [r3, #32]

		/* Controller output */
	pi->out = 0.0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	43480000 	.word	0x43480000
 8001418:	3dcccccd 	.word	0x3dcccccd

0800141c <PIController_Update>:
 * @param measurement
 *
 * @return None
 */
float PIController_Update(PIController *pi, float consigne, float measurement)
{
 800141c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]

    float error = consigne - measurement;
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f7ff fccd 	bl	8000dcc <__aeabi_fsub>
 8001432:	4603      	mov	r3, r0
 8001434:	617b      	str	r3, [r7, #20]

    float proportional = pi->Kp * error;	//Proportional
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	6978      	ldr	r0, [r7, #20]
 800143e:	f7fe ff09 	bl	8000254 <__aeabi_fmul>
 8001442:	4603      	mov	r3, r0
 8001444:	613b      	str	r3, [r7, #16]

    pi->integrator = pi->integrator + 0.5 * pi->Ki * pi->T * (error + pi->prevError);	//Integrator
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f91a 	bl	8000684 <__aeabi_f2d>
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f913 	bl	8000684 <__aeabi_f2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <PIController_Update+0x154>)
 8001464:	f7ff f966 	bl	8000734 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4690      	mov	r8, r2
 800146e:	4699      	mov	r9, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f905 	bl	8000684 <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4640      	mov	r0, r8
 8001480:	4649      	mov	r1, r9
 8001482:	f7ff f957 	bl	8000734 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4690      	mov	r8, r2
 800148c:	4699      	mov	r9, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc9b 	bl	8000dd0 <__addsf3>
 800149a:	4603      	mov	r3, r0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f8f1 	bl	8000684 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4640      	mov	r0, r8
 80014a8:	4649      	mov	r1, r9
 80014aa:	f7ff f943 	bl	8000734 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7fe ff87 	bl	80003c8 <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fc2f 	bl	8000d24 <__aeabi_d2f>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	61da      	str	r2, [r3, #28]

    if (pi->integrator > pi->limMax_integrator) pi->integrator = pi->limMax_integrator; //anti-wind-up par ecretage
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fdee 	bl	80010b8 <__aeabi_fcmpgt>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <PIController_Update+0xd0>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	61da      	str	r2, [r3, #28]
 80014ea:	e00e      	b.n	800150a <PIController_Update+0xee>
    else if (pi->integrator < pi->limMin_integrator) pi->integrator = pi->limMin_integrator;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f7ff fdc0 	bl	800107c <__aeabi_fcmplt>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <PIController_Update+0xee>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	61da      	str	r2, [r3, #28]


    pi->out = proportional + pi->integrator;	//Output
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	6939      	ldr	r1, [r7, #16]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc5d 	bl	8000dd0 <__addsf3>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pi->out > pi->limMax_output) pi->out = pi->limMax_output;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff fdc5 	bl	80010b8 <__aeabi_fcmpgt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <PIController_Update+0x122>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
 800153c:	e00e      	b.n	800155c <PIController_Update+0x140>
    else if (pi->out < pi->limMin_output) pi->out = pi->limMin_output;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f7ff fd97 	bl	800107c <__aeabi_fcmplt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <PIController_Update+0x140>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

    pi->prevError       = error;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	621a      	str	r2, [r3, #32]

    return pi->out;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001570:	3fe00000 	.word	0x3fe00000

08001574 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f640 0298 	movw	r2, #2200	; 0x898
 8001582:	4293      	cmp	r3, r2
 8001584:	dc08      	bgt.n	8001598 <ControlServo+0x24>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800158c:	db04      	blt.n	8001598 <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <ControlServo+0x30>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <ControlServo+0x26>
	}
	else
	{
		return 1;
 8001598:	2301      	movs	r3, #1
	}
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_ADC1_Init+0x74>)
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <MX_ADC1_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_ADC1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_ADC1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_ADC1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_ADC1_Init+0x74>)
 80015d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_ADC1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_ADC1_Init+0x74>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_ADC1_Init+0x74>)
 80015e6:	f001 fd93 	bl	8003110 <HAL_ADC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f000 fc94 	bl	8001f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015f4:	2304      	movs	r3, #4
 80015f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_ADC1_Init+0x74>)
 8001606:	f001 fe6d 	bl	80032e4 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001610:	f000 fc84 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200006f4 	.word	0x200006f4
 8001620:	40012400 	.word	0x40012400

08001624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_ADC_MspInit+0x98>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d137      	bne.n	80016b4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_ADC_MspInit+0x9c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 800168c:	23f0      	movs	r3, #240	; 0xf0
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4619      	mov	r1, r3
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <HAL_ADC_MspInit+0xa0>)
 800169c:	f002 f9ac 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 80016a0:	2303      	movs	r3, #3
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a4:	2303      	movs	r3, #3
 80016a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <HAL_ADC_MspInit+0xa4>)
 80016b0:	f002 f9a2 	bl	80039f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40012400 	.word	0x40012400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40010c00 	.word	0x40010c00

080016cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_GPIO_Init+0xe8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <MX_GPIO_Init+0xe8>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <MX_GPIO_Init+0xe8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <MX_GPIO_Init+0xe8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <MX_GPIO_Init+0xe8>)
 80016fe:	f043 0320 	orr.w	r3, r3, #32
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <MX_GPIO_Init+0xe8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_GPIO_Init+0xe8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <MX_GPIO_Init+0xe8>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_GPIO_Init+0xe8>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_GPIO_Init+0xe8>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <MX_GPIO_Init+0xe8>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_GPIO_Init+0xe8>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001740:	2200      	movs	r2, #0
 8001742:	f24f 0120 	movw	r1, #61472	; 0xf020
 8001746:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_GPIO_Init+0xec>)
 8001748:	f002 faea 	bl	8003d20 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_GPIO_Init+0xf0>)
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4619      	mov	r1, r3
 8001760:	4817      	ldr	r0, [pc, #92]	; (80017c0 <MX_GPIO_Init+0xf4>)
 8001762:	f002 f949 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001766:	f24f 0320 	movw	r3, #61472	; 0xf020
 800176a:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2302      	movs	r3, #2
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4619      	mov	r1, r3
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <MX_GPIO_Init+0xec>)
 8001780:	f002 f93a 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8001784:	2310      	movs	r3, #16
 8001786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_GPIO_Init+0xf0>)
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4808      	ldr	r0, [pc, #32]	; (80017b8 <MX_GPIO_Init+0xec>)
 8001798:	f002 f92e 	bl	80039f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2105      	movs	r1, #5
 80017a0:	2028      	movs	r0, #40	; 0x28
 80017a2:	f001 ffb0 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017a6:	2028      	movs	r0, #40	; 0x28
 80017a8:	f001 ffc9 	bl	800373e <HAL_NVIC_EnableIRQ>

}
 80017ac:	bf00      	nop
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	10110000 	.word	0x10110000
 80017c0:	40011000 	.word	0x40011000

080017c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_I2C1_Init+0x50>)
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <MX_I2C1_Init+0x54>)
 80017cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_I2C1_Init+0x50>)
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <MX_I2C1_Init+0x58>)
 80017d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_I2C1_Init+0x50>)
 80017e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_I2C1_Init+0x50>)
 8001802:	f002 fad7 	bl	8003db4 <HAL_I2C_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800180c:	f000 fb86 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000724 	.word	0x20000724
 8001818:	40005400 	.word	0x40005400
 800181c:	000186a0 	.word	0x000186a0

08001820 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_I2C2_Init+0x50>)
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <MX_I2C2_Init+0x54>)
 8001828:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_I2C2_Init+0x50>)
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <MX_I2C2_Init+0x58>)
 800182e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_I2C2_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_I2C2_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_I2C2_Init+0x50>)
 800183e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001842:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_I2C2_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_I2C2_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_I2C2_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_I2C2_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_I2C2_Init+0x50>)
 800185e:	f002 faa9 	bl	8003db4 <HAL_I2C_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001868:	f000 fb58 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000778 	.word	0x20000778
 8001874:	40005800 	.word	0x40005800
 8001878:	000186a0 	.word	0x000186a0

0800187c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_I2C_MspInit+0xe4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d133      	bne.n	8001904 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 80018b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ba:	2312      	movs	r3, #18
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4827      	ldr	r0, [pc, #156]	; (8001968 <HAL_I2C_MspInit+0xec>)
 80018ca:	f002 f895 	bl	80039f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_I2C_MspInit+0xf0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e4:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_I2C_MspInit+0xf0>)
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001902:	e029      	b.n	8001958 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_I2C_MspInit+0xf4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d124      	bne.n	8001958 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 8001926:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <HAL_I2C_MspInit+0xec>)
 800193c:	f002 f85c 	bl	80039f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001946:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3730      	adds	r7, #48	; 0x30
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40005400 	.word	0x40005400
 8001964:	40021000 	.word	0x40021000
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40010000 	.word	0x40010000
 8001970:	40005800 	.word	0x40005800

08001974 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	switch (i)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	2b03      	cmp	r3, #3
 8001982:	d827      	bhi.n	80019d4 <TurnOffLed+0x60>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <TurnOffLed+0x18>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019ab 	.word	0x080019ab
 8001994:	080019b9 	.word	0x080019b9
 8001998:	080019c7 	.word	0x080019c7
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <TurnOffLed+0x68>)
 80019a4:	f002 f9bc 	bl	8003d20 <HAL_GPIO_WritePin>
		    break;
 80019a8:	e014      	b.n	80019d4 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b0:	480a      	ldr	r0, [pc, #40]	; (80019dc <TurnOffLed+0x68>)
 80019b2:	f002 f9b5 	bl	8003d20 <HAL_GPIO_WritePin>
			break;
 80019b6:	e00d      	b.n	80019d4 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <TurnOffLed+0x68>)
 80019c0:	f002 f9ae 	bl	8003d20 <HAL_GPIO_WritePin>
			break;
 80019c4:	e006      	b.n	80019d4 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <TurnOffLed+0x68>)
 80019ce:	f002 f9a7 	bl	8003d20 <HAL_GPIO_WritePin>
			break;
 80019d2:	bf00      	nop
	}

}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010c00 	.word	0x40010c00

080019e0 <SwitchLed>:



void SwitchLed(int i)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	switch (i)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d823      	bhi.n	8001a38 <SwitchLed+0x58>
 80019f0:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <SwitchLed+0x18>)
 80019f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f6:	bf00      	nop
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a21 	.word	0x08001a21
 8001a04:	08001a2d 	.word	0x08001a2d
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <SwitchLed+0x60>)
 8001a0e:	f002 f99f 	bl	8003d50 <HAL_GPIO_TogglePin>
			break;
 8001a12:	e011      	b.n	8001a38 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <SwitchLed+0x60>)
 8001a1a:	f002 f999 	bl	8003d50 <HAL_GPIO_TogglePin>
			break;
 8001a1e:	e00b      	b.n	8001a38 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <SwitchLed+0x60>)
 8001a26:	f002 f993 	bl	8003d50 <HAL_GPIO_TogglePin>
			break;
 8001a2a:	e005      	b.n	8001a38 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8001a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <SwitchLed+0x60>)
 8001a32:	f002 f98d 	bl	8003d50 <HAL_GPIO_TogglePin>
			break;
 8001a36:	bf00      	nop
	}

}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010c00 	.word	0x40010c00

08001a44 <LedError>:



void LedError()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <LedError+0x38>)
 8001a50:	f002 f966 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <LedError+0x38>)
 8001a5c:	f002 f960 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <LedError+0x38>)
 8001a68:	f002 f95a 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a72:	4802      	ldr	r0, [pc, #8]	; (8001a7c <LedError+0x38>)
 8001a74:	f002 f954 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a84:	f001 fabe 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a88:	f000 f85e 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8c:	f7ff fe1e 	bl	80016cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a90:	f7ff fe98 	bl	80017c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a94:	f7ff fec4 	bl	8001820 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001a98:	f000 feea 	bl	8002870 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a9c:	f001 f994 	bl	8002dc8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001aa0:	f001 f9bc 	bl	8002e1c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001aa4:	f000 fdcc 	bl	8002640 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001aa8:	f000 fe8e 	bl	80027c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001aac:	f000 ff58 	bl	8002960 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001ab0:	f7ff fd7a 	bl	80015a8 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001ab4:	f000 ffde 	bl	8002a74 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001ab8:	f000 ffa6 	bl	8002a08 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001abc:	2201      	movs	r2, #1
 8001abe:	4919      	ldr	r1, [pc, #100]	; (8001b24 <main+0xa4>)
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <main+0xa8>)
 8001ac2:	f004 fabb 	bl	800603c <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f001 fafe 	bl	80030c8 <HAL_Delay>
  shellInit();
 8001acc:	f000 fa2e 	bl	8001f2c <shellInit>

  TurnOffLed(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff ff4f 	bl	8001974 <TurnOffLed>
  TurnOffLed(2);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7ff ff4c 	bl	8001974 <TurnOffLed>
  TurnOffLed(3);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f7ff ff49 	bl	8001974 <TurnOffLed>
  TurnOffLed(4);
 8001ae2:	2004      	movs	r0, #4
 8001ae4:	f7ff ff46 	bl	8001974 <TurnOffLed>

  HAL_TIM_Base_Start_IT(&htim3);
 8001ae8:	4810      	ldr	r0, [pc, #64]	; (8001b2c <main+0xac>)
 8001aea:	f002 ffc9 	bl	8004a80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001aee:	2100      	movs	r1, #0
 8001af0:	480e      	ldr	r0, [pc, #56]	; (8001b2c <main+0xac>)
 8001af2:	f003 f937 	bl	8004d64 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Base_Start_IT(&htim6);
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <main+0xb0>)
 8001af8:	f002 ffc2 	bl	8004a80 <HAL_TIM_Base_Start_IT>
  InitMCC();
 8001afc:	f7ff fb44 	bl	8001188 <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b00:	213c      	movs	r1, #60	; 0x3c
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <main+0xb4>)
 8001b04:	f003 fad0 	bl	80050a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001b08:	213c      	movs	r1, #60	; 0x3c
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <main+0xb8>)
 8001b0c:	f003 facc 	bl	80050a8 <HAL_TIM_Encoder_Start>

  PIController_Init(&MoteurD);
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <main+0xbc>)
 8001b12:	f7ff fc45 	bl	80013a0 <PIController_Init>
  PIController_Init(&MoteurG);
 8001b16:	480a      	ldr	r0, [pc, #40]	; (8001b40 <main+0xc0>)
 8001b18:	f7ff fc42 	bl	80013a0 <PIController_Init>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 8001b1c:	4809      	ldr	r0, [pc, #36]	; (8001b44 <main+0xc4>)
 8001b1e:	f002 ffaf 	bl	8004a80 <HAL_TIM_Base_Start_IT>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <main+0xa2>
 8001b24:	20000a54 	.word	0x20000a54
 8001b28:	20000a58 	.word	0x20000a58
 8001b2c:	20000934 	.word	0x20000934
 8001b30:	200009c4 	.word	0x200009c4
 8001b34:	200008ec 	.word	0x200008ec
 8001b38:	2000097c 	.word	0x2000097c
 8001b3c:	200007e4 	.word	0x200007e4
 8001b40:	2000080c 	.word	0x2000080c
 8001b44:	20000a0c 	.word	0x20000a0c

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b096      	sub	sp, #88	; 0x58
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b52:	2228      	movs	r2, #40	; 0x28
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 f90c 	bl	8006d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fa49 	bl	800403c <HAL_RCC_OscConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001bb0:	f000 f9b4 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fcb5 	bl	8004540 <HAL_RCC_ClockConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bdc:	f000 f99e 	bl	8001f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001be0:	2302      	movs	r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fe41 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001bf8:	f000 f990 	bl	8001f1c <Error_Handler>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3758      	adds	r7, #88	; 0x58
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c0c:	1d39      	adds	r1, r7, #4
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	2201      	movs	r2, #1
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <__io_putchar+0x20>)
 8001c16:	f004 f97f 	bl	8005f18 <HAL_UART_Transmit>
	return ch;
 8001c1a:	687b      	ldr	r3, [r7, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000a58 	.word	0x20000a58

08001c28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // Tim 3 avce servo donc pas d'interrupt...inutile
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	f000 811a 	beq.w	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>

	}



	else if (htim->Instance == TIM7) //Tim 7 1sec pour du printf shell
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a8e      	ldr	r2, [pc, #568]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	f000 8114 	beq.w	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>

	}



	else if (htim->Instance == TIM6) //Tim 6 asserv en vitesse a 0.1sec
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a8c      	ldr	r2, [pc, #560]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	f040 810d 	bne.w	8001e6e <HAL_TIM_PeriodElapsedCallback+0x246>
		{
		  ReadEncodeur();
 8001c54:	f7ff fb7e 	bl	8001354 <ReadEncodeur>

		  if(consigneD == 0)
 8001c58:	4b8a      	ldr	r3, [pc, #552]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x3e>
		  {
			  Stop();
 8001c60:	f7ff fb2e 	bl	80012c0 <Stop>
				break;
			}

		  }
		}
}
 8001c64:	e104      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>
			switch(action)
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	f000 809a 	beq.w	8001da4 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	f300 80f9 	bgt.w	8001e68 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d049      	beq.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0xea>
 8001c7e:	e0f3      	b.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x240>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f957 	bl	8000f38 <__aeabi_i2f>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	22c8      	movs	r2, #200	; 0xc8
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c98:	fb82 1203 	smull	r1, r2, r2, r3
 8001c9c:	1152      	asrs	r2, r2, #5
 8001c9e:	17db      	asrs	r3, r3, #31
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f948 	bl	8000f38 <__aeabi_i2f>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4621      	mov	r1, r4
 8001cae:	4879      	ldr	r0, [pc, #484]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cb0:	f7ff fbb4 	bl	800141c <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f93d 	bl	8000f38 <__aeabi_i2f>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	22c8      	movs	r2, #200	; 0xc8
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd0:	1112      	asrs	r2, r2, #4
 8001cd2:	17db      	asrs	r3, r3, #31
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f92e 	bl	8000f38 <__aeabi_i2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	4870      	ldr	r0, [pc, #448]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ce4:	f7ff fb9a 	bl	800141c <PIController_Update>
				AvancerPI(0, MoteurD.out);
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f9ed 	bl	80010cc <__aeabi_f2iz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff fa7c 	bl	80011f4 <AvancerPI>
				AvancerPI(1, MoteurG.out);
 8001cfc:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f9e3 	bl	80010cc <__aeabi_f2iz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff fa72 	bl	80011f4 <AvancerPI>
				break;
 8001d10:	e0ae      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f90e 	bl	8000f38 <__aeabi_i2f>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	22c8      	movs	r2, #200	; 0xc8
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	4a59      	ldr	r2, [pc, #356]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d2e:	1152      	asrs	r2, r2, #5
 8001d30:	17db      	asrs	r3, r3, #31
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f8ff 	bl	8000f38 <__aeabi_i2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4854      	ldr	r0, [pc, #336]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d42:	f7ff fb6b 	bl	800141c <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8001d46:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f8f4 	bl	8000f38 <__aeabi_i2f>
 8001d50:	4604      	mov	r4, r0
 8001d52:	4b52      	ldr	r3, [pc, #328]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	22c8      	movs	r2, #200	; 0xc8
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d62:	1112      	asrs	r2, r2, #4
 8001d64:	17db      	asrs	r3, r3, #31
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f8e5 	bl	8000f38 <__aeabi_i2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	484b      	ldr	r0, [pc, #300]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d76:	f7ff fb51 	bl	800141c <PIController_Update>
				ReculerPI(0, MoteurD.out);
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9a4 	bl	80010cc <__aeabi_f2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4619      	mov	r1, r3
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fa75 	bl	8001278 <ReculerPI>
				ReculerPI(1, MoteurG.out);
 8001d8e:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f99a 	bl	80010cc <__aeabi_f2iz>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fa6b 	bl	8001278 <ReculerPI>
				break;
 8001da2:	e065      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8001da4:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f8c5 	bl	8000f38 <__aeabi_i2f>
 8001dae:	4604      	mov	r4, r0
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	22c8      	movs	r2, #200	; 0xc8
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	1152      	asrs	r2, r2, #5
 8001dc2:	17db      	asrs	r3, r3, #31
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f8b6 	bl	8000f38 <__aeabi_i2f>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4830      	ldr	r0, [pc, #192]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001dd4:	f7ff fb22 	bl	800141c <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f8ab 	bl	8000f38 <__aeabi_i2f>
 8001de2:	4604      	mov	r4, r0
 8001de4:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	22c8      	movs	r2, #200	; 0xc8
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4a2c      	ldr	r2, [pc, #176]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001df0:	fb82 1203 	smull	r1, r2, r2, r3
 8001df4:	1112      	asrs	r2, r2, #4
 8001df6:	17db      	asrs	r3, r3, #31
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f89c 	bl	8000f38 <__aeabi_i2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4621      	mov	r1, r4
 8001e06:	4827      	ldr	r0, [pc, #156]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e08:	f7ff fb08 	bl	800141c <PIController_Update>
				if(sens)
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x216>
					ReculerPI(0, MoteurD.out);
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f957 	bl	80010cc <__aeabi_f2iz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4619      	mov	r1, r3
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fa28 	bl	8001278 <ReculerPI>
					AvancerPI(1, MoteurG.out);
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f94d 	bl	80010cc <__aeabi_f2iz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4619      	mov	r1, r3
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff f9dc 	bl	80011f4 <AvancerPI>
				break;
 8001e3c:	e018      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>
					AvancerPI(0, MoteurD.out);
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f942 	bl	80010cc <__aeabi_f2iz>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff f9d1 	bl	80011f4 <AvancerPI>
					ReculerPI(1, MoteurG.out);
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f938 	bl	80010cc <__aeabi_f2iz>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff fa09 	bl	8001278 <ReculerPI>
				break;
 8001e66:	e003      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>
				Stop();
 8001e68:	f7ff fa2a 	bl	80012c0 <Stop>
				break;
 8001e6c:	e000      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x248>
		  }
 8001e6e:	bf00      	nop
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40001400 	.word	0x40001400
 8001e80:	40001000 	.word	0x40001000
 8001e84:	200007d0 	.word	0x200007d0
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	200007cc 	.word	0x200007cc
 8001e90:	3531dec1 	.word	0x3531dec1
 8001e94:	200007e4 	.word	0x200007e4
 8001e98:	200007d8 	.word	0x200007d8
 8001e9c:	200007d4 	.word	0x200007d4
 8001ea0:	19c2d14f 	.word	0x19c2d14f
 8001ea4:	2000080c 	.word	0x2000080c
 8001ea8:	200007dc 	.word	0x200007dc

08001eac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
	enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	bfb8      	it	lt
 8001ec4:	425b      	neglt	r3, r3
 8001ec6:	4a03      	ldr	r2, [pc, #12]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	200007e0 	.word	0x200007e0

08001ed8 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_UART_RxCpltCallback+0x38>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10d      	bne.n	8001f06 <HAL_UART_RxCpltCallback+0x2e>
	{
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001eea:	2201      	movs	r2, #1
 8001eec:	4909      	ldr	r1, [pc, #36]	; (8001f14 <HAL_UART_RxCpltCallback+0x3c>)
 8001eee:	480a      	ldr	r0, [pc, #40]	; (8001f18 <HAL_UART_RxCpltCallback+0x40>)
 8001ef0:	f004 f8a4 	bl	800603c <HAL_UART_Receive_IT>
		if(shellGetChar())
 8001ef4:	f000 f852 	bl	8001f9c <shellGetChar>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_UART_RxCpltCallback+0x2e>
		{
		  shellExec();
 8001efe:	f000 f8c1 	bl	8002084 <shellExec>
		  shellPrompt();
 8001f02:	f000 f82b 	bl	8001f5c <shellPrompt>
	}
	else if(huart->Instance == USART2)
	{
		//interruption Raspberry
	}
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40013800 	.word	0x40013800
 8001f14:	20000a54 	.word	0x20000a54
 8001f18:	20000a58 	.word	0x20000a58

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8001f24:	f7ff fd8e 	bl	8001a44 <LedError>
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <Error_Handler+0xc>
	...

08001f2c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	226c      	movs	r2, #108	; 0x6c
 8001f36:	4906      	ldr	r1, [pc, #24]	; (8001f50 <shellInit+0x24>)
 8001f38:	4806      	ldr	r0, [pc, #24]	; (8001f54 <shellInit+0x28>)
 8001f3a:	f003 ffed 	bl	8005f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	220a      	movs	r2, #10
 8001f44:	4904      	ldr	r1, [pc, #16]	; (8001f58 <shellInit+0x2c>)
 8001f46:	4803      	ldr	r0, [pc, #12]	; (8001f54 <shellInit+0x28>)
 8001f48:	f003 ffe6 	bl	8005f18 <HAL_UART_Transmit>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000010 	.word	0x20000010
 8001f54:	20000a58 	.word	0x20000a58
 8001f58:	20000004 	.word	0x20000004

08001f5c <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	220a      	movs	r2, #10
 8001f66:	4903      	ldr	r1, [pc, #12]	; (8001f74 <shellPrompt+0x18>)
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <shellPrompt+0x1c>)
 8001f6a:	f003 ffd5 	bl	8005f18 <HAL_UART_Transmit>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000004 	.word	0x20000004
 8001f78:	20000a58 	.word	0x20000a58

08001f7c <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	2214      	movs	r2, #20
 8001f86:	4903      	ldr	r1, [pc, #12]	; (8001f94 <shellCmdNotFound+0x18>)
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <shellCmdNotFound+0x1c>)
 8001f8a:	f003 ffc5 	bl	8005f18 <HAL_UART_Transmit>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200004e4 	.word	0x200004e4
 8001f98:	20000a58 	.word	0x20000a58

08001f9c <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <shellGetChar+0xc8>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d030      	beq.n	8002010 <shellGetChar+0x74>
 8001fae:	2b0d      	cmp	r3, #13
 8001fb0:	d140      	bne.n	8002034 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	492b      	ldr	r1, [pc, #172]	; (8002068 <shellGetChar+0xcc>)
 8001fba:	482c      	ldr	r0, [pc, #176]	; (800206c <shellGetChar+0xd0>)
 8001fbc:	f003 ffac 	bl	8005f18 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <shellGetChar+0xd4>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <shellGetChar+0xd8>)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <shellGetChar+0xdc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001fd2:	492a      	ldr	r1, [pc, #168]	; (800207c <shellGetChar+0xe0>)
 8001fd4:	4827      	ldr	r0, [pc, #156]	; (8002074 <shellGetChar+0xd8>)
 8001fd6:	f006 fb79 	bl	80086cc <strtok>
 8001fda:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001fdc:	e00f      	b.n	8001ffe <shellGetChar+0x62>
			argv[argc++] = token;
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <shellGetChar+0xdc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	b2d1      	uxtb	r1, r2
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <shellGetChar+0xdc>)
 8001fe8:	7011      	strb	r1, [r2, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <shellGetChar+0xe4>)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8001ff4:	4921      	ldr	r1, [pc, #132]	; (800207c <shellGetChar+0xe0>)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f006 fb68 	bl	80086cc <strtok>
 8001ffc:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ec      	bne.n	8001fde <shellGetChar+0x42>
		}

		idxCmd = 0;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <shellGetChar+0xd4>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
		break;
 800200e:	e023      	b.n	8002058 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <shellGetChar+0xd4>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	b2d1      	uxtb	r1, r2
 8002018:	4a15      	ldr	r2, [pc, #84]	; (8002070 <shellGetChar+0xd4>)
 800201a:	7011      	strb	r1, [r2, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <shellGetChar+0xd8>)
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	2201      	movs	r2, #1
 800202a:	490e      	ldr	r1, [pc, #56]	; (8002064 <shellGetChar+0xc8>)
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <shellGetChar+0xd0>)
 800202e:	f003 ff73 	bl	8005f18 <HAL_UART_Transmit>
		break;
 8002032:	e011      	b.n	8002058 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <shellGetChar+0xd4>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	b2d1      	uxtb	r1, r2
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <shellGetChar+0xd4>)
 800203e:	7011      	strb	r1, [r2, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <shellGetChar+0xc8>)
 8002044:	7819      	ldrb	r1, [r3, #0]
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <shellGetChar+0xd8>)
 8002048:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	2201      	movs	r2, #1
 8002050:	4904      	ldr	r1, [pc, #16]	; (8002064 <shellGetChar+0xc8>)
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <shellGetChar+0xd0>)
 8002054:	f003 ff60 	bl	8005f18 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8002058:	79fb      	ldrb	r3, [r7, #7]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000a54 	.word	0x20000a54
 8002068:	2000007c 	.word	0x2000007c
 800206c:	20000a58 	.word	0x20000a58
 8002070:	20000874 	.word	0x20000874
 8002074:	20000834 	.word	0x20000834
 8002078:	2000089c 	.word	0x2000089c
 800207c:	0800b6b0 	.word	0x0800b6b0
 8002080:	20000878 	.word	0x20000878

08002084 <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 8002084:	b598      	push	{r3, r4, r7, lr}
 8002086:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 8002088:	4ba4      	ldr	r3, [pc, #656]	; (800231c <shellExec+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	49a4      	ldr	r1, [pc, #656]	; (8002320 <shellExec+0x29c>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f8ce 	bl	8000230 <strcmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	f240 2231 	movw	r2, #561	; 0x231
 80020a2:	49a0      	ldr	r1, [pc, #640]	; (8002324 <shellExec+0x2a0>)
 80020a4:	48a0      	ldr	r0, [pc, #640]	; (8002328 <shellExec+0x2a4>)
 80020a6:	f003 ff37 	bl	8005f18 <HAL_UART_Transmit>

	else{
		shellCmdNotFound();
	}

}
 80020aa:	e134      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"RTFM")==0)
 80020ac:	4b9b      	ldr	r3, [pc, #620]	; (800231c <shellExec+0x298>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	499e      	ldr	r1, [pc, #632]	; (800232c <shellExec+0x2a8>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f8bc 	bl	8000230 <strcmp>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80020c6:	499a      	ldr	r1, [pc, #616]	; (8002330 <shellExec+0x2ac>)
 80020c8:	4897      	ldr	r0, [pc, #604]	; (8002328 <shellExec+0x2a4>)
 80020ca:	f003 ff25 	bl	8005f18 <HAL_UART_Transmit>
}
 80020ce:	e122      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"led")==0)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <shellExec+0x298>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4997      	ldr	r1, [pc, #604]	; (8002334 <shellExec+0x2b0>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f8aa 	bl	8000230 <strcmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d110      	bne.n	8002104 <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	2222      	movs	r2, #34	; 0x22
 80020e8:	4993      	ldr	r1, [pc, #588]	; (8002338 <shellExec+0x2b4>)
 80020ea:	488f      	ldr	r0, [pc, #572]	; (8002328 <shellExec+0x2a4>)
 80020ec:	f003 ff14 	bl	8005f18 <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 80020f0:	4b8a      	ldr	r3, [pc, #552]	; (800231c <shellExec+0x298>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fe01 	bl	8006cfc <atoi>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fc6f 	bl	80019e0 <SwitchLed>
}
 8002102:	e108      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"avancer")==0)
 8002104:	4b85      	ldr	r3, [pc, #532]	; (800231c <shellExec+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	498c      	ldr	r1, [pc, #560]	; (800233c <shellExec+0x2b8>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe f890 	bl	8000230 <strcmp>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d110      	bne.n	8002138 <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	2225      	movs	r2, #37	; 0x25
 800211c:	4988      	ldr	r1, [pc, #544]	; (8002340 <shellExec+0x2bc>)
 800211e:	4882      	ldr	r0, [pc, #520]	; (8002328 <shellExec+0x2a4>)
 8002120:	f003 fefa 	bl	8005f18 <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 8002124:	4b7d      	ldr	r3, [pc, #500]	; (800231c <shellExec+0x298>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fde7 	bl	8006cfc <atoi>
 800212e:	4603      	mov	r3, r0
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f841 	bl	80011b8 <Avancer>
}
 8002136:	e0ee      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"reculer")==0)
 8002138:	4b78      	ldr	r3, [pc, #480]	; (800231c <shellExec+0x298>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4981      	ldr	r1, [pc, #516]	; (8002344 <shellExec+0x2c0>)
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f876 	bl	8000230 <strcmp>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d110      	bne.n	800216c <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	2227      	movs	r2, #39	; 0x27
 8002150:	497d      	ldr	r1, [pc, #500]	; (8002348 <shellExec+0x2c4>)
 8002152:	4875      	ldr	r0, [pc, #468]	; (8002328 <shellExec+0x2a4>)
 8002154:	f003 fee0 	bl	8005f18 <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 8002158:	4b70      	ldr	r3, [pc, #448]	; (800231c <shellExec+0x298>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fdcd 	bl	8006cfc <atoi>
 8002162:	4603      	mov	r3, r0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f869 	bl	800123c <Reculer>
}
 800216a:	e0d4      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"stop")==0)
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <shellExec+0x298>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4976      	ldr	r1, [pc, #472]	; (800234c <shellExec+0x2c8>)
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f85c 	bl	8000230 <strcmp>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	2216      	movs	r2, #22
 8002184:	4972      	ldr	r1, [pc, #456]	; (8002350 <shellExec+0x2cc>)
 8002186:	4868      	ldr	r0, [pc, #416]	; (8002328 <shellExec+0x2a4>)
 8002188:	f003 fec6 	bl	8005f18 <HAL_UART_Transmit>
		Stop();
 800218c:	f7ff f898 	bl	80012c0 <Stop>
}
 8002190:	e0c1      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"tourner")==0)
 8002192:	4b62      	ldr	r3, [pc, #392]	; (800231c <shellExec+0x298>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	496f      	ldr	r1, [pc, #444]	; (8002354 <shellExec+0x2d0>)
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f849 	bl	8000230 <strcmp>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12a      	bne.n	80021fa <shellExec+0x176>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 80021a4:	4b5d      	ldr	r3, [pc, #372]	; (800231c <shellExec+0x298>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	496b      	ldr	r1, [pc, #428]	; (8002358 <shellExec+0x2d4>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f840 	bl	8000230 <strcmp>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <shellExec+0x146>
 80021b6:	4b59      	ldr	r3, [pc, #356]	; (800231c <shellExec+0x298>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4968      	ldr	r1, [pc, #416]	; (800235c <shellExec+0x2d8>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f837 	bl	8000230 <strcmp>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a6 	beq.w	8002316 <shellExec+0x292>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	2230      	movs	r2, #48	; 0x30
 80021d0:	4963      	ldr	r1, [pc, #396]	; (8002360 <shellExec+0x2dc>)
 80021d2:	4855      	ldr	r0, [pc, #340]	; (8002328 <shellExec+0x2a4>)
 80021d4:	f003 fea0 	bl	8005f18 <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <shellExec+0x298>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 fd8d 	bl	8006cfc <atoi>
 80021e2:	4604      	mov	r4, r0
 80021e4:	4b4d      	ldr	r3, [pc, #308]	; (800231c <shellExec+0x298>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fd87 	bl	8006cfc <atoi>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff f878 	bl	80012e8 <Tourner>
}
 80021f8:	e08d      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"avancerPI")==0)
 80021fa:	4b48      	ldr	r3, [pc, #288]	; (800231c <shellExec+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4959      	ldr	r1, [pc, #356]	; (8002364 <shellExec+0x2e0>)
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f815 	bl	8000230 <strcmp>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d117      	bne.n	800223c <shellExec+0x1b8>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
 8002210:	2225      	movs	r2, #37	; 0x25
 8002212:	494b      	ldr	r1, [pc, #300]	; (8002340 <shellExec+0x2bc>)
 8002214:	4844      	ldr	r0, [pc, #272]	; (8002328 <shellExec+0x2a4>)
 8002216:	f003 fe7f 	bl	8005f18 <HAL_UART_Transmit>
		consigneD = atoi(argv[1]);
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <shellExec+0x298>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fd6c 	bl	8006cfc <atoi>
 8002224:	4603      	mov	r3, r0
 8002226:	4a50      	ldr	r2, [pc, #320]	; (8002368 <shellExec+0x2e4>)
 8002228:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[1]);
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <shellExec+0x298>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 fd64 	bl	8006cfc <atoi>
 8002234:	4603      	mov	r3, r0
 8002236:	4a4d      	ldr	r2, [pc, #308]	; (800236c <shellExec+0x2e8>)
 8002238:	6013      	str	r3, [r2, #0]
}
 800223a:	e06c      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"actionPI")==0)
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <shellExec+0x298>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	494b      	ldr	r1, [pc, #300]	; (8002370 <shellExec+0x2ec>)
 8002242:	4618      	mov	r0, r3
 8002244:	f7fd fff4 	bl	8000230 <strcmp>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d12b      	bne.n	80022a6 <shellExec+0x222>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	2225      	movs	r2, #37	; 0x25
 8002254:	493a      	ldr	r1, [pc, #232]	; (8002340 <shellExec+0x2bc>)
 8002256:	4834      	ldr	r0, [pc, #208]	; (8002328 <shellExec+0x2a4>)
 8002258:	f003 fe5e 	bl	8005f18 <HAL_UART_Transmit>
		action = atoi(argv[1]);
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <shellExec+0x298>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fd4b 	bl	8006cfc <atoi>
 8002266:	4603      	mov	r3, r0
 8002268:	4a42      	ldr	r2, [pc, #264]	; (8002374 <shellExec+0x2f0>)
 800226a:	6013      	str	r3, [r2, #0]
		if(action ==2) sens = atoi(argv[3]);
 800226c:	4b41      	ldr	r3, [pc, #260]	; (8002374 <shellExec+0x2f0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <shellExec+0x200>
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <shellExec+0x298>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f004 fd3f 	bl	8006cfc <atoi>
 800227e:	4603      	mov	r3, r0
 8002280:	4a3d      	ldr	r2, [pc, #244]	; (8002378 <shellExec+0x2f4>)
 8002282:	6013      	str	r3, [r2, #0]
		consigneD = atoi(argv[2]);
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <shellExec+0x298>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4618      	mov	r0, r3
 800228a:	f004 fd37 	bl	8006cfc <atoi>
 800228e:	4603      	mov	r3, r0
 8002290:	4a35      	ldr	r2, [pc, #212]	; (8002368 <shellExec+0x2e4>)
 8002292:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[2]);
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <shellExec+0x298>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fd2f 	bl	8006cfc <atoi>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a32      	ldr	r2, [pc, #200]	; (800236c <shellExec+0x2e8>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	e037      	b.n	8002316 <shellExec+0x292>
	else if(strcmp(argv[0],"servo")==0)
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <shellExec+0x298>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4934      	ldr	r1, [pc, #208]	; (800237c <shellExec+0x2f8>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fd ffbf 	bl	8000230 <strcmp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d12c      	bne.n	8002312 <shellExec+0x28e>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	2217      	movs	r2, #23
 80022be:	4930      	ldr	r1, [pc, #192]	; (8002380 <shellExec+0x2fc>)
 80022c0:	4819      	ldr	r0, [pc, #100]	; (8002328 <shellExec+0x2a4>)
 80022c2:	f003 fe29 	bl	8005f18 <HAL_UART_Transmit>
		if(strcmp(argv[1],"ouvert")==0)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <shellExec+0x298>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	492e      	ldr	r1, [pc, #184]	; (8002384 <shellExec+0x300>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ffaf 	bl	8000230 <strcmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <shellExec+0x25e>
			ControlServo(SERVO_OPEN);
 80022d8:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80022dc:	f7ff f94a 	bl	8001574 <ControlServo>
}
 80022e0:	e019      	b.n	8002316 <shellExec+0x292>
		else if(strcmp(argv[1],"ferme")==0)
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <shellExec+0x298>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4928      	ldr	r1, [pc, #160]	; (8002388 <shellExec+0x304>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fd ffa1 	bl	8000230 <strcmp>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <shellExec+0x27a>
			ControlServo(SERVO_CLOSED);
 80022f4:	f44f 7052 	mov.w	r0, #840	; 0x348
 80022f8:	f7ff f93c 	bl	8001574 <ControlServo>
}
 80022fc:	e00b      	b.n	8002316 <shellExec+0x292>
		else ControlServo(atoi(argv[1]));
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <shellExec+0x298>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fcfa 	bl	8006cfc <atoi>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f932 	bl	8001574 <ControlServo>
}
 8002310:	e001      	b.n	8002316 <shellExec+0x292>
		shellCmdNotFound();
 8002312:	f7ff fe33 	bl	8001f7c <shellCmdNotFound>
}
 8002316:	bf00      	nop
 8002318:	bd98      	pop	{r3, r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	20000878 	.word	0x20000878
 8002320:	0800b6b4 	.word	0x0800b6b4
 8002324:	20000080 	.word	0x20000080
 8002328:	20000a58 	.word	0x20000a58
 800232c:	0800b6bc 	.word	0x0800b6bc
 8002330:	200002b4 	.word	0x200002b4
 8002334:	0800b6c4 	.word	0x0800b6c4
 8002338:	20000410 	.word	0x20000410
 800233c:	0800b6c8 	.word	0x0800b6c8
 8002340:	20000434 	.word	0x20000434
 8002344:	0800b6d0 	.word	0x0800b6d0
 8002348:	2000045c 	.word	0x2000045c
 800234c:	0800b6d8 	.word	0x0800b6d8
 8002350:	20000484 	.word	0x20000484
 8002354:	0800b6e0 	.word	0x0800b6e0
 8002358:	0800b6e8 	.word	0x0800b6e8
 800235c:	0800b6ec 	.word	0x0800b6ec
 8002360:	2000049c 	.word	0x2000049c
 8002364:	0800b6f0 	.word	0x0800b6f0
 8002368:	200007d0 	.word	0x200007d0
 800236c:	200007d8 	.word	0x200007d8
 8002370:	0800b6fc 	.word	0x0800b6fc
 8002374:	20000000 	.word	0x20000000
 8002378:	200007dc 	.word	0x200007dc
 800237c:	0800b708 	.word	0x0800b708
 8002380:	200004cc 	.word	0x200004cc
 8002384:	0800b710 	.word	0x0800b710
 8002388:	0800b718 	.word	0x0800b718

0800238c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_MspInit+0x68>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_MspInit+0x68>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6193      	str	r3, [r2, #24]
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_MspInit+0x68>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_MspInit+0x68>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_MspInit+0x68>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_MspInit+0x68>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	210f      	movs	r1, #15
 80023c6:	f06f 0001 	mvn.w	r0, #1
 80023ca:	f001 f99c 	bl	8003706 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_MspInit+0x6c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_MspInit+0x6c>)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <NMI_Handler+0x4>

08002402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <HardFault_Handler+0x4>

08002408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <MemManage_Handler+0x4>

0800240e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <UsageFault_Handler+0x4>

0800241a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 fe31 	bl	8003090 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800242e:	f004 fbe5 	bl	8006bfc <xTaskGetSchedulerState>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002438:	f004 fc3e 	bl	8006cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM1_UP_IRQHandler+0x10>)
 8002446:	f002 febd 	bl	80051c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200008a4 	.word	0x200008a4

08002454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <USART1_IRQHandler+0x10>)
 800245a:	f003 fe1f 	bl	800609c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000a58 	.word	0x20000a58

08002468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <USART2_IRQHandler+0x10>)
 800246e:	f003 fe15 	bl	800609c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000a9c 	.word	0x20000a9c

0800247c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8002480:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002484:	f001 fc7e 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <TIM6_IRQHandler+0x10>)
 8002492:	f002 fe97 	bl	80051c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200009c4 	.word	0x200009c4

080024a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TIM7_IRQHandler+0x10>)
 80024a6:	f002 fe8d 	bl	80051c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000a0c 	.word	0x20000a0c

080024b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <_kill>:

int _kill(int pid, int sig)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024cc:	f004 fc1a 	bl	8006d04 <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2216      	movs	r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
	return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_exit>:

void _exit (int status)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ea:	f04f 31ff 	mov.w	r1, #4294967295
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffe7 	bl	80024c2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f4:	e7fe      	b.n	80024f4 <_exit+0x12>

080024f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e00a      	b.n	800251e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002508:	f3af 8000 	nop.w
 800250c:	4601      	mov	r1, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60ba      	str	r2, [r7, #8]
 8002514:	b2ca      	uxtb	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf0      	blt.n	8002508 <_read+0x12>
	}

return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e009      	b.n	8002556 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	60ba      	str	r2, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fb5a 	bl	8001c04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbf1      	blt.n	8002542 <_write+0x12>
	}
	return len;
 800255e:	687b      	ldr	r3, [r7, #4]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_close>:

int _close(int file)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	return -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <_isatty>:

int _isatty(int file)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f004 fb84 	bl	8006d04 <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000c000 	.word	0x2000c000
 8002628:	00000400 	.word	0x00000400
 800262c:	200008a0 	.word	0x200008a0
 8002630:	20000bb0 	.word	0x20000bb0

08002634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b096      	sub	sp, #88	; 0x58
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002654:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800265e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	615a      	str	r2, [r3, #20]
 8002670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2220      	movs	r2, #32
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f004 fb7b 	bl	8006d74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800267e:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002680:	4a50      	ldr	r2, [pc, #320]	; (80027c4 <MX_TIM1_Init+0x184>)
 8002682:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8002684:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002686:	2211      	movs	r2, #17
 8002688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <MX_TIM1_Init+0x180>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002692:	22c7      	movs	r2, #199	; 0xc7
 8002694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <MX_TIM1_Init+0x180>)
 800269e:	2200      	movs	r2, #0
 80026a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <MX_TIM1_Init+0x180>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026a8:	4845      	ldr	r0, [pc, #276]	; (80027c0 <MX_TIM1_Init+0x180>)
 80026aa:	f002 f999 	bl	80049e0 <HAL_TIM_Base_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80026b4:	f7ff fc32 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026c2:	4619      	mov	r1, r3
 80026c4:	483e      	ldr	r0, [pc, #248]	; (80027c0 <MX_TIM1_Init+0x180>)
 80026c6:	f002 ff43 	bl	8005550 <HAL_TIM_ConfigClockSource>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80026d0:	f7ff fc24 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026d4:	483a      	ldr	r0, [pc, #232]	; (80027c0 <MX_TIM1_Init+0x180>)
 80026d6:	f002 fa33 	bl	8004b40 <HAL_TIM_PWM_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80026e0:	f7ff fc1c 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026f0:	4619      	mov	r1, r3
 80026f2:	4833      	ldr	r0, [pc, #204]	; (80027c0 <MX_TIM1_Init+0x180>)
 80026f4:	f003 faf4 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80026fe:	f7ff fc0d 	bl	8001f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002702:	2360      	movs	r3, #96	; 0x60
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800270e:	2300      	movs	r3, #0
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	4826      	ldr	r0, [pc, #152]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002728:	f002 fe54 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002732:	f7ff fbf3 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273a:	2204      	movs	r2, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4820      	ldr	r0, [pc, #128]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002740:	f002 fe48 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800274a:	f7ff fbe7 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	2208      	movs	r2, #8
 8002754:	4619      	mov	r1, r3
 8002756:	481a      	ldr	r0, [pc, #104]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002758:	f002 fe3c 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002762:	f7ff fbdb 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	220c      	movs	r2, #12
 800276c:	4619      	mov	r1, r3
 800276e:	4814      	ldr	r0, [pc, #80]	; (80027c0 <MX_TIM1_Init+0x180>)
 8002770:	f002 fe30 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800277a:	f7ff fbcf 	bl	8001f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002796:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	; (80027c0 <MX_TIM1_Init+0x180>)
 80027a2:	f003 fb09 	bl	8005db8 <HAL_TIMEx_ConfigBreakDeadTime>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80027ac:	f7ff fbb6 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <MX_TIM1_Init+0x180>)
 80027b2:	f000 fa9f 	bl	8002cf4 <HAL_TIM_MspPostInit>

}
 80027b6:	bf00      	nop
 80027b8:	3758      	adds	r7, #88	; 0x58
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200008a4 	.word	0x200008a4
 80027c4:	40012c00 	.word	0x40012c00

080027c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 facc 	bl	8006d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <MX_TIM2_Init+0xa4>)
 80027e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <MX_TIM2_Init+0xa4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <MX_TIM2_Init+0xa4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <MX_TIM2_Init+0xa4>)
 80027fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_TIM2_Init+0xa4>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_TIM2_Init+0xa4>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800280c:	2301      	movs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002824:	2301      	movs	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002828:	2300      	movs	r3, #0
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4619      	mov	r1, r3
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <MX_TIM2_Init+0xa4>)
 8002838:	f002 fb94 	bl	8004f64 <HAL_TIM_Encoder_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002842:	f7ff fb6b 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	; (800286c <MX_TIM2_Init+0xa4>)
 8002854:	f003 fa44 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800285e:	f7ff fb5d 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3730      	adds	r7, #48	; 0x30
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200008ec 	.word	0x200008ec

08002870 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002884:	f107 0320 	add.w	r3, r7, #32
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028a2:	4a2e      	ldr	r2, [pc, #184]	; (800295c <MX_TIM3_Init+0xec>)
 80028a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028a8:	2247      	movs	r2, #71	; 0x47
 80028aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028b4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80028b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028c6:	4824      	ldr	r0, [pc, #144]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028c8:	f002 f88a 	bl	80049e0 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80028d2:	f7ff fb23 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e0:	4619      	mov	r1, r3
 80028e2:	481d      	ldr	r0, [pc, #116]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028e4:	f002 fe34 	bl	8005550 <HAL_TIM_ConfigClockSource>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80028ee:	f7ff fb15 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028f2:	4819      	ldr	r0, [pc, #100]	; (8002958 <MX_TIM3_Init+0xe8>)
 80028f4:	f002 f924 	bl	8004b40 <HAL_TIM_PWM_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80028fe:	f7ff fb0d 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800290a:	f107 0320 	add.w	r3, r7, #32
 800290e:	4619      	mov	r1, r3
 8002910:	4811      	ldr	r0, [pc, #68]	; (8002958 <MX_TIM3_Init+0xe8>)
 8002912:	f003 f9e5 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800291c:	f7ff fafe 	bl	8001f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002920:	2360      	movs	r3, #96	; 0x60
 8002922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	4619      	mov	r1, r3
 8002938:	4807      	ldr	r0, [pc, #28]	; (8002958 <MX_TIM3_Init+0xe8>)
 800293a:	f002 fd4b 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002944:	f7ff faea 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <MX_TIM3_Init+0xe8>)
 800294a:	f000 f9d3 	bl	8002cf4 <HAL_TIM_MspPostInit>

}
 800294e:	bf00      	nop
 8002950:	3738      	adds	r7, #56	; 0x38
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000934 	.word	0x20000934
 800295c:	40000400 	.word	0x40000400

08002960 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fa00 	bl	8006d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <MX_TIM5_Init+0xa0>)
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <MX_TIM5_Init+0xa4>)
 8002980:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002982:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <MX_TIM5_Init+0xa0>)
 8002984:	2200      	movs	r2, #0
 8002986:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <MX_TIM5_Init+0xa0>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <MX_TIM5_Init+0xa0>)
 8002990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002994:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <MX_TIM5_Init+0xa0>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_TIM5_Init+0xa0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029aa:	2301      	movs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029ba:	2301      	movs	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	4619      	mov	r1, r3
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <MX_TIM5_Init+0xa0>)
 80029ce:	f002 fac9 	bl	8004f64 <HAL_TIM_Encoder_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80029d8:	f7ff faa0 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_TIM5_Init+0xa0>)
 80029ea:	f003 f979 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80029f4:	f7ff fa92 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3730      	adds	r7, #48	; 0x30
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000097c 	.word	0x2000097c
 8002a04:	40000c00 	.word	0x40000c00

08002a08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0e:	463b      	mov	r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <MX_TIM6_Init+0x68>)
 8002a1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a1e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002a22:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a30:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a3a:	f001 ffd1 	bl	80049e0 <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a44:	f7ff fa6a 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a50:	463b      	mov	r3, r7
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a56:	f003 f943 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a60:	f7ff fa5c 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200009c4 	.word	0x200009c4
 8002a70:	40001000 	.word	0x40001000

08002a74 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <MX_TIM7_Init+0x68>)
 8002a86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002a8a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002a8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002a98:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a9c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002aa6:	f001 ff9b 	bl	80049e0 <HAL_TIM_Base_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002ab0:	f7ff fa34 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002abc:	463b      	mov	r3, r7
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_TIM7_Init+0x64>)
 8002ac2:	f003 f90d 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002acc:	f7ff fa26 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000a0c 	.word	0x20000a0c
 8002adc:	40001400 	.word	0x40001400

08002ae0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d114      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002afc:	6193      	str	r3, [r2, #24]
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	2019      	movs	r0, #25
 8002b10:	f000 fdf9 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002b14:	2019      	movs	r0, #25
 8002b16:	f000 fe12 	bl	800373e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002b1a:	e044      	b.n	8002ba6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10c      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	61d3      	str	r3, [r2, #28]
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
}
 8002b3e:	e032      	b.n	8002ba6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_TIM_Base_MspInit+0xdc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d114      	bne.n	8002b74 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b50:	f043 0310 	orr.w	r3, r3, #16
 8002b54:	61d3      	str	r3, [r2, #28]
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	2036      	movs	r0, #54	; 0x36
 8002b68:	f000 fdcd 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002b6c:	2036      	movs	r0, #54	; 0x36
 8002b6e:	f000 fde6 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8002b72:	e018      	b.n	8002ba6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_TIM_Base_MspInit+0xe0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d113      	bne.n	8002ba6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b84:	f043 0320 	orr.w	r3, r3, #32
 8002b88:	61d3      	str	r3, [r2, #28]
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2105      	movs	r1, #5
 8002b9a:	2037      	movs	r0, #55	; 0x37
 8002b9c:	f000 fdb3 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ba0:	2037      	movs	r0, #55	; 0x37
 8002ba2:	f000 fdcc 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40001000 	.word	0x40001000
 8002bc0:	40001400 	.word	0x40001400

08002bc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	; 0x30
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d14f      	bne.n	8002c84 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be4:	4b3e      	ldr	r3, [pc, #248]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4a3d      	ldr	r2, [pc, #244]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	61d3      	str	r3, [r2, #28]
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a31      	ldr	r2, [pc, #196]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8002c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4828      	ldr	r0, [pc, #160]	; (8002ce4 <HAL_TIM_Encoder_MspInit+0x120>)
 8002c42:	f000 fed9 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8002c46:	2308      	movs	r3, #8
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4823      	ldr	r0, [pc, #140]	; (8002ce8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c5a:	f000 fecd 	bl	80039f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_TIM_Encoder_MspInit+0x128>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_TIM_Encoder_MspInit+0x128>)
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c82:	e028      	b.n	8002cd6 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d123      	bne.n	8002cd6 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	61d3      	str	r3, [r2, #28]
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6193      	str	r3, [r2, #24]
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <HAL_TIM_Encoder_MspInit+0x120>)
 8002cd2:	f000 fe91 	bl	80039f8 <HAL_GPIO_Init>
}
 8002cd6:	bf00      	nop
 8002cd8:	3730      	adds	r7, #48	; 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	40010c00 	.word	0x40010c00
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000c00 	.word	0x40000c00

08002cf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <HAL_TIM_MspPostInit+0xbc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d119      	bne.n	8002d48 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_TIM_MspPostInit+0xc0>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <HAL_TIM_MspPostInit+0xc0>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_TIM_MspPostInit+0xc0>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8002d2c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2302      	movs	r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	481d      	ldr	r0, [pc, #116]	; (8002db8 <HAL_TIM_MspPostInit+0xc4>)
 8002d42:	f000 fe59 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d46:	e02e      	b.n	8002da6 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_TIM_MspPostInit+0xc8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d129      	bne.n	8002da6 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_TIM_MspPostInit+0xc0>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_TIM_MspPostInit+0xc0>)
 8002d58:	f043 0310 	orr.w	r3, r3, #16
 8002d5c:	6193      	str	r3, [r2, #24]
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_TIM_MspPostInit+0xc0>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8002d6a:	2340      	movs	r3, #64	; 0x40
 8002d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2302      	movs	r3, #2
 8002d74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4810      	ldr	r0, [pc, #64]	; (8002dc0 <HAL_TIM_MspPostInit+0xcc>)
 8002d7e:	f000 fe3b 	bl	80039f8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_TIM_MspPostInit+0xd0>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002da0:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <HAL_TIM_MspPostInit+0xd0>)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	6053      	str	r3, [r2, #4]
}
 8002da6:	bf00      	nop
 8002da8:	3728      	adds	r7, #40	; 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010800 	.word	0x40010800
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40010000 	.word	0x40010000

08002dc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <MX_USART1_UART_Init+0x50>)
 8002dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002dee:	220c      	movs	r2, #12
 8002df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_USART1_UART_Init+0x4c>)
 8002e00:	f003 f83d 	bl	8005e7e <HAL_UART_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e0a:	f7ff f887 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000a58 	.word	0x20000a58
 8002e18:	40013800 	.word	0x40013800

08002e1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <MX_USART2_UART_Init+0x50>)
 8002e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e54:	f003 f813 	bl	8005e7e <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e5e:	f7ff f85d 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000a9c 	.word	0x20000a9c
 8002e6c:	40004400 	.word	0x40004400

08002e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <HAL_UART_MspInit+0x130>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d146      	bne.n	8002f1e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e90:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea8:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a3d      	ldr	r2, [pc, #244]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 8002ec0:	2340      	movs	r3, #64	; 0x40
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4835      	ldr	r0, [pc, #212]	; (8002fa8 <HAL_UART_MspInit+0x138>)
 8002ed4:	f000 fd90 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	482f      	ldr	r0, [pc, #188]	; (8002fa8 <HAL_UART_MspInit+0x138>)
 8002eec:	f000 fd84 	bl	80039f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <HAL_UART_MspInit+0x13c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_UART_MspInit+0x13c>)
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2105      	movs	r1, #5
 8002f10:	2025      	movs	r0, #37	; 0x25
 8002f12:	f000 fbf8 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f16:	2025      	movs	r0, #37	; 0x25
 8002f18:	f000 fc11 	bl	800373e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f1c:	e03c      	b.n	8002f98 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_UART_MspInit+0x140>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d137      	bne.n	8002f98 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f32:	61d3      	str	r3, [r2, #28]
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f40:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_UART_MspInit+0x134>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8002f58:	2304      	movs	r3, #4
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4812      	ldr	r0, [pc, #72]	; (8002fb4 <HAL_UART_MspInit+0x144>)
 8002f6c:	f000 fd44 	bl	80039f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 8002f70:	2308      	movs	r3, #8
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002f7c:	f107 031c 	add.w	r3, r7, #28
 8002f80:	4619      	mov	r1, r3
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <HAL_UART_MspInit+0x144>)
 8002f84:	f000 fd38 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2105      	movs	r1, #5
 8002f8c:	2026      	movs	r0, #38	; 0x26
 8002f8e:	f000 fbba 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f92:	2026      	movs	r0, #38	; 0x26
 8002f94:	f000 fbd3 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8002f98:	bf00      	nop
 8002f9a:	3730      	adds	r7, #48	; 0x30
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40010c00 	.word	0x40010c00
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	40010800 	.word	0x40010800

08002fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fb8:	480c      	ldr	r0, [pc, #48]	; (8002fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fba:	490d      	ldr	r1, [pc, #52]	; (8002ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	; (8002ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fde:	f7ff fb29 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe2:	f003 fe95 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fe6:	f7fe fd4b 	bl	8001a80 <main>
  bx lr
 8002fea:	4770      	bx	lr
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8002ff4:	0800bc58 	.word	0x0800bc58
  ldr r2, =_sbss
 8002ff8:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8002ffc:	20000bac 	.word	0x20000bac

08003000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC1_2_IRQHandler>
	...

08003004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_Init+0x28>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a07      	ldr	r2, [pc, #28]	; (800302c <HAL_Init+0x28>)
 800300e:	f043 0310 	orr.w	r3, r3, #16
 8003012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003014:	2003      	movs	r0, #3
 8003016:	f000 fb6b 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301a:	200f      	movs	r0, #15
 800301c:	f000 f808 	bl	8003030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003020:	f7ff f9b4 	bl	800238c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000

08003030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_InitTick+0x54>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_InitTick+0x58>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003046:	fbb3 f3f1 	udiv	r3, r3, r1
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fb83 	bl	800375a <HAL_SYSTICK_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e00e      	b.n	800307c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d80a      	bhi.n	800307a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003064:	2200      	movs	r2, #0
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f000 fb4b 	bl	8003706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <HAL_InitTick+0x5c>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200004f8 	.word	0x200004f8
 8003088:	20000500 	.word	0x20000500
 800308c:	200004fc 	.word	0x200004fc

08003090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_IncTick+0x1c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_IncTick+0x20>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_IncTick+0x20>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000500 	.word	0x20000500
 80030b0:	20000ae0 	.word	0x20000ae0

080030b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b02      	ldr	r3, [pc, #8]	; (80030c4 <HAL_GetTick+0x10>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	20000ae0 	.word	0x20000ae0

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff fff0 	bl	80030b4 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_Delay+0x44>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffe0 	bl	80030b4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000500 	.word	0x20000500

08003110 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0ce      	b.n	80032d0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe fa68 	bl	8001624 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f9bd 	bl	80034d4 <ADC_ConversionStop_Disable>
 800315a:	4603      	mov	r3, r0
 800315c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 80a9 	bne.w	80032be <HAL_ADC_Init+0x1ae>
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 80a5 	bne.w	80032be <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800317c:	f023 0302 	bic.w	r3, r3, #2
 8003180:	f043 0202 	orr.w	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4951      	ldr	r1, [pc, #324]	; (80032d8 <HAL_ADC_Init+0x1c8>)
 8003192:	428b      	cmp	r3, r1
 8003194:	d10a      	bne.n	80031ac <HAL_ADC_Init+0x9c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800319e:	d002      	beq.n	80031a6 <HAL_ADC_Init+0x96>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	e004      	b.n	80031b0 <HAL_ADC_Init+0xa0>
 80031a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031aa:	e001      	b.n	80031b0 <HAL_ADC_Init+0xa0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7b1b      	ldrb	r3, [r3, #12]
 80031b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c8:	d003      	beq.n	80031d2 <HAL_ADC_Init+0xc2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d102      	bne.n	80031d8 <HAL_ADC_Init+0xc8>
 80031d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d6:	e000      	b.n	80031da <HAL_ADC_Init+0xca>
 80031d8:	2300      	movs	r3, #0
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7d1b      	ldrb	r3, [r3, #20]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d119      	bne.n	800321c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7b1b      	ldrb	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	035a      	lsls	r2, r3, #13
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e00b      	b.n	800321c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_ADC_Init+0x1cc>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	430b      	orrs	r3, r1
 8003242:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d003      	beq.n	8003256 <HAL_ADC_Init+0x146>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d104      	bne.n	8003260 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	3b01      	subs	r3, #1
 800325c:	051b      	lsls	r3, r3, #20
 800325e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	430a      	orrs	r2, r1
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_ADC_Init+0x1d0>)
 800327c:	4013      	ands	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d10b      	bne.n	800329c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800329a:	e018      	b.n	80032ce <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f023 0312 	bic.w	r3, r3, #18
 80032a4:	f043 0210 	orr.w	r2, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032bc:	e007      	b.n	80032ce <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	f043 0210 	orr.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40013c00 	.word	0x40013c00
 80032dc:	ffe1f7fd 	.word	0xffe1f7fd
 80032e0:	ff1f0efe 	.word	0xff1f0efe

080032e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x20>
 8003300:	2302      	movs	r3, #2
 8003302:	e0dc      	b.n	80034be <HAL_ADC_ConfigChannel+0x1da>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d81c      	bhi.n	800334e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	3b05      	subs	r3, #5
 8003326:	221f      	movs	r2, #31
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	4019      	ands	r1, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b05      	subs	r3, #5
 8003340:	fa00 f203 	lsl.w	r2, r0, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	635a      	str	r2, [r3, #52]	; 0x34
 800334c:	e03c      	b.n	80033c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d81c      	bhi.n	8003390 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	3b23      	subs	r3, #35	; 0x23
 8003368:	221f      	movs	r2, #31
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	4019      	ands	r1, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b23      	subs	r3, #35	; 0x23
 8003382:	fa00 f203 	lsl.w	r2, r0, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
 800338e:	e01b      	b.n	80033c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	3b41      	subs	r3, #65	; 0x41
 80033a2:	221f      	movs	r2, #31
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4019      	ands	r1, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b41      	subs	r3, #65	; 0x41
 80033bc:	fa00 f203 	lsl.w	r2, r0, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d91c      	bls.n	800340a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4019      	ands	r1, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6898      	ldr	r0, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e019      	b.n	800343e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	4019      	ands	r1, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6898      	ldr	r0, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	fa00 f203 	lsl.w	r2, r0, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d003      	beq.n	800344e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800344a:	2b11      	cmp	r3, #17
 800344c:	d132      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d125      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d126      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003474:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b10      	cmp	r3, #16
 800347c:	d11a      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_ADC_ConfigChannel+0x1e8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	0c9a      	lsrs	r2, r3, #18
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003494:	e002      	b.n	800349c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	3b01      	subs	r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f9      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x1b2>
 80034a2:	e007      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	40012400 	.word	0x40012400
 80034cc:	200004f8 	.word	0x200004f8
 80034d0:	431bde83 	.word	0x431bde83

080034d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d12e      	bne.n	800354c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034fe:	f7ff fdd9 	bl	80030b4 <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003504:	e01b      	b.n	800353e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003506:	f7ff fdd5 	bl	80030b4 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d914      	bls.n	800353e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10d      	bne.n	800353e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d0dc      	beq.n	8003506 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4906      	ldr	r1, [pc, #24]	; (80035f0 <__NVIC_EnableIRQ+0x34>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
         );
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f7ff ff90 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff2d 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003718:	f7ff ff42 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 800371c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff ff90 	bl	8003648 <NVIC_EncodePriority>
 8003728:	4602      	mov	r2, r0
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5f 	bl	80035f4 <__NVIC_SetPriority>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff35 	bl	80035bc <__NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffa2 	bl	80036ac <SysTick_Config>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003784:	2b02      	cmp	r3, #2
 8003786:	d008      	beq.n	800379a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e020      	b.n	80037dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 020e 	bic.w	r2, r2, #14
 80037a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037da:	7bfb      	ldrb	r3, [r7, #15]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d005      	beq.n	800380a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2204      	movs	r2, #4
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e0d6      	b.n	80039b8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020e 	bic.w	r2, r2, #14
 8003818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	4b64      	ldr	r3, [pc, #400]	; (80039c4 <HAL_DMA_Abort_IT+0x1dc>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d958      	bls.n	80038e8 <HAL_DMA_Abort_IT+0x100>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a63      	ldr	r2, [pc, #396]	; (80039c8 <HAL_DMA_Abort_IT+0x1e0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04f      	beq.n	80038e0 <HAL_DMA_Abort_IT+0xf8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a61      	ldr	r2, [pc, #388]	; (80039cc <HAL_DMA_Abort_IT+0x1e4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d048      	beq.n	80038dc <HAL_DMA_Abort_IT+0xf4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a60      	ldr	r2, [pc, #384]	; (80039d0 <HAL_DMA_Abort_IT+0x1e8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_Abort_IT+0xee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5e      	ldr	r2, [pc, #376]	; (80039d4 <HAL_DMA_Abort_IT+0x1ec>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d038      	beq.n	80038d0 <HAL_DMA_Abort_IT+0xe8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <HAL_DMA_Abort_IT+0x1f0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d030      	beq.n	80038ca <HAL_DMA_Abort_IT+0xe2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5b      	ldr	r2, [pc, #364]	; (80039dc <HAL_DMA_Abort_IT+0x1f4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d028      	beq.n	80038c4 <HAL_DMA_Abort_IT+0xdc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a53      	ldr	r2, [pc, #332]	; (80039c4 <HAL_DMA_Abort_IT+0x1dc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d020      	beq.n	80038be <HAL_DMA_Abort_IT+0xd6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_DMA_Abort_IT+0x1f8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d019      	beq.n	80038ba <HAL_DMA_Abort_IT+0xd2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_DMA_Abort_IT+0x1fc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d012      	beq.n	80038b6 <HAL_DMA_Abort_IT+0xce>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a54      	ldr	r2, [pc, #336]	; (80039e8 <HAL_DMA_Abort_IT+0x200>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00a      	beq.n	80038b0 <HAL_DMA_Abort_IT+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a53      	ldr	r2, [pc, #332]	; (80039ec <HAL_DMA_Abort_IT+0x204>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d102      	bne.n	80038aa <HAL_DMA_Abort_IT+0xc2>
 80038a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a8:	e01b      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ae:	e018      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b4:	e015      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038b6:	2310      	movs	r3, #16
 80038b8:	e013      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e011      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038c2:	e00e      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038c8:	e00b      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ce:	e008      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d4:	e005      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038da:	e002      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038dc:	2310      	movs	r3, #16
 80038de:	e000      	b.n	80038e2 <HAL_DMA_Abort_IT+0xfa>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4a43      	ldr	r2, [pc, #268]	; (80039f0 <HAL_DMA_Abort_IT+0x208>)
 80038e4:	6053      	str	r3, [r2, #4]
 80038e6:	e057      	b.n	8003998 <HAL_DMA_Abort_IT+0x1b0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a36      	ldr	r2, [pc, #216]	; (80039c8 <HAL_DMA_Abort_IT+0x1e0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d04f      	beq.n	8003992 <HAL_DMA_Abort_IT+0x1aa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a35      	ldr	r2, [pc, #212]	; (80039cc <HAL_DMA_Abort_IT+0x1e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d048      	beq.n	800398e <HAL_DMA_Abort_IT+0x1a6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a33      	ldr	r2, [pc, #204]	; (80039d0 <HAL_DMA_Abort_IT+0x1e8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d040      	beq.n	8003988 <HAL_DMA_Abort_IT+0x1a0>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a32      	ldr	r2, [pc, #200]	; (80039d4 <HAL_DMA_Abort_IT+0x1ec>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d038      	beq.n	8003982 <HAL_DMA_Abort_IT+0x19a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <HAL_DMA_Abort_IT+0x1f0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d030      	beq.n	800397c <HAL_DMA_Abort_IT+0x194>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <HAL_DMA_Abort_IT+0x1f4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d028      	beq.n	8003976 <HAL_DMA_Abort_IT+0x18e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <HAL_DMA_Abort_IT+0x1dc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d020      	beq.n	8003970 <HAL_DMA_Abort_IT+0x188>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <HAL_DMA_Abort_IT+0x1f8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d019      	beq.n	800396c <HAL_DMA_Abort_IT+0x184>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a29      	ldr	r2, [pc, #164]	; (80039e4 <HAL_DMA_Abort_IT+0x1fc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d012      	beq.n	8003968 <HAL_DMA_Abort_IT+0x180>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <HAL_DMA_Abort_IT+0x200>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00a      	beq.n	8003962 <HAL_DMA_Abort_IT+0x17a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <HAL_DMA_Abort_IT+0x204>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d102      	bne.n	800395c <HAL_DMA_Abort_IT+0x174>
 8003956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395a:	e01b      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 800395c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003960:	e018      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003966:	e015      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003968:	2310      	movs	r3, #16
 800396a:	e013      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 800396c:	2301      	movs	r3, #1
 800396e:	e011      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003974:	e00e      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003976:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800397a:	e00b      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 800397c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003980:	e008      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003986:	e005      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800398c:	e002      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 800398e:	2310      	movs	r3, #16
 8003990:	e000      	b.n	8003994 <HAL_DMA_Abort_IT+0x1ac>
 8003992:	2301      	movs	r3, #1
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_DMA_Abort_IT+0x20c>)
 8003996:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
    } 
  }
  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40020080 	.word	0x40020080
 80039c8:	40020008 	.word	0x40020008
 80039cc:	4002001c 	.word	0x4002001c
 80039d0:	40020030 	.word	0x40020030
 80039d4:	40020044 	.word	0x40020044
 80039d8:	40020058 	.word	0x40020058
 80039dc:	4002006c 	.word	0x4002006c
 80039e0:	40020408 	.word	0x40020408
 80039e4:	4002041c 	.word	0x4002041c
 80039e8:	40020430 	.word	0x40020430
 80039ec:	40020444 	.word	0x40020444
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020000 	.word	0x40020000

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b08b      	sub	sp, #44	; 0x2c
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0a:	e179      	b.n	8003d00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	f040 8168 	bne.w	8003cfa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a96      	ldr	r2, [pc, #600]	; (8003c88 <HAL_GPIO_Init+0x290>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d05e      	beq.n	8003af2 <HAL_GPIO_Init+0xfa>
 8003a34:	4a94      	ldr	r2, [pc, #592]	; (8003c88 <HAL_GPIO_Init+0x290>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d875      	bhi.n	8003b26 <HAL_GPIO_Init+0x12e>
 8003a3a:	4a94      	ldr	r2, [pc, #592]	; (8003c8c <HAL_GPIO_Init+0x294>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d058      	beq.n	8003af2 <HAL_GPIO_Init+0xfa>
 8003a40:	4a92      	ldr	r2, [pc, #584]	; (8003c8c <HAL_GPIO_Init+0x294>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d86f      	bhi.n	8003b26 <HAL_GPIO_Init+0x12e>
 8003a46:	4a92      	ldr	r2, [pc, #584]	; (8003c90 <HAL_GPIO_Init+0x298>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d052      	beq.n	8003af2 <HAL_GPIO_Init+0xfa>
 8003a4c:	4a90      	ldr	r2, [pc, #576]	; (8003c90 <HAL_GPIO_Init+0x298>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d869      	bhi.n	8003b26 <HAL_GPIO_Init+0x12e>
 8003a52:	4a90      	ldr	r2, [pc, #576]	; (8003c94 <HAL_GPIO_Init+0x29c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d04c      	beq.n	8003af2 <HAL_GPIO_Init+0xfa>
 8003a58:	4a8e      	ldr	r2, [pc, #568]	; (8003c94 <HAL_GPIO_Init+0x29c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d863      	bhi.n	8003b26 <HAL_GPIO_Init+0x12e>
 8003a5e:	4a8e      	ldr	r2, [pc, #568]	; (8003c98 <HAL_GPIO_Init+0x2a0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d046      	beq.n	8003af2 <HAL_GPIO_Init+0xfa>
 8003a64:	4a8c      	ldr	r2, [pc, #560]	; (8003c98 <HAL_GPIO_Init+0x2a0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d85d      	bhi.n	8003b26 <HAL_GPIO_Init+0x12e>
 8003a6a:	2b12      	cmp	r3, #18
 8003a6c:	d82a      	bhi.n	8003ac4 <HAL_GPIO_Init+0xcc>
 8003a6e:	2b12      	cmp	r3, #18
 8003a70:	d859      	bhi.n	8003b26 <HAL_GPIO_Init+0x12e>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <HAL_GPIO_Init+0x80>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003af3 	.word	0x08003af3
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003adf 	.word	0x08003adf
 8003a84:	08003b21 	.word	0x08003b21
 8003a88:	08003b27 	.word	0x08003b27
 8003a8c:	08003b27 	.word	0x08003b27
 8003a90:	08003b27 	.word	0x08003b27
 8003a94:	08003b27 	.word	0x08003b27
 8003a98:	08003b27 	.word	0x08003b27
 8003a9c:	08003b27 	.word	0x08003b27
 8003aa0:	08003b27 	.word	0x08003b27
 8003aa4:	08003b27 	.word	0x08003b27
 8003aa8:	08003b27 	.word	0x08003b27
 8003aac:	08003b27 	.word	0x08003b27
 8003ab0:	08003b27 	.word	0x08003b27
 8003ab4:	08003b27 	.word	0x08003b27
 8003ab8:	08003b27 	.word	0x08003b27
 8003abc:	08003ad5 	.word	0x08003ad5
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	4a75      	ldr	r2, [pc, #468]	; (8003c9c <HAL_GPIO_Init+0x2a4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aca:	e02c      	b.n	8003b26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	623b      	str	r3, [r7, #32]
          break;
 8003ad2:	e029      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	623b      	str	r3, [r7, #32]
          break;
 8003adc:	e024      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	623b      	str	r3, [r7, #32]
          break;
 8003ae6:	e01f      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	330c      	adds	r3, #12
 8003aee:	623b      	str	r3, [r7, #32]
          break;
 8003af0:	e01a      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003afa:	2304      	movs	r3, #4
 8003afc:	623b      	str	r3, [r7, #32]
          break;
 8003afe:	e013      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b08:	2308      	movs	r3, #8
 8003b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	611a      	str	r2, [r3, #16]
          break;
 8003b12:	e009      	b.n	8003b28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b14:	2308      	movs	r3, #8
 8003b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	615a      	str	r2, [r3, #20]
          break;
 8003b1e:	e003      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b20:	2300      	movs	r3, #0
 8003b22:	623b      	str	r3, [r7, #32]
          break;
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x130>
          break;
 8003b26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d801      	bhi.n	8003b32 <HAL_GPIO_Init+0x13a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	e001      	b.n	8003b36 <HAL_GPIO_Init+0x13e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2bff      	cmp	r3, #255	; 0xff
 8003b3c:	d802      	bhi.n	8003b44 <HAL_GPIO_Init+0x14c>
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	e002      	b.n	8003b4a <HAL_GPIO_Init+0x152>
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	3b08      	subs	r3, #8
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	210f      	movs	r1, #15
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	fa01 f303 	lsl.w	r3, r1, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	6a39      	ldr	r1, [r7, #32]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80c1 	beq.w	8003cfa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_GPIO_Init+0x2a8>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	4a48      	ldr	r2, [pc, #288]	; (8003ca0 <HAL_GPIO_Init+0x2a8>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6193      	str	r3, [r2, #24]
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_GPIO_Init+0x2a8>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b90:	4a44      	ldr	r2, [pc, #272]	; (8003ca4 <HAL_GPIO_Init+0x2ac>)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	220f      	movs	r2, #15
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	; (8003ca8 <HAL_GPIO_Init+0x2b0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01f      	beq.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	; (8003cac <HAL_GPIO_Init+0x2b4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d019      	beq.n	8003bf8 <HAL_GPIO_Init+0x200>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_GPIO_Init+0x2b8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_GPIO_Init+0x1fc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a39      	ldr	r2, [pc, #228]	; (8003cb4 <HAL_GPIO_Init+0x2bc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_GPIO_Init+0x1f8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <HAL_GPIO_Init+0x2c0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <HAL_GPIO_Init+0x1f4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a37      	ldr	r2, [pc, #220]	; (8003cbc <HAL_GPIO_Init+0x2c4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_GPIO_Init+0x1f0>
 8003be4:	2305      	movs	r3, #5
 8003be6:	e00a      	b.n	8003bfe <HAL_GPIO_Init+0x206>
 8003be8:	2306      	movs	r3, #6
 8003bea:	e008      	b.n	8003bfe <HAL_GPIO_Init+0x206>
 8003bec:	2304      	movs	r3, #4
 8003bee:	e006      	b.n	8003bfe <HAL_GPIO_Init+0x206>
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e004      	b.n	8003bfe <HAL_GPIO_Init+0x206>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e002      	b.n	8003bfe <HAL_GPIO_Init+0x206>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_GPIO_Init+0x206>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	f002 0203 	and.w	r2, r2, #3
 8003c04:	0092      	lsls	r2, r2, #2
 8003c06:	4093      	lsls	r3, r2
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c0e:	4925      	ldr	r1, [pc, #148]	; (8003ca4 <HAL_GPIO_Init+0x2ac>)
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4924      	ldr	r1, [pc, #144]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	4920      	ldr	r1, [pc, #128]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	491a      	ldr	r1, [pc, #104]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d025      	beq.n	8003cc4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4910      	ldr	r1, [pc, #64]	; (8003cc0 <HAL_GPIO_Init+0x2c8>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]
 8003c84:	e025      	b.n	8003cd2 <HAL_GPIO_Init+0x2da>
 8003c86:	bf00      	nop
 8003c88:	10320000 	.word	0x10320000
 8003c8c:	10310000 	.word	0x10310000
 8003c90:	10220000 	.word	0x10220000
 8003c94:	10210000 	.word	0x10210000
 8003c98:	10120000 	.word	0x10120000
 8003c9c:	10110000 	.word	0x10110000
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40010800 	.word	0x40010800
 8003cac:	40010c00 	.word	0x40010c00
 8003cb0:	40011000 	.word	0x40011000
 8003cb4:	40011400 	.word	0x40011400
 8003cb8:	40011800 	.word	0x40011800
 8003cbc:	40011c00 	.word	0x40011c00
 8003cc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	4913      	ldr	r1, [pc, #76]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	490e      	ldr	r1, [pc, #56]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60cb      	str	r3, [r1, #12]
 8003cea:	e006      	b.n	8003cfa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	4909      	ldr	r1, [pc, #36]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f ae7e 	bne.w	8003a0c <HAL_GPIO_Init+0x14>
  }
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	372c      	adds	r7, #44	; 0x2c
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40010400 	.word	0x40010400

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d3c:	e003      	b.n	8003d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	611a      	str	r2, [r3, #16]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4013      	ands	r3, r2
 8003d68:	041a      	lsls	r2, r3, #16
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43d9      	mvns	r1, r3
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	400b      	ands	r3, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	611a      	str	r2, [r3, #16]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe f882 	bl	8001eac <HAL_GPIO_EXTI_Callback>
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40010400 	.word	0x40010400

08003db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e12b      	b.n	800401e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fd4e 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	; 0x24
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e18:	f000 fce6 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4a81      	ldr	r2, [pc, #516]	; (8004028 <HAL_I2C_Init+0x274>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d807      	bhi.n	8003e38 <HAL_I2C_Init+0x84>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a80      	ldr	r2, [pc, #512]	; (800402c <HAL_I2C_Init+0x278>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	bf94      	ite	ls
 8003e30:	2301      	movls	r3, #1
 8003e32:	2300      	movhi	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e006      	b.n	8003e46 <HAL_I2C_Init+0x92>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a7d      	ldr	r2, [pc, #500]	; (8004030 <HAL_I2C_Init+0x27c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bf94      	ite	ls
 8003e40:	2301      	movls	r3, #1
 8003e42:	2300      	movhi	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0e7      	b.n	800401e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a78      	ldr	r2, [pc, #480]	; (8004034 <HAL_I2C_Init+0x280>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0c9b      	lsrs	r3, r3, #18
 8003e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a6a      	ldr	r2, [pc, #424]	; (8004028 <HAL_I2C_Init+0x274>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d802      	bhi.n	8003e88 <HAL_I2C_Init+0xd4>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3301      	adds	r3, #1
 8003e86:	e009      	b.n	8003e9c <HAL_I2C_Init+0xe8>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	4a69      	ldr	r2, [pc, #420]	; (8004038 <HAL_I2C_Init+0x284>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	495c      	ldr	r1, [pc, #368]	; (8004028 <HAL_I2C_Init+0x274>)
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	d819      	bhi.n	8003ef0 <HAL_I2C_Init+0x13c>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e59      	subs	r1, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eca:	1c59      	adds	r1, r3, #1
 8003ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ed0:	400b      	ands	r3, r1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_I2C_Init+0x138>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e59      	subs	r1, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eea:	e051      	b.n	8003f90 <HAL_I2C_Init+0x1dc>
 8003eec:	2304      	movs	r3, #4
 8003eee:	e04f      	b.n	8003f90 <HAL_I2C_Init+0x1dc>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d111      	bne.n	8003f1c <HAL_I2C_Init+0x168>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1e58      	subs	r0, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	440b      	add	r3, r1
 8003f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e012      	b.n	8003f42 <HAL_I2C_Init+0x18e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	0099      	lsls	r1, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Init+0x196>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e022      	b.n	8003f90 <HAL_I2C_Init+0x1dc>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10e      	bne.n	8003f70 <HAL_I2C_Init+0x1bc>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e58      	subs	r0, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	440b      	add	r3, r1
 8003f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6e:	e00f      	b.n	8003f90 <HAL_I2C_Init+0x1dc>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1e58      	subs	r0, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	0099      	lsls	r1, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	6809      	ldr	r1, [r1, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6911      	ldr	r1, [r2, #16]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68d2      	ldr	r2, [r2, #12]
 8003fca:	4311      	orrs	r1, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	000186a0 	.word	0x000186a0
 800402c:	001e847f 	.word	0x001e847f
 8004030:	003d08ff 	.word	0x003d08ff
 8004034:	431bde83 	.word	0x431bde83
 8004038:	10624dd3 	.word	0x10624dd3

0800403c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e272      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8087 	beq.w	800416a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800405c:	4b92      	ldr	r3, [pc, #584]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b04      	cmp	r3, #4
 8004066:	d00c      	beq.n	8004082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004068:	4b8f      	ldr	r3, [pc, #572]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d112      	bne.n	800409a <HAL_RCC_OscConfig+0x5e>
 8004074:	4b8c      	ldr	r3, [pc, #560]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004080:	d10b      	bne.n	800409a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004082:	4b89      	ldr	r3, [pc, #548]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d06c      	beq.n	8004168 <HAL_RCC_OscConfig+0x12c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d168      	bne.n	8004168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e24c      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x76>
 80040a4:	4b80      	ldr	r3, [pc, #512]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a7f      	ldr	r2, [pc, #508]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e02e      	b.n	8004110 <HAL_RCC_OscConfig+0xd4>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x98>
 80040ba:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7a      	ldr	r2, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e01d      	b.n	8004110 <HAL_RCC_OscConfig+0xd4>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0xbc>
 80040de:	4b72      	ldr	r3, [pc, #456]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a71      	ldr	r2, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b6f      	ldr	r3, [pc, #444]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6e      	ldr	r2, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0xd4>
 80040f8:	4b6b      	ldr	r3, [pc, #428]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6a      	ldr	r2, [pc, #424]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a67      	ldr	r2, [pc, #412]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 800410a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe ffcc 	bl	80030b4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7fe ffc8 	bl	80030b4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e200      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0xe4>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe ffb8 	bl	80030b4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe ffb4 	bl	80030b4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e1ec      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415a:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x10c>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d063      	beq.n	800423e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004176:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004182:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b08      	cmp	r3, #8
 800418c:	d11c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x18c>
 800418e:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_RCC_OscConfig+0x176>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e1c0      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4939      	ldr	r1, [pc, #228]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c6:	e03a      	b.n	800423e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d0:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fe ff6d 	bl	80030b4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041de:	f7fe ff69 	bl	80030b4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1a1      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fc:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4927      	ldr	r1, [pc, #156]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004212:	4b26      	ldr	r3, [pc, #152]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe ff4c 	bl	80030b4 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004220:	f7fe ff48 	bl	80030b4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e180      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03a      	beq.n	80042c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d019      	beq.n	8004286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004258:	f7fe ff2c 	bl	80030b4 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe ff28 	bl	80030b4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e160      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <HAL_RCC_OscConfig+0x26c>)
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800427e:	2001      	movs	r0, #1
 8004280:	f000 fada 	bl	8004838 <RCC_Delay>
 8004284:	e01c      	b.n	80042c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428c:	f7fe ff12 	bl	80030b4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004292:	e00f      	b.n	80042b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004294:	f7fe ff0e 	bl	80030b4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d908      	bls.n	80042b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e146      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	42420000 	.word	0x42420000
 80042b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b4:	4b92      	ldr	r3, [pc, #584]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e9      	bne.n	8004294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a6 	beq.w	800441a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d2:	4b8b      	ldr	r3, [pc, #556]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042de:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4a87      	ldr	r2, [pc, #540]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e8:	61d3      	str	r3, [r2, #28]
 80042ea:	4b85      	ldr	r3, [pc, #532]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f6:	2301      	movs	r3, #1
 80042f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	4b82      	ldr	r3, [pc, #520]	; (8004504 <HAL_RCC_OscConfig+0x4c8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d118      	bne.n	8004338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004306:	4b7f      	ldr	r3, [pc, #508]	; (8004504 <HAL_RCC_OscConfig+0x4c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7e      	ldr	r2, [pc, #504]	; (8004504 <HAL_RCC_OscConfig+0x4c8>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004312:	f7fe fecf 	bl	80030b4 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431a:	f7fe fecb 	bl	80030b4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b64      	cmp	r3, #100	; 0x64
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e103      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	4b75      	ldr	r3, [pc, #468]	; (8004504 <HAL_RCC_OscConfig+0x4c8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <HAL_RCC_OscConfig+0x312>
 8004340:	4b6f      	ldr	r3, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a6e      	ldr	r2, [pc, #440]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	e02d      	b.n	80043aa <HAL_RCC_OscConfig+0x36e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x334>
 8004356:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4a69      	ldr	r2, [pc, #420]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	6213      	str	r3, [r2, #32]
 8004362:	4b67      	ldr	r3, [pc, #412]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a66      	ldr	r2, [pc, #408]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004368:	f023 0304 	bic.w	r3, r3, #4
 800436c:	6213      	str	r3, [r2, #32]
 800436e:	e01c      	b.n	80043aa <HAL_RCC_OscConfig+0x36e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d10c      	bne.n	8004392 <HAL_RCC_OscConfig+0x356>
 8004378:	4b61      	ldr	r3, [pc, #388]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4a60      	ldr	r2, [pc, #384]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	6213      	str	r3, [r2, #32]
 8004384:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4a5d      	ldr	r2, [pc, #372]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6213      	str	r3, [r2, #32]
 8004390:	e00b      	b.n	80043aa <HAL_RCC_OscConfig+0x36e>
 8004392:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4a5a      	ldr	r2, [pc, #360]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	6213      	str	r3, [r2, #32]
 800439e:	4b58      	ldr	r3, [pc, #352]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4a57      	ldr	r2, [pc, #348]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d015      	beq.n	80043de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b2:	f7fe fe7f 	bl	80030b4 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe fe7b 	bl	80030b4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0b1      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ee      	beq.n	80043ba <HAL_RCC_OscConfig+0x37e>
 80043dc:	e014      	b.n	8004408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fe fe69 	bl	80030b4 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe fe65 	bl	80030b4 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e09b      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ee      	bne.n	80043e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440e:	4b3c      	ldr	r3, [pc, #240]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8087 	beq.w	8004532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004424:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d061      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d146      	bne.n	80044c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCC_OscConfig+0x4cc>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fe fe39 	bl	80030b4 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004446:	f7fe fe35 	bl	80030b4 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e06d      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004458:	4b29      	ldr	r3, [pc, #164]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d108      	bne.n	8004480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4921      	ldr	r1, [pc, #132]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a19      	ldr	r1, [r3, #32]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	430b      	orrs	r3, r1
 8004492:	491b      	ldr	r1, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCC_OscConfig+0x4cc>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fe fe09 	bl	80030b4 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fe fe05 	bl	80030b4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e03d      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x46a>
 80044c4:	e035      	b.n	8004532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_RCC_OscConfig+0x4cc>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fe fdf2 	bl	80030b4 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fe fdee 	bl	80030b4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e026      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x498>
 80044f2:	e01e      	b.n	8004532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e019      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
 8004508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_OscConfig+0x500>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	429a      	cmp	r2, r3
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000

08004540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0d0      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d910      	bls.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0207 	bic.w	r2, r3, #7
 800456a:	4965      	ldr	r1, [pc, #404]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b4:	4b53      	ldr	r3, [pc, #332]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	494d      	ldr	r1, [pc, #308]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d040      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e073      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06b      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4936      	ldr	r1, [pc, #216]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7fe fd40 	bl	80030b4 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fe fd3c 	bl	80030b4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e053      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d210      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e032      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4916      	ldr	r1, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	490e      	ldr	r1, [pc, #56]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ce:	f000 f821 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	490a      	ldr	r1, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1cc>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1d0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe fc9e 	bl	8003030 <HAL_InitTick>

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	0800b730 	.word	0x0800b730
 800470c:	200004f8 	.word	0x200004f8
 8004710:	200004fc 	.word	0x200004fc

08004714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b490      	push	{r4, r7}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800471c:	1d3c      	adds	r4, r7, #4
 800471e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004724:	f240 2301 	movw	r3, #513	; 0x201
 8004728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b04      	cmp	r3, #4
 800474c:	d002      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x40>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d003      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x46>
 8004752:	e02b      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004754:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004756:	623b      	str	r3, [r7, #32]
      break;
 8004758:	e02b      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	0c9b      	lsrs	r3, r3, #18
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3328      	adds	r3, #40	; 0x28
 8004764:	443b      	add	r3, r7
 8004766:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800476a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	0c5b      	lsrs	r3, r3, #17
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	3328      	adds	r3, #40	; 0x28
 8004782:	443b      	add	r3, r7
 8004784:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004788:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800478e:	fb03 f202 	mul.w	r2, r3, r2
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	e004      	b.n	80047a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4a0b      	ldr	r2, [pc, #44]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	623b      	str	r3, [r7, #32]
      break;
 80047aa:	e002      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047ae:	623b      	str	r3, [r7, #32]
      break;
 80047b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b2:	6a3b      	ldr	r3, [r7, #32]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc90      	pop	{r4, r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	0800b720 	.word	0x0800b720
 80047c4:	40021000 	.word	0x40021000
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	003d0900 	.word	0x003d0900
 80047d0:	007a1200 	.word	0x007a1200

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	200004f8 	.word	0x200004f8

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047ec:	f7ff fff2 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4903      	ldr	r1, [pc, #12]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000
 800480c:	0800b740 	.word	0x0800b740

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004814:	f7ff ffde 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	0adb      	lsrs	r3, r3, #11
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	0800b740 	.word	0x0800b740

08004838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <RCC_Delay+0x34>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <RCC_Delay+0x38>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0a5b      	lsrs	r3, r3, #9
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004854:	bf00      	nop
  }
  while (Delay --);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f9      	bne.n	8004854 <RCC_Delay+0x1c>
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	200004f8 	.word	0x200004f8
 8004870:	10624dd3 	.word	0x10624dd3

08004874 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d07d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4a4b      	ldr	r2, [pc, #300]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048aa:	61d3      	str	r3, [r2, #28]
 80048ac:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d118      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c8:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a42      	ldr	r2, [pc, #264]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d4:	f7fe fbee 	bl	80030b4 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	e008      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048dc:	f7fe fbea 	bl	80030b4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e06d      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02e      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d027      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004918:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800492e:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fe fbb9 	bl	80030b4 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004944:	e00a      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004946:	f7fe fbb5 	bl	80030b4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f241 3288 	movw	r2, #5000	; 0x1388
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e036      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ee      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4917      	ldr	r1, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	4313      	orrs	r3, r2
 8004978:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	490b      	ldr	r1, [pc, #44]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	4904      	ldr	r1, [pc, #16]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42420440 	.word	0x42420440

080049e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e041      	b.n	8004a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fe f86a 	bl	8002ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 fe7e 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d001      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e044      	b.n	8004b22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <HAL_TIM_Base_Start_IT+0xac>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d111      	bne.n	8004b10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d010      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	e007      	b.n	8004b20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00

08004b40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e041      	b.n	8004bd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f839 	bl	8004bde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 fdce 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start+0x24>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e022      	b.n	8004c5a <HAL_TIM_PWM_Start+0x6a>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d109      	bne.n	8004c2e <HAL_TIM_PWM_Start+0x3e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e015      	b.n	8004c5a <HAL_TIM_PWM_Start+0x6a>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d109      	bne.n	8004c48 <HAL_TIM_PWM_Start+0x58>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e008      	b.n	8004c5a <HAL_TIM_PWM_Start+0x6a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e072      	b.n	8004d48 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x82>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c70:	e013      	b.n	8004c9a <HAL_TIM_PWM_Start+0xaa>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_PWM_Start+0x92>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c80:	e00b      	b.n	8004c9a <HAL_TIM_PWM_Start+0xaa>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_PWM_Start+0xa2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c90:	e003      	b.n	8004c9a <HAL_TIM_PWM_Start+0xaa>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fff8 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <HAL_TIM_PWM_Start+0x160>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIM_PWM_Start+0xcc>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <HAL_TIM_PWM_Start+0x164>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_PWM_Start+0xd0>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <HAL_TIM_PWM_Start+0xd2>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_TIM_PWM_Start+0x160>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x122>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <HAL_TIM_PWM_Start+0x164>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x122>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d00e      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x122>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_TIM_PWM_Start+0x168>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x122>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIM_PWM_Start+0x16c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x122>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <HAL_TIM_PWM_Start+0x170>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d111      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d010      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	e007      	b.n	8004d46 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00

08004d64 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start_IT+0x24>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e022      	b.n	8004dce <HAL_TIM_PWM_Start_IT+0x6a>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d109      	bne.n	8004da2 <HAL_TIM_PWM_Start_IT+0x3e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e015      	b.n	8004dce <HAL_TIM_PWM_Start_IT+0x6a>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_PWM_Start_IT+0x58>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e008      	b.n	8004dce <HAL_TIM_PWM_Start_IT+0x6a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0b8      	b.n	8004f48 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start_IT+0x82>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_PWM_Start_IT+0xaa>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start_IT+0x92>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_PWM_Start_IT+0xaa>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start_IT+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_PWM_Start_IT+0xaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	d841      	bhi.n	8004e98 <HAL_TIM_PWM_Start_IT+0x134>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_TIM_PWM_Start_IT+0xb8>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e99 	.word	0x08004e99
 8004e24:	08004e99 	.word	0x08004e99
 8004e28:	08004e99 	.word	0x08004e99
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e99 	.word	0x08004e99
 8004e34:	08004e99 	.word	0x08004e99
 8004e38:	08004e99 	.word	0x08004e99
 8004e3c:	08004e75 	.word	0x08004e75
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004e87 	.word	0x08004e87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0202 	orr.w	r2, r2, #2
 8004e5e:	60da      	str	r2, [r3, #12]
      break;
 8004e60:	e01b      	b.n	8004e9a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0204 	orr.w	r2, r2, #4
 8004e70:	60da      	str	r2, [r3, #12]
      break;
 8004e72:	e012      	b.n	8004e9a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	60da      	str	r2, [r3, #12]
      break;
 8004e84:	e009      	b.n	8004e9a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0210 	orr.w	r2, r2, #16
 8004e94:	60da      	str	r2, [r3, #12]
      break;
 8004e96:	e000      	b.n	8004e9a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004e98:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fef8 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a28      	ldr	r2, [pc, #160]	; (8004f50 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_PWM_Start_IT+0x158>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_PWM_Start_IT+0x15c>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_TIM_PWM_Start_IT+0x15e>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d111      	bne.n	8004f36 <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	d010      	beq.n	8004f46 <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	e007      	b.n	8004f46 <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00

08004f64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e093      	b.n	80050a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fd fe19 	bl	8002bc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa8:	f023 0307 	bic.w	r3, r3, #7
 8004fac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 fbb1 	bl	8005720 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005004:	f023 030c 	bic.w	r3, r3, #12
 8005008:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	4313      	orrs	r3, r2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	031b      	lsls	r3, r3, #12
 8005034:	4313      	orrs	r3, r2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	4313      	orrs	r3, r2
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d110      	bne.n	80050fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d102      	bne.n	80050e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050de:	7b7b      	ldrb	r3, [r7, #13]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d001      	beq.n	80050e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e069      	b.n	80051bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	e031      	b.n	800515e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d110      	bne.n	8005122 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005106:	7b3b      	ldrb	r3, [r7, #12]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e055      	b.n	80051bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005120:	e01d      	b.n	800515e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d108      	bne.n	800513a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005128:	7bbb      	ldrb	r3, [r7, #14]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d105      	bne.n	800513a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800512e:	7b7b      	ldrb	r3, [r7, #13]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d102      	bne.n	800513a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005134:	7b3b      	ldrb	r3, [r7, #12]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d001      	beq.n	800513e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e03e      	b.n	80051bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_TIM_Encoder_Start+0xc4>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d008      	beq.n	800517c <HAL_TIM_Encoder_Start+0xd4>
 800516a:	e00f      	b.n	800518c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fd8f 	bl	8005c98 <TIM_CCxChannelCmd>
      break;
 800517a:	e016      	b.n	80051aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	2104      	movs	r1, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fd87 	bl	8005c98 <TIM_CCxChannelCmd>
      break;
 800518a:	e00e      	b.n	80051aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2201      	movs	r2, #1
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fd7f 	bl	8005c98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	2104      	movs	r1, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fd78 	bl	8005c98 <TIM_CCxChannelCmd>
      break;
 80051a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0202 	mvn.w	r2, #2
 80051f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa6f 	bl	80056ea <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa62 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa71 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0204 	mvn.w	r2, #4
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa45 	bl	80056ea <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa38 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa47 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b08      	cmp	r3, #8
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0208 	mvn.w	r2, #8
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2204      	movs	r2, #4
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa1b 	bl	80056ea <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa0e 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa1d 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0210 	mvn.w	r2, #16
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2208      	movs	r2, #8
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9f1 	bl	80056ea <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9e4 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f9f3 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d10e      	bne.n	8005348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fc70 	bl	8001c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d10e      	bne.n	8005374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b80      	cmp	r3, #128	; 0x80
 8005362:	d107      	bne.n	8005374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fd7c 	bl	8005e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d10e      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d107      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9b7 	bl	800570e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d10e      	bne.n	80053cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d107      	bne.n	80053cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0220 	mvn.w	r2, #32
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fd47 	bl	8005e5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0ac      	b.n	8005548 <HAL_TIM_PWM_ConfigChannel+0x174>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	f200 809f 	bhi.w	800553c <HAL_TIM_PWM_ConfigChannel+0x168>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005439 	.word	0x08005439
 8005408:	0800553d 	.word	0x0800553d
 800540c:	0800553d 	.word	0x0800553d
 8005410:	0800553d 	.word	0x0800553d
 8005414:	08005479 	.word	0x08005479
 8005418:	0800553d 	.word	0x0800553d
 800541c:	0800553d 	.word	0x0800553d
 8005420:	0800553d 	.word	0x0800553d
 8005424:	080054bb 	.word	0x080054bb
 8005428:	0800553d 	.word	0x0800553d
 800542c:	0800553d 	.word	0x0800553d
 8005430:	0800553d 	.word	0x0800553d
 8005434:	080054fb 	.word	0x080054fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f9e8 	bl	8005814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	619a      	str	r2, [r3, #24]
      break;
 8005476:	e062      	b.n	800553e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fa38 	bl	80058f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      break;
 80054b8:	e041      	b.n	800553e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fa8b 	bl	80059dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0208 	orr.w	r2, r2, #8
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
      break;
 80054f8:	e021      	b.n	800553e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fadf 	bl	8005ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
      break;
 800553a:	e000      	b.n	800553e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800553c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIM_ConfigClockSource+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e0b3      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x180>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a0:	d03e      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xd0>
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a6:	f200 8087 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	f000 8085 	beq.w	80056bc <HAL_TIM_ConfigClockSource+0x16c>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	d87f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055b8:	2b70      	cmp	r3, #112	; 0x70
 80055ba:	d01a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xa2>
 80055bc:	2b70      	cmp	r3, #112	; 0x70
 80055be:	d87b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055c0:	2b60      	cmp	r3, #96	; 0x60
 80055c2:	d050      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x116>
 80055c4:	2b60      	cmp	r3, #96	; 0x60
 80055c6:	d877      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055c8:	2b50      	cmp	r3, #80	; 0x50
 80055ca:	d03c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xf6>
 80055cc:	2b50      	cmp	r3, #80	; 0x50
 80055ce:	d873      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d058      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x136>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d86f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d064      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x156>
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d86b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d060      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x156>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d867      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x156>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d05a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055f0:	e062      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f000 fb2a 	bl	8005c5a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005614:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	609a      	str	r2, [r3, #8]
      break;
 800561e:	e04e      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f000 fb13 	bl	8005c5a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005642:	609a      	str	r2, [r3, #8]
      break;
 8005644:	e03b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	461a      	mov	r2, r3
 8005654:	f000 fa8a 	bl	8005b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2150      	movs	r1, #80	; 0x50
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fae1 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8005664:	e02b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	461a      	mov	r2, r3
 8005674:	f000 faa8 	bl	8005bc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2160      	movs	r1, #96	; 0x60
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fad1 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8005684:	e01b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	461a      	mov	r2, r3
 8005694:	f000 fa6a 	bl	8005b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2140      	movs	r1, #64	; 0x40
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fac1 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 80056a4:	e00b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fab8 	bl	8005c26 <TIM_ITRx_SetConfig>
        break;
 80056b6:	e002      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a33      	ldr	r2, [pc, #204]	; (8005800 <TIM_Base_SetConfig+0xe0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a32      	ldr	r2, [pc, #200]	; (8005804 <TIM_Base_SetConfig+0xe4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00f      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005746:	d00b      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <TIM_Base_SetConfig+0xe8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d007      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a2e      	ldr	r2, [pc, #184]	; (800580c <TIM_Base_SetConfig+0xec>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <TIM_Base_SetConfig+0xf0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d108      	bne.n	8005772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <TIM_Base_SetConfig+0xe0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <TIM_Base_SetConfig+0x82>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a21      	ldr	r2, [pc, #132]	; (8005804 <TIM_Base_SetConfig+0xe4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00f      	beq.n	80057a2 <TIM_Base_SetConfig+0x82>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005788:	d00b      	beq.n	80057a2 <TIM_Base_SetConfig+0x82>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <TIM_Base_SetConfig+0xe8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <TIM_Base_SetConfig+0x82>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <TIM_Base_SetConfig+0xec>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_Base_SetConfig+0x82>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <TIM_Base_SetConfig+0xf0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <TIM_Base_SetConfig+0xe0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0xc8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a08      	ldr	r2, [pc, #32]	; (8005804 <TIM_Base_SetConfig+0xe4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d103      	bne.n	80057f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	615a      	str	r2, [r3, #20]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40013400 	.word	0x40013400
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00

08005814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 0302 	bic.w	r3, r3, #2
 800585c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a20      	ldr	r2, [pc, #128]	; (80058ec <TIM_OC1_SetConfig+0xd8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC1_SetConfig+0x64>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <TIM_OC1_SetConfig+0xdc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d10c      	bne.n	8005892 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0308 	bic.w	r3, r3, #8
 800587e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a15      	ldr	r2, [pc, #84]	; (80058ec <TIM_OC1_SetConfig+0xd8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_OC1_SetConfig+0x8e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <TIM_OC1_SetConfig+0xdc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d111      	bne.n	80058c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400

080058f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0210 	bic.w	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f023 0320 	bic.w	r3, r3, #32
 800593e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <TIM_OC2_SetConfig+0xe0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC2_SetConfig+0x68>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <TIM_OC2_SetConfig+0xe4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10d      	bne.n	8005978 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <TIM_OC2_SetConfig+0xe0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_OC2_SetConfig+0x94>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <TIM_OC2_SetConfig+0xe4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d113      	bne.n	80059b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800598e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400

080059dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a21      	ldr	r2, [pc, #132]	; (8005abc <TIM_OC3_SetConfig+0xe0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC3_SetConfig+0x66>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a20      	ldr	r2, [pc, #128]	; (8005ac0 <TIM_OC3_SetConfig+0xe4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10d      	bne.n	8005a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a16      	ldr	r2, [pc, #88]	; (8005abc <TIM_OC3_SetConfig+0xe0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC3_SetConfig+0x92>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <TIM_OC3_SetConfig+0xe4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d113      	bne.n	8005a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	621a      	str	r2, [r3, #32]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40013400 	.word	0x40013400

08005ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <TIM_OC4_SetConfig+0xa0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC4_SetConfig+0x68>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a10      	ldr	r2, [pc, #64]	; (8005b68 <TIM_OC4_SetConfig+0xa4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40013400 	.word	0x40013400

08005b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 030a 	bic.w	r3, r3, #10
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f023 0210 	bic.w	r2, r3, #16
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	031b      	lsls	r3, r3, #12
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f043 0307 	orr.w	r3, r3, #7
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	609a      	str	r2, [r3, #8]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	021a      	lsls	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	609a      	str	r2, [r3, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e050      	b.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d00e      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d10c      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40013400 	.word	0x40013400
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00

08005db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e03d      	b.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e03f      	b.n	8005f10 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fc ffe3 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2224      	movs	r2, #36	; 0x24
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fc84 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d17c      	bne.n	8006032 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_UART_Transmit+0x2c>
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e075      	b.n	8006034 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Transmit+0x3e>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e06e      	b.n	8006034 <HAL_UART_Transmit+0x11c>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2221      	movs	r2, #33	; 0x21
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6c:	f7fd f8a2 	bl	80030b4 <HAL_GetTick>
 8005f70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d108      	bne.n	8005f9a <HAL_UART_Transmit+0x82>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e003      	b.n	8005fa2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005faa:	e02a      	b.n	8006002 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fa37 	bl	800642a <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e036      	b.n	8006034 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fda:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	3302      	adds	r3, #2
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e007      	b.n	8005ff4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1cf      	bne.n	8005fac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	2140      	movs	r1, #64	; 0x40
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fa07 	bl	800642a <UART_WaitOnFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e006      	b.n	8006034 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e000      	b.n	8006034 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
  }
}
 8006034:	4618      	mov	r0, r3
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	d11d      	bne.n	8006092 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_UART_Receive_IT+0x26>
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e016      	b.n	8006094 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_UART_Receive_IT+0x38>
 8006070:	2302      	movs	r3, #2
 8006072:	e00f      	b.n	8006094 <HAL_UART_Receive_IT+0x58>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	461a      	mov	r2, r3
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fa18 	bl	80064be <UART_Start_Receive_IT>
 800608e:	4603      	mov	r3, r0
 8006090:	e000      	b.n	8006094 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006092:	2302      	movs	r3, #2
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	; 0x28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_UART_IRQHandler+0x52>
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fac9 	bl	800667e <UART_Receive_IT>
      return;
 80060ec:	e17b      	b.n	80063e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80b1 	beq.w	8006258 <HAL_UART_IRQHandler+0x1bc>
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d105      	bne.n	800610c <HAL_UART_IRQHandler+0x70>
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80a6 	beq.w	8006258 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_UART_IRQHandler+0x90>
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_UART_IRQHandler+0xb0>
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f043 0202 	orr.w	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_UART_IRQHandler+0xd0>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <HAL_UART_IRQHandler+0xfa>
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <HAL_UART_IRQHandler+0xee>
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0208 	orr.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 811e 	beq.w	80063dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_UART_IRQHandler+0x11e>
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fa62 	bl	800667e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <HAL_UART_IRQHandler+0x146>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d031      	beq.n	8006246 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9a4 	bl	8006530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d023      	beq.n	800623e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006204:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	2b00      	cmp	r3, #0
 800620c:	d013      	beq.n	8006236 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	4a76      	ldr	r2, [pc, #472]	; (80063ec <HAL_UART_IRQHandler+0x350>)
 8006214:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	4618      	mov	r0, r3
 800621c:	f7fd fae4 	bl	80037e8 <HAL_DMA_Abort_IT>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006230:	4610      	mov	r0, r2
 8006232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e00e      	b.n	8006254 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8e3 	bl	8006402 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e00a      	b.n	8006254 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8df 	bl	8006402 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006244:	e006      	b.n	8006254 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8db 	bl	8006402 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006252:	e0c3      	b.n	80063dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	bf00      	nop
    return;
 8006256:	e0c1      	b.n	80063dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	2b01      	cmp	r3, #1
 800625e:	f040 80a1 	bne.w	80063a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 809b 	beq.w	80063a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8095 	beq.w	80063a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d04e      	beq.n	800633c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80062a8:	8a3b      	ldrh	r3, [r7, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8098 	beq.w	80063e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062b4:	8a3a      	ldrh	r2, [r7, #16]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	f080 8092 	bcs.w	80063e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8a3a      	ldrh	r2, [r7, #16]
 80062c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d02b      	beq.n	8006324 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0210 	bic.w	r2, r2, #16
 8006318:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fa27 	bl	8003772 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800632c:	b29b      	uxth	r3, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f86d 	bl	8006414 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800633a:	e051      	b.n	80063e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d047      	beq.n	80063e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006354:	8a7b      	ldrh	r3, [r7, #18]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d044      	beq.n	80063e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006368:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0210 	bic.w	r2, r2, #16
 8006396:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006398:	8a7b      	ldrh	r3, [r7, #18]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f839 	bl	8006414 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80063a2:	e01f      	b.n	80063e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_UART_IRQHandler+0x324>
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f8f9 	bl	80065b0 <UART_Transmit_IT>
    return;
 80063be:	e012      	b.n	80063e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00d      	beq.n	80063e6 <HAL_UART_IRQHandler+0x34a>
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f93a 	bl	800664e <UART_EndTransmit_IT>
    return;
 80063da:	e004      	b.n	80063e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80063dc:	bf00      	nop
 80063de:	e002      	b.n	80063e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80063e4:	bf00      	nop
  }
}
 80063e6:	3728      	adds	r7, #40	; 0x28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	08006589 	.word	0x08006589

080063f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr

08006414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4613      	mov	r3, r2
 8006438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800643a:	e02c      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d028      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0x30>
 800644a:	f7fc fe33 	bl	80030b4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	429a      	cmp	r2, r3
 8006458:	d21d      	bcs.n	8006496 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006468:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e00f      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d0c3      	beq.n	800643c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2222      	movs	r2, #34	; 0x22
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006502:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0220 	orr.w	r2, r2, #32
 8006522:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006546:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0210 	bic.w	r2, r2, #16
 800656e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff ff2d 	bl	8006402 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b21      	cmp	r3, #33	; 0x21
 80065c2:	d13e      	bne.n	8006642 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065cc:	d114      	bne.n	80065f8 <UART_Transmit_IT+0x48>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d110      	bne.n	80065f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	1c9a      	adds	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]
 80065f6:	e008      	b.n	800660a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	1c59      	adds	r1, r3, #1
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6211      	str	r1, [r2, #32]
 8006602:	781a      	ldrb	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4619      	mov	r1, r3
 8006618:	84d1      	strh	r1, [r2, #38]	; 0x26
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr

0800664e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006664:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff febe 	bl	80063f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b086      	sub	sp, #24
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b22      	cmp	r3, #34	; 0x22
 8006690:	f040 8099 	bne.w	80067c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d117      	bne.n	80066ce <UART_Receive_IT+0x50>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d113      	bne.n	80066ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	b29a      	uxth	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
 80066cc:	e026      	b.n	800671c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e0:	d007      	beq.n	80066f2 <UART_Receive_IT+0x74>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <UART_Receive_IT+0x82>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e008      	b.n	8006712 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670c:	b2da      	uxtb	r2, r3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800672c:	2b00      	cmp	r3, #0
 800672e:	d148      	bne.n	80067c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0220 	bic.w	r2, r2, #32
 800673e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	d123      	bne.n	80067b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0210 	bic.w	r2, r2, #16
 8006784:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b10      	cmp	r3, #16
 8006792:	d10a      	bne.n	80067aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fe2f 	bl	8006414 <HAL_UARTEx_RxEventCallback>
 80067b6:	e002      	b.n	80067be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fb fb8d 	bl	8001ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	e002      	b.n	80067c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800680a:	f023 030c 	bic.w	r3, r3, #12
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	430b      	orrs	r3, r1
 8006816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <UART_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d103      	bne.n	8006840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fd ffea 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	e002      	b.n	8006846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fd ffd2 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8006844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009a      	lsls	r2, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <UART_SetConfig+0x118>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	0119      	lsls	r1, r3, #4
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009a      	lsls	r2, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	fbb2 f2f3 	udiv	r2, r2, r3
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <UART_SetConfig+0x118>)
 800687e:	fba3 0302 	umull	r0, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	2064      	movs	r0, #100	; 0x64
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	3332      	adds	r3, #50	; 0x32
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <UART_SetConfig+0x118>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800689c:	4419      	add	r1, r3
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <UART_SetConfig+0x118>)
 80068b6:	fba3 0302 	umull	r0, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	fb00 f303 	mul.w	r3, r0, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	; 0x32
 80068c8:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <UART_SetConfig+0x118>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	440a      	add	r2, r1
 80068da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40013800 	.word	0x40013800
 80068e8:	51eb851f 	.word	0x51eb851f

080068ec <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	601a      	str	r2, [r3, #0]
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6892      	ldr	r2, [r2, #8]
 8006948:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6852      	ldr	r2, [r2, #4]
 8006952:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	d103      	bne.n	8006966 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800698e:	4b51      	ldr	r3, [pc, #324]	; (8006ad4 <xTaskIncrementTick+0x150>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 808d 	bne.w	8006ab2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006998:	4b4f      	ldr	r3, [pc, #316]	; (8006ad8 <xTaskIncrementTick+0x154>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069a0:	4a4d      	ldr	r2, [pc, #308]	; (8006ad8 <xTaskIncrementTick+0x154>)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d120      	bne.n	80069ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069ac:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <xTaskIncrementTick+0x158>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xTaskIncrementTick+0x46>
 80069cc:	4b43      	ldr	r3, [pc, #268]	; (8006adc <xTaskIncrementTick+0x158>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	4b43      	ldr	r3, [pc, #268]	; (8006ae0 <xTaskIncrementTick+0x15c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a41      	ldr	r2, [pc, #260]	; (8006adc <xTaskIncrementTick+0x158>)
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	4a41      	ldr	r2, [pc, #260]	; (8006ae0 <xTaskIncrementTick+0x15c>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	4b40      	ldr	r3, [pc, #256]	; (8006ae4 <xTaskIncrementTick+0x160>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	4a3f      	ldr	r2, [pc, #252]	; (8006ae4 <xTaskIncrementTick+0x160>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	f000 f8e3 	bl	8006bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ee:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <xTaskIncrementTick+0x164>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d34d      	bcc.n	8006a94 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f8:	4b38      	ldr	r3, [pc, #224]	; (8006adc <xTaskIncrementTick+0x158>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <xTaskIncrementTick+0x82>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <xTaskIncrementTick+0x84>
 8006a06:	2300      	movs	r3, #0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0c:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <xTaskIncrementTick+0x164>)
 8006a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a12:	601a      	str	r2, [r3, #0]
					break;
 8006a14:	e03e      	b.n	8006a94 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a16:	4b31      	ldr	r3, [pc, #196]	; (8006adc <xTaskIncrementTick+0x158>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d203      	bcs.n	8006a36 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ae8 <xTaskIncrementTick+0x164>)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6013      	str	r3, [r2, #0]
						break;
 8006a34:	e02e      	b.n	8006a94 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff ff79 	bl	8006932 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff ff70 	bl	8006932 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	2201      	movs	r2, #1
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <xTaskIncrementTick+0x168>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <xTaskIncrementTick+0x168>)
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <xTaskIncrementTick+0x16c>)
 8006a72:	441a      	add	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f7ff ff36 	bl	80068ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <xTaskIncrementTick+0x170>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d3b4      	bcc.n	80069f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a92:	e7b1      	b.n	80069f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <xTaskIncrementTick+0x170>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4915      	ldr	r1, [pc, #84]	; (8006af0 <xTaskIncrementTick+0x16c>)
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d907      	bls.n	8006abc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e004      	b.n	8006abc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <xTaskIncrementTick+0x174>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <xTaskIncrementTick+0x174>)
 8006aba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xTaskIncrementTick+0x178>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ac8:	697b      	ldr	r3, [r7, #20]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000b98 	.word	0x20000b98
 8006ad8:	20000b7c 	.word	0x20000b7c
 8006adc:	20000b74 	.word	0x20000b74
 8006ae0:	20000b78 	.word	0x20000b78
 8006ae4:	20000b90 	.word	0x20000b90
 8006ae8:	20000b94 	.word	0x20000b94
 8006aec:	20000b80 	.word	0x20000b80
 8006af0:	20000ae8 	.word	0x20000ae8
 8006af4:	20000ae4 	.word	0x20000ae4
 8006af8:	20000b88 	.word	0x20000b88
 8006afc:	20000b8c 	.word	0x20000b8c

08006b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b06:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <vTaskSwitchContext+0xa0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b0e:	4b25      	ldr	r3, [pc, #148]	; (8006ba4 <vTaskSwitchContext+0xa4>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b14:	e03f      	b.n	8006b96 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006b16:	4b23      	ldr	r3, [pc, #140]	; (8006ba4 <vTaskSwitchContext+0xa4>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b1c:	4b22      	ldr	r3, [pc, #136]	; (8006ba8 <vTaskSwitchContext+0xa8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	fab3 f383 	clz	r3, r3
 8006b28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	f1c3 031f 	rsb	r3, r3, #31
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	491e      	ldr	r1, [pc, #120]	; (8006bac <vTaskSwitchContext+0xac>)
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	607b      	str	r3, [r7, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <vTaskSwitchContext+0x5a>
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4a11      	ldr	r2, [pc, #68]	; (8006bac <vTaskSwitchContext+0xac>)
 8006b68:	4413      	add	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d104      	bne.n	8006b8c <vTaskSwitchContext+0x8c>
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	605a      	str	r2, [r3, #4]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	4a07      	ldr	r2, [pc, #28]	; (8006bb0 <vTaskSwitchContext+0xb0>)
 8006b94:	6013      	str	r3, [r2, #0]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr
 8006ba0:	20000b98 	.word	0x20000b98
 8006ba4:	20000b8c 	.word	0x20000b8c
 8006ba8:	20000b80 	.word	0x20000b80
 8006bac:	20000ae8 	.word	0x20000ae8
 8006bb0:	20000ae4 	.word	0x20000ae4

08006bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bba:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <prvResetNextTaskUnblockTime+0x40>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <prvResetNextTaskUnblockTime+0x14>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <prvResetNextTaskUnblockTime+0x16>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <prvResetNextTaskUnblockTime+0x44>)
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bd6:	e008      	b.n	8006bea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <prvResetNextTaskUnblockTime+0x40>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4a04      	ldr	r2, [pc, #16]	; (8006bf8 <prvResetNextTaskUnblockTime+0x44>)
 8006be8:	6013      	str	r3, [r2, #0]
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr
 8006bf4:	20000b74 	.word	0x20000b74
 8006bf8:	20000b94 	.word	0x20000b94

08006bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <xTaskGetSchedulerState+0x34>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	e008      	b.n	8006c22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <xTaskGetSchedulerState+0x38>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	e001      	b.n	8006c22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c22:	687b      	ldr	r3, [r7, #4]
	}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000b84 	.word	0x20000b84
 8006c34:	20000b98 	.word	0x20000b98
	...

08006c40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <pxCurrentTCBConst2>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c4a:	f380 8809 	msr	PSP, r0
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8811 	msr	BASEPRI, r0
 8006c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c5e:	4770      	bx	lr

08006c60 <pxCurrentTCBConst2>:
 8006c60:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
	...

08006c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c70:	f3ef 8009 	mrs	r0, PSP
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <pxCurrentTCBConst>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c80:	6010      	str	r0, [r2, #0]
 8006c82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c8a:	f380 8811 	msr	BASEPRI, r0
 8006c8e:	f7ff ff37 	bl	8006b00 <vTaskSwitchContext>
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8811 	msr	BASEPRI, r0
 8006c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	6808      	ldr	r0, [r1, #0]
 8006ca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ca6:	f380 8809 	msr	PSP, r0
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	4770      	bx	lr

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7ff fe57 	bl	8006984 <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <xPortSysTickHandler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <atoi>:
 8006cfc:	220a      	movs	r2, #10
 8006cfe:	2100      	movs	r1, #0
 8006d00:	f001 bdbe 	b.w	8008880 <strtol>

08006d04 <__errno>:
 8006d04:	4b01      	ldr	r3, [pc, #4]	; (8006d0c <__errno+0x8>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000504 	.word	0x20000504

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	2600      	movs	r6, #0
 8006d14:	4d0c      	ldr	r5, [pc, #48]	; (8006d48 <__libc_init_array+0x38>)
 8006d16:	4c0d      	ldr	r4, [pc, #52]	; (8006d4c <__libc_init_array+0x3c>)
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	f004 fcb8 	bl	800b694 <_init>
 8006d24:	2600      	movs	r6, #0
 8006d26:	4d0a      	ldr	r5, [pc, #40]	; (8006d50 <__libc_init_array+0x40>)
 8006d28:	4c0a      	ldr	r4, [pc, #40]	; (8006d54 <__libc_init_array+0x44>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d38:	4798      	blx	r3
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d42:	4798      	blx	r3
 8006d44:	3601      	adds	r6, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	0800bc50 	.word	0x0800bc50
 8006d4c:	0800bc50 	.word	0x0800bc50
 8006d50:	0800bc50 	.word	0x0800bc50
 8006d54:	0800bc54 	.word	0x0800bc54

08006d58 <memcpy>:
 8006d58:	440a      	add	r2, r1
 8006d5a:	4291      	cmp	r1, r2
 8006d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d60:	d100      	bne.n	8006d64 <memcpy+0xc>
 8006d62:	4770      	bx	lr
 8006d64:	b510      	push	{r4, lr}
 8006d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d70:	d1f9      	bne.n	8006d66 <memcpy+0xe>
 8006d72:	bd10      	pop	{r4, pc}

08006d74 <memset>:
 8006d74:	4603      	mov	r3, r0
 8006d76:	4402      	add	r2, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <__cvt>:
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	bfbb      	ittet	lt
 8006d8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d92:	461f      	movlt	r7, r3
 8006d94:	2300      	movge	r3, #0
 8006d96:	232d      	movlt	r3, #45	; 0x2d
 8006d98:	b088      	sub	sp, #32
 8006d9a:	4614      	mov	r4, r2
 8006d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006da4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006da8:	f023 0820 	bic.w	r8, r3, #32
 8006dac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006db0:	d005      	beq.n	8006dbe <__cvt+0x3a>
 8006db2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006db6:	d100      	bne.n	8006dba <__cvt+0x36>
 8006db8:	3501      	adds	r5, #1
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e000      	b.n	8006dc0 <__cvt+0x3c>
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	aa07      	add	r2, sp, #28
 8006dc2:	9204      	str	r2, [sp, #16]
 8006dc4:	aa06      	add	r2, sp, #24
 8006dc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006dca:	e9cd 3500 	strd	r3, r5, [sp]
 8006dce:	4622      	mov	r2, r4
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	f001 fec9 	bl	8008b68 <_dtoa_r>
 8006dd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006dda:	4606      	mov	r6, r0
 8006ddc:	d102      	bne.n	8006de4 <__cvt+0x60>
 8006dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006de0:	07db      	lsls	r3, r3, #31
 8006de2:	d522      	bpl.n	8006e2a <__cvt+0xa6>
 8006de4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006de8:	eb06 0905 	add.w	r9, r6, r5
 8006dec:	d110      	bne.n	8006e10 <__cvt+0x8c>
 8006dee:	7833      	ldrb	r3, [r6, #0]
 8006df0:	2b30      	cmp	r3, #48	; 0x30
 8006df2:	d10a      	bne.n	8006e0a <__cvt+0x86>
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	4620      	mov	r0, r4
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7f9 ff02 	bl	8000c04 <__aeabi_dcmpeq>
 8006e00:	b918      	cbnz	r0, 8006e0a <__cvt+0x86>
 8006e02:	f1c5 0501 	rsb	r5, r5, #1
 8006e06:	f8ca 5000 	str.w	r5, [sl]
 8006e0a:	f8da 3000 	ldr.w	r3, [sl]
 8006e0e:	4499      	add	r9, r3
 8006e10:	2200      	movs	r2, #0
 8006e12:	2300      	movs	r3, #0
 8006e14:	4620      	mov	r0, r4
 8006e16:	4639      	mov	r1, r7
 8006e18:	f7f9 fef4 	bl	8000c04 <__aeabi_dcmpeq>
 8006e1c:	b108      	cbz	r0, 8006e22 <__cvt+0x9e>
 8006e1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e22:	2230      	movs	r2, #48	; 0x30
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	454b      	cmp	r3, r9
 8006e28:	d307      	bcc.n	8006e3a <__cvt+0xb6>
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e30:	1b9b      	subs	r3, r3, r6
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	b008      	add	sp, #32
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	9107      	str	r1, [sp, #28]
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e7f0      	b.n	8006e24 <__cvt+0xa0>

08006e42 <__exponent>:
 8006e42:	4603      	mov	r3, r0
 8006e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e46:	2900      	cmp	r1, #0
 8006e48:	f803 2b02 	strb.w	r2, [r3], #2
 8006e4c:	bfb6      	itet	lt
 8006e4e:	222d      	movlt	r2, #45	; 0x2d
 8006e50:	222b      	movge	r2, #43	; 0x2b
 8006e52:	4249      	neglt	r1, r1
 8006e54:	2909      	cmp	r1, #9
 8006e56:	7042      	strb	r2, [r0, #1]
 8006e58:	dd2b      	ble.n	8006eb2 <__exponent+0x70>
 8006e5a:	f10d 0407 	add.w	r4, sp, #7
 8006e5e:	46a4      	mov	ip, r4
 8006e60:	270a      	movs	r7, #10
 8006e62:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e66:	460a      	mov	r2, r1
 8006e68:	46a6      	mov	lr, r4
 8006e6a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e6e:	2a63      	cmp	r2, #99	; 0x63
 8006e70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e74:	4631      	mov	r1, r6
 8006e76:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e7e:	dcf0      	bgt.n	8006e62 <__exponent+0x20>
 8006e80:	3130      	adds	r1, #48	; 0x30
 8006e82:	f1ae 0502 	sub.w	r5, lr, #2
 8006e86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	1c44      	adds	r4, r0, #1
 8006e8e:	4561      	cmp	r1, ip
 8006e90:	d30a      	bcc.n	8006ea8 <__exponent+0x66>
 8006e92:	f10d 0209 	add.w	r2, sp, #9
 8006e96:	eba2 020e 	sub.w	r2, r2, lr
 8006e9a:	4565      	cmp	r5, ip
 8006e9c:	bf88      	it	hi
 8006e9e:	2200      	movhi	r2, #0
 8006ea0:	4413      	add	r3, r2
 8006ea2:	1a18      	subs	r0, r3, r0
 8006ea4:	b003      	add	sp, #12
 8006ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006eb0:	e7ed      	b.n	8006e8e <__exponent+0x4c>
 8006eb2:	2330      	movs	r3, #48	; 0x30
 8006eb4:	3130      	adds	r1, #48	; 0x30
 8006eb6:	7083      	strb	r3, [r0, #2]
 8006eb8:	70c1      	strb	r1, [r0, #3]
 8006eba:	1d03      	adds	r3, r0, #4
 8006ebc:	e7f1      	b.n	8006ea2 <__exponent+0x60>
	...

08006ec0 <_printf_float>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b091      	sub	sp, #68	; 0x44
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ecc:	4616      	mov	r6, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f003 f963 	bl	800a19c <_localeconv_r>
 8006ed6:	6803      	ldr	r3, [r0, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	9309      	str	r3, [sp, #36]	; 0x24
 8006edc:	f7f9 f9b2 	bl	8000244 <strlen>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	900a      	str	r0, [sp, #40]	; 0x28
 8006eea:	3307      	adds	r3, #7
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	f103 0208 	add.w	r2, r3, #8
 8006ef4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8006efc:	f8c8 2000 	str.w	r2, [r8]
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006f0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	4640      	mov	r0, r8
 8006f18:	4b9c      	ldr	r3, [pc, #624]	; (800718c <_printf_float+0x2cc>)
 8006f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f1c:	f7f9 fea4 	bl	8000c68 <__aeabi_dcmpun>
 8006f20:	bb70      	cbnz	r0, 8006f80 <_printf_float+0xc0>
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	4640      	mov	r0, r8
 8006f28:	4b98      	ldr	r3, [pc, #608]	; (800718c <_printf_float+0x2cc>)
 8006f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f2c:	f7f9 fe7e 	bl	8000c2c <__aeabi_dcmple>
 8006f30:	bb30      	cbnz	r0, 8006f80 <_printf_float+0xc0>
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	4640      	mov	r0, r8
 8006f38:	4651      	mov	r1, sl
 8006f3a:	f7f9 fe6d 	bl	8000c18 <__aeabi_dcmplt>
 8006f3e:	b110      	cbz	r0, 8006f46 <_printf_float+0x86>
 8006f40:	232d      	movs	r3, #45	; 0x2d
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f46:	4b92      	ldr	r3, [pc, #584]	; (8007190 <_printf_float+0x2d0>)
 8006f48:	4892      	ldr	r0, [pc, #584]	; (8007194 <_printf_float+0x2d4>)
 8006f4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f4e:	bf94      	ite	ls
 8006f50:	4698      	movls	r8, r3
 8006f52:	4680      	movhi	r8, r0
 8006f54:	2303      	movs	r3, #3
 8006f56:	f04f 0a00 	mov.w	sl, #0
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	f02b 0304 	bic.w	r3, fp, #4
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	4633      	mov	r3, r6
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	9700      	str	r7, [sp, #0]
 8006f6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f6c:	f000 f9d4 	bl	8007318 <_printf_common>
 8006f70:	3001      	adds	r0, #1
 8006f72:	f040 8090 	bne.w	8007096 <_printf_float+0x1d6>
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	b011      	add	sp, #68	; 0x44
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	4642      	mov	r2, r8
 8006f82:	4653      	mov	r3, sl
 8006f84:	4640      	mov	r0, r8
 8006f86:	4651      	mov	r1, sl
 8006f88:	f7f9 fe6e 	bl	8000c68 <__aeabi_dcmpun>
 8006f8c:	b148      	cbz	r0, 8006fa2 <_printf_float+0xe2>
 8006f8e:	f1ba 0f00 	cmp.w	sl, #0
 8006f92:	bfb8      	it	lt
 8006f94:	232d      	movlt	r3, #45	; 0x2d
 8006f96:	4880      	ldr	r0, [pc, #512]	; (8007198 <_printf_float+0x2d8>)
 8006f98:	bfb8      	it	lt
 8006f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f9e:	4b7f      	ldr	r3, [pc, #508]	; (800719c <_printf_float+0x2dc>)
 8006fa0:	e7d3      	b.n	8006f4a <_printf_float+0x8a>
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	d142      	bne.n	8007032 <_printf_float+0x172>
 8006fac:	2306      	movs	r3, #6
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	9206      	str	r2, [sp, #24]
 8006fb4:	aa0e      	add	r2, sp, #56	; 0x38
 8006fb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006fba:	aa0d      	add	r2, sp, #52	; 0x34
 8006fbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006fc0:	9203      	str	r2, [sp, #12]
 8006fc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006fc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	4642      	mov	r2, r8
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	4653      	mov	r3, sl
 8006fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fd8:	f7ff fed4 	bl	8006d84 <__cvt>
 8006fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fde:	4680      	mov	r8, r0
 8006fe0:	2947      	cmp	r1, #71	; 0x47
 8006fe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fe4:	d108      	bne.n	8006ff8 <_printf_float+0x138>
 8006fe6:	1cc8      	adds	r0, r1, #3
 8006fe8:	db02      	blt.n	8006ff0 <_printf_float+0x130>
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	4299      	cmp	r1, r3
 8006fee:	dd40      	ble.n	8007072 <_printf_float+0x1b2>
 8006ff0:	f1a9 0902 	sub.w	r9, r9, #2
 8006ff4:	fa5f f989 	uxtb.w	r9, r9
 8006ff8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ffc:	d81f      	bhi.n	800703e <_printf_float+0x17e>
 8006ffe:	464a      	mov	r2, r9
 8007000:	3901      	subs	r1, #1
 8007002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007006:	910d      	str	r1, [sp, #52]	; 0x34
 8007008:	f7ff ff1b 	bl	8006e42 <__exponent>
 800700c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700e:	4682      	mov	sl, r0
 8007010:	1813      	adds	r3, r2, r0
 8007012:	2a01      	cmp	r2, #1
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	dc02      	bgt.n	800701e <_printf_float+0x15e>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	07d2      	lsls	r2, r2, #31
 800701c:	d501      	bpl.n	8007022 <_printf_float+0x162>
 800701e:	3301      	adds	r3, #1
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007026:	2b00      	cmp	r3, #0
 8007028:	d09b      	beq.n	8006f62 <_printf_float+0xa2>
 800702a:	232d      	movs	r3, #45	; 0x2d
 800702c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007030:	e797      	b.n	8006f62 <_printf_float+0xa2>
 8007032:	2947      	cmp	r1, #71	; 0x47
 8007034:	d1bc      	bne.n	8006fb0 <_printf_float+0xf0>
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1ba      	bne.n	8006fb0 <_printf_float+0xf0>
 800703a:	2301      	movs	r3, #1
 800703c:	e7b7      	b.n	8006fae <_printf_float+0xee>
 800703e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007042:	d118      	bne.n	8007076 <_printf_float+0x1b6>
 8007044:	2900      	cmp	r1, #0
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	dd0b      	ble.n	8007062 <_printf_float+0x1a2>
 800704a:	6121      	str	r1, [r4, #16]
 800704c:	b913      	cbnz	r3, 8007054 <_printf_float+0x194>
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	07d0      	lsls	r0, r2, #31
 8007052:	d502      	bpl.n	800705a <_printf_float+0x19a>
 8007054:	3301      	adds	r3, #1
 8007056:	440b      	add	r3, r1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	f04f 0a00 	mov.w	sl, #0
 800705e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007060:	e7df      	b.n	8007022 <_printf_float+0x162>
 8007062:	b913      	cbnz	r3, 800706a <_printf_float+0x1aa>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	07d2      	lsls	r2, r2, #31
 8007068:	d501      	bpl.n	800706e <_printf_float+0x1ae>
 800706a:	3302      	adds	r3, #2
 800706c:	e7f4      	b.n	8007058 <_printf_float+0x198>
 800706e:	2301      	movs	r3, #1
 8007070:	e7f2      	b.n	8007058 <_printf_float+0x198>
 8007072:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007078:	4299      	cmp	r1, r3
 800707a:	db05      	blt.n	8007088 <_printf_float+0x1c8>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	6121      	str	r1, [r4, #16]
 8007080:	07d8      	lsls	r0, r3, #31
 8007082:	d5ea      	bpl.n	800705a <_printf_float+0x19a>
 8007084:	1c4b      	adds	r3, r1, #1
 8007086:	e7e7      	b.n	8007058 <_printf_float+0x198>
 8007088:	2900      	cmp	r1, #0
 800708a:	bfcc      	ite	gt
 800708c:	2201      	movgt	r2, #1
 800708e:	f1c1 0202 	rsble	r2, r1, #2
 8007092:	4413      	add	r3, r2
 8007094:	e7e0      	b.n	8007058 <_printf_float+0x198>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	055a      	lsls	r2, r3, #21
 800709a:	d407      	bmi.n	80070ac <_printf_float+0x1ec>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	4642      	mov	r2, r8
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	d12b      	bne.n	8007102 <_printf_float+0x242>
 80070aa:	e764      	b.n	8006f76 <_printf_float+0xb6>
 80070ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070b0:	f240 80dd 	bls.w	800726e <_printf_float+0x3ae>
 80070b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	f7f9 fda2 	bl	8000c04 <__aeabi_dcmpeq>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d033      	beq.n	800712c <_printf_float+0x26c>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	4a35      	ldr	r2, [pc, #212]	; (80071a0 <_printf_float+0x2e0>)
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af51 	beq.w	8006f76 <_printf_float+0xb6>
 80070d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070d8:	429a      	cmp	r2, r3
 80070da:	db02      	blt.n	80070e2 <_printf_float+0x222>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	07d8      	lsls	r0, r3, #31
 80070e0:	d50f      	bpl.n	8007102 <_printf_float+0x242>
 80070e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	f43f af42 	beq.w	8006f76 <_printf_float+0xb6>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	f104 091a 	add.w	r9, r4, #26
 80070fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070fc:	3b01      	subs	r3, #1
 80070fe:	4543      	cmp	r3, r8
 8007100:	dc09      	bgt.n	8007116 <_printf_float+0x256>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	079b      	lsls	r3, r3, #30
 8007106:	f100 8102 	bmi.w	800730e <_printf_float+0x44e>
 800710a:	68e0      	ldr	r0, [r4, #12]
 800710c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800710e:	4298      	cmp	r0, r3
 8007110:	bfb8      	it	lt
 8007112:	4618      	movlt	r0, r3
 8007114:	e731      	b.n	8006f7a <_printf_float+0xba>
 8007116:	2301      	movs	r3, #1
 8007118:	464a      	mov	r2, r9
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	f43f af28 	beq.w	8006f76 <_printf_float+0xb6>
 8007126:	f108 0801 	add.w	r8, r8, #1
 800712a:	e7e6      	b.n	80070fa <_printf_float+0x23a>
 800712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	dc38      	bgt.n	80071a4 <_printf_float+0x2e4>
 8007132:	2301      	movs	r3, #1
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <_printf_float+0x2e0>)
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f af1a 	beq.w	8006f76 <_printf_float+0xb6>
 8007142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007146:	4313      	orrs	r3, r2
 8007148:	d102      	bne.n	8007150 <_printf_float+0x290>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	07d9      	lsls	r1, r3, #31
 800714e:	d5d8      	bpl.n	8007102 <_printf_float+0x242>
 8007150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f af0b 	beq.w	8006f76 <_printf_float+0xb6>
 8007160:	f04f 0900 	mov.w	r9, #0
 8007164:	f104 0a1a 	add.w	sl, r4, #26
 8007168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716a:	425b      	negs	r3, r3
 800716c:	454b      	cmp	r3, r9
 800716e:	dc01      	bgt.n	8007174 <_printf_float+0x2b4>
 8007170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007172:	e794      	b.n	800709e <_printf_float+0x1de>
 8007174:	2301      	movs	r3, #1
 8007176:	4652      	mov	r2, sl
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f aef9 	beq.w	8006f76 <_printf_float+0xb6>
 8007184:	f109 0901 	add.w	r9, r9, #1
 8007188:	e7ee      	b.n	8007168 <_printf_float+0x2a8>
 800718a:	bf00      	nop
 800718c:	7fefffff 	.word	0x7fefffff
 8007190:	0800b74c 	.word	0x0800b74c
 8007194:	0800b750 	.word	0x0800b750
 8007198:	0800b758 	.word	0x0800b758
 800719c:	0800b754 	.word	0x0800b754
 80071a0:	0800b75c 	.word	0x0800b75c
 80071a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071a8:	429a      	cmp	r2, r3
 80071aa:	bfa8      	it	ge
 80071ac:	461a      	movge	r2, r3
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	4691      	mov	r9, r2
 80071b2:	dc37      	bgt.n	8007224 <_printf_float+0x364>
 80071b4:	f04f 0b00 	mov.w	fp, #0
 80071b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071bc:	f104 021a 	add.w	r2, r4, #26
 80071c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071c4:	ebaa 0309 	sub.w	r3, sl, r9
 80071c8:	455b      	cmp	r3, fp
 80071ca:	dc33      	bgt.n	8007234 <_printf_float+0x374>
 80071cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071d0:	429a      	cmp	r2, r3
 80071d2:	db3b      	blt.n	800724c <_printf_float+0x38c>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	07da      	lsls	r2, r3, #31
 80071d8:	d438      	bmi.n	800724c <_printf_float+0x38c>
 80071da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071de:	eba3 020a 	sub.w	r2, r3, sl
 80071e2:	eba3 0901 	sub.w	r9, r3, r1
 80071e6:	4591      	cmp	r9, r2
 80071e8:	bfa8      	it	ge
 80071ea:	4691      	movge	r9, r2
 80071ec:	f1b9 0f00 	cmp.w	r9, #0
 80071f0:	dc34      	bgt.n	800725c <_printf_float+0x39c>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fa:	f104 0a1a 	add.w	sl, r4, #26
 80071fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	eba3 0309 	sub.w	r3, r3, r9
 8007208:	4543      	cmp	r3, r8
 800720a:	f77f af7a 	ble.w	8007102 <_printf_float+0x242>
 800720e:	2301      	movs	r3, #1
 8007210:	4652      	mov	r2, sl
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f aeac 	beq.w	8006f76 <_printf_float+0xb6>
 800721e:	f108 0801 	add.w	r8, r8, #1
 8007222:	e7ec      	b.n	80071fe <_printf_float+0x33e>
 8007224:	4613      	mov	r3, r2
 8007226:	4631      	mov	r1, r6
 8007228:	4642      	mov	r2, r8
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	d1c0      	bne.n	80071b4 <_printf_float+0x2f4>
 8007232:	e6a0      	b.n	8006f76 <_printf_float+0xb6>
 8007234:	2301      	movs	r3, #1
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	920b      	str	r2, [sp, #44]	; 0x2c
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f ae99 	beq.w	8006f76 <_printf_float+0xb6>
 8007244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007246:	f10b 0b01 	add.w	fp, fp, #1
 800724a:	e7b9      	b.n	80071c0 <_printf_float+0x300>
 800724c:	4631      	mov	r1, r6
 800724e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	d1bf      	bne.n	80071da <_printf_float+0x31a>
 800725a:	e68c      	b.n	8006f76 <_printf_float+0xb6>
 800725c:	464b      	mov	r3, r9
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	eb08 020a 	add.w	r2, r8, sl
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	d1c2      	bne.n	80071f2 <_printf_float+0x332>
 800726c:	e683      	b.n	8006f76 <_printf_float+0xb6>
 800726e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007270:	2a01      	cmp	r2, #1
 8007272:	dc01      	bgt.n	8007278 <_printf_float+0x3b8>
 8007274:	07db      	lsls	r3, r3, #31
 8007276:	d537      	bpl.n	80072e8 <_printf_float+0x428>
 8007278:	2301      	movs	r3, #1
 800727a:	4642      	mov	r2, r8
 800727c:	4631      	mov	r1, r6
 800727e:	4628      	mov	r0, r5
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	f43f ae77 	beq.w	8006f76 <_printf_float+0xb6>
 8007288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f ae6f 	beq.w	8006f76 <_printf_float+0xb6>
 8007298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	f7f9 fcb0 	bl	8000c04 <__aeabi_dcmpeq>
 80072a4:	b9d8      	cbnz	r0, 80072de <_printf_float+0x41e>
 80072a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072a8:	f108 0201 	add.w	r2, r8, #1
 80072ac:	3b01      	subs	r3, #1
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	d10e      	bne.n	80072d6 <_printf_float+0x416>
 80072b8:	e65d      	b.n	8006f76 <_printf_float+0xb6>
 80072ba:	2301      	movs	r3, #1
 80072bc:	464a      	mov	r2, r9
 80072be:	4631      	mov	r1, r6
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b8      	blx	r7
 80072c4:	3001      	adds	r0, #1
 80072c6:	f43f ae56 	beq.w	8006f76 <_printf_float+0xb6>
 80072ca:	f108 0801 	add.w	r8, r8, #1
 80072ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4543      	cmp	r3, r8
 80072d4:	dcf1      	bgt.n	80072ba <_printf_float+0x3fa>
 80072d6:	4653      	mov	r3, sl
 80072d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072dc:	e6e0      	b.n	80070a0 <_printf_float+0x1e0>
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	f104 091a 	add.w	r9, r4, #26
 80072e6:	e7f2      	b.n	80072ce <_printf_float+0x40e>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4642      	mov	r2, r8
 80072ec:	e7df      	b.n	80072ae <_printf_float+0x3ee>
 80072ee:	2301      	movs	r3, #1
 80072f0:	464a      	mov	r2, r9
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae3c 	beq.w	8006f76 <_printf_float+0xb6>
 80072fe:	f108 0801 	add.w	r8, r8, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	4543      	cmp	r3, r8
 800730a:	dcf0      	bgt.n	80072ee <_printf_float+0x42e>
 800730c:	e6fd      	b.n	800710a <_printf_float+0x24a>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	f104 0919 	add.w	r9, r4, #25
 8007316:	e7f4      	b.n	8007302 <_printf_float+0x442>

08007318 <_printf_common>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	4616      	mov	r6, r2
 800731e:	4699      	mov	r9, r3
 8007320:	688a      	ldr	r2, [r1, #8]
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	4607      	mov	r7, r0
 8007326:	4293      	cmp	r3, r2
 8007328:	bfb8      	it	lt
 800732a:	4613      	movlt	r3, r2
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007332:	460c      	mov	r4, r1
 8007334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007338:	b10a      	cbz	r2, 800733e <_printf_common+0x26>
 800733a:	3301      	adds	r3, #1
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	0699      	lsls	r1, r3, #26
 8007342:	bf42      	ittt	mi
 8007344:	6833      	ldrmi	r3, [r6, #0]
 8007346:	3302      	addmi	r3, #2
 8007348:	6033      	strmi	r3, [r6, #0]
 800734a:	6825      	ldr	r5, [r4, #0]
 800734c:	f015 0506 	ands.w	r5, r5, #6
 8007350:	d106      	bne.n	8007360 <_printf_common+0x48>
 8007352:	f104 0a19 	add.w	sl, r4, #25
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	6832      	ldr	r2, [r6, #0]
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	42ab      	cmp	r3, r5
 800735e:	dc28      	bgt.n	80073b2 <_printf_common+0x9a>
 8007360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007364:	1e13      	subs	r3, r2, #0
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	bf18      	it	ne
 800736a:	2301      	movne	r3, #1
 800736c:	0692      	lsls	r2, r2, #26
 800736e:	d42d      	bmi.n	80073cc <_printf_common+0xb4>
 8007370:	4649      	mov	r1, r9
 8007372:	4638      	mov	r0, r7
 8007374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007378:	47c0      	blx	r8
 800737a:	3001      	adds	r0, #1
 800737c:	d020      	beq.n	80073c0 <_printf_common+0xa8>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	68e5      	ldr	r5, [r4, #12]
 8007382:	f003 0306 	and.w	r3, r3, #6
 8007386:	2b04      	cmp	r3, #4
 8007388:	bf18      	it	ne
 800738a:	2500      	movne	r5, #0
 800738c:	6832      	ldr	r2, [r6, #0]
 800738e:	f04f 0600 	mov.w	r6, #0
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	bf08      	it	eq
 8007396:	1aad      	subeq	r5, r5, r2
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	bf08      	it	eq
 800739c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bfc4      	itt	gt
 80073a4:	1a9b      	subgt	r3, r3, r2
 80073a6:	18ed      	addgt	r5, r5, r3
 80073a8:	341a      	adds	r4, #26
 80073aa:	42b5      	cmp	r5, r6
 80073ac:	d11a      	bne.n	80073e4 <_printf_common+0xcc>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e008      	b.n	80073c4 <_printf_common+0xac>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4652      	mov	r2, sl
 80073b6:	4649      	mov	r1, r9
 80073b8:	4638      	mov	r0, r7
 80073ba:	47c0      	blx	r8
 80073bc:	3001      	adds	r0, #1
 80073be:	d103      	bne.n	80073c8 <_printf_common+0xb0>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7c4      	b.n	8007356 <_printf_common+0x3e>
 80073cc:	2030      	movs	r0, #48	; 0x30
 80073ce:	18e1      	adds	r1, r4, r3
 80073d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073da:	4422      	add	r2, r4
 80073dc:	3302      	adds	r3, #2
 80073de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073e2:	e7c5      	b.n	8007370 <_printf_common+0x58>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4622      	mov	r2, r4
 80073e8:	4649      	mov	r1, r9
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c0      	blx	r8
 80073ee:	3001      	adds	r0, #1
 80073f0:	d0e6      	beq.n	80073c0 <_printf_common+0xa8>
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7d9      	b.n	80073aa <_printf_common+0x92>
	...

080073f8 <_printf_i>:
 80073f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	7e0f      	ldrb	r7, [r1, #24]
 80073fe:	4691      	mov	r9, r2
 8007400:	2f78      	cmp	r7, #120	; 0x78
 8007402:	4680      	mov	r8, r0
 8007404:	460c      	mov	r4, r1
 8007406:	469a      	mov	sl, r3
 8007408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800740a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800740e:	d807      	bhi.n	8007420 <_printf_i+0x28>
 8007410:	2f62      	cmp	r7, #98	; 0x62
 8007412:	d80a      	bhi.n	800742a <_printf_i+0x32>
 8007414:	2f00      	cmp	r7, #0
 8007416:	f000 80d9 	beq.w	80075cc <_printf_i+0x1d4>
 800741a:	2f58      	cmp	r7, #88	; 0x58
 800741c:	f000 80a4 	beq.w	8007568 <_printf_i+0x170>
 8007420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007428:	e03a      	b.n	80074a0 <_printf_i+0xa8>
 800742a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800742e:	2b15      	cmp	r3, #21
 8007430:	d8f6      	bhi.n	8007420 <_printf_i+0x28>
 8007432:	a101      	add	r1, pc, #4	; (adr r1, 8007438 <_printf_i+0x40>)
 8007434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007438:	08007491 	.word	0x08007491
 800743c:	080074a5 	.word	0x080074a5
 8007440:	08007421 	.word	0x08007421
 8007444:	08007421 	.word	0x08007421
 8007448:	08007421 	.word	0x08007421
 800744c:	08007421 	.word	0x08007421
 8007450:	080074a5 	.word	0x080074a5
 8007454:	08007421 	.word	0x08007421
 8007458:	08007421 	.word	0x08007421
 800745c:	08007421 	.word	0x08007421
 8007460:	08007421 	.word	0x08007421
 8007464:	080075b3 	.word	0x080075b3
 8007468:	080074d5 	.word	0x080074d5
 800746c:	08007595 	.word	0x08007595
 8007470:	08007421 	.word	0x08007421
 8007474:	08007421 	.word	0x08007421
 8007478:	080075d5 	.word	0x080075d5
 800747c:	08007421 	.word	0x08007421
 8007480:	080074d5 	.word	0x080074d5
 8007484:	08007421 	.word	0x08007421
 8007488:	08007421 	.word	0x08007421
 800748c:	0800759d 	.word	0x0800759d
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	602a      	str	r2, [r5, #0]
 8007498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800749c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0a4      	b.n	80075ee <_printf_i+0x1f6>
 80074a4:	6820      	ldr	r0, [r4, #0]
 80074a6:	6829      	ldr	r1, [r5, #0]
 80074a8:	0606      	lsls	r6, r0, #24
 80074aa:	f101 0304 	add.w	r3, r1, #4
 80074ae:	d50a      	bpl.n	80074c6 <_printf_i+0xce>
 80074b0:	680e      	ldr	r6, [r1, #0]
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	2e00      	cmp	r6, #0
 80074b6:	da03      	bge.n	80074c0 <_printf_i+0xc8>
 80074b8:	232d      	movs	r3, #45	; 0x2d
 80074ba:	4276      	negs	r6, r6
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c0:	230a      	movs	r3, #10
 80074c2:	485e      	ldr	r0, [pc, #376]	; (800763c <_printf_i+0x244>)
 80074c4:	e019      	b.n	80074fa <_printf_i+0x102>
 80074c6:	680e      	ldr	r6, [r1, #0]
 80074c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	bf18      	it	ne
 80074d0:	b236      	sxthne	r6, r6
 80074d2:	e7ef      	b.n	80074b4 <_printf_i+0xbc>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	1d19      	adds	r1, r3, #4
 80074da:	6029      	str	r1, [r5, #0]
 80074dc:	0601      	lsls	r1, r0, #24
 80074de:	d501      	bpl.n	80074e4 <_printf_i+0xec>
 80074e0:	681e      	ldr	r6, [r3, #0]
 80074e2:	e002      	b.n	80074ea <_printf_i+0xf2>
 80074e4:	0646      	lsls	r6, r0, #25
 80074e6:	d5fb      	bpl.n	80074e0 <_printf_i+0xe8>
 80074e8:	881e      	ldrh	r6, [r3, #0]
 80074ea:	2f6f      	cmp	r7, #111	; 0x6f
 80074ec:	bf0c      	ite	eq
 80074ee:	2308      	moveq	r3, #8
 80074f0:	230a      	movne	r3, #10
 80074f2:	4852      	ldr	r0, [pc, #328]	; (800763c <_printf_i+0x244>)
 80074f4:	2100      	movs	r1, #0
 80074f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074fa:	6865      	ldr	r5, [r4, #4]
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	bfa8      	it	ge
 8007500:	6821      	ldrge	r1, [r4, #0]
 8007502:	60a5      	str	r5, [r4, #8]
 8007504:	bfa4      	itt	ge
 8007506:	f021 0104 	bicge.w	r1, r1, #4
 800750a:	6021      	strge	r1, [r4, #0]
 800750c:	b90e      	cbnz	r6, 8007512 <_printf_i+0x11a>
 800750e:	2d00      	cmp	r5, #0
 8007510:	d04d      	beq.n	80075ae <_printf_i+0x1b6>
 8007512:	4615      	mov	r5, r2
 8007514:	fbb6 f1f3 	udiv	r1, r6, r3
 8007518:	fb03 6711 	mls	r7, r3, r1, r6
 800751c:	5dc7      	ldrb	r7, [r0, r7]
 800751e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007522:	4637      	mov	r7, r6
 8007524:	42bb      	cmp	r3, r7
 8007526:	460e      	mov	r6, r1
 8007528:	d9f4      	bls.n	8007514 <_printf_i+0x11c>
 800752a:	2b08      	cmp	r3, #8
 800752c:	d10b      	bne.n	8007546 <_printf_i+0x14e>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	07de      	lsls	r6, r3, #31
 8007532:	d508      	bpl.n	8007546 <_printf_i+0x14e>
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	6861      	ldr	r1, [r4, #4]
 8007538:	4299      	cmp	r1, r3
 800753a:	bfde      	ittt	le
 800753c:	2330      	movle	r3, #48	; 0x30
 800753e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007546:	1b52      	subs	r2, r2, r5
 8007548:	6122      	str	r2, [r4, #16]
 800754a:	464b      	mov	r3, r9
 800754c:	4621      	mov	r1, r4
 800754e:	4640      	mov	r0, r8
 8007550:	f8cd a000 	str.w	sl, [sp]
 8007554:	aa03      	add	r2, sp, #12
 8007556:	f7ff fedf 	bl	8007318 <_printf_common>
 800755a:	3001      	adds	r0, #1
 800755c:	d14c      	bne.n	80075f8 <_printf_i+0x200>
 800755e:	f04f 30ff 	mov.w	r0, #4294967295
 8007562:	b004      	add	sp, #16
 8007564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007568:	4834      	ldr	r0, [pc, #208]	; (800763c <_printf_i+0x244>)
 800756a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800756e:	6829      	ldr	r1, [r5, #0]
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	f851 6b04 	ldr.w	r6, [r1], #4
 8007576:	6029      	str	r1, [r5, #0]
 8007578:	061d      	lsls	r5, r3, #24
 800757a:	d514      	bpl.n	80075a6 <_printf_i+0x1ae>
 800757c:	07df      	lsls	r7, r3, #31
 800757e:	bf44      	itt	mi
 8007580:	f043 0320 	orrmi.w	r3, r3, #32
 8007584:	6023      	strmi	r3, [r4, #0]
 8007586:	b91e      	cbnz	r6, 8007590 <_printf_i+0x198>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	f023 0320 	bic.w	r3, r3, #32
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	2310      	movs	r3, #16
 8007592:	e7af      	b.n	80074f4 <_printf_i+0xfc>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	f043 0320 	orr.w	r3, r3, #32
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	2378      	movs	r3, #120	; 0x78
 800759e:	4828      	ldr	r0, [pc, #160]	; (8007640 <_printf_i+0x248>)
 80075a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075a4:	e7e3      	b.n	800756e <_printf_i+0x176>
 80075a6:	0659      	lsls	r1, r3, #25
 80075a8:	bf48      	it	mi
 80075aa:	b2b6      	uxthmi	r6, r6
 80075ac:	e7e6      	b.n	800757c <_printf_i+0x184>
 80075ae:	4615      	mov	r5, r2
 80075b0:	e7bb      	b.n	800752a <_printf_i+0x132>
 80075b2:	682b      	ldr	r3, [r5, #0]
 80075b4:	6826      	ldr	r6, [r4, #0]
 80075b6:	1d18      	adds	r0, r3, #4
 80075b8:	6961      	ldr	r1, [r4, #20]
 80075ba:	6028      	str	r0, [r5, #0]
 80075bc:	0635      	lsls	r5, r6, #24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	d501      	bpl.n	80075c6 <_printf_i+0x1ce>
 80075c2:	6019      	str	r1, [r3, #0]
 80075c4:	e002      	b.n	80075cc <_printf_i+0x1d4>
 80075c6:	0670      	lsls	r0, r6, #25
 80075c8:	d5fb      	bpl.n	80075c2 <_printf_i+0x1ca>
 80075ca:	8019      	strh	r1, [r3, #0]
 80075cc:	2300      	movs	r3, #0
 80075ce:	4615      	mov	r5, r2
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	e7ba      	b.n	800754a <_printf_i+0x152>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	2100      	movs	r1, #0
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	602a      	str	r2, [r5, #0]
 80075dc:	681d      	ldr	r5, [r3, #0]
 80075de:	6862      	ldr	r2, [r4, #4]
 80075e0:	4628      	mov	r0, r5
 80075e2:	f002 fe61 	bl	800a2a8 <memchr>
 80075e6:	b108      	cbz	r0, 80075ec <_printf_i+0x1f4>
 80075e8:	1b40      	subs	r0, r0, r5
 80075ea:	6060      	str	r0, [r4, #4]
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	2300      	movs	r3, #0
 80075f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f6:	e7a8      	b.n	800754a <_printf_i+0x152>
 80075f8:	462a      	mov	r2, r5
 80075fa:	4649      	mov	r1, r9
 80075fc:	4640      	mov	r0, r8
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	47d0      	blx	sl
 8007602:	3001      	adds	r0, #1
 8007604:	d0ab      	beq.n	800755e <_printf_i+0x166>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	079b      	lsls	r3, r3, #30
 800760a:	d413      	bmi.n	8007634 <_printf_i+0x23c>
 800760c:	68e0      	ldr	r0, [r4, #12]
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	4298      	cmp	r0, r3
 8007612:	bfb8      	it	lt
 8007614:	4618      	movlt	r0, r3
 8007616:	e7a4      	b.n	8007562 <_printf_i+0x16a>
 8007618:	2301      	movs	r3, #1
 800761a:	4632      	mov	r2, r6
 800761c:	4649      	mov	r1, r9
 800761e:	4640      	mov	r0, r8
 8007620:	47d0      	blx	sl
 8007622:	3001      	adds	r0, #1
 8007624:	d09b      	beq.n	800755e <_printf_i+0x166>
 8007626:	3501      	adds	r5, #1
 8007628:	68e3      	ldr	r3, [r4, #12]
 800762a:	9903      	ldr	r1, [sp, #12]
 800762c:	1a5b      	subs	r3, r3, r1
 800762e:	42ab      	cmp	r3, r5
 8007630:	dcf2      	bgt.n	8007618 <_printf_i+0x220>
 8007632:	e7eb      	b.n	800760c <_printf_i+0x214>
 8007634:	2500      	movs	r5, #0
 8007636:	f104 0619 	add.w	r6, r4, #25
 800763a:	e7f5      	b.n	8007628 <_printf_i+0x230>
 800763c:	0800b75e 	.word	0x0800b75e
 8007640:	0800b76f 	.word	0x0800b76f

08007644 <_scanf_float>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	b087      	sub	sp, #28
 800764a:	9303      	str	r3, [sp, #12]
 800764c:	688b      	ldr	r3, [r1, #8]
 800764e:	4617      	mov	r7, r2
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007656:	bf85      	ittet	hi
 8007658:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800765c:	195b      	addhi	r3, r3, r5
 800765e:	2300      	movls	r3, #0
 8007660:	9302      	strhi	r3, [sp, #8]
 8007662:	bf88      	it	hi
 8007664:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007668:	468b      	mov	fp, r1
 800766a:	f04f 0500 	mov.w	r5, #0
 800766e:	bf8c      	ite	hi
 8007670:	608b      	strhi	r3, [r1, #8]
 8007672:	9302      	strls	r3, [sp, #8]
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	4680      	mov	r8, r0
 8007678:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800767c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007680:	460c      	mov	r4, r1
 8007682:	465e      	mov	r6, fp
 8007684:	46aa      	mov	sl, r5
 8007686:	46a9      	mov	r9, r5
 8007688:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800768c:	9501      	str	r5, [sp, #4]
 800768e:	68a2      	ldr	r2, [r4, #8]
 8007690:	b152      	cbz	r2, 80076a8 <_scanf_float+0x64>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b4e      	cmp	r3, #78	; 0x4e
 8007698:	d864      	bhi.n	8007764 <_scanf_float+0x120>
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d83c      	bhi.n	8007718 <_scanf_float+0xd4>
 800769e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80076a2:	b2c8      	uxtb	r0, r1
 80076a4:	280e      	cmp	r0, #14
 80076a6:	d93a      	bls.n	800771e <_scanf_float+0xda>
 80076a8:	f1b9 0f00 	cmp.w	r9, #0
 80076ac:	d003      	beq.n	80076b6 <_scanf_float+0x72>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ba:	f1ba 0f01 	cmp.w	sl, #1
 80076be:	f200 8113 	bhi.w	80078e8 <_scanf_float+0x2a4>
 80076c2:	455e      	cmp	r6, fp
 80076c4:	f200 8105 	bhi.w	80078d2 <_scanf_float+0x28e>
 80076c8:	2501      	movs	r5, #1
 80076ca:	4628      	mov	r0, r5
 80076cc:	b007      	add	sp, #28
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80076d6:	2a0d      	cmp	r2, #13
 80076d8:	d8e6      	bhi.n	80076a8 <_scanf_float+0x64>
 80076da:	a101      	add	r1, pc, #4	; (adr r1, 80076e0 <_scanf_float+0x9c>)
 80076dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076e0:	0800781f 	.word	0x0800781f
 80076e4:	080076a9 	.word	0x080076a9
 80076e8:	080076a9 	.word	0x080076a9
 80076ec:	080076a9 	.word	0x080076a9
 80076f0:	0800787f 	.word	0x0800787f
 80076f4:	08007857 	.word	0x08007857
 80076f8:	080076a9 	.word	0x080076a9
 80076fc:	080076a9 	.word	0x080076a9
 8007700:	0800782d 	.word	0x0800782d
 8007704:	080076a9 	.word	0x080076a9
 8007708:	080076a9 	.word	0x080076a9
 800770c:	080076a9 	.word	0x080076a9
 8007710:	080076a9 	.word	0x080076a9
 8007714:	080077e5 	.word	0x080077e5
 8007718:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800771c:	e7db      	b.n	80076d6 <_scanf_float+0x92>
 800771e:	290e      	cmp	r1, #14
 8007720:	d8c2      	bhi.n	80076a8 <_scanf_float+0x64>
 8007722:	a001      	add	r0, pc, #4	; (adr r0, 8007728 <_scanf_float+0xe4>)
 8007724:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007728:	080077d7 	.word	0x080077d7
 800772c:	080076a9 	.word	0x080076a9
 8007730:	080077d7 	.word	0x080077d7
 8007734:	0800786b 	.word	0x0800786b
 8007738:	080076a9 	.word	0x080076a9
 800773c:	08007785 	.word	0x08007785
 8007740:	080077c1 	.word	0x080077c1
 8007744:	080077c1 	.word	0x080077c1
 8007748:	080077c1 	.word	0x080077c1
 800774c:	080077c1 	.word	0x080077c1
 8007750:	080077c1 	.word	0x080077c1
 8007754:	080077c1 	.word	0x080077c1
 8007758:	080077c1 	.word	0x080077c1
 800775c:	080077c1 	.word	0x080077c1
 8007760:	080077c1 	.word	0x080077c1
 8007764:	2b6e      	cmp	r3, #110	; 0x6e
 8007766:	d809      	bhi.n	800777c <_scanf_float+0x138>
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d8b2      	bhi.n	80076d2 <_scanf_float+0x8e>
 800776c:	2b54      	cmp	r3, #84	; 0x54
 800776e:	d077      	beq.n	8007860 <_scanf_float+0x21c>
 8007770:	2b59      	cmp	r3, #89	; 0x59
 8007772:	d199      	bne.n	80076a8 <_scanf_float+0x64>
 8007774:	2d07      	cmp	r5, #7
 8007776:	d197      	bne.n	80076a8 <_scanf_float+0x64>
 8007778:	2508      	movs	r5, #8
 800777a:	e029      	b.n	80077d0 <_scanf_float+0x18c>
 800777c:	2b74      	cmp	r3, #116	; 0x74
 800777e:	d06f      	beq.n	8007860 <_scanf_float+0x21c>
 8007780:	2b79      	cmp	r3, #121	; 0x79
 8007782:	e7f6      	b.n	8007772 <_scanf_float+0x12e>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	05c8      	lsls	r0, r1, #23
 8007788:	d51a      	bpl.n	80077c0 <_scanf_float+0x17c>
 800778a:	9b02      	ldr	r3, [sp, #8]
 800778c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007790:	6021      	str	r1, [r4, #0]
 8007792:	f109 0901 	add.w	r9, r9, #1
 8007796:	b11b      	cbz	r3, 80077a0 <_scanf_float+0x15c>
 8007798:	3b01      	subs	r3, #1
 800779a:	3201      	adds	r2, #1
 800779c:	9302      	str	r3, [sp, #8]
 800779e:	60a2      	str	r2, [r4, #8]
 80077a0:	68a3      	ldr	r3, [r4, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	60a3      	str	r3, [r4, #8]
 80077a6:	6923      	ldr	r3, [r4, #16]
 80077a8:	3301      	adds	r3, #1
 80077aa:	6123      	str	r3, [r4, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	f340 8084 	ble.w	80078c0 <_scanf_float+0x27c>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	e766      	b.n	800768e <_scanf_float+0x4a>
 80077c0:	eb1a 0f05 	cmn.w	sl, r5
 80077c4:	f47f af70 	bne.w	80076a8 <_scanf_float+0x64>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	f806 3b01 	strb.w	r3, [r6], #1
 80077d4:	e7e4      	b.n	80077a0 <_scanf_float+0x15c>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	0610      	lsls	r0, r2, #24
 80077da:	f57f af65 	bpl.w	80076a8 <_scanf_float+0x64>
 80077de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077e2:	e7f4      	b.n	80077ce <_scanf_float+0x18a>
 80077e4:	f1ba 0f00 	cmp.w	sl, #0
 80077e8:	d10e      	bne.n	8007808 <_scanf_float+0x1c4>
 80077ea:	f1b9 0f00 	cmp.w	r9, #0
 80077ee:	d10e      	bne.n	800780e <_scanf_float+0x1ca>
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077fa:	d108      	bne.n	800780e <_scanf_float+0x1ca>
 80077fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007800:	f04f 0a01 	mov.w	sl, #1
 8007804:	6022      	str	r2, [r4, #0]
 8007806:	e7e3      	b.n	80077d0 <_scanf_float+0x18c>
 8007808:	f1ba 0f02 	cmp.w	sl, #2
 800780c:	d055      	beq.n	80078ba <_scanf_float+0x276>
 800780e:	2d01      	cmp	r5, #1
 8007810:	d002      	beq.n	8007818 <_scanf_float+0x1d4>
 8007812:	2d04      	cmp	r5, #4
 8007814:	f47f af48 	bne.w	80076a8 <_scanf_float+0x64>
 8007818:	3501      	adds	r5, #1
 800781a:	b2ed      	uxtb	r5, r5
 800781c:	e7d8      	b.n	80077d0 <_scanf_float+0x18c>
 800781e:	f1ba 0f01 	cmp.w	sl, #1
 8007822:	f47f af41 	bne.w	80076a8 <_scanf_float+0x64>
 8007826:	f04f 0a02 	mov.w	sl, #2
 800782a:	e7d1      	b.n	80077d0 <_scanf_float+0x18c>
 800782c:	b97d      	cbnz	r5, 800784e <_scanf_float+0x20a>
 800782e:	f1b9 0f00 	cmp.w	r9, #0
 8007832:	f47f af3c 	bne.w	80076ae <_scanf_float+0x6a>
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800783c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007840:	f47f af39 	bne.w	80076b6 <_scanf_float+0x72>
 8007844:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007848:	2501      	movs	r5, #1
 800784a:	6022      	str	r2, [r4, #0]
 800784c:	e7c0      	b.n	80077d0 <_scanf_float+0x18c>
 800784e:	2d03      	cmp	r5, #3
 8007850:	d0e2      	beq.n	8007818 <_scanf_float+0x1d4>
 8007852:	2d05      	cmp	r5, #5
 8007854:	e7de      	b.n	8007814 <_scanf_float+0x1d0>
 8007856:	2d02      	cmp	r5, #2
 8007858:	f47f af26 	bne.w	80076a8 <_scanf_float+0x64>
 800785c:	2503      	movs	r5, #3
 800785e:	e7b7      	b.n	80077d0 <_scanf_float+0x18c>
 8007860:	2d06      	cmp	r5, #6
 8007862:	f47f af21 	bne.w	80076a8 <_scanf_float+0x64>
 8007866:	2507      	movs	r5, #7
 8007868:	e7b2      	b.n	80077d0 <_scanf_float+0x18c>
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	0591      	lsls	r1, r2, #22
 800786e:	f57f af1b 	bpl.w	80076a8 <_scanf_float+0x64>
 8007872:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	f8cd 9004 	str.w	r9, [sp, #4]
 800787c:	e7a8      	b.n	80077d0 <_scanf_float+0x18c>
 800787e:	6822      	ldr	r2, [r4, #0]
 8007880:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007884:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007888:	d006      	beq.n	8007898 <_scanf_float+0x254>
 800788a:	0550      	lsls	r0, r2, #21
 800788c:	f57f af0c 	bpl.w	80076a8 <_scanf_float+0x64>
 8007890:	f1b9 0f00 	cmp.w	r9, #0
 8007894:	f43f af0f 	beq.w	80076b6 <_scanf_float+0x72>
 8007898:	0591      	lsls	r1, r2, #22
 800789a:	bf58      	it	pl
 800789c:	9901      	ldrpl	r1, [sp, #4]
 800789e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078a2:	bf58      	it	pl
 80078a4:	eba9 0101 	subpl.w	r1, r9, r1
 80078a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80078ac:	f04f 0900 	mov.w	r9, #0
 80078b0:	bf58      	it	pl
 80078b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	e78a      	b.n	80077d0 <_scanf_float+0x18c>
 80078ba:	f04f 0a03 	mov.w	sl, #3
 80078be:	e787      	b.n	80077d0 <_scanf_float+0x18c>
 80078c0:	4639      	mov	r1, r7
 80078c2:	4640      	mov	r0, r8
 80078c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078c8:	4798      	blx	r3
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f43f aedf 	beq.w	800768e <_scanf_float+0x4a>
 80078d0:	e6ea      	b.n	80076a8 <_scanf_float+0x64>
 80078d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078d6:	463a      	mov	r2, r7
 80078d8:	4640      	mov	r0, r8
 80078da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078de:	4798      	blx	r3
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	6123      	str	r3, [r4, #16]
 80078e6:	e6ec      	b.n	80076c2 <_scanf_float+0x7e>
 80078e8:	1e6b      	subs	r3, r5, #1
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d825      	bhi.n	800793a <_scanf_float+0x2f6>
 80078ee:	2d02      	cmp	r5, #2
 80078f0:	d836      	bhi.n	8007960 <_scanf_float+0x31c>
 80078f2:	455e      	cmp	r6, fp
 80078f4:	f67f aee8 	bls.w	80076c8 <_scanf_float+0x84>
 80078f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078fc:	463a      	mov	r2, r7
 80078fe:	4640      	mov	r0, r8
 8007900:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007904:	4798      	blx	r3
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	3b01      	subs	r3, #1
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	e7f1      	b.n	80078f2 <_scanf_float+0x2ae>
 800790e:	9802      	ldr	r0, [sp, #8]
 8007910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007914:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007918:	463a      	mov	r2, r7
 800791a:	9002      	str	r0, [sp, #8]
 800791c:	4640      	mov	r0, r8
 800791e:	4798      	blx	r3
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	3b01      	subs	r3, #1
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800792a:	fa5f fa8a 	uxtb.w	sl, sl
 800792e:	f1ba 0f02 	cmp.w	sl, #2
 8007932:	d1ec      	bne.n	800790e <_scanf_float+0x2ca>
 8007934:	3d03      	subs	r5, #3
 8007936:	b2ed      	uxtb	r5, r5
 8007938:	1b76      	subs	r6, r6, r5
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	05da      	lsls	r2, r3, #23
 800793e:	d52f      	bpl.n	80079a0 <_scanf_float+0x35c>
 8007940:	055b      	lsls	r3, r3, #21
 8007942:	d510      	bpl.n	8007966 <_scanf_float+0x322>
 8007944:	455e      	cmp	r6, fp
 8007946:	f67f aebf 	bls.w	80076c8 <_scanf_float+0x84>
 800794a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800794e:	463a      	mov	r2, r7
 8007950:	4640      	mov	r0, r8
 8007952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007956:	4798      	blx	r3
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	3b01      	subs	r3, #1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	e7f1      	b.n	8007944 <_scanf_float+0x300>
 8007960:	46aa      	mov	sl, r5
 8007962:	9602      	str	r6, [sp, #8]
 8007964:	e7df      	b.n	8007926 <_scanf_float+0x2e2>
 8007966:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	2965      	cmp	r1, #101	; 0x65
 800796e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007972:	f106 35ff 	add.w	r5, r6, #4294967295
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	d00c      	beq.n	8007994 <_scanf_float+0x350>
 800797a:	2945      	cmp	r1, #69	; 0x45
 800797c:	d00a      	beq.n	8007994 <_scanf_float+0x350>
 800797e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007982:	463a      	mov	r2, r7
 8007984:	4640      	mov	r0, r8
 8007986:	4798      	blx	r3
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800798e:	3b01      	subs	r3, #1
 8007990:	1eb5      	subs	r5, r6, #2
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	463a      	mov	r2, r7
 8007996:	4640      	mov	r0, r8
 8007998:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800799c:	4798      	blx	r3
 800799e:	462e      	mov	r6, r5
 80079a0:	6825      	ldr	r5, [r4, #0]
 80079a2:	f015 0510 	ands.w	r5, r5, #16
 80079a6:	d155      	bne.n	8007a54 <_scanf_float+0x410>
 80079a8:	7035      	strb	r5, [r6, #0]
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b4:	d11b      	bne.n	80079ee <_scanf_float+0x3aa>
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	454b      	cmp	r3, r9
 80079ba:	eba3 0209 	sub.w	r2, r3, r9
 80079be:	d123      	bne.n	8007a08 <_scanf_float+0x3c4>
 80079c0:	2200      	movs	r2, #0
 80079c2:	4659      	mov	r1, fp
 80079c4:	4640      	mov	r0, r8
 80079c6:	f000 fe7b 	bl	80086c0 <_strtod_r>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	f012 0f02 	tst.w	r2, #2
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	d021      	beq.n	8007a1e <_scanf_float+0x3da>
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	9903      	ldr	r1, [sp, #12]
 80079de:	600a      	str	r2, [r1, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	e9c3 6700 	strd	r6, r7, [r3]
 80079e6:	68e3      	ldr	r3, [r4, #12]
 80079e8:	3301      	adds	r3, #1
 80079ea:	60e3      	str	r3, [r4, #12]
 80079ec:	e66d      	b.n	80076ca <_scanf_float+0x86>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0e5      	beq.n	80079c0 <_scanf_float+0x37c>
 80079f4:	9905      	ldr	r1, [sp, #20]
 80079f6:	230a      	movs	r3, #10
 80079f8:	462a      	mov	r2, r5
 80079fa:	4640      	mov	r0, r8
 80079fc:	3101      	adds	r1, #1
 80079fe:	f000 ff3d 	bl	800887c <_strtol_r>
 8007a02:	9b04      	ldr	r3, [sp, #16]
 8007a04:	9e05      	ldr	r6, [sp, #20]
 8007a06:	1ac2      	subs	r2, r0, r3
 8007a08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007a0c:	429e      	cmp	r6, r3
 8007a0e:	bf28      	it	cs
 8007a10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007a14:	4630      	mov	r0, r6
 8007a16:	4910      	ldr	r1, [pc, #64]	; (8007a58 <_scanf_float+0x414>)
 8007a18:	f000 f826 	bl	8007a68 <siprintf>
 8007a1c:	e7d0      	b.n	80079c0 <_scanf_float+0x37c>
 8007a1e:	f012 0f04 	tst.w	r2, #4
 8007a22:	f103 0204 	add.w	r2, r3, #4
 8007a26:	d1d9      	bne.n	80079dc <_scanf_float+0x398>
 8007a28:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007a2c:	f8cc 2000 	str.w	r2, [ip]
 8007a30:	f8d3 8000 	ldr.w	r8, [r3]
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	f7f9 f916 	bl	8000c68 <__aeabi_dcmpun>
 8007a3c:	b128      	cbz	r0, 8007a4a <_scanf_float+0x406>
 8007a3e:	4807      	ldr	r0, [pc, #28]	; (8007a5c <_scanf_float+0x418>)
 8007a40:	f000 f80e 	bl	8007a60 <nanf>
 8007a44:	f8c8 0000 	str.w	r0, [r8]
 8007a48:	e7cd      	b.n	80079e6 <_scanf_float+0x3a2>
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f9 f969 	bl	8000d24 <__aeabi_d2f>
 8007a52:	e7f7      	b.n	8007a44 <_scanf_float+0x400>
 8007a54:	2500      	movs	r5, #0
 8007a56:	e638      	b.n	80076ca <_scanf_float+0x86>
 8007a58:	0800b780 	.word	0x0800b780
 8007a5c:	0800b887 	.word	0x0800b887

08007a60 <nanf>:
 8007a60:	4800      	ldr	r0, [pc, #0]	; (8007a64 <nanf+0x4>)
 8007a62:	4770      	bx	lr
 8007a64:	7fc00000 	.word	0x7fc00000

08007a68 <siprintf>:
 8007a68:	b40e      	push	{r1, r2, r3}
 8007a6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a6e:	b500      	push	{lr}
 8007a70:	b09c      	sub	sp, #112	; 0x70
 8007a72:	ab1d      	add	r3, sp, #116	; 0x74
 8007a74:	9002      	str	r0, [sp, #8]
 8007a76:	9006      	str	r0, [sp, #24]
 8007a78:	9107      	str	r1, [sp, #28]
 8007a7a:	9104      	str	r1, [sp, #16]
 8007a7c:	4808      	ldr	r0, [pc, #32]	; (8007aa0 <siprintf+0x38>)
 8007a7e:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <siprintf+0x3c>)
 8007a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a84:	9105      	str	r1, [sp, #20]
 8007a86:	6800      	ldr	r0, [r0, #0]
 8007a88:	a902      	add	r1, sp, #8
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	f003 fa1e 	bl	800aecc <_svfiprintf_r>
 8007a90:	2200      	movs	r2, #0
 8007a92:	9b02      	ldr	r3, [sp, #8]
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	b01c      	add	sp, #112	; 0x70
 8007a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a9c:	b003      	add	sp, #12
 8007a9e:	4770      	bx	lr
 8007aa0:	20000504 	.word	0x20000504
 8007aa4:	ffff0208 	.word	0xffff0208

08007aa8 <sulp>:
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aac:	460f      	mov	r7, r1
 8007aae:	4690      	mov	r8, r2
 8007ab0:	f002 ff78 	bl	800a9a4 <__ulp>
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d011      	beq.n	8007ae2 <sulp+0x3a>
 8007abe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd0b      	ble.n	8007ae2 <sulp+0x3a>
 8007aca:	2400      	movs	r4, #0
 8007acc:	051b      	lsls	r3, r3, #20
 8007ace:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	f7f8 fe2b 	bl	8000734 <__aeabi_dmul>
 8007ade:	4604      	mov	r4, r0
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aea:	0000      	movs	r0, r0
 8007aec:	0000      	movs	r0, r0
	...

08007af0 <_strtod_l>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	469b      	mov	fp, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	b09f      	sub	sp, #124	; 0x7c
 8007afa:	931a      	str	r3, [sp, #104]	; 0x68
 8007afc:	4b9e      	ldr	r3, [pc, #632]	; (8007d78 <_strtod_l+0x288>)
 8007afe:	4682      	mov	sl, r0
 8007b00:	681f      	ldr	r7, [r3, #0]
 8007b02:	460e      	mov	r6, r1
 8007b04:	4638      	mov	r0, r7
 8007b06:	9215      	str	r2, [sp, #84]	; 0x54
 8007b08:	f7f8 fb9c 	bl	8000244 <strlen>
 8007b0c:	f04f 0800 	mov.w	r8, #0
 8007b10:	4604      	mov	r4, r0
 8007b12:	f04f 0900 	mov.w	r9, #0
 8007b16:	9619      	str	r6, [sp, #100]	; 0x64
 8007b18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	2a2b      	cmp	r2, #43	; 0x2b
 8007b1e:	d04c      	beq.n	8007bba <_strtod_l+0xca>
 8007b20:	d83a      	bhi.n	8007b98 <_strtod_l+0xa8>
 8007b22:	2a0d      	cmp	r2, #13
 8007b24:	d833      	bhi.n	8007b8e <_strtod_l+0x9e>
 8007b26:	2a08      	cmp	r2, #8
 8007b28:	d833      	bhi.n	8007b92 <_strtod_l+0xa2>
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d03d      	beq.n	8007baa <_strtod_l+0xba>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	930a      	str	r3, [sp, #40]	; 0x28
 8007b32:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007b34:	782b      	ldrb	r3, [r5, #0]
 8007b36:	2b30      	cmp	r3, #48	; 0x30
 8007b38:	f040 80aa 	bne.w	8007c90 <_strtod_l+0x1a0>
 8007b3c:	786b      	ldrb	r3, [r5, #1]
 8007b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b42:	2b58      	cmp	r3, #88	; 0x58
 8007b44:	d166      	bne.n	8007c14 <_strtod_l+0x124>
 8007b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b48:	4650      	mov	r0, sl
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	ab1a      	add	r3, sp, #104	; 0x68
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4a8a      	ldr	r2, [pc, #552]	; (8007d7c <_strtod_l+0x28c>)
 8007b52:	f8cd b008 	str.w	fp, [sp, #8]
 8007b56:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b58:	a919      	add	r1, sp, #100	; 0x64
 8007b5a:	f002 f821 	bl	8009ba0 <__gethex>
 8007b5e:	f010 0607 	ands.w	r6, r0, #7
 8007b62:	4604      	mov	r4, r0
 8007b64:	d005      	beq.n	8007b72 <_strtod_l+0x82>
 8007b66:	2e06      	cmp	r6, #6
 8007b68:	d129      	bne.n	8007bbe <_strtod_l+0xce>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	9519      	str	r5, [sp, #100]	; 0x64
 8007b70:	930a      	str	r3, [sp, #40]	; 0x28
 8007b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f040 858a 	bne.w	800868e <_strtod_l+0xb9e>
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7c:	b1d3      	cbz	r3, 8007bb4 <_strtod_l+0xc4>
 8007b7e:	4642      	mov	r2, r8
 8007b80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b84:	4610      	mov	r0, r2
 8007b86:	4619      	mov	r1, r3
 8007b88:	b01f      	add	sp, #124	; 0x7c
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	2a20      	cmp	r2, #32
 8007b90:	d1cd      	bne.n	8007b2e <_strtod_l+0x3e>
 8007b92:	3301      	adds	r3, #1
 8007b94:	9319      	str	r3, [sp, #100]	; 0x64
 8007b96:	e7bf      	b.n	8007b18 <_strtod_l+0x28>
 8007b98:	2a2d      	cmp	r2, #45	; 0x2d
 8007b9a:	d1c8      	bne.n	8007b2e <_strtod_l+0x3e>
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	920a      	str	r2, [sp, #40]	; 0x28
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1c3      	bne.n	8007b32 <_strtod_l+0x42>
 8007baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bac:	9619      	str	r6, [sp, #100]	; 0x64
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 856b 	bne.w	800868a <_strtod_l+0xb9a>
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	e7e4      	b.n	8007b84 <_strtod_l+0x94>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	e7ef      	b.n	8007b9e <_strtod_l+0xae>
 8007bbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bc0:	b13a      	cbz	r2, 8007bd2 <_strtod_l+0xe2>
 8007bc2:	2135      	movs	r1, #53	; 0x35
 8007bc4:	a81c      	add	r0, sp, #112	; 0x70
 8007bc6:	f002 fff1 	bl	800abac <__copybits>
 8007bca:	4650      	mov	r0, sl
 8007bcc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bce:	f002 fbb9 	bl	800a344 <_Bfree>
 8007bd2:	3e01      	subs	r6, #1
 8007bd4:	2e04      	cmp	r6, #4
 8007bd6:	d806      	bhi.n	8007be6 <_strtod_l+0xf6>
 8007bd8:	e8df f006 	tbb	[pc, r6]
 8007bdc:	1714030a 	.word	0x1714030a
 8007be0:	0a          	.byte	0x0a
 8007be1:	00          	.byte	0x00
 8007be2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007be6:	0721      	lsls	r1, r4, #28
 8007be8:	d5c3      	bpl.n	8007b72 <_strtod_l+0x82>
 8007bea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007bee:	e7c0      	b.n	8007b72 <_strtod_l+0x82>
 8007bf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007bf2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007bf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bfe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007c02:	e7f0      	b.n	8007be6 <_strtod_l+0xf6>
 8007c04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d80 <_strtod_l+0x290>
 8007c08:	e7ed      	b.n	8007be6 <_strtod_l+0xf6>
 8007c0a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007c0e:	f04f 38ff 	mov.w	r8, #4294967295
 8007c12:	e7e8      	b.n	8007be6 <_strtod_l+0xf6>
 8007c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	9219      	str	r2, [sp, #100]	; 0x64
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b30      	cmp	r3, #48	; 0x30
 8007c1e:	d0f9      	beq.n	8007c14 <_strtod_l+0x124>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0a6      	beq.n	8007b72 <_strtod_l+0x82>
 8007c24:	2301      	movs	r3, #1
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c2a:	220a      	movs	r2, #10
 8007c2c:	9308      	str	r3, [sp, #32]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	469b      	mov	fp, r3
 8007c32:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007c36:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c38:	7805      	ldrb	r5, [r0, #0]
 8007c3a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007c3e:	b2d9      	uxtb	r1, r3
 8007c40:	2909      	cmp	r1, #9
 8007c42:	d927      	bls.n	8007c94 <_strtod_l+0x1a4>
 8007c44:	4622      	mov	r2, r4
 8007c46:	4639      	mov	r1, r7
 8007c48:	f003 fbf1 	bl	800b42e <strncmp>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d033      	beq.n	8007cb8 <_strtod_l+0x1c8>
 8007c50:	2000      	movs	r0, #0
 8007c52:	462a      	mov	r2, r5
 8007c54:	465c      	mov	r4, fp
 8007c56:	4603      	mov	r3, r0
 8007c58:	9004      	str	r0, [sp, #16]
 8007c5a:	2a65      	cmp	r2, #101	; 0x65
 8007c5c:	d001      	beq.n	8007c62 <_strtod_l+0x172>
 8007c5e:	2a45      	cmp	r2, #69	; 0x45
 8007c60:	d114      	bne.n	8007c8c <_strtod_l+0x19c>
 8007c62:	b91c      	cbnz	r4, 8007c6c <_strtod_l+0x17c>
 8007c64:	9a07      	ldr	r2, [sp, #28]
 8007c66:	4302      	orrs	r2, r0
 8007c68:	d09f      	beq.n	8007baa <_strtod_l+0xba>
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007c6e:	1c72      	adds	r2, r6, #1
 8007c70:	9219      	str	r2, [sp, #100]	; 0x64
 8007c72:	7872      	ldrb	r2, [r6, #1]
 8007c74:	2a2b      	cmp	r2, #43	; 0x2b
 8007c76:	d079      	beq.n	8007d6c <_strtod_l+0x27c>
 8007c78:	2a2d      	cmp	r2, #45	; 0x2d
 8007c7a:	f000 8083 	beq.w	8007d84 <_strtod_l+0x294>
 8007c7e:	2700      	movs	r7, #0
 8007c80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c84:	2909      	cmp	r1, #9
 8007c86:	f240 8083 	bls.w	8007d90 <_strtod_l+0x2a0>
 8007c8a:	9619      	str	r6, [sp, #100]	; 0x64
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	e09f      	b.n	8007dd0 <_strtod_l+0x2e0>
 8007c90:	2300      	movs	r3, #0
 8007c92:	e7c8      	b.n	8007c26 <_strtod_l+0x136>
 8007c94:	f1bb 0f08 	cmp.w	fp, #8
 8007c98:	bfd5      	itete	le
 8007c9a:	9906      	ldrle	r1, [sp, #24]
 8007c9c:	9905      	ldrgt	r1, [sp, #20]
 8007c9e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ca2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ca6:	f100 0001 	add.w	r0, r0, #1
 8007caa:	bfd4      	ite	le
 8007cac:	9306      	strle	r3, [sp, #24]
 8007cae:	9305      	strgt	r3, [sp, #20]
 8007cb0:	f10b 0b01 	add.w	fp, fp, #1
 8007cb4:	9019      	str	r0, [sp, #100]	; 0x64
 8007cb6:	e7be      	b.n	8007c36 <_strtod_l+0x146>
 8007cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cba:	191a      	adds	r2, r3, r4
 8007cbc:	9219      	str	r2, [sp, #100]	; 0x64
 8007cbe:	5d1a      	ldrb	r2, [r3, r4]
 8007cc0:	f1bb 0f00 	cmp.w	fp, #0
 8007cc4:	d036      	beq.n	8007d34 <_strtod_l+0x244>
 8007cc6:	465c      	mov	r4, fp
 8007cc8:	9004      	str	r0, [sp, #16]
 8007cca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007cce:	2b09      	cmp	r3, #9
 8007cd0:	d912      	bls.n	8007cf8 <_strtod_l+0x208>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7c1      	b.n	8007c5a <_strtod_l+0x16a>
 8007cd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cd8:	3001      	adds	r0, #1
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	9219      	str	r2, [sp, #100]	; 0x64
 8007cde:	785a      	ldrb	r2, [r3, #1]
 8007ce0:	2a30      	cmp	r2, #48	; 0x30
 8007ce2:	d0f8      	beq.n	8007cd6 <_strtod_l+0x1e6>
 8007ce4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	f200 84d5 	bhi.w	8008698 <_strtod_l+0xba8>
 8007cee:	9004      	str	r0, [sp, #16]
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf6:	9308      	str	r3, [sp, #32]
 8007cf8:	3a30      	subs	r2, #48	; 0x30
 8007cfa:	f100 0301 	add.w	r3, r0, #1
 8007cfe:	d013      	beq.n	8007d28 <_strtod_l+0x238>
 8007d00:	9904      	ldr	r1, [sp, #16]
 8007d02:	1905      	adds	r5, r0, r4
 8007d04:	4419      	add	r1, r3
 8007d06:	9104      	str	r1, [sp, #16]
 8007d08:	4623      	mov	r3, r4
 8007d0a:	210a      	movs	r1, #10
 8007d0c:	42ab      	cmp	r3, r5
 8007d0e:	d113      	bne.n	8007d38 <_strtod_l+0x248>
 8007d10:	1823      	adds	r3, r4, r0
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	f104 0401 	add.w	r4, r4, #1
 8007d18:	4404      	add	r4, r0
 8007d1a:	dc1b      	bgt.n	8007d54 <_strtod_l+0x264>
 8007d1c:	230a      	movs	r3, #10
 8007d1e:	9906      	ldr	r1, [sp, #24]
 8007d20:	fb03 2301 	mla	r3, r3, r1, r2
 8007d24:	9306      	str	r3, [sp, #24]
 8007d26:	2300      	movs	r3, #0
 8007d28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	1c51      	adds	r1, r2, #1
 8007d2e:	9119      	str	r1, [sp, #100]	; 0x64
 8007d30:	7852      	ldrb	r2, [r2, #1]
 8007d32:	e7ca      	b.n	8007cca <_strtod_l+0x1da>
 8007d34:	4658      	mov	r0, fp
 8007d36:	e7d3      	b.n	8007ce0 <_strtod_l+0x1f0>
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	dc04      	bgt.n	8007d46 <_strtod_l+0x256>
 8007d3c:	9f06      	ldr	r7, [sp, #24]
 8007d3e:	434f      	muls	r7, r1
 8007d40:	9706      	str	r7, [sp, #24]
 8007d42:	3301      	adds	r3, #1
 8007d44:	e7e2      	b.n	8007d0c <_strtod_l+0x21c>
 8007d46:	1c5f      	adds	r7, r3, #1
 8007d48:	2f10      	cmp	r7, #16
 8007d4a:	bfde      	ittt	le
 8007d4c:	9f05      	ldrle	r7, [sp, #20]
 8007d4e:	434f      	mulle	r7, r1
 8007d50:	9705      	strle	r7, [sp, #20]
 8007d52:	e7f6      	b.n	8007d42 <_strtod_l+0x252>
 8007d54:	2c10      	cmp	r4, #16
 8007d56:	bfdf      	itttt	le
 8007d58:	230a      	movle	r3, #10
 8007d5a:	9905      	ldrle	r1, [sp, #20]
 8007d5c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007d60:	9305      	strle	r3, [sp, #20]
 8007d62:	e7e0      	b.n	8007d26 <_strtod_l+0x236>
 8007d64:	2300      	movs	r3, #0
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e77b      	b.n	8007c64 <_strtod_l+0x174>
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	1cb2      	adds	r2, r6, #2
 8007d70:	9219      	str	r2, [sp, #100]	; 0x64
 8007d72:	78b2      	ldrb	r2, [r6, #2]
 8007d74:	e784      	b.n	8007c80 <_strtod_l+0x190>
 8007d76:	bf00      	nop
 8007d78:	0800bacc 	.word	0x0800bacc
 8007d7c:	0800b788 	.word	0x0800b788
 8007d80:	7ff00000 	.word	0x7ff00000
 8007d84:	2701      	movs	r7, #1
 8007d86:	e7f2      	b.n	8007d6e <_strtod_l+0x27e>
 8007d88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d8a:	1c51      	adds	r1, r2, #1
 8007d8c:	9119      	str	r1, [sp, #100]	; 0x64
 8007d8e:	7852      	ldrb	r2, [r2, #1]
 8007d90:	2a30      	cmp	r2, #48	; 0x30
 8007d92:	d0f9      	beq.n	8007d88 <_strtod_l+0x298>
 8007d94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d98:	2908      	cmp	r1, #8
 8007d9a:	f63f af77 	bhi.w	8007c8c <_strtod_l+0x19c>
 8007d9e:	f04f 0e0a 	mov.w	lr, #10
 8007da2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007da6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007da8:	9209      	str	r2, [sp, #36]	; 0x24
 8007daa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dac:	1c51      	adds	r1, r2, #1
 8007dae:	9119      	str	r1, [sp, #100]	; 0x64
 8007db0:	7852      	ldrb	r2, [r2, #1]
 8007db2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007db6:	2d09      	cmp	r5, #9
 8007db8:	d935      	bls.n	8007e26 <_strtod_l+0x336>
 8007dba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007dbc:	1b49      	subs	r1, r1, r5
 8007dbe:	2908      	cmp	r1, #8
 8007dc0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007dc4:	dc02      	bgt.n	8007dcc <_strtod_l+0x2dc>
 8007dc6:	4565      	cmp	r5, ip
 8007dc8:	bfa8      	it	ge
 8007dca:	4665      	movge	r5, ip
 8007dcc:	b107      	cbz	r7, 8007dd0 <_strtod_l+0x2e0>
 8007dce:	426d      	negs	r5, r5
 8007dd0:	2c00      	cmp	r4, #0
 8007dd2:	d14c      	bne.n	8007e6e <_strtod_l+0x37e>
 8007dd4:	9907      	ldr	r1, [sp, #28]
 8007dd6:	4301      	orrs	r1, r0
 8007dd8:	f47f aecb 	bne.w	8007b72 <_strtod_l+0x82>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f47f aee4 	bne.w	8007baa <_strtod_l+0xba>
 8007de2:	2a69      	cmp	r2, #105	; 0x69
 8007de4:	d026      	beq.n	8007e34 <_strtod_l+0x344>
 8007de6:	dc23      	bgt.n	8007e30 <_strtod_l+0x340>
 8007de8:	2a49      	cmp	r2, #73	; 0x49
 8007dea:	d023      	beq.n	8007e34 <_strtod_l+0x344>
 8007dec:	2a4e      	cmp	r2, #78	; 0x4e
 8007dee:	f47f aedc 	bne.w	8007baa <_strtod_l+0xba>
 8007df2:	499d      	ldr	r1, [pc, #628]	; (8008068 <_strtod_l+0x578>)
 8007df4:	a819      	add	r0, sp, #100	; 0x64
 8007df6:	f002 f921 	bl	800a03c <__match>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f43f aed5 	beq.w	8007baa <_strtod_l+0xba>
 8007e00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b28      	cmp	r3, #40	; 0x28
 8007e06:	d12c      	bne.n	8007e62 <_strtod_l+0x372>
 8007e08:	4998      	ldr	r1, [pc, #608]	; (800806c <_strtod_l+0x57c>)
 8007e0a:	aa1c      	add	r2, sp, #112	; 0x70
 8007e0c:	a819      	add	r0, sp, #100	; 0x64
 8007e0e:	f002 f929 	bl	800a064 <__hexnan>
 8007e12:	2805      	cmp	r0, #5
 8007e14:	d125      	bne.n	8007e62 <_strtod_l+0x372>
 8007e16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007e1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007e20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007e24:	e6a5      	b.n	8007b72 <_strtod_l+0x82>
 8007e26:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007e2a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007e2e:	e7bc      	b.n	8007daa <_strtod_l+0x2ba>
 8007e30:	2a6e      	cmp	r2, #110	; 0x6e
 8007e32:	e7dc      	b.n	8007dee <_strtod_l+0x2fe>
 8007e34:	498e      	ldr	r1, [pc, #568]	; (8008070 <_strtod_l+0x580>)
 8007e36:	a819      	add	r0, sp, #100	; 0x64
 8007e38:	f002 f900 	bl	800a03c <__match>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	f43f aeb4 	beq.w	8007baa <_strtod_l+0xba>
 8007e42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e44:	498b      	ldr	r1, [pc, #556]	; (8008074 <_strtod_l+0x584>)
 8007e46:	3b01      	subs	r3, #1
 8007e48:	a819      	add	r0, sp, #100	; 0x64
 8007e4a:	9319      	str	r3, [sp, #100]	; 0x64
 8007e4c:	f002 f8f6 	bl	800a03c <__match>
 8007e50:	b910      	cbnz	r0, 8007e58 <_strtod_l+0x368>
 8007e52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e54:	3301      	adds	r3, #1
 8007e56:	9319      	str	r3, [sp, #100]	; 0x64
 8007e58:	f04f 0800 	mov.w	r8, #0
 8007e5c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008078 <_strtod_l+0x588>
 8007e60:	e687      	b.n	8007b72 <_strtod_l+0x82>
 8007e62:	4886      	ldr	r0, [pc, #536]	; (800807c <_strtod_l+0x58c>)
 8007e64:	f003 fa8a 	bl	800b37c <nan>
 8007e68:	4680      	mov	r8, r0
 8007e6a:	4689      	mov	r9, r1
 8007e6c:	e681      	b.n	8007b72 <_strtod_l+0x82>
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	f1bb 0f00 	cmp.w	fp, #0
 8007e74:	bf08      	it	eq
 8007e76:	46a3      	moveq	fp, r4
 8007e78:	1aeb      	subs	r3, r5, r3
 8007e7a:	2c10      	cmp	r4, #16
 8007e7c:	9806      	ldr	r0, [sp, #24]
 8007e7e:	4626      	mov	r6, r4
 8007e80:	9307      	str	r3, [sp, #28]
 8007e82:	bfa8      	it	ge
 8007e84:	2610      	movge	r6, #16
 8007e86:	f7f8 fbdb 	bl	8000640 <__aeabi_ui2d>
 8007e8a:	2c09      	cmp	r4, #9
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	dd13      	ble.n	8007eba <_strtod_l+0x3ca>
 8007e92:	4b7b      	ldr	r3, [pc, #492]	; (8008080 <_strtod_l+0x590>)
 8007e94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e98:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e9c:	f7f8 fc4a 	bl	8000734 <__aeabi_dmul>
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	9805      	ldr	r0, [sp, #20]
 8007ea4:	4689      	mov	r9, r1
 8007ea6:	f7f8 fbcb 	bl	8000640 <__aeabi_ui2d>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	f7f8 fa89 	bl	80003c8 <__adddf3>
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	4689      	mov	r9, r1
 8007eba:	2c0f      	cmp	r4, #15
 8007ebc:	dc36      	bgt.n	8007f2c <_strtod_l+0x43c>
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f43f ae56 	beq.w	8007b72 <_strtod_l+0x82>
 8007ec6:	dd22      	ble.n	8007f0e <_strtod_l+0x41e>
 8007ec8:	2b16      	cmp	r3, #22
 8007eca:	dc09      	bgt.n	8007ee0 <_strtod_l+0x3f0>
 8007ecc:	496c      	ldr	r1, [pc, #432]	; (8008080 <_strtod_l+0x590>)
 8007ece:	4642      	mov	r2, r8
 8007ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eda:	f7f8 fc2b 	bl	8000734 <__aeabi_dmul>
 8007ede:	e7c3      	b.n	8007e68 <_strtod_l+0x378>
 8007ee0:	9a07      	ldr	r2, [sp, #28]
 8007ee2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	db20      	blt.n	8007f2c <_strtod_l+0x43c>
 8007eea:	4d65      	ldr	r5, [pc, #404]	; (8008080 <_strtod_l+0x590>)
 8007eec:	f1c4 040f 	rsb	r4, r4, #15
 8007ef0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efa:	464b      	mov	r3, r9
 8007efc:	f7f8 fc1a 	bl	8000734 <__aeabi_dmul>
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	1b1c      	subs	r4, r3, r4
 8007f04:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f0c:	e7e5      	b.n	8007eda <_strtod_l+0x3ea>
 8007f0e:	9b07      	ldr	r3, [sp, #28]
 8007f10:	3316      	adds	r3, #22
 8007f12:	db0b      	blt.n	8007f2c <_strtod_l+0x43c>
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	4640      	mov	r0, r8
 8007f18:	1b5d      	subs	r5, r3, r5
 8007f1a:	4b59      	ldr	r3, [pc, #356]	; (8008080 <_strtod_l+0x590>)
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007f22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f26:	f7f8 fd2f 	bl	8000988 <__aeabi_ddiv>
 8007f2a:	e79d      	b.n	8007e68 <_strtod_l+0x378>
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	1ba6      	subs	r6, r4, r6
 8007f30:	441e      	add	r6, r3
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	dd74      	ble.n	8008020 <_strtod_l+0x530>
 8007f36:	f016 030f 	ands.w	r3, r6, #15
 8007f3a:	d00a      	beq.n	8007f52 <_strtod_l+0x462>
 8007f3c:	4950      	ldr	r1, [pc, #320]	; (8008080 <_strtod_l+0x590>)
 8007f3e:	4642      	mov	r2, r8
 8007f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f48:	464b      	mov	r3, r9
 8007f4a:	f7f8 fbf3 	bl	8000734 <__aeabi_dmul>
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4689      	mov	r9, r1
 8007f52:	f036 060f 	bics.w	r6, r6, #15
 8007f56:	d052      	beq.n	8007ffe <_strtod_l+0x50e>
 8007f58:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007f5c:	dd27      	ble.n	8007fae <_strtod_l+0x4be>
 8007f5e:	f04f 0b00 	mov.w	fp, #0
 8007f62:	f8cd b010 	str.w	fp, [sp, #16]
 8007f66:	f8cd b020 	str.w	fp, [sp, #32]
 8007f6a:	f8cd b018 	str.w	fp, [sp, #24]
 8007f6e:	2322      	movs	r3, #34	; 0x22
 8007f70:	f04f 0800 	mov.w	r8, #0
 8007f74:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008078 <_strtod_l+0x588>
 8007f78:	f8ca 3000 	str.w	r3, [sl]
 8007f7c:	9b08      	ldr	r3, [sp, #32]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f43f adf7 	beq.w	8007b72 <_strtod_l+0x82>
 8007f84:	4650      	mov	r0, sl
 8007f86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f88:	f002 f9dc 	bl	800a344 <_Bfree>
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	9906      	ldr	r1, [sp, #24]
 8007f90:	f002 f9d8 	bl	800a344 <_Bfree>
 8007f94:	4650      	mov	r0, sl
 8007f96:	9904      	ldr	r1, [sp, #16]
 8007f98:	f002 f9d4 	bl	800a344 <_Bfree>
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	9908      	ldr	r1, [sp, #32]
 8007fa0:	f002 f9d0 	bl	800a344 <_Bfree>
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	f002 f9cc 	bl	800a344 <_Bfree>
 8007fac:	e5e1      	b.n	8007b72 <_strtod_l+0x82>
 8007fae:	4b35      	ldr	r3, [pc, #212]	; (8008084 <_strtod_l+0x594>)
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	461f      	mov	r7, r3
 8007fba:	1136      	asrs	r6, r6, #4
 8007fbc:	2e01      	cmp	r6, #1
 8007fbe:	dc21      	bgt.n	8008004 <_strtod_l+0x514>
 8007fc0:	b10b      	cbz	r3, 8007fc6 <_strtod_l+0x4d6>
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	4689      	mov	r9, r1
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <_strtod_l+0x594>)
 8007fc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007fcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	f7f8 fbac 	bl	8000734 <__aeabi_dmul>
 8007fdc:	4b26      	ldr	r3, [pc, #152]	; (8008078 <_strtod_l+0x588>)
 8007fde:	460a      	mov	r2, r1
 8007fe0:	400b      	ands	r3, r1
 8007fe2:	4929      	ldr	r1, [pc, #164]	; (8008088 <_strtod_l+0x598>)
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	428b      	cmp	r3, r1
 8007fe8:	d8b9      	bhi.n	8007f5e <_strtod_l+0x46e>
 8007fea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fee:	428b      	cmp	r3, r1
 8007ff0:	bf86      	itte	hi
 8007ff2:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ff6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800808c <_strtod_l+0x59c>
 8007ffa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007ffe:	2300      	movs	r3, #0
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	e07f      	b.n	8008104 <_strtod_l+0x614>
 8008004:	07f2      	lsls	r2, r6, #31
 8008006:	d505      	bpl.n	8008014 <_strtod_l+0x524>
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 fb91 	bl	8000734 <__aeabi_dmul>
 8008012:	2301      	movs	r3, #1
 8008014:	9a05      	ldr	r2, [sp, #20]
 8008016:	3701      	adds	r7, #1
 8008018:	3208      	adds	r2, #8
 800801a:	1076      	asrs	r6, r6, #1
 800801c:	9205      	str	r2, [sp, #20]
 800801e:	e7cd      	b.n	8007fbc <_strtod_l+0x4cc>
 8008020:	d0ed      	beq.n	8007ffe <_strtod_l+0x50e>
 8008022:	4276      	negs	r6, r6
 8008024:	f016 020f 	ands.w	r2, r6, #15
 8008028:	d00a      	beq.n	8008040 <_strtod_l+0x550>
 800802a:	4b15      	ldr	r3, [pc, #84]	; (8008080 <_strtod_l+0x590>)
 800802c:	4640      	mov	r0, r8
 800802e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008032:	4649      	mov	r1, r9
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 fca6 	bl	8000988 <__aeabi_ddiv>
 800803c:	4680      	mov	r8, r0
 800803e:	4689      	mov	r9, r1
 8008040:	1136      	asrs	r6, r6, #4
 8008042:	d0dc      	beq.n	8007ffe <_strtod_l+0x50e>
 8008044:	2e1f      	cmp	r6, #31
 8008046:	dd23      	ble.n	8008090 <_strtod_l+0x5a0>
 8008048:	f04f 0b00 	mov.w	fp, #0
 800804c:	f8cd b010 	str.w	fp, [sp, #16]
 8008050:	f8cd b020 	str.w	fp, [sp, #32]
 8008054:	f8cd b018 	str.w	fp, [sp, #24]
 8008058:	2322      	movs	r3, #34	; 0x22
 800805a:	f04f 0800 	mov.w	r8, #0
 800805e:	f04f 0900 	mov.w	r9, #0
 8008062:	f8ca 3000 	str.w	r3, [sl]
 8008066:	e789      	b.n	8007f7c <_strtod_l+0x48c>
 8008068:	0800b759 	.word	0x0800b759
 800806c:	0800b79c 	.word	0x0800b79c
 8008070:	0800b751 	.word	0x0800b751
 8008074:	0800b98c 	.word	0x0800b98c
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	0800b887 	.word	0x0800b887
 8008080:	0800bb68 	.word	0x0800bb68
 8008084:	0800bb40 	.word	0x0800bb40
 8008088:	7ca00000 	.word	0x7ca00000
 800808c:	7fefffff 	.word	0x7fefffff
 8008090:	f016 0310 	ands.w	r3, r6, #16
 8008094:	bf18      	it	ne
 8008096:	236a      	movne	r3, #106	; 0x6a
 8008098:	4640      	mov	r0, r8
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	4649      	mov	r1, r9
 800809e:	2300      	movs	r3, #0
 80080a0:	4fb0      	ldr	r7, [pc, #704]	; (8008364 <_strtod_l+0x874>)
 80080a2:	07f2      	lsls	r2, r6, #31
 80080a4:	d504      	bpl.n	80080b0 <_strtod_l+0x5c0>
 80080a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080aa:	f7f8 fb43 	bl	8000734 <__aeabi_dmul>
 80080ae:	2301      	movs	r3, #1
 80080b0:	1076      	asrs	r6, r6, #1
 80080b2:	f107 0708 	add.w	r7, r7, #8
 80080b6:	d1f4      	bne.n	80080a2 <_strtod_l+0x5b2>
 80080b8:	b10b      	cbz	r3, 80080be <_strtod_l+0x5ce>
 80080ba:	4680      	mov	r8, r0
 80080bc:	4689      	mov	r9, r1
 80080be:	9b05      	ldr	r3, [sp, #20]
 80080c0:	b1c3      	cbz	r3, 80080f4 <_strtod_l+0x604>
 80080c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80080c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	4649      	mov	r1, r9
 80080ce:	dd11      	ble.n	80080f4 <_strtod_l+0x604>
 80080d0:	2b1f      	cmp	r3, #31
 80080d2:	f340 8127 	ble.w	8008324 <_strtod_l+0x834>
 80080d6:	2b34      	cmp	r3, #52	; 0x34
 80080d8:	bfd8      	it	le
 80080da:	f04f 33ff 	movle.w	r3, #4294967295
 80080de:	f04f 0800 	mov.w	r8, #0
 80080e2:	bfcf      	iteee	gt
 80080e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80080e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80080ec:	fa03 f202 	lslle.w	r2, r3, r2
 80080f0:	ea02 0901 	andle.w	r9, r2, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	4640      	mov	r0, r8
 80080fa:	4649      	mov	r1, r9
 80080fc:	f7f8 fd82 	bl	8000c04 <__aeabi_dcmpeq>
 8008100:	2800      	cmp	r0, #0
 8008102:	d1a1      	bne.n	8008048 <_strtod_l+0x558>
 8008104:	9b06      	ldr	r3, [sp, #24]
 8008106:	465a      	mov	r2, fp
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	4650      	mov	r0, sl
 800810c:	4623      	mov	r3, r4
 800810e:	9908      	ldr	r1, [sp, #32]
 8008110:	f002 f980 	bl	800a414 <__s2b>
 8008114:	9008      	str	r0, [sp, #32]
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f af21 	beq.w	8007f5e <_strtod_l+0x46e>
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	f04f 0b00 	mov.w	fp, #0
 8008122:	1b5d      	subs	r5, r3, r5
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	f8cd b010 	str.w	fp, [sp, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfb4      	ite	lt
 800812e:	462b      	movlt	r3, r5
 8008130:	2300      	movge	r3, #0
 8008132:	930e      	str	r3, [sp, #56]	; 0x38
 8008134:	9b07      	ldr	r3, [sp, #28]
 8008136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800813a:	9314      	str	r3, [sp, #80]	; 0x50
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	4650      	mov	r0, sl
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	f002 f8bf 	bl	800a2c4 <_Balloc>
 8008146:	9006      	str	r0, [sp, #24]
 8008148:	2800      	cmp	r0, #0
 800814a:	f43f af10 	beq.w	8007f6e <_strtod_l+0x47e>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	300c      	adds	r0, #12
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	f103 010c 	add.w	r1, r3, #12
 8008158:	3202      	adds	r2, #2
 800815a:	0092      	lsls	r2, r2, #2
 800815c:	f7fe fdfc 	bl	8006d58 <memcpy>
 8008160:	ab1c      	add	r3, sp, #112	; 0x70
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	ab1b      	add	r3, sp, #108	; 0x6c
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	4650      	mov	r0, sl
 800816e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008172:	f002 fc91 	bl	800aa98 <__d2b>
 8008176:	901a      	str	r0, [sp, #104]	; 0x68
 8008178:	2800      	cmp	r0, #0
 800817a:	f43f aef8 	beq.w	8007f6e <_strtod_l+0x47e>
 800817e:	2101      	movs	r1, #1
 8008180:	4650      	mov	r0, sl
 8008182:	f002 f9df 	bl	800a544 <__i2b>
 8008186:	4603      	mov	r3, r0
 8008188:	9004      	str	r0, [sp, #16]
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f aeef 	beq.w	8007f6e <_strtod_l+0x47e>
 8008190:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008192:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008194:	2d00      	cmp	r5, #0
 8008196:	bfab      	itete	ge
 8008198:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800819a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800819c:	18ee      	addge	r6, r5, r3
 800819e:	1b5c      	sublt	r4, r3, r5
 80081a0:	9b05      	ldr	r3, [sp, #20]
 80081a2:	bfa8      	it	ge
 80081a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80081a6:	eba5 0503 	sub.w	r5, r5, r3
 80081aa:	4415      	add	r5, r2
 80081ac:	4b6e      	ldr	r3, [pc, #440]	; (8008368 <_strtod_l+0x878>)
 80081ae:	f105 35ff 	add.w	r5, r5, #4294967295
 80081b2:	bfb8      	it	lt
 80081b4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80081b6:	429d      	cmp	r5, r3
 80081b8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80081bc:	f280 80c4 	bge.w	8008348 <_strtod_l+0x858>
 80081c0:	1b5b      	subs	r3, r3, r5
 80081c2:	2b1f      	cmp	r3, #31
 80081c4:	f04f 0701 	mov.w	r7, #1
 80081c8:	eba2 0203 	sub.w	r2, r2, r3
 80081cc:	f300 80b1 	bgt.w	8008332 <_strtod_l+0x842>
 80081d0:	2500      	movs	r5, #0
 80081d2:	fa07 f303 	lsl.w	r3, r7, r3
 80081d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d8:	18b7      	adds	r7, r6, r2
 80081da:	9b05      	ldr	r3, [sp, #20]
 80081dc:	42be      	cmp	r6, r7
 80081de:	4414      	add	r4, r2
 80081e0:	441c      	add	r4, r3
 80081e2:	4633      	mov	r3, r6
 80081e4:	bfa8      	it	ge
 80081e6:	463b      	movge	r3, r7
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	bfa8      	it	ge
 80081ec:	4623      	movge	r3, r4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfc2      	ittt	gt
 80081f2:	1aff      	subgt	r7, r7, r3
 80081f4:	1ae4      	subgt	r4, r4, r3
 80081f6:	1af6      	subgt	r6, r6, r3
 80081f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd17      	ble.n	800822e <_strtod_l+0x73e>
 80081fe:	461a      	mov	r2, r3
 8008200:	4650      	mov	r0, sl
 8008202:	9904      	ldr	r1, [sp, #16]
 8008204:	f002 fa5c 	bl	800a6c0 <__pow5mult>
 8008208:	9004      	str	r0, [sp, #16]
 800820a:	2800      	cmp	r0, #0
 800820c:	f43f aeaf 	beq.w	8007f6e <_strtod_l+0x47e>
 8008210:	4601      	mov	r1, r0
 8008212:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008214:	4650      	mov	r0, sl
 8008216:	f002 f9ab 	bl	800a570 <__multiply>
 800821a:	9009      	str	r0, [sp, #36]	; 0x24
 800821c:	2800      	cmp	r0, #0
 800821e:	f43f aea6 	beq.w	8007f6e <_strtod_l+0x47e>
 8008222:	4650      	mov	r0, sl
 8008224:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008226:	f002 f88d 	bl	800a344 <_Bfree>
 800822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822c:	931a      	str	r3, [sp, #104]	; 0x68
 800822e:	2f00      	cmp	r7, #0
 8008230:	f300 808e 	bgt.w	8008350 <_strtod_l+0x860>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	2b00      	cmp	r3, #0
 8008238:	dd08      	ble.n	800824c <_strtod_l+0x75c>
 800823a:	4650      	mov	r0, sl
 800823c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800823e:	9906      	ldr	r1, [sp, #24]
 8008240:	f002 fa3e 	bl	800a6c0 <__pow5mult>
 8008244:	9006      	str	r0, [sp, #24]
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f ae91 	beq.w	8007f6e <_strtod_l+0x47e>
 800824c:	2c00      	cmp	r4, #0
 800824e:	dd08      	ble.n	8008262 <_strtod_l+0x772>
 8008250:	4622      	mov	r2, r4
 8008252:	4650      	mov	r0, sl
 8008254:	9906      	ldr	r1, [sp, #24]
 8008256:	f002 fa8d 	bl	800a774 <__lshift>
 800825a:	9006      	str	r0, [sp, #24]
 800825c:	2800      	cmp	r0, #0
 800825e:	f43f ae86 	beq.w	8007f6e <_strtod_l+0x47e>
 8008262:	2e00      	cmp	r6, #0
 8008264:	dd08      	ble.n	8008278 <_strtod_l+0x788>
 8008266:	4632      	mov	r2, r6
 8008268:	4650      	mov	r0, sl
 800826a:	9904      	ldr	r1, [sp, #16]
 800826c:	f002 fa82 	bl	800a774 <__lshift>
 8008270:	9004      	str	r0, [sp, #16]
 8008272:	2800      	cmp	r0, #0
 8008274:	f43f ae7b 	beq.w	8007f6e <_strtod_l+0x47e>
 8008278:	4650      	mov	r0, sl
 800827a:	9a06      	ldr	r2, [sp, #24]
 800827c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800827e:	f002 fb05 	bl	800a88c <__mdiff>
 8008282:	4683      	mov	fp, r0
 8008284:	2800      	cmp	r0, #0
 8008286:	f43f ae72 	beq.w	8007f6e <_strtod_l+0x47e>
 800828a:	2400      	movs	r4, #0
 800828c:	68c3      	ldr	r3, [r0, #12]
 800828e:	9904      	ldr	r1, [sp, #16]
 8008290:	60c4      	str	r4, [r0, #12]
 8008292:	930b      	str	r3, [sp, #44]	; 0x2c
 8008294:	f002 fade 	bl	800a854 <__mcmp>
 8008298:	42a0      	cmp	r0, r4
 800829a:	da6b      	bge.n	8008374 <_strtod_l+0x884>
 800829c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829e:	ea53 0308 	orrs.w	r3, r3, r8
 80082a2:	f040 8091 	bne.w	80083c8 <_strtod_l+0x8d8>
 80082a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f040 808c 	bne.w	80083c8 <_strtod_l+0x8d8>
 80082b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082b4:	0d1b      	lsrs	r3, r3, #20
 80082b6:	051b      	lsls	r3, r3, #20
 80082b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80082bc:	f240 8084 	bls.w	80083c8 <_strtod_l+0x8d8>
 80082c0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80082c4:	b91b      	cbnz	r3, 80082ce <_strtod_l+0x7de>
 80082c6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	dd7c      	ble.n	80083c8 <_strtod_l+0x8d8>
 80082ce:	4659      	mov	r1, fp
 80082d0:	2201      	movs	r2, #1
 80082d2:	4650      	mov	r0, sl
 80082d4:	f002 fa4e 	bl	800a774 <__lshift>
 80082d8:	9904      	ldr	r1, [sp, #16]
 80082da:	4683      	mov	fp, r0
 80082dc:	f002 faba 	bl	800a854 <__mcmp>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	dd71      	ble.n	80083c8 <_strtod_l+0x8d8>
 80082e4:	9905      	ldr	r1, [sp, #20]
 80082e6:	464b      	mov	r3, r9
 80082e8:	4a20      	ldr	r2, [pc, #128]	; (800836c <_strtod_l+0x87c>)
 80082ea:	2900      	cmp	r1, #0
 80082ec:	f000 808c 	beq.w	8008408 <_strtod_l+0x918>
 80082f0:	ea02 0109 	and.w	r1, r2, r9
 80082f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082f8:	f300 8086 	bgt.w	8008408 <_strtod_l+0x918>
 80082fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008300:	f77f aeaa 	ble.w	8008058 <_strtod_l+0x568>
 8008304:	4640      	mov	r0, r8
 8008306:	4649      	mov	r1, r9
 8008308:	4b19      	ldr	r3, [pc, #100]	; (8008370 <_strtod_l+0x880>)
 800830a:	2200      	movs	r2, #0
 800830c:	f7f8 fa12 	bl	8000734 <__aeabi_dmul>
 8008310:	460b      	mov	r3, r1
 8008312:	4303      	orrs	r3, r0
 8008314:	bf08      	it	eq
 8008316:	2322      	moveq	r3, #34	; 0x22
 8008318:	4680      	mov	r8, r0
 800831a:	4689      	mov	r9, r1
 800831c:	bf08      	it	eq
 800831e:	f8ca 3000 	streq.w	r3, [sl]
 8008322:	e62f      	b.n	8007f84 <_strtod_l+0x494>
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	ea03 0808 	and.w	r8, r3, r8
 8008330:	e6e0      	b.n	80080f4 <_strtod_l+0x604>
 8008332:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008336:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800833a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800833e:	35e2      	adds	r5, #226	; 0xe2
 8008340:	fa07 f505 	lsl.w	r5, r7, r5
 8008344:	970f      	str	r7, [sp, #60]	; 0x3c
 8008346:	e747      	b.n	80081d8 <_strtod_l+0x6e8>
 8008348:	2301      	movs	r3, #1
 800834a:	2500      	movs	r5, #0
 800834c:	930f      	str	r3, [sp, #60]	; 0x3c
 800834e:	e743      	b.n	80081d8 <_strtod_l+0x6e8>
 8008350:	463a      	mov	r2, r7
 8008352:	4650      	mov	r0, sl
 8008354:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008356:	f002 fa0d 	bl	800a774 <__lshift>
 800835a:	901a      	str	r0, [sp, #104]	; 0x68
 800835c:	2800      	cmp	r0, #0
 800835e:	f47f af69 	bne.w	8008234 <_strtod_l+0x744>
 8008362:	e604      	b.n	8007f6e <_strtod_l+0x47e>
 8008364:	0800b7b0 	.word	0x0800b7b0
 8008368:	fffffc02 	.word	0xfffffc02
 800836c:	7ff00000 	.word	0x7ff00000
 8008370:	39500000 	.word	0x39500000
 8008374:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008378:	d165      	bne.n	8008446 <_strtod_l+0x956>
 800837a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800837c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008380:	b35a      	cbz	r2, 80083da <_strtod_l+0x8ea>
 8008382:	4a99      	ldr	r2, [pc, #612]	; (80085e8 <_strtod_l+0xaf8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d12b      	bne.n	80083e0 <_strtod_l+0x8f0>
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	4641      	mov	r1, r8
 800838c:	b303      	cbz	r3, 80083d0 <_strtod_l+0x8e0>
 800838e:	464a      	mov	r2, r9
 8008390:	4b96      	ldr	r3, [pc, #600]	; (80085ec <_strtod_l+0xafc>)
 8008392:	4013      	ands	r3, r2
 8008394:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	d81b      	bhi.n	80083d6 <_strtod_l+0x8e6>
 800839e:	0d1b      	lsrs	r3, r3, #20
 80083a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	4299      	cmp	r1, r3
 80083aa:	d119      	bne.n	80083e0 <_strtod_l+0x8f0>
 80083ac:	4b90      	ldr	r3, [pc, #576]	; (80085f0 <_strtod_l+0xb00>)
 80083ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d102      	bne.n	80083ba <_strtod_l+0x8ca>
 80083b4:	3101      	adds	r1, #1
 80083b6:	f43f adda 	beq.w	8007f6e <_strtod_l+0x47e>
 80083ba:	f04f 0800 	mov.w	r8, #0
 80083be:	4b8b      	ldr	r3, [pc, #556]	; (80085ec <_strtod_l+0xafc>)
 80083c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c2:	401a      	ands	r2, r3
 80083c4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d19a      	bne.n	8008304 <_strtod_l+0x814>
 80083ce:	e5d9      	b.n	8007f84 <_strtod_l+0x494>
 80083d0:	f04f 33ff 	mov.w	r3, #4294967295
 80083d4:	e7e8      	b.n	80083a8 <_strtod_l+0x8b8>
 80083d6:	4613      	mov	r3, r2
 80083d8:	e7e6      	b.n	80083a8 <_strtod_l+0x8b8>
 80083da:	ea53 0308 	orrs.w	r3, r3, r8
 80083de:	d081      	beq.n	80082e4 <_strtod_l+0x7f4>
 80083e0:	b1e5      	cbz	r5, 800841c <_strtod_l+0x92c>
 80083e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e4:	421d      	tst	r5, r3
 80083e6:	d0ef      	beq.n	80083c8 <_strtod_l+0x8d8>
 80083e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	9a05      	ldr	r2, [sp, #20]
 80083f0:	b1c3      	cbz	r3, 8008424 <_strtod_l+0x934>
 80083f2:	f7ff fb59 	bl	8007aa8 <sulp>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083fe:	f7f7 ffe3 	bl	80003c8 <__adddf3>
 8008402:	4680      	mov	r8, r0
 8008404:	4689      	mov	r9, r1
 8008406:	e7df      	b.n	80083c8 <_strtod_l+0x8d8>
 8008408:	4013      	ands	r3, r2
 800840a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800840e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008412:	f04f 38ff 	mov.w	r8, #4294967295
 8008416:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800841a:	e7d5      	b.n	80083c8 <_strtod_l+0x8d8>
 800841c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800841e:	ea13 0f08 	tst.w	r3, r8
 8008422:	e7e0      	b.n	80083e6 <_strtod_l+0x8f6>
 8008424:	f7ff fb40 	bl	8007aa8 <sulp>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008430:	f7f7 ffc8 	bl	80003c4 <__aeabi_dsub>
 8008434:	2200      	movs	r2, #0
 8008436:	2300      	movs	r3, #0
 8008438:	4680      	mov	r8, r0
 800843a:	4689      	mov	r9, r1
 800843c:	f7f8 fbe2 	bl	8000c04 <__aeabi_dcmpeq>
 8008440:	2800      	cmp	r0, #0
 8008442:	d0c1      	beq.n	80083c8 <_strtod_l+0x8d8>
 8008444:	e608      	b.n	8008058 <_strtod_l+0x568>
 8008446:	4658      	mov	r0, fp
 8008448:	9904      	ldr	r1, [sp, #16]
 800844a:	f002 fb81 	bl	800ab50 <__ratio>
 800844e:	2200      	movs	r2, #0
 8008450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	f7f8 fbe8 	bl	8000c2c <__aeabi_dcmple>
 800845c:	2800      	cmp	r0, #0
 800845e:	d070      	beq.n	8008542 <_strtod_l+0xa52>
 8008460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d042      	beq.n	80084ec <_strtod_l+0x9fc>
 8008466:	2600      	movs	r6, #0
 8008468:	4f62      	ldr	r7, [pc, #392]	; (80085f4 <_strtod_l+0xb04>)
 800846a:	4d62      	ldr	r5, [pc, #392]	; (80085f4 <_strtod_l+0xb04>)
 800846c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008472:	0d1b      	lsrs	r3, r3, #20
 8008474:	051b      	lsls	r3, r3, #20
 8008476:	930f      	str	r3, [sp, #60]	; 0x3c
 8008478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800847a:	4b5f      	ldr	r3, [pc, #380]	; (80085f8 <_strtod_l+0xb08>)
 800847c:	429a      	cmp	r2, r3
 800847e:	f040 80c3 	bne.w	8008608 <_strtod_l+0xb18>
 8008482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008484:	4640      	mov	r0, r8
 8008486:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800848a:	4649      	mov	r1, r9
 800848c:	f002 fa8a 	bl	800a9a4 <__ulp>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4630      	mov	r0, r6
 8008496:	4639      	mov	r1, r7
 8008498:	f7f8 f94c 	bl	8000734 <__aeabi_dmul>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	f7f7 ff92 	bl	80003c8 <__adddf3>
 80084a4:	460b      	mov	r3, r1
 80084a6:	4951      	ldr	r1, [pc, #324]	; (80085ec <_strtod_l+0xafc>)
 80084a8:	4a54      	ldr	r2, [pc, #336]	; (80085fc <_strtod_l+0xb0c>)
 80084aa:	4019      	ands	r1, r3
 80084ac:	4291      	cmp	r1, r2
 80084ae:	4680      	mov	r8, r0
 80084b0:	d95d      	bls.n	800856e <_strtod_l+0xa7e>
 80084b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084b4:	4b4e      	ldr	r3, [pc, #312]	; (80085f0 <_strtod_l+0xb00>)
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d103      	bne.n	80084c2 <_strtod_l+0x9d2>
 80084ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084bc:	3301      	adds	r3, #1
 80084be:	f43f ad56 	beq.w	8007f6e <_strtod_l+0x47e>
 80084c2:	f04f 38ff 	mov.w	r8, #4294967295
 80084c6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80085f0 <_strtod_l+0xb00>
 80084ca:	4650      	mov	r0, sl
 80084cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084ce:	f001 ff39 	bl	800a344 <_Bfree>
 80084d2:	4650      	mov	r0, sl
 80084d4:	9906      	ldr	r1, [sp, #24]
 80084d6:	f001 ff35 	bl	800a344 <_Bfree>
 80084da:	4650      	mov	r0, sl
 80084dc:	9904      	ldr	r1, [sp, #16]
 80084de:	f001 ff31 	bl	800a344 <_Bfree>
 80084e2:	4659      	mov	r1, fp
 80084e4:	4650      	mov	r0, sl
 80084e6:	f001 ff2d 	bl	800a344 <_Bfree>
 80084ea:	e627      	b.n	800813c <_strtod_l+0x64c>
 80084ec:	f1b8 0f00 	cmp.w	r8, #0
 80084f0:	d119      	bne.n	8008526 <_strtod_l+0xa36>
 80084f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f8:	b9e3      	cbnz	r3, 8008534 <_strtod_l+0xa44>
 80084fa:	2200      	movs	r2, #0
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	4b3c      	ldr	r3, [pc, #240]	; (80085f4 <_strtod_l+0xb04>)
 8008502:	f7f8 fb89 	bl	8000c18 <__aeabi_dcmplt>
 8008506:	b9c8      	cbnz	r0, 800853c <_strtod_l+0xa4c>
 8008508:	2200      	movs	r2, #0
 800850a:	4630      	mov	r0, r6
 800850c:	4639      	mov	r1, r7
 800850e:	4b3c      	ldr	r3, [pc, #240]	; (8008600 <_strtod_l+0xb10>)
 8008510:	f7f8 f910 	bl	8000734 <__aeabi_dmul>
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800851c:	9416      	str	r4, [sp, #88]	; 0x58
 800851e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008520:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008524:	e7a2      	b.n	800846c <_strtod_l+0x97c>
 8008526:	f1b8 0f01 	cmp.w	r8, #1
 800852a:	d103      	bne.n	8008534 <_strtod_l+0xa44>
 800852c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	f43f ad92 	beq.w	8008058 <_strtod_l+0x568>
 8008534:	2600      	movs	r6, #0
 8008536:	2400      	movs	r4, #0
 8008538:	4f32      	ldr	r7, [pc, #200]	; (8008604 <_strtod_l+0xb14>)
 800853a:	e796      	b.n	800846a <_strtod_l+0x97a>
 800853c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800853e:	4d30      	ldr	r5, [pc, #192]	; (8008600 <_strtod_l+0xb10>)
 8008540:	e7ea      	b.n	8008518 <_strtod_l+0xa28>
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <_strtod_l+0xb10>)
 8008544:	2200      	movs	r2, #0
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7f8 f8f3 	bl	8000734 <__aeabi_dmul>
 800854e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b933      	cbnz	r3, 8008564 <_strtod_l+0xa74>
 8008556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800855a:	9010      	str	r0, [sp, #64]	; 0x40
 800855c:	9311      	str	r3, [sp, #68]	; 0x44
 800855e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008562:	e783      	b.n	800846c <_strtod_l+0x97c>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800856c:	e7f7      	b.n	800855e <_strtod_l+0xa6e>
 800856e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1a8      	bne.n	80084ca <_strtod_l+0x9da>
 8008578:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800857c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800857e:	0d1b      	lsrs	r3, r3, #20
 8008580:	051b      	lsls	r3, r3, #20
 8008582:	429a      	cmp	r2, r3
 8008584:	d1a1      	bne.n	80084ca <_strtod_l+0x9da>
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 fdc5 	bl	8001118 <__aeabi_d2lz>
 800858e:	f7f8 f8a3 	bl	80006d8 <__aeabi_l2d>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f7 ff13 	bl	80003c4 <__aeabi_dsub>
 800859e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a4:	ea43 0308 	orr.w	r3, r3, r8
 80085a8:	4313      	orrs	r3, r2
 80085aa:	4604      	mov	r4, r0
 80085ac:	460d      	mov	r5, r1
 80085ae:	d066      	beq.n	800867e <_strtod_l+0xb8e>
 80085b0:	a309      	add	r3, pc, #36	; (adr r3, 80085d8 <_strtod_l+0xae8>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f8 fb2f 	bl	8000c18 <__aeabi_dcmplt>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f47f ace2 	bne.w	8007f84 <_strtod_l+0x494>
 80085c0:	a307      	add	r3, pc, #28	; (adr r3, 80085e0 <_strtod_l+0xaf0>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	4620      	mov	r0, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7f8 fb43 	bl	8000c54 <__aeabi_dcmpgt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f af7b 	beq.w	80084ca <_strtod_l+0x9da>
 80085d4:	e4d6      	b.n	8007f84 <_strtod_l+0x494>
 80085d6:	bf00      	nop
 80085d8:	94a03595 	.word	0x94a03595
 80085dc:	3fdfffff 	.word	0x3fdfffff
 80085e0:	35afe535 	.word	0x35afe535
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	000fffff 	.word	0x000fffff
 80085ec:	7ff00000 	.word	0x7ff00000
 80085f0:	7fefffff 	.word	0x7fefffff
 80085f4:	3ff00000 	.word	0x3ff00000
 80085f8:	7fe00000 	.word	0x7fe00000
 80085fc:	7c9fffff 	.word	0x7c9fffff
 8008600:	3fe00000 	.word	0x3fe00000
 8008604:	bff00000 	.word	0xbff00000
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	b313      	cbz	r3, 8008652 <_strtod_l+0xb62>
 800860c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800860e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008612:	d81e      	bhi.n	8008652 <_strtod_l+0xb62>
 8008614:	a326      	add	r3, pc, #152	; (adr r3, 80086b0 <_strtod_l+0xbc0>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f7f8 fb05 	bl	8000c2c <__aeabi_dcmple>
 8008622:	b190      	cbz	r0, 800864a <_strtod_l+0xb5a>
 8008624:	4629      	mov	r1, r5
 8008626:	4620      	mov	r0, r4
 8008628:	f7f8 fb5c 	bl	8000ce4 <__aeabi_d2uiz>
 800862c:	2801      	cmp	r0, #1
 800862e:	bf38      	it	cc
 8008630:	2001      	movcc	r0, #1
 8008632:	f7f8 f805 	bl	8000640 <__aeabi_ui2d>
 8008636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008638:	4604      	mov	r4, r0
 800863a:	460d      	mov	r5, r1
 800863c:	b9d3      	cbnz	r3, 8008674 <_strtod_l+0xb84>
 800863e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008642:	9012      	str	r0, [sp, #72]	; 0x48
 8008644:	9313      	str	r3, [sp, #76]	; 0x4c
 8008646:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800864a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800864c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008650:	1a9f      	subs	r7, r3, r2
 8008652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008656:	f002 f9a5 	bl	800a9a4 <__ulp>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4630      	mov	r0, r6
 8008660:	4639      	mov	r1, r7
 8008662:	f7f8 f867 	bl	8000734 <__aeabi_dmul>
 8008666:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800866a:	f7f7 fead 	bl	80003c8 <__adddf3>
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	e77e      	b.n	8008572 <_strtod_l+0xa82>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800867c:	e7e3      	b.n	8008646 <_strtod_l+0xb56>
 800867e:	a30e      	add	r3, pc, #56	; (adr r3, 80086b8 <_strtod_l+0xbc8>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f8 fac8 	bl	8000c18 <__aeabi_dcmplt>
 8008688:	e7a1      	b.n	80085ce <_strtod_l+0xade>
 800868a:	2300      	movs	r3, #0
 800868c:	930a      	str	r3, [sp, #40]	; 0x28
 800868e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008690:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	f7ff ba71 	b.w	8007b7a <_strtod_l+0x8a>
 8008698:	2a65      	cmp	r2, #101	; 0x65
 800869a:	f43f ab63 	beq.w	8007d64 <_strtod_l+0x274>
 800869e:	2a45      	cmp	r2, #69	; 0x45
 80086a0:	f43f ab60 	beq.w	8007d64 <_strtod_l+0x274>
 80086a4:	2301      	movs	r3, #1
 80086a6:	f7ff bb95 	b.w	8007dd4 <_strtod_l+0x2e4>
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w
 80086b0:	ffc00000 	.word	0xffc00000
 80086b4:	41dfffff 	.word	0x41dfffff
 80086b8:	94a03595 	.word	0x94a03595
 80086bc:	3fcfffff 	.word	0x3fcfffff

080086c0 <_strtod_r>:
 80086c0:	4b01      	ldr	r3, [pc, #4]	; (80086c8 <_strtod_r+0x8>)
 80086c2:	f7ff ba15 	b.w	8007af0 <_strtod_l>
 80086c6:	bf00      	nop
 80086c8:	2000056c 	.word	0x2000056c

080086cc <strtok>:
 80086cc:	4b16      	ldr	r3, [pc, #88]	; (8008728 <strtok+0x5c>)
 80086ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	681f      	ldr	r7, [r3, #0]
 80086d4:	4605      	mov	r5, r0
 80086d6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80086d8:	460e      	mov	r6, r1
 80086da:	b9ec      	cbnz	r4, 8008718 <strtok+0x4c>
 80086dc:	2050      	movs	r0, #80	; 0x50
 80086de:	f001 fdc9 	bl	800a274 <malloc>
 80086e2:	4602      	mov	r2, r0
 80086e4:	65b8      	str	r0, [r7, #88]	; 0x58
 80086e6:	b920      	cbnz	r0, 80086f2 <strtok+0x26>
 80086e8:	2157      	movs	r1, #87	; 0x57
 80086ea:	4b10      	ldr	r3, [pc, #64]	; (800872c <strtok+0x60>)
 80086ec:	4810      	ldr	r0, [pc, #64]	; (8008730 <strtok+0x64>)
 80086ee:	f000 f991 	bl	8008a14 <__assert_func>
 80086f2:	e9c0 4400 	strd	r4, r4, [r0]
 80086f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008702:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008706:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800870a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800870e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008712:	6184      	str	r4, [r0, #24]
 8008714:	7704      	strb	r4, [r0, #28]
 8008716:	6244      	str	r4, [r0, #36]	; 0x24
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800871e:	2301      	movs	r3, #1
 8008720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	f000 b806 	b.w	8008734 <__strtok_r>
 8008728:	20000504 	.word	0x20000504
 800872c:	0800b7d8 	.word	0x0800b7d8
 8008730:	0800b7ef 	.word	0x0800b7ef

08008734 <__strtok_r>:
 8008734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008736:	b908      	cbnz	r0, 800873c <__strtok_r+0x8>
 8008738:	6810      	ldr	r0, [r2, #0]
 800873a:	b188      	cbz	r0, 8008760 <__strtok_r+0x2c>
 800873c:	4604      	mov	r4, r0
 800873e:	460f      	mov	r7, r1
 8008740:	4620      	mov	r0, r4
 8008742:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008746:	f817 6b01 	ldrb.w	r6, [r7], #1
 800874a:	b91e      	cbnz	r6, 8008754 <__strtok_r+0x20>
 800874c:	b965      	cbnz	r5, 8008768 <__strtok_r+0x34>
 800874e:	4628      	mov	r0, r5
 8008750:	6015      	str	r5, [r2, #0]
 8008752:	e005      	b.n	8008760 <__strtok_r+0x2c>
 8008754:	42b5      	cmp	r5, r6
 8008756:	d1f6      	bne.n	8008746 <__strtok_r+0x12>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f0      	bne.n	800873e <__strtok_r+0xa>
 800875c:	6014      	str	r4, [r2, #0]
 800875e:	7003      	strb	r3, [r0, #0]
 8008760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008762:	461c      	mov	r4, r3
 8008764:	e00c      	b.n	8008780 <__strtok_r+0x4c>
 8008766:	b915      	cbnz	r5, 800876e <__strtok_r+0x3a>
 8008768:	460e      	mov	r6, r1
 800876a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800876e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008772:	42ab      	cmp	r3, r5
 8008774:	d1f7      	bne.n	8008766 <__strtok_r+0x32>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0f3      	beq.n	8008762 <__strtok_r+0x2e>
 800877a:	2300      	movs	r3, #0
 800877c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008780:	6014      	str	r4, [r2, #0]
 8008782:	e7ed      	b.n	8008760 <__strtok_r+0x2c>

08008784 <_strtol_l.constprop.0>:
 8008784:	2b01      	cmp	r3, #1
 8008786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878a:	4680      	mov	r8, r0
 800878c:	d001      	beq.n	8008792 <_strtol_l.constprop.0+0xe>
 800878e:	2b24      	cmp	r3, #36	; 0x24
 8008790:	d906      	bls.n	80087a0 <_strtol_l.constprop.0+0x1c>
 8008792:	f7fe fab7 	bl	8006d04 <__errno>
 8008796:	2316      	movs	r3, #22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	2000      	movs	r0, #0
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	460d      	mov	r5, r1
 80087a2:	4f35      	ldr	r7, [pc, #212]	; (8008878 <_strtol_l.constprop.0+0xf4>)
 80087a4:	4628      	mov	r0, r5
 80087a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087aa:	5de6      	ldrb	r6, [r4, r7]
 80087ac:	f016 0608 	ands.w	r6, r6, #8
 80087b0:	d1f8      	bne.n	80087a4 <_strtol_l.constprop.0+0x20>
 80087b2:	2c2d      	cmp	r4, #45	; 0x2d
 80087b4:	d12f      	bne.n	8008816 <_strtol_l.constprop.0+0x92>
 80087b6:	2601      	movs	r6, #1
 80087b8:	782c      	ldrb	r4, [r5, #0]
 80087ba:	1c85      	adds	r5, r0, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d057      	beq.n	8008870 <_strtol_l.constprop.0+0xec>
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d109      	bne.n	80087d8 <_strtol_l.constprop.0+0x54>
 80087c4:	2c30      	cmp	r4, #48	; 0x30
 80087c6:	d107      	bne.n	80087d8 <_strtol_l.constprop.0+0x54>
 80087c8:	7828      	ldrb	r0, [r5, #0]
 80087ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80087ce:	2858      	cmp	r0, #88	; 0x58
 80087d0:	d149      	bne.n	8008866 <_strtol_l.constprop.0+0xe2>
 80087d2:	2310      	movs	r3, #16
 80087d4:	786c      	ldrb	r4, [r5, #1]
 80087d6:	3502      	adds	r5, #2
 80087d8:	2700      	movs	r7, #0
 80087da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80087de:	f10e 3eff 	add.w	lr, lr, #4294967295
 80087e2:	fbbe f9f3 	udiv	r9, lr, r3
 80087e6:	4638      	mov	r0, r7
 80087e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80087ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80087f0:	f1bc 0f09 	cmp.w	ip, #9
 80087f4:	d814      	bhi.n	8008820 <_strtol_l.constprop.0+0x9c>
 80087f6:	4664      	mov	r4, ip
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	dd22      	ble.n	8008842 <_strtol_l.constprop.0+0xbe>
 80087fc:	2f00      	cmp	r7, #0
 80087fe:	db1d      	blt.n	800883c <_strtol_l.constprop.0+0xb8>
 8008800:	4581      	cmp	r9, r0
 8008802:	d31b      	bcc.n	800883c <_strtol_l.constprop.0+0xb8>
 8008804:	d101      	bne.n	800880a <_strtol_l.constprop.0+0x86>
 8008806:	45a2      	cmp	sl, r4
 8008808:	db18      	blt.n	800883c <_strtol_l.constprop.0+0xb8>
 800880a:	2701      	movs	r7, #1
 800880c:	fb00 4003 	mla	r0, r0, r3, r4
 8008810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008814:	e7ea      	b.n	80087ec <_strtol_l.constprop.0+0x68>
 8008816:	2c2b      	cmp	r4, #43	; 0x2b
 8008818:	bf04      	itt	eq
 800881a:	782c      	ldrbeq	r4, [r5, #0]
 800881c:	1c85      	addeq	r5, r0, #2
 800881e:	e7cd      	b.n	80087bc <_strtol_l.constprop.0+0x38>
 8008820:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008824:	f1bc 0f19 	cmp.w	ip, #25
 8008828:	d801      	bhi.n	800882e <_strtol_l.constprop.0+0xaa>
 800882a:	3c37      	subs	r4, #55	; 0x37
 800882c:	e7e4      	b.n	80087f8 <_strtol_l.constprop.0+0x74>
 800882e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008832:	f1bc 0f19 	cmp.w	ip, #25
 8008836:	d804      	bhi.n	8008842 <_strtol_l.constprop.0+0xbe>
 8008838:	3c57      	subs	r4, #87	; 0x57
 800883a:	e7dd      	b.n	80087f8 <_strtol_l.constprop.0+0x74>
 800883c:	f04f 37ff 	mov.w	r7, #4294967295
 8008840:	e7e6      	b.n	8008810 <_strtol_l.constprop.0+0x8c>
 8008842:	2f00      	cmp	r7, #0
 8008844:	da07      	bge.n	8008856 <_strtol_l.constprop.0+0xd2>
 8008846:	2322      	movs	r3, #34	; 0x22
 8008848:	4670      	mov	r0, lr
 800884a:	f8c8 3000 	str.w	r3, [r8]
 800884e:	2a00      	cmp	r2, #0
 8008850:	d0a4      	beq.n	800879c <_strtol_l.constprop.0+0x18>
 8008852:	1e69      	subs	r1, r5, #1
 8008854:	e005      	b.n	8008862 <_strtol_l.constprop.0+0xde>
 8008856:	b106      	cbz	r6, 800885a <_strtol_l.constprop.0+0xd6>
 8008858:	4240      	negs	r0, r0
 800885a:	2a00      	cmp	r2, #0
 800885c:	d09e      	beq.n	800879c <_strtol_l.constprop.0+0x18>
 800885e:	2f00      	cmp	r7, #0
 8008860:	d1f7      	bne.n	8008852 <_strtol_l.constprop.0+0xce>
 8008862:	6011      	str	r1, [r2, #0]
 8008864:	e79a      	b.n	800879c <_strtol_l.constprop.0+0x18>
 8008866:	2430      	movs	r4, #48	; 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1b5      	bne.n	80087d8 <_strtol_l.constprop.0+0x54>
 800886c:	2308      	movs	r3, #8
 800886e:	e7b3      	b.n	80087d8 <_strtol_l.constprop.0+0x54>
 8008870:	2c30      	cmp	r4, #48	; 0x30
 8008872:	d0a9      	beq.n	80087c8 <_strtol_l.constprop.0+0x44>
 8008874:	230a      	movs	r3, #10
 8008876:	e7af      	b.n	80087d8 <_strtol_l.constprop.0+0x54>
 8008878:	0800b889 	.word	0x0800b889

0800887c <_strtol_r>:
 800887c:	f7ff bf82 	b.w	8008784 <_strtol_l.constprop.0>

08008880 <strtol>:
 8008880:	4613      	mov	r3, r2
 8008882:	460a      	mov	r2, r1
 8008884:	4601      	mov	r1, r0
 8008886:	4802      	ldr	r0, [pc, #8]	; (8008890 <strtol+0x10>)
 8008888:	6800      	ldr	r0, [r0, #0]
 800888a:	f7ff bf7b 	b.w	8008784 <_strtol_l.constprop.0>
 800888e:	bf00      	nop
 8008890:	20000504 	.word	0x20000504

08008894 <__swbuf_r>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	460e      	mov	r6, r1
 8008898:	4614      	mov	r4, r2
 800889a:	4605      	mov	r5, r0
 800889c:	b118      	cbz	r0, 80088a6 <__swbuf_r+0x12>
 800889e:	6983      	ldr	r3, [r0, #24]
 80088a0:	b90b      	cbnz	r3, 80088a6 <__swbuf_r+0x12>
 80088a2:	f001 f865 	bl	8009970 <__sinit>
 80088a6:	4b21      	ldr	r3, [pc, #132]	; (800892c <__swbuf_r+0x98>)
 80088a8:	429c      	cmp	r4, r3
 80088aa:	d12b      	bne.n	8008904 <__swbuf_r+0x70>
 80088ac:	686c      	ldr	r4, [r5, #4]
 80088ae:	69a3      	ldr	r3, [r4, #24]
 80088b0:	60a3      	str	r3, [r4, #8]
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	071a      	lsls	r2, r3, #28
 80088b6:	d52f      	bpl.n	8008918 <__swbuf_r+0x84>
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	b36b      	cbz	r3, 8008918 <__swbuf_r+0x84>
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	b2f6      	uxtb	r6, r6
 80088c2:	1ac0      	subs	r0, r0, r3
 80088c4:	6963      	ldr	r3, [r4, #20]
 80088c6:	4637      	mov	r7, r6
 80088c8:	4283      	cmp	r3, r0
 80088ca:	dc04      	bgt.n	80088d6 <__swbuf_r+0x42>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 ffba 	bl	8009848 <_fflush_r>
 80088d4:	bb30      	cbnz	r0, 8008924 <__swbuf_r+0x90>
 80088d6:	68a3      	ldr	r3, [r4, #8]
 80088d8:	3001      	adds	r0, #1
 80088da:	3b01      	subs	r3, #1
 80088dc:	60a3      	str	r3, [r4, #8]
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	6022      	str	r2, [r4, #0]
 80088e4:	701e      	strb	r6, [r3, #0]
 80088e6:	6963      	ldr	r3, [r4, #20]
 80088e8:	4283      	cmp	r3, r0
 80088ea:	d004      	beq.n	80088f6 <__swbuf_r+0x62>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	07db      	lsls	r3, r3, #31
 80088f0:	d506      	bpl.n	8008900 <__swbuf_r+0x6c>
 80088f2:	2e0a      	cmp	r6, #10
 80088f4:	d104      	bne.n	8008900 <__swbuf_r+0x6c>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4628      	mov	r0, r5
 80088fa:	f000 ffa5 	bl	8009848 <_fflush_r>
 80088fe:	b988      	cbnz	r0, 8008924 <__swbuf_r+0x90>
 8008900:	4638      	mov	r0, r7
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <__swbuf_r+0x9c>)
 8008906:	429c      	cmp	r4, r3
 8008908:	d101      	bne.n	800890e <__swbuf_r+0x7a>
 800890a:	68ac      	ldr	r4, [r5, #8]
 800890c:	e7cf      	b.n	80088ae <__swbuf_r+0x1a>
 800890e:	4b09      	ldr	r3, [pc, #36]	; (8008934 <__swbuf_r+0xa0>)
 8008910:	429c      	cmp	r4, r3
 8008912:	bf08      	it	eq
 8008914:	68ec      	ldreq	r4, [r5, #12]
 8008916:	e7ca      	b.n	80088ae <__swbuf_r+0x1a>
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 f80c 	bl	8008938 <__swsetup_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	d0cb      	beq.n	80088bc <__swbuf_r+0x28>
 8008924:	f04f 37ff 	mov.w	r7, #4294967295
 8008928:	e7ea      	b.n	8008900 <__swbuf_r+0x6c>
 800892a:	bf00      	nop
 800892c:	0800ba24 	.word	0x0800ba24
 8008930:	0800ba44 	.word	0x0800ba44
 8008934:	0800ba04 	.word	0x0800ba04

08008938 <__swsetup_r>:
 8008938:	4b32      	ldr	r3, [pc, #200]	; (8008a04 <__swsetup_r+0xcc>)
 800893a:	b570      	push	{r4, r5, r6, lr}
 800893c:	681d      	ldr	r5, [r3, #0]
 800893e:	4606      	mov	r6, r0
 8008940:	460c      	mov	r4, r1
 8008942:	b125      	cbz	r5, 800894e <__swsetup_r+0x16>
 8008944:	69ab      	ldr	r3, [r5, #24]
 8008946:	b913      	cbnz	r3, 800894e <__swsetup_r+0x16>
 8008948:	4628      	mov	r0, r5
 800894a:	f001 f811 	bl	8009970 <__sinit>
 800894e:	4b2e      	ldr	r3, [pc, #184]	; (8008a08 <__swsetup_r+0xd0>)
 8008950:	429c      	cmp	r4, r3
 8008952:	d10f      	bne.n	8008974 <__swsetup_r+0x3c>
 8008954:	686c      	ldr	r4, [r5, #4]
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800895c:	0719      	lsls	r1, r3, #28
 800895e:	d42c      	bmi.n	80089ba <__swsetup_r+0x82>
 8008960:	06dd      	lsls	r5, r3, #27
 8008962:	d411      	bmi.n	8008988 <__swsetup_r+0x50>
 8008964:	2309      	movs	r3, #9
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800896c:	f04f 30ff 	mov.w	r0, #4294967295
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	e03e      	b.n	80089f2 <__swsetup_r+0xba>
 8008974:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <__swsetup_r+0xd4>)
 8008976:	429c      	cmp	r4, r3
 8008978:	d101      	bne.n	800897e <__swsetup_r+0x46>
 800897a:	68ac      	ldr	r4, [r5, #8]
 800897c:	e7eb      	b.n	8008956 <__swsetup_r+0x1e>
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <__swsetup_r+0xd8>)
 8008980:	429c      	cmp	r4, r3
 8008982:	bf08      	it	eq
 8008984:	68ec      	ldreq	r4, [r5, #12]
 8008986:	e7e6      	b.n	8008956 <__swsetup_r+0x1e>
 8008988:	0758      	lsls	r0, r3, #29
 800898a:	d512      	bpl.n	80089b2 <__swsetup_r+0x7a>
 800898c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898e:	b141      	cbz	r1, 80089a2 <__swsetup_r+0x6a>
 8008990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008994:	4299      	cmp	r1, r3
 8008996:	d002      	beq.n	800899e <__swsetup_r+0x66>
 8008998:	4630      	mov	r0, r6
 800899a:	f002 f95f 	bl	800ac5c <_free_r>
 800899e:	2300      	movs	r3, #0
 80089a0:	6363      	str	r3, [r4, #52]	; 0x34
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f043 0308 	orr.w	r3, r3, #8
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	b94b      	cbnz	r3, 80089d2 <__swsetup_r+0x9a>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c8:	d003      	beq.n	80089d2 <__swsetup_r+0x9a>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4630      	mov	r0, r6
 80089ce:	f001 fc11 	bl	800a1f4 <__smakebuf_r>
 80089d2:	89a0      	ldrh	r0, [r4, #12]
 80089d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089d8:	f010 0301 	ands.w	r3, r0, #1
 80089dc:	d00a      	beq.n	80089f4 <__swsetup_r+0xbc>
 80089de:	2300      	movs	r3, #0
 80089e0:	60a3      	str	r3, [r4, #8]
 80089e2:	6963      	ldr	r3, [r4, #20]
 80089e4:	425b      	negs	r3, r3
 80089e6:	61a3      	str	r3, [r4, #24]
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	b943      	cbnz	r3, 80089fe <__swsetup_r+0xc6>
 80089ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089f0:	d1ba      	bne.n	8008968 <__swsetup_r+0x30>
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	0781      	lsls	r1, r0, #30
 80089f6:	bf58      	it	pl
 80089f8:	6963      	ldrpl	r3, [r4, #20]
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	e7f4      	b.n	80089e8 <__swsetup_r+0xb0>
 80089fe:	2000      	movs	r0, #0
 8008a00:	e7f7      	b.n	80089f2 <__swsetup_r+0xba>
 8008a02:	bf00      	nop
 8008a04:	20000504 	.word	0x20000504
 8008a08:	0800ba24 	.word	0x0800ba24
 8008a0c:	0800ba44 	.word	0x0800ba44
 8008a10:	0800ba04 	.word	0x0800ba04

08008a14 <__assert_func>:
 8008a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a16:	4614      	mov	r4, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <__assert_func+0x2c>)
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68d8      	ldr	r0, [r3, #12]
 8008a22:	b14c      	cbz	r4, 8008a38 <__assert_func+0x24>
 8008a24:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <__assert_func+0x30>)
 8008a26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a2a:	9100      	str	r1, [sp, #0]
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	4906      	ldr	r1, [pc, #24]	; (8008a48 <__assert_func+0x34>)
 8008a30:	f001 f81c 	bl	8009a6c <fiprintf>
 8008a34:	f002 fd2e 	bl	800b494 <abort>
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <__assert_func+0x38>)
 8008a3a:	461c      	mov	r4, r3
 8008a3c:	e7f3      	b.n	8008a26 <__assert_func+0x12>
 8008a3e:	bf00      	nop
 8008a40:	20000504 	.word	0x20000504
 8008a44:	0800b84c 	.word	0x0800b84c
 8008a48:	0800b859 	.word	0x0800b859
 8008a4c:	0800b887 	.word	0x0800b887

08008a50 <quorem>:
 8008a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	6903      	ldr	r3, [r0, #16]
 8008a56:	690c      	ldr	r4, [r1, #16]
 8008a58:	4607      	mov	r7, r0
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	f2c0 8082 	blt.w	8008b64 <quorem+0x114>
 8008a60:	3c01      	subs	r4, #1
 8008a62:	f100 0514 	add.w	r5, r0, #20
 8008a66:	f101 0814 	add.w	r8, r1, #20
 8008a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a88:	d331      	bcc.n	8008aee <quorem+0x9e>
 8008a8a:	f04f 0e00 	mov.w	lr, #0
 8008a8e:	4640      	mov	r0, r8
 8008a90:	46ac      	mov	ip, r5
 8008a92:	46f2      	mov	sl, lr
 8008a94:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a98:	b293      	uxth	r3, r2
 8008a9a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a9e:	0c12      	lsrs	r2, r2, #16
 8008aa0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	fb06 e202 	mla	r2, r6, r2, lr
 8008aaa:	ebaa 0303 	sub.w	r3, sl, r3
 8008aae:	f8dc a000 	ldr.w	sl, [ip]
 8008ab2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ab6:	fa1f fa8a 	uxth.w	sl, sl
 8008aba:	4453      	add	r3, sl
 8008abc:	f8dc a000 	ldr.w	sl, [ip]
 8008ac0:	b292      	uxth	r2, r2
 8008ac2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ac6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad0:	4581      	cmp	r9, r0
 8008ad2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ad6:	f84c 3b04 	str.w	r3, [ip], #4
 8008ada:	d2db      	bcs.n	8008a94 <quorem+0x44>
 8008adc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ae0:	b92b      	cbnz	r3, 8008aee <quorem+0x9e>
 8008ae2:	9b01      	ldr	r3, [sp, #4]
 8008ae4:	3b04      	subs	r3, #4
 8008ae6:	429d      	cmp	r5, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	d32f      	bcc.n	8008b4c <quorem+0xfc>
 8008aec:	613c      	str	r4, [r7, #16]
 8008aee:	4638      	mov	r0, r7
 8008af0:	f001 feb0 	bl	800a854 <__mcmp>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	db25      	blt.n	8008b44 <quorem+0xf4>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f04f 0c00 	mov.w	ip, #0
 8008afe:	3601      	adds	r6, #1
 8008b00:	f858 1b04 	ldr.w	r1, [r8], #4
 8008b04:	f8d0 e000 	ldr.w	lr, [r0]
 8008b08:	b28b      	uxth	r3, r1
 8008b0a:	ebac 0303 	sub.w	r3, ip, r3
 8008b0e:	fa1f f28e 	uxth.w	r2, lr
 8008b12:	4413      	add	r3, r2
 8008b14:	0c0a      	lsrs	r2, r1, #16
 8008b16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b24:	45c1      	cmp	r9, r8
 8008b26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b2a:	f840 3b04 	str.w	r3, [r0], #4
 8008b2e:	d2e7      	bcs.n	8008b00 <quorem+0xb0>
 8008b30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b38:	b922      	cbnz	r2, 8008b44 <quorem+0xf4>
 8008b3a:	3b04      	subs	r3, #4
 8008b3c:	429d      	cmp	r5, r3
 8008b3e:	461a      	mov	r2, r3
 8008b40:	d30a      	bcc.n	8008b58 <quorem+0x108>
 8008b42:	613c      	str	r4, [r7, #16]
 8008b44:	4630      	mov	r0, r6
 8008b46:	b003      	add	sp, #12
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	3b04      	subs	r3, #4
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	d1cb      	bne.n	8008aec <quorem+0x9c>
 8008b54:	3c01      	subs	r4, #1
 8008b56:	e7c6      	b.n	8008ae6 <quorem+0x96>
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	3b04      	subs	r3, #4
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	d1f0      	bne.n	8008b42 <quorem+0xf2>
 8008b60:	3c01      	subs	r4, #1
 8008b62:	e7eb      	b.n	8008b3c <quorem+0xec>
 8008b64:	2000      	movs	r0, #0
 8008b66:	e7ee      	b.n	8008b46 <quorem+0xf6>

08008b68 <_dtoa_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	461f      	mov	r7, r3
 8008b70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b72:	b099      	sub	sp, #100	; 0x64
 8008b74:	4605      	mov	r5, r0
 8008b76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008b7e:	b974      	cbnz	r4, 8008b9e <_dtoa_r+0x36>
 8008b80:	2010      	movs	r0, #16
 8008b82:	f001 fb77 	bl	800a274 <malloc>
 8008b86:	4602      	mov	r2, r0
 8008b88:	6268      	str	r0, [r5, #36]	; 0x24
 8008b8a:	b920      	cbnz	r0, 8008b96 <_dtoa_r+0x2e>
 8008b8c:	21ea      	movs	r1, #234	; 0xea
 8008b8e:	4ba8      	ldr	r3, [pc, #672]	; (8008e30 <_dtoa_r+0x2c8>)
 8008b90:	48a8      	ldr	r0, [pc, #672]	; (8008e34 <_dtoa_r+0x2cc>)
 8008b92:	f7ff ff3f 	bl	8008a14 <__assert_func>
 8008b96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b9a:	6004      	str	r4, [r0, #0]
 8008b9c:	60c4      	str	r4, [r0, #12]
 8008b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	b151      	cbz	r1, 8008bba <_dtoa_r+0x52>
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4093      	lsls	r3, r2
 8008baa:	604a      	str	r2, [r1, #4]
 8008bac:	608b      	str	r3, [r1, #8]
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f001 fbc8 	bl	800a344 <_Bfree>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	1e3b      	subs	r3, r7, #0
 8008bbc:	bfaf      	iteee	ge
 8008bbe:	2300      	movge	r3, #0
 8008bc0:	2201      	movlt	r2, #1
 8008bc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bc6:	9305      	strlt	r3, [sp, #20]
 8008bc8:	bfa8      	it	ge
 8008bca:	f8c8 3000 	strge.w	r3, [r8]
 8008bce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008bd2:	4b99      	ldr	r3, [pc, #612]	; (8008e38 <_dtoa_r+0x2d0>)
 8008bd4:	bfb8      	it	lt
 8008bd6:	f8c8 2000 	strlt.w	r2, [r8]
 8008bda:	ea33 0309 	bics.w	r3, r3, r9
 8008bde:	d119      	bne.n	8008c14 <_dtoa_r+0xac>
 8008be0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008be4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bec:	4333      	orrs	r3, r6
 8008bee:	f000 857f 	beq.w	80096f0 <_dtoa_r+0xb88>
 8008bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bf4:	b953      	cbnz	r3, 8008c0c <_dtoa_r+0xa4>
 8008bf6:	4b91      	ldr	r3, [pc, #580]	; (8008e3c <_dtoa_r+0x2d4>)
 8008bf8:	e022      	b.n	8008c40 <_dtoa_r+0xd8>
 8008bfa:	4b91      	ldr	r3, [pc, #580]	; (8008e40 <_dtoa_r+0x2d8>)
 8008bfc:	9303      	str	r3, [sp, #12]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	9803      	ldr	r0, [sp, #12]
 8008c06:	b019      	add	sp, #100	; 0x64
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	4b8b      	ldr	r3, [pc, #556]	; (8008e3c <_dtoa_r+0x2d4>)
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	3303      	adds	r3, #3
 8008c12:	e7f5      	b.n	8008c00 <_dtoa_r+0x98>
 8008c14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c20:	2200      	movs	r2, #0
 8008c22:	2300      	movs	r3, #0
 8008c24:	f7f7 ffee 	bl	8000c04 <__aeabi_dcmpeq>
 8008c28:	4680      	mov	r8, r0
 8008c2a:	b158      	cbz	r0, 8008c44 <_dtoa_r+0xdc>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8558 	beq.w	80096ea <_dtoa_r+0xb82>
 8008c3a:	4882      	ldr	r0, [pc, #520]	; (8008e44 <_dtoa_r+0x2dc>)
 8008c3c:	6018      	str	r0, [r3, #0]
 8008c3e:	1e43      	subs	r3, r0, #1
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	e7df      	b.n	8008c04 <_dtoa_r+0x9c>
 8008c44:	ab16      	add	r3, sp, #88	; 0x58
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	ab17      	add	r3, sp, #92	; 0x5c
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c52:	f001 ff21 	bl	800aa98 <__d2b>
 8008c56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c5a:	4683      	mov	fp, r0
 8008c5c:	2c00      	cmp	r4, #0
 8008c5e:	d07f      	beq.n	8008d60 <_dtoa_r+0x1f8>
 8008c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008c72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008c76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4b72      	ldr	r3, [pc, #456]	; (8008e48 <_dtoa_r+0x2e0>)
 8008c7e:	f7f7 fba1 	bl	80003c4 <__aeabi_dsub>
 8008c82:	a365      	add	r3, pc, #404	; (adr r3, 8008e18 <_dtoa_r+0x2b0>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fd54 	bl	8000734 <__aeabi_dmul>
 8008c8c:	a364      	add	r3, pc, #400	; (adr r3, 8008e20 <_dtoa_r+0x2b8>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fb99 	bl	80003c8 <__adddf3>
 8008c96:	4606      	mov	r6, r0
 8008c98:	4620      	mov	r0, r4
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	f7f7 fce0 	bl	8000660 <__aeabi_i2d>
 8008ca0:	a361      	add	r3, pc, #388	; (adr r3, 8008e28 <_dtoa_r+0x2c0>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fd45 	bl	8000734 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fb89 	bl	80003c8 <__adddf3>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460f      	mov	r7, r1
 8008cba:	f7f7 ffeb 	bl	8000c94 <__aeabi_d2iz>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 ffa6 	bl	8000c18 <__aeabi_dcmplt>
 8008ccc:	b148      	cbz	r0, 8008ce2 <_dtoa_r+0x17a>
 8008cce:	4650      	mov	r0, sl
 8008cd0:	f7f7 fcc6 	bl	8000660 <__aeabi_i2d>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	f7f7 ff94 	bl	8000c04 <__aeabi_dcmpeq>
 8008cdc:	b908      	cbnz	r0, 8008ce2 <_dtoa_r+0x17a>
 8008cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ce2:	f1ba 0f16 	cmp.w	sl, #22
 8008ce6:	d858      	bhi.n	8008d9a <_dtoa_r+0x232>
 8008ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cec:	4b57      	ldr	r3, [pc, #348]	; (8008e4c <_dtoa_r+0x2e4>)
 8008cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f7f7 ff8f 	bl	8000c18 <__aeabi_dcmplt>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d04f      	beq.n	8008d9e <_dtoa_r+0x236>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d08:	1b1c      	subs	r4, r3, r4
 8008d0a:	1e63      	subs	r3, r4, #1
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	bf49      	itett	mi
 8008d10:	f1c4 0301 	rsbmi	r3, r4, #1
 8008d14:	2300      	movpl	r3, #0
 8008d16:	9306      	strmi	r3, [sp, #24]
 8008d18:	2300      	movmi	r3, #0
 8008d1a:	bf54      	ite	pl
 8008d1c:	9306      	strpl	r3, [sp, #24]
 8008d1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008d20:	f1ba 0f00 	cmp.w	sl, #0
 8008d24:	db3d      	blt.n	8008da2 <_dtoa_r+0x23a>
 8008d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008d2c:	4453      	add	r3, sl
 8008d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d30:	2300      	movs	r3, #0
 8008d32:	930a      	str	r3, [sp, #40]	; 0x28
 8008d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d36:	2b09      	cmp	r3, #9
 8008d38:	f200 808c 	bhi.w	8008e54 <_dtoa_r+0x2ec>
 8008d3c:	2b05      	cmp	r3, #5
 8008d3e:	bfc4      	itt	gt
 8008d40:	3b04      	subgt	r3, #4
 8008d42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d46:	bfc8      	it	gt
 8008d48:	2400      	movgt	r4, #0
 8008d4a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d4e:	bfd8      	it	le
 8008d50:	2401      	movle	r4, #1
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	f200 808a 	bhi.w	8008e6c <_dtoa_r+0x304>
 8008d58:	e8df f003 	tbb	[pc, r3]
 8008d5c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008d60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008d64:	441c      	add	r4, r3
 8008d66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	bfc3      	ittte	gt
 8008d6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008d76:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d7a:	f1c3 0320 	rsble	r3, r3, #32
 8008d7e:	bfc6      	itte	gt
 8008d80:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d84:	4318      	orrgt	r0, r3
 8008d86:	fa06 f003 	lslle.w	r0, r6, r3
 8008d8a:	f7f7 fc59 	bl	8000640 <__aeabi_ui2d>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008d94:	3c01      	subs	r4, #1
 8008d96:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d98:	e76f      	b.n	8008c7a <_dtoa_r+0x112>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e7b2      	b.n	8008d04 <_dtoa_r+0x19c>
 8008d9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008da0:	e7b1      	b.n	8008d06 <_dtoa_r+0x19e>
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	eba3 030a 	sub.w	r3, r3, sl
 8008da8:	9306      	str	r3, [sp, #24]
 8008daa:	f1ca 0300 	rsb	r3, sl, #0
 8008dae:	930a      	str	r3, [sp, #40]	; 0x28
 8008db0:	2300      	movs	r3, #0
 8008db2:	930e      	str	r3, [sp, #56]	; 0x38
 8008db4:	e7be      	b.n	8008d34 <_dtoa_r+0x1cc>
 8008db6:	2300      	movs	r3, #0
 8008db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dc58      	bgt.n	8008e72 <_dtoa_r+0x30a>
 8008dc0:	f04f 0901 	mov.w	r9, #1
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8008dca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008dd2:	6042      	str	r2, [r0, #4]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	f102 0614 	add.w	r6, r2, #20
 8008dda:	429e      	cmp	r6, r3
 8008ddc:	6841      	ldr	r1, [r0, #4]
 8008dde:	d94e      	bls.n	8008e7e <_dtoa_r+0x316>
 8008de0:	4628      	mov	r0, r5
 8008de2:	f001 fa6f 	bl	800a2c4 <_Balloc>
 8008de6:	9003      	str	r0, [sp, #12]
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d14c      	bne.n	8008e86 <_dtoa_r+0x31e>
 8008dec:	4602      	mov	r2, r0
 8008dee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008df2:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <_dtoa_r+0x2e8>)
 8008df4:	e6cc      	b.n	8008b90 <_dtoa_r+0x28>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e7de      	b.n	8008db8 <_dtoa_r+0x250>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e00:	eb0a 0903 	add.w	r9, sl, r3
 8008e04:	f109 0301 	add.w	r3, r9, #1
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	9308      	str	r3, [sp, #32]
 8008e0c:	bfb8      	it	lt
 8008e0e:	2301      	movlt	r3, #1
 8008e10:	e7dd      	b.n	8008dce <_dtoa_r+0x266>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e7f2      	b.n	8008dfc <_dtoa_r+0x294>
 8008e16:	bf00      	nop
 8008e18:	636f4361 	.word	0x636f4361
 8008e1c:	3fd287a7 	.word	0x3fd287a7
 8008e20:	8b60c8b3 	.word	0x8b60c8b3
 8008e24:	3fc68a28 	.word	0x3fc68a28
 8008e28:	509f79fb 	.word	0x509f79fb
 8008e2c:	3fd34413 	.word	0x3fd34413
 8008e30:	0800b7d8 	.word	0x0800b7d8
 8008e34:	0800b996 	.word	0x0800b996
 8008e38:	7ff00000 	.word	0x7ff00000
 8008e3c:	0800b992 	.word	0x0800b992
 8008e40:	0800b989 	.word	0x0800b989
 8008e44:	0800b75d 	.word	0x0800b75d
 8008e48:	3ff80000 	.word	0x3ff80000
 8008e4c:	0800bb68 	.word	0x0800bb68
 8008e50:	0800b9f1 	.word	0x0800b9f1
 8008e54:	2401      	movs	r4, #1
 8008e56:	2300      	movs	r3, #0
 8008e58:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e5a:	9322      	str	r3, [sp, #136]	; 0x88
 8008e5c:	f04f 39ff 	mov.w	r9, #4294967295
 8008e60:	2200      	movs	r2, #0
 8008e62:	2312      	movs	r3, #18
 8008e64:	f8cd 9020 	str.w	r9, [sp, #32]
 8008e68:	9223      	str	r2, [sp, #140]	; 0x8c
 8008e6a:	e7b0      	b.n	8008dce <_dtoa_r+0x266>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e70:	e7f4      	b.n	8008e5c <_dtoa_r+0x2f4>
 8008e72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008e76:	464b      	mov	r3, r9
 8008e78:	f8cd 9020 	str.w	r9, [sp, #32]
 8008e7c:	e7a7      	b.n	8008dce <_dtoa_r+0x266>
 8008e7e:	3101      	adds	r1, #1
 8008e80:	6041      	str	r1, [r0, #4]
 8008e82:	0052      	lsls	r2, r2, #1
 8008e84:	e7a7      	b.n	8008dd6 <_dtoa_r+0x26e>
 8008e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e88:	9a03      	ldr	r2, [sp, #12]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	9b08      	ldr	r3, [sp, #32]
 8008e8e:	2b0e      	cmp	r3, #14
 8008e90:	f200 80a8 	bhi.w	8008fe4 <_dtoa_r+0x47c>
 8008e94:	2c00      	cmp	r4, #0
 8008e96:	f000 80a5 	beq.w	8008fe4 <_dtoa_r+0x47c>
 8008e9a:	f1ba 0f00 	cmp.w	sl, #0
 8008e9e:	dd34      	ble.n	8008f0a <_dtoa_r+0x3a2>
 8008ea0:	4a9a      	ldr	r2, [pc, #616]	; (800910c <_dtoa_r+0x5a4>)
 8008ea2:	f00a 030f 	and.w	r3, sl, #15
 8008ea6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008eb6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008eba:	d016      	beq.n	8008eea <_dtoa_r+0x382>
 8008ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ec0:	4b93      	ldr	r3, [pc, #588]	; (8009110 <_dtoa_r+0x5a8>)
 8008ec2:	2703      	movs	r7, #3
 8008ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ec8:	f7f7 fd5e 	bl	8000988 <__aeabi_ddiv>
 8008ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ed0:	f004 040f 	and.w	r4, r4, #15
 8008ed4:	4e8e      	ldr	r6, [pc, #568]	; (8009110 <_dtoa_r+0x5a8>)
 8008ed6:	b954      	cbnz	r4, 8008eee <_dtoa_r+0x386>
 8008ed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee0:	f7f7 fd52 	bl	8000988 <__aeabi_ddiv>
 8008ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ee8:	e029      	b.n	8008f3e <_dtoa_r+0x3d6>
 8008eea:	2702      	movs	r7, #2
 8008eec:	e7f2      	b.n	8008ed4 <_dtoa_r+0x36c>
 8008eee:	07e1      	lsls	r1, r4, #31
 8008ef0:	d508      	bpl.n	8008f04 <_dtoa_r+0x39c>
 8008ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ef6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008efa:	f7f7 fc1b 	bl	8000734 <__aeabi_dmul>
 8008efe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f02:	3701      	adds	r7, #1
 8008f04:	1064      	asrs	r4, r4, #1
 8008f06:	3608      	adds	r6, #8
 8008f08:	e7e5      	b.n	8008ed6 <_dtoa_r+0x36e>
 8008f0a:	f000 80a5 	beq.w	8009058 <_dtoa_r+0x4f0>
 8008f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f12:	f1ca 0400 	rsb	r4, sl, #0
 8008f16:	4b7d      	ldr	r3, [pc, #500]	; (800910c <_dtoa_r+0x5a4>)
 8008f18:	f004 020f 	and.w	r2, r4, #15
 8008f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f7f7 fc06 	bl	8000734 <__aeabi_dmul>
 8008f28:	2702      	movs	r7, #2
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f30:	4e77      	ldr	r6, [pc, #476]	; (8009110 <_dtoa_r+0x5a8>)
 8008f32:	1124      	asrs	r4, r4, #4
 8008f34:	2c00      	cmp	r4, #0
 8008f36:	f040 8084 	bne.w	8009042 <_dtoa_r+0x4da>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1d2      	bne.n	8008ee4 <_dtoa_r+0x37c>
 8008f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 808b 	beq.w	800905c <_dtoa_r+0x4f4>
 8008f46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f52:	2200      	movs	r2, #0
 8008f54:	4b6f      	ldr	r3, [pc, #444]	; (8009114 <_dtoa_r+0x5ac>)
 8008f56:	f7f7 fe5f 	bl	8000c18 <__aeabi_dcmplt>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d07e      	beq.n	800905c <_dtoa_r+0x4f4>
 8008f5e:	9b08      	ldr	r3, [sp, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d07b      	beq.n	800905c <_dtoa_r+0x4f4>
 8008f64:	f1b9 0f00 	cmp.w	r9, #0
 8008f68:	dd38      	ble.n	8008fdc <_dtoa_r+0x474>
 8008f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4b69      	ldr	r3, [pc, #420]	; (8009118 <_dtoa_r+0x5b0>)
 8008f72:	f7f7 fbdf 	bl	8000734 <__aeabi_dmul>
 8008f76:	464c      	mov	r4, r9
 8008f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008f80:	3701      	adds	r7, #1
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7f7 fb6c 	bl	8000660 <__aeabi_i2d>
 8008f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f8c:	f7f7 fbd2 	bl	8000734 <__aeabi_dmul>
 8008f90:	2200      	movs	r2, #0
 8008f92:	4b62      	ldr	r3, [pc, #392]	; (800911c <_dtoa_r+0x5b4>)
 8008f94:	f7f7 fa18 	bl	80003c8 <__adddf3>
 8008f98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008f9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fa0:	9611      	str	r6, [sp, #68]	; 0x44
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	d15d      	bne.n	8009062 <_dtoa_r+0x4fa>
 8008fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008faa:	2200      	movs	r2, #0
 8008fac:	4b5c      	ldr	r3, [pc, #368]	; (8009120 <_dtoa_r+0x5b8>)
 8008fae:	f7f7 fa09 	bl	80003c4 <__aeabi_dsub>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fba:	4633      	mov	r3, r6
 8008fbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fbe:	f7f7 fe49 	bl	8000c54 <__aeabi_dcmpgt>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f040 829c 	bne.w	8009500 <_dtoa_r+0x998>
 8008fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008fd2:	f7f7 fe21 	bl	8000c18 <__aeabi_dcmplt>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f040 8290 	bne.w	80094fc <_dtoa_r+0x994>
 8008fdc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008fe0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f2c0 8152 	blt.w	8009290 <_dtoa_r+0x728>
 8008fec:	f1ba 0f0e 	cmp.w	sl, #14
 8008ff0:	f300 814e 	bgt.w	8009290 <_dtoa_r+0x728>
 8008ff4:	4b45      	ldr	r3, [pc, #276]	; (800910c <_dtoa_r+0x5a4>)
 8008ff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ffa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ffe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009004:	2b00      	cmp	r3, #0
 8009006:	f280 80db 	bge.w	80091c0 <_dtoa_r+0x658>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f300 80d7 	bgt.w	80091c0 <_dtoa_r+0x658>
 8009012:	f040 8272 	bne.w	80094fa <_dtoa_r+0x992>
 8009016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800901a:	2200      	movs	r2, #0
 800901c:	4b40      	ldr	r3, [pc, #256]	; (8009120 <_dtoa_r+0x5b8>)
 800901e:	f7f7 fb89 	bl	8000734 <__aeabi_dmul>
 8009022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009026:	f7f7 fe0b 	bl	8000c40 <__aeabi_dcmpge>
 800902a:	9c08      	ldr	r4, [sp, #32]
 800902c:	4626      	mov	r6, r4
 800902e:	2800      	cmp	r0, #0
 8009030:	f040 8248 	bne.w	80094c4 <_dtoa_r+0x95c>
 8009034:	2331      	movs	r3, #49	; 0x31
 8009036:	9f03      	ldr	r7, [sp, #12]
 8009038:	f10a 0a01 	add.w	sl, sl, #1
 800903c:	f807 3b01 	strb.w	r3, [r7], #1
 8009040:	e244      	b.n	80094cc <_dtoa_r+0x964>
 8009042:	07e2      	lsls	r2, r4, #31
 8009044:	d505      	bpl.n	8009052 <_dtoa_r+0x4ea>
 8009046:	e9d6 2300 	ldrd	r2, r3, [r6]
 800904a:	f7f7 fb73 	bl	8000734 <__aeabi_dmul>
 800904e:	2301      	movs	r3, #1
 8009050:	3701      	adds	r7, #1
 8009052:	1064      	asrs	r4, r4, #1
 8009054:	3608      	adds	r6, #8
 8009056:	e76d      	b.n	8008f34 <_dtoa_r+0x3cc>
 8009058:	2702      	movs	r7, #2
 800905a:	e770      	b.n	8008f3e <_dtoa_r+0x3d6>
 800905c:	46d0      	mov	r8, sl
 800905e:	9c08      	ldr	r4, [sp, #32]
 8009060:	e78f      	b.n	8008f82 <_dtoa_r+0x41a>
 8009062:	9903      	ldr	r1, [sp, #12]
 8009064:	4b29      	ldr	r3, [pc, #164]	; (800910c <_dtoa_r+0x5a4>)
 8009066:	4421      	add	r1, r4
 8009068:	9112      	str	r1, [sp, #72]	; 0x48
 800906a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800906c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009070:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009074:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009078:	2900      	cmp	r1, #0
 800907a:	d055      	beq.n	8009128 <_dtoa_r+0x5c0>
 800907c:	2000      	movs	r0, #0
 800907e:	4929      	ldr	r1, [pc, #164]	; (8009124 <_dtoa_r+0x5bc>)
 8009080:	f7f7 fc82 	bl	8000988 <__aeabi_ddiv>
 8009084:	463b      	mov	r3, r7
 8009086:	4632      	mov	r2, r6
 8009088:	f7f7 f99c 	bl	80003c4 <__aeabi_dsub>
 800908c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009090:	9f03      	ldr	r7, [sp, #12]
 8009092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009096:	f7f7 fdfd 	bl	8000c94 <__aeabi_d2iz>
 800909a:	4604      	mov	r4, r0
 800909c:	f7f7 fae0 	bl	8000660 <__aeabi_i2d>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a8:	f7f7 f98c 	bl	80003c4 <__aeabi_dsub>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	3430      	adds	r4, #48	; 0x30
 80090b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090ba:	f807 4b01 	strb.w	r4, [r7], #1
 80090be:	f7f7 fdab 	bl	8000c18 <__aeabi_dcmplt>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d174      	bne.n	80091b0 <_dtoa_r+0x648>
 80090c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ca:	2000      	movs	r0, #0
 80090cc:	4911      	ldr	r1, [pc, #68]	; (8009114 <_dtoa_r+0x5ac>)
 80090ce:	f7f7 f979 	bl	80003c4 <__aeabi_dsub>
 80090d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090d6:	f7f7 fd9f 	bl	8000c18 <__aeabi_dcmplt>
 80090da:	2800      	cmp	r0, #0
 80090dc:	f040 80b7 	bne.w	800924e <_dtoa_r+0x6e6>
 80090e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090e2:	429f      	cmp	r7, r3
 80090e4:	f43f af7a 	beq.w	8008fdc <_dtoa_r+0x474>
 80090e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090ec:	2200      	movs	r2, #0
 80090ee:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <_dtoa_r+0x5b0>)
 80090f0:	f7f7 fb20 	bl	8000734 <__aeabi_dmul>
 80090f4:	2200      	movs	r2, #0
 80090f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090fe:	4b06      	ldr	r3, [pc, #24]	; (8009118 <_dtoa_r+0x5b0>)
 8009100:	f7f7 fb18 	bl	8000734 <__aeabi_dmul>
 8009104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009108:	e7c3      	b.n	8009092 <_dtoa_r+0x52a>
 800910a:	bf00      	nop
 800910c:	0800bb68 	.word	0x0800bb68
 8009110:	0800bb40 	.word	0x0800bb40
 8009114:	3ff00000 	.word	0x3ff00000
 8009118:	40240000 	.word	0x40240000
 800911c:	401c0000 	.word	0x401c0000
 8009120:	40140000 	.word	0x40140000
 8009124:	3fe00000 	.word	0x3fe00000
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 fb02 	bl	8000734 <__aeabi_dmul>
 8009130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009132:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009136:	9c03      	ldr	r4, [sp, #12]
 8009138:	9314      	str	r3, [sp, #80]	; 0x50
 800913a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800913e:	f7f7 fda9 	bl	8000c94 <__aeabi_d2iz>
 8009142:	9015      	str	r0, [sp, #84]	; 0x54
 8009144:	f7f7 fa8c 	bl	8000660 <__aeabi_i2d>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009150:	f7f7 f938 	bl	80003c4 <__aeabi_dsub>
 8009154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009156:	4606      	mov	r6, r0
 8009158:	3330      	adds	r3, #48	; 0x30
 800915a:	f804 3b01 	strb.w	r3, [r4], #1
 800915e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009160:	460f      	mov	r7, r1
 8009162:	429c      	cmp	r4, r3
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	d124      	bne.n	80091b4 <_dtoa_r+0x64c>
 800916a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800916e:	4bb0      	ldr	r3, [pc, #704]	; (8009430 <_dtoa_r+0x8c8>)
 8009170:	f7f7 f92a 	bl	80003c8 <__adddf3>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 fd6a 	bl	8000c54 <__aeabi_dcmpgt>
 8009180:	2800      	cmp	r0, #0
 8009182:	d163      	bne.n	800924c <_dtoa_r+0x6e4>
 8009184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009188:	2000      	movs	r0, #0
 800918a:	49a9      	ldr	r1, [pc, #676]	; (8009430 <_dtoa_r+0x8c8>)
 800918c:	f7f7 f91a 	bl	80003c4 <__aeabi_dsub>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f7f7 fd3e 	bl	8000c18 <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	f43f af1d 	beq.w	8008fdc <_dtoa_r+0x474>
 80091a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80091a4:	1e7b      	subs	r3, r7, #1
 80091a6:	9314      	str	r3, [sp, #80]	; 0x50
 80091a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80091ac:	2b30      	cmp	r3, #48	; 0x30
 80091ae:	d0f8      	beq.n	80091a2 <_dtoa_r+0x63a>
 80091b0:	46c2      	mov	sl, r8
 80091b2:	e03b      	b.n	800922c <_dtoa_r+0x6c4>
 80091b4:	4b9f      	ldr	r3, [pc, #636]	; (8009434 <_dtoa_r+0x8cc>)
 80091b6:	f7f7 fabd 	bl	8000734 <__aeabi_dmul>
 80091ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091be:	e7bc      	b.n	800913a <_dtoa_r+0x5d2>
 80091c0:	9f03      	ldr	r7, [sp, #12]
 80091c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ca:	4640      	mov	r0, r8
 80091cc:	4649      	mov	r1, r9
 80091ce:	f7f7 fbdb 	bl	8000988 <__aeabi_ddiv>
 80091d2:	f7f7 fd5f 	bl	8000c94 <__aeabi_d2iz>
 80091d6:	4604      	mov	r4, r0
 80091d8:	f7f7 fa42 	bl	8000660 <__aeabi_i2d>
 80091dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091e0:	f7f7 faa8 	bl	8000734 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4640      	mov	r0, r8
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7f7 f8ea 	bl	80003c4 <__aeabi_dsub>
 80091f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80091f4:	f807 6b01 	strb.w	r6, [r7], #1
 80091f8:	9e03      	ldr	r6, [sp, #12]
 80091fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80091fe:	1bbe      	subs	r6, r7, r6
 8009200:	45b4      	cmp	ip, r6
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	d136      	bne.n	8009276 <_dtoa_r+0x70e>
 8009208:	f7f7 f8de 	bl	80003c8 <__adddf3>
 800920c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009210:	4680      	mov	r8, r0
 8009212:	4689      	mov	r9, r1
 8009214:	f7f7 fd1e 	bl	8000c54 <__aeabi_dcmpgt>
 8009218:	bb58      	cbnz	r0, 8009272 <_dtoa_r+0x70a>
 800921a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800921e:	4640      	mov	r0, r8
 8009220:	4649      	mov	r1, r9
 8009222:	f7f7 fcef 	bl	8000c04 <__aeabi_dcmpeq>
 8009226:	b108      	cbz	r0, 800922c <_dtoa_r+0x6c4>
 8009228:	07e1      	lsls	r1, r4, #31
 800922a:	d422      	bmi.n	8009272 <_dtoa_r+0x70a>
 800922c:	4628      	mov	r0, r5
 800922e:	4659      	mov	r1, fp
 8009230:	f001 f888 	bl	800a344 <_Bfree>
 8009234:	2300      	movs	r3, #0
 8009236:	703b      	strb	r3, [r7, #0]
 8009238:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800923a:	f10a 0001 	add.w	r0, sl, #1
 800923e:	6018      	str	r0, [r3, #0]
 8009240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009242:	2b00      	cmp	r3, #0
 8009244:	f43f acde 	beq.w	8008c04 <_dtoa_r+0x9c>
 8009248:	601f      	str	r7, [r3, #0]
 800924a:	e4db      	b.n	8008c04 <_dtoa_r+0x9c>
 800924c:	4627      	mov	r7, r4
 800924e:	463b      	mov	r3, r7
 8009250:	461f      	mov	r7, r3
 8009252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009256:	2a39      	cmp	r2, #57	; 0x39
 8009258:	d107      	bne.n	800926a <_dtoa_r+0x702>
 800925a:	9a03      	ldr	r2, [sp, #12]
 800925c:	429a      	cmp	r2, r3
 800925e:	d1f7      	bne.n	8009250 <_dtoa_r+0x6e8>
 8009260:	2230      	movs	r2, #48	; 0x30
 8009262:	9903      	ldr	r1, [sp, #12]
 8009264:	f108 0801 	add.w	r8, r8, #1
 8009268:	700a      	strb	r2, [r1, #0]
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	3201      	adds	r2, #1
 800926e:	701a      	strb	r2, [r3, #0]
 8009270:	e79e      	b.n	80091b0 <_dtoa_r+0x648>
 8009272:	46d0      	mov	r8, sl
 8009274:	e7eb      	b.n	800924e <_dtoa_r+0x6e6>
 8009276:	2200      	movs	r2, #0
 8009278:	4b6e      	ldr	r3, [pc, #440]	; (8009434 <_dtoa_r+0x8cc>)
 800927a:	f7f7 fa5b 	bl	8000734 <__aeabi_dmul>
 800927e:	2200      	movs	r2, #0
 8009280:	2300      	movs	r3, #0
 8009282:	4680      	mov	r8, r0
 8009284:	4689      	mov	r9, r1
 8009286:	f7f7 fcbd 	bl	8000c04 <__aeabi_dcmpeq>
 800928a:	2800      	cmp	r0, #0
 800928c:	d09b      	beq.n	80091c6 <_dtoa_r+0x65e>
 800928e:	e7cd      	b.n	800922c <_dtoa_r+0x6c4>
 8009290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009292:	2a00      	cmp	r2, #0
 8009294:	f000 80d0 	beq.w	8009438 <_dtoa_r+0x8d0>
 8009298:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800929a:	2a01      	cmp	r2, #1
 800929c:	f300 80ae 	bgt.w	80093fc <_dtoa_r+0x894>
 80092a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	f000 80a6 	beq.w	80093f4 <_dtoa_r+0x88c>
 80092a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092ae:	9f06      	ldr	r7, [sp, #24]
 80092b0:	9a06      	ldr	r2, [sp, #24]
 80092b2:	2101      	movs	r1, #1
 80092b4:	441a      	add	r2, r3
 80092b6:	9206      	str	r2, [sp, #24]
 80092b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ba:	4628      	mov	r0, r5
 80092bc:	441a      	add	r2, r3
 80092be:	9209      	str	r2, [sp, #36]	; 0x24
 80092c0:	f001 f940 	bl	800a544 <__i2b>
 80092c4:	4606      	mov	r6, r0
 80092c6:	2f00      	cmp	r7, #0
 80092c8:	dd0c      	ble.n	80092e4 <_dtoa_r+0x77c>
 80092ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	dd09      	ble.n	80092e4 <_dtoa_r+0x77c>
 80092d0:	42bb      	cmp	r3, r7
 80092d2:	bfa8      	it	ge
 80092d4:	463b      	movge	r3, r7
 80092d6:	9a06      	ldr	r2, [sp, #24]
 80092d8:	1aff      	subs	r7, r7, r3
 80092da:	1ad2      	subs	r2, r2, r3
 80092dc:	9206      	str	r2, [sp, #24]
 80092de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	9309      	str	r3, [sp, #36]	; 0x24
 80092e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e6:	b1f3      	cbz	r3, 8009326 <_dtoa_r+0x7be>
 80092e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80a8 	beq.w	8009440 <_dtoa_r+0x8d8>
 80092f0:	2c00      	cmp	r4, #0
 80092f2:	dd10      	ble.n	8009316 <_dtoa_r+0x7ae>
 80092f4:	4631      	mov	r1, r6
 80092f6:	4622      	mov	r2, r4
 80092f8:	4628      	mov	r0, r5
 80092fa:	f001 f9e1 	bl	800a6c0 <__pow5mult>
 80092fe:	465a      	mov	r2, fp
 8009300:	4601      	mov	r1, r0
 8009302:	4606      	mov	r6, r0
 8009304:	4628      	mov	r0, r5
 8009306:	f001 f933 	bl	800a570 <__multiply>
 800930a:	4680      	mov	r8, r0
 800930c:	4659      	mov	r1, fp
 800930e:	4628      	mov	r0, r5
 8009310:	f001 f818 	bl	800a344 <_Bfree>
 8009314:	46c3      	mov	fp, r8
 8009316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009318:	1b1a      	subs	r2, r3, r4
 800931a:	d004      	beq.n	8009326 <_dtoa_r+0x7be>
 800931c:	4659      	mov	r1, fp
 800931e:	4628      	mov	r0, r5
 8009320:	f001 f9ce 	bl	800a6c0 <__pow5mult>
 8009324:	4683      	mov	fp, r0
 8009326:	2101      	movs	r1, #1
 8009328:	4628      	mov	r0, r5
 800932a:	f001 f90b 	bl	800a544 <__i2b>
 800932e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009330:	4604      	mov	r4, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	f340 8086 	ble.w	8009444 <_dtoa_r+0x8dc>
 8009338:	461a      	mov	r2, r3
 800933a:	4601      	mov	r1, r0
 800933c:	4628      	mov	r0, r5
 800933e:	f001 f9bf 	bl	800a6c0 <__pow5mult>
 8009342:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009344:	4604      	mov	r4, r0
 8009346:	2b01      	cmp	r3, #1
 8009348:	dd7f      	ble.n	800944a <_dtoa_r+0x8e2>
 800934a:	f04f 0800 	mov.w	r8, #0
 800934e:	6923      	ldr	r3, [r4, #16]
 8009350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009354:	6918      	ldr	r0, [r3, #16]
 8009356:	f001 f8a7 	bl	800a4a8 <__hi0bits>
 800935a:	f1c0 0020 	rsb	r0, r0, #32
 800935e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009360:	4418      	add	r0, r3
 8009362:	f010 001f 	ands.w	r0, r0, #31
 8009366:	f000 8092 	beq.w	800948e <_dtoa_r+0x926>
 800936a:	f1c0 0320 	rsb	r3, r0, #32
 800936e:	2b04      	cmp	r3, #4
 8009370:	f340 808a 	ble.w	8009488 <_dtoa_r+0x920>
 8009374:	f1c0 001c 	rsb	r0, r0, #28
 8009378:	9b06      	ldr	r3, [sp, #24]
 800937a:	4407      	add	r7, r0
 800937c:	4403      	add	r3, r0
 800937e:	9306      	str	r3, [sp, #24]
 8009380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009382:	4403      	add	r3, r0
 8009384:	9309      	str	r3, [sp, #36]	; 0x24
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	dd05      	ble.n	8009398 <_dtoa_r+0x830>
 800938c:	4659      	mov	r1, fp
 800938e:	461a      	mov	r2, r3
 8009390:	4628      	mov	r0, r5
 8009392:	f001 f9ef 	bl	800a774 <__lshift>
 8009396:	4683      	mov	fp, r0
 8009398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939a:	2b00      	cmp	r3, #0
 800939c:	dd05      	ble.n	80093aa <_dtoa_r+0x842>
 800939e:	4621      	mov	r1, r4
 80093a0:	461a      	mov	r2, r3
 80093a2:	4628      	mov	r0, r5
 80093a4:	f001 f9e6 	bl	800a774 <__lshift>
 80093a8:	4604      	mov	r4, r0
 80093aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d070      	beq.n	8009492 <_dtoa_r+0x92a>
 80093b0:	4621      	mov	r1, r4
 80093b2:	4658      	mov	r0, fp
 80093b4:	f001 fa4e 	bl	800a854 <__mcmp>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	da6a      	bge.n	8009492 <_dtoa_r+0x92a>
 80093bc:	2300      	movs	r3, #0
 80093be:	4659      	mov	r1, fp
 80093c0:	220a      	movs	r2, #10
 80093c2:	4628      	mov	r0, r5
 80093c4:	f000 ffe0 	bl	800a388 <__multadd>
 80093c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ca:	4683      	mov	fp, r0
 80093cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 8194 	beq.w	80096fe <_dtoa_r+0xb96>
 80093d6:	4631      	mov	r1, r6
 80093d8:	2300      	movs	r3, #0
 80093da:	220a      	movs	r2, #10
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 ffd3 	bl	800a388 <__multadd>
 80093e2:	f1b9 0f00 	cmp.w	r9, #0
 80093e6:	4606      	mov	r6, r0
 80093e8:	f300 8093 	bgt.w	8009512 <_dtoa_r+0x9aa>
 80093ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	dc57      	bgt.n	80094a2 <_dtoa_r+0x93a>
 80093f2:	e08e      	b.n	8009512 <_dtoa_r+0x9aa>
 80093f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093fa:	e757      	b.n	80092ac <_dtoa_r+0x744>
 80093fc:	9b08      	ldr	r3, [sp, #32]
 80093fe:	1e5c      	subs	r4, r3, #1
 8009400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009402:	42a3      	cmp	r3, r4
 8009404:	bfb7      	itett	lt
 8009406:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009408:	1b1c      	subge	r4, r3, r4
 800940a:	1ae2      	sublt	r2, r4, r3
 800940c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800940e:	bfbe      	ittt	lt
 8009410:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009412:	189b      	addlt	r3, r3, r2
 8009414:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009416:	9b08      	ldr	r3, [sp, #32]
 8009418:	bfb8      	it	lt
 800941a:	2400      	movlt	r4, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	bfbb      	ittet	lt
 8009420:	9b06      	ldrlt	r3, [sp, #24]
 8009422:	9a08      	ldrlt	r2, [sp, #32]
 8009424:	9f06      	ldrge	r7, [sp, #24]
 8009426:	1a9f      	sublt	r7, r3, r2
 8009428:	bfac      	ite	ge
 800942a:	9b08      	ldrge	r3, [sp, #32]
 800942c:	2300      	movlt	r3, #0
 800942e:	e73f      	b.n	80092b0 <_dtoa_r+0x748>
 8009430:	3fe00000 	.word	0x3fe00000
 8009434:	40240000 	.word	0x40240000
 8009438:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800943a:	9f06      	ldr	r7, [sp, #24]
 800943c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800943e:	e742      	b.n	80092c6 <_dtoa_r+0x75e>
 8009440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009442:	e76b      	b.n	800931c <_dtoa_r+0x7b4>
 8009444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009446:	2b01      	cmp	r3, #1
 8009448:	dc19      	bgt.n	800947e <_dtoa_r+0x916>
 800944a:	9b04      	ldr	r3, [sp, #16]
 800944c:	b9bb      	cbnz	r3, 800947e <_dtoa_r+0x916>
 800944e:	9b05      	ldr	r3, [sp, #20]
 8009450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009454:	b99b      	cbnz	r3, 800947e <_dtoa_r+0x916>
 8009456:	9b05      	ldr	r3, [sp, #20]
 8009458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800945c:	0d1b      	lsrs	r3, r3, #20
 800945e:	051b      	lsls	r3, r3, #20
 8009460:	b183      	cbz	r3, 8009484 <_dtoa_r+0x91c>
 8009462:	f04f 0801 	mov.w	r8, #1
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	3301      	adds	r3, #1
 800946a:	9306      	str	r3, [sp, #24]
 800946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946e:	3301      	adds	r3, #1
 8009470:	9309      	str	r3, [sp, #36]	; 0x24
 8009472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009474:	2b00      	cmp	r3, #0
 8009476:	f47f af6a 	bne.w	800934e <_dtoa_r+0x7e6>
 800947a:	2001      	movs	r0, #1
 800947c:	e76f      	b.n	800935e <_dtoa_r+0x7f6>
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	e7f6      	b.n	8009472 <_dtoa_r+0x90a>
 8009484:	4698      	mov	r8, r3
 8009486:	e7f4      	b.n	8009472 <_dtoa_r+0x90a>
 8009488:	f43f af7d 	beq.w	8009386 <_dtoa_r+0x81e>
 800948c:	4618      	mov	r0, r3
 800948e:	301c      	adds	r0, #28
 8009490:	e772      	b.n	8009378 <_dtoa_r+0x810>
 8009492:	9b08      	ldr	r3, [sp, #32]
 8009494:	2b00      	cmp	r3, #0
 8009496:	dc36      	bgt.n	8009506 <_dtoa_r+0x99e>
 8009498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800949a:	2b02      	cmp	r3, #2
 800949c:	dd33      	ble.n	8009506 <_dtoa_r+0x99e>
 800949e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094a2:	f1b9 0f00 	cmp.w	r9, #0
 80094a6:	d10d      	bne.n	80094c4 <_dtoa_r+0x95c>
 80094a8:	4621      	mov	r1, r4
 80094aa:	464b      	mov	r3, r9
 80094ac:	2205      	movs	r2, #5
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 ff6a 	bl	800a388 <__multadd>
 80094b4:	4601      	mov	r1, r0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4658      	mov	r0, fp
 80094ba:	f001 f9cb 	bl	800a854 <__mcmp>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f73f adb8 	bgt.w	8009034 <_dtoa_r+0x4cc>
 80094c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094c6:	9f03      	ldr	r7, [sp, #12]
 80094c8:	ea6f 0a03 	mvn.w	sl, r3
 80094cc:	f04f 0800 	mov.w	r8, #0
 80094d0:	4621      	mov	r1, r4
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 ff36 	bl	800a344 <_Bfree>
 80094d8:	2e00      	cmp	r6, #0
 80094da:	f43f aea7 	beq.w	800922c <_dtoa_r+0x6c4>
 80094de:	f1b8 0f00 	cmp.w	r8, #0
 80094e2:	d005      	beq.n	80094f0 <_dtoa_r+0x988>
 80094e4:	45b0      	cmp	r8, r6
 80094e6:	d003      	beq.n	80094f0 <_dtoa_r+0x988>
 80094e8:	4641      	mov	r1, r8
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 ff2a 	bl	800a344 <_Bfree>
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 ff26 	bl	800a344 <_Bfree>
 80094f8:	e698      	b.n	800922c <_dtoa_r+0x6c4>
 80094fa:	2400      	movs	r4, #0
 80094fc:	4626      	mov	r6, r4
 80094fe:	e7e1      	b.n	80094c4 <_dtoa_r+0x95c>
 8009500:	46c2      	mov	sl, r8
 8009502:	4626      	mov	r6, r4
 8009504:	e596      	b.n	8009034 <_dtoa_r+0x4cc>
 8009506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80fd 	beq.w	800970c <_dtoa_r+0xba4>
 8009512:	2f00      	cmp	r7, #0
 8009514:	dd05      	ble.n	8009522 <_dtoa_r+0x9ba>
 8009516:	4631      	mov	r1, r6
 8009518:	463a      	mov	r2, r7
 800951a:	4628      	mov	r0, r5
 800951c:	f001 f92a 	bl	800a774 <__lshift>
 8009520:	4606      	mov	r6, r0
 8009522:	f1b8 0f00 	cmp.w	r8, #0
 8009526:	d05c      	beq.n	80095e2 <_dtoa_r+0xa7a>
 8009528:	4628      	mov	r0, r5
 800952a:	6871      	ldr	r1, [r6, #4]
 800952c:	f000 feca 	bl	800a2c4 <_Balloc>
 8009530:	4607      	mov	r7, r0
 8009532:	b928      	cbnz	r0, 8009540 <_dtoa_r+0x9d8>
 8009534:	4602      	mov	r2, r0
 8009536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800953a:	4b7f      	ldr	r3, [pc, #508]	; (8009738 <_dtoa_r+0xbd0>)
 800953c:	f7ff bb28 	b.w	8008b90 <_dtoa_r+0x28>
 8009540:	6932      	ldr	r2, [r6, #16]
 8009542:	f106 010c 	add.w	r1, r6, #12
 8009546:	3202      	adds	r2, #2
 8009548:	0092      	lsls	r2, r2, #2
 800954a:	300c      	adds	r0, #12
 800954c:	f7fd fc04 	bl	8006d58 <memcpy>
 8009550:	2201      	movs	r2, #1
 8009552:	4639      	mov	r1, r7
 8009554:	4628      	mov	r0, r5
 8009556:	f001 f90d 	bl	800a774 <__lshift>
 800955a:	46b0      	mov	r8, r6
 800955c:	4606      	mov	r6, r0
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	9308      	str	r3, [sp, #32]
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	444b      	add	r3, r9
 8009568:	930a      	str	r3, [sp, #40]	; 0x28
 800956a:	9b04      	ldr	r3, [sp, #16]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	9309      	str	r3, [sp, #36]	; 0x24
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	4621      	mov	r1, r4
 8009576:	3b01      	subs	r3, #1
 8009578:	4658      	mov	r0, fp
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	f7ff fa68 	bl	8008a50 <quorem>
 8009580:	4603      	mov	r3, r0
 8009582:	4641      	mov	r1, r8
 8009584:	3330      	adds	r3, #48	; 0x30
 8009586:	9006      	str	r0, [sp, #24]
 8009588:	4658      	mov	r0, fp
 800958a:	930b      	str	r3, [sp, #44]	; 0x2c
 800958c:	f001 f962 	bl	800a854 <__mcmp>
 8009590:	4632      	mov	r2, r6
 8009592:	4681      	mov	r9, r0
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f001 f978 	bl	800a88c <__mdiff>
 800959c:	68c2      	ldr	r2, [r0, #12]
 800959e:	4607      	mov	r7, r0
 80095a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a2:	bb02      	cbnz	r2, 80095e6 <_dtoa_r+0xa7e>
 80095a4:	4601      	mov	r1, r0
 80095a6:	4658      	mov	r0, fp
 80095a8:	f001 f954 	bl	800a854 <__mcmp>
 80095ac:	4602      	mov	r2, r0
 80095ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b0:	4639      	mov	r1, r7
 80095b2:	4628      	mov	r0, r5
 80095b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80095b8:	f000 fec4 	bl	800a344 <_Bfree>
 80095bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095c0:	9f08      	ldr	r7, [sp, #32]
 80095c2:	ea43 0102 	orr.w	r1, r3, r2
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	430b      	orrs	r3, r1
 80095ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095cc:	d10d      	bne.n	80095ea <_dtoa_r+0xa82>
 80095ce:	2b39      	cmp	r3, #57	; 0x39
 80095d0:	d029      	beq.n	8009626 <_dtoa_r+0xabe>
 80095d2:	f1b9 0f00 	cmp.w	r9, #0
 80095d6:	dd01      	ble.n	80095dc <_dtoa_r+0xa74>
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	3331      	adds	r3, #49	; 0x31
 80095dc:	9a04      	ldr	r2, [sp, #16]
 80095de:	7013      	strb	r3, [r2, #0]
 80095e0:	e776      	b.n	80094d0 <_dtoa_r+0x968>
 80095e2:	4630      	mov	r0, r6
 80095e4:	e7b9      	b.n	800955a <_dtoa_r+0x9f2>
 80095e6:	2201      	movs	r2, #1
 80095e8:	e7e2      	b.n	80095b0 <_dtoa_r+0xa48>
 80095ea:	f1b9 0f00 	cmp.w	r9, #0
 80095ee:	db06      	blt.n	80095fe <_dtoa_r+0xa96>
 80095f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80095f2:	ea41 0909 	orr.w	r9, r1, r9
 80095f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095f8:	ea59 0101 	orrs.w	r1, r9, r1
 80095fc:	d120      	bne.n	8009640 <_dtoa_r+0xad8>
 80095fe:	2a00      	cmp	r2, #0
 8009600:	ddec      	ble.n	80095dc <_dtoa_r+0xa74>
 8009602:	4659      	mov	r1, fp
 8009604:	2201      	movs	r2, #1
 8009606:	4628      	mov	r0, r5
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	f001 f8b3 	bl	800a774 <__lshift>
 800960e:	4621      	mov	r1, r4
 8009610:	4683      	mov	fp, r0
 8009612:	f001 f91f 	bl	800a854 <__mcmp>
 8009616:	2800      	cmp	r0, #0
 8009618:	9b08      	ldr	r3, [sp, #32]
 800961a:	dc02      	bgt.n	8009622 <_dtoa_r+0xaba>
 800961c:	d1de      	bne.n	80095dc <_dtoa_r+0xa74>
 800961e:	07da      	lsls	r2, r3, #31
 8009620:	d5dc      	bpl.n	80095dc <_dtoa_r+0xa74>
 8009622:	2b39      	cmp	r3, #57	; 0x39
 8009624:	d1d8      	bne.n	80095d8 <_dtoa_r+0xa70>
 8009626:	2339      	movs	r3, #57	; 0x39
 8009628:	9a04      	ldr	r2, [sp, #16]
 800962a:	7013      	strb	r3, [r2, #0]
 800962c:	463b      	mov	r3, r7
 800962e:	461f      	mov	r7, r3
 8009630:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009634:	3b01      	subs	r3, #1
 8009636:	2a39      	cmp	r2, #57	; 0x39
 8009638:	d050      	beq.n	80096dc <_dtoa_r+0xb74>
 800963a:	3201      	adds	r2, #1
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	e747      	b.n	80094d0 <_dtoa_r+0x968>
 8009640:	2a00      	cmp	r2, #0
 8009642:	dd03      	ble.n	800964c <_dtoa_r+0xae4>
 8009644:	2b39      	cmp	r3, #57	; 0x39
 8009646:	d0ee      	beq.n	8009626 <_dtoa_r+0xabe>
 8009648:	3301      	adds	r3, #1
 800964a:	e7c7      	b.n	80095dc <_dtoa_r+0xa74>
 800964c:	9a08      	ldr	r2, [sp, #32]
 800964e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009650:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009654:	428a      	cmp	r2, r1
 8009656:	d02a      	beq.n	80096ae <_dtoa_r+0xb46>
 8009658:	4659      	mov	r1, fp
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4628      	mov	r0, r5
 8009660:	f000 fe92 	bl	800a388 <__multadd>
 8009664:	45b0      	cmp	r8, r6
 8009666:	4683      	mov	fp, r0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	f04f 020a 	mov.w	r2, #10
 8009670:	4641      	mov	r1, r8
 8009672:	4628      	mov	r0, r5
 8009674:	d107      	bne.n	8009686 <_dtoa_r+0xb1e>
 8009676:	f000 fe87 	bl	800a388 <__multadd>
 800967a:	4680      	mov	r8, r0
 800967c:	4606      	mov	r6, r0
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	3301      	adds	r3, #1
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	e775      	b.n	8009572 <_dtoa_r+0xa0a>
 8009686:	f000 fe7f 	bl	800a388 <__multadd>
 800968a:	4631      	mov	r1, r6
 800968c:	4680      	mov	r8, r0
 800968e:	2300      	movs	r3, #0
 8009690:	220a      	movs	r2, #10
 8009692:	4628      	mov	r0, r5
 8009694:	f000 fe78 	bl	800a388 <__multadd>
 8009698:	4606      	mov	r6, r0
 800969a:	e7f0      	b.n	800967e <_dtoa_r+0xb16>
 800969c:	f1b9 0f00 	cmp.w	r9, #0
 80096a0:	bfcc      	ite	gt
 80096a2:	464f      	movgt	r7, r9
 80096a4:	2701      	movle	r7, #1
 80096a6:	f04f 0800 	mov.w	r8, #0
 80096aa:	9a03      	ldr	r2, [sp, #12]
 80096ac:	4417      	add	r7, r2
 80096ae:	4659      	mov	r1, fp
 80096b0:	2201      	movs	r2, #1
 80096b2:	4628      	mov	r0, r5
 80096b4:	9308      	str	r3, [sp, #32]
 80096b6:	f001 f85d 	bl	800a774 <__lshift>
 80096ba:	4621      	mov	r1, r4
 80096bc:	4683      	mov	fp, r0
 80096be:	f001 f8c9 	bl	800a854 <__mcmp>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	dcb2      	bgt.n	800962c <_dtoa_r+0xac4>
 80096c6:	d102      	bne.n	80096ce <_dtoa_r+0xb66>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	07db      	lsls	r3, r3, #31
 80096cc:	d4ae      	bmi.n	800962c <_dtoa_r+0xac4>
 80096ce:	463b      	mov	r3, r7
 80096d0:	461f      	mov	r7, r3
 80096d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096d6:	2a30      	cmp	r2, #48	; 0x30
 80096d8:	d0fa      	beq.n	80096d0 <_dtoa_r+0xb68>
 80096da:	e6f9      	b.n	80094d0 <_dtoa_r+0x968>
 80096dc:	9a03      	ldr	r2, [sp, #12]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d1a5      	bne.n	800962e <_dtoa_r+0xac6>
 80096e2:	2331      	movs	r3, #49	; 0x31
 80096e4:	f10a 0a01 	add.w	sl, sl, #1
 80096e8:	e779      	b.n	80095de <_dtoa_r+0xa76>
 80096ea:	4b14      	ldr	r3, [pc, #80]	; (800973c <_dtoa_r+0xbd4>)
 80096ec:	f7ff baa8 	b.w	8008c40 <_dtoa_r+0xd8>
 80096f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f47f aa81 	bne.w	8008bfa <_dtoa_r+0x92>
 80096f8:	4b11      	ldr	r3, [pc, #68]	; (8009740 <_dtoa_r+0xbd8>)
 80096fa:	f7ff baa1 	b.w	8008c40 <_dtoa_r+0xd8>
 80096fe:	f1b9 0f00 	cmp.w	r9, #0
 8009702:	dc03      	bgt.n	800970c <_dtoa_r+0xba4>
 8009704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009706:	2b02      	cmp	r3, #2
 8009708:	f73f aecb 	bgt.w	80094a2 <_dtoa_r+0x93a>
 800970c:	9f03      	ldr	r7, [sp, #12]
 800970e:	4621      	mov	r1, r4
 8009710:	4658      	mov	r0, fp
 8009712:	f7ff f99d 	bl	8008a50 <quorem>
 8009716:	9a03      	ldr	r2, [sp, #12]
 8009718:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800971c:	f807 3b01 	strb.w	r3, [r7], #1
 8009720:	1aba      	subs	r2, r7, r2
 8009722:	4591      	cmp	r9, r2
 8009724:	ddba      	ble.n	800969c <_dtoa_r+0xb34>
 8009726:	4659      	mov	r1, fp
 8009728:	2300      	movs	r3, #0
 800972a:	220a      	movs	r2, #10
 800972c:	4628      	mov	r0, r5
 800972e:	f000 fe2b 	bl	800a388 <__multadd>
 8009732:	4683      	mov	fp, r0
 8009734:	e7eb      	b.n	800970e <_dtoa_r+0xba6>
 8009736:	bf00      	nop
 8009738:	0800b9f1 	.word	0x0800b9f1
 800973c:	0800b75c 	.word	0x0800b75c
 8009740:	0800b989 	.word	0x0800b989

08009744 <__sflush_r>:
 8009744:	898a      	ldrh	r2, [r1, #12]
 8009746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009748:	4605      	mov	r5, r0
 800974a:	0710      	lsls	r0, r2, #28
 800974c:	460c      	mov	r4, r1
 800974e:	d457      	bmi.n	8009800 <__sflush_r+0xbc>
 8009750:	684b      	ldr	r3, [r1, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	dc04      	bgt.n	8009760 <__sflush_r+0x1c>
 8009756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	dc01      	bgt.n	8009760 <__sflush_r+0x1c>
 800975c:	2000      	movs	r0, #0
 800975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009762:	2e00      	cmp	r6, #0
 8009764:	d0fa      	beq.n	800975c <__sflush_r+0x18>
 8009766:	2300      	movs	r3, #0
 8009768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800976c:	682f      	ldr	r7, [r5, #0]
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	d032      	beq.n	80097d8 <__sflush_r+0x94>
 8009772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	075a      	lsls	r2, r3, #29
 8009778:	d505      	bpl.n	8009786 <__sflush_r+0x42>
 800977a:	6863      	ldr	r3, [r4, #4]
 800977c:	1ac0      	subs	r0, r0, r3
 800977e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009780:	b10b      	cbz	r3, 8009786 <__sflush_r+0x42>
 8009782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009784:	1ac0      	subs	r0, r0, r3
 8009786:	2300      	movs	r3, #0
 8009788:	4602      	mov	r2, r0
 800978a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800978c:	4628      	mov	r0, r5
 800978e:	6a21      	ldr	r1, [r4, #32]
 8009790:	47b0      	blx	r6
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	d106      	bne.n	80097a6 <__sflush_r+0x62>
 8009798:	6829      	ldr	r1, [r5, #0]
 800979a:	291d      	cmp	r1, #29
 800979c:	d82c      	bhi.n	80097f8 <__sflush_r+0xb4>
 800979e:	4a29      	ldr	r2, [pc, #164]	; (8009844 <__sflush_r+0x100>)
 80097a0:	40ca      	lsrs	r2, r1
 80097a2:	07d6      	lsls	r6, r2, #31
 80097a4:	d528      	bpl.n	80097f8 <__sflush_r+0xb4>
 80097a6:	2200      	movs	r2, #0
 80097a8:	6062      	str	r2, [r4, #4]
 80097aa:	6922      	ldr	r2, [r4, #16]
 80097ac:	04d9      	lsls	r1, r3, #19
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	d504      	bpl.n	80097bc <__sflush_r+0x78>
 80097b2:	1c42      	adds	r2, r0, #1
 80097b4:	d101      	bne.n	80097ba <__sflush_r+0x76>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	b903      	cbnz	r3, 80097bc <__sflush_r+0x78>
 80097ba:	6560      	str	r0, [r4, #84]	; 0x54
 80097bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097be:	602f      	str	r7, [r5, #0]
 80097c0:	2900      	cmp	r1, #0
 80097c2:	d0cb      	beq.n	800975c <__sflush_r+0x18>
 80097c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097c8:	4299      	cmp	r1, r3
 80097ca:	d002      	beq.n	80097d2 <__sflush_r+0x8e>
 80097cc:	4628      	mov	r0, r5
 80097ce:	f001 fa45 	bl	800ac5c <_free_r>
 80097d2:	2000      	movs	r0, #0
 80097d4:	6360      	str	r0, [r4, #52]	; 0x34
 80097d6:	e7c2      	b.n	800975e <__sflush_r+0x1a>
 80097d8:	6a21      	ldr	r1, [r4, #32]
 80097da:	2301      	movs	r3, #1
 80097dc:	4628      	mov	r0, r5
 80097de:	47b0      	blx	r6
 80097e0:	1c41      	adds	r1, r0, #1
 80097e2:	d1c7      	bne.n	8009774 <__sflush_r+0x30>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0c4      	beq.n	8009774 <__sflush_r+0x30>
 80097ea:	2b1d      	cmp	r3, #29
 80097ec:	d001      	beq.n	80097f2 <__sflush_r+0xae>
 80097ee:	2b16      	cmp	r3, #22
 80097f0:	d101      	bne.n	80097f6 <__sflush_r+0xb2>
 80097f2:	602f      	str	r7, [r5, #0]
 80097f4:	e7b2      	b.n	800975c <__sflush_r+0x18>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	e7ae      	b.n	800975e <__sflush_r+0x1a>
 8009800:	690f      	ldr	r7, [r1, #16]
 8009802:	2f00      	cmp	r7, #0
 8009804:	d0aa      	beq.n	800975c <__sflush_r+0x18>
 8009806:	0793      	lsls	r3, r2, #30
 8009808:	bf18      	it	ne
 800980a:	2300      	movne	r3, #0
 800980c:	680e      	ldr	r6, [r1, #0]
 800980e:	bf08      	it	eq
 8009810:	694b      	ldreq	r3, [r1, #20]
 8009812:	1bf6      	subs	r6, r6, r7
 8009814:	600f      	str	r7, [r1, #0]
 8009816:	608b      	str	r3, [r1, #8]
 8009818:	2e00      	cmp	r6, #0
 800981a:	dd9f      	ble.n	800975c <__sflush_r+0x18>
 800981c:	4633      	mov	r3, r6
 800981e:	463a      	mov	r2, r7
 8009820:	4628      	mov	r0, r5
 8009822:	6a21      	ldr	r1, [r4, #32]
 8009824:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009828:	47e0      	blx	ip
 800982a:	2800      	cmp	r0, #0
 800982c:	dc06      	bgt.n	800983c <__sflush_r+0xf8>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	e790      	b.n	800975e <__sflush_r+0x1a>
 800983c:	4407      	add	r7, r0
 800983e:	1a36      	subs	r6, r6, r0
 8009840:	e7ea      	b.n	8009818 <__sflush_r+0xd4>
 8009842:	bf00      	nop
 8009844:	20400001 	.word	0x20400001

08009848 <_fflush_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	690b      	ldr	r3, [r1, #16]
 800984c:	4605      	mov	r5, r0
 800984e:	460c      	mov	r4, r1
 8009850:	b913      	cbnz	r3, 8009858 <_fflush_r+0x10>
 8009852:	2500      	movs	r5, #0
 8009854:	4628      	mov	r0, r5
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	b118      	cbz	r0, 8009862 <_fflush_r+0x1a>
 800985a:	6983      	ldr	r3, [r0, #24]
 800985c:	b90b      	cbnz	r3, 8009862 <_fflush_r+0x1a>
 800985e:	f000 f887 	bl	8009970 <__sinit>
 8009862:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <_fflush_r+0x6c>)
 8009864:	429c      	cmp	r4, r3
 8009866:	d11b      	bne.n	80098a0 <_fflush_r+0x58>
 8009868:	686c      	ldr	r4, [r5, #4]
 800986a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0ef      	beq.n	8009852 <_fflush_r+0xa>
 8009872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009874:	07d0      	lsls	r0, r2, #31
 8009876:	d404      	bmi.n	8009882 <_fflush_r+0x3a>
 8009878:	0599      	lsls	r1, r3, #22
 800987a:	d402      	bmi.n	8009882 <_fflush_r+0x3a>
 800987c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800987e:	f000 fc92 	bl	800a1a6 <__retarget_lock_acquire_recursive>
 8009882:	4628      	mov	r0, r5
 8009884:	4621      	mov	r1, r4
 8009886:	f7ff ff5d 	bl	8009744 <__sflush_r>
 800988a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800988c:	4605      	mov	r5, r0
 800988e:	07da      	lsls	r2, r3, #31
 8009890:	d4e0      	bmi.n	8009854 <_fflush_r+0xc>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	059b      	lsls	r3, r3, #22
 8009896:	d4dd      	bmi.n	8009854 <_fflush_r+0xc>
 8009898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800989a:	f000 fc85 	bl	800a1a8 <__retarget_lock_release_recursive>
 800989e:	e7d9      	b.n	8009854 <_fflush_r+0xc>
 80098a0:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <_fflush_r+0x70>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <_fflush_r+0x62>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7df      	b.n	800986a <_fflush_r+0x22>
 80098aa:	4b04      	ldr	r3, [pc, #16]	; (80098bc <_fflush_r+0x74>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7da      	b.n	800986a <_fflush_r+0x22>
 80098b4:	0800ba24 	.word	0x0800ba24
 80098b8:	0800ba44 	.word	0x0800ba44
 80098bc:	0800ba04 	.word	0x0800ba04

080098c0 <std>:
 80098c0:	2300      	movs	r3, #0
 80098c2:	b510      	push	{r4, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	e9c0 3300 	strd	r3, r3, [r0]
 80098ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098ce:	6083      	str	r3, [r0, #8]
 80098d0:	8181      	strh	r1, [r0, #12]
 80098d2:	6643      	str	r3, [r0, #100]	; 0x64
 80098d4:	81c2      	strh	r2, [r0, #14]
 80098d6:	6183      	str	r3, [r0, #24]
 80098d8:	4619      	mov	r1, r3
 80098da:	2208      	movs	r2, #8
 80098dc:	305c      	adds	r0, #92	; 0x5c
 80098de:	f7fd fa49 	bl	8006d74 <memset>
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <std+0x38>)
 80098e4:	6224      	str	r4, [r4, #32]
 80098e6:	6263      	str	r3, [r4, #36]	; 0x24
 80098e8:	4b04      	ldr	r3, [pc, #16]	; (80098fc <std+0x3c>)
 80098ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80098ec:	4b04      	ldr	r3, [pc, #16]	; (8009900 <std+0x40>)
 80098ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098f0:	4b04      	ldr	r3, [pc, #16]	; (8009904 <std+0x44>)
 80098f2:	6323      	str	r3, [r4, #48]	; 0x30
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	0800b3a9 	.word	0x0800b3a9
 80098fc:	0800b3cb 	.word	0x0800b3cb
 8009900:	0800b403 	.word	0x0800b403
 8009904:	0800b427 	.word	0x0800b427

08009908 <_cleanup_r>:
 8009908:	4901      	ldr	r1, [pc, #4]	; (8009910 <_cleanup_r+0x8>)
 800990a:	f000 b8c1 	b.w	8009a90 <_fwalk_reent>
 800990e:	bf00      	nop
 8009910:	08009849 	.word	0x08009849

08009914 <__sfmoreglue>:
 8009914:	2268      	movs	r2, #104	; 0x68
 8009916:	b570      	push	{r4, r5, r6, lr}
 8009918:	1e4d      	subs	r5, r1, #1
 800991a:	4355      	muls	r5, r2
 800991c:	460e      	mov	r6, r1
 800991e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009922:	f001 fa03 	bl	800ad2c <_malloc_r>
 8009926:	4604      	mov	r4, r0
 8009928:	b140      	cbz	r0, 800993c <__sfmoreglue+0x28>
 800992a:	2100      	movs	r1, #0
 800992c:	e9c0 1600 	strd	r1, r6, [r0]
 8009930:	300c      	adds	r0, #12
 8009932:	60a0      	str	r0, [r4, #8]
 8009934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009938:	f7fd fa1c 	bl	8006d74 <memset>
 800993c:	4620      	mov	r0, r4
 800993e:	bd70      	pop	{r4, r5, r6, pc}

08009940 <__sfp_lock_acquire>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__sfp_lock_acquire+0x8>)
 8009942:	f000 bc30 	b.w	800a1a6 <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	20000b9d 	.word	0x20000b9d

0800994c <__sfp_lock_release>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__sfp_lock_release+0x8>)
 800994e:	f000 bc2b 	b.w	800a1a8 <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	20000b9d 	.word	0x20000b9d

08009958 <__sinit_lock_acquire>:
 8009958:	4801      	ldr	r0, [pc, #4]	; (8009960 <__sinit_lock_acquire+0x8>)
 800995a:	f000 bc24 	b.w	800a1a6 <__retarget_lock_acquire_recursive>
 800995e:	bf00      	nop
 8009960:	20000b9e 	.word	0x20000b9e

08009964 <__sinit_lock_release>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__sinit_lock_release+0x8>)
 8009966:	f000 bc1f 	b.w	800a1a8 <__retarget_lock_release_recursive>
 800996a:	bf00      	nop
 800996c:	20000b9e 	.word	0x20000b9e

08009970 <__sinit>:
 8009970:	b510      	push	{r4, lr}
 8009972:	4604      	mov	r4, r0
 8009974:	f7ff fff0 	bl	8009958 <__sinit_lock_acquire>
 8009978:	69a3      	ldr	r3, [r4, #24]
 800997a:	b11b      	cbz	r3, 8009984 <__sinit+0x14>
 800997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009980:	f7ff bff0 	b.w	8009964 <__sinit_lock_release>
 8009984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009988:	6523      	str	r3, [r4, #80]	; 0x50
 800998a:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <__sinit+0x68>)
 800998c:	4a13      	ldr	r2, [pc, #76]	; (80099dc <__sinit+0x6c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	62a2      	str	r2, [r4, #40]	; 0x28
 8009992:	42a3      	cmp	r3, r4
 8009994:	bf08      	it	eq
 8009996:	2301      	moveq	r3, #1
 8009998:	4620      	mov	r0, r4
 800999a:	bf08      	it	eq
 800999c:	61a3      	streq	r3, [r4, #24]
 800999e:	f000 f81f 	bl	80099e0 <__sfp>
 80099a2:	6060      	str	r0, [r4, #4]
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 f81b 	bl	80099e0 <__sfp>
 80099aa:	60a0      	str	r0, [r4, #8]
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 f817 	bl	80099e0 <__sfp>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2104      	movs	r1, #4
 80099b6:	60e0      	str	r0, [r4, #12]
 80099b8:	6860      	ldr	r0, [r4, #4]
 80099ba:	f7ff ff81 	bl	80098c0 <std>
 80099be:	2201      	movs	r2, #1
 80099c0:	2109      	movs	r1, #9
 80099c2:	68a0      	ldr	r0, [r4, #8]
 80099c4:	f7ff ff7c 	bl	80098c0 <std>
 80099c8:	2202      	movs	r2, #2
 80099ca:	2112      	movs	r1, #18
 80099cc:	68e0      	ldr	r0, [r4, #12]
 80099ce:	f7ff ff77 	bl	80098c0 <std>
 80099d2:	2301      	movs	r3, #1
 80099d4:	61a3      	str	r3, [r4, #24]
 80099d6:	e7d1      	b.n	800997c <__sinit+0xc>
 80099d8:	0800b748 	.word	0x0800b748
 80099dc:	08009909 	.word	0x08009909

080099e0 <__sfp>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	4607      	mov	r7, r0
 80099e4:	f7ff ffac 	bl	8009940 <__sfp_lock_acquire>
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <__sfp+0x84>)
 80099ea:	681e      	ldr	r6, [r3, #0]
 80099ec:	69b3      	ldr	r3, [r6, #24]
 80099ee:	b913      	cbnz	r3, 80099f6 <__sfp+0x16>
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ffbd 	bl	8009970 <__sinit>
 80099f6:	3648      	adds	r6, #72	; 0x48
 80099f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	d503      	bpl.n	8009a08 <__sfp+0x28>
 8009a00:	6833      	ldr	r3, [r6, #0]
 8009a02:	b30b      	cbz	r3, 8009a48 <__sfp+0x68>
 8009a04:	6836      	ldr	r6, [r6, #0]
 8009a06:	e7f7      	b.n	80099f8 <__sfp+0x18>
 8009a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a0c:	b9d5      	cbnz	r5, 8009a44 <__sfp+0x64>
 8009a0e:	4b16      	ldr	r3, [pc, #88]	; (8009a68 <__sfp+0x88>)
 8009a10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a14:	60e3      	str	r3, [r4, #12]
 8009a16:	6665      	str	r5, [r4, #100]	; 0x64
 8009a18:	f000 fbc4 	bl	800a1a4 <__retarget_lock_init_recursive>
 8009a1c:	f7ff ff96 	bl	800994c <__sfp_lock_release>
 8009a20:	2208      	movs	r2, #8
 8009a22:	4629      	mov	r1, r5
 8009a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a2c:	6025      	str	r5, [r4, #0]
 8009a2e:	61a5      	str	r5, [r4, #24]
 8009a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a34:	f7fd f99e 	bl	8006d74 <memset>
 8009a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a40:	4620      	mov	r0, r4
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a44:	3468      	adds	r4, #104	; 0x68
 8009a46:	e7d9      	b.n	80099fc <__sfp+0x1c>
 8009a48:	2104      	movs	r1, #4
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f7ff ff62 	bl	8009914 <__sfmoreglue>
 8009a50:	4604      	mov	r4, r0
 8009a52:	6030      	str	r0, [r6, #0]
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1d5      	bne.n	8009a04 <__sfp+0x24>
 8009a58:	f7ff ff78 	bl	800994c <__sfp_lock_release>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	e7ee      	b.n	8009a40 <__sfp+0x60>
 8009a62:	bf00      	nop
 8009a64:	0800b748 	.word	0x0800b748
 8009a68:	ffff0001 	.word	0xffff0001

08009a6c <fiprintf>:
 8009a6c:	b40e      	push	{r1, r2, r3}
 8009a6e:	b503      	push	{r0, r1, lr}
 8009a70:	4601      	mov	r1, r0
 8009a72:	ab03      	add	r3, sp, #12
 8009a74:	4805      	ldr	r0, [pc, #20]	; (8009a8c <fiprintf+0x20>)
 8009a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7a:	6800      	ldr	r0, [r0, #0]
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	f001 fb4d 	bl	800b11c <_vfiprintf_r>
 8009a82:	b002      	add	sp, #8
 8009a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a88:	b003      	add	sp, #12
 8009a8a:	4770      	bx	lr
 8009a8c:	20000504 	.word	0x20000504

08009a90 <_fwalk_reent>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	4606      	mov	r6, r0
 8009a96:	4688      	mov	r8, r1
 8009a98:	2700      	movs	r7, #0
 8009a9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aa2:	f1b9 0901 	subs.w	r9, r9, #1
 8009aa6:	d505      	bpl.n	8009ab4 <_fwalk_reent+0x24>
 8009aa8:	6824      	ldr	r4, [r4, #0]
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	d1f7      	bne.n	8009a9e <_fwalk_reent+0xe>
 8009aae:	4638      	mov	r0, r7
 8009ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab4:	89ab      	ldrh	r3, [r5, #12]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d907      	bls.n	8009aca <_fwalk_reent+0x3a>
 8009aba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	d003      	beq.n	8009aca <_fwalk_reent+0x3a>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	47c0      	blx	r8
 8009ac8:	4307      	orrs	r7, r0
 8009aca:	3568      	adds	r5, #104	; 0x68
 8009acc:	e7e9      	b.n	8009aa2 <_fwalk_reent+0x12>

08009ace <rshift>:
 8009ace:	6903      	ldr	r3, [r0, #16]
 8009ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ad4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ad8:	f100 0414 	add.w	r4, r0, #20
 8009adc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ae0:	dd46      	ble.n	8009b70 <rshift+0xa2>
 8009ae2:	f011 011f 	ands.w	r1, r1, #31
 8009ae6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009aea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aee:	d10c      	bne.n	8009b0a <rshift+0x3c>
 8009af0:	4629      	mov	r1, r5
 8009af2:	f100 0710 	add.w	r7, r0, #16
 8009af6:	42b1      	cmp	r1, r6
 8009af8:	d335      	bcc.n	8009b66 <rshift+0x98>
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	1eea      	subs	r2, r5, #3
 8009b00:	4296      	cmp	r6, r2
 8009b02:	bf38      	it	cc
 8009b04:	2300      	movcc	r3, #0
 8009b06:	4423      	add	r3, r4
 8009b08:	e015      	b.n	8009b36 <rshift+0x68>
 8009b0a:	46a1      	mov	r9, r4
 8009b0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b10:	f1c1 0820 	rsb	r8, r1, #32
 8009b14:	40cf      	lsrs	r7, r1
 8009b16:	f105 0e04 	add.w	lr, r5, #4
 8009b1a:	4576      	cmp	r6, lr
 8009b1c:	46f4      	mov	ip, lr
 8009b1e:	d816      	bhi.n	8009b4e <rshift+0x80>
 8009b20:	1a9a      	subs	r2, r3, r2
 8009b22:	0092      	lsls	r2, r2, #2
 8009b24:	3a04      	subs	r2, #4
 8009b26:	3501      	adds	r5, #1
 8009b28:	42ae      	cmp	r6, r5
 8009b2a:	bf38      	it	cc
 8009b2c:	2200      	movcc	r2, #0
 8009b2e:	18a3      	adds	r3, r4, r2
 8009b30:	50a7      	str	r7, [r4, r2]
 8009b32:	b107      	cbz	r7, 8009b36 <rshift+0x68>
 8009b34:	3304      	adds	r3, #4
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	eba3 0204 	sub.w	r2, r3, r4
 8009b3c:	bf08      	it	eq
 8009b3e:	2300      	moveq	r3, #0
 8009b40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b44:	6102      	str	r2, [r0, #16]
 8009b46:	bf08      	it	eq
 8009b48:	6143      	streq	r3, [r0, #20]
 8009b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b4e:	f8dc c000 	ldr.w	ip, [ip]
 8009b52:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b56:	ea4c 0707 	orr.w	r7, ip, r7
 8009b5a:	f849 7b04 	str.w	r7, [r9], #4
 8009b5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b62:	40cf      	lsrs	r7, r1
 8009b64:	e7d9      	b.n	8009b1a <rshift+0x4c>
 8009b66:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b6e:	e7c2      	b.n	8009af6 <rshift+0x28>
 8009b70:	4623      	mov	r3, r4
 8009b72:	e7e0      	b.n	8009b36 <rshift+0x68>

08009b74 <__hexdig_fun>:
 8009b74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b78:	2b09      	cmp	r3, #9
 8009b7a:	d802      	bhi.n	8009b82 <__hexdig_fun+0xe>
 8009b7c:	3820      	subs	r0, #32
 8009b7e:	b2c0      	uxtb	r0, r0
 8009b80:	4770      	bx	lr
 8009b82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	d801      	bhi.n	8009b8e <__hexdig_fun+0x1a>
 8009b8a:	3847      	subs	r0, #71	; 0x47
 8009b8c:	e7f7      	b.n	8009b7e <__hexdig_fun+0xa>
 8009b8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d801      	bhi.n	8009b9a <__hexdig_fun+0x26>
 8009b96:	3827      	subs	r0, #39	; 0x27
 8009b98:	e7f1      	b.n	8009b7e <__hexdig_fun+0xa>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4770      	bx	lr
	...

08009ba0 <__gethex>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	b08b      	sub	sp, #44	; 0x2c
 8009ba6:	9305      	str	r3, [sp, #20]
 8009ba8:	4bb2      	ldr	r3, [pc, #712]	; (8009e74 <__gethex+0x2d4>)
 8009baa:	9002      	str	r0, [sp, #8]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	468b      	mov	fp, r1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	4690      	mov	r8, r2
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	f7f6 fb45 	bl	8000244 <strlen>
 8009bba:	4682      	mov	sl, r0
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	f8db 2000 	ldr.w	r2, [fp]
 8009bc2:	4403      	add	r3, r0
 8009bc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009bc8:	9306      	str	r3, [sp, #24]
 8009bca:	1c93      	adds	r3, r2, #2
 8009bcc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bd0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bd4:	32fe      	adds	r2, #254	; 0xfe
 8009bd6:	18d1      	adds	r1, r2, r3
 8009bd8:	461f      	mov	r7, r3
 8009bda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bde:	9101      	str	r1, [sp, #4]
 8009be0:	2830      	cmp	r0, #48	; 0x30
 8009be2:	d0f8      	beq.n	8009bd6 <__gethex+0x36>
 8009be4:	f7ff ffc6 	bl	8009b74 <__hexdig_fun>
 8009be8:	4604      	mov	r4, r0
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d13a      	bne.n	8009c64 <__gethex+0xc4>
 8009bee:	4652      	mov	r2, sl
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	9903      	ldr	r1, [sp, #12]
 8009bf4:	f001 fc1b 	bl	800b42e <strncmp>
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d166      	bne.n	8009ccc <__gethex+0x12c>
 8009bfe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009c02:	eb07 060a 	add.w	r6, r7, sl
 8009c06:	f7ff ffb5 	bl	8009b74 <__hexdig_fun>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d060      	beq.n	8009cd0 <__gethex+0x130>
 8009c0e:	4633      	mov	r3, r6
 8009c10:	7818      	ldrb	r0, [r3, #0]
 8009c12:	461f      	mov	r7, r3
 8009c14:	2830      	cmp	r0, #48	; 0x30
 8009c16:	f103 0301 	add.w	r3, r3, #1
 8009c1a:	d0f9      	beq.n	8009c10 <__gethex+0x70>
 8009c1c:	f7ff ffaa 	bl	8009b74 <__hexdig_fun>
 8009c20:	2301      	movs	r3, #1
 8009c22:	fab0 f480 	clz	r4, r0
 8009c26:	4635      	mov	r5, r6
 8009c28:	0964      	lsrs	r4, r4, #5
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	463a      	mov	r2, r7
 8009c2e:	4616      	mov	r6, r2
 8009c30:	7830      	ldrb	r0, [r6, #0]
 8009c32:	3201      	adds	r2, #1
 8009c34:	f7ff ff9e 	bl	8009b74 <__hexdig_fun>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d1f8      	bne.n	8009c2e <__gethex+0x8e>
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4630      	mov	r0, r6
 8009c40:	9903      	ldr	r1, [sp, #12]
 8009c42:	f001 fbf4 	bl	800b42e <strncmp>
 8009c46:	b980      	cbnz	r0, 8009c6a <__gethex+0xca>
 8009c48:	b94d      	cbnz	r5, 8009c5e <__gethex+0xbe>
 8009c4a:	eb06 050a 	add.w	r5, r6, sl
 8009c4e:	462a      	mov	r2, r5
 8009c50:	4616      	mov	r6, r2
 8009c52:	7830      	ldrb	r0, [r6, #0]
 8009c54:	3201      	adds	r2, #1
 8009c56:	f7ff ff8d 	bl	8009b74 <__hexdig_fun>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d1f8      	bne.n	8009c50 <__gethex+0xb0>
 8009c5e:	1bad      	subs	r5, r5, r6
 8009c60:	00ad      	lsls	r5, r5, #2
 8009c62:	e004      	b.n	8009c6e <__gethex+0xce>
 8009c64:	2400      	movs	r4, #0
 8009c66:	4625      	mov	r5, r4
 8009c68:	e7e0      	b.n	8009c2c <__gethex+0x8c>
 8009c6a:	2d00      	cmp	r5, #0
 8009c6c:	d1f7      	bne.n	8009c5e <__gethex+0xbe>
 8009c6e:	7833      	ldrb	r3, [r6, #0]
 8009c70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c74:	2b50      	cmp	r3, #80	; 0x50
 8009c76:	d139      	bne.n	8009cec <__gethex+0x14c>
 8009c78:	7873      	ldrb	r3, [r6, #1]
 8009c7a:	2b2b      	cmp	r3, #43	; 0x2b
 8009c7c:	d02a      	beq.n	8009cd4 <__gethex+0x134>
 8009c7e:	2b2d      	cmp	r3, #45	; 0x2d
 8009c80:	d02c      	beq.n	8009cdc <__gethex+0x13c>
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	1c71      	adds	r1, r6, #1
 8009c88:	7808      	ldrb	r0, [r1, #0]
 8009c8a:	f7ff ff73 	bl	8009b74 <__hexdig_fun>
 8009c8e:	1e43      	subs	r3, r0, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b18      	cmp	r3, #24
 8009c94:	d82a      	bhi.n	8009cec <__gethex+0x14c>
 8009c96:	f1a0 0210 	sub.w	r2, r0, #16
 8009c9a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c9e:	f7ff ff69 	bl	8009b74 <__hexdig_fun>
 8009ca2:	1e43      	subs	r3, r0, #1
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b18      	cmp	r3, #24
 8009ca8:	d91b      	bls.n	8009ce2 <__gethex+0x142>
 8009caa:	f1b9 0f00 	cmp.w	r9, #0
 8009cae:	d000      	beq.n	8009cb2 <__gethex+0x112>
 8009cb0:	4252      	negs	r2, r2
 8009cb2:	4415      	add	r5, r2
 8009cb4:	f8cb 1000 	str.w	r1, [fp]
 8009cb8:	b1d4      	cbz	r4, 8009cf0 <__gethex+0x150>
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bf14      	ite	ne
 8009cc0:	2700      	movne	r7, #0
 8009cc2:	2706      	moveq	r7, #6
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	b00b      	add	sp, #44	; 0x2c
 8009cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	463e      	mov	r6, r7
 8009cce:	4625      	mov	r5, r4
 8009cd0:	2401      	movs	r4, #1
 8009cd2:	e7cc      	b.n	8009c6e <__gethex+0xce>
 8009cd4:	f04f 0900 	mov.w	r9, #0
 8009cd8:	1cb1      	adds	r1, r6, #2
 8009cda:	e7d5      	b.n	8009c88 <__gethex+0xe8>
 8009cdc:	f04f 0901 	mov.w	r9, #1
 8009ce0:	e7fa      	b.n	8009cd8 <__gethex+0x138>
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	fb03 0202 	mla	r2, r3, r2, r0
 8009ce8:	3a10      	subs	r2, #16
 8009cea:	e7d6      	b.n	8009c9a <__gethex+0xfa>
 8009cec:	4631      	mov	r1, r6
 8009cee:	e7e1      	b.n	8009cb4 <__gethex+0x114>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	1bf3      	subs	r3, r6, r7
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	2b07      	cmp	r3, #7
 8009cf8:	dc0a      	bgt.n	8009d10 <__gethex+0x170>
 8009cfa:	9802      	ldr	r0, [sp, #8]
 8009cfc:	f000 fae2 	bl	800a2c4 <_Balloc>
 8009d00:	4604      	mov	r4, r0
 8009d02:	b940      	cbnz	r0, 8009d16 <__gethex+0x176>
 8009d04:	4602      	mov	r2, r0
 8009d06:	21de      	movs	r1, #222	; 0xde
 8009d08:	4b5b      	ldr	r3, [pc, #364]	; (8009e78 <__gethex+0x2d8>)
 8009d0a:	485c      	ldr	r0, [pc, #368]	; (8009e7c <__gethex+0x2dc>)
 8009d0c:	f7fe fe82 	bl	8008a14 <__assert_func>
 8009d10:	3101      	adds	r1, #1
 8009d12:	105b      	asrs	r3, r3, #1
 8009d14:	e7ef      	b.n	8009cf6 <__gethex+0x156>
 8009d16:	f04f 0b00 	mov.w	fp, #0
 8009d1a:	f100 0914 	add.w	r9, r0, #20
 8009d1e:	f1ca 0301 	rsb	r3, sl, #1
 8009d22:	f8cd 9010 	str.w	r9, [sp, #16]
 8009d26:	f8cd b004 	str.w	fp, [sp, #4]
 8009d2a:	9308      	str	r3, [sp, #32]
 8009d2c:	42b7      	cmp	r7, r6
 8009d2e:	d33f      	bcc.n	8009db0 <__gethex+0x210>
 8009d30:	9f04      	ldr	r7, [sp, #16]
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	f847 3b04 	str.w	r3, [r7], #4
 8009d38:	eba7 0709 	sub.w	r7, r7, r9
 8009d3c:	10bf      	asrs	r7, r7, #2
 8009d3e:	6127      	str	r7, [r4, #16]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fbb1 	bl	800a4a8 <__hi0bits>
 8009d46:	017f      	lsls	r7, r7, #5
 8009d48:	f8d8 6000 	ldr.w	r6, [r8]
 8009d4c:	1a3f      	subs	r7, r7, r0
 8009d4e:	42b7      	cmp	r7, r6
 8009d50:	dd62      	ble.n	8009e18 <__gethex+0x278>
 8009d52:	1bbf      	subs	r7, r7, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 ff4b 	bl	800abf2 <__any_on>
 8009d5c:	4682      	mov	sl, r0
 8009d5e:	b1a8      	cbz	r0, 8009d8c <__gethex+0x1ec>
 8009d60:	f04f 0a01 	mov.w	sl, #1
 8009d64:	1e7b      	subs	r3, r7, #1
 8009d66:	1159      	asrs	r1, r3, #5
 8009d68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d6c:	f003 021f 	and.w	r2, r3, #31
 8009d70:	fa0a f202 	lsl.w	r2, sl, r2
 8009d74:	420a      	tst	r2, r1
 8009d76:	d009      	beq.n	8009d8c <__gethex+0x1ec>
 8009d78:	4553      	cmp	r3, sl
 8009d7a:	dd05      	ble.n	8009d88 <__gethex+0x1e8>
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	1eb9      	subs	r1, r7, #2
 8009d80:	f000 ff37 	bl	800abf2 <__any_on>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d144      	bne.n	8009e12 <__gethex+0x272>
 8009d88:	f04f 0a02 	mov.w	sl, #2
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f7ff fe9d 	bl	8009ace <rshift>
 8009d94:	443d      	add	r5, r7
 8009d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d9a:	42ab      	cmp	r3, r5
 8009d9c:	da4a      	bge.n	8009e34 <__gethex+0x294>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	9802      	ldr	r0, [sp, #8]
 8009da2:	f000 facf 	bl	800a344 <_Bfree>
 8009da6:	2300      	movs	r3, #0
 8009da8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009daa:	27a3      	movs	r7, #163	; 0xa3
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e789      	b.n	8009cc4 <__gethex+0x124>
 8009db0:	1e73      	subs	r3, r6, #1
 8009db2:	9a06      	ldr	r2, [sp, #24]
 8009db4:	9307      	str	r3, [sp, #28]
 8009db6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d019      	beq.n	8009df2 <__gethex+0x252>
 8009dbe:	f1bb 0f20 	cmp.w	fp, #32
 8009dc2:	d107      	bne.n	8009dd4 <__gethex+0x234>
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	9a01      	ldr	r2, [sp, #4]
 8009dc8:	f843 2b04 	str.w	r2, [r3], #4
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	469b      	mov	fp, r3
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009dd8:	f7ff fecc 	bl	8009b74 <__hexdig_fun>
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	f000 000f 	and.w	r0, r0, #15
 8009de2:	fa00 f00b 	lsl.w	r0, r0, fp
 8009de6:	4303      	orrs	r3, r0
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	f10b 0b04 	add.w	fp, fp, #4
 8009dee:	9b07      	ldr	r3, [sp, #28]
 8009df0:	e00d      	b.n	8009e0e <__gethex+0x26e>
 8009df2:	9a08      	ldr	r2, [sp, #32]
 8009df4:	1e73      	subs	r3, r6, #1
 8009df6:	4413      	add	r3, r2
 8009df8:	42bb      	cmp	r3, r7
 8009dfa:	d3e0      	bcc.n	8009dbe <__gethex+0x21e>
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	4652      	mov	r2, sl
 8009e00:	9903      	ldr	r1, [sp, #12]
 8009e02:	9309      	str	r3, [sp, #36]	; 0x24
 8009e04:	f001 fb13 	bl	800b42e <strncmp>
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d1d7      	bne.n	8009dbe <__gethex+0x21e>
 8009e0e:	461e      	mov	r6, r3
 8009e10:	e78c      	b.n	8009d2c <__gethex+0x18c>
 8009e12:	f04f 0a03 	mov.w	sl, #3
 8009e16:	e7b9      	b.n	8009d8c <__gethex+0x1ec>
 8009e18:	da09      	bge.n	8009e2e <__gethex+0x28e>
 8009e1a:	1bf7      	subs	r7, r6, r7
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	463a      	mov	r2, r7
 8009e20:	9802      	ldr	r0, [sp, #8]
 8009e22:	f000 fca7 	bl	800a774 <__lshift>
 8009e26:	4604      	mov	r4, r0
 8009e28:	1bed      	subs	r5, r5, r7
 8009e2a:	f100 0914 	add.w	r9, r0, #20
 8009e2e:	f04f 0a00 	mov.w	sl, #0
 8009e32:	e7b0      	b.n	8009d96 <__gethex+0x1f6>
 8009e34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009e38:	42a8      	cmp	r0, r5
 8009e3a:	dd72      	ble.n	8009f22 <__gethex+0x382>
 8009e3c:	1b45      	subs	r5, r0, r5
 8009e3e:	42ae      	cmp	r6, r5
 8009e40:	dc35      	bgt.n	8009eae <__gethex+0x30e>
 8009e42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d029      	beq.n	8009e9e <__gethex+0x2fe>
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d02b      	beq.n	8009ea6 <__gethex+0x306>
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d11c      	bne.n	8009e8c <__gethex+0x2ec>
 8009e52:	42ae      	cmp	r6, r5
 8009e54:	d11a      	bne.n	8009e8c <__gethex+0x2ec>
 8009e56:	2e01      	cmp	r6, #1
 8009e58:	d112      	bne.n	8009e80 <__gethex+0x2e0>
 8009e5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e5e:	9a05      	ldr	r2, [sp, #20]
 8009e60:	2762      	movs	r7, #98	; 0x62
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	2301      	movs	r3, #1
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	f8c9 3000 	str.w	r3, [r9]
 8009e6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e6e:	601c      	str	r4, [r3, #0]
 8009e70:	e728      	b.n	8009cc4 <__gethex+0x124>
 8009e72:	bf00      	nop
 8009e74:	0800bacc 	.word	0x0800bacc
 8009e78:	0800b9f1 	.word	0x0800b9f1
 8009e7c:	0800ba64 	.word	0x0800ba64
 8009e80:	4620      	mov	r0, r4
 8009e82:	1e71      	subs	r1, r6, #1
 8009e84:	f000 feb5 	bl	800abf2 <__any_on>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1e6      	bne.n	8009e5a <__gethex+0x2ba>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	9802      	ldr	r0, [sp, #8]
 8009e90:	f000 fa58 	bl	800a344 <_Bfree>
 8009e94:	2300      	movs	r3, #0
 8009e96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e98:	2750      	movs	r7, #80	; 0x50
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	e712      	b.n	8009cc4 <__gethex+0x124>
 8009e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1f3      	bne.n	8009e8c <__gethex+0x2ec>
 8009ea4:	e7d9      	b.n	8009e5a <__gethex+0x2ba>
 8009ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1d6      	bne.n	8009e5a <__gethex+0x2ba>
 8009eac:	e7ee      	b.n	8009e8c <__gethex+0x2ec>
 8009eae:	1e6f      	subs	r7, r5, #1
 8009eb0:	f1ba 0f00 	cmp.w	sl, #0
 8009eb4:	d132      	bne.n	8009f1c <__gethex+0x37c>
 8009eb6:	b127      	cbz	r7, 8009ec2 <__gethex+0x322>
 8009eb8:	4639      	mov	r1, r7
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 fe99 	bl	800abf2 <__any_on>
 8009ec0:	4682      	mov	sl, r0
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	117b      	asrs	r3, r7, #5
 8009ec6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009eca:	f007 071f 	and.w	r7, r7, #31
 8009ece:	fa01 f707 	lsl.w	r7, r1, r7
 8009ed2:	421f      	tst	r7, r3
 8009ed4:	f04f 0702 	mov.w	r7, #2
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4620      	mov	r0, r4
 8009edc:	bf18      	it	ne
 8009ede:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ee2:	1b76      	subs	r6, r6, r5
 8009ee4:	f7ff fdf3 	bl	8009ace <rshift>
 8009ee8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009eec:	f1ba 0f00 	cmp.w	sl, #0
 8009ef0:	d048      	beq.n	8009f84 <__gethex+0x3e4>
 8009ef2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d015      	beq.n	8009f26 <__gethex+0x386>
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d017      	beq.n	8009f2e <__gethex+0x38e>
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d109      	bne.n	8009f16 <__gethex+0x376>
 8009f02:	f01a 0f02 	tst.w	sl, #2
 8009f06:	d006      	beq.n	8009f16 <__gethex+0x376>
 8009f08:	f8d9 0000 	ldr.w	r0, [r9]
 8009f0c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009f10:	f01a 0f01 	tst.w	sl, #1
 8009f14:	d10e      	bne.n	8009f34 <__gethex+0x394>
 8009f16:	f047 0710 	orr.w	r7, r7, #16
 8009f1a:	e033      	b.n	8009f84 <__gethex+0x3e4>
 8009f1c:	f04f 0a01 	mov.w	sl, #1
 8009f20:	e7cf      	b.n	8009ec2 <__gethex+0x322>
 8009f22:	2701      	movs	r7, #1
 8009f24:	e7e2      	b.n	8009eec <__gethex+0x34c>
 8009f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f28:	f1c3 0301 	rsb	r3, r3, #1
 8009f2c:	9315      	str	r3, [sp, #84]	; 0x54
 8009f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0f0      	beq.n	8009f16 <__gethex+0x376>
 8009f34:	f04f 0c00 	mov.w	ip, #0
 8009f38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f3c:	f104 0314 	add.w	r3, r4, #20
 8009f40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f52:	d01c      	beq.n	8009f8e <__gethex+0x3ee>
 8009f54:	3201      	adds	r2, #1
 8009f56:	6002      	str	r2, [r0, #0]
 8009f58:	2f02      	cmp	r7, #2
 8009f5a:	f104 0314 	add.w	r3, r4, #20
 8009f5e:	d13d      	bne.n	8009fdc <__gethex+0x43c>
 8009f60:	f8d8 2000 	ldr.w	r2, [r8]
 8009f64:	3a01      	subs	r2, #1
 8009f66:	42b2      	cmp	r2, r6
 8009f68:	d10a      	bne.n	8009f80 <__gethex+0x3e0>
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	1171      	asrs	r1, r6, #5
 8009f6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f72:	f006 061f 	and.w	r6, r6, #31
 8009f76:	fa02 f606 	lsl.w	r6, r2, r6
 8009f7a:	421e      	tst	r6, r3
 8009f7c:	bf18      	it	ne
 8009f7e:	4617      	movne	r7, r2
 8009f80:	f047 0720 	orr.w	r7, r7, #32
 8009f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f86:	601c      	str	r4, [r3, #0]
 8009f88:	9b05      	ldr	r3, [sp, #20]
 8009f8a:	601d      	str	r5, [r3, #0]
 8009f8c:	e69a      	b.n	8009cc4 <__gethex+0x124>
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f94:	d8d8      	bhi.n	8009f48 <__gethex+0x3a8>
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	459b      	cmp	fp, r3
 8009f9a:	db17      	blt.n	8009fcc <__gethex+0x42c>
 8009f9c:	6861      	ldr	r1, [r4, #4]
 8009f9e:	9802      	ldr	r0, [sp, #8]
 8009fa0:	3101      	adds	r1, #1
 8009fa2:	f000 f98f 	bl	800a2c4 <_Balloc>
 8009fa6:	4681      	mov	r9, r0
 8009fa8:	b918      	cbnz	r0, 8009fb2 <__gethex+0x412>
 8009faa:	4602      	mov	r2, r0
 8009fac:	2184      	movs	r1, #132	; 0x84
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <__gethex+0x474>)
 8009fb0:	e6ab      	b.n	8009d0a <__gethex+0x16a>
 8009fb2:	6922      	ldr	r2, [r4, #16]
 8009fb4:	f104 010c 	add.w	r1, r4, #12
 8009fb8:	3202      	adds	r2, #2
 8009fba:	0092      	lsls	r2, r2, #2
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	f7fc fecb 	bl	8006d58 <memcpy>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	9802      	ldr	r0, [sp, #8]
 8009fc6:	f000 f9bd 	bl	800a344 <_Bfree>
 8009fca:	464c      	mov	r4, r9
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	6122      	str	r2, [r4, #16]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fd8:	615a      	str	r2, [r3, #20]
 8009fda:	e7bd      	b.n	8009f58 <__gethex+0x3b8>
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	455a      	cmp	r2, fp
 8009fe0:	dd0b      	ble.n	8009ffa <__gethex+0x45a>
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7ff fd72 	bl	8009ace <rshift>
 8009fea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fee:	3501      	adds	r5, #1
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	f6ff aed4 	blt.w	8009d9e <__gethex+0x1fe>
 8009ff6:	2701      	movs	r7, #1
 8009ff8:	e7c2      	b.n	8009f80 <__gethex+0x3e0>
 8009ffa:	f016 061f 	ands.w	r6, r6, #31
 8009ffe:	d0fa      	beq.n	8009ff6 <__gethex+0x456>
 800a000:	4453      	add	r3, sl
 800a002:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a006:	f000 fa4f 	bl	800a4a8 <__hi0bits>
 800a00a:	f1c6 0620 	rsb	r6, r6, #32
 800a00e:	42b0      	cmp	r0, r6
 800a010:	dbe7      	blt.n	8009fe2 <__gethex+0x442>
 800a012:	e7f0      	b.n	8009ff6 <__gethex+0x456>
 800a014:	0800b9f1 	.word	0x0800b9f1

0800a018 <L_shift>:
 800a018:	f1c2 0208 	rsb	r2, r2, #8
 800a01c:	0092      	lsls	r2, r2, #2
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	f1c2 0620 	rsb	r6, r2, #32
 800a024:	6843      	ldr	r3, [r0, #4]
 800a026:	6804      	ldr	r4, [r0, #0]
 800a028:	fa03 f506 	lsl.w	r5, r3, r6
 800a02c:	432c      	orrs	r4, r5
 800a02e:	40d3      	lsrs	r3, r2
 800a030:	6004      	str	r4, [r0, #0]
 800a032:	f840 3f04 	str.w	r3, [r0, #4]!
 800a036:	4288      	cmp	r0, r1
 800a038:	d3f4      	bcc.n	800a024 <L_shift+0xc>
 800a03a:	bd70      	pop	{r4, r5, r6, pc}

0800a03c <__match>:
 800a03c:	b530      	push	{r4, r5, lr}
 800a03e:	6803      	ldr	r3, [r0, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a046:	b914      	cbnz	r4, 800a04e <__match+0x12>
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	2001      	movs	r0, #1
 800a04c:	bd30      	pop	{r4, r5, pc}
 800a04e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a052:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a056:	2d19      	cmp	r5, #25
 800a058:	bf98      	it	ls
 800a05a:	3220      	addls	r2, #32
 800a05c:	42a2      	cmp	r2, r4
 800a05e:	d0f0      	beq.n	800a042 <__match+0x6>
 800a060:	2000      	movs	r0, #0
 800a062:	e7f3      	b.n	800a04c <__match+0x10>

0800a064 <__hexnan>:
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	2500      	movs	r5, #0
 800a06a:	680b      	ldr	r3, [r1, #0]
 800a06c:	4682      	mov	sl, r0
 800a06e:	115e      	asrs	r6, r3, #5
 800a070:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a074:	f013 031f 	ands.w	r3, r3, #31
 800a078:	bf18      	it	ne
 800a07a:	3604      	addne	r6, #4
 800a07c:	1f37      	subs	r7, r6, #4
 800a07e:	46b9      	mov	r9, r7
 800a080:	463c      	mov	r4, r7
 800a082:	46ab      	mov	fp, r5
 800a084:	b087      	sub	sp, #28
 800a086:	4690      	mov	r8, r2
 800a088:	6802      	ldr	r2, [r0, #0]
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a090:	9502      	str	r5, [sp, #8]
 800a092:	7851      	ldrb	r1, [r2, #1]
 800a094:	1c53      	adds	r3, r2, #1
 800a096:	9303      	str	r3, [sp, #12]
 800a098:	b341      	cbz	r1, 800a0ec <__hexnan+0x88>
 800a09a:	4608      	mov	r0, r1
 800a09c:	9205      	str	r2, [sp, #20]
 800a09e:	9104      	str	r1, [sp, #16]
 800a0a0:	f7ff fd68 	bl	8009b74 <__hexdig_fun>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d14f      	bne.n	800a148 <__hexnan+0xe4>
 800a0a8:	9904      	ldr	r1, [sp, #16]
 800a0aa:	9a05      	ldr	r2, [sp, #20]
 800a0ac:	2920      	cmp	r1, #32
 800a0ae:	d818      	bhi.n	800a0e2 <__hexnan+0x7e>
 800a0b0:	9b02      	ldr	r3, [sp, #8]
 800a0b2:	459b      	cmp	fp, r3
 800a0b4:	dd13      	ble.n	800a0de <__hexnan+0x7a>
 800a0b6:	454c      	cmp	r4, r9
 800a0b8:	d206      	bcs.n	800a0c8 <__hexnan+0x64>
 800a0ba:	2d07      	cmp	r5, #7
 800a0bc:	dc04      	bgt.n	800a0c8 <__hexnan+0x64>
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff ffa8 	bl	800a018 <L_shift>
 800a0c8:	4544      	cmp	r4, r8
 800a0ca:	d950      	bls.n	800a16e <__hexnan+0x10a>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f1a4 0904 	sub.w	r9, r4, #4
 800a0d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0d6:	461d      	mov	r5, r3
 800a0d8:	464c      	mov	r4, r9
 800a0da:	f8cd b008 	str.w	fp, [sp, #8]
 800a0de:	9a03      	ldr	r2, [sp, #12]
 800a0e0:	e7d7      	b.n	800a092 <__hexnan+0x2e>
 800a0e2:	2929      	cmp	r1, #41	; 0x29
 800a0e4:	d156      	bne.n	800a194 <__hexnan+0x130>
 800a0e6:	3202      	adds	r2, #2
 800a0e8:	f8ca 2000 	str.w	r2, [sl]
 800a0ec:	f1bb 0f00 	cmp.w	fp, #0
 800a0f0:	d050      	beq.n	800a194 <__hexnan+0x130>
 800a0f2:	454c      	cmp	r4, r9
 800a0f4:	d206      	bcs.n	800a104 <__hexnan+0xa0>
 800a0f6:	2d07      	cmp	r5, #7
 800a0f8:	dc04      	bgt.n	800a104 <__hexnan+0xa0>
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7ff ff8a 	bl	800a018 <L_shift>
 800a104:	4544      	cmp	r4, r8
 800a106:	d934      	bls.n	800a172 <__hexnan+0x10e>
 800a108:	4623      	mov	r3, r4
 800a10a:	f1a8 0204 	sub.w	r2, r8, #4
 800a10e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a112:	429f      	cmp	r7, r3
 800a114:	f842 1f04 	str.w	r1, [r2, #4]!
 800a118:	d2f9      	bcs.n	800a10e <__hexnan+0xaa>
 800a11a:	1b3b      	subs	r3, r7, r4
 800a11c:	f023 0303 	bic.w	r3, r3, #3
 800a120:	3304      	adds	r3, #4
 800a122:	3401      	adds	r4, #1
 800a124:	3e03      	subs	r6, #3
 800a126:	42b4      	cmp	r4, r6
 800a128:	bf88      	it	hi
 800a12a:	2304      	movhi	r3, #4
 800a12c:	2200      	movs	r2, #0
 800a12e:	4443      	add	r3, r8
 800a130:	f843 2b04 	str.w	r2, [r3], #4
 800a134:	429f      	cmp	r7, r3
 800a136:	d2fb      	bcs.n	800a130 <__hexnan+0xcc>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	b91b      	cbnz	r3, 800a144 <__hexnan+0xe0>
 800a13c:	4547      	cmp	r7, r8
 800a13e:	d127      	bne.n	800a190 <__hexnan+0x12c>
 800a140:	2301      	movs	r3, #1
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	2005      	movs	r0, #5
 800a146:	e026      	b.n	800a196 <__hexnan+0x132>
 800a148:	3501      	adds	r5, #1
 800a14a:	2d08      	cmp	r5, #8
 800a14c:	f10b 0b01 	add.w	fp, fp, #1
 800a150:	dd06      	ble.n	800a160 <__hexnan+0xfc>
 800a152:	4544      	cmp	r4, r8
 800a154:	d9c3      	bls.n	800a0de <__hexnan+0x7a>
 800a156:	2300      	movs	r3, #0
 800a158:	2501      	movs	r5, #1
 800a15a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a15e:	3c04      	subs	r4, #4
 800a160:	6822      	ldr	r2, [r4, #0]
 800a162:	f000 000f 	and.w	r0, r0, #15
 800a166:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a16a:	6022      	str	r2, [r4, #0]
 800a16c:	e7b7      	b.n	800a0de <__hexnan+0x7a>
 800a16e:	2508      	movs	r5, #8
 800a170:	e7b5      	b.n	800a0de <__hexnan+0x7a>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0df      	beq.n	800a138 <__hexnan+0xd4>
 800a178:	f04f 32ff 	mov.w	r2, #4294967295
 800a17c:	f1c3 0320 	rsb	r3, r3, #32
 800a180:	fa22 f303 	lsr.w	r3, r2, r3
 800a184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a188:	401a      	ands	r2, r3
 800a18a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a18e:	e7d3      	b.n	800a138 <__hexnan+0xd4>
 800a190:	3f04      	subs	r7, #4
 800a192:	e7d1      	b.n	800a138 <__hexnan+0xd4>
 800a194:	2004      	movs	r0, #4
 800a196:	b007      	add	sp, #28
 800a198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a19c <_localeconv_r>:
 800a19c:	4800      	ldr	r0, [pc, #0]	; (800a1a0 <_localeconv_r+0x4>)
 800a19e:	4770      	bx	lr
 800a1a0:	2000065c 	.word	0x2000065c

0800a1a4 <__retarget_lock_init_recursive>:
 800a1a4:	4770      	bx	lr

0800a1a6 <__retarget_lock_acquire_recursive>:
 800a1a6:	4770      	bx	lr

0800a1a8 <__retarget_lock_release_recursive>:
 800a1a8:	4770      	bx	lr

0800a1aa <__swhatbuf_r>:
 800a1aa:	b570      	push	{r4, r5, r6, lr}
 800a1ac:	460e      	mov	r6, r1
 800a1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b2:	4614      	mov	r4, r2
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	461d      	mov	r5, r3
 800a1b8:	b096      	sub	sp, #88	; 0x58
 800a1ba:	da08      	bge.n	800a1ce <__swhatbuf_r+0x24>
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1c2:	602a      	str	r2, [r5, #0]
 800a1c4:	061a      	lsls	r2, r3, #24
 800a1c6:	d410      	bmi.n	800a1ea <__swhatbuf_r+0x40>
 800a1c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1cc:	e00e      	b.n	800a1ec <__swhatbuf_r+0x42>
 800a1ce:	466a      	mov	r2, sp
 800a1d0:	f001 f978 	bl	800b4c4 <_fstat_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	dbf1      	blt.n	800a1bc <__swhatbuf_r+0x12>
 800a1d8:	9a01      	ldr	r2, [sp, #4]
 800a1da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1e2:	425a      	negs	r2, r3
 800a1e4:	415a      	adcs	r2, r3
 800a1e6:	602a      	str	r2, [r5, #0]
 800a1e8:	e7ee      	b.n	800a1c8 <__swhatbuf_r+0x1e>
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	b016      	add	sp, #88	; 0x58
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}

0800a1f4 <__smakebuf_r>:
 800a1f4:	898b      	ldrh	r3, [r1, #12]
 800a1f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1f8:	079d      	lsls	r5, r3, #30
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	d507      	bpl.n	800a210 <__smakebuf_r+0x1c>
 800a200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	2301      	movs	r3, #1
 800a20a:	6163      	str	r3, [r4, #20]
 800a20c:	b002      	add	sp, #8
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	466a      	mov	r2, sp
 800a212:	ab01      	add	r3, sp, #4
 800a214:	f7ff ffc9 	bl	800a1aa <__swhatbuf_r>
 800a218:	9900      	ldr	r1, [sp, #0]
 800a21a:	4605      	mov	r5, r0
 800a21c:	4630      	mov	r0, r6
 800a21e:	f000 fd85 	bl	800ad2c <_malloc_r>
 800a222:	b948      	cbnz	r0, 800a238 <__smakebuf_r+0x44>
 800a224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a228:	059a      	lsls	r2, r3, #22
 800a22a:	d4ef      	bmi.n	800a20c <__smakebuf_r+0x18>
 800a22c:	f023 0303 	bic.w	r3, r3, #3
 800a230:	f043 0302 	orr.w	r3, r3, #2
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	e7e3      	b.n	800a200 <__smakebuf_r+0xc>
 800a238:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <__smakebuf_r+0x7c>)
 800a23a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	6020      	str	r0, [r4, #0]
 800a240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	9b00      	ldr	r3, [sp, #0]
 800a248:	6120      	str	r0, [r4, #16]
 800a24a:	6163      	str	r3, [r4, #20]
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	b15b      	cbz	r3, 800a268 <__smakebuf_r+0x74>
 800a250:	4630      	mov	r0, r6
 800a252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a256:	f001 f947 	bl	800b4e8 <_isatty_r>
 800a25a:	b128      	cbz	r0, 800a268 <__smakebuf_r+0x74>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	f043 0301 	orr.w	r3, r3, #1
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	89a0      	ldrh	r0, [r4, #12]
 800a26a:	4305      	orrs	r5, r0
 800a26c:	81a5      	strh	r5, [r4, #12]
 800a26e:	e7cd      	b.n	800a20c <__smakebuf_r+0x18>
 800a270:	08009909 	.word	0x08009909

0800a274 <malloc>:
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <malloc+0xc>)
 800a276:	4601      	mov	r1, r0
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	f000 bd57 	b.w	800ad2c <_malloc_r>
 800a27e:	bf00      	nop
 800a280:	20000504 	.word	0x20000504

0800a284 <__ascii_mbtowc>:
 800a284:	b082      	sub	sp, #8
 800a286:	b901      	cbnz	r1, 800a28a <__ascii_mbtowc+0x6>
 800a288:	a901      	add	r1, sp, #4
 800a28a:	b142      	cbz	r2, 800a29e <__ascii_mbtowc+0x1a>
 800a28c:	b14b      	cbz	r3, 800a2a2 <__ascii_mbtowc+0x1e>
 800a28e:	7813      	ldrb	r3, [r2, #0]
 800a290:	600b      	str	r3, [r1, #0]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	1e10      	subs	r0, r2, #0
 800a296:	bf18      	it	ne
 800a298:	2001      	movne	r0, #1
 800a29a:	b002      	add	sp, #8
 800a29c:	4770      	bx	lr
 800a29e:	4610      	mov	r0, r2
 800a2a0:	e7fb      	b.n	800a29a <__ascii_mbtowc+0x16>
 800a2a2:	f06f 0001 	mvn.w	r0, #1
 800a2a6:	e7f8      	b.n	800a29a <__ascii_mbtowc+0x16>

0800a2a8 <memchr>:
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	b2c9      	uxtb	r1, r1
 800a2ae:	4402      	add	r2, r0
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	d101      	bne.n	800a2ba <memchr+0x12>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e003      	b.n	800a2c2 <memchr+0x1a>
 800a2ba:	7804      	ldrb	r4, [r0, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	428c      	cmp	r4, r1
 800a2c0:	d1f6      	bne.n	800a2b0 <memchr+0x8>
 800a2c2:	bd10      	pop	{r4, pc}

0800a2c4 <_Balloc>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	460d      	mov	r5, r1
 800a2cc:	b976      	cbnz	r6, 800a2ec <_Balloc+0x28>
 800a2ce:	2010      	movs	r0, #16
 800a2d0:	f7ff ffd0 	bl	800a274 <malloc>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	6260      	str	r0, [r4, #36]	; 0x24
 800a2d8:	b920      	cbnz	r0, 800a2e4 <_Balloc+0x20>
 800a2da:	2166      	movs	r1, #102	; 0x66
 800a2dc:	4b17      	ldr	r3, [pc, #92]	; (800a33c <_Balloc+0x78>)
 800a2de:	4818      	ldr	r0, [pc, #96]	; (800a340 <_Balloc+0x7c>)
 800a2e0:	f7fe fb98 	bl	8008a14 <__assert_func>
 800a2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2e8:	6006      	str	r6, [r0, #0]
 800a2ea:	60c6      	str	r6, [r0, #12]
 800a2ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2ee:	68f3      	ldr	r3, [r6, #12]
 800a2f0:	b183      	cbz	r3, 800a314 <_Balloc+0x50>
 800a2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2fa:	b9b8      	cbnz	r0, 800a32c <_Balloc+0x68>
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a302:	1d72      	adds	r2, r6, #5
 800a304:	4620      	mov	r0, r4
 800a306:	0092      	lsls	r2, r2, #2
 800a308:	f000 fc94 	bl	800ac34 <_calloc_r>
 800a30c:	b160      	cbz	r0, 800a328 <_Balloc+0x64>
 800a30e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a312:	e00e      	b.n	800a332 <_Balloc+0x6e>
 800a314:	2221      	movs	r2, #33	; 0x21
 800a316:	2104      	movs	r1, #4
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 fc8b 	bl	800ac34 <_calloc_r>
 800a31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a320:	60f0      	str	r0, [r6, #12]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e4      	bne.n	800a2f2 <_Balloc+0x2e>
 800a328:	2000      	movs	r0, #0
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	6802      	ldr	r2, [r0, #0]
 800a32e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a332:	2300      	movs	r3, #0
 800a334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a338:	e7f7      	b.n	800a32a <_Balloc+0x66>
 800a33a:	bf00      	nop
 800a33c:	0800b7d8 	.word	0x0800b7d8
 800a340:	0800bae0 	.word	0x0800bae0

0800a344 <_Bfree>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a348:	4605      	mov	r5, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	b976      	cbnz	r6, 800a36c <_Bfree+0x28>
 800a34e:	2010      	movs	r0, #16
 800a350:	f7ff ff90 	bl	800a274 <malloc>
 800a354:	4602      	mov	r2, r0
 800a356:	6268      	str	r0, [r5, #36]	; 0x24
 800a358:	b920      	cbnz	r0, 800a364 <_Bfree+0x20>
 800a35a:	218a      	movs	r1, #138	; 0x8a
 800a35c:	4b08      	ldr	r3, [pc, #32]	; (800a380 <_Bfree+0x3c>)
 800a35e:	4809      	ldr	r0, [pc, #36]	; (800a384 <_Bfree+0x40>)
 800a360:	f7fe fb58 	bl	8008a14 <__assert_func>
 800a364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a368:	6006      	str	r6, [r0, #0]
 800a36a:	60c6      	str	r6, [r0, #12]
 800a36c:	b13c      	cbz	r4, 800a37e <_Bfree+0x3a>
 800a36e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a370:	6862      	ldr	r2, [r4, #4]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a378:	6021      	str	r1, [r4, #0]
 800a37a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
 800a380:	0800b7d8 	.word	0x0800b7d8
 800a384:	0800bae0 	.word	0x0800bae0

0800a388 <__multadd>:
 800a388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38c:	4607      	mov	r7, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	461e      	mov	r6, r3
 800a392:	2000      	movs	r0, #0
 800a394:	690d      	ldr	r5, [r1, #16]
 800a396:	f101 0c14 	add.w	ip, r1, #20
 800a39a:	f8dc 3000 	ldr.w	r3, [ip]
 800a39e:	3001      	adds	r0, #1
 800a3a0:	b299      	uxth	r1, r3
 800a3a2:	fb02 6101 	mla	r1, r2, r1, r6
 800a3a6:	0c1e      	lsrs	r6, r3, #16
 800a3a8:	0c0b      	lsrs	r3, r1, #16
 800a3aa:	fb02 3306 	mla	r3, r2, r6, r3
 800a3ae:	b289      	uxth	r1, r1
 800a3b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3b4:	4285      	cmp	r5, r0
 800a3b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a3be:	dcec      	bgt.n	800a39a <__multadd+0x12>
 800a3c0:	b30e      	cbz	r6, 800a406 <__multadd+0x7e>
 800a3c2:	68a3      	ldr	r3, [r4, #8]
 800a3c4:	42ab      	cmp	r3, r5
 800a3c6:	dc19      	bgt.n	800a3fc <__multadd+0x74>
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	3101      	adds	r1, #1
 800a3ce:	f7ff ff79 	bl	800a2c4 <_Balloc>
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	b928      	cbnz	r0, 800a3e2 <__multadd+0x5a>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	21b5      	movs	r1, #181	; 0xb5
 800a3da:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <__multadd+0x84>)
 800a3dc:	480c      	ldr	r0, [pc, #48]	; (800a410 <__multadd+0x88>)
 800a3de:	f7fe fb19 	bl	8008a14 <__assert_func>
 800a3e2:	6922      	ldr	r2, [r4, #16]
 800a3e4:	f104 010c 	add.w	r1, r4, #12
 800a3e8:	3202      	adds	r2, #2
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	300c      	adds	r0, #12
 800a3ee:	f7fc fcb3 	bl	8006d58 <memcpy>
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	f7ff ffa5 	bl	800a344 <_Bfree>
 800a3fa:	4644      	mov	r4, r8
 800a3fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a400:	3501      	adds	r5, #1
 800a402:	615e      	str	r6, [r3, #20]
 800a404:	6125      	str	r5, [r4, #16]
 800a406:	4620      	mov	r0, r4
 800a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40c:	0800b9f1 	.word	0x0800b9f1
 800a410:	0800bae0 	.word	0x0800bae0

0800a414 <__s2b>:
 800a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a418:	4615      	mov	r5, r2
 800a41a:	2209      	movs	r2, #9
 800a41c:	461f      	mov	r7, r3
 800a41e:	3308      	adds	r3, #8
 800a420:	460c      	mov	r4, r1
 800a422:	fb93 f3f2 	sdiv	r3, r3, r2
 800a426:	4606      	mov	r6, r0
 800a428:	2201      	movs	r2, #1
 800a42a:	2100      	movs	r1, #0
 800a42c:	429a      	cmp	r2, r3
 800a42e:	db09      	blt.n	800a444 <__s2b+0x30>
 800a430:	4630      	mov	r0, r6
 800a432:	f7ff ff47 	bl	800a2c4 <_Balloc>
 800a436:	b940      	cbnz	r0, 800a44a <__s2b+0x36>
 800a438:	4602      	mov	r2, r0
 800a43a:	21ce      	movs	r1, #206	; 0xce
 800a43c:	4b18      	ldr	r3, [pc, #96]	; (800a4a0 <__s2b+0x8c>)
 800a43e:	4819      	ldr	r0, [pc, #100]	; (800a4a4 <__s2b+0x90>)
 800a440:	f7fe fae8 	bl	8008a14 <__assert_func>
 800a444:	0052      	lsls	r2, r2, #1
 800a446:	3101      	adds	r1, #1
 800a448:	e7f0      	b.n	800a42c <__s2b+0x18>
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	2d09      	cmp	r5, #9
 800a44e:	6143      	str	r3, [r0, #20]
 800a450:	f04f 0301 	mov.w	r3, #1
 800a454:	6103      	str	r3, [r0, #16]
 800a456:	dd16      	ble.n	800a486 <__s2b+0x72>
 800a458:	f104 0909 	add.w	r9, r4, #9
 800a45c:	46c8      	mov	r8, r9
 800a45e:	442c      	add	r4, r5
 800a460:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a464:	4601      	mov	r1, r0
 800a466:	220a      	movs	r2, #10
 800a468:	4630      	mov	r0, r6
 800a46a:	3b30      	subs	r3, #48	; 0x30
 800a46c:	f7ff ff8c 	bl	800a388 <__multadd>
 800a470:	45a0      	cmp	r8, r4
 800a472:	d1f5      	bne.n	800a460 <__s2b+0x4c>
 800a474:	f1a5 0408 	sub.w	r4, r5, #8
 800a478:	444c      	add	r4, r9
 800a47a:	1b2d      	subs	r5, r5, r4
 800a47c:	1963      	adds	r3, r4, r5
 800a47e:	42bb      	cmp	r3, r7
 800a480:	db04      	blt.n	800a48c <__s2b+0x78>
 800a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a486:	2509      	movs	r5, #9
 800a488:	340a      	adds	r4, #10
 800a48a:	e7f6      	b.n	800a47a <__s2b+0x66>
 800a48c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a490:	4601      	mov	r1, r0
 800a492:	220a      	movs	r2, #10
 800a494:	4630      	mov	r0, r6
 800a496:	3b30      	subs	r3, #48	; 0x30
 800a498:	f7ff ff76 	bl	800a388 <__multadd>
 800a49c:	e7ee      	b.n	800a47c <__s2b+0x68>
 800a49e:	bf00      	nop
 800a4a0:	0800b9f1 	.word	0x0800b9f1
 800a4a4:	0800bae0 	.word	0x0800bae0

0800a4a8 <__hi0bits>:
 800a4a8:	0c02      	lsrs	r2, r0, #16
 800a4aa:	0412      	lsls	r2, r2, #16
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	b9ca      	cbnz	r2, 800a4e4 <__hi0bits+0x3c>
 800a4b0:	0403      	lsls	r3, r0, #16
 800a4b2:	2010      	movs	r0, #16
 800a4b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4b8:	bf04      	itt	eq
 800a4ba:	021b      	lsleq	r3, r3, #8
 800a4bc:	3008      	addeq	r0, #8
 800a4be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4c2:	bf04      	itt	eq
 800a4c4:	011b      	lsleq	r3, r3, #4
 800a4c6:	3004      	addeq	r0, #4
 800a4c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4cc:	bf04      	itt	eq
 800a4ce:	009b      	lsleq	r3, r3, #2
 800a4d0:	3002      	addeq	r0, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	db05      	blt.n	800a4e2 <__hi0bits+0x3a>
 800a4d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a4da:	f100 0001 	add.w	r0, r0, #1
 800a4de:	bf08      	it	eq
 800a4e0:	2020      	moveq	r0, #32
 800a4e2:	4770      	bx	lr
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e7e5      	b.n	800a4b4 <__hi0bits+0xc>

0800a4e8 <__lo0bits>:
 800a4e8:	6803      	ldr	r3, [r0, #0]
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	f013 0007 	ands.w	r0, r3, #7
 800a4f0:	d00b      	beq.n	800a50a <__lo0bits+0x22>
 800a4f2:	07d9      	lsls	r1, r3, #31
 800a4f4:	d421      	bmi.n	800a53a <__lo0bits+0x52>
 800a4f6:	0798      	lsls	r0, r3, #30
 800a4f8:	bf49      	itett	mi
 800a4fa:	085b      	lsrmi	r3, r3, #1
 800a4fc:	089b      	lsrpl	r3, r3, #2
 800a4fe:	2001      	movmi	r0, #1
 800a500:	6013      	strmi	r3, [r2, #0]
 800a502:	bf5c      	itt	pl
 800a504:	2002      	movpl	r0, #2
 800a506:	6013      	strpl	r3, [r2, #0]
 800a508:	4770      	bx	lr
 800a50a:	b299      	uxth	r1, r3
 800a50c:	b909      	cbnz	r1, 800a512 <__lo0bits+0x2a>
 800a50e:	2010      	movs	r0, #16
 800a510:	0c1b      	lsrs	r3, r3, #16
 800a512:	b2d9      	uxtb	r1, r3
 800a514:	b909      	cbnz	r1, 800a51a <__lo0bits+0x32>
 800a516:	3008      	adds	r0, #8
 800a518:	0a1b      	lsrs	r3, r3, #8
 800a51a:	0719      	lsls	r1, r3, #28
 800a51c:	bf04      	itt	eq
 800a51e:	091b      	lsreq	r3, r3, #4
 800a520:	3004      	addeq	r0, #4
 800a522:	0799      	lsls	r1, r3, #30
 800a524:	bf04      	itt	eq
 800a526:	089b      	lsreq	r3, r3, #2
 800a528:	3002      	addeq	r0, #2
 800a52a:	07d9      	lsls	r1, r3, #31
 800a52c:	d403      	bmi.n	800a536 <__lo0bits+0x4e>
 800a52e:	085b      	lsrs	r3, r3, #1
 800a530:	f100 0001 	add.w	r0, r0, #1
 800a534:	d003      	beq.n	800a53e <__lo0bits+0x56>
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	4770      	bx	lr
 800a53a:	2000      	movs	r0, #0
 800a53c:	4770      	bx	lr
 800a53e:	2020      	movs	r0, #32
 800a540:	4770      	bx	lr
	...

0800a544 <__i2b>:
 800a544:	b510      	push	{r4, lr}
 800a546:	460c      	mov	r4, r1
 800a548:	2101      	movs	r1, #1
 800a54a:	f7ff febb 	bl	800a2c4 <_Balloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	b928      	cbnz	r0, 800a55e <__i2b+0x1a>
 800a552:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a556:	4b04      	ldr	r3, [pc, #16]	; (800a568 <__i2b+0x24>)
 800a558:	4804      	ldr	r0, [pc, #16]	; (800a56c <__i2b+0x28>)
 800a55a:	f7fe fa5b 	bl	8008a14 <__assert_func>
 800a55e:	2301      	movs	r3, #1
 800a560:	6144      	str	r4, [r0, #20]
 800a562:	6103      	str	r3, [r0, #16]
 800a564:	bd10      	pop	{r4, pc}
 800a566:	bf00      	nop
 800a568:	0800b9f1 	.word	0x0800b9f1
 800a56c:	0800bae0 	.word	0x0800bae0

0800a570 <__multiply>:
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	4691      	mov	r9, r2
 800a576:	690a      	ldr	r2, [r1, #16]
 800a578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a57c:	460c      	mov	r4, r1
 800a57e:	429a      	cmp	r2, r3
 800a580:	bfbe      	ittt	lt
 800a582:	460b      	movlt	r3, r1
 800a584:	464c      	movlt	r4, r9
 800a586:	4699      	movlt	r9, r3
 800a588:	6927      	ldr	r7, [r4, #16]
 800a58a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	6861      	ldr	r1, [r4, #4]
 800a592:	eb07 060a 	add.w	r6, r7, sl
 800a596:	42b3      	cmp	r3, r6
 800a598:	b085      	sub	sp, #20
 800a59a:	bfb8      	it	lt
 800a59c:	3101      	addlt	r1, #1
 800a59e:	f7ff fe91 	bl	800a2c4 <_Balloc>
 800a5a2:	b930      	cbnz	r0, 800a5b2 <__multiply+0x42>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	f240 115d 	movw	r1, #349	; 0x15d
 800a5aa:	4b43      	ldr	r3, [pc, #268]	; (800a6b8 <__multiply+0x148>)
 800a5ac:	4843      	ldr	r0, [pc, #268]	; (800a6bc <__multiply+0x14c>)
 800a5ae:	f7fe fa31 	bl	8008a14 <__assert_func>
 800a5b2:	f100 0514 	add.w	r5, r0, #20
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5be:	4543      	cmp	r3, r8
 800a5c0:	d321      	bcc.n	800a606 <__multiply+0x96>
 800a5c2:	f104 0314 	add.w	r3, r4, #20
 800a5c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ca:	f109 0314 	add.w	r3, r9, #20
 800a5ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5d2:	9202      	str	r2, [sp, #8]
 800a5d4:	1b3a      	subs	r2, r7, r4
 800a5d6:	3a15      	subs	r2, #21
 800a5d8:	f022 0203 	bic.w	r2, r2, #3
 800a5dc:	3204      	adds	r2, #4
 800a5de:	f104 0115 	add.w	r1, r4, #21
 800a5e2:	428f      	cmp	r7, r1
 800a5e4:	bf38      	it	cc
 800a5e6:	2204      	movcc	r2, #4
 800a5e8:	9201      	str	r2, [sp, #4]
 800a5ea:	9a02      	ldr	r2, [sp, #8]
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d80c      	bhi.n	800a60c <__multiply+0x9c>
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	dd03      	ble.n	800a5fe <__multiply+0x8e>
 800a5f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d059      	beq.n	800a6b2 <__multiply+0x142>
 800a5fe:	6106      	str	r6, [r0, #16]
 800a600:	b005      	add	sp, #20
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	f843 2b04 	str.w	r2, [r3], #4
 800a60a:	e7d8      	b.n	800a5be <__multiply+0x4e>
 800a60c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a610:	f1ba 0f00 	cmp.w	sl, #0
 800a614:	d023      	beq.n	800a65e <__multiply+0xee>
 800a616:	46a9      	mov	r9, r5
 800a618:	f04f 0c00 	mov.w	ip, #0
 800a61c:	f104 0e14 	add.w	lr, r4, #20
 800a620:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a624:	f8d9 1000 	ldr.w	r1, [r9]
 800a628:	fa1f fb82 	uxth.w	fp, r2
 800a62c:	b289      	uxth	r1, r1
 800a62e:	fb0a 110b 	mla	r1, sl, fp, r1
 800a632:	4461      	add	r1, ip
 800a634:	f8d9 c000 	ldr.w	ip, [r9]
 800a638:	0c12      	lsrs	r2, r2, #16
 800a63a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a63e:	fb0a c202 	mla	r2, sl, r2, ip
 800a642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a646:	b289      	uxth	r1, r1
 800a648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a64c:	4577      	cmp	r7, lr
 800a64e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a652:	f849 1b04 	str.w	r1, [r9], #4
 800a656:	d8e3      	bhi.n	800a620 <__multiply+0xb0>
 800a658:	9a01      	ldr	r2, [sp, #4]
 800a65a:	f845 c002 	str.w	ip, [r5, r2]
 800a65e:	9a03      	ldr	r2, [sp, #12]
 800a660:	3304      	adds	r3, #4
 800a662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a666:	f1b9 0f00 	cmp.w	r9, #0
 800a66a:	d020      	beq.n	800a6ae <__multiply+0x13e>
 800a66c:	46ae      	mov	lr, r5
 800a66e:	f04f 0a00 	mov.w	sl, #0
 800a672:	6829      	ldr	r1, [r5, #0]
 800a674:	f104 0c14 	add.w	ip, r4, #20
 800a678:	f8bc b000 	ldrh.w	fp, [ip]
 800a67c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a680:	b289      	uxth	r1, r1
 800a682:	fb09 220b 	mla	r2, r9, fp, r2
 800a686:	4492      	add	sl, r2
 800a688:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a68c:	f84e 1b04 	str.w	r1, [lr], #4
 800a690:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a694:	f8be 1000 	ldrh.w	r1, [lr]
 800a698:	0c12      	lsrs	r2, r2, #16
 800a69a:	fb09 1102 	mla	r1, r9, r2, r1
 800a69e:	4567      	cmp	r7, ip
 800a6a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a6a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6a8:	d8e6      	bhi.n	800a678 <__multiply+0x108>
 800a6aa:	9a01      	ldr	r2, [sp, #4]
 800a6ac:	50a9      	str	r1, [r5, r2]
 800a6ae:	3504      	adds	r5, #4
 800a6b0:	e79b      	b.n	800a5ea <__multiply+0x7a>
 800a6b2:	3e01      	subs	r6, #1
 800a6b4:	e79d      	b.n	800a5f2 <__multiply+0x82>
 800a6b6:	bf00      	nop
 800a6b8:	0800b9f1 	.word	0x0800b9f1
 800a6bc:	0800bae0 	.word	0x0800bae0

0800a6c0 <__pow5mult>:
 800a6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c4:	4615      	mov	r5, r2
 800a6c6:	f012 0203 	ands.w	r2, r2, #3
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	d007      	beq.n	800a6e0 <__pow5mult+0x20>
 800a6d0:	4c25      	ldr	r4, [pc, #148]	; (800a768 <__pow5mult+0xa8>)
 800a6d2:	3a01      	subs	r2, #1
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6da:	f7ff fe55 	bl	800a388 <__multadd>
 800a6de:	4607      	mov	r7, r0
 800a6e0:	10ad      	asrs	r5, r5, #2
 800a6e2:	d03d      	beq.n	800a760 <__pow5mult+0xa0>
 800a6e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6e6:	b97c      	cbnz	r4, 800a708 <__pow5mult+0x48>
 800a6e8:	2010      	movs	r0, #16
 800a6ea:	f7ff fdc3 	bl	800a274 <malloc>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6270      	str	r0, [r6, #36]	; 0x24
 800a6f2:	b928      	cbnz	r0, 800a700 <__pow5mult+0x40>
 800a6f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	; (800a76c <__pow5mult+0xac>)
 800a6fa:	481d      	ldr	r0, [pc, #116]	; (800a770 <__pow5mult+0xb0>)
 800a6fc:	f7fe f98a 	bl	8008a14 <__assert_func>
 800a700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a704:	6004      	str	r4, [r0, #0]
 800a706:	60c4      	str	r4, [r0, #12]
 800a708:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a70c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a710:	b94c      	cbnz	r4, 800a726 <__pow5mult+0x66>
 800a712:	f240 2171 	movw	r1, #625	; 0x271
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff ff14 	bl	800a544 <__i2b>
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	f8c8 0008 	str.w	r0, [r8, #8]
 800a724:	6003      	str	r3, [r0, #0]
 800a726:	f04f 0900 	mov.w	r9, #0
 800a72a:	07eb      	lsls	r3, r5, #31
 800a72c:	d50a      	bpl.n	800a744 <__pow5mult+0x84>
 800a72e:	4639      	mov	r1, r7
 800a730:	4622      	mov	r2, r4
 800a732:	4630      	mov	r0, r6
 800a734:	f7ff ff1c 	bl	800a570 <__multiply>
 800a738:	4680      	mov	r8, r0
 800a73a:	4639      	mov	r1, r7
 800a73c:	4630      	mov	r0, r6
 800a73e:	f7ff fe01 	bl	800a344 <_Bfree>
 800a742:	4647      	mov	r7, r8
 800a744:	106d      	asrs	r5, r5, #1
 800a746:	d00b      	beq.n	800a760 <__pow5mult+0xa0>
 800a748:	6820      	ldr	r0, [r4, #0]
 800a74a:	b938      	cbnz	r0, 800a75c <__pow5mult+0x9c>
 800a74c:	4622      	mov	r2, r4
 800a74e:	4621      	mov	r1, r4
 800a750:	4630      	mov	r0, r6
 800a752:	f7ff ff0d 	bl	800a570 <__multiply>
 800a756:	6020      	str	r0, [r4, #0]
 800a758:	f8c0 9000 	str.w	r9, [r0]
 800a75c:	4604      	mov	r4, r0
 800a75e:	e7e4      	b.n	800a72a <__pow5mult+0x6a>
 800a760:	4638      	mov	r0, r7
 800a762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a766:	bf00      	nop
 800a768:	0800bc30 	.word	0x0800bc30
 800a76c:	0800b7d8 	.word	0x0800b7d8
 800a770:	0800bae0 	.word	0x0800bae0

0800a774 <__lshift>:
 800a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	460c      	mov	r4, r1
 800a77a:	4607      	mov	r7, r0
 800a77c:	4691      	mov	r9, r2
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	6849      	ldr	r1, [r1, #4]
 800a782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a78c:	f108 0601 	add.w	r6, r8, #1
 800a790:	42b3      	cmp	r3, r6
 800a792:	db0b      	blt.n	800a7ac <__lshift+0x38>
 800a794:	4638      	mov	r0, r7
 800a796:	f7ff fd95 	bl	800a2c4 <_Balloc>
 800a79a:	4605      	mov	r5, r0
 800a79c:	b948      	cbnz	r0, 800a7b2 <__lshift+0x3e>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7a4:	4b29      	ldr	r3, [pc, #164]	; (800a84c <__lshift+0xd8>)
 800a7a6:	482a      	ldr	r0, [pc, #168]	; (800a850 <__lshift+0xdc>)
 800a7a8:	f7fe f934 	bl	8008a14 <__assert_func>
 800a7ac:	3101      	adds	r1, #1
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	e7ee      	b.n	800a790 <__lshift+0x1c>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f100 0114 	add.w	r1, r0, #20
 800a7b8:	f100 0210 	add.w	r2, r0, #16
 800a7bc:	4618      	mov	r0, r3
 800a7be:	4553      	cmp	r3, sl
 800a7c0:	db37      	blt.n	800a832 <__lshift+0xbe>
 800a7c2:	6920      	ldr	r0, [r4, #16]
 800a7c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7c8:	f104 0314 	add.w	r3, r4, #20
 800a7cc:	f019 091f 	ands.w	r9, r9, #31
 800a7d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7d8:	d02f      	beq.n	800a83a <__lshift+0xc6>
 800a7da:	468a      	mov	sl, r1
 800a7dc:	f04f 0c00 	mov.w	ip, #0
 800a7e0:	f1c9 0e20 	rsb	lr, r9, #32
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	fa02 f209 	lsl.w	r2, r2, r9
 800a7ea:	ea42 020c 	orr.w	r2, r2, ip
 800a7ee:	f84a 2b04 	str.w	r2, [sl], #4
 800a7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f6:	4298      	cmp	r0, r3
 800a7f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7fc:	d8f2      	bhi.n	800a7e4 <__lshift+0x70>
 800a7fe:	1b03      	subs	r3, r0, r4
 800a800:	3b15      	subs	r3, #21
 800a802:	f023 0303 	bic.w	r3, r3, #3
 800a806:	3304      	adds	r3, #4
 800a808:	f104 0215 	add.w	r2, r4, #21
 800a80c:	4290      	cmp	r0, r2
 800a80e:	bf38      	it	cc
 800a810:	2304      	movcc	r3, #4
 800a812:	f841 c003 	str.w	ip, [r1, r3]
 800a816:	f1bc 0f00 	cmp.w	ip, #0
 800a81a:	d001      	beq.n	800a820 <__lshift+0xac>
 800a81c:	f108 0602 	add.w	r6, r8, #2
 800a820:	3e01      	subs	r6, #1
 800a822:	4638      	mov	r0, r7
 800a824:	4621      	mov	r1, r4
 800a826:	612e      	str	r6, [r5, #16]
 800a828:	f7ff fd8c 	bl	800a344 <_Bfree>
 800a82c:	4628      	mov	r0, r5
 800a82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a832:	f842 0f04 	str.w	r0, [r2, #4]!
 800a836:	3301      	adds	r3, #1
 800a838:	e7c1      	b.n	800a7be <__lshift+0x4a>
 800a83a:	3904      	subs	r1, #4
 800a83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a840:	4298      	cmp	r0, r3
 800a842:	f841 2f04 	str.w	r2, [r1, #4]!
 800a846:	d8f9      	bhi.n	800a83c <__lshift+0xc8>
 800a848:	e7ea      	b.n	800a820 <__lshift+0xac>
 800a84a:	bf00      	nop
 800a84c:	0800b9f1 	.word	0x0800b9f1
 800a850:	0800bae0 	.word	0x0800bae0

0800a854 <__mcmp>:
 800a854:	4603      	mov	r3, r0
 800a856:	690a      	ldr	r2, [r1, #16]
 800a858:	6900      	ldr	r0, [r0, #16]
 800a85a:	b530      	push	{r4, r5, lr}
 800a85c:	1a80      	subs	r0, r0, r2
 800a85e:	d10d      	bne.n	800a87c <__mcmp+0x28>
 800a860:	3314      	adds	r3, #20
 800a862:	3114      	adds	r1, #20
 800a864:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a868:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a86c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a870:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a874:	4295      	cmp	r5, r2
 800a876:	d002      	beq.n	800a87e <__mcmp+0x2a>
 800a878:	d304      	bcc.n	800a884 <__mcmp+0x30>
 800a87a:	2001      	movs	r0, #1
 800a87c:	bd30      	pop	{r4, r5, pc}
 800a87e:	42a3      	cmp	r3, r4
 800a880:	d3f4      	bcc.n	800a86c <__mcmp+0x18>
 800a882:	e7fb      	b.n	800a87c <__mcmp+0x28>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	e7f8      	b.n	800a87c <__mcmp+0x28>
	...

0800a88c <__mdiff>:
 800a88c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	460d      	mov	r5, r1
 800a892:	4607      	mov	r7, r0
 800a894:	4611      	mov	r1, r2
 800a896:	4628      	mov	r0, r5
 800a898:	4614      	mov	r4, r2
 800a89a:	f7ff ffdb 	bl	800a854 <__mcmp>
 800a89e:	1e06      	subs	r6, r0, #0
 800a8a0:	d111      	bne.n	800a8c6 <__mdiff+0x3a>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f7ff fd0d 	bl	800a2c4 <_Balloc>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	b928      	cbnz	r0, 800a8ba <__mdiff+0x2e>
 800a8ae:	f240 2132 	movw	r1, #562	; 0x232
 800a8b2:	4b3a      	ldr	r3, [pc, #232]	; (800a99c <__mdiff+0x110>)
 800a8b4:	483a      	ldr	r0, [pc, #232]	; (800a9a0 <__mdiff+0x114>)
 800a8b6:	f7fe f8ad 	bl	8008a14 <__assert_func>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c6:	bfa4      	itt	ge
 800a8c8:	4623      	movge	r3, r4
 800a8ca:	462c      	movge	r4, r5
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	6861      	ldr	r1, [r4, #4]
 800a8d0:	bfa6      	itte	ge
 800a8d2:	461d      	movge	r5, r3
 800a8d4:	2600      	movge	r6, #0
 800a8d6:	2601      	movlt	r6, #1
 800a8d8:	f7ff fcf4 	bl	800a2c4 <_Balloc>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	b918      	cbnz	r0, 800a8e8 <__mdiff+0x5c>
 800a8e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a8e4:	4b2d      	ldr	r3, [pc, #180]	; (800a99c <__mdiff+0x110>)
 800a8e6:	e7e5      	b.n	800a8b4 <__mdiff+0x28>
 800a8e8:	f102 0814 	add.w	r8, r2, #20
 800a8ec:	46c2      	mov	sl, r8
 800a8ee:	f04f 0c00 	mov.w	ip, #0
 800a8f2:	6927      	ldr	r7, [r4, #16]
 800a8f4:	60c6      	str	r6, [r0, #12]
 800a8f6:	692e      	ldr	r6, [r5, #16]
 800a8f8:	f104 0014 	add.w	r0, r4, #20
 800a8fc:	f105 0914 	add.w	r9, r5, #20
 800a900:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a904:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a908:	3410      	adds	r4, #16
 800a90a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a90e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a912:	fa1f f18b 	uxth.w	r1, fp
 800a916:	448c      	add	ip, r1
 800a918:	b299      	uxth	r1, r3
 800a91a:	0c1b      	lsrs	r3, r3, #16
 800a91c:	ebac 0101 	sub.w	r1, ip, r1
 800a920:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a924:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a928:	b289      	uxth	r1, r1
 800a92a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a92e:	454e      	cmp	r6, r9
 800a930:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a934:	f84a 3b04 	str.w	r3, [sl], #4
 800a938:	d8e7      	bhi.n	800a90a <__mdiff+0x7e>
 800a93a:	1b73      	subs	r3, r6, r5
 800a93c:	3b15      	subs	r3, #21
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	3515      	adds	r5, #21
 800a944:	3304      	adds	r3, #4
 800a946:	42ae      	cmp	r6, r5
 800a948:	bf38      	it	cc
 800a94a:	2304      	movcc	r3, #4
 800a94c:	4418      	add	r0, r3
 800a94e:	4443      	add	r3, r8
 800a950:	461e      	mov	r6, r3
 800a952:	4605      	mov	r5, r0
 800a954:	4575      	cmp	r5, lr
 800a956:	d30e      	bcc.n	800a976 <__mdiff+0xea>
 800a958:	f10e 0103 	add.w	r1, lr, #3
 800a95c:	1a09      	subs	r1, r1, r0
 800a95e:	f021 0103 	bic.w	r1, r1, #3
 800a962:	3803      	subs	r0, #3
 800a964:	4586      	cmp	lr, r0
 800a966:	bf38      	it	cc
 800a968:	2100      	movcc	r1, #0
 800a96a:	4419      	add	r1, r3
 800a96c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a970:	b18b      	cbz	r3, 800a996 <__mdiff+0x10a>
 800a972:	6117      	str	r7, [r2, #16]
 800a974:	e7a4      	b.n	800a8c0 <__mdiff+0x34>
 800a976:	f855 8b04 	ldr.w	r8, [r5], #4
 800a97a:	fa1f f188 	uxth.w	r1, r8
 800a97e:	4461      	add	r1, ip
 800a980:	140c      	asrs	r4, r1, #16
 800a982:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a986:	b289      	uxth	r1, r1
 800a988:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a98c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a990:	f846 1b04 	str.w	r1, [r6], #4
 800a994:	e7de      	b.n	800a954 <__mdiff+0xc8>
 800a996:	3f01      	subs	r7, #1
 800a998:	e7e8      	b.n	800a96c <__mdiff+0xe0>
 800a99a:	bf00      	nop
 800a99c:	0800b9f1 	.word	0x0800b9f1
 800a9a0:	0800bae0 	.word	0x0800bae0

0800a9a4 <__ulp>:
 800a9a4:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <__ulp+0x48>)
 800a9a6:	400b      	ands	r3, r1
 800a9a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd02      	ble.n	800a9b6 <__ulp+0x12>
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4770      	bx	lr
 800a9b6:	425b      	negs	r3, r3
 800a9b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9bc:	f04f 0000 	mov.w	r0, #0
 800a9c0:	f04f 0100 	mov.w	r1, #0
 800a9c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9c8:	da04      	bge.n	800a9d4 <__ulp+0x30>
 800a9ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9ce:	fa43 f102 	asr.w	r1, r3, r2
 800a9d2:	4770      	bx	lr
 800a9d4:	f1a2 0314 	sub.w	r3, r2, #20
 800a9d8:	2b1e      	cmp	r3, #30
 800a9da:	bfd6      	itet	le
 800a9dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9e0:	2301      	movgt	r3, #1
 800a9e2:	fa22 f303 	lsrle.w	r3, r2, r3
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	7ff00000 	.word	0x7ff00000

0800a9f0 <__b2d>:
 800a9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f4:	6907      	ldr	r7, [r0, #16]
 800a9f6:	f100 0914 	add.w	r9, r0, #20
 800a9fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a9fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800aa02:	f1a7 0804 	sub.w	r8, r7, #4
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff fd4e 	bl	800a4a8 <__hi0bits>
 800aa0c:	f1c0 0320 	rsb	r3, r0, #32
 800aa10:	280a      	cmp	r0, #10
 800aa12:	600b      	str	r3, [r1, #0]
 800aa14:	491f      	ldr	r1, [pc, #124]	; (800aa94 <__b2d+0xa4>)
 800aa16:	dc17      	bgt.n	800aa48 <__b2d+0x58>
 800aa18:	45c1      	cmp	r9, r8
 800aa1a:	bf28      	it	cs
 800aa1c:	2200      	movcs	r2, #0
 800aa1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa22:	fa26 f30c 	lsr.w	r3, r6, ip
 800aa26:	bf38      	it	cc
 800aa28:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa2c:	ea43 0501 	orr.w	r5, r3, r1
 800aa30:	f100 0315 	add.w	r3, r0, #21
 800aa34:	fa06 f303 	lsl.w	r3, r6, r3
 800aa38:	fa22 f20c 	lsr.w	r2, r2, ip
 800aa3c:	ea43 0402 	orr.w	r4, r3, r2
 800aa40:	4620      	mov	r0, r4
 800aa42:	4629      	mov	r1, r5
 800aa44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa48:	45c1      	cmp	r9, r8
 800aa4a:	bf2e      	itee	cs
 800aa4c:	2200      	movcs	r2, #0
 800aa4e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa52:	f1a7 0808 	subcc.w	r8, r7, #8
 800aa56:	f1b0 030b 	subs.w	r3, r0, #11
 800aa5a:	d016      	beq.n	800aa8a <__b2d+0x9a>
 800aa5c:	f1c3 0720 	rsb	r7, r3, #32
 800aa60:	fa22 f107 	lsr.w	r1, r2, r7
 800aa64:	45c8      	cmp	r8, r9
 800aa66:	fa06 f603 	lsl.w	r6, r6, r3
 800aa6a:	ea46 0601 	orr.w	r6, r6, r1
 800aa6e:	bf94      	ite	ls
 800aa70:	2100      	movls	r1, #0
 800aa72:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800aa76:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800aa7a:	fa02 f003 	lsl.w	r0, r2, r3
 800aa7e:	40f9      	lsrs	r1, r7
 800aa80:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa84:	ea40 0401 	orr.w	r4, r0, r1
 800aa88:	e7da      	b.n	800aa40 <__b2d+0x50>
 800aa8a:	4614      	mov	r4, r2
 800aa8c:	ea46 0501 	orr.w	r5, r6, r1
 800aa90:	e7d6      	b.n	800aa40 <__b2d+0x50>
 800aa92:	bf00      	nop
 800aa94:	3ff00000 	.word	0x3ff00000

0800aa98 <__d2b>:
 800aa98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aaa2:	4690      	mov	r8, r2
 800aaa4:	461d      	mov	r5, r3
 800aaa6:	f7ff fc0d 	bl	800a2c4 <_Balloc>
 800aaaa:	4604      	mov	r4, r0
 800aaac:	b930      	cbnz	r0, 800aabc <__d2b+0x24>
 800aaae:	4602      	mov	r2, r0
 800aab0:	f240 310a 	movw	r1, #778	; 0x30a
 800aab4:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <__d2b+0xb0>)
 800aab6:	4825      	ldr	r0, [pc, #148]	; (800ab4c <__d2b+0xb4>)
 800aab8:	f7fd ffac 	bl	8008a14 <__assert_func>
 800aabc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aac0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aac4:	bb2d      	cbnz	r5, 800ab12 <__d2b+0x7a>
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	f1b8 0300 	subs.w	r3, r8, #0
 800aacc:	d026      	beq.n	800ab1c <__d2b+0x84>
 800aace:	4668      	mov	r0, sp
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	f7ff fd09 	bl	800a4e8 <__lo0bits>
 800aad6:	9900      	ldr	r1, [sp, #0]
 800aad8:	b1f0      	cbz	r0, 800ab18 <__d2b+0x80>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	f1c0 0320 	rsb	r3, r0, #32
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	430b      	orrs	r3, r1
 800aae6:	40c2      	lsrs	r2, r0
 800aae8:	6163      	str	r3, [r4, #20]
 800aaea:	9201      	str	r2, [sp, #4]
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bf14      	ite	ne
 800aaf2:	2102      	movne	r1, #2
 800aaf4:	2101      	moveq	r1, #1
 800aaf6:	61a3      	str	r3, [r4, #24]
 800aaf8:	6121      	str	r1, [r4, #16]
 800aafa:	b1c5      	cbz	r5, 800ab2e <__d2b+0x96>
 800aafc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab00:	4405      	add	r5, r0
 800ab02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab06:	603d      	str	r5, [r7, #0]
 800ab08:	6030      	str	r0, [r6, #0]
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	b002      	add	sp, #8
 800ab0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab16:	e7d6      	b.n	800aac6 <__d2b+0x2e>
 800ab18:	6161      	str	r1, [r4, #20]
 800ab1a:	e7e7      	b.n	800aaec <__d2b+0x54>
 800ab1c:	a801      	add	r0, sp, #4
 800ab1e:	f7ff fce3 	bl	800a4e8 <__lo0bits>
 800ab22:	2101      	movs	r1, #1
 800ab24:	9b01      	ldr	r3, [sp, #4]
 800ab26:	6121      	str	r1, [r4, #16]
 800ab28:	6163      	str	r3, [r4, #20]
 800ab2a:	3020      	adds	r0, #32
 800ab2c:	e7e5      	b.n	800aafa <__d2b+0x62>
 800ab2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ab32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab36:	6038      	str	r0, [r7, #0]
 800ab38:	6918      	ldr	r0, [r3, #16]
 800ab3a:	f7ff fcb5 	bl	800a4a8 <__hi0bits>
 800ab3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ab42:	6031      	str	r1, [r6, #0]
 800ab44:	e7e1      	b.n	800ab0a <__d2b+0x72>
 800ab46:	bf00      	nop
 800ab48:	0800b9f1 	.word	0x0800b9f1
 800ab4c:	0800bae0 	.word	0x0800bae0

0800ab50 <__ratio>:
 800ab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	4688      	mov	r8, r1
 800ab56:	4669      	mov	r1, sp
 800ab58:	4681      	mov	r9, r0
 800ab5a:	f7ff ff49 	bl	800a9f0 <__b2d>
 800ab5e:	460f      	mov	r7, r1
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	4640      	mov	r0, r8
 800ab66:	a901      	add	r1, sp, #4
 800ab68:	f7ff ff42 	bl	800a9f0 <__b2d>
 800ab6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab70:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab74:	468b      	mov	fp, r1
 800ab76:	eba3 0c02 	sub.w	ip, r3, r2
 800ab7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bfd5      	itete	le
 800ab88:	460a      	movle	r2, r1
 800ab8a:	462a      	movgt	r2, r5
 800ab8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab90:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab94:	bfd8      	it	le
 800ab96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4620      	mov	r0, r4
 800aba2:	f7f5 fef1 	bl	8000988 <__aeabi_ddiv>
 800aba6:	b003      	add	sp, #12
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abac <__copybits>:
 800abac:	3901      	subs	r1, #1
 800abae:	b570      	push	{r4, r5, r6, lr}
 800abb0:	1149      	asrs	r1, r1, #5
 800abb2:	6914      	ldr	r4, [r2, #16]
 800abb4:	3101      	adds	r1, #1
 800abb6:	f102 0314 	add.w	r3, r2, #20
 800abba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abc2:	1f05      	subs	r5, r0, #4
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	d30c      	bcc.n	800abe2 <__copybits+0x36>
 800abc8:	1aa3      	subs	r3, r4, r2
 800abca:	3b11      	subs	r3, #17
 800abcc:	f023 0303 	bic.w	r3, r3, #3
 800abd0:	3211      	adds	r2, #17
 800abd2:	42a2      	cmp	r2, r4
 800abd4:	bf88      	it	hi
 800abd6:	2300      	movhi	r3, #0
 800abd8:	4418      	add	r0, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	4288      	cmp	r0, r1
 800abde:	d305      	bcc.n	800abec <__copybits+0x40>
 800abe0:	bd70      	pop	{r4, r5, r6, pc}
 800abe2:	f853 6b04 	ldr.w	r6, [r3], #4
 800abe6:	f845 6f04 	str.w	r6, [r5, #4]!
 800abea:	e7eb      	b.n	800abc4 <__copybits+0x18>
 800abec:	f840 3b04 	str.w	r3, [r0], #4
 800abf0:	e7f4      	b.n	800abdc <__copybits+0x30>

0800abf2 <__any_on>:
 800abf2:	f100 0214 	add.w	r2, r0, #20
 800abf6:	6900      	ldr	r0, [r0, #16]
 800abf8:	114b      	asrs	r3, r1, #5
 800abfa:	4298      	cmp	r0, r3
 800abfc:	b510      	push	{r4, lr}
 800abfe:	db11      	blt.n	800ac24 <__any_on+0x32>
 800ac00:	dd0a      	ble.n	800ac18 <__any_on+0x26>
 800ac02:	f011 011f 	ands.w	r1, r1, #31
 800ac06:	d007      	beq.n	800ac18 <__any_on+0x26>
 800ac08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac0c:	fa24 f001 	lsr.w	r0, r4, r1
 800ac10:	fa00 f101 	lsl.w	r1, r0, r1
 800ac14:	428c      	cmp	r4, r1
 800ac16:	d10b      	bne.n	800ac30 <__any_on+0x3e>
 800ac18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d803      	bhi.n	800ac28 <__any_on+0x36>
 800ac20:	2000      	movs	r0, #0
 800ac22:	bd10      	pop	{r4, pc}
 800ac24:	4603      	mov	r3, r0
 800ac26:	e7f7      	b.n	800ac18 <__any_on+0x26>
 800ac28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac2c:	2900      	cmp	r1, #0
 800ac2e:	d0f5      	beq.n	800ac1c <__any_on+0x2a>
 800ac30:	2001      	movs	r0, #1
 800ac32:	e7f6      	b.n	800ac22 <__any_on+0x30>

0800ac34 <_calloc_r>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	fba1 5402 	umull	r5, r4, r1, r2
 800ac3a:	b934      	cbnz	r4, 800ac4a <_calloc_r+0x16>
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f000 f875 	bl	800ad2c <_malloc_r>
 800ac42:	4606      	mov	r6, r0
 800ac44:	b928      	cbnz	r0, 800ac52 <_calloc_r+0x1e>
 800ac46:	4630      	mov	r0, r6
 800ac48:	bd70      	pop	{r4, r5, r6, pc}
 800ac4a:	220c      	movs	r2, #12
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	6002      	str	r2, [r0, #0]
 800ac50:	e7f9      	b.n	800ac46 <_calloc_r+0x12>
 800ac52:	462a      	mov	r2, r5
 800ac54:	4621      	mov	r1, r4
 800ac56:	f7fc f88d 	bl	8006d74 <memset>
 800ac5a:	e7f4      	b.n	800ac46 <_calloc_r+0x12>

0800ac5c <_free_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4605      	mov	r5, r0
 800ac60:	2900      	cmp	r1, #0
 800ac62:	d040      	beq.n	800ace6 <_free_r+0x8a>
 800ac64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac68:	1f0c      	subs	r4, r1, #4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bfb8      	it	lt
 800ac6e:	18e4      	addlt	r4, r4, r3
 800ac70:	f000 fc76 	bl	800b560 <__malloc_lock>
 800ac74:	4a1c      	ldr	r2, [pc, #112]	; (800ace8 <_free_r+0x8c>)
 800ac76:	6813      	ldr	r3, [r2, #0]
 800ac78:	b933      	cbnz	r3, 800ac88 <_free_r+0x2c>
 800ac7a:	6063      	str	r3, [r4, #4]
 800ac7c:	6014      	str	r4, [r2, #0]
 800ac7e:	4628      	mov	r0, r5
 800ac80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac84:	f000 bc72 	b.w	800b56c <__malloc_unlock>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d908      	bls.n	800ac9e <_free_r+0x42>
 800ac8c:	6820      	ldr	r0, [r4, #0]
 800ac8e:	1821      	adds	r1, r4, r0
 800ac90:	428b      	cmp	r3, r1
 800ac92:	bf01      	itttt	eq
 800ac94:	6819      	ldreq	r1, [r3, #0]
 800ac96:	685b      	ldreq	r3, [r3, #4]
 800ac98:	1809      	addeq	r1, r1, r0
 800ac9a:	6021      	streq	r1, [r4, #0]
 800ac9c:	e7ed      	b.n	800ac7a <_free_r+0x1e>
 800ac9e:	461a      	mov	r2, r3
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	b10b      	cbz	r3, 800aca8 <_free_r+0x4c>
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	d9fa      	bls.n	800ac9e <_free_r+0x42>
 800aca8:	6811      	ldr	r1, [r2, #0]
 800acaa:	1850      	adds	r0, r2, r1
 800acac:	42a0      	cmp	r0, r4
 800acae:	d10b      	bne.n	800acc8 <_free_r+0x6c>
 800acb0:	6820      	ldr	r0, [r4, #0]
 800acb2:	4401      	add	r1, r0
 800acb4:	1850      	adds	r0, r2, r1
 800acb6:	4283      	cmp	r3, r0
 800acb8:	6011      	str	r1, [r2, #0]
 800acba:	d1e0      	bne.n	800ac7e <_free_r+0x22>
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4401      	add	r1, r0
 800acc2:	6011      	str	r1, [r2, #0]
 800acc4:	6053      	str	r3, [r2, #4]
 800acc6:	e7da      	b.n	800ac7e <_free_r+0x22>
 800acc8:	d902      	bls.n	800acd0 <_free_r+0x74>
 800acca:	230c      	movs	r3, #12
 800accc:	602b      	str	r3, [r5, #0]
 800acce:	e7d6      	b.n	800ac7e <_free_r+0x22>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	1821      	adds	r1, r4, r0
 800acd4:	428b      	cmp	r3, r1
 800acd6:	bf01      	itttt	eq
 800acd8:	6819      	ldreq	r1, [r3, #0]
 800acda:	685b      	ldreq	r3, [r3, #4]
 800acdc:	1809      	addeq	r1, r1, r0
 800acde:	6021      	streq	r1, [r4, #0]
 800ace0:	6063      	str	r3, [r4, #4]
 800ace2:	6054      	str	r4, [r2, #4]
 800ace4:	e7cb      	b.n	800ac7e <_free_r+0x22>
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	20000ba0 	.word	0x20000ba0

0800acec <sbrk_aligned>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	4e0e      	ldr	r6, [pc, #56]	; (800ad28 <sbrk_aligned+0x3c>)
 800acf0:	460c      	mov	r4, r1
 800acf2:	6831      	ldr	r1, [r6, #0]
 800acf4:	4605      	mov	r5, r0
 800acf6:	b911      	cbnz	r1, 800acfe <sbrk_aligned+0x12>
 800acf8:	f000 fb46 	bl	800b388 <_sbrk_r>
 800acfc:	6030      	str	r0, [r6, #0]
 800acfe:	4621      	mov	r1, r4
 800ad00:	4628      	mov	r0, r5
 800ad02:	f000 fb41 	bl	800b388 <_sbrk_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d00a      	beq.n	800ad20 <sbrk_aligned+0x34>
 800ad0a:	1cc4      	adds	r4, r0, #3
 800ad0c:	f024 0403 	bic.w	r4, r4, #3
 800ad10:	42a0      	cmp	r0, r4
 800ad12:	d007      	beq.n	800ad24 <sbrk_aligned+0x38>
 800ad14:	1a21      	subs	r1, r4, r0
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 fb36 	bl	800b388 <_sbrk_r>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d101      	bne.n	800ad24 <sbrk_aligned+0x38>
 800ad20:	f04f 34ff 	mov.w	r4, #4294967295
 800ad24:	4620      	mov	r0, r4
 800ad26:	bd70      	pop	{r4, r5, r6, pc}
 800ad28:	20000ba4 	.word	0x20000ba4

0800ad2c <_malloc_r>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	1ccd      	adds	r5, r1, #3
 800ad32:	f025 0503 	bic.w	r5, r5, #3
 800ad36:	3508      	adds	r5, #8
 800ad38:	2d0c      	cmp	r5, #12
 800ad3a:	bf38      	it	cc
 800ad3c:	250c      	movcc	r5, #12
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	4607      	mov	r7, r0
 800ad42:	db01      	blt.n	800ad48 <_malloc_r+0x1c>
 800ad44:	42a9      	cmp	r1, r5
 800ad46:	d905      	bls.n	800ad54 <_malloc_r+0x28>
 800ad48:	230c      	movs	r3, #12
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	4630      	mov	r0, r6
 800ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad54:	4e2e      	ldr	r6, [pc, #184]	; (800ae10 <_malloc_r+0xe4>)
 800ad56:	f000 fc03 	bl	800b560 <__malloc_lock>
 800ad5a:	6833      	ldr	r3, [r6, #0]
 800ad5c:	461c      	mov	r4, r3
 800ad5e:	bb34      	cbnz	r4, 800adae <_malloc_r+0x82>
 800ad60:	4629      	mov	r1, r5
 800ad62:	4638      	mov	r0, r7
 800ad64:	f7ff ffc2 	bl	800acec <sbrk_aligned>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	d14d      	bne.n	800ae0a <_malloc_r+0xde>
 800ad6e:	6834      	ldr	r4, [r6, #0]
 800ad70:	4626      	mov	r6, r4
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d140      	bne.n	800adf8 <_malloc_r+0xcc>
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	4631      	mov	r1, r6
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	eb04 0803 	add.w	r8, r4, r3
 800ad80:	f000 fb02 	bl	800b388 <_sbrk_r>
 800ad84:	4580      	cmp	r8, r0
 800ad86:	d13a      	bne.n	800adfe <_malloc_r+0xd2>
 800ad88:	6821      	ldr	r1, [r4, #0]
 800ad8a:	3503      	adds	r5, #3
 800ad8c:	1a6d      	subs	r5, r5, r1
 800ad8e:	f025 0503 	bic.w	r5, r5, #3
 800ad92:	3508      	adds	r5, #8
 800ad94:	2d0c      	cmp	r5, #12
 800ad96:	bf38      	it	cc
 800ad98:	250c      	movcc	r5, #12
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	f7ff ffa5 	bl	800acec <sbrk_aligned>
 800ada2:	3001      	adds	r0, #1
 800ada4:	d02b      	beq.n	800adfe <_malloc_r+0xd2>
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	442b      	add	r3, r5
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	e00e      	b.n	800adcc <_malloc_r+0xa0>
 800adae:	6822      	ldr	r2, [r4, #0]
 800adb0:	1b52      	subs	r2, r2, r5
 800adb2:	d41e      	bmi.n	800adf2 <_malloc_r+0xc6>
 800adb4:	2a0b      	cmp	r2, #11
 800adb6:	d916      	bls.n	800ade6 <_malloc_r+0xba>
 800adb8:	1961      	adds	r1, r4, r5
 800adba:	42a3      	cmp	r3, r4
 800adbc:	6025      	str	r5, [r4, #0]
 800adbe:	bf18      	it	ne
 800adc0:	6059      	strne	r1, [r3, #4]
 800adc2:	6863      	ldr	r3, [r4, #4]
 800adc4:	bf08      	it	eq
 800adc6:	6031      	streq	r1, [r6, #0]
 800adc8:	5162      	str	r2, [r4, r5]
 800adca:	604b      	str	r3, [r1, #4]
 800adcc:	4638      	mov	r0, r7
 800adce:	f104 060b 	add.w	r6, r4, #11
 800add2:	f000 fbcb 	bl	800b56c <__malloc_unlock>
 800add6:	f026 0607 	bic.w	r6, r6, #7
 800adda:	1d23      	adds	r3, r4, #4
 800addc:	1af2      	subs	r2, r6, r3
 800adde:	d0b6      	beq.n	800ad4e <_malloc_r+0x22>
 800ade0:	1b9b      	subs	r3, r3, r6
 800ade2:	50a3      	str	r3, [r4, r2]
 800ade4:	e7b3      	b.n	800ad4e <_malloc_r+0x22>
 800ade6:	6862      	ldr	r2, [r4, #4]
 800ade8:	42a3      	cmp	r3, r4
 800adea:	bf0c      	ite	eq
 800adec:	6032      	streq	r2, [r6, #0]
 800adee:	605a      	strne	r2, [r3, #4]
 800adf0:	e7ec      	b.n	800adcc <_malloc_r+0xa0>
 800adf2:	4623      	mov	r3, r4
 800adf4:	6864      	ldr	r4, [r4, #4]
 800adf6:	e7b2      	b.n	800ad5e <_malloc_r+0x32>
 800adf8:	4634      	mov	r4, r6
 800adfa:	6876      	ldr	r6, [r6, #4]
 800adfc:	e7b9      	b.n	800ad72 <_malloc_r+0x46>
 800adfe:	230c      	movs	r3, #12
 800ae00:	4638      	mov	r0, r7
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	f000 fbb2 	bl	800b56c <__malloc_unlock>
 800ae08:	e7a1      	b.n	800ad4e <_malloc_r+0x22>
 800ae0a:	6025      	str	r5, [r4, #0]
 800ae0c:	e7de      	b.n	800adcc <_malloc_r+0xa0>
 800ae0e:	bf00      	nop
 800ae10:	20000ba0 	.word	0x20000ba0

0800ae14 <__ssputs_r>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	688e      	ldr	r6, [r1, #8]
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	429e      	cmp	r6, r3
 800ae1e:	460c      	mov	r4, r1
 800ae20:	4690      	mov	r8, r2
 800ae22:	461f      	mov	r7, r3
 800ae24:	d838      	bhi.n	800ae98 <__ssputs_r+0x84>
 800ae26:	898a      	ldrh	r2, [r1, #12]
 800ae28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae2c:	d032      	beq.n	800ae94 <__ssputs_r+0x80>
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	6909      	ldr	r1, [r1, #16]
 800ae32:	3301      	adds	r3, #1
 800ae34:	eba5 0901 	sub.w	r9, r5, r1
 800ae38:	6965      	ldr	r5, [r4, #20]
 800ae3a:	444b      	add	r3, r9
 800ae3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae44:	106d      	asrs	r5, r5, #1
 800ae46:	429d      	cmp	r5, r3
 800ae48:	bf38      	it	cc
 800ae4a:	461d      	movcc	r5, r3
 800ae4c:	0553      	lsls	r3, r2, #21
 800ae4e:	d531      	bpl.n	800aeb4 <__ssputs_r+0xa0>
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7ff ff6b 	bl	800ad2c <_malloc_r>
 800ae56:	4606      	mov	r6, r0
 800ae58:	b950      	cbnz	r0, 800ae70 <__ssputs_r+0x5c>
 800ae5a:	230c      	movs	r3, #12
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	f8ca 3000 	str.w	r3, [sl]
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae70:	464a      	mov	r2, r9
 800ae72:	6921      	ldr	r1, [r4, #16]
 800ae74:	f7fb ff70 	bl	8006d58 <memcpy>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	6126      	str	r6, [r4, #16]
 800ae86:	444e      	add	r6, r9
 800ae88:	6026      	str	r6, [r4, #0]
 800ae8a:	463e      	mov	r6, r7
 800ae8c:	6165      	str	r5, [r4, #20]
 800ae8e:	eba5 0509 	sub.w	r5, r5, r9
 800ae92:	60a5      	str	r5, [r4, #8]
 800ae94:	42be      	cmp	r6, r7
 800ae96:	d900      	bls.n	800ae9a <__ssputs_r+0x86>
 800ae98:	463e      	mov	r6, r7
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	6820      	ldr	r0, [r4, #0]
 800aea0:	f000 fb44 	bl	800b52c <memmove>
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	2000      	movs	r0, #0
 800aea8:	1b9b      	subs	r3, r3, r6
 800aeaa:	60a3      	str	r3, [r4, #8]
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	4433      	add	r3, r6
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	e7db      	b.n	800ae6c <__ssputs_r+0x58>
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	f000 fb5f 	bl	800b578 <_realloc_r>
 800aeba:	4606      	mov	r6, r0
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d1e1      	bne.n	800ae84 <__ssputs_r+0x70>
 800aec0:	4650      	mov	r0, sl
 800aec2:	6921      	ldr	r1, [r4, #16]
 800aec4:	f7ff feca 	bl	800ac5c <_free_r>
 800aec8:	e7c7      	b.n	800ae5a <__ssputs_r+0x46>
	...

0800aecc <_svfiprintf_r>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	4698      	mov	r8, r3
 800aed2:	898b      	ldrh	r3, [r1, #12]
 800aed4:	4607      	mov	r7, r0
 800aed6:	061b      	lsls	r3, r3, #24
 800aed8:	460d      	mov	r5, r1
 800aeda:	4614      	mov	r4, r2
 800aedc:	b09d      	sub	sp, #116	; 0x74
 800aede:	d50e      	bpl.n	800aefe <_svfiprintf_r+0x32>
 800aee0:	690b      	ldr	r3, [r1, #16]
 800aee2:	b963      	cbnz	r3, 800aefe <_svfiprintf_r+0x32>
 800aee4:	2140      	movs	r1, #64	; 0x40
 800aee6:	f7ff ff21 	bl	800ad2c <_malloc_r>
 800aeea:	6028      	str	r0, [r5, #0]
 800aeec:	6128      	str	r0, [r5, #16]
 800aeee:	b920      	cbnz	r0, 800aefa <_svfiprintf_r+0x2e>
 800aef0:	230c      	movs	r3, #12
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295
 800aef8:	e0d1      	b.n	800b09e <_svfiprintf_r+0x1d2>
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	616b      	str	r3, [r5, #20]
 800aefe:	2300      	movs	r3, #0
 800af00:	9309      	str	r3, [sp, #36]	; 0x24
 800af02:	2320      	movs	r3, #32
 800af04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af08:	2330      	movs	r3, #48	; 0x30
 800af0a:	f04f 0901 	mov.w	r9, #1
 800af0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b0b8 <_svfiprintf_r+0x1ec>
 800af16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af1a:	4623      	mov	r3, r4
 800af1c:	469a      	mov	sl, r3
 800af1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af22:	b10a      	cbz	r2, 800af28 <_svfiprintf_r+0x5c>
 800af24:	2a25      	cmp	r2, #37	; 0x25
 800af26:	d1f9      	bne.n	800af1c <_svfiprintf_r+0x50>
 800af28:	ebba 0b04 	subs.w	fp, sl, r4
 800af2c:	d00b      	beq.n	800af46 <_svfiprintf_r+0x7a>
 800af2e:	465b      	mov	r3, fp
 800af30:	4622      	mov	r2, r4
 800af32:	4629      	mov	r1, r5
 800af34:	4638      	mov	r0, r7
 800af36:	f7ff ff6d 	bl	800ae14 <__ssputs_r>
 800af3a:	3001      	adds	r0, #1
 800af3c:	f000 80aa 	beq.w	800b094 <_svfiprintf_r+0x1c8>
 800af40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af42:	445a      	add	r2, fp
 800af44:	9209      	str	r2, [sp, #36]	; 0x24
 800af46:	f89a 3000 	ldrb.w	r3, [sl]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 80a2 	beq.w	800b094 <_svfiprintf_r+0x1c8>
 800af50:	2300      	movs	r3, #0
 800af52:	f04f 32ff 	mov.w	r2, #4294967295
 800af56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af5a:	f10a 0a01 	add.w	sl, sl, #1
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	9307      	str	r3, [sp, #28]
 800af62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af66:	931a      	str	r3, [sp, #104]	; 0x68
 800af68:	4654      	mov	r4, sl
 800af6a:	2205      	movs	r2, #5
 800af6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af70:	4851      	ldr	r0, [pc, #324]	; (800b0b8 <_svfiprintf_r+0x1ec>)
 800af72:	f7ff f999 	bl	800a2a8 <memchr>
 800af76:	9a04      	ldr	r2, [sp, #16]
 800af78:	b9d8      	cbnz	r0, 800afb2 <_svfiprintf_r+0xe6>
 800af7a:	06d0      	lsls	r0, r2, #27
 800af7c:	bf44      	itt	mi
 800af7e:	2320      	movmi	r3, #32
 800af80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af84:	0711      	lsls	r1, r2, #28
 800af86:	bf44      	itt	mi
 800af88:	232b      	movmi	r3, #43	; 0x2b
 800af8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af8e:	f89a 3000 	ldrb.w	r3, [sl]
 800af92:	2b2a      	cmp	r3, #42	; 0x2a
 800af94:	d015      	beq.n	800afc2 <_svfiprintf_r+0xf6>
 800af96:	4654      	mov	r4, sl
 800af98:	2000      	movs	r0, #0
 800af9a:	f04f 0c0a 	mov.w	ip, #10
 800af9e:	9a07      	ldr	r2, [sp, #28]
 800afa0:	4621      	mov	r1, r4
 800afa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa6:	3b30      	subs	r3, #48	; 0x30
 800afa8:	2b09      	cmp	r3, #9
 800afaa:	d94e      	bls.n	800b04a <_svfiprintf_r+0x17e>
 800afac:	b1b0      	cbz	r0, 800afdc <_svfiprintf_r+0x110>
 800afae:	9207      	str	r2, [sp, #28]
 800afb0:	e014      	b.n	800afdc <_svfiprintf_r+0x110>
 800afb2:	eba0 0308 	sub.w	r3, r0, r8
 800afb6:	fa09 f303 	lsl.w	r3, r9, r3
 800afba:	4313      	orrs	r3, r2
 800afbc:	46a2      	mov	sl, r4
 800afbe:	9304      	str	r3, [sp, #16]
 800afc0:	e7d2      	b.n	800af68 <_svfiprintf_r+0x9c>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	1d19      	adds	r1, r3, #4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	9103      	str	r1, [sp, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bfbb      	ittet	lt
 800afce:	425b      	neglt	r3, r3
 800afd0:	f042 0202 	orrlt.w	r2, r2, #2
 800afd4:	9307      	strge	r3, [sp, #28]
 800afd6:	9307      	strlt	r3, [sp, #28]
 800afd8:	bfb8      	it	lt
 800afda:	9204      	strlt	r2, [sp, #16]
 800afdc:	7823      	ldrb	r3, [r4, #0]
 800afde:	2b2e      	cmp	r3, #46	; 0x2e
 800afe0:	d10c      	bne.n	800affc <_svfiprintf_r+0x130>
 800afe2:	7863      	ldrb	r3, [r4, #1]
 800afe4:	2b2a      	cmp	r3, #42	; 0x2a
 800afe6:	d135      	bne.n	800b054 <_svfiprintf_r+0x188>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	3402      	adds	r4, #2
 800afec:	1d1a      	adds	r2, r3, #4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	9203      	str	r2, [sp, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfb8      	it	lt
 800aff6:	f04f 33ff 	movlt.w	r3, #4294967295
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b0bc <_svfiprintf_r+0x1f0>
 800b000:	2203      	movs	r2, #3
 800b002:	4650      	mov	r0, sl
 800b004:	7821      	ldrb	r1, [r4, #0]
 800b006:	f7ff f94f 	bl	800a2a8 <memchr>
 800b00a:	b140      	cbz	r0, 800b01e <_svfiprintf_r+0x152>
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	eba0 000a 	sub.w	r0, r0, sl
 800b012:	fa03 f000 	lsl.w	r0, r3, r0
 800b016:	9b04      	ldr	r3, [sp, #16]
 800b018:	3401      	adds	r4, #1
 800b01a:	4303      	orrs	r3, r0
 800b01c:	9304      	str	r3, [sp, #16]
 800b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b022:	2206      	movs	r2, #6
 800b024:	4826      	ldr	r0, [pc, #152]	; (800b0c0 <_svfiprintf_r+0x1f4>)
 800b026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b02a:	f7ff f93d 	bl	800a2a8 <memchr>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d038      	beq.n	800b0a4 <_svfiprintf_r+0x1d8>
 800b032:	4b24      	ldr	r3, [pc, #144]	; (800b0c4 <_svfiprintf_r+0x1f8>)
 800b034:	bb1b      	cbnz	r3, 800b07e <_svfiprintf_r+0x1b2>
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	3307      	adds	r3, #7
 800b03a:	f023 0307 	bic.w	r3, r3, #7
 800b03e:	3308      	adds	r3, #8
 800b040:	9303      	str	r3, [sp, #12]
 800b042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b044:	4433      	add	r3, r6
 800b046:	9309      	str	r3, [sp, #36]	; 0x24
 800b048:	e767      	b.n	800af1a <_svfiprintf_r+0x4e>
 800b04a:	460c      	mov	r4, r1
 800b04c:	2001      	movs	r0, #1
 800b04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b052:	e7a5      	b.n	800afa0 <_svfiprintf_r+0xd4>
 800b054:	2300      	movs	r3, #0
 800b056:	f04f 0c0a 	mov.w	ip, #10
 800b05a:	4619      	mov	r1, r3
 800b05c:	3401      	adds	r4, #1
 800b05e:	9305      	str	r3, [sp, #20]
 800b060:	4620      	mov	r0, r4
 800b062:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b066:	3a30      	subs	r2, #48	; 0x30
 800b068:	2a09      	cmp	r2, #9
 800b06a:	d903      	bls.n	800b074 <_svfiprintf_r+0x1a8>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0c5      	beq.n	800affc <_svfiprintf_r+0x130>
 800b070:	9105      	str	r1, [sp, #20]
 800b072:	e7c3      	b.n	800affc <_svfiprintf_r+0x130>
 800b074:	4604      	mov	r4, r0
 800b076:	2301      	movs	r3, #1
 800b078:	fb0c 2101 	mla	r1, ip, r1, r2
 800b07c:	e7f0      	b.n	800b060 <_svfiprintf_r+0x194>
 800b07e:	ab03      	add	r3, sp, #12
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	462a      	mov	r2, r5
 800b084:	4638      	mov	r0, r7
 800b086:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <_svfiprintf_r+0x1fc>)
 800b088:	a904      	add	r1, sp, #16
 800b08a:	f7fb ff19 	bl	8006ec0 <_printf_float>
 800b08e:	1c42      	adds	r2, r0, #1
 800b090:	4606      	mov	r6, r0
 800b092:	d1d6      	bne.n	800b042 <_svfiprintf_r+0x176>
 800b094:	89ab      	ldrh	r3, [r5, #12]
 800b096:	065b      	lsls	r3, r3, #25
 800b098:	f53f af2c 	bmi.w	800aef4 <_svfiprintf_r+0x28>
 800b09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b09e:	b01d      	add	sp, #116	; 0x74
 800b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a4:	ab03      	add	r3, sp, #12
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	462a      	mov	r2, r5
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <_svfiprintf_r+0x1fc>)
 800b0ae:	a904      	add	r1, sp, #16
 800b0b0:	f7fc f9a2 	bl	80073f8 <_printf_i>
 800b0b4:	e7eb      	b.n	800b08e <_svfiprintf_r+0x1c2>
 800b0b6:	bf00      	nop
 800b0b8:	0800bc3c 	.word	0x0800bc3c
 800b0bc:	0800bc42 	.word	0x0800bc42
 800b0c0:	0800bc46 	.word	0x0800bc46
 800b0c4:	08006ec1 	.word	0x08006ec1
 800b0c8:	0800ae15 	.word	0x0800ae15

0800b0cc <__sfputc_r>:
 800b0cc:	6893      	ldr	r3, [r2, #8]
 800b0ce:	b410      	push	{r4}
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	6093      	str	r3, [r2, #8]
 800b0d6:	da07      	bge.n	800b0e8 <__sfputc_r+0x1c>
 800b0d8:	6994      	ldr	r4, [r2, #24]
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	db01      	blt.n	800b0e2 <__sfputc_r+0x16>
 800b0de:	290a      	cmp	r1, #10
 800b0e0:	d102      	bne.n	800b0e8 <__sfputc_r+0x1c>
 800b0e2:	bc10      	pop	{r4}
 800b0e4:	f7fd bbd6 	b.w	8008894 <__swbuf_r>
 800b0e8:	6813      	ldr	r3, [r2, #0]
 800b0ea:	1c58      	adds	r0, r3, #1
 800b0ec:	6010      	str	r0, [r2, #0]
 800b0ee:	7019      	strb	r1, [r3, #0]
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	bc10      	pop	{r4}
 800b0f4:	4770      	bx	lr

0800b0f6 <__sfputs_r>:
 800b0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	18d5      	adds	r5, r2, r3
 800b100:	42ac      	cmp	r4, r5
 800b102:	d101      	bne.n	800b108 <__sfputs_r+0x12>
 800b104:	2000      	movs	r0, #0
 800b106:	e007      	b.n	800b118 <__sfputs_r+0x22>
 800b108:	463a      	mov	r2, r7
 800b10a:	4630      	mov	r0, r6
 800b10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b110:	f7ff ffdc 	bl	800b0cc <__sfputc_r>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d1f3      	bne.n	800b100 <__sfputs_r+0xa>
 800b118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b11c <_vfiprintf_r>:
 800b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	460d      	mov	r5, r1
 800b122:	4614      	mov	r4, r2
 800b124:	4698      	mov	r8, r3
 800b126:	4606      	mov	r6, r0
 800b128:	b09d      	sub	sp, #116	; 0x74
 800b12a:	b118      	cbz	r0, 800b134 <_vfiprintf_r+0x18>
 800b12c:	6983      	ldr	r3, [r0, #24]
 800b12e:	b90b      	cbnz	r3, 800b134 <_vfiprintf_r+0x18>
 800b130:	f7fe fc1e 	bl	8009970 <__sinit>
 800b134:	4b89      	ldr	r3, [pc, #548]	; (800b35c <_vfiprintf_r+0x240>)
 800b136:	429d      	cmp	r5, r3
 800b138:	d11b      	bne.n	800b172 <_vfiprintf_r+0x56>
 800b13a:	6875      	ldr	r5, [r6, #4]
 800b13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13e:	07d9      	lsls	r1, r3, #31
 800b140:	d405      	bmi.n	800b14e <_vfiprintf_r+0x32>
 800b142:	89ab      	ldrh	r3, [r5, #12]
 800b144:	059a      	lsls	r2, r3, #22
 800b146:	d402      	bmi.n	800b14e <_vfiprintf_r+0x32>
 800b148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b14a:	f7ff f82c 	bl	800a1a6 <__retarget_lock_acquire_recursive>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	071b      	lsls	r3, r3, #28
 800b152:	d501      	bpl.n	800b158 <_vfiprintf_r+0x3c>
 800b154:	692b      	ldr	r3, [r5, #16]
 800b156:	b9eb      	cbnz	r3, 800b194 <_vfiprintf_r+0x78>
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7fd fbec 	bl	8008938 <__swsetup_r>
 800b160:	b1c0      	cbz	r0, 800b194 <_vfiprintf_r+0x78>
 800b162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b164:	07dc      	lsls	r4, r3, #31
 800b166:	d50e      	bpl.n	800b186 <_vfiprintf_r+0x6a>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	b01d      	add	sp, #116	; 0x74
 800b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b172:	4b7b      	ldr	r3, [pc, #492]	; (800b360 <_vfiprintf_r+0x244>)
 800b174:	429d      	cmp	r5, r3
 800b176:	d101      	bne.n	800b17c <_vfiprintf_r+0x60>
 800b178:	68b5      	ldr	r5, [r6, #8]
 800b17a:	e7df      	b.n	800b13c <_vfiprintf_r+0x20>
 800b17c:	4b79      	ldr	r3, [pc, #484]	; (800b364 <_vfiprintf_r+0x248>)
 800b17e:	429d      	cmp	r5, r3
 800b180:	bf08      	it	eq
 800b182:	68f5      	ldreq	r5, [r6, #12]
 800b184:	e7da      	b.n	800b13c <_vfiprintf_r+0x20>
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	0598      	lsls	r0, r3, #22
 800b18a:	d4ed      	bmi.n	800b168 <_vfiprintf_r+0x4c>
 800b18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b18e:	f7ff f80b 	bl	800a1a8 <__retarget_lock_release_recursive>
 800b192:	e7e9      	b.n	800b168 <_vfiprintf_r+0x4c>
 800b194:	2300      	movs	r3, #0
 800b196:	9309      	str	r3, [sp, #36]	; 0x24
 800b198:	2320      	movs	r3, #32
 800b19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b19e:	2330      	movs	r3, #48	; 0x30
 800b1a0:	f04f 0901 	mov.w	r9, #1
 800b1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b368 <_vfiprintf_r+0x24c>
 800b1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	469a      	mov	sl, r3
 800b1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1b8:	b10a      	cbz	r2, 800b1be <_vfiprintf_r+0xa2>
 800b1ba:	2a25      	cmp	r2, #37	; 0x25
 800b1bc:	d1f9      	bne.n	800b1b2 <_vfiprintf_r+0x96>
 800b1be:	ebba 0b04 	subs.w	fp, sl, r4
 800b1c2:	d00b      	beq.n	800b1dc <_vfiprintf_r+0xc0>
 800b1c4:	465b      	mov	r3, fp
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7ff ff93 	bl	800b0f6 <__sfputs_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	f000 80aa 	beq.w	800b32a <_vfiprintf_r+0x20e>
 800b1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1d8:	445a      	add	r2, fp
 800b1da:	9209      	str	r2, [sp, #36]	; 0x24
 800b1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 80a2 	beq.w	800b32a <_vfiprintf_r+0x20e>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1f0:	f10a 0a01 	add.w	sl, sl, #1
 800b1f4:	9304      	str	r3, [sp, #16]
 800b1f6:	9307      	str	r3, [sp, #28]
 800b1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b1fe:	4654      	mov	r4, sl
 800b200:	2205      	movs	r2, #5
 800b202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b206:	4858      	ldr	r0, [pc, #352]	; (800b368 <_vfiprintf_r+0x24c>)
 800b208:	f7ff f84e 	bl	800a2a8 <memchr>
 800b20c:	9a04      	ldr	r2, [sp, #16]
 800b20e:	b9d8      	cbnz	r0, 800b248 <_vfiprintf_r+0x12c>
 800b210:	06d1      	lsls	r1, r2, #27
 800b212:	bf44      	itt	mi
 800b214:	2320      	movmi	r3, #32
 800b216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b21a:	0713      	lsls	r3, r2, #28
 800b21c:	bf44      	itt	mi
 800b21e:	232b      	movmi	r3, #43	; 0x2b
 800b220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b224:	f89a 3000 	ldrb.w	r3, [sl]
 800b228:	2b2a      	cmp	r3, #42	; 0x2a
 800b22a:	d015      	beq.n	800b258 <_vfiprintf_r+0x13c>
 800b22c:	4654      	mov	r4, sl
 800b22e:	2000      	movs	r0, #0
 800b230:	f04f 0c0a 	mov.w	ip, #10
 800b234:	9a07      	ldr	r2, [sp, #28]
 800b236:	4621      	mov	r1, r4
 800b238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b23c:	3b30      	subs	r3, #48	; 0x30
 800b23e:	2b09      	cmp	r3, #9
 800b240:	d94e      	bls.n	800b2e0 <_vfiprintf_r+0x1c4>
 800b242:	b1b0      	cbz	r0, 800b272 <_vfiprintf_r+0x156>
 800b244:	9207      	str	r2, [sp, #28]
 800b246:	e014      	b.n	800b272 <_vfiprintf_r+0x156>
 800b248:	eba0 0308 	sub.w	r3, r0, r8
 800b24c:	fa09 f303 	lsl.w	r3, r9, r3
 800b250:	4313      	orrs	r3, r2
 800b252:	46a2      	mov	sl, r4
 800b254:	9304      	str	r3, [sp, #16]
 800b256:	e7d2      	b.n	800b1fe <_vfiprintf_r+0xe2>
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	1d19      	adds	r1, r3, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	9103      	str	r1, [sp, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfbb      	ittet	lt
 800b264:	425b      	neglt	r3, r3
 800b266:	f042 0202 	orrlt.w	r2, r2, #2
 800b26a:	9307      	strge	r3, [sp, #28]
 800b26c:	9307      	strlt	r3, [sp, #28]
 800b26e:	bfb8      	it	lt
 800b270:	9204      	strlt	r2, [sp, #16]
 800b272:	7823      	ldrb	r3, [r4, #0]
 800b274:	2b2e      	cmp	r3, #46	; 0x2e
 800b276:	d10c      	bne.n	800b292 <_vfiprintf_r+0x176>
 800b278:	7863      	ldrb	r3, [r4, #1]
 800b27a:	2b2a      	cmp	r3, #42	; 0x2a
 800b27c:	d135      	bne.n	800b2ea <_vfiprintf_r+0x1ce>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	3402      	adds	r4, #2
 800b282:	1d1a      	adds	r2, r3, #4
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	9203      	str	r2, [sp, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bfb8      	it	lt
 800b28c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b290:	9305      	str	r3, [sp, #20]
 800b292:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b36c <_vfiprintf_r+0x250>
 800b296:	2203      	movs	r2, #3
 800b298:	4650      	mov	r0, sl
 800b29a:	7821      	ldrb	r1, [r4, #0]
 800b29c:	f7ff f804 	bl	800a2a8 <memchr>
 800b2a0:	b140      	cbz	r0, 800b2b4 <_vfiprintf_r+0x198>
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	eba0 000a 	sub.w	r0, r0, sl
 800b2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b2ac:	9b04      	ldr	r3, [sp, #16]
 800b2ae:	3401      	adds	r4, #1
 800b2b0:	4303      	orrs	r3, r0
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b8:	2206      	movs	r2, #6
 800b2ba:	482d      	ldr	r0, [pc, #180]	; (800b370 <_vfiprintf_r+0x254>)
 800b2bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2c0:	f7fe fff2 	bl	800a2a8 <memchr>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d03f      	beq.n	800b348 <_vfiprintf_r+0x22c>
 800b2c8:	4b2a      	ldr	r3, [pc, #168]	; (800b374 <_vfiprintf_r+0x258>)
 800b2ca:	bb1b      	cbnz	r3, 800b314 <_vfiprintf_r+0x1f8>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	3307      	adds	r3, #7
 800b2d0:	f023 0307 	bic.w	r3, r3, #7
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	9303      	str	r3, [sp, #12]
 800b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2da:	443b      	add	r3, r7
 800b2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2de:	e767      	b.n	800b1b0 <_vfiprintf_r+0x94>
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2e8:	e7a5      	b.n	800b236 <_vfiprintf_r+0x11a>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f04f 0c0a 	mov.w	ip, #10
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	3401      	adds	r4, #1
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2fc:	3a30      	subs	r2, #48	; 0x30
 800b2fe:	2a09      	cmp	r2, #9
 800b300:	d903      	bls.n	800b30a <_vfiprintf_r+0x1ee>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0c5      	beq.n	800b292 <_vfiprintf_r+0x176>
 800b306:	9105      	str	r1, [sp, #20]
 800b308:	e7c3      	b.n	800b292 <_vfiprintf_r+0x176>
 800b30a:	4604      	mov	r4, r0
 800b30c:	2301      	movs	r3, #1
 800b30e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b312:	e7f0      	b.n	800b2f6 <_vfiprintf_r+0x1da>
 800b314:	ab03      	add	r3, sp, #12
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	462a      	mov	r2, r5
 800b31a:	4630      	mov	r0, r6
 800b31c:	4b16      	ldr	r3, [pc, #88]	; (800b378 <_vfiprintf_r+0x25c>)
 800b31e:	a904      	add	r1, sp, #16
 800b320:	f7fb fdce 	bl	8006ec0 <_printf_float>
 800b324:	4607      	mov	r7, r0
 800b326:	1c78      	adds	r0, r7, #1
 800b328:	d1d6      	bne.n	800b2d8 <_vfiprintf_r+0x1bc>
 800b32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b32c:	07d9      	lsls	r1, r3, #31
 800b32e:	d405      	bmi.n	800b33c <_vfiprintf_r+0x220>
 800b330:	89ab      	ldrh	r3, [r5, #12]
 800b332:	059a      	lsls	r2, r3, #22
 800b334:	d402      	bmi.n	800b33c <_vfiprintf_r+0x220>
 800b336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b338:	f7fe ff36 	bl	800a1a8 <__retarget_lock_release_recursive>
 800b33c:	89ab      	ldrh	r3, [r5, #12]
 800b33e:	065b      	lsls	r3, r3, #25
 800b340:	f53f af12 	bmi.w	800b168 <_vfiprintf_r+0x4c>
 800b344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b346:	e711      	b.n	800b16c <_vfiprintf_r+0x50>
 800b348:	ab03      	add	r3, sp, #12
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	462a      	mov	r2, r5
 800b34e:	4630      	mov	r0, r6
 800b350:	4b09      	ldr	r3, [pc, #36]	; (800b378 <_vfiprintf_r+0x25c>)
 800b352:	a904      	add	r1, sp, #16
 800b354:	f7fc f850 	bl	80073f8 <_printf_i>
 800b358:	e7e4      	b.n	800b324 <_vfiprintf_r+0x208>
 800b35a:	bf00      	nop
 800b35c:	0800ba24 	.word	0x0800ba24
 800b360:	0800ba44 	.word	0x0800ba44
 800b364:	0800ba04 	.word	0x0800ba04
 800b368:	0800bc3c 	.word	0x0800bc3c
 800b36c:	0800bc42 	.word	0x0800bc42
 800b370:	0800bc46 	.word	0x0800bc46
 800b374:	08006ec1 	.word	0x08006ec1
 800b378:	0800b0f7 	.word	0x0800b0f7

0800b37c <nan>:
 800b37c:	2000      	movs	r0, #0
 800b37e:	4901      	ldr	r1, [pc, #4]	; (800b384 <nan+0x8>)
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	7ff80000 	.word	0x7ff80000

0800b388 <_sbrk_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	2300      	movs	r3, #0
 800b38c:	4d05      	ldr	r5, [pc, #20]	; (800b3a4 <_sbrk_r+0x1c>)
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f7 f918 	bl	80025c8 <_sbrk>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_sbrk_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_sbrk_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20000ba8 	.word	0x20000ba8

0800b3a8 <__sread>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	f000 f912 	bl	800b5d8 <_read_r>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	bfab      	itete	ge
 800b3b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b3bc:	181b      	addge	r3, r3, r0
 800b3be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3c2:	bfac      	ite	ge
 800b3c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3c6:	81a3      	strhlt	r3, [r4, #12]
 800b3c8:	bd10      	pop	{r4, pc}

0800b3ca <__swrite>:
 800b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	461f      	mov	r7, r3
 800b3d0:	898b      	ldrh	r3, [r1, #12]
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	05db      	lsls	r3, r3, #23
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	4616      	mov	r6, r2
 800b3da:	d505      	bpl.n	800b3e8 <__swrite+0x1e>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e4:	f000 f890 	bl	800b508 <_lseek_r>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	463b      	mov	r3, r7
 800b3f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fe:	f000 b837 	b.w	800b470 <_write_r>

0800b402 <__sseek>:
 800b402:	b510      	push	{r4, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40a:	f000 f87d 	bl	800b508 <_lseek_r>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	bf15      	itete	ne
 800b414:	6560      	strne	r0, [r4, #84]	; 0x54
 800b416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b41a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b41e:	81a3      	strheq	r3, [r4, #12]
 800b420:	bf18      	it	ne
 800b422:	81a3      	strhne	r3, [r4, #12]
 800b424:	bd10      	pop	{r4, pc}

0800b426 <__sclose>:
 800b426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b42a:	f000 b83b 	b.w	800b4a4 <_close_r>

0800b42e <strncmp>:
 800b42e:	4603      	mov	r3, r0
 800b430:	b510      	push	{r4, lr}
 800b432:	b172      	cbz	r2, 800b452 <strncmp+0x24>
 800b434:	3901      	subs	r1, #1
 800b436:	1884      	adds	r4, r0, r2
 800b438:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b43c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b440:	4290      	cmp	r0, r2
 800b442:	d101      	bne.n	800b448 <strncmp+0x1a>
 800b444:	42a3      	cmp	r3, r4
 800b446:	d101      	bne.n	800b44c <strncmp+0x1e>
 800b448:	1a80      	subs	r0, r0, r2
 800b44a:	bd10      	pop	{r4, pc}
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d1f3      	bne.n	800b438 <strncmp+0xa>
 800b450:	e7fa      	b.n	800b448 <strncmp+0x1a>
 800b452:	4610      	mov	r0, r2
 800b454:	e7f9      	b.n	800b44a <strncmp+0x1c>

0800b456 <__ascii_wctomb>:
 800b456:	4603      	mov	r3, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	b141      	cbz	r1, 800b46e <__ascii_wctomb+0x18>
 800b45c:	2aff      	cmp	r2, #255	; 0xff
 800b45e:	d904      	bls.n	800b46a <__ascii_wctomb+0x14>
 800b460:	228a      	movs	r2, #138	; 0x8a
 800b462:	f04f 30ff 	mov.w	r0, #4294967295
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	4770      	bx	lr
 800b46a:	2001      	movs	r0, #1
 800b46c:	700a      	strb	r2, [r1, #0]
 800b46e:	4770      	bx	lr

0800b470 <_write_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	2200      	movs	r2, #0
 800b47a:	4d05      	ldr	r5, [pc, #20]	; (800b490 <_write_r+0x20>)
 800b47c:	602a      	str	r2, [r5, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	f7f7 f856 	bl	8002530 <_write>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d102      	bne.n	800b48e <_write_r+0x1e>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	b103      	cbz	r3, 800b48e <_write_r+0x1e>
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	bd38      	pop	{r3, r4, r5, pc}
 800b490:	20000ba8 	.word	0x20000ba8

0800b494 <abort>:
 800b494:	2006      	movs	r0, #6
 800b496:	b508      	push	{r3, lr}
 800b498:	f000 f8d8 	bl	800b64c <raise>
 800b49c:	2001      	movs	r0, #1
 800b49e:	f7f7 f820 	bl	80024e2 <_exit>
	...

0800b4a4 <_close_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4d05      	ldr	r5, [pc, #20]	; (800b4c0 <_close_r+0x1c>)
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f7 f85a 	bl	8002568 <_close>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_close_r+0x1a>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_close_r+0x1a>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20000ba8 	.word	0x20000ba8

0800b4c4 <_fstat_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	4d06      	ldr	r5, [pc, #24]	; (800b4e4 <_fstat_r+0x20>)
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	602b      	str	r3, [r5, #0]
 800b4d2:	f7f7 f854 	bl	800257e <_fstat>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	d102      	bne.n	800b4e0 <_fstat_r+0x1c>
 800b4da:	682b      	ldr	r3, [r5, #0]
 800b4dc:	b103      	cbz	r3, 800b4e0 <_fstat_r+0x1c>
 800b4de:	6023      	str	r3, [r4, #0]
 800b4e0:	bd38      	pop	{r3, r4, r5, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20000ba8 	.word	0x20000ba8

0800b4e8 <_isatty_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4d05      	ldr	r5, [pc, #20]	; (800b504 <_isatty_r+0x1c>)
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	602b      	str	r3, [r5, #0]
 800b4f4:	f7f7 f852 	bl	800259c <_isatty>
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d102      	bne.n	800b502 <_isatty_r+0x1a>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	b103      	cbz	r3, 800b502 <_isatty_r+0x1a>
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	20000ba8 	.word	0x20000ba8

0800b508 <_lseek_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	4611      	mov	r1, r2
 800b510:	2200      	movs	r2, #0
 800b512:	4d05      	ldr	r5, [pc, #20]	; (800b528 <_lseek_r+0x20>)
 800b514:	602a      	str	r2, [r5, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	f7f7 f84a 	bl	80025b0 <_lseek>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	d102      	bne.n	800b526 <_lseek_r+0x1e>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	b103      	cbz	r3, 800b526 <_lseek_r+0x1e>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	20000ba8 	.word	0x20000ba8

0800b52c <memmove>:
 800b52c:	4288      	cmp	r0, r1
 800b52e:	b510      	push	{r4, lr}
 800b530:	eb01 0402 	add.w	r4, r1, r2
 800b534:	d902      	bls.n	800b53c <memmove+0x10>
 800b536:	4284      	cmp	r4, r0
 800b538:	4623      	mov	r3, r4
 800b53a:	d807      	bhi.n	800b54c <memmove+0x20>
 800b53c:	1e43      	subs	r3, r0, #1
 800b53e:	42a1      	cmp	r1, r4
 800b540:	d008      	beq.n	800b554 <memmove+0x28>
 800b542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b54a:	e7f8      	b.n	800b53e <memmove+0x12>
 800b54c:	4601      	mov	r1, r0
 800b54e:	4402      	add	r2, r0
 800b550:	428a      	cmp	r2, r1
 800b552:	d100      	bne.n	800b556 <memmove+0x2a>
 800b554:	bd10      	pop	{r4, pc}
 800b556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b55a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b55e:	e7f7      	b.n	800b550 <memmove+0x24>

0800b560 <__malloc_lock>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__malloc_lock+0x8>)
 800b562:	f7fe be20 	b.w	800a1a6 <__retarget_lock_acquire_recursive>
 800b566:	bf00      	nop
 800b568:	20000b9c 	.word	0x20000b9c

0800b56c <__malloc_unlock>:
 800b56c:	4801      	ldr	r0, [pc, #4]	; (800b574 <__malloc_unlock+0x8>)
 800b56e:	f7fe be1b 	b.w	800a1a8 <__retarget_lock_release_recursive>
 800b572:	bf00      	nop
 800b574:	20000b9c 	.word	0x20000b9c

0800b578 <_realloc_r>:
 800b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	4680      	mov	r8, r0
 800b57e:	4614      	mov	r4, r2
 800b580:	460e      	mov	r6, r1
 800b582:	b921      	cbnz	r1, 800b58e <_realloc_r+0x16>
 800b584:	4611      	mov	r1, r2
 800b586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	f7ff bbcf 	b.w	800ad2c <_malloc_r>
 800b58e:	b92a      	cbnz	r2, 800b59c <_realloc_r+0x24>
 800b590:	f7ff fb64 	bl	800ac5c <_free_r>
 800b594:	4625      	mov	r5, r4
 800b596:	4628      	mov	r0, r5
 800b598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59c:	f000 f872 	bl	800b684 <_malloc_usable_size_r>
 800b5a0:	4284      	cmp	r4, r0
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	d802      	bhi.n	800b5ac <_realloc_r+0x34>
 800b5a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5aa:	d812      	bhi.n	800b5d2 <_realloc_r+0x5a>
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	f7ff fbbc 	bl	800ad2c <_malloc_r>
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d0ed      	beq.n	800b596 <_realloc_r+0x1e>
 800b5ba:	42bc      	cmp	r4, r7
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4631      	mov	r1, r6
 800b5c0:	bf28      	it	cs
 800b5c2:	463a      	movcs	r2, r7
 800b5c4:	f7fb fbc8 	bl	8006d58 <memcpy>
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	f7ff fb46 	bl	800ac5c <_free_r>
 800b5d0:	e7e1      	b.n	800b596 <_realloc_r+0x1e>
 800b5d2:	4635      	mov	r5, r6
 800b5d4:	e7df      	b.n	800b596 <_realloc_r+0x1e>
	...

0800b5d8 <_read_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4608      	mov	r0, r1
 800b5de:	4611      	mov	r1, r2
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	4d05      	ldr	r5, [pc, #20]	; (800b5f8 <_read_r+0x20>)
 800b5e4:	602a      	str	r2, [r5, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f7f6 ff85 	bl	80024f6 <_read>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_read_r+0x1e>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_read_r+0x1e>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	20000ba8 	.word	0x20000ba8

0800b5fc <_raise_r>:
 800b5fc:	291f      	cmp	r1, #31
 800b5fe:	b538      	push	{r3, r4, r5, lr}
 800b600:	4604      	mov	r4, r0
 800b602:	460d      	mov	r5, r1
 800b604:	d904      	bls.n	800b610 <_raise_r+0x14>
 800b606:	2316      	movs	r3, #22
 800b608:	6003      	str	r3, [r0, #0]
 800b60a:	f04f 30ff 	mov.w	r0, #4294967295
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b612:	b112      	cbz	r2, 800b61a <_raise_r+0x1e>
 800b614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b618:	b94b      	cbnz	r3, 800b62e <_raise_r+0x32>
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 f830 	bl	800b680 <_getpid_r>
 800b620:	462a      	mov	r2, r5
 800b622:	4601      	mov	r1, r0
 800b624:	4620      	mov	r0, r4
 800b626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b62a:	f000 b817 	b.w	800b65c <_kill_r>
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d00a      	beq.n	800b648 <_raise_r+0x4c>
 800b632:	1c59      	adds	r1, r3, #1
 800b634:	d103      	bne.n	800b63e <_raise_r+0x42>
 800b636:	2316      	movs	r3, #22
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	2001      	movs	r0, #1
 800b63c:	e7e7      	b.n	800b60e <_raise_r+0x12>
 800b63e:	2400      	movs	r4, #0
 800b640:	4628      	mov	r0, r5
 800b642:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b646:	4798      	blx	r3
 800b648:	2000      	movs	r0, #0
 800b64a:	e7e0      	b.n	800b60e <_raise_r+0x12>

0800b64c <raise>:
 800b64c:	4b02      	ldr	r3, [pc, #8]	; (800b658 <raise+0xc>)
 800b64e:	4601      	mov	r1, r0
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	f7ff bfd3 	b.w	800b5fc <_raise_r>
 800b656:	bf00      	nop
 800b658:	20000504 	.word	0x20000504

0800b65c <_kill_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	2300      	movs	r3, #0
 800b660:	4d06      	ldr	r5, [pc, #24]	; (800b67c <_kill_r+0x20>)
 800b662:	4604      	mov	r4, r0
 800b664:	4608      	mov	r0, r1
 800b666:	4611      	mov	r1, r2
 800b668:	602b      	str	r3, [r5, #0]
 800b66a:	f7f6 ff2a 	bl	80024c2 <_kill>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	d102      	bne.n	800b678 <_kill_r+0x1c>
 800b672:	682b      	ldr	r3, [r5, #0]
 800b674:	b103      	cbz	r3, 800b678 <_kill_r+0x1c>
 800b676:	6023      	str	r3, [r4, #0]
 800b678:	bd38      	pop	{r3, r4, r5, pc}
 800b67a:	bf00      	nop
 800b67c:	20000ba8 	.word	0x20000ba8

0800b680 <_getpid_r>:
 800b680:	f7f6 bf18 	b.w	80024b4 <_getpid>

0800b684 <_malloc_usable_size_r>:
 800b684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b688:	1f18      	subs	r0, r3, #4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bfbc      	itt	lt
 800b68e:	580b      	ldrlt	r3, [r1, r0]
 800b690:	18c0      	addlt	r0, r0, r3
 800b692:	4770      	bx	lr

0800b694 <_init>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	bf00      	nop
 800b698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69a:	bc08      	pop	{r3}
 800b69c:	469e      	mov	lr, r3
 800b69e:	4770      	bx	lr

0800b6a0 <_fini>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	bf00      	nop
 800b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a6:	bc08      	pop	{r3}
 800b6a8:	469e      	mov	lr, r3
 800b6aa:	4770      	bx	lr
