
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d33c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800d530  0800d530  0001d530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db60  0800db60  000207c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800db60  0800db60  000207c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db60  0800db60  000207c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db60  0800db60  0001db60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db64  0800db64  0001db64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c0  20000000  0800db68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200007c0  0800e328  000207c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cac  0800e328  00020cac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001642f  00000000  00000000  000207e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce9  00000000  00000000  00036c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fea3  00000000  00000000  0003d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c952  00000000  00000000  0005d24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac119  00000000  00000000  00079b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125cb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b8  00000000  00000000  00125d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200007c0 	.word	0x200007c0
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d514 	.word	0x0800d514

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200007c4 	.word	0x200007c4
 800022c:	0800d514 	.word	0x0800d514

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_fmul>:
 8000254:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000258:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800025c:	bf1e      	ittt	ne
 800025e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000262:	ea92 0f0c 	teqne	r2, ip
 8000266:	ea93 0f0c 	teqne	r3, ip
 800026a:	d06f      	beq.n	800034c <__aeabi_fmul+0xf8>
 800026c:	441a      	add	r2, r3
 800026e:	ea80 0c01 	eor.w	ip, r0, r1
 8000272:	0240      	lsls	r0, r0, #9
 8000274:	bf18      	it	ne
 8000276:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800027a:	d01e      	beq.n	80002ba <__aeabi_fmul+0x66>
 800027c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000280:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000284:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000288:	fba0 3101 	umull	r3, r1, r0, r1
 800028c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000290:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000294:	bf3e      	ittt	cc
 8000296:	0049      	lslcc	r1, r1, #1
 8000298:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800029c:	005b      	lslcc	r3, r3, #1
 800029e:	ea40 0001 	orr.w	r0, r0, r1
 80002a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002a6:	2afd      	cmp	r2, #253	; 0xfd
 80002a8:	d81d      	bhi.n	80002e6 <__aeabi_fmul+0x92>
 80002aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b2:	bf08      	it	eq
 80002b4:	f020 0001 	biceq.w	r0, r0, #1
 80002b8:	4770      	bx	lr
 80002ba:	f090 0f00 	teq	r0, #0
 80002be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002c2:	bf08      	it	eq
 80002c4:	0249      	lsleq	r1, r1, #9
 80002c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ce:	3a7f      	subs	r2, #127	; 0x7f
 80002d0:	bfc2      	ittt	gt
 80002d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002da:	4770      	bxgt	lr
 80002dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	3a01      	subs	r2, #1
 80002e6:	dc5d      	bgt.n	80003a4 <__aeabi_fmul+0x150>
 80002e8:	f112 0f19 	cmn.w	r2, #25
 80002ec:	bfdc      	itt	le
 80002ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002f2:	4770      	bxle	lr
 80002f4:	f1c2 0200 	rsb	r2, r2, #0
 80002f8:	0041      	lsls	r1, r0, #1
 80002fa:	fa21 f102 	lsr.w	r1, r1, r2
 80002fe:	f1c2 0220 	rsb	r2, r2, #32
 8000302:	fa00 fc02 	lsl.w	ip, r0, r2
 8000306:	ea5f 0031 	movs.w	r0, r1, rrx
 800030a:	f140 0000 	adc.w	r0, r0, #0
 800030e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000312:	bf08      	it	eq
 8000314:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000318:	4770      	bx	lr
 800031a:	f092 0f00 	teq	r2, #0
 800031e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000322:	bf02      	ittt	eq
 8000324:	0040      	lsleq	r0, r0, #1
 8000326:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800032a:	3a01      	subeq	r2, #1
 800032c:	d0f9      	beq.n	8000322 <__aeabi_fmul+0xce>
 800032e:	ea40 000c 	orr.w	r0, r0, ip
 8000332:	f093 0f00 	teq	r3, #0
 8000336:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800033a:	bf02      	ittt	eq
 800033c:	0049      	lsleq	r1, r1, #1
 800033e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000342:	3b01      	subeq	r3, #1
 8000344:	d0f9      	beq.n	800033a <__aeabi_fmul+0xe6>
 8000346:	ea41 010c 	orr.w	r1, r1, ip
 800034a:	e78f      	b.n	800026c <__aeabi_fmul+0x18>
 800034c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000350:	ea92 0f0c 	teq	r2, ip
 8000354:	bf18      	it	ne
 8000356:	ea93 0f0c 	teqne	r3, ip
 800035a:	d00a      	beq.n	8000372 <__aeabi_fmul+0x11e>
 800035c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000360:	bf18      	it	ne
 8000362:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000366:	d1d8      	bne.n	800031a <__aeabi_fmul+0xc6>
 8000368:	ea80 0001 	eor.w	r0, r0, r1
 800036c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000370:	4770      	bx	lr
 8000372:	f090 0f00 	teq	r0, #0
 8000376:	bf17      	itett	ne
 8000378:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800037c:	4608      	moveq	r0, r1
 800037e:	f091 0f00 	teqne	r1, #0
 8000382:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000386:	d014      	beq.n	80003b2 <__aeabi_fmul+0x15e>
 8000388:	ea92 0f0c 	teq	r2, ip
 800038c:	d101      	bne.n	8000392 <__aeabi_fmul+0x13e>
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	d10f      	bne.n	80003b2 <__aeabi_fmul+0x15e>
 8000392:	ea93 0f0c 	teq	r3, ip
 8000396:	d103      	bne.n	80003a0 <__aeabi_fmul+0x14c>
 8000398:	024b      	lsls	r3, r1, #9
 800039a:	bf18      	it	ne
 800039c:	4608      	movne	r0, r1
 800039e:	d108      	bne.n	80003b2 <__aeabi_fmul+0x15e>
 80003a0:	ea80 0001 	eor.w	r0, r0, r1
 80003a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003b0:	4770      	bx	lr
 80003b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003ba:	4770      	bx	lr

080003bc <__aeabi_drsub>:
 80003bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	e002      	b.n	80003c8 <__adddf3>
 80003c2:	bf00      	nop

080003c4 <__aeabi_dsub>:
 80003c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c8 <__adddf3>:
 80003c8:	b530      	push	{r4, r5, lr}
 80003ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	bf1f      	itttt	ne
 80003de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ee:	f000 80e2 	beq.w	80005b6 <__adddf3+0x1ee>
 80003f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fa:	bfb8      	it	lt
 80003fc:	426d      	neglt	r5, r5
 80003fe:	dd0c      	ble.n	800041a <__adddf3+0x52>
 8000400:	442c      	add	r4, r5
 8000402:	ea80 0202 	eor.w	r2, r0, r2
 8000406:	ea81 0303 	eor.w	r3, r1, r3
 800040a:	ea82 0000 	eor.w	r0, r2, r0
 800040e:	ea83 0101 	eor.w	r1, r3, r1
 8000412:	ea80 0202 	eor.w	r2, r0, r2
 8000416:	ea81 0303 	eor.w	r3, r1, r3
 800041a:	2d36      	cmp	r5, #54	; 0x36
 800041c:	bf88      	it	hi
 800041e:	bd30      	pophi	{r4, r5, pc}
 8000420:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000424:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000428:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800042c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000430:	d002      	beq.n	8000438 <__adddf3+0x70>
 8000432:	4240      	negs	r0, r0
 8000434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000438:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800043c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000440:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000444:	d002      	beq.n	800044c <__adddf3+0x84>
 8000446:	4252      	negs	r2, r2
 8000448:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044c:	ea94 0f05 	teq	r4, r5
 8000450:	f000 80a7 	beq.w	80005a2 <__adddf3+0x1da>
 8000454:	f1a4 0401 	sub.w	r4, r4, #1
 8000458:	f1d5 0e20 	rsbs	lr, r5, #32
 800045c:	db0d      	blt.n	800047a <__adddf3+0xb2>
 800045e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000462:	fa22 f205 	lsr.w	r2, r2, r5
 8000466:	1880      	adds	r0, r0, r2
 8000468:	f141 0100 	adc.w	r1, r1, #0
 800046c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000470:	1880      	adds	r0, r0, r2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	4159      	adcs	r1, r3
 8000478:	e00e      	b.n	8000498 <__adddf3+0xd0>
 800047a:	f1a5 0520 	sub.w	r5, r5, #32
 800047e:	f10e 0e20 	add.w	lr, lr, #32
 8000482:	2a01      	cmp	r2, #1
 8000484:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000488:	bf28      	it	cs
 800048a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048e:	fa43 f305 	asr.w	r3, r3, r5
 8000492:	18c0      	adds	r0, r0, r3
 8000494:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	d507      	bpl.n	80004ae <__adddf3+0xe6>
 800049e:	f04f 0e00 	mov.w	lr, #0
 80004a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b2:	d31b      	bcc.n	80004ec <__adddf3+0x124>
 80004b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b8:	d30c      	bcc.n	80004d4 <__adddf3+0x10c>
 80004ba:	0849      	lsrs	r1, r1, #1
 80004bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c4:	f104 0401 	add.w	r4, r4, #1
 80004c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d0:	f080 809a 	bcs.w	8000608 <__adddf3+0x240>
 80004d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d8:	bf08      	it	eq
 80004da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004de:	f150 0000 	adcs.w	r0, r0, #0
 80004e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e6:	ea41 0105 	orr.w	r1, r1, r5
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f0:	4140      	adcs	r0, r0
 80004f2:	eb41 0101 	adc.w	r1, r1, r1
 80004f6:	3c01      	subs	r4, #1
 80004f8:	bf28      	it	cs
 80004fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004fe:	d2e9      	bcs.n	80004d4 <__adddf3+0x10c>
 8000500:	f091 0f00 	teq	r1, #0
 8000504:	bf04      	itt	eq
 8000506:	4601      	moveq	r1, r0
 8000508:	2000      	moveq	r0, #0
 800050a:	fab1 f381 	clz	r3, r1
 800050e:	bf08      	it	eq
 8000510:	3320      	addeq	r3, #32
 8000512:	f1a3 030b 	sub.w	r3, r3, #11
 8000516:	f1b3 0220 	subs.w	r2, r3, #32
 800051a:	da0c      	bge.n	8000536 <__adddf3+0x16e>
 800051c:	320c      	adds	r2, #12
 800051e:	dd08      	ble.n	8000532 <__adddf3+0x16a>
 8000520:	f102 0c14 	add.w	ip, r2, #20
 8000524:	f1c2 020c 	rsb	r2, r2, #12
 8000528:	fa01 f00c 	lsl.w	r0, r1, ip
 800052c:	fa21 f102 	lsr.w	r1, r1, r2
 8000530:	e00c      	b.n	800054c <__adddf3+0x184>
 8000532:	f102 0214 	add.w	r2, r2, #20
 8000536:	bfd8      	it	le
 8000538:	f1c2 0c20 	rsble	ip, r2, #32
 800053c:	fa01 f102 	lsl.w	r1, r1, r2
 8000540:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000544:	bfdc      	itt	le
 8000546:	ea41 010c 	orrle.w	r1, r1, ip
 800054a:	4090      	lslle	r0, r2
 800054c:	1ae4      	subs	r4, r4, r3
 800054e:	bfa2      	ittt	ge
 8000550:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000554:	4329      	orrge	r1, r5
 8000556:	bd30      	popge	{r4, r5, pc}
 8000558:	ea6f 0404 	mvn.w	r4, r4
 800055c:	3c1f      	subs	r4, #31
 800055e:	da1c      	bge.n	800059a <__adddf3+0x1d2>
 8000560:	340c      	adds	r4, #12
 8000562:	dc0e      	bgt.n	8000582 <__adddf3+0x1ba>
 8000564:	f104 0414 	add.w	r4, r4, #20
 8000568:	f1c4 0220 	rsb	r2, r4, #32
 800056c:	fa20 f004 	lsr.w	r0, r0, r4
 8000570:	fa01 f302 	lsl.w	r3, r1, r2
 8000574:	ea40 0003 	orr.w	r0, r0, r3
 8000578:	fa21 f304 	lsr.w	r3, r1, r4
 800057c:	ea45 0103 	orr.w	r1, r5, r3
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	f1c4 040c 	rsb	r4, r4, #12
 8000586:	f1c4 0220 	rsb	r2, r4, #32
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 f304 	lsl.w	r3, r1, r4
 8000592:	ea40 0003 	orr.w	r0, r0, r3
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	fa21 f004 	lsr.w	r0, r1, r4
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	f094 0f00 	teq	r4, #0
 80005a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005aa:	bf06      	itte	eq
 80005ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b0:	3401      	addeq	r4, #1
 80005b2:	3d01      	subne	r5, #1
 80005b4:	e74e      	b.n	8000454 <__adddf3+0x8c>
 80005b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ba:	bf18      	it	ne
 80005bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c0:	d029      	beq.n	8000616 <__adddf3+0x24e>
 80005c2:	ea94 0f05 	teq	r4, r5
 80005c6:	bf08      	it	eq
 80005c8:	ea90 0f02 	teqeq	r0, r2
 80005cc:	d005      	beq.n	80005da <__adddf3+0x212>
 80005ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d2:	bf04      	itt	eq
 80005d4:	4619      	moveq	r1, r3
 80005d6:	4610      	moveq	r0, r2
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf1e      	ittt	ne
 80005e0:	2100      	movne	r1, #0
 80005e2:	2000      	movne	r0, #0
 80005e4:	bd30      	popne	{r4, r5, pc}
 80005e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ea:	d105      	bne.n	80005f8 <__adddf3+0x230>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	4149      	adcs	r1, r1
 80005f0:	bf28      	it	cs
 80005f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd30      	pop	{r4, r5, pc}
 80005f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005fc:	bf3c      	itt	cc
 80005fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000602:	bd30      	popcc	{r4, r5, pc}
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000608:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800060c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf1a      	itte	ne
 800061c:	4619      	movne	r1, r3
 800061e:	4610      	movne	r0, r2
 8000620:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000624:	bf1c      	itt	ne
 8000626:	460b      	movne	r3, r1
 8000628:	4602      	movne	r2, r0
 800062a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062e:	bf06      	itte	eq
 8000630:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000634:	ea91 0f03 	teqeq	r1, r3
 8000638:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	bf00      	nop

08000640 <__aeabi_ui2d>:
 8000640:	f090 0f00 	teq	r0, #0
 8000644:	bf04      	itt	eq
 8000646:	2100      	moveq	r1, #0
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000650:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000654:	f04f 0500 	mov.w	r5, #0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e750      	b.n	8000500 <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_i2d>:
 8000660:	f090 0f00 	teq	r0, #0
 8000664:	bf04      	itt	eq
 8000666:	2100      	moveq	r1, #0
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000670:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000674:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000678:	bf48      	it	mi
 800067a:	4240      	negmi	r0, r0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e73e      	b.n	8000500 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_f2d>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000692:	bf1f      	itttt	ne
 8000694:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000698:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800069c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a0:	4770      	bxne	lr
 80006a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006a6:	bf08      	it	eq
 80006a8:	4770      	bxeq	lr
 80006aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ae:	bf04      	itt	eq
 80006b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	e71c      	b.n	8000500 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_ul2d>:
 80006c8:	ea50 0201 	orrs.w	r2, r0, r1
 80006cc:	bf08      	it	eq
 80006ce:	4770      	bxeq	lr
 80006d0:	b530      	push	{r4, r5, lr}
 80006d2:	f04f 0500 	mov.w	r5, #0
 80006d6:	e00a      	b.n	80006ee <__aeabi_l2d+0x16>

080006d8 <__aeabi_l2d>:
 80006d8:	ea50 0201 	orrs.w	r2, r0, r1
 80006dc:	bf08      	it	eq
 80006de:	4770      	bxeq	lr
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e6:	d502      	bpl.n	80006ee <__aeabi_l2d+0x16>
 80006e8:	4240      	negs	r0, r0
 80006ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fa:	f43f aed8 	beq.w	80004ae <__adddf3+0xe6>
 80006fe:	f04f 0203 	mov.w	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000716:	f1c2 0320 	rsb	r3, r2, #32
 800071a:	fa00 fc03 	lsl.w	ip, r0, r3
 800071e:	fa20 f002 	lsr.w	r0, r0, r2
 8000722:	fa01 fe03 	lsl.w	lr, r1, r3
 8000726:	ea40 000e 	orr.w	r0, r0, lr
 800072a:	fa21 f102 	lsr.w	r1, r1, r2
 800072e:	4414      	add	r4, r2
 8000730:	e6bd      	b.n	80004ae <__adddf3+0xe6>
 8000732:	bf00      	nop

08000734 <__aeabi_dmul>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000742:	bf1d      	ittte	ne
 8000744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000748:	ea94 0f0c 	teqne	r4, ip
 800074c:	ea95 0f0c 	teqne	r5, ip
 8000750:	f000 f8de 	bleq	8000910 <__aeabi_dmul+0x1dc>
 8000754:	442c      	add	r4, r5
 8000756:	ea81 0603 	eor.w	r6, r1, r3
 800075a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800075e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000762:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000766:	bf18      	it	ne
 8000768:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000774:	d038      	beq.n	80007e8 <__aeabi_dmul+0xb4>
 8000776:	fba0 ce02 	umull	ip, lr, r0, r2
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000782:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000786:	fbe0 e503 	umlal	lr, r5, r0, r3
 800078a:	f04f 0600 	mov.w	r6, #0
 800078e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000792:	f09c 0f00 	teq	ip, #0
 8000796:	bf18      	it	ne
 8000798:	f04e 0e01 	orrne.w	lr, lr, #1
 800079c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a8:	d204      	bcs.n	80007b4 <__aeabi_dmul+0x80>
 80007aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ae:	416d      	adcs	r5, r5
 80007b0:	eb46 0606 	adc.w	r6, r6, r6
 80007b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007cc:	bf88      	it	hi
 80007ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007d2:	d81e      	bhi.n	8000812 <__aeabi_dmul+0xde>
 80007d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d8:	bf08      	it	eq
 80007da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007de:	f150 0000 	adcs.w	r0, r0, #0
 80007e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007ec:	ea46 0101 	orr.w	r1, r6, r1
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007fc:	bfc2      	ittt	gt
 80007fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000806:	bd70      	popgt	{r4, r5, r6, pc}
 8000808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800080c:	f04f 0e00 	mov.w	lr, #0
 8000810:	3c01      	subs	r4, #1
 8000812:	f300 80ab 	bgt.w	800096c <__aeabi_dmul+0x238>
 8000816:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800081a:	bfde      	ittt	le
 800081c:	2000      	movle	r0, #0
 800081e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000822:	bd70      	pople	{r4, r5, r6, pc}
 8000824:	f1c4 0400 	rsb	r4, r4, #0
 8000828:	3c20      	subs	r4, #32
 800082a:	da35      	bge.n	8000898 <__aeabi_dmul+0x164>
 800082c:	340c      	adds	r4, #12
 800082e:	dc1b      	bgt.n	8000868 <__aeabi_dmul+0x134>
 8000830:	f104 0414 	add.w	r4, r4, #20
 8000834:	f1c4 0520 	rsb	r5, r4, #32
 8000838:	fa00 f305 	lsl.w	r3, r0, r5
 800083c:	fa20 f004 	lsr.w	r0, r0, r4
 8000840:	fa01 f205 	lsl.w	r2, r1, r5
 8000844:	ea40 0002 	orr.w	r0, r0, r2
 8000848:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800084c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000854:	fa21 f604 	lsr.w	r6, r1, r4
 8000858:	eb42 0106 	adc.w	r1, r2, r6
 800085c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000860:	bf08      	it	eq
 8000862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f1c4 040c 	rsb	r4, r4, #12
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f304 	lsl.w	r3, r0, r4
 8000874:	fa20 f005 	lsr.w	r0, r0, r5
 8000878:	fa01 f204 	lsl.w	r2, r1, r4
 800087c:	ea40 0002 	orr.w	r0, r0, r2
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000888:	f141 0100 	adc.w	r1, r1, #0
 800088c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000890:	bf08      	it	eq
 8000892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f1c4 0520 	rsb	r5, r4, #32
 800089c:	fa00 f205 	lsl.w	r2, r0, r5
 80008a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80008a4:	fa20 f304 	lsr.w	r3, r0, r4
 80008a8:	fa01 f205 	lsl.w	r2, r1, r5
 80008ac:	ea43 0302 	orr.w	r3, r3, r2
 80008b0:	fa21 f004 	lsr.w	r0, r1, r4
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	fa21 f204 	lsr.w	r2, r1, r4
 80008bc:	ea20 0002 	bic.w	r0, r0, r2
 80008c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c8:	bf08      	it	eq
 80008ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f094 0f00 	teq	r4, #0
 80008d4:	d10f      	bne.n	80008f6 <__aeabi_dmul+0x1c2>
 80008d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008da:	0040      	lsls	r0, r0, #1
 80008dc:	eb41 0101 	adc.w	r1, r1, r1
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf08      	it	eq
 80008e6:	3c01      	subeq	r4, #1
 80008e8:	d0f7      	beq.n	80008da <__aeabi_dmul+0x1a6>
 80008ea:	ea41 0106 	orr.w	r1, r1, r6
 80008ee:	f095 0f00 	teq	r5, #0
 80008f2:	bf18      	it	ne
 80008f4:	4770      	bxne	lr
 80008f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	eb43 0303 	adc.w	r3, r3, r3
 8000900:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000904:	bf08      	it	eq
 8000906:	3d01      	subeq	r5, #1
 8000908:	d0f7      	beq.n	80008fa <__aeabi_dmul+0x1c6>
 800090a:	ea43 0306 	orr.w	r3, r3, r6
 800090e:	4770      	bx	lr
 8000910:	ea94 0f0c 	teq	r4, ip
 8000914:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000918:	bf18      	it	ne
 800091a:	ea95 0f0c 	teqne	r5, ip
 800091e:	d00c      	beq.n	800093a <__aeabi_dmul+0x206>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	d1d1      	bne.n	80008d0 <__aeabi_dmul+0x19c>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093e:	bf06      	itte	eq
 8000940:	4610      	moveq	r0, r2
 8000942:	4619      	moveq	r1, r3
 8000944:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000948:	d019      	beq.n	800097e <__aeabi_dmul+0x24a>
 800094a:	ea94 0f0c 	teq	r4, ip
 800094e:	d102      	bne.n	8000956 <__aeabi_dmul+0x222>
 8000950:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000954:	d113      	bne.n	800097e <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	d105      	bne.n	8000968 <__aeabi_dmul+0x234>
 800095c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000960:	bf1c      	itt	ne
 8000962:	4610      	movne	r0, r2
 8000964:	4619      	movne	r1, r3
 8000966:	d10a      	bne.n	800097e <__aeabi_dmul+0x24a>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000970:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000974:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000978:	f04f 0000 	mov.w	r0, #0
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000982:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000986:	bd70      	pop	{r4, r5, r6, pc}

08000988 <__aeabi_ddiv>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000992:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000996:	bf1d      	ittte	ne
 8000998:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800099c:	ea94 0f0c 	teqne	r4, ip
 80009a0:	ea95 0f0c 	teqne	r5, ip
 80009a4:	f000 f8a7 	bleq	8000af6 <__aeabi_ddiv+0x16e>
 80009a8:	eba4 0405 	sub.w	r4, r4, r5
 80009ac:	ea81 0e03 	eor.w	lr, r1, r3
 80009b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b8:	f000 8088 	beq.w	8000acc <__aeabi_ddiv+0x144>
 80009bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009e0:	429d      	cmp	r5, r3
 80009e2:	bf08      	it	eq
 80009e4:	4296      	cmpeq	r6, r2
 80009e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ee:	d202      	bcs.n	80009f6 <__aeabi_ddiv+0x6e>
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	1ab6      	subs	r6, r6, r2
 80009f8:	eb65 0503 	sbc.w	r5, r5, r3
 80009fc:	085b      	lsrs	r3, r3, #1
 80009fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a22:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2a:	bf22      	ittt	cs
 8000a2c:	1ab6      	subcs	r6, r6, r2
 8000a2e:	4675      	movcs	r5, lr
 8000a30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a42:	bf22      	ittt	cs
 8000a44:	1ab6      	subcs	r6, r6, r2
 8000a46:	4675      	movcs	r5, lr
 8000a48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a5a:	bf22      	ittt	cs
 8000a5c:	1ab6      	subcs	r6, r6, r2
 8000a5e:	4675      	movcs	r5, lr
 8000a60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a64:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a68:	d018      	beq.n	8000a9c <__aeabi_ddiv+0x114>
 8000a6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a86:	d1c0      	bne.n	8000a0a <__aeabi_ddiv+0x82>
 8000a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a8c:	d10b      	bne.n	8000aa6 <__aeabi_ddiv+0x11e>
 8000a8e:	ea41 0100 	orr.w	r1, r1, r0
 8000a92:	f04f 0000 	mov.w	r0, #0
 8000a96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a9a:	e7b6      	b.n	8000a0a <__aeabi_ddiv+0x82>
 8000a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000aa0:	bf04      	itt	eq
 8000aa2:	4301      	orreq	r1, r0
 8000aa4:	2000      	moveq	r0, #0
 8000aa6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aaa:	bf88      	it	hi
 8000aac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ab0:	f63f aeaf 	bhi.w	8000812 <__aeabi_dmul+0xde>
 8000ab4:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab8:	bf04      	itt	eq
 8000aba:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ac2:	f150 0000 	adcs.w	r0, r0, #0
 8000ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ad0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ad4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad8:	bfc2      	ittt	gt
 8000ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae8:	f04f 0e00 	mov.w	lr, #0
 8000aec:	3c01      	subs	r4, #1
 8000aee:	e690      	b.n	8000812 <__aeabi_dmul+0xde>
 8000af0:	ea45 0e06 	orr.w	lr, r5, r6
 8000af4:	e68d      	b.n	8000812 <__aeabi_dmul+0xde>
 8000af6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000afa:	ea94 0f0c 	teq	r4, ip
 8000afe:	bf08      	it	eq
 8000b00:	ea95 0f0c 	teqeq	r5, ip
 8000b04:	f43f af3b 	beq.w	800097e <__aeabi_dmul+0x24a>
 8000b08:	ea94 0f0c 	teq	r4, ip
 8000b0c:	d10a      	bne.n	8000b24 <__aeabi_ddiv+0x19c>
 8000b0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b12:	f47f af34 	bne.w	800097e <__aeabi_dmul+0x24a>
 8000b16:	ea95 0f0c 	teq	r5, ip
 8000b1a:	f47f af25 	bne.w	8000968 <__aeabi_dmul+0x234>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	e72c      	b.n	800097e <__aeabi_dmul+0x24a>
 8000b24:	ea95 0f0c 	teq	r5, ip
 8000b28:	d106      	bne.n	8000b38 <__aeabi_ddiv+0x1b0>
 8000b2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b2e:	f43f aefd 	beq.w	800092c <__aeabi_dmul+0x1f8>
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	e722      	b.n	800097e <__aeabi_dmul+0x24a>
 8000b38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b3c:	bf18      	it	ne
 8000b3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b42:	f47f aec5 	bne.w	80008d0 <__aeabi_dmul+0x19c>
 8000b46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b4a:	f47f af0d 	bne.w	8000968 <__aeabi_dmul+0x234>
 8000b4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b52:	f47f aeeb 	bne.w	800092c <__aeabi_dmul+0x1f8>
 8000b56:	e712      	b.n	800097e <__aeabi_dmul+0x24a>

08000b58 <__gedf2>:
 8000b58:	f04f 3cff 	mov.w	ip, #4294967295
 8000b5c:	e006      	b.n	8000b6c <__cmpdf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__ledf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	e002      	b.n	8000b6c <__cmpdf2+0x4>
 8000b66:	bf00      	nop

08000b68 <__cmpdf2>:
 8000b68:	f04f 0c01 	mov.w	ip, #1
 8000b6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b7c:	bf18      	it	ne
 8000b7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b82:	d01b      	beq.n	8000bbc <__cmpdf2+0x54>
 8000b84:	b001      	add	sp, #4
 8000b86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b8a:	bf0c      	ite	eq
 8000b8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b90:	ea91 0f03 	teqne	r1, r3
 8000b94:	bf02      	ittt	eq
 8000b96:	ea90 0f02 	teqeq	r0, r2
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	4770      	bxeq	lr
 8000b9e:	f110 0f00 	cmn.w	r0, #0
 8000ba2:	ea91 0f03 	teq	r1, r3
 8000ba6:	bf58      	it	pl
 8000ba8:	4299      	cmppl	r1, r3
 8000baa:	bf08      	it	eq
 8000bac:	4290      	cmpeq	r0, r2
 8000bae:	bf2c      	ite	cs
 8000bb0:	17d8      	asrcs	r0, r3, #31
 8000bb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bb6:	f040 0001 	orr.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__cmpdf2+0x64>
 8000bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bca:	d107      	bne.n	8000bdc <__cmpdf2+0x74>
 8000bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d1d6      	bne.n	8000b84 <__cmpdf2+0x1c>
 8000bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bda:	d0d3      	beq.n	8000b84 <__cmpdf2+0x1c>
 8000bdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_cdrcmple>:
 8000be4:	4684      	mov	ip, r0
 8000be6:	4610      	mov	r0, r2
 8000be8:	4662      	mov	r2, ip
 8000bea:	468c      	mov	ip, r1
 8000bec:	4619      	mov	r1, r3
 8000bee:	4663      	mov	r3, ip
 8000bf0:	e000      	b.n	8000bf4 <__aeabi_cdcmpeq>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_cdcmpeq>:
 8000bf4:	b501      	push	{r0, lr}
 8000bf6:	f7ff ffb7 	bl	8000b68 <__cmpdf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd01      	pop	{r0, pc}

08000c04 <__aeabi_dcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cdcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cdcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cdcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_dcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffce 	bl	8000be4 <__aeabi_cdrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc4 	bl	8000be4 <__aeabi_cdrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmpun>:
 8000c68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c70:	d102      	bne.n	8000c78 <__aeabi_dcmpun+0x10>
 8000c72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c76:	d10a      	bne.n	8000c8e <__aeabi_dcmpun+0x26>
 8000c78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c80:	d102      	bne.n	8000c88 <__aeabi_dcmpun+0x20>
 8000c82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c86:	d102      	bne.n	8000c8e <__aeabi_dcmpun+0x26>
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	f04f 0001 	mov.w	r0, #1
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_d2iz>:
 8000c94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c9c:	d215      	bcs.n	8000cca <__aeabi_d2iz+0x36>
 8000c9e:	d511      	bpl.n	8000cc4 <__aeabi_d2iz+0x30>
 8000ca0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca8:	d912      	bls.n	8000cd0 <__aeabi_d2iz+0x3c>
 8000caa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	bf18      	it	ne
 8000cc0:	4240      	negne	r0, r0
 8000cc2:	4770      	bx	lr
 8000cc4:	f04f 0000 	mov.w	r0, #0
 8000cc8:	4770      	bx	lr
 8000cca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cce:	d105      	bne.n	8000cdc <__aeabi_d2iz+0x48>
 8000cd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	bf08      	it	eq
 8000cd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cda:	4770      	bx	lr
 8000cdc:	f04f 0000 	mov.w	r0, #0
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_d2uiz>:
 8000ce4:	004a      	lsls	r2, r1, #1
 8000ce6:	d211      	bcs.n	8000d0c <__aeabi_d2uiz+0x28>
 8000ce8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cec:	d211      	bcs.n	8000d12 <__aeabi_d2uiz+0x2e>
 8000cee:	d50d      	bpl.n	8000d0c <__aeabi_d2uiz+0x28>
 8000cf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf8:	d40e      	bmi.n	8000d18 <__aeabi_d2uiz+0x34>
 8000cfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d06:	fa23 f002 	lsr.w	r0, r3, r2
 8000d0a:	4770      	bx	lr
 8000d0c:	f04f 0000 	mov.w	r0, #0
 8000d10:	4770      	bx	lr
 8000d12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d16:	d102      	bne.n	8000d1e <__aeabi_d2uiz+0x3a>
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_d2f>:
 8000d24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d2c:	bf24      	itt	cs
 8000d2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d36:	d90d      	bls.n	8000d54 <__aeabi_d2f+0x30>
 8000d38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d58:	d121      	bne.n	8000d9e <__aeabi_d2f+0x7a>
 8000d5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d5e:	bfbc      	itt	lt
 8000d60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d64:	4770      	bxlt	lr
 8000d66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d6e:	f1c2 0218 	rsb	r2, r2, #24
 8000d72:	f1c2 0c20 	rsb	ip, r2, #32
 8000d76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000d7e:	bf18      	it	ne
 8000d80:	f040 0001 	orrne.w	r0, r0, #1
 8000d84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d90:	ea40 000c 	orr.w	r0, r0, ip
 8000d94:	fa23 f302 	lsr.w	r3, r3, r2
 8000d98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d9c:	e7cc      	b.n	8000d38 <__aeabi_d2f+0x14>
 8000d9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000da2:	d107      	bne.n	8000db4 <__aeabi_d2f+0x90>
 8000da4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da8:	bf1e      	ittt	ne
 8000daa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000dae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000db2:	4770      	bxne	lr
 8000db4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_frsub>:
 8000dc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	e002      	b.n	8000dd0 <__addsf3>
 8000dca:	bf00      	nop

08000dcc <__aeabi_fsub>:
 8000dcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dd0 <__addsf3>:
 8000dd0:	0042      	lsls	r2, r0, #1
 8000dd2:	bf1f      	itttt	ne
 8000dd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd8:	ea92 0f03 	teqne	r2, r3
 8000ddc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000de0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de4:	d06a      	beq.n	8000ebc <__addsf3+0xec>
 8000de6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dee:	bfc1      	itttt	gt
 8000df0:	18d2      	addgt	r2, r2, r3
 8000df2:	4041      	eorgt	r1, r0
 8000df4:	4048      	eorgt	r0, r1
 8000df6:	4041      	eorgt	r1, r0
 8000df8:	bfb8      	it	lt
 8000dfa:	425b      	neglt	r3, r3
 8000dfc:	2b19      	cmp	r3, #25
 8000dfe:	bf88      	it	hi
 8000e00:	4770      	bxhi	lr
 8000e02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e0e:	bf18      	it	ne
 8000e10:	4240      	negne	r0, r0
 8000e12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e1e:	bf18      	it	ne
 8000e20:	4249      	negne	r1, r1
 8000e22:	ea92 0f03 	teq	r2, r3
 8000e26:	d03f      	beq.n	8000ea8 <__addsf3+0xd8>
 8000e28:	f1a2 0201 	sub.w	r2, r2, #1
 8000e2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000e30:	eb10 000c 	adds.w	r0, r0, ip
 8000e34:	f1c3 0320 	rsb	r3, r3, #32
 8000e38:	fa01 f103 	lsl.w	r1, r1, r3
 8000e3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__addsf3+0x78>
 8000e42:	4249      	negs	r1, r1
 8000e44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e4c:	d313      	bcc.n	8000e76 <__addsf3+0xa6>
 8000e4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e52:	d306      	bcc.n	8000e62 <__addsf3+0x92>
 8000e54:	0840      	lsrs	r0, r0, #1
 8000e56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e5a:	f102 0201 	add.w	r2, r2, #1
 8000e5e:	2afe      	cmp	r2, #254	; 0xfe
 8000e60:	d251      	bcs.n	8000f06 <__addsf3+0x136>
 8000e62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6a:	bf08      	it	eq
 8000e6c:	f020 0001 	biceq.w	r0, r0, #1
 8000e70:	ea40 0003 	orr.w	r0, r0, r3
 8000e74:	4770      	bx	lr
 8000e76:	0049      	lsls	r1, r1, #1
 8000e78:	eb40 0000 	adc.w	r0, r0, r0
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	bf28      	it	cs
 8000e80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e84:	d2ed      	bcs.n	8000e62 <__addsf3+0x92>
 8000e86:	fab0 fc80 	clz	ip, r0
 8000e8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000e92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e96:	bfaa      	itet	ge
 8000e98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e9c:	4252      	neglt	r2, r2
 8000e9e:	4318      	orrge	r0, r3
 8000ea0:	bfbc      	itt	lt
 8000ea2:	40d0      	lsrlt	r0, r2
 8000ea4:	4318      	orrlt	r0, r3
 8000ea6:	4770      	bx	lr
 8000ea8:	f092 0f00 	teq	r2, #0
 8000eac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000eb0:	bf06      	itte	eq
 8000eb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eb6:	3201      	addeq	r2, #1
 8000eb8:	3b01      	subne	r3, #1
 8000eba:	e7b5      	b.n	8000e28 <__addsf3+0x58>
 8000ebc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	bf18      	it	ne
 8000ec6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eca:	d021      	beq.n	8000f10 <__addsf3+0x140>
 8000ecc:	ea92 0f03 	teq	r2, r3
 8000ed0:	d004      	beq.n	8000edc <__addsf3+0x10c>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	bf08      	it	eq
 8000ed8:	4608      	moveq	r0, r1
 8000eda:	4770      	bx	lr
 8000edc:	ea90 0f01 	teq	r0, r1
 8000ee0:	bf1c      	itt	ne
 8000ee2:	2000      	movne	r0, #0
 8000ee4:	4770      	bxne	lr
 8000ee6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000eea:	d104      	bne.n	8000ef6 <__addsf3+0x126>
 8000eec:	0040      	lsls	r0, r0, #1
 8000eee:	bf28      	it	cs
 8000ef0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ef4:	4770      	bx	lr
 8000ef6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000efa:	bf3c      	itt	cc
 8000efc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bxcc	lr
 8000f02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f14:	bf16      	itet	ne
 8000f16:	4608      	movne	r0, r1
 8000f18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f1c:	4601      	movne	r1, r0
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	bf06      	itte	eq
 8000f22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f26:	ea90 0f01 	teqeq	r0, r1
 8000f2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_ui2f>:
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	e004      	b.n	8000f40 <__aeabi_i2f+0x8>
 8000f36:	bf00      	nop

08000f38 <__aeabi_i2f>:
 8000f38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f3c:	bf48      	it	mi
 8000f3e:	4240      	negmi	r0, r0
 8000f40:	ea5f 0c00 	movs.w	ip, r0
 8000f44:	bf08      	it	eq
 8000f46:	4770      	bxeq	lr
 8000f48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	e01c      	b.n	8000f8e <__aeabi_l2f+0x2a>

08000f54 <__aeabi_ul2f>:
 8000f54:	ea50 0201 	orrs.w	r2, r0, r1
 8000f58:	bf08      	it	eq
 8000f5a:	4770      	bxeq	lr
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e00a      	b.n	8000f78 <__aeabi_l2f+0x14>
 8000f62:	bf00      	nop

08000f64 <__aeabi_l2f>:
 8000f64:	ea50 0201 	orrs.w	r2, r0, r1
 8000f68:	bf08      	it	eq
 8000f6a:	4770      	bxeq	lr
 8000f6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	d502      	bpl.n	8000f78 <__aeabi_l2f+0x14>
 8000f72:	4240      	negs	r0, r0
 8000f74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f78:	ea5f 0c01 	movs.w	ip, r1
 8000f7c:	bf02      	ittt	eq
 8000f7e:	4684      	moveq	ip, r0
 8000f80:	4601      	moveq	r1, r0
 8000f82:	2000      	moveq	r0, #0
 8000f84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f88:	bf08      	it	eq
 8000f8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f92:	fabc f28c 	clz	r2, ip
 8000f96:	3a08      	subs	r2, #8
 8000f98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f9c:	db10      	blt.n	8000fc0 <__aeabi_l2f+0x5c>
 8000f9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa8:	f1c2 0220 	rsb	r2, r2, #32
 8000fac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb4:	eb43 0002 	adc.w	r0, r3, r2
 8000fb8:	bf08      	it	eq
 8000fba:	f020 0001 	biceq.w	r0, r0, #1
 8000fbe:	4770      	bx	lr
 8000fc0:	f102 0220 	add.w	r2, r2, #32
 8000fc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc8:	f1c2 0220 	rsb	r2, r2, #32
 8000fcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000fd4:	eb43 0002 	adc.w	r0, r3, r2
 8000fd8:	bf08      	it	eq
 8000fda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fde:	4770      	bx	lr

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_d2lz>:
 8001118:	b538      	push	{r3, r4, r5, lr}
 800111a:	4605      	mov	r5, r0
 800111c:	460c      	mov	r4, r1
 800111e:	2200      	movs	r2, #0
 8001120:	2300      	movs	r3, #0
 8001122:	4628      	mov	r0, r5
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff fd77 	bl	8000c18 <__aeabi_dcmplt>
 800112a:	b928      	cbnz	r0, 8001138 <__aeabi_d2lz+0x20>
 800112c:	4628      	mov	r0, r5
 800112e:	4621      	mov	r1, r4
 8001130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001134:	f000 b80a 	b.w	800114c <__aeabi_d2ulz>
 8001138:	4628      	mov	r0, r5
 800113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800113e:	f000 f805 	bl	800114c <__aeabi_d2ulz>
 8001142:	4240      	negs	r0, r0
 8001144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001148:	bd38      	pop	{r3, r4, r5, pc}
 800114a:	bf00      	nop

0800114c <__aeabi_d2ulz>:
 800114c:	b5d0      	push	{r4, r6, r7, lr}
 800114e:	2200      	movs	r2, #0
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <__aeabi_d2ulz+0x34>)
 8001152:	4606      	mov	r6, r0
 8001154:	460f      	mov	r7, r1
 8001156:	f7ff faed 	bl	8000734 <__aeabi_dmul>
 800115a:	f7ff fdc3 	bl	8000ce4 <__aeabi_d2uiz>
 800115e:	4604      	mov	r4, r0
 8001160:	f7ff fa6e 	bl	8000640 <__aeabi_ui2d>
 8001164:	2200      	movs	r2, #0
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <__aeabi_d2ulz+0x38>)
 8001168:	f7ff fae4 	bl	8000734 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4630      	mov	r0, r6
 8001172:	4639      	mov	r1, r7
 8001174:	f7ff f926 	bl	80003c4 <__aeabi_dsub>
 8001178:	f7ff fdb4 	bl	8000ce4 <__aeabi_d2uiz>
 800117c:	4621      	mov	r1, r4
 800117e:	bdd0      	pop	{r4, r6, r7, pc}
 8001180:	3df00000 	.word	0x3df00000
 8001184:	41f00000 	.word	0x41f00000

08001188 <InitMCC>:
extern int speedD;
extern int speedG;


void InitMCC()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <InitMCC+0x2c>)
 8001190:	f005 fc54 	bl	8006a3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001194:	2104      	movs	r1, #4
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <InitMCC+0x2c>)
 8001198:	f005 fc50 	bl	8006a3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800119c:	2108      	movs	r1, #8
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <InitMCC+0x2c>)
 80011a0:	f005 fc4c 	bl	8006a3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011a4:	210c      	movs	r1, #12
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <InitMCC+0x2c>)
 80011a8:	f005 fc48 	bl	8006a3c <HAL_TIM_PWM_Start>
	Stop();
 80011ac:	f000 f888 	bl	80012c0 <Stop>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200009a4 	.word	0x200009a4

080011b8 <Avancer>:

void Avancer(int vitesse)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2bc8      	cmp	r3, #200	; 0xc8
 80011c4:	dc02      	bgt.n	80011cc <Avancer+0x14>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da01      	bge.n	80011d0 <Avancer+0x18>
 80011cc:	f001 fe46 	bl	8002e5c <Error_Handler>
	TIM1->CCR1=vitesse;
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <Avancer+0x38>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <Avancer+0x38>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <Avancer+0x38>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 80011e2:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <Avancer+0x38>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40012c00 	.word	0x40012c00

080011f4 <AvancerPI>:

void AvancerPI(int moteur, int vitesse)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2bc8      	cmp	r3, #200	; 0xc8
 8001202:	dc02      	bgt.n	800120a <AvancerPI+0x16>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	da01      	bge.n	800120e <AvancerPI+0x1a>
 800120a:	f001 fe27 	bl	8002e5c <Error_Handler>
	if (moteur)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <AvancerPI+0x2e>
	{
		TIM1->CCR1=0;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <AvancerPI+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=vitesse;
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <AvancerPI+0x44>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM1->CCR3=0;
		TIM1->CCR4=vitesse;
	}
}
 8001220:	e005      	b.n	800122e <AvancerPI+0x3a>
		TIM1->CCR3=0;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <AvancerPI+0x44>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <AvancerPI+0x44>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40012c00 	.word	0x40012c00

0800123c <Reculer>:

void Reculer(int vitesse)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2bc8      	cmp	r3, #200	; 0xc8
 8001248:	dc02      	bgt.n	8001250 <Reculer+0x14>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da01      	bge.n	8001254 <Reculer+0x18>
 8001250:	f001 fe04 	bl	8002e5c <Error_Handler>
	TIM1->CCR1=0;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <Reculer+0x38>)
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <Reculer+0x38>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <Reculer+0x38>)
 8001262:	2200      	movs	r2, #0
 8001264:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 8001266:	4a03      	ldr	r2, [pc, #12]	; (8001274 <Reculer+0x38>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40012c00 	.word	0x40012c00

08001278 <ReculerPI>:

void ReculerPI(int moteur, int vitesse)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2bc8      	cmp	r3, #200	; 0xc8
 8001286:	dc02      	bgt.n	800128e <ReculerPI+0x16>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da01      	bge.n	8001292 <ReculerPI+0x1a>
 800128e:	f001 fde5 	bl	8002e5c <Error_Handler>
	if (moteur)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <ReculerPI+0x2e>
	{
		TIM1->CCR1=vitesse;
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <ReculerPI+0x44>)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <ReculerPI+0x44>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM1->CCR3=vitesse;
		TIM1->CCR4=0;
	}
}
 80012a4:	e005      	b.n	80012b2 <ReculerPI+0x3a>
		TIM1->CCR3=vitesse;
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <ReculerPI+0x44>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4=0;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <ReculerPI+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40012c00 	.word	0x40012c00

080012c0 <Stop>:

void Stop(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <Stop+0x24>)
 80012c6:	22c8      	movs	r2, #200	; 0xc8
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <Stop+0x24>)
 80012cc:	22c8      	movs	r2, #200	; 0xc8
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <Stop+0x24>)
 80012d2:	22c8      	movs	r2, #200	; 0xc8
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80012d6:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <Stop+0x24>)
 80012d8:	22c8      	movs	r2, #200	; 0xc8
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40012c00 	.word	0x40012c00

080012e8 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2bc8      	cmp	r3, #200	; 0xc8
 80012f6:	dc02      	bgt.n	80012fe <Tourner+0x16>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da01      	bge.n	8001302 <Tourner+0x1a>
 80012fe:	f001 fdad 	bl	8002e5c <Error_Handler>
	if(sens)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <Tourner+0x68>)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <Tourner+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <Tourner+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 800131a:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <Tourner+0x68>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8001320:	e011      	b.n	8001346 <Tourner+0x5e>
	else if(!sens)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10c      	bne.n	8001342 <Tourner+0x5a>
		    TIM1->CCR1=0;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <Tourner+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <Tourner+0x68>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <Tourner+0x68>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <Tourner+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001340:	e001      	b.n	8001346 <Tourner+0x5e>
	else Error_Handler();
 8001342:	f001 fd8b 	bl	8002e5c <Error_Handler>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012c00 	.word	0x40012c00

08001354 <ReadEncodeur>:

void ReadEncodeur()
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	tickD = Mid_Period_TIM2 - (TIM2->CNT);
 8001358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8001362:	337f      	adds	r3, #127	; 0x7f
 8001364:	461a      	mov	r2, r3
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <ReadEncodeur+0x40>)
 8001368:	601a      	str	r2, [r3, #0]
	TIM2->CNT = Mid_Period_TIM2;
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
	tickG = (TIM5->CNT) - Mid_Period_TIM5;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <ReadEncodeur+0x44>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800137c:	3b7f      	subs	r3, #127	; 0x7f
 800137e:	461a      	mov	r2, r3
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <ReadEncodeur+0x48>)
 8001382:	601a      	str	r2, [r3, #0]
	TIM5->CNT = Mid_Period_TIM5;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <ReadEncodeur+0x44>)
 8001386:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200008cc 	.word	0x200008cc
 8001398:	40000c00 	.word	0x40000c00
 800139c:	200008d4 	.word	0x200008d4

080013a0 <PIController_Init>:
 * @param struct pi
 *
 * @return None
 */
void PIController_Init(PIController *pi)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

	pi->integrator = 0.0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
	pi->prevError  = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]

	pi->out = 0.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

	pi->Kp = 1.0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c6:	601a      	str	r2, [r3, #0]
	pi->Ki = 0.5;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013ce:	605a      	str	r2, [r3, #4]

	pi->limMin_output = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
	pi->limMax_output = MAX_ARR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <PIController_Init+0x74>)
 80013dc:	60da      	str	r2, [r3, #12]

		/* Integrator limits */
	pi->limMin_integrator = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
	pi->limMax_integrator = MAX_ARR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <PIController_Init+0x74>)
 80013ea:	615a      	str	r2, [r3, #20]

		/* Sample time (in seconds) */
	pi->T = 0.1; // 10Hz frequence Tim1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <PIController_Init+0x78>)
 80013f0:	619a      	str	r2, [r3, #24]

		/* Controller "memory" */
	pi->integrator = 0.0;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
	pi->prevError = 0.0;		/* Required for integrator */
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	621a      	str	r2, [r3, #32]

		/* Controller output */
	pi->out = 0.0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	43480000 	.word	0x43480000
 8001418:	3dcccccd 	.word	0x3dcccccd

0800141c <PIController_Update>:
 * @param measurement
 *
 * @return None
 */
float PIController_Update(PIController *pi, float consigne, float measurement)
{
 800141c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]

    float error = consigne - measurement;
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f7ff fccd 	bl	8000dcc <__aeabi_fsub>
 8001432:	4603      	mov	r3, r0
 8001434:	617b      	str	r3, [r7, #20]

    float proportional = pi->Kp * error;	//Proportional
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	6978      	ldr	r0, [r7, #20]
 800143e:	f7fe ff09 	bl	8000254 <__aeabi_fmul>
 8001442:	4603      	mov	r3, r0
 8001444:	613b      	str	r3, [r7, #16]

    pi->integrator = pi->integrator + 0.5 * pi->Ki * pi->T * (error + pi->prevError);	//Integrator
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f91a 	bl	8000684 <__aeabi_f2d>
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f913 	bl	8000684 <__aeabi_f2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <PIController_Update+0x154>)
 8001464:	f7ff f966 	bl	8000734 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4690      	mov	r8, r2
 800146e:	4699      	mov	r9, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f905 	bl	8000684 <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4640      	mov	r0, r8
 8001480:	4649      	mov	r1, r9
 8001482:	f7ff f957 	bl	8000734 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4690      	mov	r8, r2
 800148c:	4699      	mov	r9, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc9b 	bl	8000dd0 <__addsf3>
 800149a:	4603      	mov	r3, r0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f8f1 	bl	8000684 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4640      	mov	r0, r8
 80014a8:	4649      	mov	r1, r9
 80014aa:	f7ff f943 	bl	8000734 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7fe ff87 	bl	80003c8 <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fc2f 	bl	8000d24 <__aeabi_d2f>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	61da      	str	r2, [r3, #28]

    if (pi->integrator > pi->limMax_integrator) pi->integrator = pi->limMax_integrator; //anti-wind-up par ecretage
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fdee 	bl	80010b8 <__aeabi_fcmpgt>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <PIController_Update+0xd0>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	61da      	str	r2, [r3, #28]
 80014ea:	e00e      	b.n	800150a <PIController_Update+0xee>
    else if (pi->integrator < pi->limMin_integrator) pi->integrator = pi->limMin_integrator;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f7ff fdc0 	bl	800107c <__aeabi_fcmplt>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <PIController_Update+0xee>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	61da      	str	r2, [r3, #28]


    pi->out = proportional + pi->integrator;	//Output
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	6939      	ldr	r1, [r7, #16]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc5d 	bl	8000dd0 <__addsf3>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pi->out > pi->limMax_output) pi->out = pi->limMax_output;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff fdc5 	bl	80010b8 <__aeabi_fcmpgt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <PIController_Update+0x122>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
 800153c:	e00e      	b.n	800155c <PIController_Update+0x140>
    else if (pi->out < pi->limMin_output) pi->out = pi->limMin_output;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f7ff fd97 	bl	800107c <__aeabi_fcmplt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <PIController_Update+0x140>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

    pi->prevError       = error;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	621a      	str	r2, [r3, #32]

    return pi->out;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001570:	3fe00000 	.word	0x3fe00000

08001574 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f640 0298 	movw	r2, #2200	; 0x898
 8001582:	4293      	cmp	r3, r2
 8001584:	dc08      	bgt.n	8001598 <ControlServo+0x24>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800158c:	db04      	blt.n	8001598 <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <ControlServo+0x30>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <ControlServo+0x26>
	}
	else
	{
		return 1;
 8001598:	2301      	movs	r3, #1
	}
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40000400 	.word	0x40000400

080015a8 <Debut_Test>:
#define DIST 3000
#define DELAY 1000
#define OFFSET_OUVERTURE_PINCE 1150

void Debut_Test()
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	start = (start+1)%2;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <Debut_Test+0x34>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	bfb8      	it	lt
 80015ba:	425b      	neglt	r3, r3
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <Debut_Test+0x34>)
 80015be:	6013      	str	r3, [r2, #0]
	X_odo = 0;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <Debut_Test+0x38>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
	Y_odo = 0;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <Debut_Test+0x3c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
	dist = 0;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <Debut_Test+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200007dc 	.word	0x200007dc
 80015e0:	200008c4 	.word	0x200008c4
 80015e4:	200008c8 	.word	0x200008c8
 80015e8:	200008c0 	.word	0x200008c0

080015ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_ADC1_Init+0x74>)
 80015fe:	4a19      	ldr	r2, [pc, #100]	; (8001664 <MX_ADC1_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_ADC1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_ADC1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_ADC1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_ADC1_Init+0x74>)
 8001616:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800161a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_ADC1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_ADC1_Init+0x74>)
 8001624:	2201      	movs	r2, #1
 8001626:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_ADC1_Init+0x74>)
 800162a:	f002 fd11 	bl	8004050 <HAL_ADC_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f001 fc12 	bl	8002e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001638:	2304      	movs	r3, #4
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800163c:	2301      	movs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_ADC1_Init+0x74>)
 800164a:	f002 fdeb 	bl	8004224 <HAL_ADC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001654:	f001 fc02 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200007e0 	.word	0x200007e0
 8001664:	40012400 	.word	0x40012400

08001668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_ADC_MspInit+0x98>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d137      	bne.n	80016f8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_ADC_MspInit+0x9c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 80016d0:	23f0      	movs	r3, #240	; 0xf0
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d4:	2303      	movs	r3, #3
 80016d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4619      	mov	r1, r3
 80016de:	480a      	ldr	r0, [pc, #40]	; (8001708 <HAL_ADC_MspInit+0xa0>)
 80016e0:	f003 f92a 	bl	8004938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 80016e4:	2303      	movs	r3, #3
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <HAL_ADC_MspInit+0xa4>)
 80016f4:	f003 f920 	bl	8004938 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40012400 	.word	0x40012400
 8001704:	40021000 	.word	0x40021000
 8001708:	40010800 	.word	0x40010800
 800170c:	40010c00 	.word	0x40010c00

08001710 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fd09 	bl	8002130 <initSensor>
 800171e:	4603      	mov	r3, r0

} /* tofInit() */
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 8001732:	1dfa      	adds	r2, r7, #7
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	2152      	movs	r1, #82	; 0x52
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <readReg16+0x48>)
 8001740:	f003 fd18 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, ucTemp, 2, 1000);
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2302      	movs	r3, #2
 8001750:	2153      	movs	r1, #83	; 0x53
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <readReg16+0x48>)
 8001754:	f003 fe0c 	bl	8005370 <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8001758:	7b3b      	ldrb	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b29a      	uxth	r2, r3
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4413      	add	r3, r2
 8001766:	b29b      	uxth	r3, r3
} /* readReg16() */
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000818 	.word	0x20000818

08001774 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 800177e:	1dfa      	adds	r2, r7, #7
 8001780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2301      	movs	r3, #1
 8001788:	2152      	movs	r1, #82	; 0x52
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <readReg+0x3c>)
 800178c:	f003 fcf2 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001790:	f107 020f 	add.w	r2, r7, #15
 8001794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	2153      	movs	r1, #83	; 0x53
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <readReg+0x3c>)
 80017a0:	f003 fde6 	bl	8005370 <HAL_I2C_Master_Receive>

	return ucTemp;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000818 	.word	0x20000818

080017b4 <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 80017c4:	1dfa      	adds	r2, r7, #7
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	2152      	movs	r1, #82	; 0x52
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <readMulti+0x3c>)
 80017d2:	f003 fccf 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, pBuf, iCount, 1000);
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	2153      	movs	r1, #83	; 0x53
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <readMulti+0x3c>)
 80017e4:	f003 fdc4 	bl	8005370 <HAL_I2C_Master_Receive>
} /* readMulti() */
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000818 	.word	0x20000818

080017f4 <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 80017f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f8:	b087      	sub	sp, #28
 80017fa:	af02      	add	r7, sp, #8
 80017fc:	4603      	mov	r3, r0
 80017fe:	6039      	str	r1, [r7, #0]
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	4613      	mov	r3, r2
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	466b      	mov	r3, sp
 8001808:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	1e4b      	subs	r3, r1, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	460a      	mov	r2, r1
 8001814:	2300      	movs	r3, #0
 8001816:	4690      	mov	r8, r2
 8001818:	4699      	mov	r9, r3
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182e:	460a      	mov	r2, r1
 8001830:	2300      	movs	r3, #0
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	00eb      	lsls	r3, r5, #3
 8001840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001844:	00e2      	lsls	r2, r4, #3
 8001846:	460b      	mov	r3, r1
 8001848:	3307      	adds	r3, #7
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	ebad 0d03 	sub.w	sp, sp, r3
 8001852:	ab02      	add	r3, sp, #8
 8001854:	3300      	adds	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3301      	adds	r3, #1
 8001862:	88ba      	ldrh	r2, [r7, #4]
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f007 f99e 	bl	8008ba8 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucTemp, iCount+1, 1000);
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	b29b      	uxth	r3, r3
 8001872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	2152      	movs	r1, #82	; 0x52
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <writeMulti+0x9c>)
 800187e:	f003 fc79 	bl	8005174 <HAL_I2C_Master_Transmit>
 8001882:	46b5      	mov	sp, r6
} /* writeMulti() */
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800188e:	bf00      	nop
 8001890:	20000818 	.word	0x20000818

08001894 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af02      	add	r7, sp, #8
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	4613      	mov	r3, r2
 80018a2:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucTemp, 3, 1000);
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2303      	movs	r3, #3
 80018c4:	2152      	movs	r1, #82	; 0x52
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <writeReg16+0x40>)
 80018c8:	f003 fc54 	bl	8005174 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000818 	.word	0x20000818

080018d8 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucTemp, 2, 1000);
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2302      	movs	r3, #2
 80018fc:	2152      	movs	r1, #82	; 0x52
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <writeReg+0x34>)
 8001900:	f003 fc38 	bl	8005174 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000818 	.word	0x20000818

08001910 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8001922:	e00e      	b.n	8001942 <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucList, 2, 1000);
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2302      	movs	r3, #2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	2152      	movs	r1, #82	; 0x52
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <writeRegList+0x44>)
 8001932:	f003 fc1f 	bl	8005174 <HAL_I2C_Master_Transmit>
		ucList += 2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3302      	adds	r3, #2
 800193a:	607b      	str	r3, [r7, #4]
		ucCount--;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	3b01      	subs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ed      	bne.n	8001924 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000818 	.word	0x20000818

08001958 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 8001962:	482d      	ldr	r0, [pc, #180]	; (8001a18 <getSpadInfo+0xc0>)
 8001964:	f7ff ffd4 	bl	8001910 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001968:	2083      	movs	r0, #131	; 0x83
 800196a:	f7ff ff03 	bl	8001774 <readReg>
 800196e:	4603      	mov	r3, r0
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4619      	mov	r1, r3
 8001978:	2083      	movs	r0, #131	; 0x83
 800197a:	f7ff ffad 	bl	80018d8 <writeReg>
  writeRegList(ucSPAD1);
 800197e:	4827      	ldr	r0, [pc, #156]	; (8001a1c <getSpadInfo+0xc4>)
 8001980:	f7ff ffc6 	bl	8001910 <writeRegList>
  iTimeout = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001988:	e00b      	b.n	80019a2 <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 800198a:	2083      	movs	r0, #131	; 0x83
 800198c:	f7ff fef2 	bl	8001774 <readReg>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <getSpadInfo+0x52>
    iTimeout++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 800199c:	2005      	movs	r0, #5
 800199e:	f002 fb33 	bl	8004008 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b31      	cmp	r3, #49	; 0x31
 80019a6:	ddf0      	ble.n	800198a <getSpadInfo+0x32>
 80019a8:	e000      	b.n	80019ac <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 80019aa:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b32      	cmp	r3, #50	; 0x32
 80019b0:	d101      	bne.n	80019b6 <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e02b      	b.n	8001a0e <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 80019b6:	2101      	movs	r1, #1
 80019b8:	2083      	movs	r0, #131	; 0x83
 80019ba:	f7ff ff8d 	bl	80018d8 <writeReg>
  ucTemp = readReg(0x92);
 80019be:	2092      	movs	r0, #146	; 0x92
 80019c0:	f7ff fed8 	bl	8001774 <readReg>
 80019c4:	4603      	mov	r3, r0
 80019c6:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2081      	movs	r0, #129	; 0x81
 80019e4:	f7ff ff78 	bl	80018d8 <writeReg>
  writeReg(0xff,0x06);
 80019e8:	2106      	movs	r1, #6
 80019ea:	20ff      	movs	r0, #255	; 0xff
 80019ec:	f7ff ff74 	bl	80018d8 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 80019f0:	2083      	movs	r0, #131	; 0x83
 80019f2:	f7ff febf 	bl	8001774 <readReg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	2083      	movs	r0, #131	; 0x83
 8001a02:	f7ff ff69 	bl	80018d8 <writeReg>
  writeRegList(ucSPAD2);
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <getSpadInfo+0xc8>)
 8001a08:	f7ff ff82 	bl	8001910 <writeRegList>

  return 1;
 8001a0c:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	20000020 	.word	0x20000020
 8001a20:	2000002c 	.word	0x2000002c

08001a24 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	0a12      	lsrs	r2, r2, #8
 8001a36:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	460a      	mov	r2, r1
 8001a56:	80fb      	strh	r3, [r7, #6]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001a5c:	797b      	ldrb	r3, [r7, #5]
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <timeoutMclksToMicroseconds+0x48>)
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <timeoutMclksToMicroseconds+0x4c>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	fb03 f202 	mul.w	r2, r3, r2
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <timeoutMclksToMicroseconds+0x4c>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	099b      	lsrs	r3, r3, #6
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	003a2f00 	.word	0x003a2f00
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <timeoutMicrosecondsToMclks+0x44>)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <timeoutMicrosecondsToMclks+0x48>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac4:	fb03 f202 	mul.w	r2, r3, r2
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	441a      	add	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	003a2f00 	.word	0x003a2f00
 8001ae4:	10624dd3 	.word	0x10624dd3

08001ae8 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d018      	beq.n	8001b32 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001b06:	e005      	b.n	8001b14 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	3301      	adds	r3, #1
 8001b12:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f4      	bne.n	8001b08 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	e000      	b.n	8001b34 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	6039      	str	r1, [r7, #0]
 8001b48:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001b4a:	2050      	movs	r0, #80	; 0x50
 8001b4c:	f7ff fe12 	bl	8001774 <readReg>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001b60:	2046      	movs	r0, #70	; 0x46
 8001b62:	f7ff fe07 	bl	8001774 <readReg>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f7ff ff64 	bl	8001a4c <timeoutMclksToMicroseconds>
 8001b84:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001b8a:	2051      	movs	r0, #81	; 0x51
 8001b8c:	f7ff fdcc 	bl	8001728 <readReg16>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff46 	bl	8001a24 <decodeTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff ff4d 	bl	8001a4c <timeoutMclksToMicroseconds>
 8001bb2:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001bb8:	2070      	movs	r0, #112	; 0x70
 8001bba:	f7ff fddb 	bl	8001774 <readReg>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001bce:	2071      	movs	r0, #113	; 0x71
 8001bd0:	f7ff fdaa 	bl	8001728 <readReg16>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff24 	bl	8001a24 <decodeTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	891a      	ldrh	r2, [r3, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	88db      	ldrh	r3, [r3, #6]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff ff1e 	bl	8001a4c <timeoutMclksToMicroseconds>
 8001c10:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7ff fd99 	bl	8001774 <readReg>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001c48:	f107 020c 	add.w	r2, r7, #12
 8001c4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff73 	bl	8001b3e <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d15c      	bne.n	8001d18 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001c5e:	79bb      	ldrb	r3, [r7, #6]
 8001c60:	3b0c      	subs	r3, #12
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d824      	bhi.n	8001cb0 <setVcselPulsePeriod+0x90>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <setVcselPulsePeriod+0x4c>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001c89 	.word	0x08001c89
 8001c70:	08001cb1 	.word	0x08001cb1
 8001c74:	08001c93 	.word	0x08001c93
 8001c78:	08001cb1 	.word	0x08001cb1
 8001c7c:	08001c9d 	.word	0x08001c9d
 8001c80:	08001cb1 	.word	0x08001cb1
 8001c84:	08001ca7 	.word	0x08001ca7
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001c88:	2118      	movs	r1, #24
 8001c8a:	2057      	movs	r0, #87	; 0x57
 8001c8c:	f7ff fe24 	bl	80018d8 <writeReg>
        break;
 8001c90:	e010      	b.n	8001cb4 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001c92:	2130      	movs	r1, #48	; 0x30
 8001c94:	2057      	movs	r0, #87	; 0x57
 8001c96:	f7ff fe1f 	bl	80018d8 <writeReg>
        break;
 8001c9a:	e00b      	b.n	8001cb4 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	2057      	movs	r0, #87	; 0x57
 8001ca0:	f7ff fe1a 	bl	80018d8 <writeReg>
        break;
 8001ca4:	e006      	b.n	8001cb4 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001ca6:	2150      	movs	r1, #80	; 0x50
 8001ca8:	2057      	movs	r0, #87	; 0x57
 8001caa:	f7ff fe15 	bl	80018d8 <writeReg>
        break;
 8001cae:	e001      	b.n	8001cb4 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e0fe      	b.n	8001eb2 <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	2056      	movs	r0, #86	; 0x56
 8001cb8:	f7ff fe0e 	bl	80018d8 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001cbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	2050      	movs	r0, #80	; 0x50
 8001cc4:	f7ff fe08 	bl	80018d8 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	79ba      	ldrb	r2, [r7, #6]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fee4 	bl	8001a9c <timeoutMicrosecondsToMclks>
 8001cd4:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001cd6:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001cd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff04 	bl	8001ae8 <encodeTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2051      	movs	r0, #81	; 0x51
 8001ce6:	f7ff fdd5 	bl	8001894 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	79ba      	ldrb	r2, [r7, #6]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fed3 	bl	8001a9c <timeoutMicrosecondsToMclks>
 8001cf6:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001cf8:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001cfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d00:	d804      	bhi.n	8001d0c <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d04:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e000      	b.n	8001d0e <setVcselPulsePeriod+0xee>
 8001d0c:	23ff      	movs	r3, #255	; 0xff
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2046      	movs	r0, #70	; 0x46
 8001d12:	f7ff fde1 	bl	80018d8 <writeReg>
 8001d16:	e0b3      	b.n	8001e80 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	f040 80ae 	bne.w	8001e7c <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	3b08      	subs	r3, #8
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	f200 8085 	bhi.w	8001e34 <setVcselPulsePeriod+0x214>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <setVcselPulsePeriod+0x110>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001d4d 	.word	0x08001d4d
 8001d34:	08001e35 	.word	0x08001e35
 8001d38:	08001d87 	.word	0x08001d87
 8001d3c:	08001e35 	.word	0x08001e35
 8001d40:	08001dc1 	.word	0x08001dc1
 8001d44:	08001e35 	.word	0x08001e35
 8001d48:	08001dfb 	.word	0x08001dfb
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001d4c:	2110      	movs	r1, #16
 8001d4e:	2048      	movs	r0, #72	; 0x48
 8001d50:	f7ff fdc2 	bl	80018d8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001d54:	2108      	movs	r1, #8
 8001d56:	2047      	movs	r0, #71	; 0x47
 8001d58:	f7ff fdbe 	bl	80018d8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	2032      	movs	r0, #50	; 0x32
 8001d60:	f7ff fdba 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001d64:	210c      	movs	r1, #12
 8001d66:	2030      	movs	r0, #48	; 0x30
 8001d68:	f7ff fdb6 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x01);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	20ff      	movs	r0, #255	; 0xff
 8001d70:	f7ff fdb2 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001d74:	2130      	movs	r1, #48	; 0x30
 8001d76:	2030      	movs	r0, #48	; 0x30
 8001d78:	f7ff fdae 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x00);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	20ff      	movs	r0, #255	; 0xff
 8001d80:	f7ff fdaa 	bl	80018d8 <writeReg>
        break;
 8001d84:	e058      	b.n	8001e38 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001d86:	2128      	movs	r1, #40	; 0x28
 8001d88:	2048      	movs	r0, #72	; 0x48
 8001d8a:	f7ff fda5 	bl	80018d8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001d8e:	2108      	movs	r1, #8
 8001d90:	2047      	movs	r0, #71	; 0x47
 8001d92:	f7ff fda1 	bl	80018d8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001d96:	2103      	movs	r1, #3
 8001d98:	2032      	movs	r0, #50	; 0x32
 8001d9a:	f7ff fd9d 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001d9e:	2109      	movs	r1, #9
 8001da0:	2030      	movs	r0, #48	; 0x30
 8001da2:	f7ff fd99 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x01);
 8001da6:	2101      	movs	r1, #1
 8001da8:	20ff      	movs	r0, #255	; 0xff
 8001daa:	f7ff fd95 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001dae:	2120      	movs	r1, #32
 8001db0:	2030      	movs	r0, #48	; 0x30
 8001db2:	f7ff fd91 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x00);
 8001db6:	2100      	movs	r1, #0
 8001db8:	20ff      	movs	r0, #255	; 0xff
 8001dba:	f7ff fd8d 	bl	80018d8 <writeReg>
        break;
 8001dbe:	e03b      	b.n	8001e38 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001dc0:	2138      	movs	r1, #56	; 0x38
 8001dc2:	2048      	movs	r0, #72	; 0x48
 8001dc4:	f7ff fd88 	bl	80018d8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001dc8:	2108      	movs	r1, #8
 8001dca:	2047      	movs	r0, #71	; 0x47
 8001dcc:	f7ff fd84 	bl	80018d8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2032      	movs	r0, #50	; 0x32
 8001dd4:	f7ff fd80 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001dd8:	2108      	movs	r1, #8
 8001dda:	2030      	movs	r0, #48	; 0x30
 8001ddc:	f7ff fd7c 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x01);
 8001de0:	2101      	movs	r1, #1
 8001de2:	20ff      	movs	r0, #255	; 0xff
 8001de4:	f7ff fd78 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001de8:	2120      	movs	r1, #32
 8001dea:	2030      	movs	r0, #48	; 0x30
 8001dec:	f7ff fd74 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x00);
 8001df0:	2100      	movs	r1, #0
 8001df2:	20ff      	movs	r0, #255	; 0xff
 8001df4:	f7ff fd70 	bl	80018d8 <writeReg>
        break;
 8001df8:	e01e      	b.n	8001e38 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001dfa:	2148      	movs	r1, #72	; 0x48
 8001dfc:	2048      	movs	r0, #72	; 0x48
 8001dfe:	f7ff fd6b 	bl	80018d8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001e02:	2108      	movs	r1, #8
 8001e04:	2047      	movs	r0, #71	; 0x47
 8001e06:	f7ff fd67 	bl	80018d8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	2032      	movs	r0, #50	; 0x32
 8001e0e:	f7ff fd63 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001e12:	2107      	movs	r1, #7
 8001e14:	2030      	movs	r0, #48	; 0x30
 8001e16:	f7ff fd5f 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x01);
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	20ff      	movs	r0, #255	; 0xff
 8001e1e:	f7ff fd5b 	bl	80018d8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001e22:	2120      	movs	r1, #32
 8001e24:	2030      	movs	r0, #48	; 0x30
 8001e26:	f7ff fd57 	bl	80018d8 <writeReg>
        writeReg(0xFF, 0x00);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	20ff      	movs	r0, #255	; 0xff
 8001e2e:	f7ff fd53 	bl	80018d8 <writeReg>
        break;
 8001e32:	e001      	b.n	8001e38 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e03c      	b.n	8001eb2 <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001e38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2070      	movs	r0, #112	; 0x70
 8001e40:	f7ff fd4a 	bl	80018d8 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	79ba      	ldrb	r2, [r7, #6]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fe26 	bl	8001a9c <timeoutMicrosecondsToMclks>
 8001e50:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001e52:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001e54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001e60:	8a7a      	ldrh	r2, [r7, #18]
 8001e62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e64:	4413      	add	r3, r2
 8001e66:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001e68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fe3c 	bl	8001ae8 <encodeTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	2071      	movs	r0, #113	; 0x71
 8001e76:	f7ff fd0d 	bl	8001894 <writeReg16>
 8001e7a:	e001      	b.n	8001e80 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e018      	b.n	8001eb2 <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <setVcselPulsePeriod+0x29c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f81b 	bl	8001ec0 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff fc72 	bl	8001774 <readReg>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001e96:	2102      	movs	r1, #2
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7ff fd1d 	bl	80018d8 <writeReg>
  performSingleRefCalibration(0x0);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f916 	bl	80020d0 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8001ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff fd14 	bl	80018d8 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3730      	adds	r7, #48	; 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000814 	.word	0x20000814

08001ec0 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b090      	sub	sp, #64	; 0x40
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001ec8:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001ecc:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 8001ece:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ed2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8001ed4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001ed8:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8001eda:	f240 234e 	movw	r3, #590	; 0x24e
 8001ede:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8001ee0:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001ee4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8001ee6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001eea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8001eec:	f240 2326 	movw	r3, #550	; 0x226
 8001ef0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8001ef2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d201      	bcs.n	8001f04 <setMeasurementTimingBudget+0x44>
 8001f00:	2300      	movs	r3, #0
 8001f02:	e074      	b.n	8001fee <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8001f04:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001f06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f08:	4413      	add	r3, r2
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fc31 	bl	8001774 <readReg>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8001f18:	f107 0208 	add.w	r2, r7, #8
 8001f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe0b 	bl	8001b3e <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f38:	4413      	add	r3, r2
 8001f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f3c:	4413      	add	r3, r2
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8001f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f56:	4413      	add	r3, r2
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5a:	e00b      	b.n	8001f74 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8001f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f6c:	4413      	add	r3, r2
 8001f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f70:	4413      	add	r3, r2
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f84:	4413      	add	r3, r2
 8001f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f88:	4413      	add	r3, r2
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8001f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da2b      	bge.n	8001fec <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8001f94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f98:	4413      	add	r3, r2
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d901      	bls.n	8001fa8 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e022      	b.n	8001fee <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001fb0:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6a38      	ldr	r0, [r7, #32]
 8001fb8:	f7ff fd70 	bl	8001a9c <timeoutMicrosecondsToMclks>
 8001fbc:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8001fbe:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001fcc:	89fa      	ldrh	r2, [r7, #14]
 8001fce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001fd0:	4413      	add	r3, r2
 8001fd2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001fd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fd86 	bl	8001ae8 <encodeTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	2071      	movs	r0, #113	; 0x71
 8001fe2:	f7ff fc57 	bl	8001894 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <setMeasurementTimingBudget+0x138>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3740      	adds	r7, #64	; 0x40
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000814 	.word	0x20000814

08001ffc <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8002002:	f240 7376 	movw	r3, #1910	; 0x776
 8002006:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8002008:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800200c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 800200e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002012:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8002014:	f240 234e 	movw	r3, #590	; 0x24e
 8002018:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 800201a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800201e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8002020:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002024:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8002026:	f240 2326 	movw	r3, #550	; 0x226
 800202a:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 800202c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800202e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002030:	4413      	add	r3, r2
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff fb9d 	bl	8001774 <readReg>
 800203a:	4603      	mov	r3, r0
 800203c:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 800203e:	1d3a      	adds	r2, r7, #4
 8002040:	7f7b      	ldrb	r3, [r7, #29]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fd7a 	bl	8001b3e <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 800204a:	7f7b      	ldrb	r3, [r7, #29]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002058:	4413      	add	r3, r2
 800205a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205c:	4413      	add	r3, r2
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002060:	7f7b      	ldrb	r3, [r7, #29]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800206e:	4413      	add	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002074:	4413      	add	r3, r2
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002078:	e00a      	b.n	8002090 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 800207a:	7f7b      	ldrb	r3, [r7, #29]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002088:	4413      	add	r3, r2
 800208a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208c:	4413      	add	r3, r2
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002090:	7f7b      	ldrb	r3, [r7, #29]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	8c3b      	ldrh	r3, [r7, #32]
 800209e:	4413      	add	r3, r2
 80020a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a2:	4413      	add	r3, r2
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 80020a6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da05      	bge.n	80020ba <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	8bfb      	ldrh	r3, [r7, #30]
 80020b2:	4413      	add	r3, r2
 80020b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b6:	4413      	add	r3, r2
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <getMeasurementTimingBudget+0xd0>)
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	6013      	str	r3, [r2, #0]
  return budget_us;
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3730      	adds	r7, #48	; 0x30
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000814 	.word	0x20000814

080020d0 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fbf7 	bl	80018d8 <writeReg>

  iTimeout = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80020ee:	e00a      	b.n	8002106 <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 80020f6:	2005      	movs	r0, #5
 80020f8:	f001 ff86 	bl	8004008 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	dd01      	ble.n	8002106 <performSingleRefCalibration+0x36>
 8002102:	2300      	movs	r3, #0
 8002104:	e010      	b.n	8002128 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002106:	2013      	movs	r0, #19
 8002108:	f7ff fb34 	bl	8001774 <readReg>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0ec      	beq.n	80020f0 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002116:	2101      	movs	r1, #1
 8002118:	200b      	movs	r0, #11
 800211a:	f7ff fbdd 	bl	80018d8 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800211e:	2100      	movs	r1, #0
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff fbd9 	bl	80018d8 <writeReg>

  return 1;
 8002126:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8002138:	2300      	movs	r3, #0
 800213a:	75bb      	strb	r3, [r7, #22]
 800213c:	2300      	movs	r3, #0
 800213e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8002140:	2089      	movs	r0, #137	; 0x89
 8002142:	f7ff fb17 	bl	8001774 <readReg>
 8002146:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4619      	mov	r1, r3
 8002150:	2089      	movs	r0, #137	; 0x89
 8002152:	f7ff fbc1 	bl	80018d8 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8002156:	486a      	ldr	r0, [pc, #424]	; (8002300 <initSensor+0x1d0>)
 8002158:	f7ff fbda 	bl	8001910 <writeRegList>
  stop_variable = readReg(0x91);
 800215c:	2091      	movs	r0, #145	; 0x91
 800215e:	f7ff fb09 	bl	8001774 <readReg>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <initSensor+0x1d4>)
 8002168:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 800216a:	4867      	ldr	r0, [pc, #412]	; (8002308 <initSensor+0x1d8>)
 800216c:	f7ff fbd0 	bl	8001910 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8002170:	2060      	movs	r0, #96	; 0x60
 8002172:	f7ff faff 	bl	8001774 <readReg>
 8002176:	4603      	mov	r3, r0
 8002178:	f043 0312 	orr.w	r3, r3, #18
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	2060      	movs	r0, #96	; 0x60
 8002182:	f7ff fba9 	bl	80018d8 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8002186:	2120      	movs	r1, #32
 8002188:	2044      	movs	r0, #68	; 0x44
 800218a:	f7ff fb83 	bl	8001894 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800218e:	21ff      	movs	r1, #255	; 0xff
 8002190:	2001      	movs	r0, #1
 8002192:	f7ff fba1 	bl	80018d8 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8002196:	f107 0215 	add.w	r2, r7, #21
 800219a:	f107 0316 	add.w	r3, r7, #22
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fbd9 	bl	8001958 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	2206      	movs	r2, #6
 80021ac:	4619      	mov	r1, r3
 80021ae:	20b0      	movs	r0, #176	; 0xb0
 80021b0:	f7ff fb00 	bl	80017b4 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 80021b4:	4855      	ldr	r0, [pc, #340]	; (800230c <initSensor+0x1dc>)
 80021b6:	f7ff fbab 	bl	8001910 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 80021ba:	7d7b      	ldrb	r3, [r7, #21]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <initSensor+0x94>
 80021c0:	230c      	movs	r3, #12
 80021c2:	e000      	b.n	80021c6 <initSensor+0x96>
 80021c4:	2300      	movs	r3, #0
 80021c6:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e037      	b.n	8002242 <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	db03      	blt.n	80021e2 <initSensor+0xb2>
 80021da:	7dbb      	ldrb	r3, [r7, #22]
 80021dc:	7ffa      	ldrb	r2, [r7, #31]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d119      	bne.n	8002216 <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	10db      	asrs	r3, r3, #3
 80021e6:	3320      	adds	r3, #32
 80021e8:	443b      	add	r3, r7
 80021ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80021ee:	b25a      	sxtb	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	b25b      	sxtb	r3, r3
 8002202:	4013      	ands	r3, r2
 8002204:	b25a      	sxtb	r2, r3
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	10db      	asrs	r3, r3, #3
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	3320      	adds	r3, #32
 800220e:	443b      	add	r3, r7
 8002210:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002214:	e012      	b.n	800223c <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	10db      	asrs	r3, r3, #3
 800221a:	3320      	adds	r3, #32
 800221c:	443b      	add	r3, r7
 800221e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002222:	461a      	mov	r2, r3
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	fa42 f303 	asr.w	r3, r2, r3
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	3301      	adds	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	3301      	adds	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b2f      	cmp	r3, #47	; 0x2f
 8002246:	ddc4      	ble.n	80021d2 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	2206      	movs	r2, #6
 800224e:	4619      	mov	r1, r3
 8002250:	20b0      	movs	r0, #176	; 0xb0
 8002252:	f7ff facf 	bl	80017f4 <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 8002256:	482e      	ldr	r0, [pc, #184]	; (8002310 <initSensor+0x1e0>)
 8002258:	f7ff fb5a 	bl	8001910 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 8002262:	210d      	movs	r1, #13
 8002264:	2044      	movs	r0, #68	; 0x44
 8002266:	f7ff fb15 	bl	8001894 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 800226a:	2112      	movs	r1, #18
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff fcd7 	bl	8001c20 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8002272:	210e      	movs	r1, #14
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff fcd3 	bl	8001c20 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800227a:	2104      	movs	r1, #4
 800227c:	200a      	movs	r0, #10
 800227e:	f7ff fb2b 	bl	80018d8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8002282:	2084      	movs	r0, #132	; 0x84
 8002284:	f7ff fa76 	bl	8001774 <readReg>
 8002288:	4603      	mov	r3, r0
 800228a:	f023 0310 	bic.w	r3, r3, #16
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	2084      	movs	r0, #132	; 0x84
 8002294:	f7ff fb20 	bl	80018d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002298:	2101      	movs	r1, #1
 800229a:	200b      	movs	r0, #11
 800229c:	f7ff fb1c 	bl	80018d8 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 80022a0:	f7ff feac 	bl	8001ffc <getMeasurementTimingBudget>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <initSensor+0x1e4>)
 80022a8:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80022aa:	21e8      	movs	r1, #232	; 0xe8
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7ff fb13 	bl	80018d8 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <initSensor+0x1e4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fe02 	bl	8001ec0 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80022bc:	2101      	movs	r1, #1
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff fb0a 	bl	80018d8 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 80022c4:	2040      	movs	r0, #64	; 0x40
 80022c6:	f7ff ff03 	bl	80020d0 <performSingleRefCalibration>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <initSensor+0x1a4>
 80022d0:	2300      	movs	r3, #0
 80022d2:	e010      	b.n	80022f6 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80022d4:	2102      	movs	r1, #2
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff fafe 	bl	80018d8 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fef7 	bl	80020d0 <performSingleRefCalibration>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <initSensor+0x1bc>
 80022e8:	2300      	movs	r3, #0
 80022ea:	e004      	b.n	80022f6 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80022ec:	21e8      	movs	r1, #232	; 0xe8
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7ff faf2 	bl	80018d8 <writeReg>
  return 1;
 80022f4:	2301      	movs	r3, #1
} /* initSensor() */
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000
 8002304:	20000810 	.word	0x20000810
 8002308:	2000000c 	.word	0x2000000c
 800230c:	20000038 	.word	0x20000038
 8002310:	20000044 	.word	0x20000044
 8002314:	20000814 	.word	0x20000814

08002318 <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
int iTimeout = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002322:	bf00      	nop
 8002324:	2013      	movs	r0, #19
 8002326:	f7ff fa25 	bl	8001774 <readReg>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f7      	beq.n	8002324 <readRangeContinuousMillimeters+0xc>

  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 8002334:	201e      	movs	r0, #30
 8002336:	f7ff f9f7 	bl	8001728 <readReg16>
 800233a:	4603      	mov	r3, r0
 800233c:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800233e:	2101      	movs	r1, #1
 8002340:	200b      	movs	r0, #11
 8002342:	f7ff fac9 	bl	80018d8 <writeReg>

  return range;
 8002346:	887b      	ldrh	r3, [r7, #2]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
int iTimeout;

  writeReg(0x80, 0x01);
 8002356:	2101      	movs	r1, #1
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	f7ff fabd 	bl	80018d8 <writeReg>
  writeReg(0xFF, 0x01);
 800235e:	2101      	movs	r1, #1
 8002360:	20ff      	movs	r0, #255	; 0xff
 8002362:	f7ff fab9 	bl	80018d8 <writeReg>
  writeReg(0x00, 0x00);
 8002366:	2100      	movs	r1, #0
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fab5 	bl	80018d8 <writeReg>
  writeReg(0x91, stop_variable);
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <tofReadDistance+0x70>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	2091      	movs	r0, #145	; 0x91
 8002376:	f7ff faaf 	bl	80018d8 <writeReg>
  writeReg(0x00, 0x01);
 800237a:	2101      	movs	r1, #1
 800237c:	2000      	movs	r0, #0
 800237e:	f7ff faab 	bl	80018d8 <writeReg>
  writeReg(0xFF, 0x00);
 8002382:	2100      	movs	r1, #0
 8002384:	20ff      	movs	r0, #255	; 0xff
 8002386:	f7ff faa7 	bl	80018d8 <writeReg>
  writeReg(0x80, 0x00);
 800238a:	2100      	movs	r1, #0
 800238c:	2080      	movs	r0, #128	; 0x80
 800238e:	f7ff faa3 	bl	80018d8 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 8002392:	2101      	movs	r1, #1
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff fa9f 	bl	80018d8 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 800239e:	bf00      	nop
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff f9e7 	bl	8001774 <readReg>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f7      	bne.n	80023a0 <tofReadDistance+0x50>
	    }
	}

  }

  return readRangeContinuousMillimeters();
 80023b0:	f7ff ffb2 	bl	8002318 <readRangeContinuousMillimeters>
 80023b4:	4603      	mov	r3, r0

} /* tofReadDistance() */
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000810 	.word	0x20000810

080023c4 <tofGetModel>:

int tofGetModel(int *model, int *revision)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d019      	beq.n	8002408 <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 80023d4:	23c0      	movs	r3, #192	; 0xc0
 80023d6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 80023d8:	f107 020e 	add.w	r2, r7, #14
 80023dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	2152      	movs	r1, #82	; 0x52
 80023e6:	4819      	ldr	r0, [pc, #100]	; (800244c <tofGetModel+0x88>)
 80023e8:	f002 fec4 	bl	8005174 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80023ec:	f107 020f 	add.w	r2, r7, #15
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2301      	movs	r3, #1
 80023f8:	2153      	movs	r1, #83	; 0x53
 80023fa:	4814      	ldr	r0, [pc, #80]	; (800244c <tofGetModel+0x88>)
 80023fc:	f002 ffb8 	bl	8005370 <HAL_I2C_Master_Receive>
		*model = ucTemp;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 800240e:	23c2      	movs	r3, #194	; 0xc2
 8002410:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 8002412:	f107 020e 	add.w	r2, r7, #14
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2301      	movs	r3, #1
 800241e:	2152      	movs	r1, #82	; 0x52
 8002420:	480a      	ldr	r0, [pc, #40]	; (800244c <tofGetModel+0x88>)
 8002422:	f002 fea7 	bl	8005174 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8002426:	f107 020f 	add.w	r2, r7, #15
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	2153      	movs	r1, #83	; 0x53
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <tofGetModel+0x88>)
 8002436:	f002 ff9b 	bl	8005370 <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	461a      	mov	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	601a      	str	r2, [r3, #0]
	}
	return 1;
 8002442:	2301      	movs	r3, #1

} /* tofGetModel() */
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000818 	.word	0x20000818

08002450 <initTof>:
 * @brief Use to initialize the ToF sensor
 *
 * @return
 */
int initTof()
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
	int model = 0, revision = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, SET);
 800245e:	2201      	movs	r2, #1
 8002460:	2120      	movs	r1, #32
 8002462:	4821      	ldr	r0, [pc, #132]	; (80024e8 <initTof+0x98>)
 8002464:	f002 fcc8 	bl	8004df8 <HAL_GPIO_WritePin>
	while(I2C2->CR2==2)
 8002468:	e00d      	b.n	8002486 <initTof+0x36>
		{
		  while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 800246a:	bf00      	nop
 800246c:	481f      	ldr	r0, [pc, #124]	; (80024ec <initTof+0x9c>)
 800246e:	f002 fe51 	bl	8005114 <HAL_I2C_DeInit>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f9      	bne.n	800246c <initTof+0x1c>
		  while(HAL_I2C_Init(&hi2c1) != HAL_OK);
 8002478:	bf00      	nop
 800247a:	481c      	ldr	r0, [pc, #112]	; (80024ec <initTof+0x9c>)
 800247c:	f002 fd06 	bl	8004e8c <HAL_I2C_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f9      	bne.n	800247a <initTof+0x2a>
	while(I2C2->CR2==2)
 8002486:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <initTof+0xa0>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d0ed      	beq.n	800246a <initTof+0x1a>
		}

	tofInit(1); // set long range mode (up to 2m)
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff f93e 	bl	8001710 <tofInit>
	tofGetModel(&model, &revision);
 8002494:	463a      	mov	r2, r7
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff92 	bl	80023c4 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 80024a0:	e016      	b.n	80024d0 <initTof+0x80>
	{
	while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 80024a2:	bf00      	nop
 80024a4:	4811      	ldr	r0, [pc, #68]	; (80024ec <initTof+0x9c>)
 80024a6:	f002 fe35 	bl	8005114 <HAL_I2C_DeInit>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f9      	bne.n	80024a4 <initTof+0x54>
	while(HAL_I2C_Init(&hi2c1) != HAL_OK);
 80024b0:	bf00      	nop
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <initTof+0x9c>)
 80024b4:	f002 fcea 	bl	8004e8c <HAL_I2C_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <initTof+0x62>
	tofInit(1); // set long range mode (up to 2m)
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff f926 	bl	8001710 <tofInit>
	tofGetModel(&model, &revision);
 80024c4:	463a      	mov	r2, r7
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff7a 	bl	80023c4 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2bee      	cmp	r3, #238	; 0xee
 80024d4:	d1e5      	bne.n	80024a2 <initTof+0x52>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d1e2      	bne.n	80024a2 <initTof+0x52>
	}
	return 1;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40010c00 	.word	0x40010c00
 80024ec:	20000818 	.word	0x20000818
 80024f0:	40005800 	.word	0x40005800

080024f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <MX_GPIO_Init+0xe8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a33      	ldr	r2, [pc, #204]	; (80025dc <MX_GPIO_Init+0xe8>)
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b31      	ldr	r3, [pc, #196]	; (80025dc <MX_GPIO_Init+0xe8>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <MX_GPIO_Init+0xe8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <MX_GPIO_Init+0xe8>)
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <MX_GPIO_Init+0xe8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <MX_GPIO_Init+0xe8>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <MX_GPIO_Init+0xe8>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <MX_GPIO_Init+0xe8>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_GPIO_Init+0xe8>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <MX_GPIO_Init+0xe8>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <MX_GPIO_Init+0xe8>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002568:	2200      	movs	r2, #0
 800256a:	f24f 0120 	movw	r1, #61472	; 0xf020
 800256e:	481c      	ldr	r0, [pc, #112]	; (80025e0 <MX_GPIO_Init+0xec>)
 8002570:	f002 fc42 	bl	8004df8 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8002574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_GPIO_Init+0xf0>)
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4619      	mov	r1, r3
 8002588:	4817      	ldr	r0, [pc, #92]	; (80025e8 <MX_GPIO_Init+0xf4>)
 800258a:	f002 f9d5 	bl	8004938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800258e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8002592:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2302      	movs	r3, #2
 800259e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4619      	mov	r1, r3
 80025a6:	480e      	ldr	r0, [pc, #56]	; (80025e0 <MX_GPIO_Init+0xec>)
 80025a8:	f002 f9c6 	bl	8004938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 80025ac:	2310      	movs	r3, #16
 80025ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_GPIO_Init+0xf0>)
 80025b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	4619      	mov	r1, r3
 80025be:	4808      	ldr	r0, [pc, #32]	; (80025e0 <MX_GPIO_Init+0xec>)
 80025c0:	f002 f9ba 	bl	8004938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2105      	movs	r1, #5
 80025c8:	2028      	movs	r0, #40	; 0x28
 80025ca:	f002 f83c 	bl	8004646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025ce:	2028      	movs	r0, #40	; 0x28
 80025d0:	f002 f855 	bl	800467e <HAL_NVIC_EnableIRQ>

}
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010c00 	.word	0x40010c00
 80025e4:	10110000 	.word	0x10110000
 80025e8:	40011000 	.word	0x40011000

080025ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_I2C1_Init+0x50>)
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <MX_I2C1_Init+0x54>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_I2C1_Init+0x50>)
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_I2C1_Init+0x58>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_I2C1_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_I2C1_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_I2C1_Init+0x50>)
 800260a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800260e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_I2C1_Init+0x50>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_I2C1_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MX_I2C1_Init+0x50>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_I2C1_Init+0x50>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_I2C1_Init+0x50>)
 800262a:	f002 fc2f 	bl	8004e8c <HAL_I2C_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002634:	f000 fc12 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000818 	.word	0x20000818
 8002640:	40005400 	.word	0x40005400
 8002644:	000186a0 	.word	0x000186a0

08002648 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <MX_I2C2_Init+0x50>)
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <MX_I2C2_Init+0x54>)
 8002650:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_I2C2_Init+0x50>)
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <MX_I2C2_Init+0x58>)
 8002656:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_I2C2_Init+0x50>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_I2C2_Init+0x50>)
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_I2C2_Init+0x50>)
 8002666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <MX_I2C2_Init+0x50>)
 800266e:	2200      	movs	r2, #0
 8002670:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_I2C2_Init+0x50>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_I2C2_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_I2C2_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <MX_I2C2_Init+0x50>)
 8002686:	f002 fc01 	bl	8004e8c <HAL_I2C_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002690:	f000 fbe4 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000086c 	.word	0x2000086c
 800269c:	40005800 	.word	0x40005800
 80026a0:	000186a0 	.word	0x000186a0

080026a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a32      	ldr	r2, [pc, #200]	; (8002788 <HAL_I2C_MspInit+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d133      	bne.n	800272c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_I2C_MspInit+0xe8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a30      	ldr	r2, [pc, #192]	; (800278c <HAL_I2C_MspInit+0xe8>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_I2C_MspInit+0xe8>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 80026dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e2:	2312      	movs	r3, #18
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	4827      	ldr	r0, [pc, #156]	; (8002790 <HAL_I2C_MspInit+0xec>)
 80026f2:	f002 f921 	bl	8004938 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_I2C_MspInit+0xf0>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270c:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_I2C_MspInit+0xf0>)
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_I2C_MspInit+0xe8>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_I2C_MspInit+0xe8>)
 8002718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_I2C_MspInit+0xe8>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800272a:	e029      	b.n	8002780 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_I2C_MspInit+0xf4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d124      	bne.n	8002780 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_I2C_MspInit+0xe8>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_I2C_MspInit+0xe8>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6193      	str	r3, [r2, #24]
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_I2C_MspInit+0xe8>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 800274e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002754:	2312      	movs	r3, #18
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	480b      	ldr	r0, [pc, #44]	; (8002790 <HAL_I2C_MspInit+0xec>)
 8002764:	f002 f8e8 	bl	8004938 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_I2C_MspInit+0xe8>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_I2C_MspInit+0xe8>)
 800276e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002772:	61d3      	str	r3, [r2, #28]
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_I2C_MspInit+0xe8>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	bf00      	nop
 8002782:	3730      	adds	r7, #48	; 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40005400 	.word	0x40005400
 800278c:	40021000 	.word	0x40021000
 8002790:	40010c00 	.word	0x40010c00
 8002794:	40010000 	.word	0x40010000
 8002798:	40005800 	.word	0x40005800

0800279c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <HAL_I2C_MspDeInit+0x68>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d110      	bne.n	80027d0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_I2C_MspDeInit+0x6c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <HAL_I2C_MspDeInit+0x6c>)
 80027b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027b8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(TOF_I2C_SCL_GPIO_Port, TOF_I2C_SCL_Pin);
 80027ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027be:	4813      	ldr	r0, [pc, #76]	; (800280c <HAL_I2C_MspDeInit+0x70>)
 80027c0:	f002 fa4e 	bl	8004c60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(TOF_I2C_SDA_GPIO_Port, TOF_I2C_SDA_Pin);
 80027c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027c8:	4810      	ldr	r0, [pc, #64]	; (800280c <HAL_I2C_MspDeInit+0x70>)
 80027ca:	f002 fa49 	bl	8004c60 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80027ce:	e014      	b.n	80027fa <HAL_I2C_MspDeInit+0x5e>
  else if(i2cHandle->Instance==I2C2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_I2C_MspDeInit+0x74>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10f      	bne.n	80027fa <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_I2C_MspDeInit+0x6c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_I2C_MspDeInit+0x6c>)
 80027e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027e4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(COLOR_I2C_SCL_GPIO_Port, COLOR_I2C_SCL_Pin);
 80027e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ea:	4808      	ldr	r0, [pc, #32]	; (800280c <HAL_I2C_MspDeInit+0x70>)
 80027ec:	f002 fa38 	bl	8004c60 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(COLOR_I2C_SDA_GPIO_Port, COLOR_I2C_SDA_Pin);
 80027f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_I2C_MspDeInit+0x70>)
 80027f6:	f002 fa33 	bl	8004c60 <HAL_GPIO_DeInit>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40005400 	.word	0x40005400
 8002808:	40021000 	.word	0x40021000
 800280c:	40010c00 	.word	0x40010c00
 8002810:	40005800 	.word	0x40005800

08002814 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	switch (i)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	2b03      	cmp	r3, #3
 8002822:	d827      	bhi.n	8002874 <TurnOffLed+0x60>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <TurnOffLed+0x18>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	0800284b 	.word	0x0800284b
 8002834:	08002859 	.word	0x08002859
 8002838:	08002867 	.word	0x08002867
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002842:	480e      	ldr	r0, [pc, #56]	; (800287c <TurnOffLed+0x68>)
 8002844:	f002 fad8 	bl	8004df8 <HAL_GPIO_WritePin>
		    break;
 8002848:	e014      	b.n	8002874 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800284a:	2200      	movs	r2, #0
 800284c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002850:	480a      	ldr	r0, [pc, #40]	; (800287c <TurnOffLed+0x68>)
 8002852:	f002 fad1 	bl	8004df8 <HAL_GPIO_WritePin>
			break;
 8002856:	e00d      	b.n	8002874 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285e:	4807      	ldr	r0, [pc, #28]	; (800287c <TurnOffLed+0x68>)
 8002860:	f002 faca 	bl	8004df8 <HAL_GPIO_WritePin>
			break;
 8002864:	e006      	b.n	8002874 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8002866:	2200      	movs	r2, #0
 8002868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <TurnOffLed+0x68>)
 800286e:	f002 fac3 	bl	8004df8 <HAL_GPIO_WritePin>
			break;
 8002872:	bf00      	nop
	}

}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40010c00 	.word	0x40010c00

08002880 <SwitchLed>:



void SwitchLed(int i)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	switch (i)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	2b03      	cmp	r3, #3
 800288e:	d823      	bhi.n	80028d8 <SwitchLed+0x58>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <SwitchLed+0x18>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028b5 	.word	0x080028b5
 80028a0:	080028c1 	.word	0x080028c1
 80028a4:	080028cd 	.word	0x080028cd
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80028a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <SwitchLed+0x60>)
 80028ae:	f002 fabb 	bl	8004e28 <HAL_GPIO_TogglePin>
			break;
 80028b2:	e011      	b.n	80028d8 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80028b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <SwitchLed+0x60>)
 80028ba:	f002 fab5 	bl	8004e28 <HAL_GPIO_TogglePin>
			break;
 80028be:	e00b      	b.n	80028d8 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80028c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <SwitchLed+0x60>)
 80028c6:	f002 faaf 	bl	8004e28 <HAL_GPIO_TogglePin>
			break;
 80028ca:	e005      	b.n	80028d8 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 80028cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d0:	4803      	ldr	r0, [pc, #12]	; (80028e0 <SwitchLed+0x60>)
 80028d2:	f002 faa9 	bl	8004e28 <HAL_GPIO_TogglePin>
			break;
 80028d6:	bf00      	nop
	}

}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010c00 	.word	0x40010c00

080028e4 <LedError>:



void LedError()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ee:	480b      	ldr	r0, [pc, #44]	; (800291c <LedError+0x38>)
 80028f0:	f002 fa82 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80028f4:	2201      	movs	r2, #1
 80028f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028fa:	4808      	ldr	r0, [pc, #32]	; (800291c <LedError+0x38>)
 80028fc:	f002 fa7c 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <LedError+0x38>)
 8002908:	f002 fa76 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002912:	4802      	ldr	r0, [pc, #8]	; (800291c <LedError+0x38>)
 8002914:	f002 fa70 	bl	8004df8 <HAL_GPIO_WritePin>
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40010c00 	.word	0x40010c00

08002920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002924:	f001 fb0e 	bl	8003f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002928:	f000 f864 	bl	80029f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292c:	f7ff fde2 	bl	80024f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002930:	f7ff fe5c 	bl	80025ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8002934:	f7ff fe88 	bl	8002648 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002938:	f000 ff3a 	bl	80037b0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800293c:	f001 f9e4 	bl	8003d08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002940:	f001 fa0c 	bl	8003d5c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002944:	f000 fe1c 	bl	8003580 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002948:	f000 fede 	bl	8003708 <MX_TIM2_Init>
  MX_TIM5_Init();
 800294c:	f000 ffa8 	bl	80038a0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8002950:	f7fe fe4c 	bl	80015ec <MX_ADC1_Init>
  MX_TIM7_Init();
 8002954:	f001 f82e 	bl	80039b4 <MX_TIM7_Init>
  MX_TIM6_Init();
 8002958:	f000 fff6 	bl	8003948 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800295c:	2201      	movs	r2, #1
 800295e:	491c      	ldr	r1, [pc, #112]	; (80029d0 <main+0xb0>)
 8002960:	481c      	ldr	r0, [pc, #112]	; (80029d4 <main+0xb4>)
 8002962:	f005 fa91 	bl	8007e88 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8002966:	2001      	movs	r0, #1
 8002968:	f001 fb4e 	bl	8004008 <HAL_Delay>
  shellInit();
 800296c:	f000 fa7e 	bl	8002e6c <shellInit>

  TurnOffLed(1);
 8002970:	2001      	movs	r0, #1
 8002972:	f7ff ff4f 	bl	8002814 <TurnOffLed>
  TurnOffLed(2);
 8002976:	2002      	movs	r0, #2
 8002978:	f7ff ff4c 	bl	8002814 <TurnOffLed>
  TurnOffLed(3);
 800297c:	2003      	movs	r0, #3
 800297e:	f7ff ff49 	bl	8002814 <TurnOffLed>
  TurnOffLed(4);
 8002982:	2004      	movs	r0, #4
 8002984:	f7ff ff46 	bl	8002814 <TurnOffLed>

  HAL_TIM_Base_Start_IT(&htim3);
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <main+0xb8>)
 800298a:	f003 ff9f 	bl	80068cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800298e:	2100      	movs	r1, #0
 8002990:	4811      	ldr	r0, [pc, #68]	; (80029d8 <main+0xb8>)
 8002992:	f004 f90d 	bl	8006bb0 <HAL_TIM_PWM_Start_IT>
  ControlServo(SERVO_CLOSED);
 8002996:	f44f 7052 	mov.w	r0, #840	; 0x348
 800299a:	f7fe fdeb 	bl	8001574 <ControlServo>

  HAL_TIM_Base_Start_IT(&htim6);
 800299e:	480f      	ldr	r0, [pc, #60]	; (80029dc <main+0xbc>)
 80029a0:	f003 ff94 	bl	80068cc <HAL_TIM_Base_Start_IT>
  InitMCC();
 80029a4:	f7fe fbf0 	bl	8001188 <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80029a8:	213c      	movs	r1, #60	; 0x3c
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <main+0xc0>)
 80029ac:	f004 faa2 	bl	8006ef4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80029b0:	213c      	movs	r1, #60	; 0x3c
 80029b2:	480c      	ldr	r0, [pc, #48]	; (80029e4 <main+0xc4>)
 80029b4:	f004 fa9e 	bl	8006ef4 <HAL_TIM_Encoder_Start>

  PIController_Init(&MoteurD);
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <main+0xc8>)
 80029ba:	f7fe fcf1 	bl	80013a0 <PIController_Init>
  PIController_Init(&MoteurG);
 80029be:	480b      	ldr	r0, [pc, #44]	; (80029ec <main+0xcc>)
 80029c0:	f7fe fcee 	bl	80013a0 <PIController_Init>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <main+0xd0>)
 80029c6:	f003 ff81 	bl	80068cc <HAL_TIM_Base_Start_IT>

  initTof();
 80029ca:	f7ff fd41 	bl	8002450 <initTof>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start)
 80029ce:	e7fe      	b.n	80029ce <main+0xae>
 80029d0:	20000b54 	.word	0x20000b54
 80029d4:	20000b58 	.word	0x20000b58
 80029d8:	20000a34 	.word	0x20000a34
 80029dc:	20000ac4 	.word	0x20000ac4
 80029e0:	200009ec 	.word	0x200009ec
 80029e4:	20000a7c 	.word	0x20000a7c
 80029e8:	200008e4 	.word	0x200008e4
 80029ec:	2000090c 	.word	0x2000090c
 80029f0:	20000b0c 	.word	0x20000b0c

080029f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b096      	sub	sp, #88	; 0x58
 80029f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029fe:	2228      	movs	r2, #40	; 0x28
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f006 f8de 	bl	8008bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 fa19 	bl	8005e88 <HAL_RCC_OscConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002a5c:	f000 f9fe 	bl	8002e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a60:	230f      	movs	r3, #15
 8002a62:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fc85 	bl	800638c <HAL_RCC_ClockConfig>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a88:	f000 f9e8 	bl	8002e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fe11 	bl	80066c0 <HAL_RCCEx_PeriphCLKConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002aa4:	f000 f9da 	bl	8002e5c <Error_Handler>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3758      	adds	r7, #88	; 0x58
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002ab8:	1d39      	adds	r1, r7, #4
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <__io_putchar+0x20>)
 8002ac2:	f005 f94f 	bl	8007d64 <HAL_UART_Transmit>
	return ch;
 8002ac6:	687b      	ldr	r3, [r7, #4]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000b58 	.word	0x20000b58

08002ad4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // Tim 3 avce servo donc pas d'interrupt...inutile
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4aa5      	ldr	r2, [pc, #660]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f000 8183 	beq.w	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>

	}



	else if (htim->Instance == TIM7) //Tim 7 1sec pour du printf shell
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4aa3      	ldr	r2, [pc, #652]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10b      	bne.n	8002b0a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		//printf("%d\r\n", dist);
		TOF_dist = tofReadDistance();//scan
 8002af2:	f7ff fc2d 	bl	8002350 <tofReadDistance>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4aa1      	ldr	r2, [pc, #644]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002afa:	6013      	str	r3, [r2, #0]
		printf("distance : %d\r\n", TOF_dist);
 8002afc:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	48a0      	ldr	r0, [pc, #640]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002b04:	f006 fed4 	bl	80098b0 <iprintf>
				break;
			}

		  }
		}
}
 8002b08:	e171      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
	else if (htim->Instance == TIM6) //Tim 6 asserv en vitesse a 0.1sec
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a9e      	ldr	r2, [pc, #632]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	f040 816b 	bne.w	8002dec <HAL_TIM_PeriodElapsedCallback+0x318>
		switch(action)
 8002b16:	4b9d      	ldr	r3, [pc, #628]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d127      	bne.n	8002b6e <HAL_TIM_PeriodElapsedCallback+0x9a>
			if(sens)dist -=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002b1e:	4b9c      	ldr	r3, [pc, #624]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d011      	beq.n	8002b4a <HAL_TIM_PeriodElapsedCallback+0x76>
 8002b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2c:	4b99      	ldr	r3, [pc, #612]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	4413      	add	r3, r2
 8002b32:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002b36:	3bfe      	subs	r3, #254	; 0xfe
 8002b38:	0859      	lsrs	r1, r3, #1
 8002b3a:	4b97      	ldr	r3, [pc, #604]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b3c:	881a      	ldrh	r2, [r3, #0]
 8002b3e:	b28b      	uxth	r3, r1
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b94      	ldr	r3, [pc, #592]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b46:	801a      	strh	r2, [r3, #0]
			break;
 8002b48:	e020      	b.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0xb8>
			else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b50:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	4413      	add	r3, r2
 8002b56:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002b5a:	3bfe      	subs	r3, #254	; 0xfe
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b8d      	ldr	r3, [pc, #564]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b8b      	ldr	r3, [pc, #556]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b6a:	801a      	strh	r2, [r3, #0]
			break;
 8002b6c:	e00e      	b.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0xb8>
			dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ( Mid_Period_TIM5 - (TIM5->CNT)) ) / 2; //on moyenne la valeur
 8002b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b74:	4b87      	ldr	r3, [pc, #540]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b86      	ldr	r3, [pc, #536]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	4b84      	ldr	r3, [pc, #528]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b88:	801a      	strh	r2, [r3, #0]
			break;
 8002b8a:	bf00      	nop
		  ReadEncodeur();
 8002b8c:	f7fe fbe2 	bl	8001354 <ReadEncodeur>
		  if(consigneD == 0)
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HAL_TIM_PeriodElapsedCallback+0xca>
			  Stop();
 8002b98:	f7fe fb92 	bl	80012c0 <Stop>
}
 8002b9c:	e127      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
			switch(action)
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	f000 809a 	beq.w	8002cdc <HAL_TIM_PeriodElapsedCallback+0x208>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	f300 811c 	bgt.w	8002de6 <HAL_TIM_PeriodElapsedCallback+0x312>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d049      	beq.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x176>
 8002bb6:	e116      	b.n	8002de6 <HAL_TIM_PeriodElapsedCallback+0x312>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002bb8:	4b78      	ldr	r3, [pc, #480]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f9bb 	bl	8000f38 <__aeabi_i2f>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4b76      	ldr	r3, [pc, #472]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	22c8      	movs	r2, #200	; 0xc8
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8002bd4:	1152      	asrs	r2, r2, #5
 8002bd6:	17db      	asrs	r3, r3, #31
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f9ac 	bl	8000f38 <__aeabi_i2f>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4621      	mov	r1, r4
 8002be6:	4870      	ldr	r0, [pc, #448]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002be8:	f7fe fc18 	bl	800141c <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002bec:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f9a1 	bl	8000f38 <__aeabi_i2f>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	22c8      	movs	r2, #200	; 0xc8
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	4a6c      	ldr	r2, [pc, #432]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002c04:	fb82 1203 	smull	r1, r2, r2, r3
 8002c08:	1112      	asrs	r2, r2, #4
 8002c0a:	17db      	asrs	r3, r3, #31
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f992 	bl	8000f38 <__aeabi_i2f>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4867      	ldr	r0, [pc, #412]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002c1c:	f7fe fbfe 	bl	800141c <PIController_Update>
				AvancerPI(0, MoteurD.out);
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fa51 	bl	80010cc <__aeabi_f2iz>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fae0 	bl	80011f4 <AvancerPI>
				AvancerPI(1, MoteurG.out);
 8002c34:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fa47 	bl	80010cc <__aeabi_f2iz>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4619      	mov	r1, r3
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7fe fad6 	bl	80011f4 <AvancerPI>
				break;
 8002c48:	e0d1      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe f972 	bl	8000f38 <__aeabi_i2f>
 8002c54:	4604      	mov	r4, r0
 8002c56:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22c8      	movs	r2, #200	; 0xc8
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002c62:	fb82 1203 	smull	r1, r2, r2, r3
 8002c66:	1152      	asrs	r2, r2, #5
 8002c68:	17db      	asrs	r3, r3, #31
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f963 	bl	8000f38 <__aeabi_i2f>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	4621      	mov	r1, r4
 8002c78:	484b      	ldr	r0, [pc, #300]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002c7a:	f7fe fbcf 	bl	800141c <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f958 	bl	8000f38 <__aeabi_i2f>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	22c8      	movs	r2, #200	; 0xc8
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	4a47      	ldr	r2, [pc, #284]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002c96:	fb82 1203 	smull	r1, r2, r2, r3
 8002c9a:	1112      	asrs	r2, r2, #4
 8002c9c:	17db      	asrs	r3, r3, #31
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe f949 	bl	8000f38 <__aeabi_i2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4621      	mov	r1, r4
 8002cac:	4842      	ldr	r0, [pc, #264]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002cae:	f7fe fbb5 	bl	800141c <PIController_Update>
				ReculerPI(0, MoteurD.out);
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fa08 	bl	80010cc <__aeabi_f2iz>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe fad9 	bl	8001278 <ReculerPI>
				ReculerPI(1, MoteurG.out);
 8002cc6:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f9fe 	bl	80010cc <__aeabi_f2iz>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7fe facf 	bl	8001278 <ReculerPI>
				break;
 8002cda:	e088      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f929 	bl	8000f38 <__aeabi_i2f>
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	22c8      	movs	r2, #200	; 0xc8
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf8:	1152      	asrs	r2, r2, #5
 8002cfa:	17db      	asrs	r3, r3, #31
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f91a 	bl	8000f38 <__aeabi_i2f>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	4621      	mov	r1, r4
 8002d0a:	4827      	ldr	r0, [pc, #156]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d0c:	f7fe fb86 	bl	800141c <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f90f 	bl	8000f38 <__aeabi_i2f>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	22c8      	movs	r2, #200	; 0xc8
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002d28:	fb82 1203 	smull	r1, r2, r2, r3
 8002d2c:	1112      	asrs	r2, r2, #4
 8002d2e:	17db      	asrs	r3, r3, #31
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f900 	bl	8000f38 <__aeabi_i2f>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	481e      	ldr	r0, [pc, #120]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002d40:	f7fe fb6c 	bl	800141c <PIController_Update>
				if(sens)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d037      	beq.n	8002dbc <HAL_TIM_PeriodElapsedCallback+0x2e8>
					ReculerPI(0, MoteurD.out);
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe f9bb 	bl	80010cc <__aeabi_f2iz>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fe fa8c 	bl	8001278 <ReculerPI>
					AvancerPI(1, MoteurG.out);
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f9b1 	bl	80010cc <__aeabi_f2iz>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7fe fa40 	bl	80011f4 <AvancerPI>
				break;
 8002d74:	e03b      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
 8002d76:	bf00      	nop
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40001400 	.word	0x40001400
 8002d80:	200008e0 	.word	0x200008e0
 8002d84:	0800d578 	.word	0x0800d578
 8002d88:	40001000 	.word	0x40001000
 8002d8c:	200000e8 	.word	0x200000e8
 8002d90:	200008dc 	.word	0x200008dc
 8002d94:	40000c00 	.word	0x40000c00
 8002d98:	200008c0 	.word	0x200008c0
 8002d9c:	200008d0 	.word	0x200008d0
 8002da0:	200008cc 	.word	0x200008cc
 8002da4:	3531dec1 	.word	0x3531dec1
 8002da8:	200008e4 	.word	0x200008e4
 8002dac:	200008d8 	.word	0x200008d8
 8002db0:	200008d4 	.word	0x200008d4
 8002db4:	19c2d14f 	.word	0x19c2d14f
 8002db8:	2000090c 	.word	0x2000090c
					AvancerPI(0, MoteurD.out);
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f983 	bl	80010cc <__aeabi_f2iz>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7fe fa12 	bl	80011f4 <AvancerPI>
					ReculerPI(1, MoteurG.out);
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe f979 	bl	80010cc <__aeabi_f2iz>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4619      	mov	r1, r3
 8002dde:	2001      	movs	r0, #1
 8002de0:	f7fe fa4a 	bl	8001278 <ReculerPI>
				break;
 8002de4:	e003      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
				Stop();
 8002de6:	f7fe fa6b 	bl	80012c0 <Stop>
				break;
 8002dea:	e000      	b.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x31a>
		  }
 8002dec:	bf00      	nop
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200008e4 	.word	0x200008e4
 8002dfc:	2000090c 	.word	0x2000090c

08002e00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
	//enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
	Debut_Test();
 8002e0a:	f7fe fbcd 	bl	80015a8 <Debut_Test>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_UART_RxCpltCallback+0x38>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10d      	bne.n	8002e46 <HAL_UART_RxCpltCallback+0x2e>
	{
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4909      	ldr	r1, [pc, #36]	; (8002e54 <HAL_UART_RxCpltCallback+0x3c>)
 8002e2e:	480a      	ldr	r0, [pc, #40]	; (8002e58 <HAL_UART_RxCpltCallback+0x40>)
 8002e30:	f005 f82a 	bl	8007e88 <HAL_UART_Receive_IT>
		if(shellGetChar())
 8002e34:	f000 f852 	bl	8002edc <shellGetChar>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0x2e>
		{
		  shellExec();
 8002e3e:	f000 f8c1 	bl	8002fc4 <shellExec>
		  shellPrompt();
 8002e42:	f000 f82b 	bl	8002e9c <shellPrompt>
	}
	else if(huart->Instance == USART2)
	{
		//interruption Raspberry
	}
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40013800 	.word	0x40013800
 8002e54:	20000b54 	.word	0x20000b54
 8002e58:	20000b58 	.word	0x20000b58

08002e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e60:	b672      	cpsid	i
}
 8002e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8002e64:	f7ff fd3e 	bl	80028e4 <LedError>
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <Error_Handler+0xc>
	...

08002e6c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
 8002e74:	226c      	movs	r2, #108	; 0x6c
 8002e76:	4906      	ldr	r1, [pc, #24]	; (8002e90 <shellInit+0x24>)
 8002e78:	4806      	ldr	r0, [pc, #24]	; (8002e94 <shellInit+0x28>)
 8002e7a:	f004 ff73 	bl	8007d64 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	220a      	movs	r2, #10
 8002e84:	4904      	ldr	r1, [pc, #16]	; (8002e98 <shellInit+0x2c>)
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <shellInit+0x28>)
 8002e88:	f004 ff6c 	bl	8007d64 <HAL_UART_Transmit>
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	200000f8 	.word	0x200000f8
 8002e94:	20000b58 	.word	0x20000b58
 8002e98:	200000ec 	.word	0x200000ec

08002e9c <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	220a      	movs	r2, #10
 8002ea6:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <shellPrompt+0x18>)
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <shellPrompt+0x1c>)
 8002eaa:	f004 ff5b 	bl	8007d64 <HAL_UART_Transmit>
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200000ec 	.word	0x200000ec
 8002eb8:	20000b58 	.word	0x20000b58

08002ebc <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	2214      	movs	r2, #20
 8002ec6:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <shellCmdNotFound+0x18>)
 8002ec8:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <shellCmdNotFound+0x1c>)
 8002eca:	f004 ff4b 	bl	8007d64 <HAL_UART_Transmit>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200005cc 	.word	0x200005cc
 8002ed8:	20000b58 	.word	0x20000b58

08002edc <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <shellGetChar+0xc8>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d030      	beq.n	8002f50 <shellGetChar+0x74>
 8002eee:	2b0d      	cmp	r3, #13
 8002ef0:	d140      	bne.n	8002f74 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	492b      	ldr	r1, [pc, #172]	; (8002fa8 <shellGetChar+0xcc>)
 8002efa:	482c      	ldr	r0, [pc, #176]	; (8002fac <shellGetChar+0xd0>)
 8002efc:	f004 ff32 	bl	8007d64 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <shellGetChar+0xd4>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <shellGetChar+0xd8>)
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <shellGetChar+0xdc>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8002f12:	492a      	ldr	r1, [pc, #168]	; (8002fbc <shellGetChar+0xe0>)
 8002f14:	4827      	ldr	r0, [pc, #156]	; (8002fb4 <shellGetChar+0xd8>)
 8002f16:	f007 fb19 	bl	800a54c <strtok>
 8002f1a:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8002f1c:	e00f      	b.n	8002f3e <shellGetChar+0x62>
			argv[argc++] = token;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <shellGetChar+0xdc>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	b2d1      	uxtb	r1, r2
 8002f26:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <shellGetChar+0xdc>)
 8002f28:	7011      	strb	r1, [r2, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <shellGetChar+0xe4>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8002f34:	4921      	ldr	r1, [pc, #132]	; (8002fbc <shellGetChar+0xe0>)
 8002f36:	2000      	movs	r0, #0
 8002f38:	f007 fb08 	bl	800a54c <strtok>
 8002f3c:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ec      	bne.n	8002f1e <shellGetChar+0x42>
		}

		idxCmd = 0;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <shellGetChar+0xd4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]
		break;
 8002f4e:	e023      	b.n	8002f98 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <shellGetChar+0xd4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	b2d1      	uxtb	r1, r2
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <shellGetChar+0xd4>)
 8002f5a:	7011      	strb	r1, [r2, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <shellGetChar+0xd8>)
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
 8002f68:	2201      	movs	r2, #1
 8002f6a:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <shellGetChar+0xc8>)
 8002f6c:	480f      	ldr	r0, [pc, #60]	; (8002fac <shellGetChar+0xd0>)
 8002f6e:	f004 fef9 	bl	8007d64 <HAL_UART_Transmit>
		break;
 8002f72:	e011      	b.n	8002f98 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <shellGetChar+0xd4>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	b2d1      	uxtb	r1, r2
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <shellGetChar+0xd4>)
 8002f7e:	7011      	strb	r1, [r2, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <shellGetChar+0xc8>)
 8002f84:	7819      	ldrb	r1, [r3, #0]
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <shellGetChar+0xd8>)
 8002f88:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <shellGetChar+0xc8>)
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <shellGetChar+0xd0>)
 8002f94:	f004 fee6 	bl	8007d64 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8002f98:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000b54 	.word	0x20000b54
 8002fa8:	20000164 	.word	0x20000164
 8002fac:	20000b58 	.word	0x20000b58
 8002fb0:	20000974 	.word	0x20000974
 8002fb4:	20000934 	.word	0x20000934
 8002fb8:	2000099c 	.word	0x2000099c
 8002fbc:	0800d5bc 	.word	0x0800d5bc
 8002fc0:	20000978 	.word	0x20000978

08002fc4 <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 8002fc4:	b598      	push	{r3, r4, r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 8002fc8:	4ba4      	ldr	r3, [pc, #656]	; (800325c <shellExec+0x298>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	49a4      	ldr	r1, [pc, #656]	; (8003260 <shellExec+0x29c>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd f92e 	bl	8000230 <strcmp>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	f240 2231 	movw	r2, #561	; 0x231
 8002fe2:	49a0      	ldr	r1, [pc, #640]	; (8003264 <shellExec+0x2a0>)
 8002fe4:	48a0      	ldr	r0, [pc, #640]	; (8003268 <shellExec+0x2a4>)
 8002fe6:	f004 febd 	bl	8007d64 <HAL_UART_Transmit>

	else{
		shellCmdNotFound();
	}

}
 8002fea:	e134      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"RTFM")==0)
 8002fec:	4b9b      	ldr	r3, [pc, #620]	; (800325c <shellExec+0x298>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	499e      	ldr	r1, [pc, #632]	; (800326c <shellExec+0x2a8>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd f91c 	bl	8000230 <strcmp>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8003006:	499a      	ldr	r1, [pc, #616]	; (8003270 <shellExec+0x2ac>)
 8003008:	4897      	ldr	r0, [pc, #604]	; (8003268 <shellExec+0x2a4>)
 800300a:	f004 feab 	bl	8007d64 <HAL_UART_Transmit>
}
 800300e:	e122      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"led")==0)
 8003010:	4b92      	ldr	r3, [pc, #584]	; (800325c <shellExec+0x298>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4997      	ldr	r1, [pc, #604]	; (8003274 <shellExec+0x2b0>)
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd f90a 	bl	8000230 <strcmp>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d110      	bne.n	8003044 <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	2222      	movs	r2, #34	; 0x22
 8003028:	4993      	ldr	r1, [pc, #588]	; (8003278 <shellExec+0x2b4>)
 800302a:	488f      	ldr	r0, [pc, #572]	; (8003268 <shellExec+0x2a4>)
 800302c:	f004 fe9a 	bl	8007d64 <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 8003030:	4b8a      	ldr	r3, [pc, #552]	; (800325c <shellExec+0x298>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f005 fd89 	bl	8008b4c <atoi>
 800303a:	4603      	mov	r3, r0
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fc1f 	bl	8002880 <SwitchLed>
}
 8003042:	e108      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"avancer")==0)
 8003044:	4b85      	ldr	r3, [pc, #532]	; (800325c <shellExec+0x298>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	498c      	ldr	r1, [pc, #560]	; (800327c <shellExec+0x2b8>)
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd f8f0 	bl	8000230 <strcmp>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d110      	bne.n	8003078 <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	2225      	movs	r2, #37	; 0x25
 800305c:	4988      	ldr	r1, [pc, #544]	; (8003280 <shellExec+0x2bc>)
 800305e:	4882      	ldr	r0, [pc, #520]	; (8003268 <shellExec+0x2a4>)
 8003060:	f004 fe80 	bl	8007d64 <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 8003064:	4b7d      	ldr	r3, [pc, #500]	; (800325c <shellExec+0x298>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f005 fd6f 	bl	8008b4c <atoi>
 800306e:	4603      	mov	r3, r0
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe f8a1 	bl	80011b8 <Avancer>
}
 8003076:	e0ee      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"reculer")==0)
 8003078:	4b78      	ldr	r3, [pc, #480]	; (800325c <shellExec+0x298>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4981      	ldr	r1, [pc, #516]	; (8003284 <shellExec+0x2c0>)
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd f8d6 	bl	8000230 <strcmp>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d110      	bne.n	80030ac <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	2227      	movs	r2, #39	; 0x27
 8003090:	497d      	ldr	r1, [pc, #500]	; (8003288 <shellExec+0x2c4>)
 8003092:	4875      	ldr	r0, [pc, #468]	; (8003268 <shellExec+0x2a4>)
 8003094:	f004 fe66 	bl	8007d64 <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 8003098:	4b70      	ldr	r3, [pc, #448]	; (800325c <shellExec+0x298>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f005 fd55 	bl	8008b4c <atoi>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe f8c9 	bl	800123c <Reculer>
}
 80030aa:	e0d4      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"stop")==0)
 80030ac:	4b6b      	ldr	r3, [pc, #428]	; (800325c <shellExec+0x298>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4976      	ldr	r1, [pc, #472]	; (800328c <shellExec+0x2c8>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd f8bc 	bl	8000230 <strcmp>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	2216      	movs	r2, #22
 80030c4:	4972      	ldr	r1, [pc, #456]	; (8003290 <shellExec+0x2cc>)
 80030c6:	4868      	ldr	r0, [pc, #416]	; (8003268 <shellExec+0x2a4>)
 80030c8:	f004 fe4c 	bl	8007d64 <HAL_UART_Transmit>
		Stop();
 80030cc:	f7fe f8f8 	bl	80012c0 <Stop>
}
 80030d0:	e0c1      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"tourner")==0)
 80030d2:	4b62      	ldr	r3, [pc, #392]	; (800325c <shellExec+0x298>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	496f      	ldr	r1, [pc, #444]	; (8003294 <shellExec+0x2d0>)
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd f8a9 	bl	8000230 <strcmp>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d12a      	bne.n	800313a <shellExec+0x176>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 80030e4:	4b5d      	ldr	r3, [pc, #372]	; (800325c <shellExec+0x298>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	496b      	ldr	r1, [pc, #428]	; (8003298 <shellExec+0x2d4>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f8a0 	bl	8000230 <strcmp>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <shellExec+0x146>
 80030f6:	4b59      	ldr	r3, [pc, #356]	; (800325c <shellExec+0x298>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4968      	ldr	r1, [pc, #416]	; (800329c <shellExec+0x2d8>)
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd f897 	bl	8000230 <strcmp>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a6 	beq.w	8003256 <shellExec+0x292>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	2230      	movs	r2, #48	; 0x30
 8003110:	4963      	ldr	r1, [pc, #396]	; (80032a0 <shellExec+0x2dc>)
 8003112:	4855      	ldr	r0, [pc, #340]	; (8003268 <shellExec+0x2a4>)
 8003114:	f004 fe26 	bl	8007d64 <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <shellExec+0x298>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4618      	mov	r0, r3
 800311e:	f005 fd15 	bl	8008b4c <atoi>
 8003122:	4604      	mov	r4, r0
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <shellExec+0x298>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f005 fd0f 	bl	8008b4c <atoi>
 800312e:	4603      	mov	r3, r0
 8003130:	4619      	mov	r1, r3
 8003132:	4620      	mov	r0, r4
 8003134:	f7fe f8d8 	bl	80012e8 <Tourner>
}
 8003138:	e08d      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"avancerPI")==0)
 800313a:	4b48      	ldr	r3, [pc, #288]	; (800325c <shellExec+0x298>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4959      	ldr	r1, [pc, #356]	; (80032a4 <shellExec+0x2e0>)
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f875 	bl	8000230 <strcmp>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d117      	bne.n	800317c <shellExec+0x1b8>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800314c:	f04f 33ff 	mov.w	r3, #4294967295
 8003150:	2225      	movs	r2, #37	; 0x25
 8003152:	494b      	ldr	r1, [pc, #300]	; (8003280 <shellExec+0x2bc>)
 8003154:	4844      	ldr	r0, [pc, #272]	; (8003268 <shellExec+0x2a4>)
 8003156:	f004 fe05 	bl	8007d64 <HAL_UART_Transmit>
		consigneD = atoi(argv[1]);
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <shellExec+0x298>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f005 fcf4 	bl	8008b4c <atoi>
 8003164:	4603      	mov	r3, r0
 8003166:	4a50      	ldr	r2, [pc, #320]	; (80032a8 <shellExec+0x2e4>)
 8003168:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[1]);
 800316a:	4b3c      	ldr	r3, [pc, #240]	; (800325c <shellExec+0x298>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f005 fcec 	bl	8008b4c <atoi>
 8003174:	4603      	mov	r3, r0
 8003176:	4a4d      	ldr	r2, [pc, #308]	; (80032ac <shellExec+0x2e8>)
 8003178:	6013      	str	r3, [r2, #0]
}
 800317a:	e06c      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"actionPI")==0)
 800317c:	4b37      	ldr	r3, [pc, #220]	; (800325c <shellExec+0x298>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	494b      	ldr	r1, [pc, #300]	; (80032b0 <shellExec+0x2ec>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f854 	bl	8000230 <strcmp>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d12b      	bne.n	80031e6 <shellExec+0x222>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	2225      	movs	r2, #37	; 0x25
 8003194:	493a      	ldr	r1, [pc, #232]	; (8003280 <shellExec+0x2bc>)
 8003196:	4834      	ldr	r0, [pc, #208]	; (8003268 <shellExec+0x2a4>)
 8003198:	f004 fde4 	bl	8007d64 <HAL_UART_Transmit>
		action = atoi(argv[1]);
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <shellExec+0x298>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f005 fcd3 	bl	8008b4c <atoi>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <shellExec+0x2f0>)
 80031aa:	6013      	str	r3, [r2, #0]
		if(action ==2) sens = atoi(argv[3]);
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <shellExec+0x2f0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d107      	bne.n	80031c4 <shellExec+0x200>
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <shellExec+0x298>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f005 fcc7 	bl	8008b4c <atoi>
 80031be:	4603      	mov	r3, r0
 80031c0:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <shellExec+0x2f4>)
 80031c2:	6013      	str	r3, [r2, #0]
		consigneD = atoi(argv[2]);
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <shellExec+0x298>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f005 fcbf 	bl	8008b4c <atoi>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <shellExec+0x2e4>)
 80031d2:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[2]);
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <shellExec+0x298>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 fcb7 	bl	8008b4c <atoi>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a32      	ldr	r2, [pc, #200]	; (80032ac <shellExec+0x2e8>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	e037      	b.n	8003256 <shellExec+0x292>
	else if(strcmp(argv[0],"servo")==0)
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <shellExec+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4934      	ldr	r1, [pc, #208]	; (80032bc <shellExec+0x2f8>)
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f81f 	bl	8000230 <strcmp>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d12c      	bne.n	8003252 <shellExec+0x28e>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	2217      	movs	r2, #23
 80031fe:	4930      	ldr	r1, [pc, #192]	; (80032c0 <shellExec+0x2fc>)
 8003200:	4819      	ldr	r0, [pc, #100]	; (8003268 <shellExec+0x2a4>)
 8003202:	f004 fdaf 	bl	8007d64 <HAL_UART_Transmit>
		if(strcmp(argv[1],"ouvert")==0)
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <shellExec+0x298>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	492e      	ldr	r1, [pc, #184]	; (80032c4 <shellExec+0x300>)
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f80f 	bl	8000230 <strcmp>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <shellExec+0x25e>
			ControlServo(SERVO_OPEN);
 8003218:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800321c:	f7fe f9aa 	bl	8001574 <ControlServo>
}
 8003220:	e019      	b.n	8003256 <shellExec+0x292>
		else if(strcmp(argv[1],"ferme")==0)
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <shellExec+0x298>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4928      	ldr	r1, [pc, #160]	; (80032c8 <shellExec+0x304>)
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f801 	bl	8000230 <strcmp>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <shellExec+0x27a>
			ControlServo(SERVO_CLOSED);
 8003234:	f44f 7052 	mov.w	r0, #840	; 0x348
 8003238:	f7fe f99c 	bl	8001574 <ControlServo>
}
 800323c:	e00b      	b.n	8003256 <shellExec+0x292>
		else ControlServo(atoi(argv[1]));
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <shellExec+0x298>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4618      	mov	r0, r3
 8003244:	f005 fc82 	bl	8008b4c <atoi>
 8003248:	4603      	mov	r3, r0
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe f992 	bl	8001574 <ControlServo>
}
 8003250:	e001      	b.n	8003256 <shellExec+0x292>
		shellCmdNotFound();
 8003252:	f7ff fe33 	bl	8002ebc <shellCmdNotFound>
}
 8003256:	bf00      	nop
 8003258:	bd98      	pop	{r3, r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	20000978 	.word	0x20000978
 8003260:	0800d5c0 	.word	0x0800d5c0
 8003264:	20000168 	.word	0x20000168
 8003268:	20000b58 	.word	0x20000b58
 800326c:	0800d5c8 	.word	0x0800d5c8
 8003270:	2000039c 	.word	0x2000039c
 8003274:	0800d5d0 	.word	0x0800d5d0
 8003278:	200004f8 	.word	0x200004f8
 800327c:	0800d5d4 	.word	0x0800d5d4
 8003280:	2000051c 	.word	0x2000051c
 8003284:	0800d5dc 	.word	0x0800d5dc
 8003288:	20000544 	.word	0x20000544
 800328c:	0800d5e4 	.word	0x0800d5e4
 8003290:	2000056c 	.word	0x2000056c
 8003294:	0800d5ec 	.word	0x0800d5ec
 8003298:	0800d5f4 	.word	0x0800d5f4
 800329c:	0800d5f8 	.word	0x0800d5f8
 80032a0:	20000584 	.word	0x20000584
 80032a4:	0800d5fc 	.word	0x0800d5fc
 80032a8:	200008d0 	.word	0x200008d0
 80032ac:	200008d8 	.word	0x200008d8
 80032b0:	0800d608 	.word	0x0800d608
 80032b4:	200000e8 	.word	0x200000e8
 80032b8:	200008dc 	.word	0x200008dc
 80032bc:	0800d614 	.word	0x0800d614
 80032c0:	200005b4 	.word	0x200005b4
 80032c4:	0800d61c 	.word	0x0800d61c
 80032c8:	0800d624 	.word	0x0800d624

080032cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_MspInit+0x68>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_MspInit+0x68>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6193      	str	r3, [r2, #24]
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_MspInit+0x68>)
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_MspInit+0x68>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_MspInit+0x68>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_MspInit+0x68>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	210f      	movs	r1, #15
 8003306:	f06f 0001 	mvn.w	r0, #1
 800330a:	f001 f99c 	bl	8004646 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_MspInit+0x6c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_MspInit+0x6c>)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <NMI_Handler+0x4>

08003342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <MemManage_Handler+0x4>

0800334e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <BusFault_Handler+0x4>

08003354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <UsageFault_Handler+0x4>

0800335a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336a:	f000 fe31 	bl	8003fd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800336e:	f005 fb6b 	bl	8008a48 <xTaskGetSchedulerState>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d001      	beq.n	800337c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003378:	f005 fbc6 	bl	8008b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}

08003380 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <TIM1_UP_IRQHandler+0x10>)
 8003386:	f003 fe43 	bl	8007010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200009a4 	.word	0x200009a4

08003394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <USART1_IRQHandler+0x10>)
 800339a:	f004 fda5 	bl	8007ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000b58 	.word	0x20000b58

080033a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <USART2_IRQHandler+0x10>)
 80033ae:	f004 fd9b 	bl	8007ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000b9c 	.word	0x20000b9c

080033bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80033c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033c4:	f001 fd4a 	bl	8004e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}

080033cc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <TIM6_IRQHandler+0x10>)
 80033d2:	f003 fe1d 	bl	8007010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000ac4 	.word	0x20000ac4

080033e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <TIM7_IRQHandler+0x10>)
 80033e6:	f003 fe13 	bl	8007010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000b0c 	.word	0x20000b0c

080033f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	return 1;
 80033f8:	2301      	movs	r3, #1
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <_kill>:

int _kill(int pid, int sig)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800340c:	f005 fba2 	bl	8008b54 <__errno>
 8003410:	4603      	mov	r3, r0
 8003412:	2216      	movs	r2, #22
 8003414:	601a      	str	r2, [r3, #0]
	return -1;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_exit>:

void _exit (int status)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800342a:	f04f 31ff 	mov.w	r1, #4294967295
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffe7 	bl	8003402 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003434:	e7fe      	b.n	8003434 <_exit+0x12>

08003436 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e00a      	b.n	800345e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003448:	f3af 8000 	nop.w
 800344c:	4601      	mov	r1, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	60ba      	str	r2, [r7, #8]
 8003454:	b2ca      	uxtb	r2, r1
 8003456:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	dbf0      	blt.n	8003448 <_read+0x12>
	}

return len;
 8003466:	687b      	ldr	r3, [r7, #4]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e009      	b.n	8003496 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	60ba      	str	r2, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fb10 	bl	8002ab0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3301      	adds	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	dbf1      	blt.n	8003482 <_write+0x12>
	}
	return len;
 800349e:	687b      	ldr	r3, [r7, #4]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_close>:

int _close(int file)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	return -1;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ce:	605a      	str	r2, [r3, #4]
	return 0;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <_isatty>:

int _isatty(int file)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	return 1;
 80034e4:	2301      	movs	r3, #1
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	return 0;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <_sbrk+0x5c>)
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <_sbrk+0x60>)
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <_sbrk+0x64>)
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <_sbrk+0x68>)
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003538:	f005 fb0c 	bl	8008b54 <__errno>
 800353c:	4603      	mov	r3, r0
 800353e:	220c      	movs	r2, #12
 8003540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	e009      	b.n	800355c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <_sbrk+0x64>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <_sbrk+0x64>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <_sbrk+0x64>)
 8003558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2000c000 	.word	0x2000c000
 8003568:	00000400 	.word	0x00000400
 800356c:	200009a0 	.word	0x200009a0
 8003570:	20000cb0 	.word	0x20000cb0

08003574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b096      	sub	sp, #88	; 0x58
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2220      	movs	r2, #32
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f005 fb03 	bl	8008bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <MX_TIM1_Init+0x180>)
 80035c0:	4a50      	ldr	r2, [pc, #320]	; (8003704 <MX_TIM1_Init+0x184>)
 80035c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 80035c4:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <MX_TIM1_Init+0x180>)
 80035c6:	2211      	movs	r2, #17
 80035c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ca:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <MX_TIM1_Init+0x180>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <MX_TIM1_Init+0x180>)
 80035d2:	22c7      	movs	r2, #199	; 0xc7
 80035d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <MX_TIM1_Init+0x180>)
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035dc:	4b48      	ldr	r3, [pc, #288]	; (8003700 <MX_TIM1_Init+0x180>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <MX_TIM1_Init+0x180>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035e8:	4845      	ldr	r0, [pc, #276]	; (8003700 <MX_TIM1_Init+0x180>)
 80035ea:	f003 f91f 	bl	800682c <HAL_TIM_Base_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80035f4:	f7ff fc32 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003602:	4619      	mov	r1, r3
 8003604:	483e      	ldr	r0, [pc, #248]	; (8003700 <MX_TIM1_Init+0x180>)
 8003606:	f003 fec9 	bl	800739c <HAL_TIM_ConfigClockSource>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003610:	f7ff fc24 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003614:	483a      	ldr	r0, [pc, #232]	; (8003700 <MX_TIM1_Init+0x180>)
 8003616:	f003 f9b9 	bl	800698c <HAL_TIM_PWM_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003620:	f7ff fc1c 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800362c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003630:	4619      	mov	r1, r3
 8003632:	4833      	ldr	r0, [pc, #204]	; (8003700 <MX_TIM1_Init+0x180>)
 8003634:	f004 fa7a 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800363e:	f7ff fc0d 	bl	8002e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003642:	2360      	movs	r3, #96	; 0x60
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800364a:	2300      	movs	r3, #0
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800364e:	2300      	movs	r3, #0
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	2200      	movs	r2, #0
 8003664:	4619      	mov	r1, r3
 8003666:	4826      	ldr	r0, [pc, #152]	; (8003700 <MX_TIM1_Init+0x180>)
 8003668:	f003 fdda 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003672:	f7ff fbf3 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	2204      	movs	r2, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4820      	ldr	r0, [pc, #128]	; (8003700 <MX_TIM1_Init+0x180>)
 8003680:	f003 fdce 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800368a:	f7ff fbe7 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800368e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003692:	2208      	movs	r2, #8
 8003694:	4619      	mov	r1, r3
 8003696:	481a      	ldr	r0, [pc, #104]	; (8003700 <MX_TIM1_Init+0x180>)
 8003698:	f003 fdc2 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80036a2:	f7ff fbdb 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036aa:	220c      	movs	r2, #12
 80036ac:	4619      	mov	r1, r3
 80036ae:	4814      	ldr	r0, [pc, #80]	; (8003700 <MX_TIM1_Init+0x180>)
 80036b0:	f003 fdb6 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80036ba:	f7ff fbcf 	bl	8002e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4807      	ldr	r0, [pc, #28]	; (8003700 <MX_TIM1_Init+0x180>)
 80036e2:	f004 fa8f 	bl	8007c04 <HAL_TIMEx_ConfigBreakDeadTime>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80036ec:	f7ff fbb6 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036f0:	4803      	ldr	r0, [pc, #12]	; (8003700 <MX_TIM1_Init+0x180>)
 80036f2:	f000 fa9f 	bl	8003c34 <HAL_TIM_MspPostInit>

}
 80036f6:	bf00      	nop
 80036f8:	3758      	adds	r7, #88	; 0x58
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200009a4 	.word	0x200009a4
 8003704:	40012c00 	.word	0x40012c00

08003708 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f005 fa54 	bl	8008bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <MX_TIM2_Init+0xa4>)
 8003726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800372a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <MX_TIM2_Init+0xa4>)
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <MX_TIM2_Init+0xa4>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <MX_TIM2_Init+0xa4>)
 800373a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <MX_TIM2_Init+0xa4>)
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <MX_TIM2_Init+0xa4>)
 8003748:	2200      	movs	r2, #0
 800374a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800374c:	2301      	movs	r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003768:	2300      	movs	r3, #0
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	4619      	mov	r1, r3
 8003776:	480d      	ldr	r0, [pc, #52]	; (80037ac <MX_TIM2_Init+0xa4>)
 8003778:	f003 fb1a 	bl	8006db0 <HAL_TIM_Encoder_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003782:	f7ff fb6b 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4806      	ldr	r0, [pc, #24]	; (80037ac <MX_TIM2_Init+0xa4>)
 8003794:	f004 f9ca 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800379e:	f7ff fb5d 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037a2:	bf00      	nop
 80037a4:	3730      	adds	r7, #48	; 0x30
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200009ec 	.word	0x200009ec

080037b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	; 0x38
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c4:	f107 0320 	add.w	r3, r7, #32
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
 80037dc:	615a      	str	r2, [r3, #20]
 80037de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <MX_TIM3_Init+0xe8>)
 80037e2:	4a2e      	ldr	r2, [pc, #184]	; (800389c <MX_TIM3_Init+0xec>)
 80037e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80037e6:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <MX_TIM3_Init+0xe8>)
 80037e8:	2247      	movs	r2, #71	; 0x47
 80037ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <MX_TIM3_Init+0xe8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <MX_TIM3_Init+0xe8>)
 80037f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80037f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <MX_TIM3_Init+0xe8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <MX_TIM3_Init+0xe8>)
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003806:	4824      	ldr	r0, [pc, #144]	; (8003898 <MX_TIM3_Init+0xe8>)
 8003808:	f003 f810 	bl	800682c <HAL_TIM_Base_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003812:	f7ff fb23 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800381c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003820:	4619      	mov	r1, r3
 8003822:	481d      	ldr	r0, [pc, #116]	; (8003898 <MX_TIM3_Init+0xe8>)
 8003824:	f003 fdba 	bl	800739c <HAL_TIM_ConfigClockSource>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800382e:	f7ff fb15 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003832:	4819      	ldr	r0, [pc, #100]	; (8003898 <MX_TIM3_Init+0xe8>)
 8003834:	f003 f8aa 	bl	800698c <HAL_TIM_PWM_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800383e:	f7ff fb0d 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800384a:	f107 0320 	add.w	r3, r7, #32
 800384e:	4619      	mov	r1, r3
 8003850:	4811      	ldr	r0, [pc, #68]	; (8003898 <MX_TIM3_Init+0xe8>)
 8003852:	f004 f96b 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800385c:	f7ff fafe 	bl	8002e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003860:	2360      	movs	r3, #96	; 0x60
 8003862:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 8003864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	4619      	mov	r1, r3
 8003878:	4807      	ldr	r0, [pc, #28]	; (8003898 <MX_TIM3_Init+0xe8>)
 800387a:	f003 fcd1 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003884:	f7ff faea 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <MX_TIM3_Init+0xe8>)
 800388a:	f000 f9d3 	bl	8003c34 <HAL_TIM_MspPostInit>

}
 800388e:	bf00      	nop
 8003890:	3738      	adds	r7, #56	; 0x38
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000a34 	.word	0x20000a34
 800389c:	40000400 	.word	0x40000400

080038a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f005 f988 	bl	8008bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038bc:	4b20      	ldr	r3, [pc, #128]	; (8003940 <MX_TIM5_Init+0xa0>)
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <MX_TIM5_Init+0xa4>)
 80038c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80038c2:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <MX_TIM5_Init+0xa0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <MX_TIM5_Init+0xa0>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <MX_TIM5_Init+0xa0>)
 80038d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <MX_TIM5_Init+0xa0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <MX_TIM5_Init+0xa0>)
 80038de:	2200      	movs	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038ea:	2301      	movs	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038fa:	2301      	movs	r3, #1
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	4619      	mov	r1, r3
 800390c:	480c      	ldr	r0, [pc, #48]	; (8003940 <MX_TIM5_Init+0xa0>)
 800390e:	f003 fa4f 	bl	8006db0 <HAL_TIM_Encoder_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003918:	f7ff faa0 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391c:	2300      	movs	r3, #0
 800391e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4805      	ldr	r0, [pc, #20]	; (8003940 <MX_TIM5_Init+0xa0>)
 800392a:	f004 f8ff 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003934:	f7ff fa92 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003938:	bf00      	nop
 800393a:	3730      	adds	r7, #48	; 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000a7c 	.word	0x20000a7c
 8003944:	40000c00 	.word	0x40000c00

08003948 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800394e:	463b      	mov	r3, r7
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <MX_TIM6_Init+0x64>)
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <MX_TIM6_Init+0x68>)
 800395a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <MX_TIM6_Init+0x64>)
 800395e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003962:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <MX_TIM6_Init+0x64>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <MX_TIM6_Init+0x64>)
 800396c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003970:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <MX_TIM6_Init+0x64>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003978:	480c      	ldr	r0, [pc, #48]	; (80039ac <MX_TIM6_Init+0x64>)
 800397a:	f002 ff57 	bl	800682c <HAL_TIM_Base_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003984:	f7ff fa6a 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003990:	463b      	mov	r3, r7
 8003992:	4619      	mov	r1, r3
 8003994:	4805      	ldr	r0, [pc, #20]	; (80039ac <MX_TIM6_Init+0x64>)
 8003996:	f004 f8c9 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80039a0:	f7ff fa5c 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000ac4 	.word	0x20000ac4
 80039b0:	40001000 	.word	0x40001000

080039b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ba:	463b      	mov	r3, r7
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <MX_TIM7_Init+0x64>)
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <MX_TIM7_Init+0x68>)
 80039c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <MX_TIM7_Init+0x64>)
 80039ca:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80039ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <MX_TIM7_Init+0x64>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <MX_TIM7_Init+0x64>)
 80039d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80039dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <MX_TIM7_Init+0x64>)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039e4:	480c      	ldr	r0, [pc, #48]	; (8003a18 <MX_TIM7_Init+0x64>)
 80039e6:	f002 ff21 	bl	800682c <HAL_TIM_Base_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80039f0:	f7ff fa34 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039fc:	463b      	mov	r3, r7
 80039fe:	4619      	mov	r1, r3
 8003a00:	4805      	ldr	r0, [pc, #20]	; (8003a18 <MX_TIM7_Init+0x64>)
 8003a02:	f004 f893 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003a0c:	f7ff fa26 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000b0c 	.word	0x20000b0c
 8003a1c:	40001400 	.word	0x40001400

08003a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <HAL_TIM_Base_MspInit+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d114      	bne.n	8003a5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a3c:	6193      	str	r3, [r2, #24]
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2105      	movs	r1, #5
 8003a4e:	2019      	movs	r0, #25
 8003a50:	f000 fdf9 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003a54:	2019      	movs	r0, #25
 8003a56:	f000 fe12 	bl	800467e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003a5a:	e044      	b.n	8003ae6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <HAL_TIM_Base_MspInit+0xd8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10c      	bne.n	8003a80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	61d3      	str	r3, [r2, #28]
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]
}
 8003a7e:	e032      	b.n	8003ae6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_TIM_Base_MspInit+0xdc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d114      	bne.n	8003ab4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a90:	f043 0310 	orr.w	r3, r3, #16
 8003a94:	61d3      	str	r3, [r2, #28]
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2105      	movs	r1, #5
 8003aa6:	2036      	movs	r0, #54	; 0x36
 8003aa8:	f000 fdcd 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003aac:	2036      	movs	r0, #54	; 0x36
 8003aae:	f000 fde6 	bl	800467e <HAL_NVIC_EnableIRQ>
}
 8003ab2:	e018      	b.n	8003ae6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <HAL_TIM_Base_MspInit+0xe0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d113      	bne.n	8003ae6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_TIM_Base_MspInit+0xd4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2105      	movs	r1, #5
 8003ada:	2037      	movs	r0, #55	; 0x37
 8003adc:	f000 fdb3 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ae0:	2037      	movs	r0, #55	; 0x37
 8003ae2:	f000 fdcc 	bl	800467e <HAL_NVIC_EnableIRQ>
}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40001000 	.word	0x40001000
 8003b00:	40001400 	.word	0x40001400

08003b04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d14f      	bne.n	8003bc4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b24:	4b3e      	ldr	r3, [pc, #248]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	61d3      	str	r3, [r2, #28]
 8003b30:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3c:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	4a37      	ldr	r2, [pc, #220]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	6193      	str	r3, [r2, #24]
 8003b48:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a31      	ldr	r2, [pc, #196]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8003b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4828      	ldr	r0, [pc, #160]	; (8003c24 <HAL_TIM_Encoder_MspInit+0x120>)
 8003b82:	f000 fed9 	bl	8004938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8003b86:	2308      	movs	r3, #8
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003b92:	f107 031c 	add.w	r3, r7, #28
 8003b96:	4619      	mov	r1, r3
 8003b98:	4823      	ldr	r0, [pc, #140]	; (8003c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b9a:	f000 fecd 	bl	8004938 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_TIM_Encoder_MspInit+0x128>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_TIM_Encoder_MspInit+0x128>)
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003bc2:	e028      	b.n	8003c16 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d123      	bne.n	8003c16 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	61d3      	str	r3, [r2, #28]
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6193      	str	r3, [r2, #24]
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4804      	ldr	r0, [pc, #16]	; (8003c24 <HAL_TIM_Encoder_MspInit+0x120>)
 8003c12:	f000 fe91 	bl	8004938 <HAL_GPIO_Init>
}
 8003c16:	bf00      	nop
 8003c18:	3730      	adds	r7, #48	; 0x30
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40010800 	.word	0x40010800
 8003c28:	40010c00 	.word	0x40010c00
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000c00 	.word	0x40000c00

08003c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_TIM_MspPostInit+0xbc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d119      	bne.n	8003c88 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_TIM_MspPostInit+0xc0>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_TIM_MspPostInit+0xc0>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6193      	str	r3, [r2, #24]
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_TIM_MspPostInit+0xc0>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8003c6c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	2302      	movs	r3, #2
 8003c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c76:	2302      	movs	r3, #2
 8003c78:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	481d      	ldr	r0, [pc, #116]	; (8003cf8 <HAL_TIM_MspPostInit+0xc4>)
 8003c82:	f000 fe59 	bl	8004938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c86:	e02e      	b.n	8003ce6 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <HAL_TIM_MspPostInit+0xc8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d129      	bne.n	8003ce6 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_TIM_MspPostInit+0xc0>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <HAL_TIM_MspPostInit+0xc0>)
 8003c98:	f043 0310 	orr.w	r3, r3, #16
 8003c9c:	6193      	str	r3, [r2, #24]
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_TIM_MspPostInit+0xc0>)
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8003caa:	2340      	movs	r3, #64	; 0x40
 8003cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4810      	ldr	r0, [pc, #64]	; (8003d00 <HAL_TIM_MspPostInit+0xcc>)
 8003cbe:	f000 fe3b 	bl	8004938 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <HAL_TIM_MspPostInit+0xd0>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <HAL_TIM_MspPostInit+0xd0>)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	6053      	str	r3, [r2, #4]
}
 8003ce6:	bf00      	nop
 8003ce8:	3728      	adds	r7, #40	; 0x28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010800 	.word	0x40010800
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40011000 	.word	0x40011000
 8003d04:	40010000 	.word	0x40010000

08003d08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <MX_USART1_UART_Init+0x50>)
 8003d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d2e:	220c      	movs	r2, #12
 8003d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d3e:	4805      	ldr	r0, [pc, #20]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d40:	f003 ffc3 	bl	8007cca <HAL_UART_Init>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d4a:	f7ff f887 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000b58 	.word	0x20000b58
 8003d58:	40013800 	.word	0x40013800

08003d5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <MX_USART2_UART_Init+0x50>)
 8003d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d82:	220c      	movs	r2, #12
 8003d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <MX_USART2_UART_Init+0x4c>)
 8003d94:	f003 ff99 	bl	8007cca <HAL_UART_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d9e:	f7ff f85d 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000b9c 	.word	0x20000b9c
 8003dac:	40004400 	.word	0x40004400

08003db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08c      	sub	sp, #48	; 0x30
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	f107 031c 	add.w	r3, r7, #28
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a45      	ldr	r2, [pc, #276]	; (8003ee0 <HAL_UART_MspInit+0x130>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d146      	bne.n	8003e5e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dd0:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4a43      	ldr	r2, [pc, #268]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dda:	6193      	str	r3, [r2, #24]
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003dee:	f043 0308 	orr.w	r3, r3, #8
 8003df2:	6193      	str	r3, [r2, #24]
 8003df4:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 8003e00:	2340      	movs	r3, #64	; 0x40
 8003e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	2302      	movs	r3, #2
 8003e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	4835      	ldr	r0, [pc, #212]	; (8003ee8 <HAL_UART_MspInit+0x138>)
 8003e14:	f000 fd90 	bl	8004938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	4619      	mov	r1, r3
 8003e2a:	482f      	ldr	r0, [pc, #188]	; (8003ee8 <HAL_UART_MspInit+0x138>)
 8003e2c:	f000 fd84 	bl	8004938 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003e30:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <HAL_UART_MspInit+0x13c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <HAL_UART_MspInit+0x13c>)
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2105      	movs	r1, #5
 8003e50:	2025      	movs	r0, #37	; 0x25
 8003e52:	f000 fbf8 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e56:	2025      	movs	r0, #37	; 0x25
 8003e58:	f000 fc11 	bl	800467e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e5c:	e03c      	b.n	8003ed8 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_UART_MspInit+0x140>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d137      	bne.n	8003ed8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e72:	61d3      	str	r3, [r2, #28]
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003e86:	f043 0304 	orr.w	r3, r3, #4
 8003e8a:	6193      	str	r3, [r2, #24]
 8003e8c:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_UART_MspInit+0x134>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8003e98:	2304      	movs	r3, #4
 8003e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4812      	ldr	r0, [pc, #72]	; (8003ef4 <HAL_UART_MspInit+0x144>)
 8003eac:	f000 fd44 	bl	8004938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003ebc:	f107 031c 	add.w	r3, r7, #28
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	480c      	ldr	r0, [pc, #48]	; (8003ef4 <HAL_UART_MspInit+0x144>)
 8003ec4:	f000 fd38 	bl	8004938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2105      	movs	r1, #5
 8003ecc:	2026      	movs	r0, #38	; 0x26
 8003ece:	f000 fbba 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ed2:	2026      	movs	r0, #38	; 0x26
 8003ed4:	f000 fbd3 	bl	800467e <HAL_NVIC_EnableIRQ>
}
 8003ed8:	bf00      	nop
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40010c00 	.word	0x40010c00
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40004400 	.word	0x40004400
 8003ef4:	40010800 	.word	0x40010800

08003ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f00:	e002      	b.n	8003f08 <LoopCopyDataInit>

08003f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f06:	3304      	adds	r3, #4

08003f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f0c:	d3f9      	bcc.n	8003f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f14:	e001      	b.n	8003f1a <LoopFillZerobss>

08003f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f18:	3204      	adds	r2, #4

08003f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f1c:	d3fb      	bcc.n	8003f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f1e:	f7ff fb29 	bl	8003574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f22:	f004 fe1d 	bl	8008b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f26:	f7fe fcfb 	bl	8002920 <main>
  bx lr
 8003f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f30:	200007c0 	.word	0x200007c0
  ldr r2, =_sidata
 8003f34:	0800db68 	.word	0x0800db68
  ldr r2, =_sbss
 8003f38:	200007c0 	.word	0x200007c0
  ldr r4, =_ebss
 8003f3c:	20000cac 	.word	0x20000cac

08003f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC1_2_IRQHandler>
	...

08003f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <HAL_Init+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <HAL_Init+0x28>)
 8003f4e:	f043 0310 	orr.w	r3, r3, #16
 8003f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f54:	2003      	movs	r0, #3
 8003f56:	f000 fb6b 	bl	8004630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f5a:	200f      	movs	r0, #15
 8003f5c:	f000 f808 	bl	8003f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f60:	f7ff f9b4 	bl	80032cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	.word	0x40022000

08003f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_InitTick+0x54>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_InitTick+0x58>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fb83 	bl	800469a <HAL_SYSTICK_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00e      	b.n	8003fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d80a      	bhi.n	8003fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	f000 fb4b 	bl	8004646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fb0:	4a06      	ldr	r2, [pc, #24]	; (8003fcc <HAL_InitTick+0x5c>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200005e0 	.word	0x200005e0
 8003fc8:	200005e8 	.word	0x200005e8
 8003fcc:	200005e4 	.word	0x200005e4

08003fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_IncTick+0x1c>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_IncTick+0x20>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	4a03      	ldr	r2, [pc, #12]	; (8003ff0 <HAL_IncTick+0x20>)
 8003fe2:	6013      	str	r3, [r2, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	200005e8 	.word	0x200005e8
 8003ff0:	20000be0 	.word	0x20000be0

08003ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff8:	4b02      	ldr	r3, [pc, #8]	; (8004004 <HAL_GetTick+0x10>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	20000be0 	.word	0x20000be0

08004008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d005      	beq.n	800402e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_Delay+0x44>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800402e:	bf00      	nop
 8004030:	f7ff ffe0 	bl	8003ff4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d8f7      	bhi.n	8004030 <HAL_Delay+0x28>
  {
  }
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200005e8 	.word	0x200005e8

08004050 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0ce      	b.n	8004210 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd faea 	bl	8001668 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9bd 	bl	8004414 <ADC_ConversionStop_Disable>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 80a9 	bne.w	80041fe <HAL_ADC_Init+0x1ae>
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 80a5 	bne.w	80041fe <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040bc:	f023 0302 	bic.w	r3, r3, #2
 80040c0:	f043 0202 	orr.w	r2, r3, #2
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4951      	ldr	r1, [pc, #324]	; (8004218 <HAL_ADC_Init+0x1c8>)
 80040d2:	428b      	cmp	r3, r1
 80040d4:	d10a      	bne.n	80040ec <HAL_ADC_Init+0x9c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040de:	d002      	beq.n	80040e6 <HAL_ADC_Init+0x96>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	e004      	b.n	80040f0 <HAL_ADC_Init+0xa0>
 80040e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80040ea:	e001      	b.n	80040f0 <HAL_ADC_Init+0xa0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	7b1b      	ldrb	r3, [r3, #12]
 80040f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d003      	beq.n	8004112 <HAL_ADC_Init+0xc2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <HAL_ADC_Init+0xc8>
 8004112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004116:	e000      	b.n	800411a <HAL_ADC_Init+0xca>
 8004118:	2300      	movs	r3, #0
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7d1b      	ldrb	r3, [r3, #20]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d119      	bne.n	800415c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7b1b      	ldrb	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	3b01      	subs	r3, #1
 8004136:	035a      	lsls	r2, r3, #13
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e00b      	b.n	800415c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <HAL_ADC_Init+0x1cc>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	430b      	orrs	r3, r1
 8004182:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418c:	d003      	beq.n	8004196 <HAL_ADC_Init+0x146>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d104      	bne.n	80041a0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	051b      	lsls	r3, r3, #20
 800419e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_ADC_Init+0x1d0>)
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d10b      	bne.n	80041dc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041da:	e018      	b.n	800420e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f023 0312 	bic.w	r3, r3, #18
 80041e4:	f043 0210 	orr.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041fc:	e007      	b.n	800420e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f043 0210 	orr.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40013c00 	.word	0x40013c00
 800421c:	ffe1f7fd 	.word	0xffe1f7fd
 8004220:	ff1f0efe 	.word	0xff1f0efe

08004224 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x20>
 8004240:	2302      	movs	r3, #2
 8004242:	e0dc      	b.n	80043fe <HAL_ADC_ConfigChannel+0x1da>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b06      	cmp	r3, #6
 8004252:	d81c      	bhi.n	800428e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	3b05      	subs	r3, #5
 8004266:	221f      	movs	r2, #31
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	4019      	ands	r1, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	3b05      	subs	r3, #5
 8004280:	fa00 f203 	lsl.w	r2, r0, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	635a      	str	r2, [r3, #52]	; 0x34
 800428c:	e03c      	b.n	8004308 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d81c      	bhi.n	80042d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	3b23      	subs	r3, #35	; 0x23
 80042a8:	221f      	movs	r2, #31
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	4019      	ands	r1, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	3b23      	subs	r3, #35	; 0x23
 80042c2:	fa00 f203 	lsl.w	r2, r0, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
 80042ce:	e01b      	b.n	8004308 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	3b41      	subs	r3, #65	; 0x41
 80042e2:	221f      	movs	r2, #31
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	4019      	ands	r1, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	3b41      	subs	r3, #65	; 0x41
 80042fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b09      	cmp	r3, #9
 800430e:	d91c      	bls.n	800434a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68d9      	ldr	r1, [r3, #12]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	3b1e      	subs	r3, #30
 8004322:	2207      	movs	r2, #7
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	4019      	ands	r1, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6898      	ldr	r0, [r3, #8]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	3b1e      	subs	r3, #30
 800433c:	fa00 f203 	lsl.w	r2, r0, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	e019      	b.n	800437e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6919      	ldr	r1, [r3, #16]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	2207      	movs	r2, #7
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	4019      	ands	r1, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6898      	ldr	r0, [r3, #8]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	fa00 f203 	lsl.w	r2, r0, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b10      	cmp	r3, #16
 8004384:	d003      	beq.n	800438e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800438a:	2b11      	cmp	r3, #17
 800438c:	d132      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_ADC_ConfigChannel+0x1e4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d125      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d126      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d11a      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_ADC_ConfigChannel+0x1e8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <HAL_ADC_ConfigChannel+0x1ec>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	0c9a      	lsrs	r2, r3, #18
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043d4:	e002      	b.n	80043dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3b01      	subs	r3, #1
 80043da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f9      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x1b2>
 80043e2:	e007      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	f043 0220 	orr.w	r2, r3, #32
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012400 	.word	0x40012400
 800440c:	200005e0 	.word	0x200005e0
 8004410:	431bde83 	.word	0x431bde83

08004414 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d12e      	bne.n	800448c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800443e:	f7ff fdd9 	bl	8003ff4 <HAL_GetTick>
 8004442:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004444:	e01b      	b.n	800447e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004446:	f7ff fdd5 	bl	8003ff4 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d914      	bls.n	800447e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10d      	bne.n	800447e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e007      	b.n	800448e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d0dc      	beq.n	8004446 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <__NVIC_GetPriorityGrouping+0x18>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0307 	and.w	r3, r3, #7
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db0b      	blt.n	8004526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4906      	ldr	r1, [pc, #24]	; (8004530 <__NVIC_EnableIRQ+0x34>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	e000e100 	.word	0xe000e100

08004534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db0a      	blt.n	800455e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <__NVIC_SetPriority+0x4c>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	440b      	add	r3, r1
 8004558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800455c:	e00a      	b.n	8004574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <__NVIC_SetPriority+0x50>)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3b04      	subs	r3, #4
 800456c:	0112      	lsls	r2, r2, #4
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	440b      	add	r3, r1
 8004572:	761a      	strb	r2, [r3, #24]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e100 	.word	0xe000e100
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f1c3 0307 	rsb	r3, r3, #7
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf28      	it	cs
 80045a6:	2304      	movcs	r3, #4
 80045a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d902      	bls.n	80045b8 <NVIC_EncodePriority+0x30>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3b03      	subs	r3, #3
 80045b6:	e000      	b.n	80045ba <NVIC_EncodePriority+0x32>
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	401a      	ands	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d0:	f04f 31ff 	mov.w	r1, #4294967295
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43d9      	mvns	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	4313      	orrs	r3, r2
         );
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045fc:	d301      	bcc.n	8004602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fe:	2301      	movs	r3, #1
 8004600:	e00f      	b.n	8004622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <SysTick_Config+0x40>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800460a:	210f      	movs	r1, #15
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	f7ff ff90 	bl	8004534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <SysTick_Config+0x40>)
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800461a:	4b04      	ldr	r3, [pc, #16]	; (800462c <SysTick_Config+0x40>)
 800461c:	2207      	movs	r2, #7
 800461e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	e000e010 	.word	0xe000e010

08004630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff2d 	bl	8004498 <__NVIC_SetPriorityGrouping>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	4603      	mov	r3, r0
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004658:	f7ff ff42 	bl	80044e0 <__NVIC_GetPriorityGrouping>
 800465c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7ff ff90 	bl	8004588 <NVIC_EncodePriority>
 8004668:	4602      	mov	r2, r0
 800466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff5f 	bl	8004534 <__NVIC_SetPriority>
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff35 	bl	80044fc <__NVIC_EnableIRQ>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff ffa2 	bl	80045ec <SysTick_Config>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d008      	beq.n	80046da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2204      	movs	r2, #4
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e020      	b.n	800471c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 020e 	bic.w	r2, r2, #14
 80046e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	2101      	movs	r1, #1
 8004704:	fa01 f202 	lsl.w	r2, r1, r2
 8004708:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
	...

08004728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800473a:	2b02      	cmp	r3, #2
 800473c:	d005      	beq.n	800474a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2204      	movs	r2, #4
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e0d6      	b.n	80048f8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 020e 	bic.w	r2, r2, #14
 8004758:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	4b64      	ldr	r3, [pc, #400]	; (8004904 <HAL_DMA_Abort_IT+0x1dc>)
 8004772:	429a      	cmp	r2, r3
 8004774:	d958      	bls.n	8004828 <HAL_DMA_Abort_IT+0x100>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a63      	ldr	r2, [pc, #396]	; (8004908 <HAL_DMA_Abort_IT+0x1e0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d04f      	beq.n	8004820 <HAL_DMA_Abort_IT+0xf8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a61      	ldr	r2, [pc, #388]	; (800490c <HAL_DMA_Abort_IT+0x1e4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d048      	beq.n	800481c <HAL_DMA_Abort_IT+0xf4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a60      	ldr	r2, [pc, #384]	; (8004910 <HAL_DMA_Abort_IT+0x1e8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d040      	beq.n	8004816 <HAL_DMA_Abort_IT+0xee>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5e      	ldr	r2, [pc, #376]	; (8004914 <HAL_DMA_Abort_IT+0x1ec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d038      	beq.n	8004810 <HAL_DMA_Abort_IT+0xe8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_DMA_Abort_IT+0x1f0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d030      	beq.n	800480a <HAL_DMA_Abort_IT+0xe2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a5b      	ldr	r2, [pc, #364]	; (800491c <HAL_DMA_Abort_IT+0x1f4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d028      	beq.n	8004804 <HAL_DMA_Abort_IT+0xdc>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a53      	ldr	r2, [pc, #332]	; (8004904 <HAL_DMA_Abort_IT+0x1dc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d020      	beq.n	80047fe <HAL_DMA_Abort_IT+0xd6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a57      	ldr	r2, [pc, #348]	; (8004920 <HAL_DMA_Abort_IT+0x1f8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_DMA_Abort_IT+0xd2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a56      	ldr	r2, [pc, #344]	; (8004924 <HAL_DMA_Abort_IT+0x1fc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d012      	beq.n	80047f6 <HAL_DMA_Abort_IT+0xce>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a54      	ldr	r2, [pc, #336]	; (8004928 <HAL_DMA_Abort_IT+0x200>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00a      	beq.n	80047f0 <HAL_DMA_Abort_IT+0xc8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a53      	ldr	r2, [pc, #332]	; (800492c <HAL_DMA_Abort_IT+0x204>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d102      	bne.n	80047ea <HAL_DMA_Abort_IT+0xc2>
 80047e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e8:	e01b      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 80047ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ee:	e018      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 80047f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f4:	e015      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 80047f6:	2310      	movs	r3, #16
 80047f8:	e013      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e011      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 80047fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004802:	e00e      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 8004804:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004808:	e00b      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 800480a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800480e:	e008      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 8004810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004814:	e005      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 8004816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800481a:	e002      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 800481c:	2310      	movs	r3, #16
 800481e:	e000      	b.n	8004822 <HAL_DMA_Abort_IT+0xfa>
 8004820:	2301      	movs	r3, #1
 8004822:	4a43      	ldr	r2, [pc, #268]	; (8004930 <HAL_DMA_Abort_IT+0x208>)
 8004824:	6053      	str	r3, [r2, #4]
 8004826:	e057      	b.n	80048d8 <HAL_DMA_Abort_IT+0x1b0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a36      	ldr	r2, [pc, #216]	; (8004908 <HAL_DMA_Abort_IT+0x1e0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d04f      	beq.n	80048d2 <HAL_DMA_Abort_IT+0x1aa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a35      	ldr	r2, [pc, #212]	; (800490c <HAL_DMA_Abort_IT+0x1e4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d048      	beq.n	80048ce <HAL_DMA_Abort_IT+0x1a6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a33      	ldr	r2, [pc, #204]	; (8004910 <HAL_DMA_Abort_IT+0x1e8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d040      	beq.n	80048c8 <HAL_DMA_Abort_IT+0x1a0>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a32      	ldr	r2, [pc, #200]	; (8004914 <HAL_DMA_Abort_IT+0x1ec>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d038      	beq.n	80048c2 <HAL_DMA_Abort_IT+0x19a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	; (8004918 <HAL_DMA_Abort_IT+0x1f0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d030      	beq.n	80048bc <HAL_DMA_Abort_IT+0x194>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2f      	ldr	r2, [pc, #188]	; (800491c <HAL_DMA_Abort_IT+0x1f4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d028      	beq.n	80048b6 <HAL_DMA_Abort_IT+0x18e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a26      	ldr	r2, [pc, #152]	; (8004904 <HAL_DMA_Abort_IT+0x1dc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d020      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x188>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <HAL_DMA_Abort_IT+0x1f8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d019      	beq.n	80048ac <HAL_DMA_Abort_IT+0x184>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <HAL_DMA_Abort_IT+0x1fc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d012      	beq.n	80048a8 <HAL_DMA_Abort_IT+0x180>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a28      	ldr	r2, [pc, #160]	; (8004928 <HAL_DMA_Abort_IT+0x200>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00a      	beq.n	80048a2 <HAL_DMA_Abort_IT+0x17a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <HAL_DMA_Abort_IT+0x204>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d102      	bne.n	800489c <HAL_DMA_Abort_IT+0x174>
 8004896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800489a:	e01b      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 800489c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a0:	e018      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a6:	e015      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048a8:	2310      	movs	r3, #16
 80048aa:	e013      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e011      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b4:	e00e      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048ba:	e00b      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048c0:	e008      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048c6:	e005      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048cc:	e002      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048ce:	2310      	movs	r3, #16
 80048d0:	e000      	b.n	80048d4 <HAL_DMA_Abort_IT+0x1ac>
 80048d2:	2301      	movs	r3, #1
 80048d4:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_DMA_Abort_IT+0x20c>)
 80048d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
    } 
  }
  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40020080 	.word	0x40020080
 8004908:	40020008 	.word	0x40020008
 800490c:	4002001c 	.word	0x4002001c
 8004910:	40020030 	.word	0x40020030
 8004914:	40020044 	.word	0x40020044
 8004918:	40020058 	.word	0x40020058
 800491c:	4002006c 	.word	0x4002006c
 8004920:	40020408 	.word	0x40020408
 8004924:	4002041c 	.word	0x4002041c
 8004928:	40020430 	.word	0x40020430
 800492c:	40020444 	.word	0x40020444
 8004930:	40020400 	.word	0x40020400
 8004934:	40020000 	.word	0x40020000

08004938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004938:	b480      	push	{r7}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494a:	e179      	b.n	8004c40 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800494c:	2201      	movs	r2, #1
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8168 	bne.w	8004c3a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4a96      	ldr	r2, [pc, #600]	; (8004bc8 <HAL_GPIO_Init+0x290>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d05e      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004974:	4a94      	ldr	r2, [pc, #592]	; (8004bc8 <HAL_GPIO_Init+0x290>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d875      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 800497a:	4a94      	ldr	r2, [pc, #592]	; (8004bcc <HAL_GPIO_Init+0x294>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d058      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004980:	4a92      	ldr	r2, [pc, #584]	; (8004bcc <HAL_GPIO_Init+0x294>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d86f      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 8004986:	4a92      	ldr	r2, [pc, #584]	; (8004bd0 <HAL_GPIO_Init+0x298>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d052      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 800498c:	4a90      	ldr	r2, [pc, #576]	; (8004bd0 <HAL_GPIO_Init+0x298>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d869      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 8004992:	4a90      	ldr	r2, [pc, #576]	; (8004bd4 <HAL_GPIO_Init+0x29c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04c      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004998:	4a8e      	ldr	r2, [pc, #568]	; (8004bd4 <HAL_GPIO_Init+0x29c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d863      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 800499e:	4a8e      	ldr	r2, [pc, #568]	; (8004bd8 <HAL_GPIO_Init+0x2a0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d046      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 80049a4:	4a8c      	ldr	r2, [pc, #560]	; (8004bd8 <HAL_GPIO_Init+0x2a0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d85d      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 80049aa:	2b12      	cmp	r3, #18
 80049ac:	d82a      	bhi.n	8004a04 <HAL_GPIO_Init+0xcc>
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d859      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <HAL_GPIO_Init+0x80>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	08004a1f 	.word	0x08004a1f
 80049c4:	08004a61 	.word	0x08004a61
 80049c8:	08004a67 	.word	0x08004a67
 80049cc:	08004a67 	.word	0x08004a67
 80049d0:	08004a67 	.word	0x08004a67
 80049d4:	08004a67 	.word	0x08004a67
 80049d8:	08004a67 	.word	0x08004a67
 80049dc:	08004a67 	.word	0x08004a67
 80049e0:	08004a67 	.word	0x08004a67
 80049e4:	08004a67 	.word	0x08004a67
 80049e8:	08004a67 	.word	0x08004a67
 80049ec:	08004a67 	.word	0x08004a67
 80049f0:	08004a67 	.word	0x08004a67
 80049f4:	08004a67 	.word	0x08004a67
 80049f8:	08004a67 	.word	0x08004a67
 80049fc:	08004a15 	.word	0x08004a15
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	4a75      	ldr	r2, [pc, #468]	; (8004bdc <HAL_GPIO_Init+0x2a4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a0a:	e02c      	b.n	8004a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	623b      	str	r3, [r7, #32]
          break;
 8004a12:	e029      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	623b      	str	r3, [r7, #32]
          break;
 8004a1c:	e024      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	3308      	adds	r3, #8
 8004a24:	623b      	str	r3, [r7, #32]
          break;
 8004a26:	e01f      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	623b      	str	r3, [r7, #32]
          break;
 8004a30:	e01a      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	623b      	str	r3, [r7, #32]
          break;
 8004a3e:	e013      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a48:	2308      	movs	r3, #8
 8004a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	611a      	str	r2, [r3, #16]
          break;
 8004a52:	e009      	b.n	8004a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a54:	2308      	movs	r3, #8
 8004a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	615a      	str	r2, [r3, #20]
          break;
 8004a5e:	e003      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
          break;
 8004a64:	e000      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          break;
 8004a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2bff      	cmp	r3, #255	; 0xff
 8004a6c:	d801      	bhi.n	8004a72 <HAL_GPIO_Init+0x13a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e001      	b.n	8004a76 <HAL_GPIO_Init+0x13e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2bff      	cmp	r3, #255	; 0xff
 8004a7c:	d802      	bhi.n	8004a84 <HAL_GPIO_Init+0x14c>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	e002      	b.n	8004a8a <HAL_GPIO_Init+0x152>
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3b08      	subs	r3, #8
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	210f      	movs	r1, #15
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	6a39      	ldr	r1, [r7, #32]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80c1 	beq.w	8004c3a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ab8:	4b49      	ldr	r3, [pc, #292]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	4a48      	ldr	r2, [pc, #288]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6193      	str	r3, [r2, #24]
 8004ac4:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ad0:	4a44      	ldr	r2, [pc, #272]	; (8004be4 <HAL_GPIO_Init+0x2ac>)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3c      	ldr	r2, [pc, #240]	; (8004be8 <HAL_GPIO_Init+0x2b0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01f      	beq.n	8004b3c <HAL_GPIO_Init+0x204>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3b      	ldr	r2, [pc, #236]	; (8004bec <HAL_GPIO_Init+0x2b4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d019      	beq.n	8004b38 <HAL_GPIO_Init+0x200>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3a      	ldr	r2, [pc, #232]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_GPIO_Init+0x1fc>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a39      	ldr	r2, [pc, #228]	; (8004bf4 <HAL_GPIO_Init+0x2bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00d      	beq.n	8004b30 <HAL_GPIO_Init+0x1f8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a38      	ldr	r2, [pc, #224]	; (8004bf8 <HAL_GPIO_Init+0x2c0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <HAL_GPIO_Init+0x1f4>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a37      	ldr	r2, [pc, #220]	; (8004bfc <HAL_GPIO_Init+0x2c4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_GPIO_Init+0x1f0>
 8004b24:	2305      	movs	r3, #5
 8004b26:	e00a      	b.n	8004b3e <HAL_GPIO_Init+0x206>
 8004b28:	2306      	movs	r3, #6
 8004b2a:	e008      	b.n	8004b3e <HAL_GPIO_Init+0x206>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	e006      	b.n	8004b3e <HAL_GPIO_Init+0x206>
 8004b30:	2303      	movs	r3, #3
 8004b32:	e004      	b.n	8004b3e <HAL_GPIO_Init+0x206>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e002      	b.n	8004b3e <HAL_GPIO_Init+0x206>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_GPIO_Init+0x206>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	f002 0203 	and.w	r2, r2, #3
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	4093      	lsls	r3, r2
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b4e:	4925      	ldr	r1, [pc, #148]	; (8004be4 <HAL_GPIO_Init+0x2ac>)
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	3302      	adds	r3, #2
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4924      	ldr	r1, [pc, #144]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
 8004b74:	e006      	b.n	8004b84 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	4920      	ldr	r1, [pc, #128]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d006      	beq.n	8004b9e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	491a      	ldr	r1, [pc, #104]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
 8004b9c:	e006      	b.n	8004bac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	4916      	ldr	r1, [pc, #88]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d025      	beq.n	8004c04 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4910      	ldr	r1, [pc, #64]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]
 8004bc4:	e025      	b.n	8004c12 <HAL_GPIO_Init+0x2da>
 8004bc6:	bf00      	nop
 8004bc8:	10320000 	.word	0x10320000
 8004bcc:	10310000 	.word	0x10310000
 8004bd0:	10220000 	.word	0x10220000
 8004bd4:	10210000 	.word	0x10210000
 8004bd8:	10120000 	.word	0x10120000
 8004bdc:	10110000 	.word	0x10110000
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010800 	.word	0x40010800
 8004bec:	40010c00 	.word	0x40010c00
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	40011800 	.word	0x40011800
 8004bfc:	40011c00 	.word	0x40011c00
 8004c00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c04:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_GPIO_Init+0x324>)
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	4913      	ldr	r1, [pc, #76]	; (8004c5c <HAL_GPIO_Init+0x324>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_GPIO_Init+0x324>)
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	490e      	ldr	r1, [pc, #56]	; (8004c5c <HAL_GPIO_Init+0x324>)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]
 8004c2a:	e006      	b.n	8004c3a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_GPIO_Init+0x324>)
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	4909      	ldr	r1, [pc, #36]	; (8004c5c <HAL_GPIO_Init+0x324>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f47f ae7e 	bne.w	800494c <HAL_GPIO_Init+0x14>
  }
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	372c      	adds	r7, #44	; 0x2c
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	40010400 	.word	0x40010400

08004c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004c6e:	e0a6      	b.n	8004dbe <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c70:	2201      	movs	r2, #1
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8099 	beq.w	8004db8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004c86:	4a54      	ldr	r2, [pc, #336]	; (8004dd8 <HAL_GPIO_DeInit+0x178>)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c92:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	220f      	movs	r2, #15
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a4c      	ldr	r2, [pc, #304]	; (8004ddc <HAL_GPIO_DeInit+0x17c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01f      	beq.n	8004cf0 <HAL_GPIO_DeInit+0x90>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a4b      	ldr	r2, [pc, #300]	; (8004de0 <HAL_GPIO_DeInit+0x180>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d019      	beq.n	8004cec <HAL_GPIO_DeInit+0x8c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <HAL_GPIO_DeInit+0x184>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <HAL_GPIO_DeInit+0x88>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a49      	ldr	r2, [pc, #292]	; (8004de8 <HAL_GPIO_DeInit+0x188>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_GPIO_DeInit+0x84>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a48      	ldr	r2, [pc, #288]	; (8004dec <HAL_GPIO_DeInit+0x18c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <HAL_GPIO_DeInit+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a47      	ldr	r2, [pc, #284]	; (8004df0 <HAL_GPIO_DeInit+0x190>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d101      	bne.n	8004cdc <HAL_GPIO_DeInit+0x7c>
 8004cd8:	2305      	movs	r3, #5
 8004cda:	e00a      	b.n	8004cf2 <HAL_GPIO_DeInit+0x92>
 8004cdc:	2306      	movs	r3, #6
 8004cde:	e008      	b.n	8004cf2 <HAL_GPIO_DeInit+0x92>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	e006      	b.n	8004cf2 <HAL_GPIO_DeInit+0x92>
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e004      	b.n	8004cf2 <HAL_GPIO_DeInit+0x92>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e002      	b.n	8004cf2 <HAL_GPIO_DeInit+0x92>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <HAL_GPIO_DeInit+0x92>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	f002 0203 	and.w	r2, r2, #3
 8004cf8:	0092      	lsls	r2, r2, #2
 8004cfa:	4093      	lsls	r3, r2
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d132      	bne.n	8004d68 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	220f      	movs	r2, #15
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004d12:	4a31      	ldr	r2, [pc, #196]	; (8004dd8 <HAL_GPIO_DeInit+0x178>)
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	482d      	ldr	r0, [pc, #180]	; (8004dd8 <HAL_GPIO_DeInit+0x178>)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	400a      	ands	r2, r1
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004d30:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	492e      	ldr	r1, [pc, #184]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	492b      	ldr	r1, [pc, #172]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	4927      	ldr	r1, [pc, #156]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	4924      	ldr	r1, [pc, #144]	; (8004df4 <HAL_GPIO_DeInit+0x194>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2bff      	cmp	r3, #255	; 0xff
 8004d6c:	d801      	bhi.n	8004d72 <HAL_GPIO_DeInit+0x112>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	e001      	b.n	8004d76 <HAL_GPIO_DeInit+0x116>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3304      	adds	r3, #4
 8004d76:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2bff      	cmp	r3, #255	; 0xff
 8004d7c:	d802      	bhi.n	8004d84 <HAL_GPIO_DeInit+0x124>
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	e002      	b.n	8004d8a <HAL_GPIO_DeInit+0x12a>
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3b08      	subs	r3, #8
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	210f      	movs	r1, #15
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	431a      	orrs	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f af52 	bne.w	8004c70 <HAL_GPIO_DeInit+0x10>
  }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40010800 	.word	0x40010800
 8004de0:	40010c00 	.word	0x40010c00
 8004de4:	40011000 	.word	0x40011000
 8004de8:	40011400 	.word	0x40011400
 8004dec:	40011800 	.word	0x40011800
 8004df0:	40011c00 	.word	0x40011c00
 8004df4:	40010400 	.word	0x40010400

08004df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	807b      	strh	r3, [r7, #2]
 8004e04:	4613      	mov	r3, r2
 8004e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e08:	787b      	ldrb	r3, [r7, #1]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e0e:	887a      	ldrh	r2, [r7, #2]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e14:	e003      	b.n	8004e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e16:	887b      	ldrh	r3, [r7, #2]
 8004e18:	041a      	lsls	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	611a      	str	r2, [r3, #16]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	041a      	lsls	r2, r3, #16
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43d9      	mvns	r1, r3
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	400b      	ands	r3, r1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	611a      	str	r2, [r3, #16]
}
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e66:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e72:	4a05      	ldr	r2, [pc, #20]	; (8004e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd ffc0 	bl	8002e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40010400 	.word	0x40010400

08004e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e12b      	b.n	80050f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fd fbf6 	bl	80026a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2224      	movs	r2, #36	; 0x24
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0201 	bic.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f001 fba0 	bl	8006634 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4a81      	ldr	r2, [pc, #516]	; (8005100 <HAL_I2C_Init+0x274>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d807      	bhi.n	8004f10 <HAL_I2C_Init+0x84>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a80      	ldr	r2, [pc, #512]	; (8005104 <HAL_I2C_Init+0x278>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bf94      	ite	ls
 8004f08:	2301      	movls	r3, #1
 8004f0a:	2300      	movhi	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e006      	b.n	8004f1e <HAL_I2C_Init+0x92>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a7d      	ldr	r2, [pc, #500]	; (8005108 <HAL_I2C_Init+0x27c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	bf94      	ite	ls
 8004f18:	2301      	movls	r3, #1
 8004f1a:	2300      	movhi	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0e7      	b.n	80050f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a78      	ldr	r2, [pc, #480]	; (800510c <HAL_I2C_Init+0x280>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	0c9b      	lsrs	r3, r3, #18
 8004f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a6a      	ldr	r2, [pc, #424]	; (8005100 <HAL_I2C_Init+0x274>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d802      	bhi.n	8004f60 <HAL_I2C_Init+0xd4>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	e009      	b.n	8004f74 <HAL_I2C_Init+0xe8>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	4a69      	ldr	r2, [pc, #420]	; (8005110 <HAL_I2C_Init+0x284>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	099b      	lsrs	r3, r3, #6
 8004f72:	3301      	adds	r3, #1
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	495c      	ldr	r1, [pc, #368]	; (8005100 <HAL_I2C_Init+0x274>)
 8004f90:	428b      	cmp	r3, r1
 8004f92:	d819      	bhi.n	8004fc8 <HAL_I2C_Init+0x13c>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1e59      	subs	r1, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fa8:	400b      	ands	r3, r1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_I2C_Init+0x138>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1e59      	subs	r1, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc2:	e051      	b.n	8005068 <HAL_I2C_Init+0x1dc>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	e04f      	b.n	8005068 <HAL_I2C_Init+0x1dc>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <HAL_I2C_Init+0x168>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1e58      	subs	r0, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	440b      	add	r3, r1
 8004fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e012      	b.n	800501a <HAL_I2C_Init+0x18e>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1e58      	subs	r0, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	0099      	lsls	r1, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	fbb0 f3f3 	udiv	r3, r0, r3
 800500a:	3301      	adds	r3, #1
 800500c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Init+0x196>
 800501e:	2301      	movs	r3, #1
 8005020:	e022      	b.n	8005068 <HAL_I2C_Init+0x1dc>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10e      	bne.n	8005048 <HAL_I2C_Init+0x1bc>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1e58      	subs	r0, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6859      	ldr	r1, [r3, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	fbb0 f3f3 	udiv	r3, r0, r3
 800503c:	3301      	adds	r3, #1
 800503e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	e00f      	b.n	8005068 <HAL_I2C_Init+0x1dc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1e58      	subs	r0, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	0099      	lsls	r1, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	fbb0 f3f3 	udiv	r3, r0, r3
 800505e:	3301      	adds	r3, #1
 8005060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	6809      	ldr	r1, [r1, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6911      	ldr	r1, [r2, #16]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68d2      	ldr	r2, [r2, #12]
 80050a2:	4311      	orrs	r1, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	000186a0 	.word	0x000186a0
 8005104:	001e847f 	.word	0x001e847f
 8005108:	003d08ff 	.word	0x003d08ff
 800510c:	431bde83 	.word	0x431bde83
 8005110:	10624dd3 	.word	0x10624dd3

08005114 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e021      	b.n	800516a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2224      	movs	r2, #36	; 0x24
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd fb2c 	bl	800279c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	817b      	strh	r3, [r7, #10]
 8005184:	4613      	mov	r3, r2
 8005186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7fe ff34 	bl	8003ff4 <HAL_GetTick>
 800518c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b20      	cmp	r3, #32
 8005198:	f040 80e0 	bne.w	800535c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2319      	movs	r3, #25
 80051a2:	2201      	movs	r2, #1
 80051a4:	4970      	ldr	r1, [pc, #448]	; (8005368 <HAL_I2C_Master_Transmit+0x1f4>)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fc92 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	e0d3      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_I2C_Master_Transmit+0x50>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e0cc      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d007      	beq.n	80051ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2221      	movs	r2, #33	; 0x21
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2210      	movs	r2, #16
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	893a      	ldrh	r2, [r7, #8]
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a50      	ldr	r2, [pc, #320]	; (800536c <HAL_I2C_Master_Transmit+0x1f8>)
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800522c:	8979      	ldrh	r1, [r7, #10]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fafc 	bl	8005830 <I2C_MasterRequestWrite>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e08d      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005258:	e066      	b.n	8005328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	6a39      	ldr	r1, [r7, #32]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fd0c 	bl	8005c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b04      	cmp	r3, #4
 8005270:	d107      	bne.n	8005282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e06b      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d11b      	bne.n	80052fc <HAL_I2C_Master_Transmit+0x188>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	6a39      	ldr	r1, [r7, #32]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fcfc 	bl	8005cfe <I2C_WaitOnBTFFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	2b04      	cmp	r3, #4
 8005312:	d107      	bne.n	8005324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e01a      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d194      	bne.n	800525a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	e000      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800535c:	2302      	movs	r3, #2
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	00100002 	.word	0x00100002
 800536c:	ffff0000 	.word	0xffff0000

08005370 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08c      	sub	sp, #48	; 0x30
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	461a      	mov	r2, r3
 800537c:	460b      	mov	r3, r1
 800537e:	817b      	strh	r3, [r7, #10]
 8005380:	4613      	mov	r3, r2
 8005382:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005388:	f7fe fe34 	bl	8003ff4 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b20      	cmp	r3, #32
 8005398:	f040 823f 	bne.w	800581a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	2319      	movs	r3, #25
 80053a2:	2201      	movs	r2, #1
 80053a4:	497f      	ldr	r1, [pc, #508]	; (80055a4 <HAL_I2C_Master_Receive+0x234>)
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fb92 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
 80053b4:	e232      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_I2C_Master_Receive+0x54>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e22b      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d007      	beq.n	80053ea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2222      	movs	r2, #34	; 0x22
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2210      	movs	r2, #16
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	893a      	ldrh	r2, [r7, #8]
 800541a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a5f      	ldr	r2, [pc, #380]	; (80055a8 <HAL_I2C_Master_Receive+0x238>)
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800542c:	8979      	ldrh	r1, [r7, #10]
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 fa7e 	bl	8005934 <I2C_MasterRequestRead>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1ec      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d113      	bne.n	8005472 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e1c0      	b.n	80057f4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	2b01      	cmp	r3, #1
 8005478:	d11e      	bne.n	80054b8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800548a:	b672      	cpsid	i
}
 800548c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054b4:	b662      	cpsie	i
}
 80054b6:	e035      	b.n	8005524 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d11e      	bne.n	80054fe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054d0:	b672      	cpsid	i
}
 80054d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054fa:	b662      	cpsie	i
}
 80054fc:	e012      	b.n	8005524 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800550c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005524:	e166      	b.n	80057f4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552a:	2b03      	cmp	r3, #3
 800552c:	f200 811f 	bhi.w	800576e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005534:	2b01      	cmp	r3, #1
 8005536:	d123      	bne.n	8005580 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fc1f 	bl	8005d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e167      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800557e:	e139      	b.n	80057f4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	2b02      	cmp	r3, #2
 8005586:	d152      	bne.n	800562e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2200      	movs	r2, #0
 8005590:	4906      	ldr	r1, [pc, #24]	; (80055ac <HAL_I2C_Master_Receive+0x23c>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fa9c 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e13c      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
 80055a2:	bf00      	nop
 80055a4:	00100002 	.word	0x00100002
 80055a8:	ffff0000 	.word	0xffff0000
 80055ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80055b0:	b672      	cpsid	i
}
 80055b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055f6:	b662      	cpsie	i
}
 80055f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800562c:	e0e2      	b.n	80057f4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	2200      	movs	r2, #0
 8005636:	497b      	ldr	r1, [pc, #492]	; (8005824 <HAL_I2C_Master_Receive+0x4b4>)
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fa49 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0e9      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005658:	b672      	cpsid	i
}
 800565a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800568e:	4b66      	ldr	r3, [pc, #408]	; (8005828 <HAL_I2C_Master_Receive+0x4b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_I2C_Master_Receive+0x4bc>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0a1a      	lsrs	r2, r3, #8
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00da      	lsls	r2, r3, #3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d118      	bne.n	80056e6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80056d6:	b662      	cpsie	i
}
 80056d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e09a      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d1d9      	bne.n	80056a8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005736:	b662      	cpsie	i
}
 8005738:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800576c:	e042      	b.n	80057f4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fb04 	bl	8005d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e04c      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d118      	bne.n	80057f4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f ae94 	bne.w	8005526 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
  }
}
 800581c:	4618      	mov	r0, r3
 800581e:	3728      	adds	r7, #40	; 0x28
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	00010004 	.word	0x00010004
 8005828:	200005e0 	.word	0x200005e0
 800582c:	14f8b589 	.word	0x14f8b589

08005830 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	460b      	mov	r3, r1
 800583e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d006      	beq.n	800585a <I2C_MasterRequestWrite+0x2a>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d003      	beq.n	800585a <I2C_MasterRequestWrite+0x2a>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005858:	d108      	bne.n	800586c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e00b      	b.n	8005884 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	2b12      	cmp	r3, #18
 8005872:	d107      	bne.n	8005884 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f91d 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058aa:	d103      	bne.n	80058b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e035      	b.n	8005924 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c0:	d108      	bne.n	80058d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d0:	611a      	str	r2, [r3, #16]
 80058d2:	e01b      	b.n	800590c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058d4:	897b      	ldrh	r3, [r7, #10]
 80058d6:	11db      	asrs	r3, r3, #7
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f063 030f 	orn	r3, r3, #15
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	490e      	ldr	r1, [pc, #56]	; (800592c <I2C_MasterRequestWrite+0xfc>)
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f943 	bl	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e010      	b.n	8005924 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005902:	897b      	ldrh	r3, [r7, #10]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4907      	ldr	r1, [pc, #28]	; (8005930 <I2C_MasterRequestWrite+0x100>)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f933 	bl	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	00010008 	.word	0x00010008
 8005930:	00010002 	.word	0x00010002

08005934 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	460b      	mov	r3, r1
 8005942:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005958:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d006      	beq.n	800596e <I2C_MasterRequestRead+0x3a>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d003      	beq.n	800596e <I2C_MasterRequestRead+0x3a>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800596c:	d108      	bne.n	8005980 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e00b      	b.n	8005998 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	2b11      	cmp	r3, #17
 8005986:	d107      	bne.n	8005998 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f893 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059be:	d103      	bne.n	80059c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e079      	b.n	8005ac0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d4:	d108      	bne.n	80059e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059d6:	897b      	ldrh	r3, [r7, #10]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	611a      	str	r2, [r3, #16]
 80059e6:	e05f      	b.n	8005aa8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059e8:	897b      	ldrh	r3, [r7, #10]
 80059ea:	11db      	asrs	r3, r3, #7
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0306 	and.w	r3, r3, #6
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f063 030f 	orn	r3, r3, #15
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4930      	ldr	r1, [pc, #192]	; (8005ac8 <I2C_MasterRequestRead+0x194>)
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f8b9 	bl	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e054      	b.n	8005ac0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a16:	897b      	ldrh	r3, [r7, #10]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4929      	ldr	r1, [pc, #164]	; (8005acc <I2C_MasterRequestRead+0x198>)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f8a9 	bl	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e044      	b.n	8005ac0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f831 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d103      	bne.n	8005a8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e017      	b.n	8005ac0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a90:	897b      	ldrh	r3, [r7, #10]
 8005a92:	11db      	asrs	r3, r3, #7
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f063 030e 	orn	r3, r3, #14
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4907      	ldr	r1, [pc, #28]	; (8005acc <I2C_MasterRequestRead+0x198>)
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f865 	bl	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	00010008 	.word	0x00010008
 8005acc:	00010002 	.word	0x00010002

08005ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ae0:	e025      	b.n	8005b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d021      	beq.n	8005b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aea:	f7fe fa83 	bl	8003ff4 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d116      	bne.n	8005b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e023      	b.n	8005b76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d10d      	bne.n	8005b54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	43da      	mvns	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	e00c      	b.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d0b6      	beq.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b8c:	e051      	b.n	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9c:	d123      	bne.n	8005be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e046      	b.n	8005c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d021      	beq.n	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fe fa01 	bl	8003ff4 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d116      	bne.n	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e020      	b.n	8005c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	43da      	mvns	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e00b      	b.n	8005c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	43da      	mvns	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d18d      	bne.n	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c88:	e02d      	b.n	8005ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f8ce 	bl	8005e2c <I2C_IsAcknowledgeFailed>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e02d      	b.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d021      	beq.n	8005ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fe f9a7 	bl	8003ff4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d116      	bne.n	8005ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e007      	b.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d1ca      	bne.n	8005c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d0a:	e02d      	b.n	8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f88d 	bl	8005e2c <I2C_IsAcknowledgeFailed>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e02d      	b.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d22:	d021      	beq.n	8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d24:	f7fe f966 	bl	8003ff4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d116      	bne.n	8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e007      	b.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d1ca      	bne.n	8005d0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d8c:	e042      	b.n	8005e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d119      	bne.n	8005dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0210 	mvn.w	r2, #16
 8005da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e029      	b.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd0:	f7fe f910 	bl	8003ff4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d302      	bcc.n	8005de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d116      	bne.n	8005e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	f043 0220 	orr.w	r2, r3, #32
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e007      	b.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d1b5      	bne.n	8005d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e42:	d11b      	bne.n	8005e7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	f043 0204 	orr.w	r2, r3, #4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e272      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8087 	beq.w	8005fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ea8:	4b92      	ldr	r3, [pc, #584]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 030c 	and.w	r3, r3, #12
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d00c      	beq.n	8005ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005eb4:	4b8f      	ldr	r3, [pc, #572]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f003 030c 	and.w	r3, r3, #12
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d112      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x5e>
 8005ec0:	4b8c      	ldr	r3, [pc, #560]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d10b      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ece:	4b89      	ldr	r3, [pc, #548]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d06c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x12c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d168      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e24c      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eee:	d106      	bne.n	8005efe <HAL_RCC_OscConfig+0x76>
 8005ef0:	4b80      	ldr	r3, [pc, #512]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7f      	ldr	r2, [pc, #508]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e02e      	b.n	8005f5c <HAL_RCC_OscConfig+0xd4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x98>
 8005f06:	4b7b      	ldr	r3, [pc, #492]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a7a      	ldr	r2, [pc, #488]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	4b78      	ldr	r3, [pc, #480]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a77      	ldr	r2, [pc, #476]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e01d      	b.n	8005f5c <HAL_RCC_OscConfig+0xd4>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0xbc>
 8005f2a:	4b72      	ldr	r3, [pc, #456]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a71      	ldr	r2, [pc, #452]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a6e      	ldr	r2, [pc, #440]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e00b      	b.n	8005f5c <HAL_RCC_OscConfig+0xd4>
 8005f44:	4b6b      	ldr	r3, [pc, #428]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a6a      	ldr	r2, [pc, #424]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	4b68      	ldr	r3, [pc, #416]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a67      	ldr	r2, [pc, #412]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f64:	f7fe f846 	bl	8003ff4 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f6c:	f7fe f842 	bl	8003ff4 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b64      	cmp	r3, #100	; 0x64
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e200      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7e:	4b5d      	ldr	r3, [pc, #372]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0xe4>
 8005f8a:	e014      	b.n	8005fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fe f832 	bl	8003ff4 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f94:	f7fe f82e 	bl	8003ff4 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	; 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e1ec      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa6:	4b53      	ldr	r3, [pc, #332]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x10c>
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d063      	beq.n	800608a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fc2:	4b4c      	ldr	r3, [pc, #304]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fce:	4b49      	ldr	r3, [pc, #292]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d11c      	bne.n	8006014 <HAL_RCC_OscConfig+0x18c>
 8005fda:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d116      	bne.n	8006014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe6:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_RCC_OscConfig+0x176>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d001      	beq.n	8005ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e1c0      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffe:	4b3d      	ldr	r3, [pc, #244]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4939      	ldr	r1, [pc, #228]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006012:	e03a      	b.n	800608a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <HAL_RCC_OscConfig+0x270>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006022:	f7fd ffe7 	bl	8003ff4 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602a:	f7fd ffe3 	bl	8003ff4 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e1a1      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006048:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4927      	ldr	r1, [pc, #156]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8006058:	4313      	orrs	r3, r2
 800605a:	600b      	str	r3, [r1, #0]
 800605c:	e015      	b.n	800608a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800605e:	4b26      	ldr	r3, [pc, #152]	; (80060f8 <HAL_RCC_OscConfig+0x270>)
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006064:	f7fd ffc6 	bl	8003ff4 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800606c:	f7fd ffc2 	bl	8003ff4 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e180      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03a      	beq.n	800610c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d019      	beq.n	80060d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800609e:	4b17      	ldr	r3, [pc, #92]	; (80060fc <HAL_RCC_OscConfig+0x274>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a4:	f7fd ffa6 	bl	8003ff4 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ac:	f7fd ffa2 	bl	8003ff4 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e160      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <HAL_RCC_OscConfig+0x26c>)
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060ca:	2001      	movs	r0, #1
 80060cc:	f000 fada 	bl	8006684 <RCC_Delay>
 80060d0:	e01c      	b.n	800610c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <HAL_RCC_OscConfig+0x274>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d8:	f7fd ff8c 	bl	8003ff4 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060de:	e00f      	b.n	8006100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e0:	f7fd ff88 	bl	8003ff4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d908      	bls.n	8006100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e146      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
 80060f2:	bf00      	nop
 80060f4:	40021000 	.word	0x40021000
 80060f8:	42420000 	.word	0x42420000
 80060fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006100:	4b92      	ldr	r3, [pc, #584]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e9      	bne.n	80060e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80a6 	beq.w	8006266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611e:	4b8b      	ldr	r3, [pc, #556]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612a:	4b88      	ldr	r3, [pc, #544]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	4a87      	ldr	r2, [pc, #540]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006134:	61d3      	str	r3, [r2, #28]
 8006136:	4b85      	ldr	r3, [pc, #532]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006146:	4b82      	ldr	r3, [pc, #520]	; (8006350 <HAL_RCC_OscConfig+0x4c8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d118      	bne.n	8006184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006152:	4b7f      	ldr	r3, [pc, #508]	; (8006350 <HAL_RCC_OscConfig+0x4c8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a7e      	ldr	r2, [pc, #504]	; (8006350 <HAL_RCC_OscConfig+0x4c8>)
 8006158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800615e:	f7fd ff49 	bl	8003ff4 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006166:	f7fd ff45 	bl	8003ff4 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b64      	cmp	r3, #100	; 0x64
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e103      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	4b75      	ldr	r3, [pc, #468]	; (8006350 <HAL_RCC_OscConfig+0x4c8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d106      	bne.n	800619a <HAL_RCC_OscConfig+0x312>
 800618c:	4b6f      	ldr	r3, [pc, #444]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	4a6e      	ldr	r2, [pc, #440]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6213      	str	r3, [r2, #32]
 8006198:	e02d      	b.n	80061f6 <HAL_RCC_OscConfig+0x36e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10c      	bne.n	80061bc <HAL_RCC_OscConfig+0x334>
 80061a2:	4b6a      	ldr	r3, [pc, #424]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	4a69      	ldr	r2, [pc, #420]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	6213      	str	r3, [r2, #32]
 80061ae:	4b67      	ldr	r3, [pc, #412]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	4a66      	ldr	r2, [pc, #408]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061b4:	f023 0304 	bic.w	r3, r3, #4
 80061b8:	6213      	str	r3, [r2, #32]
 80061ba:	e01c      	b.n	80061f6 <HAL_RCC_OscConfig+0x36e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	d10c      	bne.n	80061de <HAL_RCC_OscConfig+0x356>
 80061c4:	4b61      	ldr	r3, [pc, #388]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	4a60      	ldr	r2, [pc, #384]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061ca:	f043 0304 	orr.w	r3, r3, #4
 80061ce:	6213      	str	r3, [r2, #32]
 80061d0:	4b5e      	ldr	r3, [pc, #376]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	4a5d      	ldr	r2, [pc, #372]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6213      	str	r3, [r2, #32]
 80061dc:	e00b      	b.n	80061f6 <HAL_RCC_OscConfig+0x36e>
 80061de:	4b5b      	ldr	r3, [pc, #364]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	4a5a      	ldr	r2, [pc, #360]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	6213      	str	r3, [r2, #32]
 80061ea:	4b58      	ldr	r3, [pc, #352]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	4a57      	ldr	r2, [pc, #348]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80061f0:	f023 0304 	bic.w	r3, r3, #4
 80061f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d015      	beq.n	800622a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fe:	f7fd fef9 	bl	8003ff4 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006204:	e00a      	b.n	800621c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006206:	f7fd fef5 	bl	8003ff4 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f241 3288 	movw	r2, #5000	; 0x1388
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e0b1      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621c:	4b4b      	ldr	r3, [pc, #300]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ee      	beq.n	8006206 <HAL_RCC_OscConfig+0x37e>
 8006228:	e014      	b.n	8006254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800622a:	f7fd fee3 	bl	8003ff4 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006230:	e00a      	b.n	8006248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006232:	f7fd fedf 	bl	8003ff4 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006240:	4293      	cmp	r3, r2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e09b      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006248:	4b40      	ldr	r3, [pc, #256]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1ee      	bne.n	8006232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d105      	bne.n	8006266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625a:	4b3c      	ldr	r3, [pc, #240]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4a3b      	ldr	r2, [pc, #236]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 8087 	beq.w	800637e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006270:	4b36      	ldr	r3, [pc, #216]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 030c 	and.w	r3, r3, #12
 8006278:	2b08      	cmp	r3, #8
 800627a:	d061      	beq.n	8006340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d146      	bne.n	8006312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006284:	4b33      	ldr	r3, [pc, #204]	; (8006354 <HAL_RCC_OscConfig+0x4cc>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628a:	f7fd feb3 	bl	8003ff4 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006292:	f7fd feaf 	bl	8003ff4 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e06d      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062a4:	4b29      	ldr	r3, [pc, #164]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d108      	bne.n	80062cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4921      	ldr	r1, [pc, #132]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062cc:	4b1f      	ldr	r3, [pc, #124]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a19      	ldr	r1, [r3, #32]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	430b      	orrs	r3, r1
 80062de:	491b      	ldr	r1, [pc, #108]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_RCC_OscConfig+0x4cc>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ea:	f7fd fe83 	bl	8003ff4 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f2:	f7fd fe7f 	bl	8003ff4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e03d      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x46a>
 8006310:	e035      	b.n	800637e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006312:	4b10      	ldr	r3, [pc, #64]	; (8006354 <HAL_RCC_OscConfig+0x4cc>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fd fe6c 	bl	8003ff4 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7fd fe68 	bl	8003ff4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e026      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_RCC_OscConfig+0x4c4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x498>
 800633e:	e01e      	b.n	800637e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d107      	bne.n	8006358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e019      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
 800634c:	40021000 	.word	0x40021000
 8006350:	40007000 	.word	0x40007000
 8006354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_OscConfig+0x500>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	429a      	cmp	r2, r3
 800636a:	d106      	bne.n	800637a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006376:	429a      	cmp	r2, r3
 8006378:	d001      	beq.n	800637e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40021000 	.word	0x40021000

0800638c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0d0      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063a0:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d910      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b67      	ldr	r3, [pc, #412]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f023 0207 	bic.w	r2, r3, #7
 80063b6:	4965      	ldr	r1, [pc, #404]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b63      	ldr	r3, [pc, #396]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0b8      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d020      	beq.n	800641e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e8:	4b59      	ldr	r3, [pc, #356]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4a58      	ldr	r2, [pc, #352]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80063ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a52      	ldr	r2, [pc, #328]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006406:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800640a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640c:	4b50      	ldr	r3, [pc, #320]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	494d      	ldr	r1, [pc, #308]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d040      	beq.n	80064ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d115      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e07f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b41      	ldr	r3, [pc, #260]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e073      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e06b      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b39      	ldr	r3, [pc, #228]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4936      	ldr	r1, [pc, #216]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	4313      	orrs	r3, r2
 800647a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647c:	f7fd fdba 	bl	8003ff4 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fd fdb6 	bl	8003ff4 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e053      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b27      	ldr	r3, [pc, #156]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d210      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 0207 	bic.w	r2, r3, #7
 80064c2:	4922      	ldr	r1, [pc, #136]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e032      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4916      	ldr	r1, [pc, #88]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	490e      	ldr	r1, [pc, #56]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800651a:	f000 f821 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800651e:	4602      	mov	r2, r0
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	490a      	ldr	r1, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x1c8>)
 800652c:	5ccb      	ldrb	r3, [r1, r3]
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <HAL_RCC_ClockConfig+0x1cc>)
 8006534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <HAL_RCC_ClockConfig+0x1d0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fd18 	bl	8003f70 <HAL_InitTick>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40022000 	.word	0x40022000
 8006550:	40021000 	.word	0x40021000
 8006554:	0800d63c 	.word	0x0800d63c
 8006558:	200005e0 	.word	0x200005e0
 800655c:	200005e4 	.word	0x200005e4

08006560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	b490      	push	{r4, r7}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006566:	4b29      	ldr	r3, [pc, #164]	; (800660c <HAL_RCC_GetSysClockFreq+0xac>)
 8006568:	1d3c      	adds	r4, r7, #4
 800656a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800656c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006570:	f240 2301 	movw	r3, #513	; 0x201
 8006574:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	2300      	movs	r3, #0
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800658a:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_RCC_GetSysClockFreq+0xb0>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f003 030c 	and.w	r3, r3, #12
 8006596:	2b04      	cmp	r3, #4
 8006598:	d002      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x40>
 800659a:	2b08      	cmp	r3, #8
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_GetSysClockFreq+0x46>
 800659e:	e02b      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065a0:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065a2:	623b      	str	r3, [r7, #32]
      break;
 80065a4:	e02b      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	0c9b      	lsrs	r3, r3, #18
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	3328      	adds	r3, #40	; 0x28
 80065b0:	443b      	add	r3, r7
 80065b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80065b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d012      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	0c5b      	lsrs	r3, r3, #17
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	3328      	adds	r3, #40	; 0x28
 80065ce:	443b      	add	r3, r7
 80065d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4a0e      	ldr	r2, [pc, #56]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065da:	fb03 f202 	mul.w	r2, r3, r2
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
 80065e6:	e004      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	4a0b      	ldr	r2, [pc, #44]	; (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	623b      	str	r3, [r7, #32]
      break;
 80065f6:	e002      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065fa:	623b      	str	r3, [r7, #32]
      break;
 80065fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065fe:	6a3b      	ldr	r3, [r7, #32]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3728      	adds	r7, #40	; 0x28
 8006604:	46bd      	mov	sp, r7
 8006606:	bc90      	pop	{r4, r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	0800d62c 	.word	0x0800d62c
 8006610:	40021000 	.word	0x40021000
 8006614:	00f42400 	.word	0x00f42400
 8006618:	003d0900 	.word	0x003d0900
 800661c:	007a1200 	.word	0x007a1200

08006620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <HAL_RCC_GetHCLKFreq+0x10>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	200005e0 	.word	0x200005e0

08006634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006638:	f7ff fff2 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 800663c:	4602      	mov	r2, r0
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	4903      	ldr	r1, [pc, #12]	; (8006658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800664a:	5ccb      	ldrb	r3, [r1, r3]
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006650:	4618      	mov	r0, r3
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40021000 	.word	0x40021000
 8006658:	0800d64c 	.word	0x0800d64c

0800665c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006660:	f7ff ffde 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8006664:	4602      	mov	r2, r0
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	0adb      	lsrs	r3, r3, #11
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	4903      	ldr	r1, [pc, #12]	; (8006680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006672:	5ccb      	ldrb	r3, [r1, r3]
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006678:	4618      	mov	r0, r3
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40021000 	.word	0x40021000
 8006680:	0800d64c 	.word	0x0800d64c

08006684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <RCC_Delay+0x34>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <RCC_Delay+0x38>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	0a5b      	lsrs	r3, r3, #9
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80066a0:	bf00      	nop
  }
  while (Delay --);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1e5a      	subs	r2, r3, #1
 80066a6:	60fa      	str	r2, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f9      	bne.n	80066a0 <RCC_Delay+0x1c>
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	200005e0 	.word	0x200005e0
 80066bc:	10624dd3 	.word	0x10624dd3

080066c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d07d      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80066dc:	2300      	movs	r3, #0
 80066de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e0:	4b4f      	ldr	r3, [pc, #316]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10d      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ec:	4b4c      	ldr	r3, [pc, #304]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	4a4b      	ldr	r2, [pc, #300]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f6:	61d3      	str	r3, [r2, #28]
 80066f8:	4b49      	ldr	r3, [pc, #292]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006704:	2301      	movs	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006708:	4b46      	ldr	r3, [pc, #280]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d118      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006714:	4b43      	ldr	r3, [pc, #268]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a42      	ldr	r2, [pc, #264]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800671a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006720:	f7fd fc68 	bl	8003ff4 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006726:	e008      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006728:	f7fd fc64 	bl	8003ff4 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	; 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e06d      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673a:	4b3a      	ldr	r3, [pc, #232]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006746:	4b36      	ldr	r3, [pc, #216]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d02e      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	429a      	cmp	r2, r3
 8006762:	d027      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006764:	4b2e      	ldr	r3, [pc, #184]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800676e:	4b2e      	ldr	r3, [pc, #184]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006774:	4b2c      	ldr	r3, [pc, #176]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800677a:	4a29      	ldr	r2, [pc, #164]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d014      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678a:	f7fd fc33 	bl	8003ff4 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006790:	e00a      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fd fc2f 	bl	8003ff4 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e036      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a8:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0ee      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b4:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4917      	ldr	r1, [pc, #92]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067cc:	4b14      	ldr	r3, [pc, #80]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067e4:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	490b      	ldr	r1, [pc, #44]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006802:	4b07      	ldr	r3, [pc, #28]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	4904      	ldr	r1, [pc, #16]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006810:	4313      	orrs	r3, r2
 8006812:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000
 8006824:	40007000 	.word	0x40007000
 8006828:	42420440 	.word	0x42420440

0800682c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e041      	b.n	80068c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fd f8e4 	bl	8003a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f000 fe7e 	bl	800756c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d001      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e044      	b.n	800696e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <HAL_TIM_Base_Start_IT+0xac>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d018      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x6c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1c      	ldr	r2, [pc, #112]	; (800697c <HAL_TIM_Base_Start_IT+0xb0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x6c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d00e      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x6c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a18      	ldr	r2, [pc, #96]	; (8006980 <HAL_TIM_Base_Start_IT+0xb4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d009      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x6c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a16      	ldr	r2, [pc, #88]	; (8006984 <HAL_TIM_Base_Start_IT+0xb8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x6c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a15      	ldr	r2, [pc, #84]	; (8006988 <HAL_TIM_Base_Start_IT+0xbc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d111      	bne.n	800695c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b06      	cmp	r3, #6
 8006948:	d010      	beq.n	800696c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695a:	e007      	b.n	800696c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40013400 	.word	0x40013400
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800
 8006988:	40000c00 	.word	0x40000c00

0800698c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e041      	b.n	8006a22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f839 	bl	8006a2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f000 fdce 	bl	800756c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <HAL_TIM_PWM_Start+0x24>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	e022      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x6a>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d109      	bne.n	8006a7a <HAL_TIM_PWM_Start+0x3e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	e015      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x6a>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d109      	bne.n	8006a94 <HAL_TIM_PWM_Start+0x58>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e008      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x6a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e072      	b.n	8006b94 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <HAL_TIM_PWM_Start+0x82>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006abc:	e013      	b.n	8006ae6 <HAL_TIM_PWM_Start+0xaa>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d104      	bne.n	8006ace <HAL_TIM_PWM_Start+0x92>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006acc:	e00b      	b.n	8006ae6 <HAL_TIM_PWM_Start+0xaa>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start+0xa2>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006adc:	e003      	b.n	8006ae6 <HAL_TIM_PWM_Start+0xaa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fff8 	bl	8007ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <HAL_TIM_PWM_Start+0x160>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_TIM_PWM_Start+0xcc>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <HAL_TIM_PWM_Start+0x164>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_PWM_Start+0xd0>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <HAL_TIM_PWM_Start+0xd2>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <HAL_TIM_PWM_Start+0x160>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d018      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x122>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_TIM_PWM_Start+0x164>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x122>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d00e      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x122>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <HAL_TIM_PWM_Start+0x168>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x122>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <HAL_TIM_PWM_Start+0x16c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x122>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a14      	ldr	r2, [pc, #80]	; (8006bac <HAL_TIM_PWM_Start+0x170>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d111      	bne.n	8006b82 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b06      	cmp	r3, #6
 8006b6e:	d010      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b80:	e007      	b.n	8006b92 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40000800 	.word	0x40000800
 8006bac:	40000c00 	.word	0x40000c00

08006bb0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_TIM_PWM_Start_IT+0x24>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e022      	b.n	8006c1a <HAL_TIM_PWM_Start_IT+0x6a>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d109      	bne.n	8006bee <HAL_TIM_PWM_Start_IT+0x3e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	e015      	b.n	8006c1a <HAL_TIM_PWM_Start_IT+0x6a>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d109      	bne.n	8006c08 <HAL_TIM_PWM_Start_IT+0x58>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	e008      	b.n	8006c1a <HAL_TIM_PWM_Start_IT+0x6a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0b8      	b.n	8006d94 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <HAL_TIM_PWM_Start_IT+0x82>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c30:	e013      	b.n	8006c5a <HAL_TIM_PWM_Start_IT+0xaa>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d104      	bne.n	8006c42 <HAL_TIM_PWM_Start_IT+0x92>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c40:	e00b      	b.n	8006c5a <HAL_TIM_PWM_Start_IT+0xaa>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d104      	bne.n	8006c52 <HAL_TIM_PWM_Start_IT+0xa2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c50:	e003      	b.n	8006c5a <HAL_TIM_PWM_Start_IT+0xaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	d841      	bhi.n	8006ce4 <HAL_TIM_PWM_Start_IT+0x134>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <HAL_TIM_PWM_Start_IT+0xb8>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006ce5 	.word	0x08006ce5
 8006c70:	08006ce5 	.word	0x08006ce5
 8006c74:	08006ce5 	.word	0x08006ce5
 8006c78:	08006caf 	.word	0x08006caf
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006ce5 	.word	0x08006ce5
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006ce5 	.word	0x08006ce5
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	08006cd3 	.word	0x08006cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0202 	orr.w	r2, r2, #2
 8006caa:	60da      	str	r2, [r3, #12]
      break;
 8006cac:	e01b      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0204 	orr.w	r2, r2, #4
 8006cbc:	60da      	str	r2, [r3, #12]
      break;
 8006cbe:	e012      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	60da      	str	r2, [r3, #12]
      break;
 8006cd0:	e009      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0210 	orr.w	r2, r2, #16
 8006ce0:	60da      	str	r2, [r3, #12]
      break;
 8006ce2:	e000      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8006ce4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fef8 	bl	8007ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a28      	ldr	r2, [pc, #160]	; (8006d9c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIM_PWM_Start_IT+0x158>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a27      	ldr	r2, [pc, #156]	; (8006da0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <HAL_TIM_PWM_Start_IT+0x15c>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <HAL_TIM_PWM_Start_IT+0x15e>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d018      	beq.n	8006d5e <HAL_TIM_PWM_Start_IT+0x1ae>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_TIM_PWM_Start_IT+0x1ae>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIM_PWM_Start_IT+0x1ae>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a17      	ldr	r2, [pc, #92]	; (8006da4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_TIM_PWM_Start_IT+0x1ae>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a16      	ldr	r2, [pc, #88]	; (8006da8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIM_PWM_Start_IT+0x1ae>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a14      	ldr	r2, [pc, #80]	; (8006dac <HAL_TIM_PWM_Start_IT+0x1fc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d111      	bne.n	8006d82 <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b06      	cmp	r3, #6
 8006d6e:	d010      	beq.n	8006d92 <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d80:	e007      	b.n	8006d92 <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40013400 	.word	0x40013400
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00

08006db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e093      	b.n	8006eec <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fc fe93 	bl	8003b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df4:	f023 0307 	bic.w	r3, r3, #7
 8006df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f000 fbb1 	bl	800756c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	4313      	orrs	r3, r2
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e50:	f023 030c 	bic.w	r3, r3, #12
 8006e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	011a      	lsls	r2, r3, #4
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	031b      	lsls	r3, r3, #12
 8006e80:	4313      	orrs	r3, r2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d110      	bne.n	8006f46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d102      	bne.n	8006f30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f2a:	7b7b      	ldrb	r3, [r7, #13]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d001      	beq.n	8006f34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e069      	b.n	8007008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f44:	e031      	b.n	8006faa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d110      	bne.n	8006f6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d102      	bne.n	8006f58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f52:	7b3b      	ldrb	r3, [r7, #12]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e055      	b.n	8007008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f6c:	e01d      	b.n	8006faa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d108      	bne.n	8006f86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d105      	bne.n	8006f86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7a:	7b7b      	ldrb	r3, [r7, #13]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d102      	bne.n	8006f86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f80:	7b3b      	ldrb	r3, [r7, #12]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d001      	beq.n	8006f8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e03e      	b.n	8007008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_TIM_Encoder_Start+0xc4>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d008      	beq.n	8006fc8 <HAL_TIM_Encoder_Start+0xd4>
 8006fb6:	e00f      	b.n	8006fd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fd8f 	bl	8007ae4 <TIM_CCxChannelCmd>
      break;
 8006fc6:	e016      	b.n	8006ff6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	2104      	movs	r1, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fd87 	bl	8007ae4 <TIM_CCxChannelCmd>
      break;
 8006fd6:	e00e      	b.n	8006ff6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fd7f 	bl	8007ae4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2201      	movs	r2, #1
 8006fec:	2104      	movs	r1, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fd78 	bl	8007ae4 <TIM_CCxChannelCmd>
      break;
 8006ff4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b02      	cmp	r3, #2
 8007024:	d122      	bne.n	800706c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d11b      	bne.n	800706c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0202 	mvn.w	r2, #2
 800703c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa6f 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 8007058:	e005      	b.n	8007066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa62 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa71 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b04      	cmp	r3, #4
 8007078:	d122      	bne.n	80070c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d11b      	bne.n	80070c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0204 	mvn.w	r2, #4
 8007090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa45 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 80070ac:	e005      	b.n	80070ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa38 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa47 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d122      	bne.n	8007114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d11b      	bne.n	8007114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0208 	mvn.w	r2, #8
 80070e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2204      	movs	r2, #4
 80070ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa1b 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa0e 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa1d 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b10      	cmp	r3, #16
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0210 	mvn.w	r2, #16
 8007138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2208      	movs	r2, #8
 800713e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9f1 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f9e4 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9f3 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10e      	bne.n	8007194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d107      	bne.n	8007194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0201 	mvn.w	r2, #1
 800718c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb fca0 	bl	8002ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b80      	cmp	r3, #128	; 0x80
 80071a0:	d10e      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d107      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd7c 	bl	8007cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d10e      	bne.n	80071ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d107      	bne.n	80071ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f9b7 	bl	800755a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d10e      	bne.n	8007218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b20      	cmp	r3, #32
 8007206:	d107      	bne.n	8007218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0220 	mvn.w	r2, #32
 8007210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fd47 	bl	8007ca6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007236:	2302      	movs	r3, #2
 8007238:	e0ac      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x174>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b0c      	cmp	r3, #12
 8007246:	f200 809f 	bhi.w	8007388 <HAL_TIM_PWM_ConfigChannel+0x168>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007285 	.word	0x08007285
 8007254:	08007389 	.word	0x08007389
 8007258:	08007389 	.word	0x08007389
 800725c:	08007389 	.word	0x08007389
 8007260:	080072c5 	.word	0x080072c5
 8007264:	08007389 	.word	0x08007389
 8007268:	08007389 	.word	0x08007389
 800726c:	08007389 	.word	0x08007389
 8007270:	08007307 	.word	0x08007307
 8007274:	08007389 	.word	0x08007389
 8007278:	08007389 	.word	0x08007389
 800727c:	08007389 	.word	0x08007389
 8007280:	08007347 	.word	0x08007347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f9e8 	bl	8007660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0208 	orr.w	r2, r2, #8
 800729e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0204 	bic.w	r2, r2, #4
 80072ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6999      	ldr	r1, [r3, #24]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	619a      	str	r2, [r3, #24]
      break;
 80072c2:	e062      	b.n	800738a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fa38 	bl	8007740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6999      	ldr	r1, [r3, #24]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	021a      	lsls	r2, r3, #8
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	619a      	str	r2, [r3, #24]
      break;
 8007304:	e041      	b.n	800738a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fa8b 	bl	8007828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0208 	orr.w	r2, r2, #8
 8007320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0204 	bic.w	r2, r2, #4
 8007330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69d9      	ldr	r1, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	61da      	str	r2, [r3, #28]
      break;
 8007344:	e021      	b.n	800738a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fadf 	bl	8007910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69d9      	ldr	r1, [r3, #28]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	021a      	lsls	r2, r3, #8
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	61da      	str	r2, [r3, #28]
      break;
 8007386:	e000      	b.n	800738a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007388:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIM_ConfigClockSource+0x18>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e0b3      	b.n	800751c <HAL_TIM_ConfigClockSource+0x180>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ec:	d03e      	beq.n	800746c <HAL_TIM_ConfigClockSource+0xd0>
 80073ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f2:	f200 8087 	bhi.w	8007504 <HAL_TIM_ConfigClockSource+0x168>
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	f000 8085 	beq.w	8007508 <HAL_TIM_ConfigClockSource+0x16c>
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d87f      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 8007404:	2b70      	cmp	r3, #112	; 0x70
 8007406:	d01a      	beq.n	800743e <HAL_TIM_ConfigClockSource+0xa2>
 8007408:	2b70      	cmp	r3, #112	; 0x70
 800740a:	d87b      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 800740c:	2b60      	cmp	r3, #96	; 0x60
 800740e:	d050      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x116>
 8007410:	2b60      	cmp	r3, #96	; 0x60
 8007412:	d877      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 8007414:	2b50      	cmp	r3, #80	; 0x50
 8007416:	d03c      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0xf6>
 8007418:	2b50      	cmp	r3, #80	; 0x50
 800741a:	d873      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d058      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x136>
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d86f      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 8007424:	2b30      	cmp	r3, #48	; 0x30
 8007426:	d064      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x156>
 8007428:	2b30      	cmp	r3, #48	; 0x30
 800742a:	d86b      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d060      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x156>
 8007430:	2b20      	cmp	r3, #32
 8007432:	d867      	bhi.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05c      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x156>
 8007438:	2b10      	cmp	r3, #16
 800743a:	d05a      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800743c:	e062      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6899      	ldr	r1, [r3, #8]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f000 fb2a 	bl	8007aa6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007460:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	609a      	str	r2, [r3, #8]
      break;
 800746a:	e04e      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	6899      	ldr	r1, [r3, #8]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f000 fb13 	bl	8007aa6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800748e:	609a      	str	r2, [r3, #8]
      break;
 8007490:	e03b      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 fa8a 	bl	80079b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2150      	movs	r1, #80	; 0x50
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fae1 	bl	8007a72 <TIM_ITRx_SetConfig>
      break;
 80074b0:	e02b      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 faa8 	bl	8007a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2160      	movs	r1, #96	; 0x60
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fad1 	bl	8007a72 <TIM_ITRx_SetConfig>
      break;
 80074d0:	e01b      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6859      	ldr	r1, [r3, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	461a      	mov	r2, r3
 80074e0:	f000 fa6a 	bl	80079b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2140      	movs	r1, #64	; 0x40
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fac1 	bl	8007a72 <TIM_ITRx_SetConfig>
      break;
 80074f0:	e00b      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f000 fab8 	bl	8007a72 <TIM_ITRx_SetConfig>
        break;
 8007502:	e002      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007504:	bf00      	nop
 8007506:	e000      	b.n	800750a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a33      	ldr	r2, [pc, #204]	; (800764c <TIM_Base_SetConfig+0xe0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a32      	ldr	r2, [pc, #200]	; (8007650 <TIM_Base_SetConfig+0xe4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00f      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007592:	d00b      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a2f      	ldr	r2, [pc, #188]	; (8007654 <TIM_Base_SetConfig+0xe8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a2e      	ldr	r2, [pc, #184]	; (8007658 <TIM_Base_SetConfig+0xec>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a2d      	ldr	r2, [pc, #180]	; (800765c <TIM_Base_SetConfig+0xf0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d108      	bne.n	80075be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a22      	ldr	r2, [pc, #136]	; (800764c <TIM_Base_SetConfig+0xe0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <TIM_Base_SetConfig+0x82>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a21      	ldr	r2, [pc, #132]	; (8007650 <TIM_Base_SetConfig+0xe4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00f      	beq.n	80075ee <TIM_Base_SetConfig+0x82>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	d00b      	beq.n	80075ee <TIM_Base_SetConfig+0x82>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <TIM_Base_SetConfig+0xe8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <TIM_Base_SetConfig+0x82>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1d      	ldr	r2, [pc, #116]	; (8007658 <TIM_Base_SetConfig+0xec>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_Base_SetConfig+0x82>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <TIM_Base_SetConfig+0xf0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d108      	bne.n	8007600 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <TIM_Base_SetConfig+0xe0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_Base_SetConfig+0xc8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <TIM_Base_SetConfig+0xe4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d103      	bne.n	800763c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	615a      	str	r2, [r3, #20]
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	40012c00 	.word	0x40012c00
 8007650:	40013400 	.word	0x40013400
 8007654:	40000400 	.word	0x40000400
 8007658:	40000800 	.word	0x40000800
 800765c:	40000c00 	.word	0x40000c00

08007660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 0302 	bic.w	r3, r3, #2
 80076a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a20      	ldr	r2, [pc, #128]	; (8007738 <TIM_OC1_SetConfig+0xd8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_OC1_SetConfig+0x64>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a1f      	ldr	r2, [pc, #124]	; (800773c <TIM_OC1_SetConfig+0xdc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d10c      	bne.n	80076de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0308 	bic.w	r3, r3, #8
 80076ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f023 0304 	bic.w	r3, r3, #4
 80076dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <TIM_OC1_SetConfig+0xd8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_OC1_SetConfig+0x8e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <TIM_OC1_SetConfig+0xdc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d111      	bne.n	8007712 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40013400 	.word	0x40013400

08007740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0210 	bic.w	r2, r3, #16
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f023 0320 	bic.w	r3, r3, #32
 800778a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <TIM_OC2_SetConfig+0xe0>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC2_SetConfig+0x68>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a20      	ldr	r2, [pc, #128]	; (8007824 <TIM_OC2_SetConfig+0xe4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10d      	bne.n	80077c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	; (8007820 <TIM_OC2_SetConfig+0xe0>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC2_SetConfig+0x94>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a15      	ldr	r2, [pc, #84]	; (8007824 <TIM_OC2_SetConfig+0xe4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d113      	bne.n	80077fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr
 8007820:	40012c00 	.word	0x40012c00
 8007824:	40013400 	.word	0x40013400

08007828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a21      	ldr	r2, [pc, #132]	; (8007908 <TIM_OC3_SetConfig+0xe0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_OC3_SetConfig+0x66>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a20      	ldr	r2, [pc, #128]	; (800790c <TIM_OC3_SetConfig+0xe4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d10d      	bne.n	80078aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a16      	ldr	r2, [pc, #88]	; (8007908 <TIM_OC3_SetConfig+0xe0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_OC3_SetConfig+0x92>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a15      	ldr	r2, [pc, #84]	; (800790c <TIM_OC3_SetConfig+0xe4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d113      	bne.n	80078e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	621a      	str	r2, [r3, #32]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400

08007910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800795a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a11      	ldr	r2, [pc, #68]	; (80079b0 <TIM_OC4_SetConfig+0xa0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_OC4_SetConfig+0x68>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a10      	ldr	r2, [pc, #64]	; (80079b4 <TIM_OC4_SetConfig+0xa4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d109      	bne.n	800798c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	019b      	lsls	r3, r3, #6
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr
 80079b0:	40012c00 	.word	0x40012c00
 80079b4:	40013400 	.word	0x40013400

080079b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0201 	bic.w	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 030a 	bic.w	r3, r3, #10
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr

08007a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	f023 0210 	bic.w	r2, r3, #16
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	031b      	lsls	r3, r3, #12
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr

08007a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f043 0307 	orr.w	r3, r3, #7
 8007a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	609a      	str	r2, [r3, #8]
}
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr

08007aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b087      	sub	sp, #28
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	021a      	lsls	r2, r3, #8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	609a      	str	r2, [r3, #8]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2201      	movs	r2, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1a      	ldr	r2, [r3, #32]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1a      	ldr	r2, [r3, #32]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e050      	b.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d018      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a12      	ldr	r2, [pc, #72]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40013400 	.word	0x40013400
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	40000800 	.word	0x40000800
 8007c00:	40000c00 	.word	0x40000c00

08007c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e03d      	b.n	8007c9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e03f      	b.n	8007d5c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7fc f85d 	bl	8003db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2224      	movs	r2, #36	; 0x24
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc84 	bl	800861c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695a      	ldr	r2, [r3, #20]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	; 0x28
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d17c      	bne.n	8007e7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_UART_Transmit+0x2c>
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e075      	b.n	8007e80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_UART_Transmit+0x3e>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e06e      	b.n	8007e80 <HAL_UART_Transmit+0x11c>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2221      	movs	r2, #33	; 0x21
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007db8:	f7fc f91c 	bl	8003ff4 <HAL_GetTick>
 8007dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd2:	d108      	bne.n	8007de6 <HAL_UART_Transmit+0x82>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	e003      	b.n	8007dee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007df6:	e02a      	b.n	8007e4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2180      	movs	r1, #128	; 0x80
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fa37 	bl	8008276 <UART_WaitOnFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e036      	b.n	8007e80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e007      	b.n	8007e40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	781a      	ldrb	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1cf      	bne.n	8007df8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2140      	movs	r1, #64	; 0x40
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fa07 	bl	8008276 <UART_WaitOnFlagUntilTimeout>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e006      	b.n	8007e80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e7e:	2302      	movs	r3, #2
  }
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d11d      	bne.n	8007ede <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_UART_Receive_IT+0x26>
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e016      	b.n	8007ee0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_UART_Receive_IT+0x38>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e00f      	b.n	8007ee0 <HAL_UART_Receive_IT+0x58>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 fa18 	bl	800830a <UART_Start_Receive_IT>
 8007eda:	4603      	mov	r3, r0
 8007edc:	e000      	b.n	8007ee0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
  }
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10d      	bne.n	8007f3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d008      	beq.n	8007f3a <HAL_UART_IRQHandler+0x52>
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fac9 	bl	80084ca <UART_Receive_IT>
      return;
 8007f38:	e17b      	b.n	8008232 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80b1 	beq.w	80080a4 <HAL_UART_IRQHandler+0x1bc>
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <HAL_UART_IRQHandler+0x70>
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80a6 	beq.w	80080a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <HAL_UART_IRQHandler+0x90>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	f043 0201 	orr.w	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <HAL_UART_IRQHandler+0xb0>
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	f043 0202 	orr.w	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_UART_IRQHandler+0xd0>
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	f043 0204 	orr.w	r2, r3, #4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00f      	beq.n	8007fe2 <HAL_UART_IRQHandler+0xfa>
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <HAL_UART_IRQHandler+0xee>
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	f043 0208 	orr.w	r2, r3, #8
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 811e 	beq.w	8008228 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <HAL_UART_IRQHandler+0x11e>
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa62 	bl	80084ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	f003 0308 	and.w	r3, r3, #8
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <HAL_UART_IRQHandler+0x146>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d031      	beq.n	8008092 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f9a4 	bl	800837c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d023      	beq.n	800808a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695a      	ldr	r2, [r3, #20]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008050:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	2b00      	cmp	r3, #0
 8008058:	d013      	beq.n	8008082 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	4a76      	ldr	r2, [pc, #472]	; (8008238 <HAL_UART_IRQHandler+0x350>)
 8008060:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	4618      	mov	r0, r3
 8008068:	f7fc fb5e 	bl	8004728 <HAL_DMA_Abort_IT>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d016      	beq.n	80080a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800807c:	4610      	mov	r0, r2
 800807e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008080:	e00e      	b.n	80080a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8e3 	bl	800824e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	e00a      	b.n	80080a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f8df 	bl	800824e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	e006      	b.n	80080a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f8db 	bl	800824e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800809e:	e0c3      	b.n	8008228 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a0:	bf00      	nop
    return;
 80080a2:	e0c1      	b.n	8008228 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	f040 80a1 	bne.w	80081f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 809b 	beq.w	80081f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8095 	beq.w	80081f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d04e      	beq.n	8008188 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80080f4:	8a3b      	ldrh	r3, [r7, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8098 	beq.w	800822c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008100:	8a3a      	ldrh	r2, [r7, #16]
 8008102:	429a      	cmp	r2, r3
 8008104:	f080 8092 	bcs.w	800822c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8a3a      	ldrh	r2, [r7, #16]
 800810c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b20      	cmp	r3, #32
 8008116:	d02b      	beq.n	8008170 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008126:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008146:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0210 	bic.w	r2, r2, #16
 8008164:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	4618      	mov	r0, r3
 800816c:	f7fc faa1 	bl	80046b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008178:	b29b      	uxth	r3, r3
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	b29b      	uxth	r3, r3
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f86d 	bl	8008260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008186:	e051      	b.n	800822c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008190:	b29b      	uxth	r3, r3
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d047      	beq.n	8008230 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80081a0:	8a7b      	ldrh	r3, [r7, #18]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d044      	beq.n	8008230 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695a      	ldr	r2, [r3, #20]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0201 	bic.w	r2, r2, #1
 80081c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0210 	bic.w	r2, r2, #16
 80081e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081e4:	8a7b      	ldrh	r3, [r7, #18]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f839 	bl	8008260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081ee:	e01f      	b.n	8008230 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <HAL_UART_IRQHandler+0x324>
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f8f9 	bl	80083fc <UART_Transmit_IT>
    return;
 800820a:	e012      	b.n	8008232 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <HAL_UART_IRQHandler+0x34a>
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	d008      	beq.n	8008232 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f93a 	bl	800849a <UART_EndTransmit_IT>
    return;
 8008226:	e004      	b.n	8008232 <HAL_UART_IRQHandler+0x34a>
    return;
 8008228:	bf00      	nop
 800822a:	e002      	b.n	8008232 <HAL_UART_IRQHandler+0x34a>
      return;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <HAL_UART_IRQHandler+0x34a>
      return;
 8008230:	bf00      	nop
  }
}
 8008232:	3728      	adds	r7, #40	; 0x28
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	080083d5 	.word	0x080083d5

0800823c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr

0800824e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008286:	e02c      	b.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d028      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d007      	beq.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008296:	f7fb fead 	bl	8003ff4 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d21d      	bcs.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695a      	ldr	r2, [r3, #20]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e00f      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d0c3      	beq.n	8008288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	4613      	mov	r3, r2
 8008316:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2222      	movs	r2, #34	; 0x22
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800834e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695a      	ldr	r2, [r3, #20]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0220 	orr.w	r2, r2, #32
 800836e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	bc80      	pop	{r7}
 800837a:	4770      	bx	lr

0800837c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008392:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0201 	bic.w	r2, r2, #1
 80083a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d107      	bne.n	80083bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0210 	bic.w	r2, r2, #16
 80083ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff ff2d 	bl	800824e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b21      	cmp	r3, #33	; 0x21
 800840e:	d13e      	bne.n	800848e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008418:	d114      	bne.n	8008444 <UART_Transmit_IT+0x48>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d110      	bne.n	8008444 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008436:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	621a      	str	r2, [r3, #32]
 8008442:	e008      	b.n	8008456 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	1c59      	adds	r1, r3, #1
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6211      	str	r1, [r2, #32]
 800844e:	781a      	ldrb	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29b      	uxth	r3, r3
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	4619      	mov	r1, r3
 8008464:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10f      	bne.n	800848a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008478:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008488:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	e000      	b.n	8008490 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800848e:	2302      	movs	r3, #2
  }
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr

0800849a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff febe 	bl	800823c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b086      	sub	sp, #24
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b22      	cmp	r3, #34	; 0x22
 80084dc:	f040 8099 	bne.w	8008612 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e8:	d117      	bne.n	800851a <UART_Receive_IT+0x50>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d113      	bne.n	800851a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	b29b      	uxth	r3, r3
 8008504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008508:	b29a      	uxth	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	1c9a      	adds	r2, r3, #2
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	629a      	str	r2, [r3, #40]	; 0x28
 8008518:	e026      	b.n	8008568 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852c:	d007      	beq.n	800853e <UART_Receive_IT+0x74>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <UART_Receive_IT+0x82>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	b2da      	uxtb	r2, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	e008      	b.n	800855e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008558:	b2da      	uxtb	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29b      	uxth	r3, r3
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4619      	mov	r1, r3
 8008576:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008578:	2b00      	cmp	r3, #0
 800857a:	d148      	bne.n	800860e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0220 	bic.w	r2, r2, #32
 800858a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800859a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695a      	ldr	r2, [r3, #20]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0201 	bic.w	r2, r2, #1
 80085aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d123      	bne.n	8008604 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0210 	bic.w	r2, r2, #16
 80085d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d10a      	bne.n	80085f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fe2f 	bl	8008260 <HAL_UARTEx_RxEventCallback>
 8008602:	e002      	b.n	800860a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fa fc07 	bl	8002e18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	e002      	b.n	8008614 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	e000      	b.n	8008614 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008612:	2302      	movs	r3, #2
  }
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008656:	f023 030c 	bic.w	r3, r3, #12
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	430b      	orrs	r3, r1
 8008662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <UART_SetConfig+0x114>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d103      	bne.n	800868c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008684:	f7fd ffea 	bl	800665c <HAL_RCC_GetPCLK2Freq>
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	e002      	b.n	8008692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800868c:	f7fd ffd2 	bl	8006634 <HAL_RCC_GetPCLK1Freq>
 8008690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009a      	lsls	r2, r3, #2
 800869c:	441a      	add	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a8:	4a22      	ldr	r2, [pc, #136]	; (8008734 <UART_SetConfig+0x118>)
 80086aa:	fba2 2303 	umull	r2, r3, r2, r3
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	0119      	lsls	r1, r3, #4
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009a      	lsls	r2, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80086c8:	4b1a      	ldr	r3, [pc, #104]	; (8008734 <UART_SetConfig+0x118>)
 80086ca:	fba3 0302 	umull	r0, r3, r3, r2
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	2064      	movs	r0, #100	; 0x64
 80086d2:	fb00 f303 	mul.w	r3, r0, r3
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	3332      	adds	r3, #50	; 0x32
 80086dc:	4a15      	ldr	r2, [pc, #84]	; (8008734 <UART_SetConfig+0x118>)
 80086de:	fba2 2303 	umull	r2, r3, r2, r3
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086e8:	4419      	add	r1, r3
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009a      	lsls	r2, r3, #2
 80086f4:	441a      	add	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <UART_SetConfig+0x118>)
 8008702:	fba3 0302 	umull	r0, r3, r3, r2
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	2064      	movs	r0, #100	; 0x64
 800870a:	fb00 f303 	mul.w	r3, r0, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	3332      	adds	r3, #50	; 0x32
 8008714:	4a07      	ldr	r2, [pc, #28]	; (8008734 <UART_SetConfig+0x118>)
 8008716:	fba2 2303 	umull	r2, r3, r2, r3
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	440a      	add	r2, r1
 8008726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40013800 	.word	0x40013800
 8008734:	51eb851f 	.word	0x51eb851f

08008738 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
}
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr

0800877e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6892      	ldr	r2, [r2, #8]
 8008794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6852      	ldr	r2, [r2, #4]
 800879e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d103      	bne.n	80087b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr

080087d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087da:	4b51      	ldr	r3, [pc, #324]	; (8008920 <xTaskIncrementTick+0x150>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f040 808d 	bne.w	80088fe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087e4:	4b4f      	ldr	r3, [pc, #316]	; (8008924 <xTaskIncrementTick+0x154>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087ec:	4a4d      	ldr	r2, [pc, #308]	; (8008924 <xTaskIncrementTick+0x154>)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d120      	bne.n	800883a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087f8:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <xTaskIncrementTick+0x158>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xTaskIncrementTick+0x46>
 8008818:	4b43      	ldr	r3, [pc, #268]	; (8008928 <xTaskIncrementTick+0x158>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	4b43      	ldr	r3, [pc, #268]	; (800892c <xTaskIncrementTick+0x15c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a41      	ldr	r2, [pc, #260]	; (8008928 <xTaskIncrementTick+0x158>)
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	4a41      	ldr	r2, [pc, #260]	; (800892c <xTaskIncrementTick+0x15c>)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	4b40      	ldr	r3, [pc, #256]	; (8008930 <xTaskIncrementTick+0x160>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	4a3f      	ldr	r2, [pc, #252]	; (8008930 <xTaskIncrementTick+0x160>)
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	f000 f8e3 	bl	8008a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800883a:	4b3e      	ldr	r3, [pc, #248]	; (8008934 <xTaskIncrementTick+0x164>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	429a      	cmp	r2, r3
 8008842:	d34d      	bcc.n	80088e0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008844:	4b38      	ldr	r3, [pc, #224]	; (8008928 <xTaskIncrementTick+0x158>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <xTaskIncrementTick+0x82>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xTaskIncrementTick+0x84>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008858:	4b36      	ldr	r3, [pc, #216]	; (8008934 <xTaskIncrementTick+0x164>)
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	601a      	str	r2, [r3, #0]
					break;
 8008860:	e03e      	b.n	80088e0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008862:	4b31      	ldr	r3, [pc, #196]	; (8008928 <xTaskIncrementTick+0x158>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d203      	bcs.n	8008882 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800887a:	4a2e      	ldr	r2, [pc, #184]	; (8008934 <xTaskIncrementTick+0x164>)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6013      	str	r3, [r2, #0]
						break;
 8008880:	e02e      	b.n	80088e0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff ff79 	bl	800877e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	3318      	adds	r3, #24
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff ff70 	bl	800877e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	2201      	movs	r2, #1
 80088a4:	409a      	lsls	r2, r3
 80088a6:	4b24      	ldr	r3, [pc, #144]	; (8008938 <xTaskIncrementTick+0x168>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	4a22      	ldr	r2, [pc, #136]	; (8008938 <xTaskIncrementTick+0x168>)
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4a1f      	ldr	r2, [pc, #124]	; (800893c <xTaskIncrementTick+0x16c>)
 80088be:	441a      	add	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f7ff ff36 	bl	8008738 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <xTaskIncrementTick+0x170>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d3b4      	bcc.n	8008844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088da:	2301      	movs	r3, #1
 80088dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088de:	e7b1      	b.n	8008844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088e0:	4b17      	ldr	r3, [pc, #92]	; (8008940 <xTaskIncrementTick+0x170>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e6:	4915      	ldr	r1, [pc, #84]	; (800893c <xTaskIncrementTick+0x16c>)
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d907      	bls.n	8008908 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e004      	b.n	8008908 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80088fe:	4b11      	ldr	r3, [pc, #68]	; (8008944 <xTaskIncrementTick+0x174>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	4a0f      	ldr	r2, [pc, #60]	; (8008944 <xTaskIncrementTick+0x174>)
 8008906:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008908:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <xTaskIncrementTick+0x178>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008914:	697b      	ldr	r3, [r7, #20]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000c98 	.word	0x20000c98
 8008924:	20000c7c 	.word	0x20000c7c
 8008928:	20000c74 	.word	0x20000c74
 800892c:	20000c78 	.word	0x20000c78
 8008930:	20000c90 	.word	0x20000c90
 8008934:	20000c94 	.word	0x20000c94
 8008938:	20000c80 	.word	0x20000c80
 800893c:	20000be8 	.word	0x20000be8
 8008940:	20000be4 	.word	0x20000be4
 8008944:	20000c88 	.word	0x20000c88
 8008948:	20000c8c 	.word	0x20000c8c

0800894c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008952:	4b26      	ldr	r3, [pc, #152]	; (80089ec <vTaskSwitchContext+0xa0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800895a:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <vTaskSwitchContext+0xa4>)
 800895c:	2201      	movs	r2, #1
 800895e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008960:	e03f      	b.n	80089e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <vTaskSwitchContext+0xa4>)
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008968:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <vTaskSwitchContext+0xa8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	fab3 f383 	clz	r3, r3
 8008974:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008976:	7afb      	ldrb	r3, [r7, #11]
 8008978:	f1c3 031f 	rsb	r3, r3, #31
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	491e      	ldr	r1, [pc, #120]	; (80089f8 <vTaskSwitchContext+0xac>)
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	607b      	str	r3, [r7, #4]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vTaskSwitchContext+0x5a>
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4a11      	ldr	r2, [pc, #68]	; (80089f8 <vTaskSwitchContext+0xac>)
 80089b4:	4413      	add	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	3308      	adds	r3, #8
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d104      	bne.n	80089d8 <vTaskSwitchContext+0x8c>
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	605a      	str	r2, [r3, #4]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	4a07      	ldr	r2, [pc, #28]	; (80089fc <vTaskSwitchContext+0xb0>)
 80089e0:	6013      	str	r3, [r2, #0]
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr
 80089ec:	20000c98 	.word	0x20000c98
 80089f0:	20000c8c 	.word	0x20000c8c
 80089f4:	20000c80 	.word	0x20000c80
 80089f8:	20000be8 	.word	0x20000be8
 80089fc:	20000be4 	.word	0x20000be4

08008a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a06:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <prvResetNextTaskUnblockTime+0x40>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <prvResetNextTaskUnblockTime+0x14>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <prvResetNextTaskUnblockTime+0x16>
 8008a14:	2300      	movs	r3, #0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d004      	beq.n	8008a24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <prvResetNextTaskUnblockTime+0x44>)
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a22:	e008      	b.n	8008a36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <prvResetNextTaskUnblockTime+0x40>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	4a04      	ldr	r2, [pc, #16]	; (8008a44 <prvResetNextTaskUnblockTime+0x44>)
 8008a34:	6013      	str	r3, [r2, #0]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr
 8008a40:	20000c74 	.word	0x20000c74
 8008a44:	20000c94 	.word	0x20000c94

08008a48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <xTaskGetSchedulerState+0x34>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a56:	2301      	movs	r3, #1
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	e008      	b.n	8008a6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a5c:	4b08      	ldr	r3, [pc, #32]	; (8008a80 <xTaskGetSchedulerState+0x38>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d102      	bne.n	8008a6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a64:	2302      	movs	r3, #2
 8008a66:	607b      	str	r3, [r7, #4]
 8008a68:	e001      	b.n	8008a6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a6e:	687b      	ldr	r3, [r7, #4]
	}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20000c84 	.word	0x20000c84
 8008a80:	20000c98 	.word	0x20000c98
	...

08008a90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <pxCurrentTCBConst2>)
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	6808      	ldr	r0, [r1, #0]
 8008a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a9a:	f380 8809 	msr	PSP, r0
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f380 8811 	msr	BASEPRI, r0
 8008aaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8008aae:	4770      	bx	lr

08008ab0 <pxCurrentTCBConst2>:
 8008ab0:	20000be4 	.word	0x20000be4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
	...

08008ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ac0:	f3ef 8009 	mrs	r0, PSP
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <pxCurrentTCBConst>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ad0:	6010      	str	r0, [r2, #0]
 8008ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ada:	f380 8811 	msr	BASEPRI, r0
 8008ade:	f7ff ff35 	bl	800894c <vTaskSwitchContext>
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8811 	msr	BASEPRI, r0
 8008aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	6808      	ldr	r0, [r1, #0]
 8008af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008af6:	f380 8809 	msr	PSP, r0
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	4770      	bx	lr

08008b00 <pxCurrentTCBConst>:
 8008b00:	20000be4 	.word	0x20000be4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
}
 8008b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b22:	f7ff fe55 	bl	80087d0 <xTaskIncrementTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <xPortSysTickHandler+0x40>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <atoi>:
 8008b4c:	220a      	movs	r2, #10
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f001 bdd6 	b.w	800a700 <strtol>

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	; (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	200005ec 	.word	0x200005ec

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	2600      	movs	r6, #0
 8008b64:	4d0c      	ldr	r5, [pc, #48]	; (8008b98 <__libc_init_array+0x38>)
 8008b66:	4c0d      	ldr	r4, [pc, #52]	; (8008b9c <__libc_init_array+0x3c>)
 8008b68:	1b64      	subs	r4, r4, r5
 8008b6a:	10a4      	asrs	r4, r4, #2
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	f004 fcd0 	bl	800d514 <_init>
 8008b74:	2600      	movs	r6, #0
 8008b76:	4d0a      	ldr	r5, [pc, #40]	; (8008ba0 <__libc_init_array+0x40>)
 8008b78:	4c0a      	ldr	r4, [pc, #40]	; (8008ba4 <__libc_init_array+0x44>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b88:	4798      	blx	r3
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b92:	4798      	blx	r3
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	0800db60 	.word	0x0800db60
 8008b9c:	0800db60 	.word	0x0800db60
 8008ba0:	0800db60 	.word	0x0800db60
 8008ba4:	0800db64 	.word	0x0800db64

08008ba8 <memcpy>:
 8008ba8:	440a      	add	r2, r1
 8008baa:	4291      	cmp	r1, r2
 8008bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb0:	d100      	bne.n	8008bb4 <memcpy+0xc>
 8008bb2:	4770      	bx	lr
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc0:	d1f9      	bne.n	8008bb6 <memcpy+0xe>
 8008bc2:	bd10      	pop	{r4, pc}

08008bc4 <memset>:
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4402      	add	r2, r0
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d100      	bne.n	8008bce <memset+0xa>
 8008bcc:	4770      	bx	lr
 8008bce:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd2:	e7f9      	b.n	8008bc8 <memset+0x4>

08008bd4 <__cvt>:
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bda:	461f      	mov	r7, r3
 8008bdc:	bfbb      	ittet	lt
 8008bde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008be2:	461f      	movlt	r7, r3
 8008be4:	2300      	movge	r3, #0
 8008be6:	232d      	movlt	r3, #45	; 0x2d
 8008be8:	b088      	sub	sp, #32
 8008bea:	4614      	mov	r4, r2
 8008bec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008bf0:	7013      	strb	r3, [r2, #0]
 8008bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bf4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008bf8:	f023 0820 	bic.w	r8, r3, #32
 8008bfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c00:	d005      	beq.n	8008c0e <__cvt+0x3a>
 8008c02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c06:	d100      	bne.n	8008c0a <__cvt+0x36>
 8008c08:	3501      	adds	r5, #1
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	e000      	b.n	8008c10 <__cvt+0x3c>
 8008c0e:	2303      	movs	r3, #3
 8008c10:	aa07      	add	r2, sp, #28
 8008c12:	9204      	str	r2, [sp, #16]
 8008c14:	aa06      	add	r2, sp, #24
 8008c16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c1a:	e9cd 3500 	strd	r3, r5, [sp]
 8008c1e:	4622      	mov	r2, r4
 8008c20:	463b      	mov	r3, r7
 8008c22:	f001 fee1 	bl	800a9e8 <_dtoa_r>
 8008c26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	d102      	bne.n	8008c34 <__cvt+0x60>
 8008c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c30:	07db      	lsls	r3, r3, #31
 8008c32:	d522      	bpl.n	8008c7a <__cvt+0xa6>
 8008c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c38:	eb06 0905 	add.w	r9, r6, r5
 8008c3c:	d110      	bne.n	8008c60 <__cvt+0x8c>
 8008c3e:	7833      	ldrb	r3, [r6, #0]
 8008c40:	2b30      	cmp	r3, #48	; 0x30
 8008c42:	d10a      	bne.n	8008c5a <__cvt+0x86>
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 ffda 	bl	8000c04 <__aeabi_dcmpeq>
 8008c50:	b918      	cbnz	r0, 8008c5a <__cvt+0x86>
 8008c52:	f1c5 0501 	rsb	r5, r5, #1
 8008c56:	f8ca 5000 	str.w	r5, [sl]
 8008c5a:	f8da 3000 	ldr.w	r3, [sl]
 8008c5e:	4499      	add	r9, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	2300      	movs	r3, #0
 8008c64:	4620      	mov	r0, r4
 8008c66:	4639      	mov	r1, r7
 8008c68:	f7f7 ffcc 	bl	8000c04 <__aeabi_dcmpeq>
 8008c6c:	b108      	cbz	r0, 8008c72 <__cvt+0x9e>
 8008c6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c72:	2230      	movs	r2, #48	; 0x30
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	454b      	cmp	r3, r9
 8008c78:	d307      	bcc.n	8008c8a <__cvt+0xb6>
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c80:	1b9b      	subs	r3, r3, r6
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	b008      	add	sp, #32
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	1c59      	adds	r1, r3, #1
 8008c8c:	9107      	str	r1, [sp, #28]
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	e7f0      	b.n	8008c74 <__cvt+0xa0>

08008c92 <__exponent>:
 8008c92:	4603      	mov	r3, r0
 8008c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c96:	2900      	cmp	r1, #0
 8008c98:	f803 2b02 	strb.w	r2, [r3], #2
 8008c9c:	bfb6      	itet	lt
 8008c9e:	222d      	movlt	r2, #45	; 0x2d
 8008ca0:	222b      	movge	r2, #43	; 0x2b
 8008ca2:	4249      	neglt	r1, r1
 8008ca4:	2909      	cmp	r1, #9
 8008ca6:	7042      	strb	r2, [r0, #1]
 8008ca8:	dd2b      	ble.n	8008d02 <__exponent+0x70>
 8008caa:	f10d 0407 	add.w	r4, sp, #7
 8008cae:	46a4      	mov	ip, r4
 8008cb0:	270a      	movs	r7, #10
 8008cb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008cb6:	460a      	mov	r2, r1
 8008cb8:	46a6      	mov	lr, r4
 8008cba:	fb07 1516 	mls	r5, r7, r6, r1
 8008cbe:	2a63      	cmp	r2, #99	; 0x63
 8008cc0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cce:	dcf0      	bgt.n	8008cb2 <__exponent+0x20>
 8008cd0:	3130      	adds	r1, #48	; 0x30
 8008cd2:	f1ae 0502 	sub.w	r5, lr, #2
 8008cd6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cda:	4629      	mov	r1, r5
 8008cdc:	1c44      	adds	r4, r0, #1
 8008cde:	4561      	cmp	r1, ip
 8008ce0:	d30a      	bcc.n	8008cf8 <__exponent+0x66>
 8008ce2:	f10d 0209 	add.w	r2, sp, #9
 8008ce6:	eba2 020e 	sub.w	r2, r2, lr
 8008cea:	4565      	cmp	r5, ip
 8008cec:	bf88      	it	hi
 8008cee:	2200      	movhi	r2, #0
 8008cf0:	4413      	add	r3, r2
 8008cf2:	1a18      	subs	r0, r3, r0
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cfc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d00:	e7ed      	b.n	8008cde <__exponent+0x4c>
 8008d02:	2330      	movs	r3, #48	; 0x30
 8008d04:	3130      	adds	r1, #48	; 0x30
 8008d06:	7083      	strb	r3, [r0, #2]
 8008d08:	70c1      	strb	r1, [r0, #3]
 8008d0a:	1d03      	adds	r3, r0, #4
 8008d0c:	e7f1      	b.n	8008cf2 <__exponent+0x60>
	...

08008d10 <_printf_float>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	b091      	sub	sp, #68	; 0x44
 8008d16:	460c      	mov	r4, r1
 8008d18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	461f      	mov	r7, r3
 8008d20:	4605      	mov	r5, r0
 8008d22:	f003 f97b 	bl	800c01c <_localeconv_r>
 8008d26:	6803      	ldr	r3, [r0, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2c:	f7f7 fa8a 	bl	8000244 <strlen>
 8008d30:	2300      	movs	r3, #0
 8008d32:	930e      	str	r3, [sp, #56]	; 0x38
 8008d34:	f8d8 3000 	ldr.w	r3, [r8]
 8008d38:	900a      	str	r0, [sp, #40]	; 0x28
 8008d3a:	3307      	adds	r3, #7
 8008d3c:	f023 0307 	bic.w	r3, r3, #7
 8008d40:	f103 0208 	add.w	r2, r3, #8
 8008d44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008d48:	f8d4 b000 	ldr.w	fp, [r4]
 8008d4c:	f8c8 2000 	str.w	r2, [r8]
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008d5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008d60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d62:	f04f 32ff 	mov.w	r2, #4294967295
 8008d66:	4640      	mov	r0, r8
 8008d68:	4b9c      	ldr	r3, [pc, #624]	; (8008fdc <_printf_float+0x2cc>)
 8008d6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d6c:	f7f7 ff7c 	bl	8000c68 <__aeabi_dcmpun>
 8008d70:	bb70      	cbnz	r0, 8008dd0 <_printf_float+0xc0>
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295
 8008d76:	4640      	mov	r0, r8
 8008d78:	4b98      	ldr	r3, [pc, #608]	; (8008fdc <_printf_float+0x2cc>)
 8008d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d7c:	f7f7 ff56 	bl	8000c2c <__aeabi_dcmple>
 8008d80:	bb30      	cbnz	r0, 8008dd0 <_printf_float+0xc0>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4640      	mov	r0, r8
 8008d88:	4651      	mov	r1, sl
 8008d8a:	f7f7 ff45 	bl	8000c18 <__aeabi_dcmplt>
 8008d8e:	b110      	cbz	r0, 8008d96 <_printf_float+0x86>
 8008d90:	232d      	movs	r3, #45	; 0x2d
 8008d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d96:	4b92      	ldr	r3, [pc, #584]	; (8008fe0 <_printf_float+0x2d0>)
 8008d98:	4892      	ldr	r0, [pc, #584]	; (8008fe4 <_printf_float+0x2d4>)
 8008d9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d9e:	bf94      	ite	ls
 8008da0:	4698      	movls	r8, r3
 8008da2:	4680      	movhi	r8, r0
 8008da4:	2303      	movs	r3, #3
 8008da6:	f04f 0a00 	mov.w	sl, #0
 8008daa:	6123      	str	r3, [r4, #16]
 8008dac:	f02b 0304 	bic.w	r3, fp, #4
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	4633      	mov	r3, r6
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	9700      	str	r7, [sp, #0]
 8008dba:	aa0f      	add	r2, sp, #60	; 0x3c
 8008dbc:	f000 f9d4 	bl	8009168 <_printf_common>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	f040 8090 	bne.w	8008ee6 <_printf_float+0x1d6>
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dca:	b011      	add	sp, #68	; 0x44
 8008dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd0:	4642      	mov	r2, r8
 8008dd2:	4653      	mov	r3, sl
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	f7f7 ff46 	bl	8000c68 <__aeabi_dcmpun>
 8008ddc:	b148      	cbz	r0, 8008df2 <_printf_float+0xe2>
 8008dde:	f1ba 0f00 	cmp.w	sl, #0
 8008de2:	bfb8      	it	lt
 8008de4:	232d      	movlt	r3, #45	; 0x2d
 8008de6:	4880      	ldr	r0, [pc, #512]	; (8008fe8 <_printf_float+0x2d8>)
 8008de8:	bfb8      	it	lt
 8008dea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008dee:	4b7f      	ldr	r3, [pc, #508]	; (8008fec <_printf_float+0x2dc>)
 8008df0:	e7d3      	b.n	8008d9a <_printf_float+0x8a>
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	d142      	bne.n	8008e82 <_printf_float+0x172>
 8008dfc:	2306      	movs	r3, #6
 8008dfe:	6063      	str	r3, [r4, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	9206      	str	r2, [sp, #24]
 8008e04:	aa0e      	add	r2, sp, #56	; 0x38
 8008e06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008e0a:	aa0d      	add	r2, sp, #52	; 0x34
 8008e0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008e10:	9203      	str	r2, [sp, #12]
 8008e12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008e16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	4642      	mov	r2, r8
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	4628      	mov	r0, r5
 8008e24:	4653      	mov	r3, sl
 8008e26:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e28:	f7ff fed4 	bl	8008bd4 <__cvt>
 8008e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e2e:	4680      	mov	r8, r0
 8008e30:	2947      	cmp	r1, #71	; 0x47
 8008e32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e34:	d108      	bne.n	8008e48 <_printf_float+0x138>
 8008e36:	1cc8      	adds	r0, r1, #3
 8008e38:	db02      	blt.n	8008e40 <_printf_float+0x130>
 8008e3a:	6863      	ldr	r3, [r4, #4]
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	dd40      	ble.n	8008ec2 <_printf_float+0x1b2>
 8008e40:	f1a9 0902 	sub.w	r9, r9, #2
 8008e44:	fa5f f989 	uxtb.w	r9, r9
 8008e48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e4c:	d81f      	bhi.n	8008e8e <_printf_float+0x17e>
 8008e4e:	464a      	mov	r2, r9
 8008e50:	3901      	subs	r1, #1
 8008e52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e56:	910d      	str	r1, [sp, #52]	; 0x34
 8008e58:	f7ff ff1b 	bl	8008c92 <__exponent>
 8008e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e5e:	4682      	mov	sl, r0
 8008e60:	1813      	adds	r3, r2, r0
 8008e62:	2a01      	cmp	r2, #1
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	dc02      	bgt.n	8008e6e <_printf_float+0x15e>
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	07d2      	lsls	r2, r2, #31
 8008e6c:	d501      	bpl.n	8008e72 <_printf_float+0x162>
 8008e6e:	3301      	adds	r3, #1
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d09b      	beq.n	8008db2 <_printf_float+0xa2>
 8008e7a:	232d      	movs	r3, #45	; 0x2d
 8008e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e80:	e797      	b.n	8008db2 <_printf_float+0xa2>
 8008e82:	2947      	cmp	r1, #71	; 0x47
 8008e84:	d1bc      	bne.n	8008e00 <_printf_float+0xf0>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1ba      	bne.n	8008e00 <_printf_float+0xf0>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e7b7      	b.n	8008dfe <_printf_float+0xee>
 8008e8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e92:	d118      	bne.n	8008ec6 <_printf_float+0x1b6>
 8008e94:	2900      	cmp	r1, #0
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	dd0b      	ble.n	8008eb2 <_printf_float+0x1a2>
 8008e9a:	6121      	str	r1, [r4, #16]
 8008e9c:	b913      	cbnz	r3, 8008ea4 <_printf_float+0x194>
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	07d0      	lsls	r0, r2, #31
 8008ea2:	d502      	bpl.n	8008eaa <_printf_float+0x19a>
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	440b      	add	r3, r1
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	f04f 0a00 	mov.w	sl, #0
 8008eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8008eb0:	e7df      	b.n	8008e72 <_printf_float+0x162>
 8008eb2:	b913      	cbnz	r3, 8008eba <_printf_float+0x1aa>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	07d2      	lsls	r2, r2, #31
 8008eb8:	d501      	bpl.n	8008ebe <_printf_float+0x1ae>
 8008eba:	3302      	adds	r3, #2
 8008ebc:	e7f4      	b.n	8008ea8 <_printf_float+0x198>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e7f2      	b.n	8008ea8 <_printf_float+0x198>
 8008ec2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	db05      	blt.n	8008ed8 <_printf_float+0x1c8>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	6121      	str	r1, [r4, #16]
 8008ed0:	07d8      	lsls	r0, r3, #31
 8008ed2:	d5ea      	bpl.n	8008eaa <_printf_float+0x19a>
 8008ed4:	1c4b      	adds	r3, r1, #1
 8008ed6:	e7e7      	b.n	8008ea8 <_printf_float+0x198>
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	bfcc      	ite	gt
 8008edc:	2201      	movgt	r2, #1
 8008ede:	f1c1 0202 	rsble	r2, r1, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	e7e0      	b.n	8008ea8 <_printf_float+0x198>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	055a      	lsls	r2, r3, #21
 8008eea:	d407      	bmi.n	8008efc <_printf_float+0x1ec>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	4642      	mov	r2, r8
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d12b      	bne.n	8008f52 <_printf_float+0x242>
 8008efa:	e764      	b.n	8008dc6 <_printf_float+0xb6>
 8008efc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f00:	f240 80dd 	bls.w	80090be <_printf_float+0x3ae>
 8008f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f7f7 fe7a 	bl	8000c04 <__aeabi_dcmpeq>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d033      	beq.n	8008f7c <_printf_float+0x26c>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	4a35      	ldr	r2, [pc, #212]	; (8008ff0 <_printf_float+0x2e0>)
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f af51 	beq.w	8008dc6 <_printf_float+0xb6>
 8008f24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	db02      	blt.n	8008f32 <_printf_float+0x222>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	07d8      	lsls	r0, r3, #31
 8008f30:	d50f      	bpl.n	8008f52 <_printf_float+0x242>
 8008f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f af42 	beq.w	8008dc6 <_printf_float+0xb6>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	f104 091a 	add.w	r9, r4, #26
 8008f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	4543      	cmp	r3, r8
 8008f50:	dc09      	bgt.n	8008f66 <_printf_float+0x256>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	079b      	lsls	r3, r3, #30
 8008f56:	f100 8102 	bmi.w	800915e <_printf_float+0x44e>
 8008f5a:	68e0      	ldr	r0, [r4, #12]
 8008f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f5e:	4298      	cmp	r0, r3
 8008f60:	bfb8      	it	lt
 8008f62:	4618      	movlt	r0, r3
 8008f64:	e731      	b.n	8008dca <_printf_float+0xba>
 8008f66:	2301      	movs	r3, #1
 8008f68:	464a      	mov	r2, r9
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f af28 	beq.w	8008dc6 <_printf_float+0xb6>
 8008f76:	f108 0801 	add.w	r8, r8, #1
 8008f7a:	e7e6      	b.n	8008f4a <_printf_float+0x23a>
 8008f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc38      	bgt.n	8008ff4 <_printf_float+0x2e4>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	4a19      	ldr	r2, [pc, #100]	; (8008ff0 <_printf_float+0x2e0>)
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f af1a 	beq.w	8008dc6 <_printf_float+0xb6>
 8008f92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f96:	4313      	orrs	r3, r2
 8008f98:	d102      	bne.n	8008fa0 <_printf_float+0x290>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	07d9      	lsls	r1, r3, #31
 8008f9e:	d5d8      	bpl.n	8008f52 <_printf_float+0x242>
 8008fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	f43f af0b 	beq.w	8008dc6 <_printf_float+0xb6>
 8008fb0:	f04f 0900 	mov.w	r9, #0
 8008fb4:	f104 0a1a 	add.w	sl, r4, #26
 8008fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fba:	425b      	negs	r3, r3
 8008fbc:	454b      	cmp	r3, r9
 8008fbe:	dc01      	bgt.n	8008fc4 <_printf_float+0x2b4>
 8008fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc2:	e794      	b.n	8008eee <_printf_float+0x1de>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4652      	mov	r2, sl
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b8      	blx	r7
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f43f aef9 	beq.w	8008dc6 <_printf_float+0xb6>
 8008fd4:	f109 0901 	add.w	r9, r9, #1
 8008fd8:	e7ee      	b.n	8008fb8 <_printf_float+0x2a8>
 8008fda:	bf00      	nop
 8008fdc:	7fefffff 	.word	0x7fefffff
 8008fe0:	0800d658 	.word	0x0800d658
 8008fe4:	0800d65c 	.word	0x0800d65c
 8008fe8:	0800d664 	.word	0x0800d664
 8008fec:	0800d660 	.word	0x0800d660
 8008ff0:	0800d668 	.word	0x0800d668
 8008ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	bfa8      	it	ge
 8008ffc:	461a      	movge	r2, r3
 8008ffe:	2a00      	cmp	r2, #0
 8009000:	4691      	mov	r9, r2
 8009002:	dc37      	bgt.n	8009074 <_printf_float+0x364>
 8009004:	f04f 0b00 	mov.w	fp, #0
 8009008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800900c:	f104 021a 	add.w	r2, r4, #26
 8009010:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009014:	ebaa 0309 	sub.w	r3, sl, r9
 8009018:	455b      	cmp	r3, fp
 800901a:	dc33      	bgt.n	8009084 <_printf_float+0x374>
 800901c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009020:	429a      	cmp	r2, r3
 8009022:	db3b      	blt.n	800909c <_printf_float+0x38c>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d438      	bmi.n	800909c <_printf_float+0x38c>
 800902a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800902e:	eba3 020a 	sub.w	r2, r3, sl
 8009032:	eba3 0901 	sub.w	r9, r3, r1
 8009036:	4591      	cmp	r9, r2
 8009038:	bfa8      	it	ge
 800903a:	4691      	movge	r9, r2
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	dc34      	bgt.n	80090ac <_printf_float+0x39c>
 8009042:	f04f 0800 	mov.w	r8, #0
 8009046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800904a:	f104 0a1a 	add.w	sl, r4, #26
 800904e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	eba3 0309 	sub.w	r3, r3, r9
 8009058:	4543      	cmp	r3, r8
 800905a:	f77f af7a 	ble.w	8008f52 <_printf_float+0x242>
 800905e:	2301      	movs	r3, #1
 8009060:	4652      	mov	r2, sl
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f aeac 	beq.w	8008dc6 <_printf_float+0xb6>
 800906e:	f108 0801 	add.w	r8, r8, #1
 8009072:	e7ec      	b.n	800904e <_printf_float+0x33e>
 8009074:	4613      	mov	r3, r2
 8009076:	4631      	mov	r1, r6
 8009078:	4642      	mov	r2, r8
 800907a:	4628      	mov	r0, r5
 800907c:	47b8      	blx	r7
 800907e:	3001      	adds	r0, #1
 8009080:	d1c0      	bne.n	8009004 <_printf_float+0x2f4>
 8009082:	e6a0      	b.n	8008dc6 <_printf_float+0xb6>
 8009084:	2301      	movs	r3, #1
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	920b      	str	r2, [sp, #44]	; 0x2c
 800908c:	47b8      	blx	r7
 800908e:	3001      	adds	r0, #1
 8009090:	f43f ae99 	beq.w	8008dc6 <_printf_float+0xb6>
 8009094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009096:	f10b 0b01 	add.w	fp, fp, #1
 800909a:	e7b9      	b.n	8009010 <_printf_float+0x300>
 800909c:	4631      	mov	r1, r6
 800909e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	d1bf      	bne.n	800902a <_printf_float+0x31a>
 80090aa:	e68c      	b.n	8008dc6 <_printf_float+0xb6>
 80090ac:	464b      	mov	r3, r9
 80090ae:	4631      	mov	r1, r6
 80090b0:	4628      	mov	r0, r5
 80090b2:	eb08 020a 	add.w	r2, r8, sl
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	d1c2      	bne.n	8009042 <_printf_float+0x332>
 80090bc:	e683      	b.n	8008dc6 <_printf_float+0xb6>
 80090be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c0:	2a01      	cmp	r2, #1
 80090c2:	dc01      	bgt.n	80090c8 <_printf_float+0x3b8>
 80090c4:	07db      	lsls	r3, r3, #31
 80090c6:	d537      	bpl.n	8009138 <_printf_float+0x428>
 80090c8:	2301      	movs	r3, #1
 80090ca:	4642      	mov	r2, r8
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	f43f ae77 	beq.w	8008dc6 <_printf_float+0xb6>
 80090d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090dc:	4631      	mov	r1, r6
 80090de:	4628      	mov	r0, r5
 80090e0:	47b8      	blx	r7
 80090e2:	3001      	adds	r0, #1
 80090e4:	f43f ae6f 	beq.w	8008dc6 <_printf_float+0xb6>
 80090e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090ec:	2200      	movs	r2, #0
 80090ee:	2300      	movs	r3, #0
 80090f0:	f7f7 fd88 	bl	8000c04 <__aeabi_dcmpeq>
 80090f4:	b9d8      	cbnz	r0, 800912e <_printf_float+0x41e>
 80090f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090f8:	f108 0201 	add.w	r2, r8, #1
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	47b8      	blx	r7
 8009104:	3001      	adds	r0, #1
 8009106:	d10e      	bne.n	8009126 <_printf_float+0x416>
 8009108:	e65d      	b.n	8008dc6 <_printf_float+0xb6>
 800910a:	2301      	movs	r3, #1
 800910c:	464a      	mov	r2, r9
 800910e:	4631      	mov	r1, r6
 8009110:	4628      	mov	r0, r5
 8009112:	47b8      	blx	r7
 8009114:	3001      	adds	r0, #1
 8009116:	f43f ae56 	beq.w	8008dc6 <_printf_float+0xb6>
 800911a:	f108 0801 	add.w	r8, r8, #1
 800911e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009120:	3b01      	subs	r3, #1
 8009122:	4543      	cmp	r3, r8
 8009124:	dcf1      	bgt.n	800910a <_printf_float+0x3fa>
 8009126:	4653      	mov	r3, sl
 8009128:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800912c:	e6e0      	b.n	8008ef0 <_printf_float+0x1e0>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	f104 091a 	add.w	r9, r4, #26
 8009136:	e7f2      	b.n	800911e <_printf_float+0x40e>
 8009138:	2301      	movs	r3, #1
 800913a:	4642      	mov	r2, r8
 800913c:	e7df      	b.n	80090fe <_printf_float+0x3ee>
 800913e:	2301      	movs	r3, #1
 8009140:	464a      	mov	r2, r9
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f ae3c 	beq.w	8008dc6 <_printf_float+0xb6>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	68e3      	ldr	r3, [r4, #12]
 8009154:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009156:	1a5b      	subs	r3, r3, r1
 8009158:	4543      	cmp	r3, r8
 800915a:	dcf0      	bgt.n	800913e <_printf_float+0x42e>
 800915c:	e6fd      	b.n	8008f5a <_printf_float+0x24a>
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	f104 0919 	add.w	r9, r4, #25
 8009166:	e7f4      	b.n	8009152 <_printf_float+0x442>

08009168 <_printf_common>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	4616      	mov	r6, r2
 800916e:	4699      	mov	r9, r3
 8009170:	688a      	ldr	r2, [r1, #8]
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	4607      	mov	r7, r0
 8009176:	4293      	cmp	r3, r2
 8009178:	bfb8      	it	lt
 800917a:	4613      	movlt	r3, r2
 800917c:	6033      	str	r3, [r6, #0]
 800917e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009182:	460c      	mov	r4, r1
 8009184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009188:	b10a      	cbz	r2, 800918e <_printf_common+0x26>
 800918a:	3301      	adds	r3, #1
 800918c:	6033      	str	r3, [r6, #0]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	0699      	lsls	r1, r3, #26
 8009192:	bf42      	ittt	mi
 8009194:	6833      	ldrmi	r3, [r6, #0]
 8009196:	3302      	addmi	r3, #2
 8009198:	6033      	strmi	r3, [r6, #0]
 800919a:	6825      	ldr	r5, [r4, #0]
 800919c:	f015 0506 	ands.w	r5, r5, #6
 80091a0:	d106      	bne.n	80091b0 <_printf_common+0x48>
 80091a2:	f104 0a19 	add.w	sl, r4, #25
 80091a6:	68e3      	ldr	r3, [r4, #12]
 80091a8:	6832      	ldr	r2, [r6, #0]
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc28      	bgt.n	8009202 <_printf_common+0x9a>
 80091b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b4:	1e13      	subs	r3, r2, #0
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	bf18      	it	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	0692      	lsls	r2, r2, #26
 80091be:	d42d      	bmi.n	800921c <_printf_common+0xb4>
 80091c0:	4649      	mov	r1, r9
 80091c2:	4638      	mov	r0, r7
 80091c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c8:	47c0      	blx	r8
 80091ca:	3001      	adds	r0, #1
 80091cc:	d020      	beq.n	8009210 <_printf_common+0xa8>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	68e5      	ldr	r5, [r4, #12]
 80091d2:	f003 0306 	and.w	r3, r3, #6
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	bf18      	it	ne
 80091da:	2500      	movne	r5, #0
 80091dc:	6832      	ldr	r2, [r6, #0]
 80091de:	f04f 0600 	mov.w	r6, #0
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	bf08      	it	eq
 80091e6:	1aad      	subeq	r5, r5, r2
 80091e8:	6922      	ldr	r2, [r4, #16]
 80091ea:	bf08      	it	eq
 80091ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f0:	4293      	cmp	r3, r2
 80091f2:	bfc4      	itt	gt
 80091f4:	1a9b      	subgt	r3, r3, r2
 80091f6:	18ed      	addgt	r5, r5, r3
 80091f8:	341a      	adds	r4, #26
 80091fa:	42b5      	cmp	r5, r6
 80091fc:	d11a      	bne.n	8009234 <_printf_common+0xcc>
 80091fe:	2000      	movs	r0, #0
 8009200:	e008      	b.n	8009214 <_printf_common+0xac>
 8009202:	2301      	movs	r3, #1
 8009204:	4652      	mov	r2, sl
 8009206:	4649      	mov	r1, r9
 8009208:	4638      	mov	r0, r7
 800920a:	47c0      	blx	r8
 800920c:	3001      	adds	r0, #1
 800920e:	d103      	bne.n	8009218 <_printf_common+0xb0>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009218:	3501      	adds	r5, #1
 800921a:	e7c4      	b.n	80091a6 <_printf_common+0x3e>
 800921c:	2030      	movs	r0, #48	; 0x30
 800921e:	18e1      	adds	r1, r4, r3
 8009220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800922a:	4422      	add	r2, r4
 800922c:	3302      	adds	r3, #2
 800922e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009232:	e7c5      	b.n	80091c0 <_printf_common+0x58>
 8009234:	2301      	movs	r3, #1
 8009236:	4622      	mov	r2, r4
 8009238:	4649      	mov	r1, r9
 800923a:	4638      	mov	r0, r7
 800923c:	47c0      	blx	r8
 800923e:	3001      	adds	r0, #1
 8009240:	d0e6      	beq.n	8009210 <_printf_common+0xa8>
 8009242:	3601      	adds	r6, #1
 8009244:	e7d9      	b.n	80091fa <_printf_common+0x92>
	...

08009248 <_printf_i>:
 8009248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	7e0f      	ldrb	r7, [r1, #24]
 800924e:	4691      	mov	r9, r2
 8009250:	2f78      	cmp	r7, #120	; 0x78
 8009252:	4680      	mov	r8, r0
 8009254:	460c      	mov	r4, r1
 8009256:	469a      	mov	sl, r3
 8009258:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800925a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800925e:	d807      	bhi.n	8009270 <_printf_i+0x28>
 8009260:	2f62      	cmp	r7, #98	; 0x62
 8009262:	d80a      	bhi.n	800927a <_printf_i+0x32>
 8009264:	2f00      	cmp	r7, #0
 8009266:	f000 80d9 	beq.w	800941c <_printf_i+0x1d4>
 800926a:	2f58      	cmp	r7, #88	; 0x58
 800926c:	f000 80a4 	beq.w	80093b8 <_printf_i+0x170>
 8009270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009278:	e03a      	b.n	80092f0 <_printf_i+0xa8>
 800927a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800927e:	2b15      	cmp	r3, #21
 8009280:	d8f6      	bhi.n	8009270 <_printf_i+0x28>
 8009282:	a101      	add	r1, pc, #4	; (adr r1, 8009288 <_printf_i+0x40>)
 8009284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009288:	080092e1 	.word	0x080092e1
 800928c:	080092f5 	.word	0x080092f5
 8009290:	08009271 	.word	0x08009271
 8009294:	08009271 	.word	0x08009271
 8009298:	08009271 	.word	0x08009271
 800929c:	08009271 	.word	0x08009271
 80092a0:	080092f5 	.word	0x080092f5
 80092a4:	08009271 	.word	0x08009271
 80092a8:	08009271 	.word	0x08009271
 80092ac:	08009271 	.word	0x08009271
 80092b0:	08009271 	.word	0x08009271
 80092b4:	08009403 	.word	0x08009403
 80092b8:	08009325 	.word	0x08009325
 80092bc:	080093e5 	.word	0x080093e5
 80092c0:	08009271 	.word	0x08009271
 80092c4:	08009271 	.word	0x08009271
 80092c8:	08009425 	.word	0x08009425
 80092cc:	08009271 	.word	0x08009271
 80092d0:	08009325 	.word	0x08009325
 80092d4:	08009271 	.word	0x08009271
 80092d8:	08009271 	.word	0x08009271
 80092dc:	080093ed 	.word	0x080093ed
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	1d1a      	adds	r2, r3, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	602a      	str	r2, [r5, #0]
 80092e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f0:	2301      	movs	r3, #1
 80092f2:	e0a4      	b.n	800943e <_printf_i+0x1f6>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	6829      	ldr	r1, [r5, #0]
 80092f8:	0606      	lsls	r6, r0, #24
 80092fa:	f101 0304 	add.w	r3, r1, #4
 80092fe:	d50a      	bpl.n	8009316 <_printf_i+0xce>
 8009300:	680e      	ldr	r6, [r1, #0]
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	2e00      	cmp	r6, #0
 8009306:	da03      	bge.n	8009310 <_printf_i+0xc8>
 8009308:	232d      	movs	r3, #45	; 0x2d
 800930a:	4276      	negs	r6, r6
 800930c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009310:	230a      	movs	r3, #10
 8009312:	485e      	ldr	r0, [pc, #376]	; (800948c <_printf_i+0x244>)
 8009314:	e019      	b.n	800934a <_printf_i+0x102>
 8009316:	680e      	ldr	r6, [r1, #0]
 8009318:	f010 0f40 	tst.w	r0, #64	; 0x40
 800931c:	602b      	str	r3, [r5, #0]
 800931e:	bf18      	it	ne
 8009320:	b236      	sxthne	r6, r6
 8009322:	e7ef      	b.n	8009304 <_printf_i+0xbc>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	1d19      	adds	r1, r3, #4
 800932a:	6029      	str	r1, [r5, #0]
 800932c:	0601      	lsls	r1, r0, #24
 800932e:	d501      	bpl.n	8009334 <_printf_i+0xec>
 8009330:	681e      	ldr	r6, [r3, #0]
 8009332:	e002      	b.n	800933a <_printf_i+0xf2>
 8009334:	0646      	lsls	r6, r0, #25
 8009336:	d5fb      	bpl.n	8009330 <_printf_i+0xe8>
 8009338:	881e      	ldrh	r6, [r3, #0]
 800933a:	2f6f      	cmp	r7, #111	; 0x6f
 800933c:	bf0c      	ite	eq
 800933e:	2308      	moveq	r3, #8
 8009340:	230a      	movne	r3, #10
 8009342:	4852      	ldr	r0, [pc, #328]	; (800948c <_printf_i+0x244>)
 8009344:	2100      	movs	r1, #0
 8009346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800934a:	6865      	ldr	r5, [r4, #4]
 800934c:	2d00      	cmp	r5, #0
 800934e:	bfa8      	it	ge
 8009350:	6821      	ldrge	r1, [r4, #0]
 8009352:	60a5      	str	r5, [r4, #8]
 8009354:	bfa4      	itt	ge
 8009356:	f021 0104 	bicge.w	r1, r1, #4
 800935a:	6021      	strge	r1, [r4, #0]
 800935c:	b90e      	cbnz	r6, 8009362 <_printf_i+0x11a>
 800935e:	2d00      	cmp	r5, #0
 8009360:	d04d      	beq.n	80093fe <_printf_i+0x1b6>
 8009362:	4615      	mov	r5, r2
 8009364:	fbb6 f1f3 	udiv	r1, r6, r3
 8009368:	fb03 6711 	mls	r7, r3, r1, r6
 800936c:	5dc7      	ldrb	r7, [r0, r7]
 800936e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009372:	4637      	mov	r7, r6
 8009374:	42bb      	cmp	r3, r7
 8009376:	460e      	mov	r6, r1
 8009378:	d9f4      	bls.n	8009364 <_printf_i+0x11c>
 800937a:	2b08      	cmp	r3, #8
 800937c:	d10b      	bne.n	8009396 <_printf_i+0x14e>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	07de      	lsls	r6, r3, #31
 8009382:	d508      	bpl.n	8009396 <_printf_i+0x14e>
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	6861      	ldr	r1, [r4, #4]
 8009388:	4299      	cmp	r1, r3
 800938a:	bfde      	ittt	le
 800938c:	2330      	movle	r3, #48	; 0x30
 800938e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009392:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009396:	1b52      	subs	r2, r2, r5
 8009398:	6122      	str	r2, [r4, #16]
 800939a:	464b      	mov	r3, r9
 800939c:	4621      	mov	r1, r4
 800939e:	4640      	mov	r0, r8
 80093a0:	f8cd a000 	str.w	sl, [sp]
 80093a4:	aa03      	add	r2, sp, #12
 80093a6:	f7ff fedf 	bl	8009168 <_printf_common>
 80093aa:	3001      	adds	r0, #1
 80093ac:	d14c      	bne.n	8009448 <_printf_i+0x200>
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	b004      	add	sp, #16
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	4834      	ldr	r0, [pc, #208]	; (800948c <_printf_i+0x244>)
 80093ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093be:	6829      	ldr	r1, [r5, #0]
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80093c6:	6029      	str	r1, [r5, #0]
 80093c8:	061d      	lsls	r5, r3, #24
 80093ca:	d514      	bpl.n	80093f6 <_printf_i+0x1ae>
 80093cc:	07df      	lsls	r7, r3, #31
 80093ce:	bf44      	itt	mi
 80093d0:	f043 0320 	orrmi.w	r3, r3, #32
 80093d4:	6023      	strmi	r3, [r4, #0]
 80093d6:	b91e      	cbnz	r6, 80093e0 <_printf_i+0x198>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	f023 0320 	bic.w	r3, r3, #32
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	2310      	movs	r3, #16
 80093e2:	e7af      	b.n	8009344 <_printf_i+0xfc>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	f043 0320 	orr.w	r3, r3, #32
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	2378      	movs	r3, #120	; 0x78
 80093ee:	4828      	ldr	r0, [pc, #160]	; (8009490 <_printf_i+0x248>)
 80093f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093f4:	e7e3      	b.n	80093be <_printf_i+0x176>
 80093f6:	0659      	lsls	r1, r3, #25
 80093f8:	bf48      	it	mi
 80093fa:	b2b6      	uxthmi	r6, r6
 80093fc:	e7e6      	b.n	80093cc <_printf_i+0x184>
 80093fe:	4615      	mov	r5, r2
 8009400:	e7bb      	b.n	800937a <_printf_i+0x132>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	6826      	ldr	r6, [r4, #0]
 8009406:	1d18      	adds	r0, r3, #4
 8009408:	6961      	ldr	r1, [r4, #20]
 800940a:	6028      	str	r0, [r5, #0]
 800940c:	0635      	lsls	r5, r6, #24
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	d501      	bpl.n	8009416 <_printf_i+0x1ce>
 8009412:	6019      	str	r1, [r3, #0]
 8009414:	e002      	b.n	800941c <_printf_i+0x1d4>
 8009416:	0670      	lsls	r0, r6, #25
 8009418:	d5fb      	bpl.n	8009412 <_printf_i+0x1ca>
 800941a:	8019      	strh	r1, [r3, #0]
 800941c:	2300      	movs	r3, #0
 800941e:	4615      	mov	r5, r2
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	e7ba      	b.n	800939a <_printf_i+0x152>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	2100      	movs	r1, #0
 8009428:	1d1a      	adds	r2, r3, #4
 800942a:	602a      	str	r2, [r5, #0]
 800942c:	681d      	ldr	r5, [r3, #0]
 800942e:	6862      	ldr	r2, [r4, #4]
 8009430:	4628      	mov	r0, r5
 8009432:	f002 fe79 	bl	800c128 <memchr>
 8009436:	b108      	cbz	r0, 800943c <_printf_i+0x1f4>
 8009438:	1b40      	subs	r0, r0, r5
 800943a:	6060      	str	r0, [r4, #4]
 800943c:	6863      	ldr	r3, [r4, #4]
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	2300      	movs	r3, #0
 8009442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009446:	e7a8      	b.n	800939a <_printf_i+0x152>
 8009448:	462a      	mov	r2, r5
 800944a:	4649      	mov	r1, r9
 800944c:	4640      	mov	r0, r8
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	47d0      	blx	sl
 8009452:	3001      	adds	r0, #1
 8009454:	d0ab      	beq.n	80093ae <_printf_i+0x166>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	079b      	lsls	r3, r3, #30
 800945a:	d413      	bmi.n	8009484 <_printf_i+0x23c>
 800945c:	68e0      	ldr	r0, [r4, #12]
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	4298      	cmp	r0, r3
 8009462:	bfb8      	it	lt
 8009464:	4618      	movlt	r0, r3
 8009466:	e7a4      	b.n	80093b2 <_printf_i+0x16a>
 8009468:	2301      	movs	r3, #1
 800946a:	4632      	mov	r2, r6
 800946c:	4649      	mov	r1, r9
 800946e:	4640      	mov	r0, r8
 8009470:	47d0      	blx	sl
 8009472:	3001      	adds	r0, #1
 8009474:	d09b      	beq.n	80093ae <_printf_i+0x166>
 8009476:	3501      	adds	r5, #1
 8009478:	68e3      	ldr	r3, [r4, #12]
 800947a:	9903      	ldr	r1, [sp, #12]
 800947c:	1a5b      	subs	r3, r3, r1
 800947e:	42ab      	cmp	r3, r5
 8009480:	dcf2      	bgt.n	8009468 <_printf_i+0x220>
 8009482:	e7eb      	b.n	800945c <_printf_i+0x214>
 8009484:	2500      	movs	r5, #0
 8009486:	f104 0619 	add.w	r6, r4, #25
 800948a:	e7f5      	b.n	8009478 <_printf_i+0x230>
 800948c:	0800d66a 	.word	0x0800d66a
 8009490:	0800d67b 	.word	0x0800d67b

08009494 <_scanf_float>:
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	b087      	sub	sp, #28
 800949a:	9303      	str	r3, [sp, #12]
 800949c:	688b      	ldr	r3, [r1, #8]
 800949e:	4617      	mov	r7, r2
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094a6:	bf85      	ittet	hi
 80094a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094ac:	195b      	addhi	r3, r3, r5
 80094ae:	2300      	movls	r3, #0
 80094b0:	9302      	strhi	r3, [sp, #8]
 80094b2:	bf88      	it	hi
 80094b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80094b8:	468b      	mov	fp, r1
 80094ba:	f04f 0500 	mov.w	r5, #0
 80094be:	bf8c      	ite	hi
 80094c0:	608b      	strhi	r3, [r1, #8]
 80094c2:	9302      	strls	r3, [sp, #8]
 80094c4:	680b      	ldr	r3, [r1, #0]
 80094c6:	4680      	mov	r8, r0
 80094c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80094cc:	f84b 3b1c 	str.w	r3, [fp], #28
 80094d0:	460c      	mov	r4, r1
 80094d2:	465e      	mov	r6, fp
 80094d4:	46aa      	mov	sl, r5
 80094d6:	46a9      	mov	r9, r5
 80094d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094dc:	9501      	str	r5, [sp, #4]
 80094de:	68a2      	ldr	r2, [r4, #8]
 80094e0:	b152      	cbz	r2, 80094f8 <_scanf_float+0x64>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b4e      	cmp	r3, #78	; 0x4e
 80094e8:	d864      	bhi.n	80095b4 <_scanf_float+0x120>
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d83c      	bhi.n	8009568 <_scanf_float+0xd4>
 80094ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094f2:	b2c8      	uxtb	r0, r1
 80094f4:	280e      	cmp	r0, #14
 80094f6:	d93a      	bls.n	800956e <_scanf_float+0xda>
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	d003      	beq.n	8009506 <_scanf_float+0x72>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800950a:	f1ba 0f01 	cmp.w	sl, #1
 800950e:	f200 8113 	bhi.w	8009738 <_scanf_float+0x2a4>
 8009512:	455e      	cmp	r6, fp
 8009514:	f200 8105 	bhi.w	8009722 <_scanf_float+0x28e>
 8009518:	2501      	movs	r5, #1
 800951a:	4628      	mov	r0, r5
 800951c:	b007      	add	sp, #28
 800951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009522:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009526:	2a0d      	cmp	r2, #13
 8009528:	d8e6      	bhi.n	80094f8 <_scanf_float+0x64>
 800952a:	a101      	add	r1, pc, #4	; (adr r1, 8009530 <_scanf_float+0x9c>)
 800952c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009530:	0800966f 	.word	0x0800966f
 8009534:	080094f9 	.word	0x080094f9
 8009538:	080094f9 	.word	0x080094f9
 800953c:	080094f9 	.word	0x080094f9
 8009540:	080096cf 	.word	0x080096cf
 8009544:	080096a7 	.word	0x080096a7
 8009548:	080094f9 	.word	0x080094f9
 800954c:	080094f9 	.word	0x080094f9
 8009550:	0800967d 	.word	0x0800967d
 8009554:	080094f9 	.word	0x080094f9
 8009558:	080094f9 	.word	0x080094f9
 800955c:	080094f9 	.word	0x080094f9
 8009560:	080094f9 	.word	0x080094f9
 8009564:	08009635 	.word	0x08009635
 8009568:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800956c:	e7db      	b.n	8009526 <_scanf_float+0x92>
 800956e:	290e      	cmp	r1, #14
 8009570:	d8c2      	bhi.n	80094f8 <_scanf_float+0x64>
 8009572:	a001      	add	r0, pc, #4	; (adr r0, 8009578 <_scanf_float+0xe4>)
 8009574:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009578:	08009627 	.word	0x08009627
 800957c:	080094f9 	.word	0x080094f9
 8009580:	08009627 	.word	0x08009627
 8009584:	080096bb 	.word	0x080096bb
 8009588:	080094f9 	.word	0x080094f9
 800958c:	080095d5 	.word	0x080095d5
 8009590:	08009611 	.word	0x08009611
 8009594:	08009611 	.word	0x08009611
 8009598:	08009611 	.word	0x08009611
 800959c:	08009611 	.word	0x08009611
 80095a0:	08009611 	.word	0x08009611
 80095a4:	08009611 	.word	0x08009611
 80095a8:	08009611 	.word	0x08009611
 80095ac:	08009611 	.word	0x08009611
 80095b0:	08009611 	.word	0x08009611
 80095b4:	2b6e      	cmp	r3, #110	; 0x6e
 80095b6:	d809      	bhi.n	80095cc <_scanf_float+0x138>
 80095b8:	2b60      	cmp	r3, #96	; 0x60
 80095ba:	d8b2      	bhi.n	8009522 <_scanf_float+0x8e>
 80095bc:	2b54      	cmp	r3, #84	; 0x54
 80095be:	d077      	beq.n	80096b0 <_scanf_float+0x21c>
 80095c0:	2b59      	cmp	r3, #89	; 0x59
 80095c2:	d199      	bne.n	80094f8 <_scanf_float+0x64>
 80095c4:	2d07      	cmp	r5, #7
 80095c6:	d197      	bne.n	80094f8 <_scanf_float+0x64>
 80095c8:	2508      	movs	r5, #8
 80095ca:	e029      	b.n	8009620 <_scanf_float+0x18c>
 80095cc:	2b74      	cmp	r3, #116	; 0x74
 80095ce:	d06f      	beq.n	80096b0 <_scanf_float+0x21c>
 80095d0:	2b79      	cmp	r3, #121	; 0x79
 80095d2:	e7f6      	b.n	80095c2 <_scanf_float+0x12e>
 80095d4:	6821      	ldr	r1, [r4, #0]
 80095d6:	05c8      	lsls	r0, r1, #23
 80095d8:	d51a      	bpl.n	8009610 <_scanf_float+0x17c>
 80095da:	9b02      	ldr	r3, [sp, #8]
 80095dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80095e0:	6021      	str	r1, [r4, #0]
 80095e2:	f109 0901 	add.w	r9, r9, #1
 80095e6:	b11b      	cbz	r3, 80095f0 <_scanf_float+0x15c>
 80095e8:	3b01      	subs	r3, #1
 80095ea:	3201      	adds	r2, #1
 80095ec:	9302      	str	r3, [sp, #8]
 80095ee:	60a2      	str	r2, [r4, #8]
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	60a3      	str	r3, [r4, #8]
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	607b      	str	r3, [r7, #4]
 8009604:	f340 8084 	ble.w	8009710 <_scanf_float+0x27c>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	e766      	b.n	80094de <_scanf_float+0x4a>
 8009610:	eb1a 0f05 	cmn.w	sl, r5
 8009614:	f47f af70 	bne.w	80094f8 <_scanf_float+0x64>
 8009618:	6822      	ldr	r2, [r4, #0]
 800961a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	f806 3b01 	strb.w	r3, [r6], #1
 8009624:	e7e4      	b.n	80095f0 <_scanf_float+0x15c>
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	0610      	lsls	r0, r2, #24
 800962a:	f57f af65 	bpl.w	80094f8 <_scanf_float+0x64>
 800962e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009632:	e7f4      	b.n	800961e <_scanf_float+0x18a>
 8009634:	f1ba 0f00 	cmp.w	sl, #0
 8009638:	d10e      	bne.n	8009658 <_scanf_float+0x1c4>
 800963a:	f1b9 0f00 	cmp.w	r9, #0
 800963e:	d10e      	bne.n	800965e <_scanf_float+0x1ca>
 8009640:	6822      	ldr	r2, [r4, #0]
 8009642:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009646:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800964a:	d108      	bne.n	800965e <_scanf_float+0x1ca>
 800964c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009650:	f04f 0a01 	mov.w	sl, #1
 8009654:	6022      	str	r2, [r4, #0]
 8009656:	e7e3      	b.n	8009620 <_scanf_float+0x18c>
 8009658:	f1ba 0f02 	cmp.w	sl, #2
 800965c:	d055      	beq.n	800970a <_scanf_float+0x276>
 800965e:	2d01      	cmp	r5, #1
 8009660:	d002      	beq.n	8009668 <_scanf_float+0x1d4>
 8009662:	2d04      	cmp	r5, #4
 8009664:	f47f af48 	bne.w	80094f8 <_scanf_float+0x64>
 8009668:	3501      	adds	r5, #1
 800966a:	b2ed      	uxtb	r5, r5
 800966c:	e7d8      	b.n	8009620 <_scanf_float+0x18c>
 800966e:	f1ba 0f01 	cmp.w	sl, #1
 8009672:	f47f af41 	bne.w	80094f8 <_scanf_float+0x64>
 8009676:	f04f 0a02 	mov.w	sl, #2
 800967a:	e7d1      	b.n	8009620 <_scanf_float+0x18c>
 800967c:	b97d      	cbnz	r5, 800969e <_scanf_float+0x20a>
 800967e:	f1b9 0f00 	cmp.w	r9, #0
 8009682:	f47f af3c 	bne.w	80094fe <_scanf_float+0x6a>
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800968c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009690:	f47f af39 	bne.w	8009506 <_scanf_float+0x72>
 8009694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009698:	2501      	movs	r5, #1
 800969a:	6022      	str	r2, [r4, #0]
 800969c:	e7c0      	b.n	8009620 <_scanf_float+0x18c>
 800969e:	2d03      	cmp	r5, #3
 80096a0:	d0e2      	beq.n	8009668 <_scanf_float+0x1d4>
 80096a2:	2d05      	cmp	r5, #5
 80096a4:	e7de      	b.n	8009664 <_scanf_float+0x1d0>
 80096a6:	2d02      	cmp	r5, #2
 80096a8:	f47f af26 	bne.w	80094f8 <_scanf_float+0x64>
 80096ac:	2503      	movs	r5, #3
 80096ae:	e7b7      	b.n	8009620 <_scanf_float+0x18c>
 80096b0:	2d06      	cmp	r5, #6
 80096b2:	f47f af21 	bne.w	80094f8 <_scanf_float+0x64>
 80096b6:	2507      	movs	r5, #7
 80096b8:	e7b2      	b.n	8009620 <_scanf_float+0x18c>
 80096ba:	6822      	ldr	r2, [r4, #0]
 80096bc:	0591      	lsls	r1, r2, #22
 80096be:	f57f af1b 	bpl.w	80094f8 <_scanf_float+0x64>
 80096c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80096c6:	6022      	str	r2, [r4, #0]
 80096c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80096cc:	e7a8      	b.n	8009620 <_scanf_float+0x18c>
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80096d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80096d8:	d006      	beq.n	80096e8 <_scanf_float+0x254>
 80096da:	0550      	lsls	r0, r2, #21
 80096dc:	f57f af0c 	bpl.w	80094f8 <_scanf_float+0x64>
 80096e0:	f1b9 0f00 	cmp.w	r9, #0
 80096e4:	f43f af0f 	beq.w	8009506 <_scanf_float+0x72>
 80096e8:	0591      	lsls	r1, r2, #22
 80096ea:	bf58      	it	pl
 80096ec:	9901      	ldrpl	r1, [sp, #4]
 80096ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096f2:	bf58      	it	pl
 80096f4:	eba9 0101 	subpl.w	r1, r9, r1
 80096f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096fc:	f04f 0900 	mov.w	r9, #0
 8009700:	bf58      	it	pl
 8009702:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009706:	6022      	str	r2, [r4, #0]
 8009708:	e78a      	b.n	8009620 <_scanf_float+0x18c>
 800970a:	f04f 0a03 	mov.w	sl, #3
 800970e:	e787      	b.n	8009620 <_scanf_float+0x18c>
 8009710:	4639      	mov	r1, r7
 8009712:	4640      	mov	r0, r8
 8009714:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009718:	4798      	blx	r3
 800971a:	2800      	cmp	r0, #0
 800971c:	f43f aedf 	beq.w	80094de <_scanf_float+0x4a>
 8009720:	e6ea      	b.n	80094f8 <_scanf_float+0x64>
 8009722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009726:	463a      	mov	r2, r7
 8009728:	4640      	mov	r0, r8
 800972a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800972e:	4798      	blx	r3
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	3b01      	subs	r3, #1
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	e6ec      	b.n	8009512 <_scanf_float+0x7e>
 8009738:	1e6b      	subs	r3, r5, #1
 800973a:	2b06      	cmp	r3, #6
 800973c:	d825      	bhi.n	800978a <_scanf_float+0x2f6>
 800973e:	2d02      	cmp	r5, #2
 8009740:	d836      	bhi.n	80097b0 <_scanf_float+0x31c>
 8009742:	455e      	cmp	r6, fp
 8009744:	f67f aee8 	bls.w	8009518 <_scanf_float+0x84>
 8009748:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800974c:	463a      	mov	r2, r7
 800974e:	4640      	mov	r0, r8
 8009750:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009754:	4798      	blx	r3
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	3b01      	subs	r3, #1
 800975a:	6123      	str	r3, [r4, #16]
 800975c:	e7f1      	b.n	8009742 <_scanf_float+0x2ae>
 800975e:	9802      	ldr	r0, [sp, #8]
 8009760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009764:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009768:	463a      	mov	r2, r7
 800976a:	9002      	str	r0, [sp, #8]
 800976c:	4640      	mov	r0, r8
 800976e:	4798      	blx	r3
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	3b01      	subs	r3, #1
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800977a:	fa5f fa8a 	uxtb.w	sl, sl
 800977e:	f1ba 0f02 	cmp.w	sl, #2
 8009782:	d1ec      	bne.n	800975e <_scanf_float+0x2ca>
 8009784:	3d03      	subs	r5, #3
 8009786:	b2ed      	uxtb	r5, r5
 8009788:	1b76      	subs	r6, r6, r5
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	05da      	lsls	r2, r3, #23
 800978e:	d52f      	bpl.n	80097f0 <_scanf_float+0x35c>
 8009790:	055b      	lsls	r3, r3, #21
 8009792:	d510      	bpl.n	80097b6 <_scanf_float+0x322>
 8009794:	455e      	cmp	r6, fp
 8009796:	f67f aebf 	bls.w	8009518 <_scanf_float+0x84>
 800979a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800979e:	463a      	mov	r2, r7
 80097a0:	4640      	mov	r0, r8
 80097a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a6:	4798      	blx	r3
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	e7f1      	b.n	8009794 <_scanf_float+0x300>
 80097b0:	46aa      	mov	sl, r5
 80097b2:	9602      	str	r6, [sp, #8]
 80097b4:	e7df      	b.n	8009776 <_scanf_float+0x2e2>
 80097b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	2965      	cmp	r1, #101	; 0x65
 80097be:	f103 33ff 	add.w	r3, r3, #4294967295
 80097c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80097c6:	6123      	str	r3, [r4, #16]
 80097c8:	d00c      	beq.n	80097e4 <_scanf_float+0x350>
 80097ca:	2945      	cmp	r1, #69	; 0x45
 80097cc:	d00a      	beq.n	80097e4 <_scanf_float+0x350>
 80097ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097d2:	463a      	mov	r2, r7
 80097d4:	4640      	mov	r0, r8
 80097d6:	4798      	blx	r3
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80097de:	3b01      	subs	r3, #1
 80097e0:	1eb5      	subs	r5, r6, #2
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	463a      	mov	r2, r7
 80097e6:	4640      	mov	r0, r8
 80097e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097ec:	4798      	blx	r3
 80097ee:	462e      	mov	r6, r5
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	f015 0510 	ands.w	r5, r5, #16
 80097f6:	d155      	bne.n	80098a4 <_scanf_float+0x410>
 80097f8:	7035      	strb	r5, [r6, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009804:	d11b      	bne.n	800983e <_scanf_float+0x3aa>
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	454b      	cmp	r3, r9
 800980a:	eba3 0209 	sub.w	r2, r3, r9
 800980e:	d123      	bne.n	8009858 <_scanf_float+0x3c4>
 8009810:	2200      	movs	r2, #0
 8009812:	4659      	mov	r1, fp
 8009814:	4640      	mov	r0, r8
 8009816:	f000 fe93 	bl	800a540 <_strtod_r>
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	f012 0f02 	tst.w	r2, #2
 8009822:	4606      	mov	r6, r0
 8009824:	460f      	mov	r7, r1
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	d021      	beq.n	800986e <_scanf_float+0x3da>
 800982a:	1d1a      	adds	r2, r3, #4
 800982c:	9903      	ldr	r1, [sp, #12]
 800982e:	600a      	str	r2, [r1, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	e9c3 6700 	strd	r6, r7, [r3]
 8009836:	68e3      	ldr	r3, [r4, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	60e3      	str	r3, [r4, #12]
 800983c:	e66d      	b.n	800951a <_scanf_float+0x86>
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0e5      	beq.n	8009810 <_scanf_float+0x37c>
 8009844:	9905      	ldr	r1, [sp, #20]
 8009846:	230a      	movs	r3, #10
 8009848:	462a      	mov	r2, r5
 800984a:	4640      	mov	r0, r8
 800984c:	3101      	adds	r1, #1
 800984e:	f000 ff55 	bl	800a6fc <_strtol_r>
 8009852:	9b04      	ldr	r3, [sp, #16]
 8009854:	9e05      	ldr	r6, [sp, #20]
 8009856:	1ac2      	subs	r2, r0, r3
 8009858:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800985c:	429e      	cmp	r6, r3
 800985e:	bf28      	it	cs
 8009860:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009864:	4630      	mov	r0, r6
 8009866:	4910      	ldr	r1, [pc, #64]	; (80098a8 <_scanf_float+0x414>)
 8009868:	f000 f83e 	bl	80098e8 <siprintf>
 800986c:	e7d0      	b.n	8009810 <_scanf_float+0x37c>
 800986e:	f012 0f04 	tst.w	r2, #4
 8009872:	f103 0204 	add.w	r2, r3, #4
 8009876:	d1d9      	bne.n	800982c <_scanf_float+0x398>
 8009878:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800987c:	f8cc 2000 	str.w	r2, [ip]
 8009880:	f8d3 8000 	ldr.w	r8, [r3]
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	f7f7 f9ee 	bl	8000c68 <__aeabi_dcmpun>
 800988c:	b128      	cbz	r0, 800989a <_scanf_float+0x406>
 800988e:	4807      	ldr	r0, [pc, #28]	; (80098ac <_scanf_float+0x418>)
 8009890:	f000 f826 	bl	80098e0 <nanf>
 8009894:	f8c8 0000 	str.w	r0, [r8]
 8009898:	e7cd      	b.n	8009836 <_scanf_float+0x3a2>
 800989a:	4630      	mov	r0, r6
 800989c:	4639      	mov	r1, r7
 800989e:	f7f7 fa41 	bl	8000d24 <__aeabi_d2f>
 80098a2:	e7f7      	b.n	8009894 <_scanf_float+0x400>
 80098a4:	2500      	movs	r5, #0
 80098a6:	e638      	b.n	800951a <_scanf_float+0x86>
 80098a8:	0800d68c 	.word	0x0800d68c
 80098ac:	0800d797 	.word	0x0800d797

080098b0 <iprintf>:
 80098b0:	b40f      	push	{r0, r1, r2, r3}
 80098b2:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <iprintf+0x2c>)
 80098b4:	b513      	push	{r0, r1, r4, lr}
 80098b6:	681c      	ldr	r4, [r3, #0]
 80098b8:	b124      	cbz	r4, 80098c4 <iprintf+0x14>
 80098ba:	69a3      	ldr	r3, [r4, #24]
 80098bc:	b913      	cbnz	r3, 80098c4 <iprintf+0x14>
 80098be:	4620      	mov	r0, r4
 80098c0:	f001 ff96 	bl	800b7f0 <__sinit>
 80098c4:	ab05      	add	r3, sp, #20
 80098c6:	4620      	mov	r0, r4
 80098c8:	9a04      	ldr	r2, [sp, #16]
 80098ca:	68a1      	ldr	r1, [r4, #8]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	f003 fb65 	bl	800cf9c <_vfiprintf_r>
 80098d2:	b002      	add	sp, #8
 80098d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d8:	b004      	add	sp, #16
 80098da:	4770      	bx	lr
 80098dc:	200005ec 	.word	0x200005ec

080098e0 <nanf>:
 80098e0:	4800      	ldr	r0, [pc, #0]	; (80098e4 <nanf+0x4>)
 80098e2:	4770      	bx	lr
 80098e4:	7fc00000 	.word	0x7fc00000

080098e8 <siprintf>:
 80098e8:	b40e      	push	{r1, r2, r3}
 80098ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098ee:	b500      	push	{lr}
 80098f0:	b09c      	sub	sp, #112	; 0x70
 80098f2:	ab1d      	add	r3, sp, #116	; 0x74
 80098f4:	9002      	str	r0, [sp, #8]
 80098f6:	9006      	str	r0, [sp, #24]
 80098f8:	9107      	str	r1, [sp, #28]
 80098fa:	9104      	str	r1, [sp, #16]
 80098fc:	4808      	ldr	r0, [pc, #32]	; (8009920 <siprintf+0x38>)
 80098fe:	4909      	ldr	r1, [pc, #36]	; (8009924 <siprintf+0x3c>)
 8009900:	f853 2b04 	ldr.w	r2, [r3], #4
 8009904:	9105      	str	r1, [sp, #20]
 8009906:	6800      	ldr	r0, [r0, #0]
 8009908:	a902      	add	r1, sp, #8
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	f003 fa1e 	bl	800cd4c <_svfiprintf_r>
 8009910:	2200      	movs	r2, #0
 8009912:	9b02      	ldr	r3, [sp, #8]
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	b01c      	add	sp, #112	; 0x70
 8009918:	f85d eb04 	ldr.w	lr, [sp], #4
 800991c:	b003      	add	sp, #12
 800991e:	4770      	bx	lr
 8009920:	200005ec 	.word	0x200005ec
 8009924:	ffff0208 	.word	0xffff0208

08009928 <sulp>:
 8009928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	460f      	mov	r7, r1
 800992e:	4690      	mov	r8, r2
 8009930:	f002 ff78 	bl	800c824 <__ulp>
 8009934:	4604      	mov	r4, r0
 8009936:	460d      	mov	r5, r1
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	d011      	beq.n	8009962 <sulp+0x3a>
 800993e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd0b      	ble.n	8009962 <sulp+0x3a>
 800994a:	2400      	movs	r4, #0
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009952:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009956:	4622      	mov	r2, r4
 8009958:	462b      	mov	r3, r5
 800995a:	f7f6 feeb 	bl	8000734 <__aeabi_dmul>
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	4620      	mov	r0, r4
 8009964:	4629      	mov	r1, r5
 8009966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996a:	0000      	movs	r0, r0
 800996c:	0000      	movs	r0, r0
	...

08009970 <_strtod_l>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	469b      	mov	fp, r3
 8009976:	2300      	movs	r3, #0
 8009978:	b09f      	sub	sp, #124	; 0x7c
 800997a:	931a      	str	r3, [sp, #104]	; 0x68
 800997c:	4b9e      	ldr	r3, [pc, #632]	; (8009bf8 <_strtod_l+0x288>)
 800997e:	4682      	mov	sl, r0
 8009980:	681f      	ldr	r7, [r3, #0]
 8009982:	460e      	mov	r6, r1
 8009984:	4638      	mov	r0, r7
 8009986:	9215      	str	r2, [sp, #84]	; 0x54
 8009988:	f7f6 fc5c 	bl	8000244 <strlen>
 800998c:	f04f 0800 	mov.w	r8, #0
 8009990:	4604      	mov	r4, r0
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	9619      	str	r6, [sp, #100]	; 0x64
 8009998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	2a2b      	cmp	r2, #43	; 0x2b
 800999e:	d04c      	beq.n	8009a3a <_strtod_l+0xca>
 80099a0:	d83a      	bhi.n	8009a18 <_strtod_l+0xa8>
 80099a2:	2a0d      	cmp	r2, #13
 80099a4:	d833      	bhi.n	8009a0e <_strtod_l+0x9e>
 80099a6:	2a08      	cmp	r2, #8
 80099a8:	d833      	bhi.n	8009a12 <_strtod_l+0xa2>
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	d03d      	beq.n	8009a2a <_strtod_l+0xba>
 80099ae:	2300      	movs	r3, #0
 80099b0:	930a      	str	r3, [sp, #40]	; 0x28
 80099b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80099b4:	782b      	ldrb	r3, [r5, #0]
 80099b6:	2b30      	cmp	r3, #48	; 0x30
 80099b8:	f040 80aa 	bne.w	8009b10 <_strtod_l+0x1a0>
 80099bc:	786b      	ldrb	r3, [r5, #1]
 80099be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099c2:	2b58      	cmp	r3, #88	; 0x58
 80099c4:	d166      	bne.n	8009a94 <_strtod_l+0x124>
 80099c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c8:	4650      	mov	r0, sl
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	ab1a      	add	r3, sp, #104	; 0x68
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	4a8a      	ldr	r2, [pc, #552]	; (8009bfc <_strtod_l+0x28c>)
 80099d2:	f8cd b008 	str.w	fp, [sp, #8]
 80099d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80099d8:	a919      	add	r1, sp, #100	; 0x64
 80099da:	f002 f821 	bl	800ba20 <__gethex>
 80099de:	f010 0607 	ands.w	r6, r0, #7
 80099e2:	4604      	mov	r4, r0
 80099e4:	d005      	beq.n	80099f2 <_strtod_l+0x82>
 80099e6:	2e06      	cmp	r6, #6
 80099e8:	d129      	bne.n	8009a3e <_strtod_l+0xce>
 80099ea:	2300      	movs	r3, #0
 80099ec:	3501      	adds	r5, #1
 80099ee:	9519      	str	r5, [sp, #100]	; 0x64
 80099f0:	930a      	str	r3, [sp, #40]	; 0x28
 80099f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f040 858a 	bne.w	800a50e <_strtod_l+0xb9e>
 80099fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fc:	b1d3      	cbz	r3, 8009a34 <_strtod_l+0xc4>
 80099fe:	4642      	mov	r2, r8
 8009a00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a04:	4610      	mov	r0, r2
 8009a06:	4619      	mov	r1, r3
 8009a08:	b01f      	add	sp, #124	; 0x7c
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	2a20      	cmp	r2, #32
 8009a10:	d1cd      	bne.n	80099ae <_strtod_l+0x3e>
 8009a12:	3301      	adds	r3, #1
 8009a14:	9319      	str	r3, [sp, #100]	; 0x64
 8009a16:	e7bf      	b.n	8009998 <_strtod_l+0x28>
 8009a18:	2a2d      	cmp	r2, #45	; 0x2d
 8009a1a:	d1c8      	bne.n	80099ae <_strtod_l+0x3e>
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	920a      	str	r2, [sp, #40]	; 0x28
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	9219      	str	r2, [sp, #100]	; 0x64
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1c3      	bne.n	80099b2 <_strtod_l+0x42>
 8009a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a2c:	9619      	str	r6, [sp, #100]	; 0x64
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f040 856b 	bne.w	800a50a <_strtod_l+0xb9a>
 8009a34:	4642      	mov	r2, r8
 8009a36:	464b      	mov	r3, r9
 8009a38:	e7e4      	b.n	8009a04 <_strtod_l+0x94>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	e7ef      	b.n	8009a1e <_strtod_l+0xae>
 8009a3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a40:	b13a      	cbz	r2, 8009a52 <_strtod_l+0xe2>
 8009a42:	2135      	movs	r1, #53	; 0x35
 8009a44:	a81c      	add	r0, sp, #112	; 0x70
 8009a46:	f002 fff1 	bl	800ca2c <__copybits>
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a4e:	f002 fbb9 	bl	800c1c4 <_Bfree>
 8009a52:	3e01      	subs	r6, #1
 8009a54:	2e04      	cmp	r6, #4
 8009a56:	d806      	bhi.n	8009a66 <_strtod_l+0xf6>
 8009a58:	e8df f006 	tbb	[pc, r6]
 8009a5c:	1714030a 	.word	0x1714030a
 8009a60:	0a          	.byte	0x0a
 8009a61:	00          	.byte	0x00
 8009a62:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009a66:	0721      	lsls	r1, r4, #28
 8009a68:	d5c3      	bpl.n	80099f2 <_strtod_l+0x82>
 8009a6a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009a6e:	e7c0      	b.n	80099f2 <_strtod_l+0x82>
 8009a70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a72:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009a76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a7e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009a82:	e7f0      	b.n	8009a66 <_strtod_l+0xf6>
 8009a84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009c00 <_strtod_l+0x290>
 8009a88:	e7ed      	b.n	8009a66 <_strtod_l+0xf6>
 8009a8a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009a8e:	f04f 38ff 	mov.w	r8, #4294967295
 8009a92:	e7e8      	b.n	8009a66 <_strtod_l+0xf6>
 8009a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	9219      	str	r2, [sp, #100]	; 0x64
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	2b30      	cmp	r3, #48	; 0x30
 8009a9e:	d0f9      	beq.n	8009a94 <_strtod_l+0x124>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0a6      	beq.n	80099f2 <_strtod_l+0x82>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aaa:	220a      	movs	r2, #10
 8009aac:	9308      	str	r3, [sp, #32]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	469b      	mov	fp, r3
 8009ab2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009ab6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009ab8:	7805      	ldrb	r5, [r0, #0]
 8009aba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009abe:	b2d9      	uxtb	r1, r3
 8009ac0:	2909      	cmp	r1, #9
 8009ac2:	d927      	bls.n	8009b14 <_strtod_l+0x1a4>
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f003 fbf1 	bl	800d2ae <strncmp>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d033      	beq.n	8009b38 <_strtod_l+0x1c8>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	465c      	mov	r4, fp
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	9004      	str	r0, [sp, #16]
 8009ada:	2a65      	cmp	r2, #101	; 0x65
 8009adc:	d001      	beq.n	8009ae2 <_strtod_l+0x172>
 8009ade:	2a45      	cmp	r2, #69	; 0x45
 8009ae0:	d114      	bne.n	8009b0c <_strtod_l+0x19c>
 8009ae2:	b91c      	cbnz	r4, 8009aec <_strtod_l+0x17c>
 8009ae4:	9a07      	ldr	r2, [sp, #28]
 8009ae6:	4302      	orrs	r2, r0
 8009ae8:	d09f      	beq.n	8009a2a <_strtod_l+0xba>
 8009aea:	2400      	movs	r4, #0
 8009aec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009aee:	1c72      	adds	r2, r6, #1
 8009af0:	9219      	str	r2, [sp, #100]	; 0x64
 8009af2:	7872      	ldrb	r2, [r6, #1]
 8009af4:	2a2b      	cmp	r2, #43	; 0x2b
 8009af6:	d079      	beq.n	8009bec <_strtod_l+0x27c>
 8009af8:	2a2d      	cmp	r2, #45	; 0x2d
 8009afa:	f000 8083 	beq.w	8009c04 <_strtod_l+0x294>
 8009afe:	2700      	movs	r7, #0
 8009b00:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009b04:	2909      	cmp	r1, #9
 8009b06:	f240 8083 	bls.w	8009c10 <_strtod_l+0x2a0>
 8009b0a:	9619      	str	r6, [sp, #100]	; 0x64
 8009b0c:	2500      	movs	r5, #0
 8009b0e:	e09f      	b.n	8009c50 <_strtod_l+0x2e0>
 8009b10:	2300      	movs	r3, #0
 8009b12:	e7c8      	b.n	8009aa6 <_strtod_l+0x136>
 8009b14:	f1bb 0f08 	cmp.w	fp, #8
 8009b18:	bfd5      	itete	le
 8009b1a:	9906      	ldrle	r1, [sp, #24]
 8009b1c:	9905      	ldrgt	r1, [sp, #20]
 8009b1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b22:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b26:	f100 0001 	add.w	r0, r0, #1
 8009b2a:	bfd4      	ite	le
 8009b2c:	9306      	strle	r3, [sp, #24]
 8009b2e:	9305      	strgt	r3, [sp, #20]
 8009b30:	f10b 0b01 	add.w	fp, fp, #1
 8009b34:	9019      	str	r0, [sp, #100]	; 0x64
 8009b36:	e7be      	b.n	8009ab6 <_strtod_l+0x146>
 8009b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b3a:	191a      	adds	r2, r3, r4
 8009b3c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b3e:	5d1a      	ldrb	r2, [r3, r4]
 8009b40:	f1bb 0f00 	cmp.w	fp, #0
 8009b44:	d036      	beq.n	8009bb4 <_strtod_l+0x244>
 8009b46:	465c      	mov	r4, fp
 8009b48:	9004      	str	r0, [sp, #16]
 8009b4a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	d912      	bls.n	8009b78 <_strtod_l+0x208>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e7c1      	b.n	8009ada <_strtod_l+0x16a>
 8009b56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b58:	3001      	adds	r0, #1
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b5e:	785a      	ldrb	r2, [r3, #1]
 8009b60:	2a30      	cmp	r2, #48	; 0x30
 8009b62:	d0f8      	beq.n	8009b56 <_strtod_l+0x1e6>
 8009b64:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	f200 84d5 	bhi.w	800a518 <_strtod_l+0xba8>
 8009b6e:	9004      	str	r0, [sp, #16]
 8009b70:	2000      	movs	r0, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b76:	9308      	str	r3, [sp, #32]
 8009b78:	3a30      	subs	r2, #48	; 0x30
 8009b7a:	f100 0301 	add.w	r3, r0, #1
 8009b7e:	d013      	beq.n	8009ba8 <_strtod_l+0x238>
 8009b80:	9904      	ldr	r1, [sp, #16]
 8009b82:	1905      	adds	r5, r0, r4
 8009b84:	4419      	add	r1, r3
 8009b86:	9104      	str	r1, [sp, #16]
 8009b88:	4623      	mov	r3, r4
 8009b8a:	210a      	movs	r1, #10
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	d113      	bne.n	8009bb8 <_strtod_l+0x248>
 8009b90:	1823      	adds	r3, r4, r0
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	f104 0401 	add.w	r4, r4, #1
 8009b98:	4404      	add	r4, r0
 8009b9a:	dc1b      	bgt.n	8009bd4 <_strtod_l+0x264>
 8009b9c:	230a      	movs	r3, #10
 8009b9e:	9906      	ldr	r1, [sp, #24]
 8009ba0:	fb03 2301 	mla	r3, r3, r1, r2
 8009ba4:	9306      	str	r3, [sp, #24]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009baa:	4618      	mov	r0, r3
 8009bac:	1c51      	adds	r1, r2, #1
 8009bae:	9119      	str	r1, [sp, #100]	; 0x64
 8009bb0:	7852      	ldrb	r2, [r2, #1]
 8009bb2:	e7ca      	b.n	8009b4a <_strtod_l+0x1da>
 8009bb4:	4658      	mov	r0, fp
 8009bb6:	e7d3      	b.n	8009b60 <_strtod_l+0x1f0>
 8009bb8:	2b08      	cmp	r3, #8
 8009bba:	dc04      	bgt.n	8009bc6 <_strtod_l+0x256>
 8009bbc:	9f06      	ldr	r7, [sp, #24]
 8009bbe:	434f      	muls	r7, r1
 8009bc0:	9706      	str	r7, [sp, #24]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	e7e2      	b.n	8009b8c <_strtod_l+0x21c>
 8009bc6:	1c5f      	adds	r7, r3, #1
 8009bc8:	2f10      	cmp	r7, #16
 8009bca:	bfde      	ittt	le
 8009bcc:	9f05      	ldrle	r7, [sp, #20]
 8009bce:	434f      	mulle	r7, r1
 8009bd0:	9705      	strle	r7, [sp, #20]
 8009bd2:	e7f6      	b.n	8009bc2 <_strtod_l+0x252>
 8009bd4:	2c10      	cmp	r4, #16
 8009bd6:	bfdf      	itttt	le
 8009bd8:	230a      	movle	r3, #10
 8009bda:	9905      	ldrle	r1, [sp, #20]
 8009bdc:	fb03 2301 	mlale	r3, r3, r1, r2
 8009be0:	9305      	strle	r3, [sp, #20]
 8009be2:	e7e0      	b.n	8009ba6 <_strtod_l+0x236>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	2301      	movs	r3, #1
 8009bea:	e77b      	b.n	8009ae4 <_strtod_l+0x174>
 8009bec:	2700      	movs	r7, #0
 8009bee:	1cb2      	adds	r2, r6, #2
 8009bf0:	9219      	str	r2, [sp, #100]	; 0x64
 8009bf2:	78b2      	ldrb	r2, [r6, #2]
 8009bf4:	e784      	b.n	8009b00 <_strtod_l+0x190>
 8009bf6:	bf00      	nop
 8009bf8:	0800d9dc 	.word	0x0800d9dc
 8009bfc:	0800d694 	.word	0x0800d694
 8009c00:	7ff00000 	.word	0x7ff00000
 8009c04:	2701      	movs	r7, #1
 8009c06:	e7f2      	b.n	8009bee <_strtod_l+0x27e>
 8009c08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c0a:	1c51      	adds	r1, r2, #1
 8009c0c:	9119      	str	r1, [sp, #100]	; 0x64
 8009c0e:	7852      	ldrb	r2, [r2, #1]
 8009c10:	2a30      	cmp	r2, #48	; 0x30
 8009c12:	d0f9      	beq.n	8009c08 <_strtod_l+0x298>
 8009c14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009c18:	2908      	cmp	r1, #8
 8009c1a:	f63f af77 	bhi.w	8009b0c <_strtod_l+0x19c>
 8009c1e:	f04f 0e0a 	mov.w	lr, #10
 8009c22:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009c26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c28:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c2c:	1c51      	adds	r1, r2, #1
 8009c2e:	9119      	str	r1, [sp, #100]	; 0x64
 8009c30:	7852      	ldrb	r2, [r2, #1]
 8009c32:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009c36:	2d09      	cmp	r5, #9
 8009c38:	d935      	bls.n	8009ca6 <_strtod_l+0x336>
 8009c3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c3c:	1b49      	subs	r1, r1, r5
 8009c3e:	2908      	cmp	r1, #8
 8009c40:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009c44:	dc02      	bgt.n	8009c4c <_strtod_l+0x2dc>
 8009c46:	4565      	cmp	r5, ip
 8009c48:	bfa8      	it	ge
 8009c4a:	4665      	movge	r5, ip
 8009c4c:	b107      	cbz	r7, 8009c50 <_strtod_l+0x2e0>
 8009c4e:	426d      	negs	r5, r5
 8009c50:	2c00      	cmp	r4, #0
 8009c52:	d14c      	bne.n	8009cee <_strtod_l+0x37e>
 8009c54:	9907      	ldr	r1, [sp, #28]
 8009c56:	4301      	orrs	r1, r0
 8009c58:	f47f aecb 	bne.w	80099f2 <_strtod_l+0x82>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f47f aee4 	bne.w	8009a2a <_strtod_l+0xba>
 8009c62:	2a69      	cmp	r2, #105	; 0x69
 8009c64:	d026      	beq.n	8009cb4 <_strtod_l+0x344>
 8009c66:	dc23      	bgt.n	8009cb0 <_strtod_l+0x340>
 8009c68:	2a49      	cmp	r2, #73	; 0x49
 8009c6a:	d023      	beq.n	8009cb4 <_strtod_l+0x344>
 8009c6c:	2a4e      	cmp	r2, #78	; 0x4e
 8009c6e:	f47f aedc 	bne.w	8009a2a <_strtod_l+0xba>
 8009c72:	499d      	ldr	r1, [pc, #628]	; (8009ee8 <_strtod_l+0x578>)
 8009c74:	a819      	add	r0, sp, #100	; 0x64
 8009c76:	f002 f921 	bl	800bebc <__match>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f43f aed5 	beq.w	8009a2a <_strtod_l+0xba>
 8009c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b28      	cmp	r3, #40	; 0x28
 8009c86:	d12c      	bne.n	8009ce2 <_strtod_l+0x372>
 8009c88:	4998      	ldr	r1, [pc, #608]	; (8009eec <_strtod_l+0x57c>)
 8009c8a:	aa1c      	add	r2, sp, #112	; 0x70
 8009c8c:	a819      	add	r0, sp, #100	; 0x64
 8009c8e:	f002 f929 	bl	800bee4 <__hexnan>
 8009c92:	2805      	cmp	r0, #5
 8009c94:	d125      	bne.n	8009ce2 <_strtod_l+0x372>
 8009c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c98:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009c9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009ca0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009ca4:	e6a5      	b.n	80099f2 <_strtod_l+0x82>
 8009ca6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009caa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009cae:	e7bc      	b.n	8009c2a <_strtod_l+0x2ba>
 8009cb0:	2a6e      	cmp	r2, #110	; 0x6e
 8009cb2:	e7dc      	b.n	8009c6e <_strtod_l+0x2fe>
 8009cb4:	498e      	ldr	r1, [pc, #568]	; (8009ef0 <_strtod_l+0x580>)
 8009cb6:	a819      	add	r0, sp, #100	; 0x64
 8009cb8:	f002 f900 	bl	800bebc <__match>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	f43f aeb4 	beq.w	8009a2a <_strtod_l+0xba>
 8009cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cc4:	498b      	ldr	r1, [pc, #556]	; (8009ef4 <_strtod_l+0x584>)
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	a819      	add	r0, sp, #100	; 0x64
 8009cca:	9319      	str	r3, [sp, #100]	; 0x64
 8009ccc:	f002 f8f6 	bl	800bebc <__match>
 8009cd0:	b910      	cbnz	r0, 8009cd8 <_strtod_l+0x368>
 8009cd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	9319      	str	r3, [sp, #100]	; 0x64
 8009cd8:	f04f 0800 	mov.w	r8, #0
 8009cdc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009ef8 <_strtod_l+0x588>
 8009ce0:	e687      	b.n	80099f2 <_strtod_l+0x82>
 8009ce2:	4886      	ldr	r0, [pc, #536]	; (8009efc <_strtod_l+0x58c>)
 8009ce4:	f003 fa8a 	bl	800d1fc <nan>
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4689      	mov	r9, r1
 8009cec:	e681      	b.n	80099f2 <_strtod_l+0x82>
 8009cee:	9b04      	ldr	r3, [sp, #16]
 8009cf0:	f1bb 0f00 	cmp.w	fp, #0
 8009cf4:	bf08      	it	eq
 8009cf6:	46a3      	moveq	fp, r4
 8009cf8:	1aeb      	subs	r3, r5, r3
 8009cfa:	2c10      	cmp	r4, #16
 8009cfc:	9806      	ldr	r0, [sp, #24]
 8009cfe:	4626      	mov	r6, r4
 8009d00:	9307      	str	r3, [sp, #28]
 8009d02:	bfa8      	it	ge
 8009d04:	2610      	movge	r6, #16
 8009d06:	f7f6 fc9b 	bl	8000640 <__aeabi_ui2d>
 8009d0a:	2c09      	cmp	r4, #9
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4689      	mov	r9, r1
 8009d10:	dd13      	ble.n	8009d3a <_strtod_l+0x3ca>
 8009d12:	4b7b      	ldr	r3, [pc, #492]	; (8009f00 <_strtod_l+0x590>)
 8009d14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d18:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d1c:	f7f6 fd0a 	bl	8000734 <__aeabi_dmul>
 8009d20:	4680      	mov	r8, r0
 8009d22:	9805      	ldr	r0, [sp, #20]
 8009d24:	4689      	mov	r9, r1
 8009d26:	f7f6 fc8b 	bl	8000640 <__aeabi_ui2d>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	f7f6 fb49 	bl	80003c8 <__adddf3>
 8009d36:	4680      	mov	r8, r0
 8009d38:	4689      	mov	r9, r1
 8009d3a:	2c0f      	cmp	r4, #15
 8009d3c:	dc36      	bgt.n	8009dac <_strtod_l+0x43c>
 8009d3e:	9b07      	ldr	r3, [sp, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f43f ae56 	beq.w	80099f2 <_strtod_l+0x82>
 8009d46:	dd22      	ble.n	8009d8e <_strtod_l+0x41e>
 8009d48:	2b16      	cmp	r3, #22
 8009d4a:	dc09      	bgt.n	8009d60 <_strtod_l+0x3f0>
 8009d4c:	496c      	ldr	r1, [pc, #432]	; (8009f00 <_strtod_l+0x590>)
 8009d4e:	4642      	mov	r2, r8
 8009d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d54:	464b      	mov	r3, r9
 8009d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d5a:	f7f6 fceb 	bl	8000734 <__aeabi_dmul>
 8009d5e:	e7c3      	b.n	8009ce8 <_strtod_l+0x378>
 8009d60:	9a07      	ldr	r2, [sp, #28]
 8009d62:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009d66:	4293      	cmp	r3, r2
 8009d68:	db20      	blt.n	8009dac <_strtod_l+0x43c>
 8009d6a:	4d65      	ldr	r5, [pc, #404]	; (8009f00 <_strtod_l+0x590>)
 8009d6c:	f1c4 040f 	rsb	r4, r4, #15
 8009d70:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009d74:	4642      	mov	r2, r8
 8009d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	f7f6 fcda 	bl	8000734 <__aeabi_dmul>
 8009d80:	9b07      	ldr	r3, [sp, #28]
 8009d82:	1b1c      	subs	r4, r3, r4
 8009d84:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d8c:	e7e5      	b.n	8009d5a <_strtod_l+0x3ea>
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	3316      	adds	r3, #22
 8009d92:	db0b      	blt.n	8009dac <_strtod_l+0x43c>
 8009d94:	9b04      	ldr	r3, [sp, #16]
 8009d96:	4640      	mov	r0, r8
 8009d98:	1b5d      	subs	r5, r3, r5
 8009d9a:	4b59      	ldr	r3, [pc, #356]	; (8009f00 <_strtod_l+0x590>)
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009da2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009da6:	f7f6 fdef 	bl	8000988 <__aeabi_ddiv>
 8009daa:	e79d      	b.n	8009ce8 <_strtod_l+0x378>
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	1ba6      	subs	r6, r4, r6
 8009db0:	441e      	add	r6, r3
 8009db2:	2e00      	cmp	r6, #0
 8009db4:	dd74      	ble.n	8009ea0 <_strtod_l+0x530>
 8009db6:	f016 030f 	ands.w	r3, r6, #15
 8009dba:	d00a      	beq.n	8009dd2 <_strtod_l+0x462>
 8009dbc:	4950      	ldr	r1, [pc, #320]	; (8009f00 <_strtod_l+0x590>)
 8009dbe:	4642      	mov	r2, r8
 8009dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc8:	464b      	mov	r3, r9
 8009dca:	f7f6 fcb3 	bl	8000734 <__aeabi_dmul>
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4689      	mov	r9, r1
 8009dd2:	f036 060f 	bics.w	r6, r6, #15
 8009dd6:	d052      	beq.n	8009e7e <_strtod_l+0x50e>
 8009dd8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009ddc:	dd27      	ble.n	8009e2e <_strtod_l+0x4be>
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	f8cd b010 	str.w	fp, [sp, #16]
 8009de6:	f8cd b020 	str.w	fp, [sp, #32]
 8009dea:	f8cd b018 	str.w	fp, [sp, #24]
 8009dee:	2322      	movs	r3, #34	; 0x22
 8009df0:	f04f 0800 	mov.w	r8, #0
 8009df4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009ef8 <_strtod_l+0x588>
 8009df8:	f8ca 3000 	str.w	r3, [sl]
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f43f adf7 	beq.w	80099f2 <_strtod_l+0x82>
 8009e04:	4650      	mov	r0, sl
 8009e06:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e08:	f002 f9dc 	bl	800c1c4 <_Bfree>
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	9906      	ldr	r1, [sp, #24]
 8009e10:	f002 f9d8 	bl	800c1c4 <_Bfree>
 8009e14:	4650      	mov	r0, sl
 8009e16:	9904      	ldr	r1, [sp, #16]
 8009e18:	f002 f9d4 	bl	800c1c4 <_Bfree>
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	9908      	ldr	r1, [sp, #32]
 8009e20:	f002 f9d0 	bl	800c1c4 <_Bfree>
 8009e24:	4659      	mov	r1, fp
 8009e26:	4650      	mov	r0, sl
 8009e28:	f002 f9cc 	bl	800c1c4 <_Bfree>
 8009e2c:	e5e1      	b.n	80099f2 <_strtod_l+0x82>
 8009e2e:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <_strtod_l+0x594>)
 8009e30:	4640      	mov	r0, r8
 8009e32:	9305      	str	r3, [sp, #20]
 8009e34:	2300      	movs	r3, #0
 8009e36:	4649      	mov	r1, r9
 8009e38:	461f      	mov	r7, r3
 8009e3a:	1136      	asrs	r6, r6, #4
 8009e3c:	2e01      	cmp	r6, #1
 8009e3e:	dc21      	bgt.n	8009e84 <_strtod_l+0x514>
 8009e40:	b10b      	cbz	r3, 8009e46 <_strtod_l+0x4d6>
 8009e42:	4680      	mov	r8, r0
 8009e44:	4689      	mov	r9, r1
 8009e46:	4b2f      	ldr	r3, [pc, #188]	; (8009f04 <_strtod_l+0x594>)
 8009e48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009e4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009e50:	4642      	mov	r2, r8
 8009e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e56:	464b      	mov	r3, r9
 8009e58:	f7f6 fc6c 	bl	8000734 <__aeabi_dmul>
 8009e5c:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <_strtod_l+0x588>)
 8009e5e:	460a      	mov	r2, r1
 8009e60:	400b      	ands	r3, r1
 8009e62:	4929      	ldr	r1, [pc, #164]	; (8009f08 <_strtod_l+0x598>)
 8009e64:	4680      	mov	r8, r0
 8009e66:	428b      	cmp	r3, r1
 8009e68:	d8b9      	bhi.n	8009dde <_strtod_l+0x46e>
 8009e6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e6e:	428b      	cmp	r3, r1
 8009e70:	bf86      	itte	hi
 8009e72:	f04f 38ff 	movhi.w	r8, #4294967295
 8009e76:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009f0c <_strtod_l+0x59c>
 8009e7a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009e7e:	2300      	movs	r3, #0
 8009e80:	9305      	str	r3, [sp, #20]
 8009e82:	e07f      	b.n	8009f84 <_strtod_l+0x614>
 8009e84:	07f2      	lsls	r2, r6, #31
 8009e86:	d505      	bpl.n	8009e94 <_strtod_l+0x524>
 8009e88:	9b05      	ldr	r3, [sp, #20]
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 fc51 	bl	8000734 <__aeabi_dmul>
 8009e92:	2301      	movs	r3, #1
 8009e94:	9a05      	ldr	r2, [sp, #20]
 8009e96:	3701      	adds	r7, #1
 8009e98:	3208      	adds	r2, #8
 8009e9a:	1076      	asrs	r6, r6, #1
 8009e9c:	9205      	str	r2, [sp, #20]
 8009e9e:	e7cd      	b.n	8009e3c <_strtod_l+0x4cc>
 8009ea0:	d0ed      	beq.n	8009e7e <_strtod_l+0x50e>
 8009ea2:	4276      	negs	r6, r6
 8009ea4:	f016 020f 	ands.w	r2, r6, #15
 8009ea8:	d00a      	beq.n	8009ec0 <_strtod_l+0x550>
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <_strtod_l+0x590>)
 8009eac:	4640      	mov	r0, r8
 8009eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fd66 	bl	8000988 <__aeabi_ddiv>
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	4689      	mov	r9, r1
 8009ec0:	1136      	asrs	r6, r6, #4
 8009ec2:	d0dc      	beq.n	8009e7e <_strtod_l+0x50e>
 8009ec4:	2e1f      	cmp	r6, #31
 8009ec6:	dd23      	ble.n	8009f10 <_strtod_l+0x5a0>
 8009ec8:	f04f 0b00 	mov.w	fp, #0
 8009ecc:	f8cd b010 	str.w	fp, [sp, #16]
 8009ed0:	f8cd b020 	str.w	fp, [sp, #32]
 8009ed4:	f8cd b018 	str.w	fp, [sp, #24]
 8009ed8:	2322      	movs	r3, #34	; 0x22
 8009eda:	f04f 0800 	mov.w	r8, #0
 8009ede:	f04f 0900 	mov.w	r9, #0
 8009ee2:	f8ca 3000 	str.w	r3, [sl]
 8009ee6:	e789      	b.n	8009dfc <_strtod_l+0x48c>
 8009ee8:	0800d665 	.word	0x0800d665
 8009eec:	0800d6a8 	.word	0x0800d6a8
 8009ef0:	0800d65d 	.word	0x0800d65d
 8009ef4:	0800d89c 	.word	0x0800d89c
 8009ef8:	7ff00000 	.word	0x7ff00000
 8009efc:	0800d797 	.word	0x0800d797
 8009f00:	0800da78 	.word	0x0800da78
 8009f04:	0800da50 	.word	0x0800da50
 8009f08:	7ca00000 	.word	0x7ca00000
 8009f0c:	7fefffff 	.word	0x7fefffff
 8009f10:	f016 0310 	ands.w	r3, r6, #16
 8009f14:	bf18      	it	ne
 8009f16:	236a      	movne	r3, #106	; 0x6a
 8009f18:	4640      	mov	r0, r8
 8009f1a:	9305      	str	r3, [sp, #20]
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4fb0      	ldr	r7, [pc, #704]	; (800a1e4 <_strtod_l+0x874>)
 8009f22:	07f2      	lsls	r2, r6, #31
 8009f24:	d504      	bpl.n	8009f30 <_strtod_l+0x5c0>
 8009f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2a:	f7f6 fc03 	bl	8000734 <__aeabi_dmul>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	1076      	asrs	r6, r6, #1
 8009f32:	f107 0708 	add.w	r7, r7, #8
 8009f36:	d1f4      	bne.n	8009f22 <_strtod_l+0x5b2>
 8009f38:	b10b      	cbz	r3, 8009f3e <_strtod_l+0x5ce>
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	9b05      	ldr	r3, [sp, #20]
 8009f40:	b1c3      	cbz	r3, 8009f74 <_strtod_l+0x604>
 8009f42:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009f46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	dd11      	ble.n	8009f74 <_strtod_l+0x604>
 8009f50:	2b1f      	cmp	r3, #31
 8009f52:	f340 8127 	ble.w	800a1a4 <_strtod_l+0x834>
 8009f56:	2b34      	cmp	r3, #52	; 0x34
 8009f58:	bfd8      	it	le
 8009f5a:	f04f 33ff 	movle.w	r3, #4294967295
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	bfcf      	iteee	gt
 8009f64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009f68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f6c:	fa03 f202 	lslle.w	r2, r3, r2
 8009f70:	ea02 0901 	andle.w	r9, r2, r1
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	4640      	mov	r0, r8
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	f7f6 fe42 	bl	8000c04 <__aeabi_dcmpeq>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1a1      	bne.n	8009ec8 <_strtod_l+0x558>
 8009f84:	9b06      	ldr	r3, [sp, #24]
 8009f86:	465a      	mov	r2, fp
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4623      	mov	r3, r4
 8009f8e:	9908      	ldr	r1, [sp, #32]
 8009f90:	f002 f980 	bl	800c294 <__s2b>
 8009f94:	9008      	str	r0, [sp, #32]
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f af21 	beq.w	8009dde <_strtod_l+0x46e>
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	f04f 0b00 	mov.w	fp, #0
 8009fa2:	1b5d      	subs	r5, r3, r5
 8009fa4:	9b07      	ldr	r3, [sp, #28]
 8009fa6:	f8cd b010 	str.w	fp, [sp, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfb4      	ite	lt
 8009fae:	462b      	movlt	r3, r5
 8009fb0:	2300      	movge	r3, #0
 8009fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fba:	9314      	str	r3, [sp, #80]	; 0x50
 8009fbc:	9b08      	ldr	r3, [sp, #32]
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	6859      	ldr	r1, [r3, #4]
 8009fc2:	f002 f8bf 	bl	800c144 <_Balloc>
 8009fc6:	9006      	str	r0, [sp, #24]
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f43f af10 	beq.w	8009dee <_strtod_l+0x47e>
 8009fce:	9b08      	ldr	r3, [sp, #32]
 8009fd0:	300c      	adds	r0, #12
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	f103 010c 	add.w	r1, r3, #12
 8009fd8:	3202      	adds	r2, #2
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	f7fe fde4 	bl	8008ba8 <memcpy>
 8009fe0:	ab1c      	add	r3, sp, #112	; 0x70
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	ab1b      	add	r3, sp, #108	; 0x6c
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	4650      	mov	r0, sl
 8009fee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009ff2:	f002 fc91 	bl	800c918 <__d2b>
 8009ff6:	901a      	str	r0, [sp, #104]	; 0x68
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	f43f aef8 	beq.w	8009dee <_strtod_l+0x47e>
 8009ffe:	2101      	movs	r1, #1
 800a000:	4650      	mov	r0, sl
 800a002:	f002 f9df 	bl	800c3c4 <__i2b>
 800a006:	4603      	mov	r3, r0
 800a008:	9004      	str	r0, [sp, #16]
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f43f aeef 	beq.w	8009dee <_strtod_l+0x47e>
 800a010:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a012:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a014:	2d00      	cmp	r5, #0
 800a016:	bfab      	itete	ge
 800a018:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a01a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a01c:	18ee      	addge	r6, r5, r3
 800a01e:	1b5c      	sublt	r4, r3, r5
 800a020:	9b05      	ldr	r3, [sp, #20]
 800a022:	bfa8      	it	ge
 800a024:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a026:	eba5 0503 	sub.w	r5, r5, r3
 800a02a:	4415      	add	r5, r2
 800a02c:	4b6e      	ldr	r3, [pc, #440]	; (800a1e8 <_strtod_l+0x878>)
 800a02e:	f105 35ff 	add.w	r5, r5, #4294967295
 800a032:	bfb8      	it	lt
 800a034:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a036:	429d      	cmp	r5, r3
 800a038:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a03c:	f280 80c4 	bge.w	800a1c8 <_strtod_l+0x858>
 800a040:	1b5b      	subs	r3, r3, r5
 800a042:	2b1f      	cmp	r3, #31
 800a044:	f04f 0701 	mov.w	r7, #1
 800a048:	eba2 0203 	sub.w	r2, r2, r3
 800a04c:	f300 80b1 	bgt.w	800a1b2 <_strtod_l+0x842>
 800a050:	2500      	movs	r5, #0
 800a052:	fa07 f303 	lsl.w	r3, r7, r3
 800a056:	930f      	str	r3, [sp, #60]	; 0x3c
 800a058:	18b7      	adds	r7, r6, r2
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	42be      	cmp	r6, r7
 800a05e:	4414      	add	r4, r2
 800a060:	441c      	add	r4, r3
 800a062:	4633      	mov	r3, r6
 800a064:	bfa8      	it	ge
 800a066:	463b      	movge	r3, r7
 800a068:	42a3      	cmp	r3, r4
 800a06a:	bfa8      	it	ge
 800a06c:	4623      	movge	r3, r4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfc2      	ittt	gt
 800a072:	1aff      	subgt	r7, r7, r3
 800a074:	1ae4      	subgt	r4, r4, r3
 800a076:	1af6      	subgt	r6, r6, r3
 800a078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dd17      	ble.n	800a0ae <_strtod_l+0x73e>
 800a07e:	461a      	mov	r2, r3
 800a080:	4650      	mov	r0, sl
 800a082:	9904      	ldr	r1, [sp, #16]
 800a084:	f002 fa5c 	bl	800c540 <__pow5mult>
 800a088:	9004      	str	r0, [sp, #16]
 800a08a:	2800      	cmp	r0, #0
 800a08c:	f43f aeaf 	beq.w	8009dee <_strtod_l+0x47e>
 800a090:	4601      	mov	r1, r0
 800a092:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a094:	4650      	mov	r0, sl
 800a096:	f002 f9ab 	bl	800c3f0 <__multiply>
 800a09a:	9009      	str	r0, [sp, #36]	; 0x24
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f43f aea6 	beq.w	8009dee <_strtod_l+0x47e>
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0a6:	f002 f88d 	bl	800c1c4 <_Bfree>
 800a0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ae:	2f00      	cmp	r7, #0
 800a0b0:	f300 808e 	bgt.w	800a1d0 <_strtod_l+0x860>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dd08      	ble.n	800a0cc <_strtod_l+0x75c>
 800a0ba:	4650      	mov	r0, sl
 800a0bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0be:	9906      	ldr	r1, [sp, #24]
 800a0c0:	f002 fa3e 	bl	800c540 <__pow5mult>
 800a0c4:	9006      	str	r0, [sp, #24]
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f43f ae91 	beq.w	8009dee <_strtod_l+0x47e>
 800a0cc:	2c00      	cmp	r4, #0
 800a0ce:	dd08      	ble.n	800a0e2 <_strtod_l+0x772>
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	9906      	ldr	r1, [sp, #24]
 800a0d6:	f002 fa8d 	bl	800c5f4 <__lshift>
 800a0da:	9006      	str	r0, [sp, #24]
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f43f ae86 	beq.w	8009dee <_strtod_l+0x47e>
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	dd08      	ble.n	800a0f8 <_strtod_l+0x788>
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	9904      	ldr	r1, [sp, #16]
 800a0ec:	f002 fa82 	bl	800c5f4 <__lshift>
 800a0f0:	9004      	str	r0, [sp, #16]
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	f43f ae7b 	beq.w	8009dee <_strtod_l+0x47e>
 800a0f8:	4650      	mov	r0, sl
 800a0fa:	9a06      	ldr	r2, [sp, #24]
 800a0fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0fe:	f002 fb05 	bl	800c70c <__mdiff>
 800a102:	4683      	mov	fp, r0
 800a104:	2800      	cmp	r0, #0
 800a106:	f43f ae72 	beq.w	8009dee <_strtod_l+0x47e>
 800a10a:	2400      	movs	r4, #0
 800a10c:	68c3      	ldr	r3, [r0, #12]
 800a10e:	9904      	ldr	r1, [sp, #16]
 800a110:	60c4      	str	r4, [r0, #12]
 800a112:	930b      	str	r3, [sp, #44]	; 0x2c
 800a114:	f002 fade 	bl	800c6d4 <__mcmp>
 800a118:	42a0      	cmp	r0, r4
 800a11a:	da6b      	bge.n	800a1f4 <_strtod_l+0x884>
 800a11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a11e:	ea53 0308 	orrs.w	r3, r3, r8
 800a122:	f040 8091 	bne.w	800a248 <_strtod_l+0x8d8>
 800a126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f040 808c 	bne.w	800a248 <_strtod_l+0x8d8>
 800a130:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a134:	0d1b      	lsrs	r3, r3, #20
 800a136:	051b      	lsls	r3, r3, #20
 800a138:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a13c:	f240 8084 	bls.w	800a248 <_strtod_l+0x8d8>
 800a140:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a144:	b91b      	cbnz	r3, 800a14e <_strtod_l+0x7de>
 800a146:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	dd7c      	ble.n	800a248 <_strtod_l+0x8d8>
 800a14e:	4659      	mov	r1, fp
 800a150:	2201      	movs	r2, #1
 800a152:	4650      	mov	r0, sl
 800a154:	f002 fa4e 	bl	800c5f4 <__lshift>
 800a158:	9904      	ldr	r1, [sp, #16]
 800a15a:	4683      	mov	fp, r0
 800a15c:	f002 faba 	bl	800c6d4 <__mcmp>
 800a160:	2800      	cmp	r0, #0
 800a162:	dd71      	ble.n	800a248 <_strtod_l+0x8d8>
 800a164:	9905      	ldr	r1, [sp, #20]
 800a166:	464b      	mov	r3, r9
 800a168:	4a20      	ldr	r2, [pc, #128]	; (800a1ec <_strtod_l+0x87c>)
 800a16a:	2900      	cmp	r1, #0
 800a16c:	f000 808c 	beq.w	800a288 <_strtod_l+0x918>
 800a170:	ea02 0109 	and.w	r1, r2, r9
 800a174:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a178:	f300 8086 	bgt.w	800a288 <_strtod_l+0x918>
 800a17c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a180:	f77f aeaa 	ble.w	8009ed8 <_strtod_l+0x568>
 800a184:	4640      	mov	r0, r8
 800a186:	4649      	mov	r1, r9
 800a188:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <_strtod_l+0x880>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	f7f6 fad2 	bl	8000734 <__aeabi_dmul>
 800a190:	460b      	mov	r3, r1
 800a192:	4303      	orrs	r3, r0
 800a194:	bf08      	it	eq
 800a196:	2322      	moveq	r3, #34	; 0x22
 800a198:	4680      	mov	r8, r0
 800a19a:	4689      	mov	r9, r1
 800a19c:	bf08      	it	eq
 800a19e:	f8ca 3000 	streq.w	r3, [sl]
 800a1a2:	e62f      	b.n	8009e04 <_strtod_l+0x494>
 800a1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	ea03 0808 	and.w	r8, r3, r8
 800a1b0:	e6e0      	b.n	8009f74 <_strtod_l+0x604>
 800a1b2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a1b6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a1ba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a1be:	35e2      	adds	r5, #226	; 0xe2
 800a1c0:	fa07 f505 	lsl.w	r5, r7, r5
 800a1c4:	970f      	str	r7, [sp, #60]	; 0x3c
 800a1c6:	e747      	b.n	800a058 <_strtod_l+0x6e8>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ce:	e743      	b.n	800a058 <_strtod_l+0x6e8>
 800a1d0:	463a      	mov	r2, r7
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1d6:	f002 fa0d 	bl	800c5f4 <__lshift>
 800a1da:	901a      	str	r0, [sp, #104]	; 0x68
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f47f af69 	bne.w	800a0b4 <_strtod_l+0x744>
 800a1e2:	e604      	b.n	8009dee <_strtod_l+0x47e>
 800a1e4:	0800d6c0 	.word	0x0800d6c0
 800a1e8:	fffffc02 	.word	0xfffffc02
 800a1ec:	7ff00000 	.word	0x7ff00000
 800a1f0:	39500000 	.word	0x39500000
 800a1f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1f8:	d165      	bne.n	800a2c6 <_strtod_l+0x956>
 800a1fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a200:	b35a      	cbz	r2, 800a25a <_strtod_l+0x8ea>
 800a202:	4a99      	ldr	r2, [pc, #612]	; (800a468 <_strtod_l+0xaf8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d12b      	bne.n	800a260 <_strtod_l+0x8f0>
 800a208:	9b05      	ldr	r3, [sp, #20]
 800a20a:	4641      	mov	r1, r8
 800a20c:	b303      	cbz	r3, 800a250 <_strtod_l+0x8e0>
 800a20e:	464a      	mov	r2, r9
 800a210:	4b96      	ldr	r3, [pc, #600]	; (800a46c <_strtod_l+0xafc>)
 800a212:	4013      	ands	r3, r2
 800a214:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a218:	f04f 32ff 	mov.w	r2, #4294967295
 800a21c:	d81b      	bhi.n	800a256 <_strtod_l+0x8e6>
 800a21e:	0d1b      	lsrs	r3, r3, #20
 800a220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a224:	fa02 f303 	lsl.w	r3, r2, r3
 800a228:	4299      	cmp	r1, r3
 800a22a:	d119      	bne.n	800a260 <_strtod_l+0x8f0>
 800a22c:	4b90      	ldr	r3, [pc, #576]	; (800a470 <_strtod_l+0xb00>)
 800a22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a230:	429a      	cmp	r2, r3
 800a232:	d102      	bne.n	800a23a <_strtod_l+0x8ca>
 800a234:	3101      	adds	r1, #1
 800a236:	f43f adda 	beq.w	8009dee <_strtod_l+0x47e>
 800a23a:	f04f 0800 	mov.w	r8, #0
 800a23e:	4b8b      	ldr	r3, [pc, #556]	; (800a46c <_strtod_l+0xafc>)
 800a240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a242:	401a      	ands	r2, r3
 800a244:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a248:	9b05      	ldr	r3, [sp, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d19a      	bne.n	800a184 <_strtod_l+0x814>
 800a24e:	e5d9      	b.n	8009e04 <_strtod_l+0x494>
 800a250:	f04f 33ff 	mov.w	r3, #4294967295
 800a254:	e7e8      	b.n	800a228 <_strtod_l+0x8b8>
 800a256:	4613      	mov	r3, r2
 800a258:	e7e6      	b.n	800a228 <_strtod_l+0x8b8>
 800a25a:	ea53 0308 	orrs.w	r3, r3, r8
 800a25e:	d081      	beq.n	800a164 <_strtod_l+0x7f4>
 800a260:	b1e5      	cbz	r5, 800a29c <_strtod_l+0x92c>
 800a262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a264:	421d      	tst	r5, r3
 800a266:	d0ef      	beq.n	800a248 <_strtod_l+0x8d8>
 800a268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a26a:	4640      	mov	r0, r8
 800a26c:	4649      	mov	r1, r9
 800a26e:	9a05      	ldr	r2, [sp, #20]
 800a270:	b1c3      	cbz	r3, 800a2a4 <_strtod_l+0x934>
 800a272:	f7ff fb59 	bl	8009928 <sulp>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a27e:	f7f6 f8a3 	bl	80003c8 <__adddf3>
 800a282:	4680      	mov	r8, r0
 800a284:	4689      	mov	r9, r1
 800a286:	e7df      	b.n	800a248 <_strtod_l+0x8d8>
 800a288:	4013      	ands	r3, r2
 800a28a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a28e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a292:	f04f 38ff 	mov.w	r8, #4294967295
 800a296:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a29a:	e7d5      	b.n	800a248 <_strtod_l+0x8d8>
 800a29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a29e:	ea13 0f08 	tst.w	r3, r8
 800a2a2:	e7e0      	b.n	800a266 <_strtod_l+0x8f6>
 800a2a4:	f7ff fb40 	bl	8009928 <sulp>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2b0:	f7f6 f888 	bl	80003c4 <__aeabi_dsub>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4689      	mov	r9, r1
 800a2bc:	f7f6 fca2 	bl	8000c04 <__aeabi_dcmpeq>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d0c1      	beq.n	800a248 <_strtod_l+0x8d8>
 800a2c4:	e608      	b.n	8009ed8 <_strtod_l+0x568>
 800a2c6:	4658      	mov	r0, fp
 800a2c8:	9904      	ldr	r1, [sp, #16]
 800a2ca:	f002 fb81 	bl	800c9d0 <__ratio>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	460f      	mov	r7, r1
 800a2d8:	f7f6 fca8 	bl	8000c2c <__aeabi_dcmple>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d070      	beq.n	800a3c2 <_strtod_l+0xa52>
 800a2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d042      	beq.n	800a36c <_strtod_l+0x9fc>
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	4f62      	ldr	r7, [pc, #392]	; (800a474 <_strtod_l+0xb04>)
 800a2ea:	4d62      	ldr	r5, [pc, #392]	; (800a474 <_strtod_l+0xb04>)
 800a2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2f2:	0d1b      	lsrs	r3, r3, #20
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2fa:	4b5f      	ldr	r3, [pc, #380]	; (800a478 <_strtod_l+0xb08>)
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	f040 80c3 	bne.w	800a488 <_strtod_l+0xb18>
 800a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a304:	4640      	mov	r0, r8
 800a306:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a30a:	4649      	mov	r1, r9
 800a30c:	f002 fa8a 	bl	800c824 <__ulp>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4630      	mov	r0, r6
 800a316:	4639      	mov	r1, r7
 800a318:	f7f6 fa0c 	bl	8000734 <__aeabi_dmul>
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	f7f6 f852 	bl	80003c8 <__adddf3>
 800a324:	460b      	mov	r3, r1
 800a326:	4951      	ldr	r1, [pc, #324]	; (800a46c <_strtod_l+0xafc>)
 800a328:	4a54      	ldr	r2, [pc, #336]	; (800a47c <_strtod_l+0xb0c>)
 800a32a:	4019      	ands	r1, r3
 800a32c:	4291      	cmp	r1, r2
 800a32e:	4680      	mov	r8, r0
 800a330:	d95d      	bls.n	800a3ee <_strtod_l+0xa7e>
 800a332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a334:	4b4e      	ldr	r3, [pc, #312]	; (800a470 <_strtod_l+0xb00>)
 800a336:	429a      	cmp	r2, r3
 800a338:	d103      	bne.n	800a342 <_strtod_l+0x9d2>
 800a33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a33c:	3301      	adds	r3, #1
 800a33e:	f43f ad56 	beq.w	8009dee <_strtod_l+0x47e>
 800a342:	f04f 38ff 	mov.w	r8, #4294967295
 800a346:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a470 <_strtod_l+0xb00>
 800a34a:	4650      	mov	r0, sl
 800a34c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a34e:	f001 ff39 	bl	800c1c4 <_Bfree>
 800a352:	4650      	mov	r0, sl
 800a354:	9906      	ldr	r1, [sp, #24]
 800a356:	f001 ff35 	bl	800c1c4 <_Bfree>
 800a35a:	4650      	mov	r0, sl
 800a35c:	9904      	ldr	r1, [sp, #16]
 800a35e:	f001 ff31 	bl	800c1c4 <_Bfree>
 800a362:	4659      	mov	r1, fp
 800a364:	4650      	mov	r0, sl
 800a366:	f001 ff2d 	bl	800c1c4 <_Bfree>
 800a36a:	e627      	b.n	8009fbc <_strtod_l+0x64c>
 800a36c:	f1b8 0f00 	cmp.w	r8, #0
 800a370:	d119      	bne.n	800a3a6 <_strtod_l+0xa36>
 800a372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a378:	b9e3      	cbnz	r3, 800a3b4 <_strtod_l+0xa44>
 800a37a:	2200      	movs	r2, #0
 800a37c:	4630      	mov	r0, r6
 800a37e:	4639      	mov	r1, r7
 800a380:	4b3c      	ldr	r3, [pc, #240]	; (800a474 <_strtod_l+0xb04>)
 800a382:	f7f6 fc49 	bl	8000c18 <__aeabi_dcmplt>
 800a386:	b9c8      	cbnz	r0, 800a3bc <_strtod_l+0xa4c>
 800a388:	2200      	movs	r2, #0
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	4b3c      	ldr	r3, [pc, #240]	; (800a480 <_strtod_l+0xb10>)
 800a390:	f7f6 f9d0 	bl	8000734 <__aeabi_dmul>
 800a394:	4604      	mov	r4, r0
 800a396:	460d      	mov	r5, r1
 800a398:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a39c:	9416      	str	r4, [sp, #88]	; 0x58
 800a39e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3a0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a3a4:	e7a2      	b.n	800a2ec <_strtod_l+0x97c>
 800a3a6:	f1b8 0f01 	cmp.w	r8, #1
 800a3aa:	d103      	bne.n	800a3b4 <_strtod_l+0xa44>
 800a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f43f ad92 	beq.w	8009ed8 <_strtod_l+0x568>
 800a3b4:	2600      	movs	r6, #0
 800a3b6:	2400      	movs	r4, #0
 800a3b8:	4f32      	ldr	r7, [pc, #200]	; (800a484 <_strtod_l+0xb14>)
 800a3ba:	e796      	b.n	800a2ea <_strtod_l+0x97a>
 800a3bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a3be:	4d30      	ldr	r5, [pc, #192]	; (800a480 <_strtod_l+0xb10>)
 800a3c0:	e7ea      	b.n	800a398 <_strtod_l+0xa28>
 800a3c2:	4b2f      	ldr	r3, [pc, #188]	; (800a480 <_strtod_l+0xb10>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f6 f9b3 	bl	8000734 <__aeabi_dmul>
 800a3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	b933      	cbnz	r3, 800a3e4 <_strtod_l+0xa74>
 800a3d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3da:	9010      	str	r0, [sp, #64]	; 0x40
 800a3dc:	9311      	str	r3, [sp, #68]	; 0x44
 800a3de:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a3e2:	e783      	b.n	800a2ec <_strtod_l+0x97c>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a3ec:	e7f7      	b.n	800a3de <_strtod_l+0xa6e>
 800a3ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a3f2:	9b05      	ldr	r3, [sp, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1a8      	bne.n	800a34a <_strtod_l+0x9da>
 800a3f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3fe:	0d1b      	lsrs	r3, r3, #20
 800a400:	051b      	lsls	r3, r3, #20
 800a402:	429a      	cmp	r2, r3
 800a404:	d1a1      	bne.n	800a34a <_strtod_l+0x9da>
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f6 fe85 	bl	8001118 <__aeabi_d2lz>
 800a40e:	f7f6 f963 	bl	80006d8 <__aeabi_l2d>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f5 ffd3 	bl	80003c4 <__aeabi_dsub>
 800a41e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a424:	ea43 0308 	orr.w	r3, r3, r8
 800a428:	4313      	orrs	r3, r2
 800a42a:	4604      	mov	r4, r0
 800a42c:	460d      	mov	r5, r1
 800a42e:	d066      	beq.n	800a4fe <_strtod_l+0xb8e>
 800a430:	a309      	add	r3, pc, #36	; (adr r3, 800a458 <_strtod_l+0xae8>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f6 fbef 	bl	8000c18 <__aeabi_dcmplt>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f47f ace2 	bne.w	8009e04 <_strtod_l+0x494>
 800a440:	a307      	add	r3, pc, #28	; (adr r3, 800a460 <_strtod_l+0xaf0>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	4620      	mov	r0, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	f7f6 fc03 	bl	8000c54 <__aeabi_dcmpgt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f af7b 	beq.w	800a34a <_strtod_l+0x9da>
 800a454:	e4d6      	b.n	8009e04 <_strtod_l+0x494>
 800a456:	bf00      	nop
 800a458:	94a03595 	.word	0x94a03595
 800a45c:	3fdfffff 	.word	0x3fdfffff
 800a460:	35afe535 	.word	0x35afe535
 800a464:	3fe00000 	.word	0x3fe00000
 800a468:	000fffff 	.word	0x000fffff
 800a46c:	7ff00000 	.word	0x7ff00000
 800a470:	7fefffff 	.word	0x7fefffff
 800a474:	3ff00000 	.word	0x3ff00000
 800a478:	7fe00000 	.word	0x7fe00000
 800a47c:	7c9fffff 	.word	0x7c9fffff
 800a480:	3fe00000 	.word	0x3fe00000
 800a484:	bff00000 	.word	0xbff00000
 800a488:	9b05      	ldr	r3, [sp, #20]
 800a48a:	b313      	cbz	r3, 800a4d2 <_strtod_l+0xb62>
 800a48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a48e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a492:	d81e      	bhi.n	800a4d2 <_strtod_l+0xb62>
 800a494:	a326      	add	r3, pc, #152	; (adr r3, 800a530 <_strtod_l+0xbc0>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f6 fbc5 	bl	8000c2c <__aeabi_dcmple>
 800a4a2:	b190      	cbz	r0, 800a4ca <_strtod_l+0xb5a>
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7f6 fc1c 	bl	8000ce4 <__aeabi_d2uiz>
 800a4ac:	2801      	cmp	r0, #1
 800a4ae:	bf38      	it	cc
 800a4b0:	2001      	movcc	r0, #1
 800a4b2:	f7f6 f8c5 	bl	8000640 <__aeabi_ui2d>
 800a4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	b9d3      	cbnz	r3, 800a4f4 <_strtod_l+0xb84>
 800a4be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4c2:	9012      	str	r0, [sp, #72]	; 0x48
 800a4c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4c6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a4ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4cc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a4d0:	1a9f      	subs	r7, r3, r2
 800a4d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4d6:	f002 f9a5 	bl	800c824 <__ulp>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	f7f6 f927 	bl	8000734 <__aeabi_dmul>
 800a4e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4ea:	f7f5 ff6d 	bl	80003c8 <__adddf3>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	e77e      	b.n	800a3f2 <_strtod_l+0xa82>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a4fc:	e7e3      	b.n	800a4c6 <_strtod_l+0xb56>
 800a4fe:	a30e      	add	r3, pc, #56	; (adr r3, 800a538 <_strtod_l+0xbc8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f6 fb88 	bl	8000c18 <__aeabi_dcmplt>
 800a508:	e7a1      	b.n	800a44e <_strtod_l+0xade>
 800a50a:	2300      	movs	r3, #0
 800a50c:	930a      	str	r3, [sp, #40]	; 0x28
 800a50e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a510:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	f7ff ba71 	b.w	80099fa <_strtod_l+0x8a>
 800a518:	2a65      	cmp	r2, #101	; 0x65
 800a51a:	f43f ab63 	beq.w	8009be4 <_strtod_l+0x274>
 800a51e:	2a45      	cmp	r2, #69	; 0x45
 800a520:	f43f ab60 	beq.w	8009be4 <_strtod_l+0x274>
 800a524:	2301      	movs	r3, #1
 800a526:	f7ff bb95 	b.w	8009c54 <_strtod_l+0x2e4>
 800a52a:	bf00      	nop
 800a52c:	f3af 8000 	nop.w
 800a530:	ffc00000 	.word	0xffc00000
 800a534:	41dfffff 	.word	0x41dfffff
 800a538:	94a03595 	.word	0x94a03595
 800a53c:	3fcfffff 	.word	0x3fcfffff

0800a540 <_strtod_r>:
 800a540:	4b01      	ldr	r3, [pc, #4]	; (800a548 <_strtod_r+0x8>)
 800a542:	f7ff ba15 	b.w	8009970 <_strtod_l>
 800a546:	bf00      	nop
 800a548:	20000654 	.word	0x20000654

0800a54c <strtok>:
 800a54c:	4b16      	ldr	r3, [pc, #88]	; (800a5a8 <strtok+0x5c>)
 800a54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	681f      	ldr	r7, [r3, #0]
 800a554:	4605      	mov	r5, r0
 800a556:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a558:	460e      	mov	r6, r1
 800a55a:	b9ec      	cbnz	r4, 800a598 <strtok+0x4c>
 800a55c:	2050      	movs	r0, #80	; 0x50
 800a55e:	f001 fdc9 	bl	800c0f4 <malloc>
 800a562:	4602      	mov	r2, r0
 800a564:	65b8      	str	r0, [r7, #88]	; 0x58
 800a566:	b920      	cbnz	r0, 800a572 <strtok+0x26>
 800a568:	2157      	movs	r1, #87	; 0x57
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <strtok+0x60>)
 800a56c:	4810      	ldr	r0, [pc, #64]	; (800a5b0 <strtok+0x64>)
 800a56e:	f000 f991 	bl	800a894 <__assert_func>
 800a572:	e9c0 4400 	strd	r4, r4, [r0]
 800a576:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a57a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a57e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a582:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a586:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a58a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a58e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a592:	6184      	str	r4, [r0, #24]
 800a594:	7704      	strb	r4, [r0, #28]
 800a596:	6244      	str	r4, [r0, #36]	; 0x24
 800a598:	4631      	mov	r1, r6
 800a59a:	4628      	mov	r0, r5
 800a59c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	f000 b806 	b.w	800a5b4 <__strtok_r>
 800a5a8:	200005ec 	.word	0x200005ec
 800a5ac:	0800d6e8 	.word	0x0800d6e8
 800a5b0:	0800d6ff 	.word	0x0800d6ff

0800a5b4 <__strtok_r>:
 800a5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b6:	b908      	cbnz	r0, 800a5bc <__strtok_r+0x8>
 800a5b8:	6810      	ldr	r0, [r2, #0]
 800a5ba:	b188      	cbz	r0, 800a5e0 <__strtok_r+0x2c>
 800a5bc:	4604      	mov	r4, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a5c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a5ca:	b91e      	cbnz	r6, 800a5d4 <__strtok_r+0x20>
 800a5cc:	b965      	cbnz	r5, 800a5e8 <__strtok_r+0x34>
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	6015      	str	r5, [r2, #0]
 800a5d2:	e005      	b.n	800a5e0 <__strtok_r+0x2c>
 800a5d4:	42b5      	cmp	r5, r6
 800a5d6:	d1f6      	bne.n	800a5c6 <__strtok_r+0x12>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1f0      	bne.n	800a5be <__strtok_r+0xa>
 800a5dc:	6014      	str	r4, [r2, #0]
 800a5de:	7003      	strb	r3, [r0, #0]
 800a5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5e2:	461c      	mov	r4, r3
 800a5e4:	e00c      	b.n	800a600 <__strtok_r+0x4c>
 800a5e6:	b915      	cbnz	r5, 800a5ee <__strtok_r+0x3a>
 800a5e8:	460e      	mov	r6, r1
 800a5ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a5f2:	42ab      	cmp	r3, r5
 800a5f4:	d1f7      	bne.n	800a5e6 <__strtok_r+0x32>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0f3      	beq.n	800a5e2 <__strtok_r+0x2e>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a600:	6014      	str	r4, [r2, #0]
 800a602:	e7ed      	b.n	800a5e0 <__strtok_r+0x2c>

0800a604 <_strtol_l.constprop.0>:
 800a604:	2b01      	cmp	r3, #1
 800a606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60a:	4680      	mov	r8, r0
 800a60c:	d001      	beq.n	800a612 <_strtol_l.constprop.0+0xe>
 800a60e:	2b24      	cmp	r3, #36	; 0x24
 800a610:	d906      	bls.n	800a620 <_strtol_l.constprop.0+0x1c>
 800a612:	f7fe fa9f 	bl	8008b54 <__errno>
 800a616:	2316      	movs	r3, #22
 800a618:	6003      	str	r3, [r0, #0]
 800a61a:	2000      	movs	r0, #0
 800a61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a620:	460d      	mov	r5, r1
 800a622:	4f35      	ldr	r7, [pc, #212]	; (800a6f8 <_strtol_l.constprop.0+0xf4>)
 800a624:	4628      	mov	r0, r5
 800a626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a62a:	5de6      	ldrb	r6, [r4, r7]
 800a62c:	f016 0608 	ands.w	r6, r6, #8
 800a630:	d1f8      	bne.n	800a624 <_strtol_l.constprop.0+0x20>
 800a632:	2c2d      	cmp	r4, #45	; 0x2d
 800a634:	d12f      	bne.n	800a696 <_strtol_l.constprop.0+0x92>
 800a636:	2601      	movs	r6, #1
 800a638:	782c      	ldrb	r4, [r5, #0]
 800a63a:	1c85      	adds	r5, r0, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d057      	beq.n	800a6f0 <_strtol_l.constprop.0+0xec>
 800a640:	2b10      	cmp	r3, #16
 800a642:	d109      	bne.n	800a658 <_strtol_l.constprop.0+0x54>
 800a644:	2c30      	cmp	r4, #48	; 0x30
 800a646:	d107      	bne.n	800a658 <_strtol_l.constprop.0+0x54>
 800a648:	7828      	ldrb	r0, [r5, #0]
 800a64a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a64e:	2858      	cmp	r0, #88	; 0x58
 800a650:	d149      	bne.n	800a6e6 <_strtol_l.constprop.0+0xe2>
 800a652:	2310      	movs	r3, #16
 800a654:	786c      	ldrb	r4, [r5, #1]
 800a656:	3502      	adds	r5, #2
 800a658:	2700      	movs	r7, #0
 800a65a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a65e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a662:	fbbe f9f3 	udiv	r9, lr, r3
 800a666:	4638      	mov	r0, r7
 800a668:	fb03 ea19 	mls	sl, r3, r9, lr
 800a66c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a670:	f1bc 0f09 	cmp.w	ip, #9
 800a674:	d814      	bhi.n	800a6a0 <_strtol_l.constprop.0+0x9c>
 800a676:	4664      	mov	r4, ip
 800a678:	42a3      	cmp	r3, r4
 800a67a:	dd22      	ble.n	800a6c2 <_strtol_l.constprop.0+0xbe>
 800a67c:	2f00      	cmp	r7, #0
 800a67e:	db1d      	blt.n	800a6bc <_strtol_l.constprop.0+0xb8>
 800a680:	4581      	cmp	r9, r0
 800a682:	d31b      	bcc.n	800a6bc <_strtol_l.constprop.0+0xb8>
 800a684:	d101      	bne.n	800a68a <_strtol_l.constprop.0+0x86>
 800a686:	45a2      	cmp	sl, r4
 800a688:	db18      	blt.n	800a6bc <_strtol_l.constprop.0+0xb8>
 800a68a:	2701      	movs	r7, #1
 800a68c:	fb00 4003 	mla	r0, r0, r3, r4
 800a690:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a694:	e7ea      	b.n	800a66c <_strtol_l.constprop.0+0x68>
 800a696:	2c2b      	cmp	r4, #43	; 0x2b
 800a698:	bf04      	itt	eq
 800a69a:	782c      	ldrbeq	r4, [r5, #0]
 800a69c:	1c85      	addeq	r5, r0, #2
 800a69e:	e7cd      	b.n	800a63c <_strtol_l.constprop.0+0x38>
 800a6a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a6a4:	f1bc 0f19 	cmp.w	ip, #25
 800a6a8:	d801      	bhi.n	800a6ae <_strtol_l.constprop.0+0xaa>
 800a6aa:	3c37      	subs	r4, #55	; 0x37
 800a6ac:	e7e4      	b.n	800a678 <_strtol_l.constprop.0+0x74>
 800a6ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a6b2:	f1bc 0f19 	cmp.w	ip, #25
 800a6b6:	d804      	bhi.n	800a6c2 <_strtol_l.constprop.0+0xbe>
 800a6b8:	3c57      	subs	r4, #87	; 0x57
 800a6ba:	e7dd      	b.n	800a678 <_strtol_l.constprop.0+0x74>
 800a6bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a6c0:	e7e6      	b.n	800a690 <_strtol_l.constprop.0+0x8c>
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	da07      	bge.n	800a6d6 <_strtol_l.constprop.0+0xd2>
 800a6c6:	2322      	movs	r3, #34	; 0x22
 800a6c8:	4670      	mov	r0, lr
 800a6ca:	f8c8 3000 	str.w	r3, [r8]
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d0a4      	beq.n	800a61c <_strtol_l.constprop.0+0x18>
 800a6d2:	1e69      	subs	r1, r5, #1
 800a6d4:	e005      	b.n	800a6e2 <_strtol_l.constprop.0+0xde>
 800a6d6:	b106      	cbz	r6, 800a6da <_strtol_l.constprop.0+0xd6>
 800a6d8:	4240      	negs	r0, r0
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d09e      	beq.n	800a61c <_strtol_l.constprop.0+0x18>
 800a6de:	2f00      	cmp	r7, #0
 800a6e0:	d1f7      	bne.n	800a6d2 <_strtol_l.constprop.0+0xce>
 800a6e2:	6011      	str	r1, [r2, #0]
 800a6e4:	e79a      	b.n	800a61c <_strtol_l.constprop.0+0x18>
 800a6e6:	2430      	movs	r4, #48	; 0x30
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1b5      	bne.n	800a658 <_strtol_l.constprop.0+0x54>
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	e7b3      	b.n	800a658 <_strtol_l.constprop.0+0x54>
 800a6f0:	2c30      	cmp	r4, #48	; 0x30
 800a6f2:	d0a9      	beq.n	800a648 <_strtol_l.constprop.0+0x44>
 800a6f4:	230a      	movs	r3, #10
 800a6f6:	e7af      	b.n	800a658 <_strtol_l.constprop.0+0x54>
 800a6f8:	0800d799 	.word	0x0800d799

0800a6fc <_strtol_r>:
 800a6fc:	f7ff bf82 	b.w	800a604 <_strtol_l.constprop.0>

0800a700 <strtol>:
 800a700:	4613      	mov	r3, r2
 800a702:	460a      	mov	r2, r1
 800a704:	4601      	mov	r1, r0
 800a706:	4802      	ldr	r0, [pc, #8]	; (800a710 <strtol+0x10>)
 800a708:	6800      	ldr	r0, [r0, #0]
 800a70a:	f7ff bf7b 	b.w	800a604 <_strtol_l.constprop.0>
 800a70e:	bf00      	nop
 800a710:	200005ec 	.word	0x200005ec

0800a714 <__swbuf_r>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	460e      	mov	r6, r1
 800a718:	4614      	mov	r4, r2
 800a71a:	4605      	mov	r5, r0
 800a71c:	b118      	cbz	r0, 800a726 <__swbuf_r+0x12>
 800a71e:	6983      	ldr	r3, [r0, #24]
 800a720:	b90b      	cbnz	r3, 800a726 <__swbuf_r+0x12>
 800a722:	f001 f865 	bl	800b7f0 <__sinit>
 800a726:	4b21      	ldr	r3, [pc, #132]	; (800a7ac <__swbuf_r+0x98>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	d12b      	bne.n	800a784 <__swbuf_r+0x70>
 800a72c:	686c      	ldr	r4, [r5, #4]
 800a72e:	69a3      	ldr	r3, [r4, #24]
 800a730:	60a3      	str	r3, [r4, #8]
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	071a      	lsls	r2, r3, #28
 800a736:	d52f      	bpl.n	800a798 <__swbuf_r+0x84>
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	b36b      	cbz	r3, 800a798 <__swbuf_r+0x84>
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	6820      	ldr	r0, [r4, #0]
 800a740:	b2f6      	uxtb	r6, r6
 800a742:	1ac0      	subs	r0, r0, r3
 800a744:	6963      	ldr	r3, [r4, #20]
 800a746:	4637      	mov	r7, r6
 800a748:	4283      	cmp	r3, r0
 800a74a:	dc04      	bgt.n	800a756 <__swbuf_r+0x42>
 800a74c:	4621      	mov	r1, r4
 800a74e:	4628      	mov	r0, r5
 800a750:	f000 ffba 	bl	800b6c8 <_fflush_r>
 800a754:	bb30      	cbnz	r0, 800a7a4 <__swbuf_r+0x90>
 800a756:	68a3      	ldr	r3, [r4, #8]
 800a758:	3001      	adds	r0, #1
 800a75a:	3b01      	subs	r3, #1
 800a75c:	60a3      	str	r3, [r4, #8]
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	701e      	strb	r6, [r3, #0]
 800a766:	6963      	ldr	r3, [r4, #20]
 800a768:	4283      	cmp	r3, r0
 800a76a:	d004      	beq.n	800a776 <__swbuf_r+0x62>
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	07db      	lsls	r3, r3, #31
 800a770:	d506      	bpl.n	800a780 <__swbuf_r+0x6c>
 800a772:	2e0a      	cmp	r6, #10
 800a774:	d104      	bne.n	800a780 <__swbuf_r+0x6c>
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 ffa5 	bl	800b6c8 <_fflush_r>
 800a77e:	b988      	cbnz	r0, 800a7a4 <__swbuf_r+0x90>
 800a780:	4638      	mov	r0, r7
 800a782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a784:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <__swbuf_r+0x9c>)
 800a786:	429c      	cmp	r4, r3
 800a788:	d101      	bne.n	800a78e <__swbuf_r+0x7a>
 800a78a:	68ac      	ldr	r4, [r5, #8]
 800a78c:	e7cf      	b.n	800a72e <__swbuf_r+0x1a>
 800a78e:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <__swbuf_r+0xa0>)
 800a790:	429c      	cmp	r4, r3
 800a792:	bf08      	it	eq
 800a794:	68ec      	ldreq	r4, [r5, #12]
 800a796:	e7ca      	b.n	800a72e <__swbuf_r+0x1a>
 800a798:	4621      	mov	r1, r4
 800a79a:	4628      	mov	r0, r5
 800a79c:	f000 f80c 	bl	800a7b8 <__swsetup_r>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d0cb      	beq.n	800a73c <__swbuf_r+0x28>
 800a7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a7a8:	e7ea      	b.n	800a780 <__swbuf_r+0x6c>
 800a7aa:	bf00      	nop
 800a7ac:	0800d934 	.word	0x0800d934
 800a7b0:	0800d954 	.word	0x0800d954
 800a7b4:	0800d914 	.word	0x0800d914

0800a7b8 <__swsetup_r>:
 800a7b8:	4b32      	ldr	r3, [pc, #200]	; (800a884 <__swsetup_r+0xcc>)
 800a7ba:	b570      	push	{r4, r5, r6, lr}
 800a7bc:	681d      	ldr	r5, [r3, #0]
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	b125      	cbz	r5, 800a7ce <__swsetup_r+0x16>
 800a7c4:	69ab      	ldr	r3, [r5, #24]
 800a7c6:	b913      	cbnz	r3, 800a7ce <__swsetup_r+0x16>
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f001 f811 	bl	800b7f0 <__sinit>
 800a7ce:	4b2e      	ldr	r3, [pc, #184]	; (800a888 <__swsetup_r+0xd0>)
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	d10f      	bne.n	800a7f4 <__swsetup_r+0x3c>
 800a7d4:	686c      	ldr	r4, [r5, #4]
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7dc:	0719      	lsls	r1, r3, #28
 800a7de:	d42c      	bmi.n	800a83a <__swsetup_r+0x82>
 800a7e0:	06dd      	lsls	r5, r3, #27
 800a7e2:	d411      	bmi.n	800a808 <__swsetup_r+0x50>
 800a7e4:	2309      	movs	r3, #9
 800a7e6:	6033      	str	r3, [r6, #0]
 800a7e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	e03e      	b.n	800a872 <__swsetup_r+0xba>
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <__swsetup_r+0xd4>)
 800a7f6:	429c      	cmp	r4, r3
 800a7f8:	d101      	bne.n	800a7fe <__swsetup_r+0x46>
 800a7fa:	68ac      	ldr	r4, [r5, #8]
 800a7fc:	e7eb      	b.n	800a7d6 <__swsetup_r+0x1e>
 800a7fe:	4b24      	ldr	r3, [pc, #144]	; (800a890 <__swsetup_r+0xd8>)
 800a800:	429c      	cmp	r4, r3
 800a802:	bf08      	it	eq
 800a804:	68ec      	ldreq	r4, [r5, #12]
 800a806:	e7e6      	b.n	800a7d6 <__swsetup_r+0x1e>
 800a808:	0758      	lsls	r0, r3, #29
 800a80a:	d512      	bpl.n	800a832 <__swsetup_r+0x7a>
 800a80c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a80e:	b141      	cbz	r1, 800a822 <__swsetup_r+0x6a>
 800a810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a814:	4299      	cmp	r1, r3
 800a816:	d002      	beq.n	800a81e <__swsetup_r+0x66>
 800a818:	4630      	mov	r0, r6
 800a81a:	f002 f95f 	bl	800cadc <_free_r>
 800a81e:	2300      	movs	r3, #0
 800a820:	6363      	str	r3, [r4, #52]	; 0x34
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	2300      	movs	r3, #0
 800a82c:	6063      	str	r3, [r4, #4]
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	f043 0308 	orr.w	r3, r3, #8
 800a838:	81a3      	strh	r3, [r4, #12]
 800a83a:	6923      	ldr	r3, [r4, #16]
 800a83c:	b94b      	cbnz	r3, 800a852 <__swsetup_r+0x9a>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a848:	d003      	beq.n	800a852 <__swsetup_r+0x9a>
 800a84a:	4621      	mov	r1, r4
 800a84c:	4630      	mov	r0, r6
 800a84e:	f001 fc11 	bl	800c074 <__smakebuf_r>
 800a852:	89a0      	ldrh	r0, [r4, #12]
 800a854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a858:	f010 0301 	ands.w	r3, r0, #1
 800a85c:	d00a      	beq.n	800a874 <__swsetup_r+0xbc>
 800a85e:	2300      	movs	r3, #0
 800a860:	60a3      	str	r3, [r4, #8]
 800a862:	6963      	ldr	r3, [r4, #20]
 800a864:	425b      	negs	r3, r3
 800a866:	61a3      	str	r3, [r4, #24]
 800a868:	6923      	ldr	r3, [r4, #16]
 800a86a:	b943      	cbnz	r3, 800a87e <__swsetup_r+0xc6>
 800a86c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a870:	d1ba      	bne.n	800a7e8 <__swsetup_r+0x30>
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	0781      	lsls	r1, r0, #30
 800a876:	bf58      	it	pl
 800a878:	6963      	ldrpl	r3, [r4, #20]
 800a87a:	60a3      	str	r3, [r4, #8]
 800a87c:	e7f4      	b.n	800a868 <__swsetup_r+0xb0>
 800a87e:	2000      	movs	r0, #0
 800a880:	e7f7      	b.n	800a872 <__swsetup_r+0xba>
 800a882:	bf00      	nop
 800a884:	200005ec 	.word	0x200005ec
 800a888:	0800d934 	.word	0x0800d934
 800a88c:	0800d954 	.word	0x0800d954
 800a890:	0800d914 	.word	0x0800d914

0800a894 <__assert_func>:
 800a894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a896:	4614      	mov	r4, r2
 800a898:	461a      	mov	r2, r3
 800a89a:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <__assert_func+0x2c>)
 800a89c:	4605      	mov	r5, r0
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68d8      	ldr	r0, [r3, #12]
 800a8a2:	b14c      	cbz	r4, 800a8b8 <__assert_func+0x24>
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <__assert_func+0x30>)
 800a8a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8aa:	9100      	str	r1, [sp, #0]
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	4906      	ldr	r1, [pc, #24]	; (800a8c8 <__assert_func+0x34>)
 800a8b0:	f001 f81c 	bl	800b8ec <fiprintf>
 800a8b4:	f002 fd2e 	bl	800d314 <abort>
 800a8b8:	4b04      	ldr	r3, [pc, #16]	; (800a8cc <__assert_func+0x38>)
 800a8ba:	461c      	mov	r4, r3
 800a8bc:	e7f3      	b.n	800a8a6 <__assert_func+0x12>
 800a8be:	bf00      	nop
 800a8c0:	200005ec 	.word	0x200005ec
 800a8c4:	0800d75c 	.word	0x0800d75c
 800a8c8:	0800d769 	.word	0x0800d769
 800a8cc:	0800d797 	.word	0x0800d797

0800a8d0 <quorem>:
 800a8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	6903      	ldr	r3, [r0, #16]
 800a8d6:	690c      	ldr	r4, [r1, #16]
 800a8d8:	4607      	mov	r7, r0
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	f2c0 8082 	blt.w	800a9e4 <quorem+0x114>
 800a8e0:	3c01      	subs	r4, #1
 800a8e2:	f100 0514 	add.w	r5, r0, #20
 800a8e6:	f101 0814 	add.w	r8, r1, #20
 800a8ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a900:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a904:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a908:	d331      	bcc.n	800a96e <quorem+0x9e>
 800a90a:	f04f 0e00 	mov.w	lr, #0
 800a90e:	4640      	mov	r0, r8
 800a910:	46ac      	mov	ip, r5
 800a912:	46f2      	mov	sl, lr
 800a914:	f850 2b04 	ldr.w	r2, [r0], #4
 800a918:	b293      	uxth	r3, r2
 800a91a:	fb06 e303 	mla	r3, r6, r3, lr
 800a91e:	0c12      	lsrs	r2, r2, #16
 800a920:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a924:	b29b      	uxth	r3, r3
 800a926:	fb06 e202 	mla	r2, r6, r2, lr
 800a92a:	ebaa 0303 	sub.w	r3, sl, r3
 800a92e:	f8dc a000 	ldr.w	sl, [ip]
 800a932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a936:	fa1f fa8a 	uxth.w	sl, sl
 800a93a:	4453      	add	r3, sl
 800a93c:	f8dc a000 	ldr.w	sl, [ip]
 800a940:	b292      	uxth	r2, r2
 800a942:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a950:	4581      	cmp	r9, r0
 800a952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a956:	f84c 3b04 	str.w	r3, [ip], #4
 800a95a:	d2db      	bcs.n	800a914 <quorem+0x44>
 800a95c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a960:	b92b      	cbnz	r3, 800a96e <quorem+0x9e>
 800a962:	9b01      	ldr	r3, [sp, #4]
 800a964:	3b04      	subs	r3, #4
 800a966:	429d      	cmp	r5, r3
 800a968:	461a      	mov	r2, r3
 800a96a:	d32f      	bcc.n	800a9cc <quorem+0xfc>
 800a96c:	613c      	str	r4, [r7, #16]
 800a96e:	4638      	mov	r0, r7
 800a970:	f001 feb0 	bl	800c6d4 <__mcmp>
 800a974:	2800      	cmp	r0, #0
 800a976:	db25      	blt.n	800a9c4 <quorem+0xf4>
 800a978:	4628      	mov	r0, r5
 800a97a:	f04f 0c00 	mov.w	ip, #0
 800a97e:	3601      	adds	r6, #1
 800a980:	f858 1b04 	ldr.w	r1, [r8], #4
 800a984:	f8d0 e000 	ldr.w	lr, [r0]
 800a988:	b28b      	uxth	r3, r1
 800a98a:	ebac 0303 	sub.w	r3, ip, r3
 800a98e:	fa1f f28e 	uxth.w	r2, lr
 800a992:	4413      	add	r3, r2
 800a994:	0c0a      	lsrs	r2, r1, #16
 800a996:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a99a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9a4:	45c1      	cmp	r9, r8
 800a9a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9aa:	f840 3b04 	str.w	r3, [r0], #4
 800a9ae:	d2e7      	bcs.n	800a980 <quorem+0xb0>
 800a9b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9b8:	b922      	cbnz	r2, 800a9c4 <quorem+0xf4>
 800a9ba:	3b04      	subs	r3, #4
 800a9bc:	429d      	cmp	r5, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	d30a      	bcc.n	800a9d8 <quorem+0x108>
 800a9c2:	613c      	str	r4, [r7, #16]
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	b003      	add	sp, #12
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	3b04      	subs	r3, #4
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d1cb      	bne.n	800a96c <quorem+0x9c>
 800a9d4:	3c01      	subs	r4, #1
 800a9d6:	e7c6      	b.n	800a966 <quorem+0x96>
 800a9d8:	6812      	ldr	r2, [r2, #0]
 800a9da:	3b04      	subs	r3, #4
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	d1f0      	bne.n	800a9c2 <quorem+0xf2>
 800a9e0:	3c01      	subs	r4, #1
 800a9e2:	e7eb      	b.n	800a9bc <quorem+0xec>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e7ee      	b.n	800a9c6 <quorem+0xf6>

0800a9e8 <_dtoa_r>:
 800a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	461f      	mov	r7, r3
 800a9f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a9f2:	b099      	sub	sp, #100	; 0x64
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a9fe:	b974      	cbnz	r4, 800aa1e <_dtoa_r+0x36>
 800aa00:	2010      	movs	r0, #16
 800aa02:	f001 fb77 	bl	800c0f4 <malloc>
 800aa06:	4602      	mov	r2, r0
 800aa08:	6268      	str	r0, [r5, #36]	; 0x24
 800aa0a:	b920      	cbnz	r0, 800aa16 <_dtoa_r+0x2e>
 800aa0c:	21ea      	movs	r1, #234	; 0xea
 800aa0e:	4ba8      	ldr	r3, [pc, #672]	; (800acb0 <_dtoa_r+0x2c8>)
 800aa10:	48a8      	ldr	r0, [pc, #672]	; (800acb4 <_dtoa_r+0x2cc>)
 800aa12:	f7ff ff3f 	bl	800a894 <__assert_func>
 800aa16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa1a:	6004      	str	r4, [r0, #0]
 800aa1c:	60c4      	str	r4, [r0, #12]
 800aa1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa20:	6819      	ldr	r1, [r3, #0]
 800aa22:	b151      	cbz	r1, 800aa3a <_dtoa_r+0x52>
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	2301      	movs	r3, #1
 800aa28:	4093      	lsls	r3, r2
 800aa2a:	604a      	str	r2, [r1, #4]
 800aa2c:	608b      	str	r3, [r1, #8]
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f001 fbc8 	bl	800c1c4 <_Bfree>
 800aa34:	2200      	movs	r2, #0
 800aa36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	1e3b      	subs	r3, r7, #0
 800aa3c:	bfaf      	iteee	ge
 800aa3e:	2300      	movge	r3, #0
 800aa40:	2201      	movlt	r2, #1
 800aa42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa46:	9305      	strlt	r3, [sp, #20]
 800aa48:	bfa8      	it	ge
 800aa4a:	f8c8 3000 	strge.w	r3, [r8]
 800aa4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aa52:	4b99      	ldr	r3, [pc, #612]	; (800acb8 <_dtoa_r+0x2d0>)
 800aa54:	bfb8      	it	lt
 800aa56:	f8c8 2000 	strlt.w	r2, [r8]
 800aa5a:	ea33 0309 	bics.w	r3, r3, r9
 800aa5e:	d119      	bne.n	800aa94 <_dtoa_r+0xac>
 800aa60:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa6c:	4333      	orrs	r3, r6
 800aa6e:	f000 857f 	beq.w	800b570 <_dtoa_r+0xb88>
 800aa72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa74:	b953      	cbnz	r3, 800aa8c <_dtoa_r+0xa4>
 800aa76:	4b91      	ldr	r3, [pc, #580]	; (800acbc <_dtoa_r+0x2d4>)
 800aa78:	e022      	b.n	800aac0 <_dtoa_r+0xd8>
 800aa7a:	4b91      	ldr	r3, [pc, #580]	; (800acc0 <_dtoa_r+0x2d8>)
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	9803      	ldr	r0, [sp, #12]
 800aa86:	b019      	add	sp, #100	; 0x64
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8c:	4b8b      	ldr	r3, [pc, #556]	; (800acbc <_dtoa_r+0x2d4>)
 800aa8e:	9303      	str	r3, [sp, #12]
 800aa90:	3303      	adds	r3, #3
 800aa92:	e7f5      	b.n	800aa80 <_dtoa_r+0x98>
 800aa94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aa9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f7f6 f8ae 	bl	8000c04 <__aeabi_dcmpeq>
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	b158      	cbz	r0, 800aac4 <_dtoa_r+0xdc>
 800aaac:	2301      	movs	r3, #1
 800aaae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 8558 	beq.w	800b56a <_dtoa_r+0xb82>
 800aaba:	4882      	ldr	r0, [pc, #520]	; (800acc4 <_dtoa_r+0x2dc>)
 800aabc:	6018      	str	r0, [r3, #0]
 800aabe:	1e43      	subs	r3, r0, #1
 800aac0:	9303      	str	r3, [sp, #12]
 800aac2:	e7df      	b.n	800aa84 <_dtoa_r+0x9c>
 800aac4:	ab16      	add	r3, sp, #88	; 0x58
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	ab17      	add	r3, sp, #92	; 0x5c
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	4628      	mov	r0, r5
 800aace:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aad2:	f001 ff21 	bl	800c918 <__d2b>
 800aad6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aada:	4683      	mov	fp, r0
 800aadc:	2c00      	cmp	r4, #0
 800aade:	d07f      	beq.n	800abe0 <_dtoa_r+0x1f8>
 800aae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aaea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aaf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aaf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aafa:	2200      	movs	r2, #0
 800aafc:	4b72      	ldr	r3, [pc, #456]	; (800acc8 <_dtoa_r+0x2e0>)
 800aafe:	f7f5 fc61 	bl	80003c4 <__aeabi_dsub>
 800ab02:	a365      	add	r3, pc, #404	; (adr r3, 800ac98 <_dtoa_r+0x2b0>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fe14 	bl	8000734 <__aeabi_dmul>
 800ab0c:	a364      	add	r3, pc, #400	; (adr r3, 800aca0 <_dtoa_r+0x2b8>)
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	f7f5 fc59 	bl	80003c8 <__adddf3>
 800ab16:	4606      	mov	r6, r0
 800ab18:	4620      	mov	r0, r4
 800ab1a:	460f      	mov	r7, r1
 800ab1c:	f7f5 fda0 	bl	8000660 <__aeabi_i2d>
 800ab20:	a361      	add	r3, pc, #388	; (adr r3, 800aca8 <_dtoa_r+0x2c0>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fe05 	bl	8000734 <__aeabi_dmul>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 fc49 	bl	80003c8 <__adddf3>
 800ab36:	4606      	mov	r6, r0
 800ab38:	460f      	mov	r7, r1
 800ab3a:	f7f6 f8ab 	bl	8000c94 <__aeabi_d2iz>
 800ab3e:	2200      	movs	r2, #0
 800ab40:	4682      	mov	sl, r0
 800ab42:	2300      	movs	r3, #0
 800ab44:	4630      	mov	r0, r6
 800ab46:	4639      	mov	r1, r7
 800ab48:	f7f6 f866 	bl	8000c18 <__aeabi_dcmplt>
 800ab4c:	b148      	cbz	r0, 800ab62 <_dtoa_r+0x17a>
 800ab4e:	4650      	mov	r0, sl
 800ab50:	f7f5 fd86 	bl	8000660 <__aeabi_i2d>
 800ab54:	4632      	mov	r2, r6
 800ab56:	463b      	mov	r3, r7
 800ab58:	f7f6 f854 	bl	8000c04 <__aeabi_dcmpeq>
 800ab5c:	b908      	cbnz	r0, 800ab62 <_dtoa_r+0x17a>
 800ab5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab62:	f1ba 0f16 	cmp.w	sl, #22
 800ab66:	d858      	bhi.n	800ac1a <_dtoa_r+0x232>
 800ab68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab6c:	4b57      	ldr	r3, [pc, #348]	; (800accc <_dtoa_r+0x2e4>)
 800ab6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f6 f84f 	bl	8000c18 <__aeabi_dcmplt>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d04f      	beq.n	800ac1e <_dtoa_r+0x236>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab84:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab88:	1b1c      	subs	r4, r3, r4
 800ab8a:	1e63      	subs	r3, r4, #1
 800ab8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8e:	bf49      	itett	mi
 800ab90:	f1c4 0301 	rsbmi	r3, r4, #1
 800ab94:	2300      	movpl	r3, #0
 800ab96:	9306      	strmi	r3, [sp, #24]
 800ab98:	2300      	movmi	r3, #0
 800ab9a:	bf54      	ite	pl
 800ab9c:	9306      	strpl	r3, [sp, #24]
 800ab9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aba0:	f1ba 0f00 	cmp.w	sl, #0
 800aba4:	db3d      	blt.n	800ac22 <_dtoa_r+0x23a>
 800aba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800abac:	4453      	add	r3, sl
 800abae:	9309      	str	r3, [sp, #36]	; 0x24
 800abb0:	2300      	movs	r3, #0
 800abb2:	930a      	str	r3, [sp, #40]	; 0x28
 800abb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	f200 808c 	bhi.w	800acd4 <_dtoa_r+0x2ec>
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	bfc4      	itt	gt
 800abc0:	3b04      	subgt	r3, #4
 800abc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800abc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abc6:	bfc8      	it	gt
 800abc8:	2400      	movgt	r4, #0
 800abca:	f1a3 0302 	sub.w	r3, r3, #2
 800abce:	bfd8      	it	le
 800abd0:	2401      	movle	r4, #1
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	f200 808a 	bhi.w	800acec <_dtoa_r+0x304>
 800abd8:	e8df f003 	tbb	[pc, r3]
 800abdc:	5b4d4f2d 	.word	0x5b4d4f2d
 800abe0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800abe4:	441c      	add	r4, r3
 800abe6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800abea:	2b20      	cmp	r3, #32
 800abec:	bfc3      	ittte	gt
 800abee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abf2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800abf6:	fa09 f303 	lslgt.w	r3, r9, r3
 800abfa:	f1c3 0320 	rsble	r3, r3, #32
 800abfe:	bfc6      	itte	gt
 800ac00:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac04:	4318      	orrgt	r0, r3
 800ac06:	fa06 f003 	lslle.w	r0, r6, r3
 800ac0a:	f7f5 fd19 	bl	8000640 <__aeabi_ui2d>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ac14:	3c01      	subs	r4, #1
 800ac16:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac18:	e76f      	b.n	800aafa <_dtoa_r+0x112>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e7b2      	b.n	800ab84 <_dtoa_r+0x19c>
 800ac1e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac20:	e7b1      	b.n	800ab86 <_dtoa_r+0x19e>
 800ac22:	9b06      	ldr	r3, [sp, #24]
 800ac24:	eba3 030a 	sub.w	r3, r3, sl
 800ac28:	9306      	str	r3, [sp, #24]
 800ac2a:	f1ca 0300 	rsb	r3, sl, #0
 800ac2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac30:	2300      	movs	r3, #0
 800ac32:	930e      	str	r3, [sp, #56]	; 0x38
 800ac34:	e7be      	b.n	800abb4 <_dtoa_r+0x1cc>
 800ac36:	2300      	movs	r3, #0
 800ac38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	dc58      	bgt.n	800acf2 <_dtoa_r+0x30a>
 800ac40:	f04f 0901 	mov.w	r9, #1
 800ac44:	464b      	mov	r3, r9
 800ac46:	f8cd 9020 	str.w	r9, [sp, #32]
 800ac4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ac4e:	2200      	movs	r2, #0
 800ac50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac52:	6042      	str	r2, [r0, #4]
 800ac54:	2204      	movs	r2, #4
 800ac56:	f102 0614 	add.w	r6, r2, #20
 800ac5a:	429e      	cmp	r6, r3
 800ac5c:	6841      	ldr	r1, [r0, #4]
 800ac5e:	d94e      	bls.n	800acfe <_dtoa_r+0x316>
 800ac60:	4628      	mov	r0, r5
 800ac62:	f001 fa6f 	bl	800c144 <_Balloc>
 800ac66:	9003      	str	r0, [sp, #12]
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d14c      	bne.n	800ad06 <_dtoa_r+0x31e>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac72:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <_dtoa_r+0x2e8>)
 800ac74:	e6cc      	b.n	800aa10 <_dtoa_r+0x28>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e7de      	b.n	800ac38 <_dtoa_r+0x250>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac80:	eb0a 0903 	add.w	r9, sl, r3
 800ac84:	f109 0301 	add.w	r3, r9, #1
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	9308      	str	r3, [sp, #32]
 800ac8c:	bfb8      	it	lt
 800ac8e:	2301      	movlt	r3, #1
 800ac90:	e7dd      	b.n	800ac4e <_dtoa_r+0x266>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e7f2      	b.n	800ac7c <_dtoa_r+0x294>
 800ac96:	bf00      	nop
 800ac98:	636f4361 	.word	0x636f4361
 800ac9c:	3fd287a7 	.word	0x3fd287a7
 800aca0:	8b60c8b3 	.word	0x8b60c8b3
 800aca4:	3fc68a28 	.word	0x3fc68a28
 800aca8:	509f79fb 	.word	0x509f79fb
 800acac:	3fd34413 	.word	0x3fd34413
 800acb0:	0800d6e8 	.word	0x0800d6e8
 800acb4:	0800d8a6 	.word	0x0800d8a6
 800acb8:	7ff00000 	.word	0x7ff00000
 800acbc:	0800d8a2 	.word	0x0800d8a2
 800acc0:	0800d899 	.word	0x0800d899
 800acc4:	0800d669 	.word	0x0800d669
 800acc8:	3ff80000 	.word	0x3ff80000
 800accc:	0800da78 	.word	0x0800da78
 800acd0:	0800d901 	.word	0x0800d901
 800acd4:	2401      	movs	r4, #1
 800acd6:	2300      	movs	r3, #0
 800acd8:	940b      	str	r4, [sp, #44]	; 0x2c
 800acda:	9322      	str	r3, [sp, #136]	; 0x88
 800acdc:	f04f 39ff 	mov.w	r9, #4294967295
 800ace0:	2200      	movs	r2, #0
 800ace2:	2312      	movs	r3, #18
 800ace4:	f8cd 9020 	str.w	r9, [sp, #32]
 800ace8:	9223      	str	r2, [sp, #140]	; 0x8c
 800acea:	e7b0      	b.n	800ac4e <_dtoa_r+0x266>
 800acec:	2301      	movs	r3, #1
 800acee:	930b      	str	r3, [sp, #44]	; 0x2c
 800acf0:	e7f4      	b.n	800acdc <_dtoa_r+0x2f4>
 800acf2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800acf6:	464b      	mov	r3, r9
 800acf8:	f8cd 9020 	str.w	r9, [sp, #32]
 800acfc:	e7a7      	b.n	800ac4e <_dtoa_r+0x266>
 800acfe:	3101      	adds	r1, #1
 800ad00:	6041      	str	r1, [r0, #4]
 800ad02:	0052      	lsls	r2, r2, #1
 800ad04:	e7a7      	b.n	800ac56 <_dtoa_r+0x26e>
 800ad06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad08:	9a03      	ldr	r2, [sp, #12]
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	9b08      	ldr	r3, [sp, #32]
 800ad0e:	2b0e      	cmp	r3, #14
 800ad10:	f200 80a8 	bhi.w	800ae64 <_dtoa_r+0x47c>
 800ad14:	2c00      	cmp	r4, #0
 800ad16:	f000 80a5 	beq.w	800ae64 <_dtoa_r+0x47c>
 800ad1a:	f1ba 0f00 	cmp.w	sl, #0
 800ad1e:	dd34      	ble.n	800ad8a <_dtoa_r+0x3a2>
 800ad20:	4a9a      	ldr	r2, [pc, #616]	; (800af8c <_dtoa_r+0x5a4>)
 800ad22:	f00a 030f 	and.w	r3, sl, #15
 800ad26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ad2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad36:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ad3a:	d016      	beq.n	800ad6a <_dtoa_r+0x382>
 800ad3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad40:	4b93      	ldr	r3, [pc, #588]	; (800af90 <_dtoa_r+0x5a8>)
 800ad42:	2703      	movs	r7, #3
 800ad44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad48:	f7f5 fe1e 	bl	8000988 <__aeabi_ddiv>
 800ad4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad50:	f004 040f 	and.w	r4, r4, #15
 800ad54:	4e8e      	ldr	r6, [pc, #568]	; (800af90 <_dtoa_r+0x5a8>)
 800ad56:	b954      	cbnz	r4, 800ad6e <_dtoa_r+0x386>
 800ad58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad60:	f7f5 fe12 	bl	8000988 <__aeabi_ddiv>
 800ad64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad68:	e029      	b.n	800adbe <_dtoa_r+0x3d6>
 800ad6a:	2702      	movs	r7, #2
 800ad6c:	e7f2      	b.n	800ad54 <_dtoa_r+0x36c>
 800ad6e:	07e1      	lsls	r1, r4, #31
 800ad70:	d508      	bpl.n	800ad84 <_dtoa_r+0x39c>
 800ad72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad7a:	f7f5 fcdb 	bl	8000734 <__aeabi_dmul>
 800ad7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad82:	3701      	adds	r7, #1
 800ad84:	1064      	asrs	r4, r4, #1
 800ad86:	3608      	adds	r6, #8
 800ad88:	e7e5      	b.n	800ad56 <_dtoa_r+0x36e>
 800ad8a:	f000 80a5 	beq.w	800aed8 <_dtoa_r+0x4f0>
 800ad8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad92:	f1ca 0400 	rsb	r4, sl, #0
 800ad96:	4b7d      	ldr	r3, [pc, #500]	; (800af8c <_dtoa_r+0x5a4>)
 800ad98:	f004 020f 	and.w	r2, r4, #15
 800ad9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fcc6 	bl	8000734 <__aeabi_dmul>
 800ada8:	2702      	movs	r7, #2
 800adaa:	2300      	movs	r3, #0
 800adac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adb0:	4e77      	ldr	r6, [pc, #476]	; (800af90 <_dtoa_r+0x5a8>)
 800adb2:	1124      	asrs	r4, r4, #4
 800adb4:	2c00      	cmp	r4, #0
 800adb6:	f040 8084 	bne.w	800aec2 <_dtoa_r+0x4da>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1d2      	bne.n	800ad64 <_dtoa_r+0x37c>
 800adbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 808b 	beq.w	800aedc <_dtoa_r+0x4f4>
 800adc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800adca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800adce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800add2:	2200      	movs	r2, #0
 800add4:	4b6f      	ldr	r3, [pc, #444]	; (800af94 <_dtoa_r+0x5ac>)
 800add6:	f7f5 ff1f 	bl	8000c18 <__aeabi_dcmplt>
 800adda:	2800      	cmp	r0, #0
 800addc:	d07e      	beq.n	800aedc <_dtoa_r+0x4f4>
 800adde:	9b08      	ldr	r3, [sp, #32]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d07b      	beq.n	800aedc <_dtoa_r+0x4f4>
 800ade4:	f1b9 0f00 	cmp.w	r9, #0
 800ade8:	dd38      	ble.n	800ae5c <_dtoa_r+0x474>
 800adea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adee:	2200      	movs	r2, #0
 800adf0:	4b69      	ldr	r3, [pc, #420]	; (800af98 <_dtoa_r+0x5b0>)
 800adf2:	f7f5 fc9f 	bl	8000734 <__aeabi_dmul>
 800adf6:	464c      	mov	r4, r9
 800adf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ae00:	3701      	adds	r7, #1
 800ae02:	4638      	mov	r0, r7
 800ae04:	f7f5 fc2c 	bl	8000660 <__aeabi_i2d>
 800ae08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae0c:	f7f5 fc92 	bl	8000734 <__aeabi_dmul>
 800ae10:	2200      	movs	r2, #0
 800ae12:	4b62      	ldr	r3, [pc, #392]	; (800af9c <_dtoa_r+0x5b4>)
 800ae14:	f7f5 fad8 	bl	80003c8 <__adddf3>
 800ae18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ae1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae20:	9611      	str	r6, [sp, #68]	; 0x44
 800ae22:	2c00      	cmp	r4, #0
 800ae24:	d15d      	bne.n	800aee2 <_dtoa_r+0x4fa>
 800ae26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4b5c      	ldr	r3, [pc, #368]	; (800afa0 <_dtoa_r+0x5b8>)
 800ae2e:	f7f5 fac9 	bl	80003c4 <__aeabi_dsub>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae3a:	4633      	mov	r3, r6
 800ae3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae3e:	f7f5 ff09 	bl	8000c54 <__aeabi_dcmpgt>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	f040 829c 	bne.w	800b380 <_dtoa_r+0x998>
 800ae48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae52:	f7f5 fee1 	bl	8000c18 <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8290 	bne.w	800b37c <_dtoa_r+0x994>
 800ae5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ae60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f2c0 8152 	blt.w	800b110 <_dtoa_r+0x728>
 800ae6c:	f1ba 0f0e 	cmp.w	sl, #14
 800ae70:	f300 814e 	bgt.w	800b110 <_dtoa_r+0x728>
 800ae74:	4b45      	ldr	r3, [pc, #276]	; (800af8c <_dtoa_r+0x5a4>)
 800ae76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f280 80db 	bge.w	800b040 <_dtoa_r+0x658>
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f300 80d7 	bgt.w	800b040 <_dtoa_r+0x658>
 800ae92:	f040 8272 	bne.w	800b37a <_dtoa_r+0x992>
 800ae96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4b40      	ldr	r3, [pc, #256]	; (800afa0 <_dtoa_r+0x5b8>)
 800ae9e:	f7f5 fc49 	bl	8000734 <__aeabi_dmul>
 800aea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aea6:	f7f5 fecb 	bl	8000c40 <__aeabi_dcmpge>
 800aeaa:	9c08      	ldr	r4, [sp, #32]
 800aeac:	4626      	mov	r6, r4
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f040 8248 	bne.w	800b344 <_dtoa_r+0x95c>
 800aeb4:	2331      	movs	r3, #49	; 0x31
 800aeb6:	9f03      	ldr	r7, [sp, #12]
 800aeb8:	f10a 0a01 	add.w	sl, sl, #1
 800aebc:	f807 3b01 	strb.w	r3, [r7], #1
 800aec0:	e244      	b.n	800b34c <_dtoa_r+0x964>
 800aec2:	07e2      	lsls	r2, r4, #31
 800aec4:	d505      	bpl.n	800aed2 <_dtoa_r+0x4ea>
 800aec6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aeca:	f7f5 fc33 	bl	8000734 <__aeabi_dmul>
 800aece:	2301      	movs	r3, #1
 800aed0:	3701      	adds	r7, #1
 800aed2:	1064      	asrs	r4, r4, #1
 800aed4:	3608      	adds	r6, #8
 800aed6:	e76d      	b.n	800adb4 <_dtoa_r+0x3cc>
 800aed8:	2702      	movs	r7, #2
 800aeda:	e770      	b.n	800adbe <_dtoa_r+0x3d6>
 800aedc:	46d0      	mov	r8, sl
 800aede:	9c08      	ldr	r4, [sp, #32]
 800aee0:	e78f      	b.n	800ae02 <_dtoa_r+0x41a>
 800aee2:	9903      	ldr	r1, [sp, #12]
 800aee4:	4b29      	ldr	r3, [pc, #164]	; (800af8c <_dtoa_r+0x5a4>)
 800aee6:	4421      	add	r1, r4
 800aee8:	9112      	str	r1, [sp, #72]	; 0x48
 800aeea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aef0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aef4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d055      	beq.n	800afa8 <_dtoa_r+0x5c0>
 800aefc:	2000      	movs	r0, #0
 800aefe:	4929      	ldr	r1, [pc, #164]	; (800afa4 <_dtoa_r+0x5bc>)
 800af00:	f7f5 fd42 	bl	8000988 <__aeabi_ddiv>
 800af04:	463b      	mov	r3, r7
 800af06:	4632      	mov	r2, r6
 800af08:	f7f5 fa5c 	bl	80003c4 <__aeabi_dsub>
 800af0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af10:	9f03      	ldr	r7, [sp, #12]
 800af12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af16:	f7f5 febd 	bl	8000c94 <__aeabi_d2iz>
 800af1a:	4604      	mov	r4, r0
 800af1c:	f7f5 fba0 	bl	8000660 <__aeabi_i2d>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af28:	f7f5 fa4c 	bl	80003c4 <__aeabi_dsub>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	3430      	adds	r4, #48	; 0x30
 800af32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af3a:	f807 4b01 	strb.w	r4, [r7], #1
 800af3e:	f7f5 fe6b 	bl	8000c18 <__aeabi_dcmplt>
 800af42:	2800      	cmp	r0, #0
 800af44:	d174      	bne.n	800b030 <_dtoa_r+0x648>
 800af46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af4a:	2000      	movs	r0, #0
 800af4c:	4911      	ldr	r1, [pc, #68]	; (800af94 <_dtoa_r+0x5ac>)
 800af4e:	f7f5 fa39 	bl	80003c4 <__aeabi_dsub>
 800af52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af56:	f7f5 fe5f 	bl	8000c18 <__aeabi_dcmplt>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	f040 80b7 	bne.w	800b0ce <_dtoa_r+0x6e6>
 800af60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af62:	429f      	cmp	r7, r3
 800af64:	f43f af7a 	beq.w	800ae5c <_dtoa_r+0x474>
 800af68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af6c:	2200      	movs	r2, #0
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <_dtoa_r+0x5b0>)
 800af70:	f7f5 fbe0 	bl	8000734 <__aeabi_dmul>
 800af74:	2200      	movs	r2, #0
 800af76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af7e:	4b06      	ldr	r3, [pc, #24]	; (800af98 <_dtoa_r+0x5b0>)
 800af80:	f7f5 fbd8 	bl	8000734 <__aeabi_dmul>
 800af84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af88:	e7c3      	b.n	800af12 <_dtoa_r+0x52a>
 800af8a:	bf00      	nop
 800af8c:	0800da78 	.word	0x0800da78
 800af90:	0800da50 	.word	0x0800da50
 800af94:	3ff00000 	.word	0x3ff00000
 800af98:	40240000 	.word	0x40240000
 800af9c:	401c0000 	.word	0x401c0000
 800afa0:	40140000 	.word	0x40140000
 800afa4:	3fe00000 	.word	0x3fe00000
 800afa8:	4630      	mov	r0, r6
 800afaa:	4639      	mov	r1, r7
 800afac:	f7f5 fbc2 	bl	8000734 <__aeabi_dmul>
 800afb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afb6:	9c03      	ldr	r4, [sp, #12]
 800afb8:	9314      	str	r3, [sp, #80]	; 0x50
 800afba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afbe:	f7f5 fe69 	bl	8000c94 <__aeabi_d2iz>
 800afc2:	9015      	str	r0, [sp, #84]	; 0x54
 800afc4:	f7f5 fb4c 	bl	8000660 <__aeabi_i2d>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afd0:	f7f5 f9f8 	bl	80003c4 <__aeabi_dsub>
 800afd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afd6:	4606      	mov	r6, r0
 800afd8:	3330      	adds	r3, #48	; 0x30
 800afda:	f804 3b01 	strb.w	r3, [r4], #1
 800afde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afe0:	460f      	mov	r7, r1
 800afe2:	429c      	cmp	r4, r3
 800afe4:	f04f 0200 	mov.w	r2, #0
 800afe8:	d124      	bne.n	800b034 <_dtoa_r+0x64c>
 800afea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afee:	4bb0      	ldr	r3, [pc, #704]	; (800b2b0 <_dtoa_r+0x8c8>)
 800aff0:	f7f5 f9ea 	bl	80003c8 <__adddf3>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4630      	mov	r0, r6
 800affa:	4639      	mov	r1, r7
 800affc:	f7f5 fe2a 	bl	8000c54 <__aeabi_dcmpgt>
 800b000:	2800      	cmp	r0, #0
 800b002:	d163      	bne.n	800b0cc <_dtoa_r+0x6e4>
 800b004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b008:	2000      	movs	r0, #0
 800b00a:	49a9      	ldr	r1, [pc, #676]	; (800b2b0 <_dtoa_r+0x8c8>)
 800b00c:	f7f5 f9da 	bl	80003c4 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4630      	mov	r0, r6
 800b016:	4639      	mov	r1, r7
 800b018:	f7f5 fdfe 	bl	8000c18 <__aeabi_dcmplt>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	f43f af1d 	beq.w	800ae5c <_dtoa_r+0x474>
 800b022:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b024:	1e7b      	subs	r3, r7, #1
 800b026:	9314      	str	r3, [sp, #80]	; 0x50
 800b028:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b02c:	2b30      	cmp	r3, #48	; 0x30
 800b02e:	d0f8      	beq.n	800b022 <_dtoa_r+0x63a>
 800b030:	46c2      	mov	sl, r8
 800b032:	e03b      	b.n	800b0ac <_dtoa_r+0x6c4>
 800b034:	4b9f      	ldr	r3, [pc, #636]	; (800b2b4 <_dtoa_r+0x8cc>)
 800b036:	f7f5 fb7d 	bl	8000734 <__aeabi_dmul>
 800b03a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b03e:	e7bc      	b.n	800afba <_dtoa_r+0x5d2>
 800b040:	9f03      	ldr	r7, [sp, #12]
 800b042:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b04a:	4640      	mov	r0, r8
 800b04c:	4649      	mov	r1, r9
 800b04e:	f7f5 fc9b 	bl	8000988 <__aeabi_ddiv>
 800b052:	f7f5 fe1f 	bl	8000c94 <__aeabi_d2iz>
 800b056:	4604      	mov	r4, r0
 800b058:	f7f5 fb02 	bl	8000660 <__aeabi_i2d>
 800b05c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b060:	f7f5 fb68 	bl	8000734 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4640      	mov	r0, r8
 800b06a:	4649      	mov	r1, r9
 800b06c:	f7f5 f9aa 	bl	80003c4 <__aeabi_dsub>
 800b070:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b074:	f807 6b01 	strb.w	r6, [r7], #1
 800b078:	9e03      	ldr	r6, [sp, #12]
 800b07a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b07e:	1bbe      	subs	r6, r7, r6
 800b080:	45b4      	cmp	ip, r6
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	d136      	bne.n	800b0f6 <_dtoa_r+0x70e>
 800b088:	f7f5 f99e 	bl	80003c8 <__adddf3>
 800b08c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b090:	4680      	mov	r8, r0
 800b092:	4689      	mov	r9, r1
 800b094:	f7f5 fdde 	bl	8000c54 <__aeabi_dcmpgt>
 800b098:	bb58      	cbnz	r0, 800b0f2 <_dtoa_r+0x70a>
 800b09a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b09e:	4640      	mov	r0, r8
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	f7f5 fdaf 	bl	8000c04 <__aeabi_dcmpeq>
 800b0a6:	b108      	cbz	r0, 800b0ac <_dtoa_r+0x6c4>
 800b0a8:	07e1      	lsls	r1, r4, #31
 800b0aa:	d422      	bmi.n	800b0f2 <_dtoa_r+0x70a>
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	f001 f888 	bl	800c1c4 <_Bfree>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	703b      	strb	r3, [r7, #0]
 800b0b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0ba:	f10a 0001 	add.w	r0, sl, #1
 800b0be:	6018      	str	r0, [r3, #0]
 800b0c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f43f acde 	beq.w	800aa84 <_dtoa_r+0x9c>
 800b0c8:	601f      	str	r7, [r3, #0]
 800b0ca:	e4db      	b.n	800aa84 <_dtoa_r+0x9c>
 800b0cc:	4627      	mov	r7, r4
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	461f      	mov	r7, r3
 800b0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d6:	2a39      	cmp	r2, #57	; 0x39
 800b0d8:	d107      	bne.n	800b0ea <_dtoa_r+0x702>
 800b0da:	9a03      	ldr	r2, [sp, #12]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d1f7      	bne.n	800b0d0 <_dtoa_r+0x6e8>
 800b0e0:	2230      	movs	r2, #48	; 0x30
 800b0e2:	9903      	ldr	r1, [sp, #12]
 800b0e4:	f108 0801 	add.w	r8, r8, #1
 800b0e8:	700a      	strb	r2, [r1, #0]
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	3201      	adds	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e79e      	b.n	800b030 <_dtoa_r+0x648>
 800b0f2:	46d0      	mov	r8, sl
 800b0f4:	e7eb      	b.n	800b0ce <_dtoa_r+0x6e6>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	4b6e      	ldr	r3, [pc, #440]	; (800b2b4 <_dtoa_r+0x8cc>)
 800b0fa:	f7f5 fb1b 	bl	8000734 <__aeabi_dmul>
 800b0fe:	2200      	movs	r2, #0
 800b100:	2300      	movs	r3, #0
 800b102:	4680      	mov	r8, r0
 800b104:	4689      	mov	r9, r1
 800b106:	f7f5 fd7d 	bl	8000c04 <__aeabi_dcmpeq>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d09b      	beq.n	800b046 <_dtoa_r+0x65e>
 800b10e:	e7cd      	b.n	800b0ac <_dtoa_r+0x6c4>
 800b110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b112:	2a00      	cmp	r2, #0
 800b114:	f000 80d0 	beq.w	800b2b8 <_dtoa_r+0x8d0>
 800b118:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b11a:	2a01      	cmp	r2, #1
 800b11c:	f300 80ae 	bgt.w	800b27c <_dtoa_r+0x894>
 800b120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b122:	2a00      	cmp	r2, #0
 800b124:	f000 80a6 	beq.w	800b274 <_dtoa_r+0x88c>
 800b128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b12c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b12e:	9f06      	ldr	r7, [sp, #24]
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	2101      	movs	r1, #1
 800b134:	441a      	add	r2, r3
 800b136:	9206      	str	r2, [sp, #24]
 800b138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b13a:	4628      	mov	r0, r5
 800b13c:	441a      	add	r2, r3
 800b13e:	9209      	str	r2, [sp, #36]	; 0x24
 800b140:	f001 f940 	bl	800c3c4 <__i2b>
 800b144:	4606      	mov	r6, r0
 800b146:	2f00      	cmp	r7, #0
 800b148:	dd0c      	ble.n	800b164 <_dtoa_r+0x77c>
 800b14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dd09      	ble.n	800b164 <_dtoa_r+0x77c>
 800b150:	42bb      	cmp	r3, r7
 800b152:	bfa8      	it	ge
 800b154:	463b      	movge	r3, r7
 800b156:	9a06      	ldr	r2, [sp, #24]
 800b158:	1aff      	subs	r7, r7, r3
 800b15a:	1ad2      	subs	r2, r2, r3
 800b15c:	9206      	str	r2, [sp, #24]
 800b15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	9309      	str	r3, [sp, #36]	; 0x24
 800b164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b166:	b1f3      	cbz	r3, 800b1a6 <_dtoa_r+0x7be>
 800b168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f000 80a8 	beq.w	800b2c0 <_dtoa_r+0x8d8>
 800b170:	2c00      	cmp	r4, #0
 800b172:	dd10      	ble.n	800b196 <_dtoa_r+0x7ae>
 800b174:	4631      	mov	r1, r6
 800b176:	4622      	mov	r2, r4
 800b178:	4628      	mov	r0, r5
 800b17a:	f001 f9e1 	bl	800c540 <__pow5mult>
 800b17e:	465a      	mov	r2, fp
 800b180:	4601      	mov	r1, r0
 800b182:	4606      	mov	r6, r0
 800b184:	4628      	mov	r0, r5
 800b186:	f001 f933 	bl	800c3f0 <__multiply>
 800b18a:	4680      	mov	r8, r0
 800b18c:	4659      	mov	r1, fp
 800b18e:	4628      	mov	r0, r5
 800b190:	f001 f818 	bl	800c1c4 <_Bfree>
 800b194:	46c3      	mov	fp, r8
 800b196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b198:	1b1a      	subs	r2, r3, r4
 800b19a:	d004      	beq.n	800b1a6 <_dtoa_r+0x7be>
 800b19c:	4659      	mov	r1, fp
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f001 f9ce 	bl	800c540 <__pow5mult>
 800b1a4:	4683      	mov	fp, r0
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f001 f90b 	bl	800c3c4 <__i2b>
 800b1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f340 8086 	ble.w	800b2c4 <_dtoa_r+0x8dc>
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	4628      	mov	r0, r5
 800b1be:	f001 f9bf 	bl	800c540 <__pow5mult>
 800b1c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	dd7f      	ble.n	800b2ca <_dtoa_r+0x8e2>
 800b1ca:	f04f 0800 	mov.w	r8, #0
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1d4:	6918      	ldr	r0, [r3, #16]
 800b1d6:	f001 f8a7 	bl	800c328 <__hi0bits>
 800b1da:	f1c0 0020 	rsb	r0, r0, #32
 800b1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e0:	4418      	add	r0, r3
 800b1e2:	f010 001f 	ands.w	r0, r0, #31
 800b1e6:	f000 8092 	beq.w	800b30e <_dtoa_r+0x926>
 800b1ea:	f1c0 0320 	rsb	r3, r0, #32
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	f340 808a 	ble.w	800b308 <_dtoa_r+0x920>
 800b1f4:	f1c0 001c 	rsb	r0, r0, #28
 800b1f8:	9b06      	ldr	r3, [sp, #24]
 800b1fa:	4407      	add	r7, r0
 800b1fc:	4403      	add	r3, r0
 800b1fe:	9306      	str	r3, [sp, #24]
 800b200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b202:	4403      	add	r3, r0
 800b204:	9309      	str	r3, [sp, #36]	; 0x24
 800b206:	9b06      	ldr	r3, [sp, #24]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dd05      	ble.n	800b218 <_dtoa_r+0x830>
 800b20c:	4659      	mov	r1, fp
 800b20e:	461a      	mov	r2, r3
 800b210:	4628      	mov	r0, r5
 800b212:	f001 f9ef 	bl	800c5f4 <__lshift>
 800b216:	4683      	mov	fp, r0
 800b218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dd05      	ble.n	800b22a <_dtoa_r+0x842>
 800b21e:	4621      	mov	r1, r4
 800b220:	461a      	mov	r2, r3
 800b222:	4628      	mov	r0, r5
 800b224:	f001 f9e6 	bl	800c5f4 <__lshift>
 800b228:	4604      	mov	r4, r0
 800b22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d070      	beq.n	800b312 <_dtoa_r+0x92a>
 800b230:	4621      	mov	r1, r4
 800b232:	4658      	mov	r0, fp
 800b234:	f001 fa4e 	bl	800c6d4 <__mcmp>
 800b238:	2800      	cmp	r0, #0
 800b23a:	da6a      	bge.n	800b312 <_dtoa_r+0x92a>
 800b23c:	2300      	movs	r3, #0
 800b23e:	4659      	mov	r1, fp
 800b240:	220a      	movs	r2, #10
 800b242:	4628      	mov	r0, r5
 800b244:	f000 ffe0 	bl	800c208 <__multadd>
 800b248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b24a:	4683      	mov	fp, r0
 800b24c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8194 	beq.w	800b57e <_dtoa_r+0xb96>
 800b256:	4631      	mov	r1, r6
 800b258:	2300      	movs	r3, #0
 800b25a:	220a      	movs	r2, #10
 800b25c:	4628      	mov	r0, r5
 800b25e:	f000 ffd3 	bl	800c208 <__multadd>
 800b262:	f1b9 0f00 	cmp.w	r9, #0
 800b266:	4606      	mov	r6, r0
 800b268:	f300 8093 	bgt.w	800b392 <_dtoa_r+0x9aa>
 800b26c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b26e:	2b02      	cmp	r3, #2
 800b270:	dc57      	bgt.n	800b322 <_dtoa_r+0x93a>
 800b272:	e08e      	b.n	800b392 <_dtoa_r+0x9aa>
 800b274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b27a:	e757      	b.n	800b12c <_dtoa_r+0x744>
 800b27c:	9b08      	ldr	r3, [sp, #32]
 800b27e:	1e5c      	subs	r4, r3, #1
 800b280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b282:	42a3      	cmp	r3, r4
 800b284:	bfb7      	itett	lt
 800b286:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b288:	1b1c      	subge	r4, r3, r4
 800b28a:	1ae2      	sublt	r2, r4, r3
 800b28c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b28e:	bfbe      	ittt	lt
 800b290:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b292:	189b      	addlt	r3, r3, r2
 800b294:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	bfb8      	it	lt
 800b29a:	2400      	movlt	r4, #0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfbb      	ittet	lt
 800b2a0:	9b06      	ldrlt	r3, [sp, #24]
 800b2a2:	9a08      	ldrlt	r2, [sp, #32]
 800b2a4:	9f06      	ldrge	r7, [sp, #24]
 800b2a6:	1a9f      	sublt	r7, r3, r2
 800b2a8:	bfac      	ite	ge
 800b2aa:	9b08      	ldrge	r3, [sp, #32]
 800b2ac:	2300      	movlt	r3, #0
 800b2ae:	e73f      	b.n	800b130 <_dtoa_r+0x748>
 800b2b0:	3fe00000 	.word	0x3fe00000
 800b2b4:	40240000 	.word	0x40240000
 800b2b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2ba:	9f06      	ldr	r7, [sp, #24]
 800b2bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b2be:	e742      	b.n	800b146 <_dtoa_r+0x75e>
 800b2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2c2:	e76b      	b.n	800b19c <_dtoa_r+0x7b4>
 800b2c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	dc19      	bgt.n	800b2fe <_dtoa_r+0x916>
 800b2ca:	9b04      	ldr	r3, [sp, #16]
 800b2cc:	b9bb      	cbnz	r3, 800b2fe <_dtoa_r+0x916>
 800b2ce:	9b05      	ldr	r3, [sp, #20]
 800b2d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2d4:	b99b      	cbnz	r3, 800b2fe <_dtoa_r+0x916>
 800b2d6:	9b05      	ldr	r3, [sp, #20]
 800b2d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2dc:	0d1b      	lsrs	r3, r3, #20
 800b2de:	051b      	lsls	r3, r3, #20
 800b2e0:	b183      	cbz	r3, 800b304 <_dtoa_r+0x91c>
 800b2e2:	f04f 0801 	mov.w	r8, #1
 800b2e6:	9b06      	ldr	r3, [sp, #24]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	9306      	str	r3, [sp, #24]
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f47f af6a 	bne.w	800b1ce <_dtoa_r+0x7e6>
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	e76f      	b.n	800b1de <_dtoa_r+0x7f6>
 800b2fe:	f04f 0800 	mov.w	r8, #0
 800b302:	e7f6      	b.n	800b2f2 <_dtoa_r+0x90a>
 800b304:	4698      	mov	r8, r3
 800b306:	e7f4      	b.n	800b2f2 <_dtoa_r+0x90a>
 800b308:	f43f af7d 	beq.w	800b206 <_dtoa_r+0x81e>
 800b30c:	4618      	mov	r0, r3
 800b30e:	301c      	adds	r0, #28
 800b310:	e772      	b.n	800b1f8 <_dtoa_r+0x810>
 800b312:	9b08      	ldr	r3, [sp, #32]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dc36      	bgt.n	800b386 <_dtoa_r+0x99e>
 800b318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	dd33      	ble.n	800b386 <_dtoa_r+0x99e>
 800b31e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b322:	f1b9 0f00 	cmp.w	r9, #0
 800b326:	d10d      	bne.n	800b344 <_dtoa_r+0x95c>
 800b328:	4621      	mov	r1, r4
 800b32a:	464b      	mov	r3, r9
 800b32c:	2205      	movs	r2, #5
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 ff6a 	bl	800c208 <__multadd>
 800b334:	4601      	mov	r1, r0
 800b336:	4604      	mov	r4, r0
 800b338:	4658      	mov	r0, fp
 800b33a:	f001 f9cb 	bl	800c6d4 <__mcmp>
 800b33e:	2800      	cmp	r0, #0
 800b340:	f73f adb8 	bgt.w	800aeb4 <_dtoa_r+0x4cc>
 800b344:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b346:	9f03      	ldr	r7, [sp, #12]
 800b348:	ea6f 0a03 	mvn.w	sl, r3
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	4621      	mov	r1, r4
 800b352:	4628      	mov	r0, r5
 800b354:	f000 ff36 	bl	800c1c4 <_Bfree>
 800b358:	2e00      	cmp	r6, #0
 800b35a:	f43f aea7 	beq.w	800b0ac <_dtoa_r+0x6c4>
 800b35e:	f1b8 0f00 	cmp.w	r8, #0
 800b362:	d005      	beq.n	800b370 <_dtoa_r+0x988>
 800b364:	45b0      	cmp	r8, r6
 800b366:	d003      	beq.n	800b370 <_dtoa_r+0x988>
 800b368:	4641      	mov	r1, r8
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 ff2a 	bl	800c1c4 <_Bfree>
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	f000 ff26 	bl	800c1c4 <_Bfree>
 800b378:	e698      	b.n	800b0ac <_dtoa_r+0x6c4>
 800b37a:	2400      	movs	r4, #0
 800b37c:	4626      	mov	r6, r4
 800b37e:	e7e1      	b.n	800b344 <_dtoa_r+0x95c>
 800b380:	46c2      	mov	sl, r8
 800b382:	4626      	mov	r6, r4
 800b384:	e596      	b.n	800aeb4 <_dtoa_r+0x4cc>
 800b386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 80fd 	beq.w	800b58c <_dtoa_r+0xba4>
 800b392:	2f00      	cmp	r7, #0
 800b394:	dd05      	ble.n	800b3a2 <_dtoa_r+0x9ba>
 800b396:	4631      	mov	r1, r6
 800b398:	463a      	mov	r2, r7
 800b39a:	4628      	mov	r0, r5
 800b39c:	f001 f92a 	bl	800c5f4 <__lshift>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	f1b8 0f00 	cmp.w	r8, #0
 800b3a6:	d05c      	beq.n	800b462 <_dtoa_r+0xa7a>
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	6871      	ldr	r1, [r6, #4]
 800b3ac:	f000 feca 	bl	800c144 <_Balloc>
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	b928      	cbnz	r0, 800b3c0 <_dtoa_r+0x9d8>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3ba:	4b7f      	ldr	r3, [pc, #508]	; (800b5b8 <_dtoa_r+0xbd0>)
 800b3bc:	f7ff bb28 	b.w	800aa10 <_dtoa_r+0x28>
 800b3c0:	6932      	ldr	r2, [r6, #16]
 800b3c2:	f106 010c 	add.w	r1, r6, #12
 800b3c6:	3202      	adds	r2, #2
 800b3c8:	0092      	lsls	r2, r2, #2
 800b3ca:	300c      	adds	r0, #12
 800b3cc:	f7fd fbec 	bl	8008ba8 <memcpy>
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f001 f90d 	bl	800c5f4 <__lshift>
 800b3da:	46b0      	mov	r8, r6
 800b3dc:	4606      	mov	r6, r0
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9308      	str	r3, [sp, #32]
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	444b      	add	r3, r9
 800b3e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ea:	9b04      	ldr	r3, [sp, #16]
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f2:	9b08      	ldr	r3, [sp, #32]
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	4658      	mov	r0, fp
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	f7ff fa68 	bl	800a8d0 <quorem>
 800b400:	4603      	mov	r3, r0
 800b402:	4641      	mov	r1, r8
 800b404:	3330      	adds	r3, #48	; 0x30
 800b406:	9006      	str	r0, [sp, #24]
 800b408:	4658      	mov	r0, fp
 800b40a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b40c:	f001 f962 	bl	800c6d4 <__mcmp>
 800b410:	4632      	mov	r2, r6
 800b412:	4681      	mov	r9, r0
 800b414:	4621      	mov	r1, r4
 800b416:	4628      	mov	r0, r5
 800b418:	f001 f978 	bl	800c70c <__mdiff>
 800b41c:	68c2      	ldr	r2, [r0, #12]
 800b41e:	4607      	mov	r7, r0
 800b420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b422:	bb02      	cbnz	r2, 800b466 <_dtoa_r+0xa7e>
 800b424:	4601      	mov	r1, r0
 800b426:	4658      	mov	r0, fp
 800b428:	f001 f954 	bl	800c6d4 <__mcmp>
 800b42c:	4602      	mov	r2, r0
 800b42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b430:	4639      	mov	r1, r7
 800b432:	4628      	mov	r0, r5
 800b434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b438:	f000 fec4 	bl	800c1c4 <_Bfree>
 800b43c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b43e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b440:	9f08      	ldr	r7, [sp, #32]
 800b442:	ea43 0102 	orr.w	r1, r3, r2
 800b446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b448:	430b      	orrs	r3, r1
 800b44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b44c:	d10d      	bne.n	800b46a <_dtoa_r+0xa82>
 800b44e:	2b39      	cmp	r3, #57	; 0x39
 800b450:	d029      	beq.n	800b4a6 <_dtoa_r+0xabe>
 800b452:	f1b9 0f00 	cmp.w	r9, #0
 800b456:	dd01      	ble.n	800b45c <_dtoa_r+0xa74>
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	3331      	adds	r3, #49	; 0x31
 800b45c:	9a04      	ldr	r2, [sp, #16]
 800b45e:	7013      	strb	r3, [r2, #0]
 800b460:	e776      	b.n	800b350 <_dtoa_r+0x968>
 800b462:	4630      	mov	r0, r6
 800b464:	e7b9      	b.n	800b3da <_dtoa_r+0x9f2>
 800b466:	2201      	movs	r2, #1
 800b468:	e7e2      	b.n	800b430 <_dtoa_r+0xa48>
 800b46a:	f1b9 0f00 	cmp.w	r9, #0
 800b46e:	db06      	blt.n	800b47e <_dtoa_r+0xa96>
 800b470:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b472:	ea41 0909 	orr.w	r9, r1, r9
 800b476:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b478:	ea59 0101 	orrs.w	r1, r9, r1
 800b47c:	d120      	bne.n	800b4c0 <_dtoa_r+0xad8>
 800b47e:	2a00      	cmp	r2, #0
 800b480:	ddec      	ble.n	800b45c <_dtoa_r+0xa74>
 800b482:	4659      	mov	r1, fp
 800b484:	2201      	movs	r2, #1
 800b486:	4628      	mov	r0, r5
 800b488:	9308      	str	r3, [sp, #32]
 800b48a:	f001 f8b3 	bl	800c5f4 <__lshift>
 800b48e:	4621      	mov	r1, r4
 800b490:	4683      	mov	fp, r0
 800b492:	f001 f91f 	bl	800c6d4 <__mcmp>
 800b496:	2800      	cmp	r0, #0
 800b498:	9b08      	ldr	r3, [sp, #32]
 800b49a:	dc02      	bgt.n	800b4a2 <_dtoa_r+0xaba>
 800b49c:	d1de      	bne.n	800b45c <_dtoa_r+0xa74>
 800b49e:	07da      	lsls	r2, r3, #31
 800b4a0:	d5dc      	bpl.n	800b45c <_dtoa_r+0xa74>
 800b4a2:	2b39      	cmp	r3, #57	; 0x39
 800b4a4:	d1d8      	bne.n	800b458 <_dtoa_r+0xa70>
 800b4a6:	2339      	movs	r3, #57	; 0x39
 800b4a8:	9a04      	ldr	r2, [sp, #16]
 800b4aa:	7013      	strb	r3, [r2, #0]
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	2a39      	cmp	r2, #57	; 0x39
 800b4b8:	d050      	beq.n	800b55c <_dtoa_r+0xb74>
 800b4ba:	3201      	adds	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	e747      	b.n	800b350 <_dtoa_r+0x968>
 800b4c0:	2a00      	cmp	r2, #0
 800b4c2:	dd03      	ble.n	800b4cc <_dtoa_r+0xae4>
 800b4c4:	2b39      	cmp	r3, #57	; 0x39
 800b4c6:	d0ee      	beq.n	800b4a6 <_dtoa_r+0xabe>
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	e7c7      	b.n	800b45c <_dtoa_r+0xa74>
 800b4cc:	9a08      	ldr	r2, [sp, #32]
 800b4ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4d4:	428a      	cmp	r2, r1
 800b4d6:	d02a      	beq.n	800b52e <_dtoa_r+0xb46>
 800b4d8:	4659      	mov	r1, fp
 800b4da:	2300      	movs	r3, #0
 800b4dc:	220a      	movs	r2, #10
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 fe92 	bl	800c208 <__multadd>
 800b4e4:	45b0      	cmp	r8, r6
 800b4e6:	4683      	mov	fp, r0
 800b4e8:	f04f 0300 	mov.w	r3, #0
 800b4ec:	f04f 020a 	mov.w	r2, #10
 800b4f0:	4641      	mov	r1, r8
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	d107      	bne.n	800b506 <_dtoa_r+0xb1e>
 800b4f6:	f000 fe87 	bl	800c208 <__multadd>
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	3301      	adds	r3, #1
 800b502:	9308      	str	r3, [sp, #32]
 800b504:	e775      	b.n	800b3f2 <_dtoa_r+0xa0a>
 800b506:	f000 fe7f 	bl	800c208 <__multadd>
 800b50a:	4631      	mov	r1, r6
 800b50c:	4680      	mov	r8, r0
 800b50e:	2300      	movs	r3, #0
 800b510:	220a      	movs	r2, #10
 800b512:	4628      	mov	r0, r5
 800b514:	f000 fe78 	bl	800c208 <__multadd>
 800b518:	4606      	mov	r6, r0
 800b51a:	e7f0      	b.n	800b4fe <_dtoa_r+0xb16>
 800b51c:	f1b9 0f00 	cmp.w	r9, #0
 800b520:	bfcc      	ite	gt
 800b522:	464f      	movgt	r7, r9
 800b524:	2701      	movle	r7, #1
 800b526:	f04f 0800 	mov.w	r8, #0
 800b52a:	9a03      	ldr	r2, [sp, #12]
 800b52c:	4417      	add	r7, r2
 800b52e:	4659      	mov	r1, fp
 800b530:	2201      	movs	r2, #1
 800b532:	4628      	mov	r0, r5
 800b534:	9308      	str	r3, [sp, #32]
 800b536:	f001 f85d 	bl	800c5f4 <__lshift>
 800b53a:	4621      	mov	r1, r4
 800b53c:	4683      	mov	fp, r0
 800b53e:	f001 f8c9 	bl	800c6d4 <__mcmp>
 800b542:	2800      	cmp	r0, #0
 800b544:	dcb2      	bgt.n	800b4ac <_dtoa_r+0xac4>
 800b546:	d102      	bne.n	800b54e <_dtoa_r+0xb66>
 800b548:	9b08      	ldr	r3, [sp, #32]
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d4ae      	bmi.n	800b4ac <_dtoa_r+0xac4>
 800b54e:	463b      	mov	r3, r7
 800b550:	461f      	mov	r7, r3
 800b552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b556:	2a30      	cmp	r2, #48	; 0x30
 800b558:	d0fa      	beq.n	800b550 <_dtoa_r+0xb68>
 800b55a:	e6f9      	b.n	800b350 <_dtoa_r+0x968>
 800b55c:	9a03      	ldr	r2, [sp, #12]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d1a5      	bne.n	800b4ae <_dtoa_r+0xac6>
 800b562:	2331      	movs	r3, #49	; 0x31
 800b564:	f10a 0a01 	add.w	sl, sl, #1
 800b568:	e779      	b.n	800b45e <_dtoa_r+0xa76>
 800b56a:	4b14      	ldr	r3, [pc, #80]	; (800b5bc <_dtoa_r+0xbd4>)
 800b56c:	f7ff baa8 	b.w	800aac0 <_dtoa_r+0xd8>
 800b570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b572:	2b00      	cmp	r3, #0
 800b574:	f47f aa81 	bne.w	800aa7a <_dtoa_r+0x92>
 800b578:	4b11      	ldr	r3, [pc, #68]	; (800b5c0 <_dtoa_r+0xbd8>)
 800b57a:	f7ff baa1 	b.w	800aac0 <_dtoa_r+0xd8>
 800b57e:	f1b9 0f00 	cmp.w	r9, #0
 800b582:	dc03      	bgt.n	800b58c <_dtoa_r+0xba4>
 800b584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b586:	2b02      	cmp	r3, #2
 800b588:	f73f aecb 	bgt.w	800b322 <_dtoa_r+0x93a>
 800b58c:	9f03      	ldr	r7, [sp, #12]
 800b58e:	4621      	mov	r1, r4
 800b590:	4658      	mov	r0, fp
 800b592:	f7ff f99d 	bl	800a8d0 <quorem>
 800b596:	9a03      	ldr	r2, [sp, #12]
 800b598:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b59c:	f807 3b01 	strb.w	r3, [r7], #1
 800b5a0:	1aba      	subs	r2, r7, r2
 800b5a2:	4591      	cmp	r9, r2
 800b5a4:	ddba      	ble.n	800b51c <_dtoa_r+0xb34>
 800b5a6:	4659      	mov	r1, fp
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	220a      	movs	r2, #10
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f000 fe2b 	bl	800c208 <__multadd>
 800b5b2:	4683      	mov	fp, r0
 800b5b4:	e7eb      	b.n	800b58e <_dtoa_r+0xba6>
 800b5b6:	bf00      	nop
 800b5b8:	0800d901 	.word	0x0800d901
 800b5bc:	0800d668 	.word	0x0800d668
 800b5c0:	0800d899 	.word	0x0800d899

0800b5c4 <__sflush_r>:
 800b5c4:	898a      	ldrh	r2, [r1, #12]
 800b5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	0710      	lsls	r0, r2, #28
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	d457      	bmi.n	800b680 <__sflush_r+0xbc>
 800b5d0:	684b      	ldr	r3, [r1, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dc04      	bgt.n	800b5e0 <__sflush_r+0x1c>
 800b5d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc01      	bgt.n	800b5e0 <__sflush_r+0x1c>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d0fa      	beq.n	800b5dc <__sflush_r+0x18>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5ec:	682f      	ldr	r7, [r5, #0]
 800b5ee:	602b      	str	r3, [r5, #0]
 800b5f0:	d032      	beq.n	800b658 <__sflush_r+0x94>
 800b5f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	075a      	lsls	r2, r3, #29
 800b5f8:	d505      	bpl.n	800b606 <__sflush_r+0x42>
 800b5fa:	6863      	ldr	r3, [r4, #4]
 800b5fc:	1ac0      	subs	r0, r0, r3
 800b5fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b600:	b10b      	cbz	r3, 800b606 <__sflush_r+0x42>
 800b602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b604:	1ac0      	subs	r0, r0, r3
 800b606:	2300      	movs	r3, #0
 800b608:	4602      	mov	r2, r0
 800b60a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b60c:	4628      	mov	r0, r5
 800b60e:	6a21      	ldr	r1, [r4, #32]
 800b610:	47b0      	blx	r6
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	d106      	bne.n	800b626 <__sflush_r+0x62>
 800b618:	6829      	ldr	r1, [r5, #0]
 800b61a:	291d      	cmp	r1, #29
 800b61c:	d82c      	bhi.n	800b678 <__sflush_r+0xb4>
 800b61e:	4a29      	ldr	r2, [pc, #164]	; (800b6c4 <__sflush_r+0x100>)
 800b620:	40ca      	lsrs	r2, r1
 800b622:	07d6      	lsls	r6, r2, #31
 800b624:	d528      	bpl.n	800b678 <__sflush_r+0xb4>
 800b626:	2200      	movs	r2, #0
 800b628:	6062      	str	r2, [r4, #4]
 800b62a:	6922      	ldr	r2, [r4, #16]
 800b62c:	04d9      	lsls	r1, r3, #19
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	d504      	bpl.n	800b63c <__sflush_r+0x78>
 800b632:	1c42      	adds	r2, r0, #1
 800b634:	d101      	bne.n	800b63a <__sflush_r+0x76>
 800b636:	682b      	ldr	r3, [r5, #0]
 800b638:	b903      	cbnz	r3, 800b63c <__sflush_r+0x78>
 800b63a:	6560      	str	r0, [r4, #84]	; 0x54
 800b63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b63e:	602f      	str	r7, [r5, #0]
 800b640:	2900      	cmp	r1, #0
 800b642:	d0cb      	beq.n	800b5dc <__sflush_r+0x18>
 800b644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b648:	4299      	cmp	r1, r3
 800b64a:	d002      	beq.n	800b652 <__sflush_r+0x8e>
 800b64c:	4628      	mov	r0, r5
 800b64e:	f001 fa45 	bl	800cadc <_free_r>
 800b652:	2000      	movs	r0, #0
 800b654:	6360      	str	r0, [r4, #52]	; 0x34
 800b656:	e7c2      	b.n	800b5de <__sflush_r+0x1a>
 800b658:	6a21      	ldr	r1, [r4, #32]
 800b65a:	2301      	movs	r3, #1
 800b65c:	4628      	mov	r0, r5
 800b65e:	47b0      	blx	r6
 800b660:	1c41      	adds	r1, r0, #1
 800b662:	d1c7      	bne.n	800b5f4 <__sflush_r+0x30>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0c4      	beq.n	800b5f4 <__sflush_r+0x30>
 800b66a:	2b1d      	cmp	r3, #29
 800b66c:	d001      	beq.n	800b672 <__sflush_r+0xae>
 800b66e:	2b16      	cmp	r3, #22
 800b670:	d101      	bne.n	800b676 <__sflush_r+0xb2>
 800b672:	602f      	str	r7, [r5, #0]
 800b674:	e7b2      	b.n	800b5dc <__sflush_r+0x18>
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e7ae      	b.n	800b5de <__sflush_r+0x1a>
 800b680:	690f      	ldr	r7, [r1, #16]
 800b682:	2f00      	cmp	r7, #0
 800b684:	d0aa      	beq.n	800b5dc <__sflush_r+0x18>
 800b686:	0793      	lsls	r3, r2, #30
 800b688:	bf18      	it	ne
 800b68a:	2300      	movne	r3, #0
 800b68c:	680e      	ldr	r6, [r1, #0]
 800b68e:	bf08      	it	eq
 800b690:	694b      	ldreq	r3, [r1, #20]
 800b692:	1bf6      	subs	r6, r6, r7
 800b694:	600f      	str	r7, [r1, #0]
 800b696:	608b      	str	r3, [r1, #8]
 800b698:	2e00      	cmp	r6, #0
 800b69a:	dd9f      	ble.n	800b5dc <__sflush_r+0x18>
 800b69c:	4633      	mov	r3, r6
 800b69e:	463a      	mov	r2, r7
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	6a21      	ldr	r1, [r4, #32]
 800b6a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b6a8:	47e0      	blx	ip
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dc06      	bgt.n	800b6bc <__sflush_r+0xf8>
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	e790      	b.n	800b5de <__sflush_r+0x1a>
 800b6bc:	4407      	add	r7, r0
 800b6be:	1a36      	subs	r6, r6, r0
 800b6c0:	e7ea      	b.n	800b698 <__sflush_r+0xd4>
 800b6c2:	bf00      	nop
 800b6c4:	20400001 	.word	0x20400001

0800b6c8 <_fflush_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	690b      	ldr	r3, [r1, #16]
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	b913      	cbnz	r3, 800b6d8 <_fflush_r+0x10>
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	b118      	cbz	r0, 800b6e2 <_fflush_r+0x1a>
 800b6da:	6983      	ldr	r3, [r0, #24]
 800b6dc:	b90b      	cbnz	r3, 800b6e2 <_fflush_r+0x1a>
 800b6de:	f000 f887 	bl	800b7f0 <__sinit>
 800b6e2:	4b14      	ldr	r3, [pc, #80]	; (800b734 <_fflush_r+0x6c>)
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	d11b      	bne.n	800b720 <_fflush_r+0x58>
 800b6e8:	686c      	ldr	r4, [r5, #4]
 800b6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0ef      	beq.n	800b6d2 <_fflush_r+0xa>
 800b6f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6f4:	07d0      	lsls	r0, r2, #31
 800b6f6:	d404      	bmi.n	800b702 <_fflush_r+0x3a>
 800b6f8:	0599      	lsls	r1, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <_fflush_r+0x3a>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6fe:	f000 fc92 	bl	800c026 <__retarget_lock_acquire_recursive>
 800b702:	4628      	mov	r0, r5
 800b704:	4621      	mov	r1, r4
 800b706:	f7ff ff5d 	bl	800b5c4 <__sflush_r>
 800b70a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b70c:	4605      	mov	r5, r0
 800b70e:	07da      	lsls	r2, r3, #31
 800b710:	d4e0      	bmi.n	800b6d4 <_fflush_r+0xc>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	059b      	lsls	r3, r3, #22
 800b716:	d4dd      	bmi.n	800b6d4 <_fflush_r+0xc>
 800b718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b71a:	f000 fc85 	bl	800c028 <__retarget_lock_release_recursive>
 800b71e:	e7d9      	b.n	800b6d4 <_fflush_r+0xc>
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <_fflush_r+0x70>)
 800b722:	429c      	cmp	r4, r3
 800b724:	d101      	bne.n	800b72a <_fflush_r+0x62>
 800b726:	68ac      	ldr	r4, [r5, #8]
 800b728:	e7df      	b.n	800b6ea <_fflush_r+0x22>
 800b72a:	4b04      	ldr	r3, [pc, #16]	; (800b73c <_fflush_r+0x74>)
 800b72c:	429c      	cmp	r4, r3
 800b72e:	bf08      	it	eq
 800b730:	68ec      	ldreq	r4, [r5, #12]
 800b732:	e7da      	b.n	800b6ea <_fflush_r+0x22>
 800b734:	0800d934 	.word	0x0800d934
 800b738:	0800d954 	.word	0x0800d954
 800b73c:	0800d914 	.word	0x0800d914

0800b740 <std>:
 800b740:	2300      	movs	r3, #0
 800b742:	b510      	push	{r4, lr}
 800b744:	4604      	mov	r4, r0
 800b746:	e9c0 3300 	strd	r3, r3, [r0]
 800b74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b74e:	6083      	str	r3, [r0, #8]
 800b750:	8181      	strh	r1, [r0, #12]
 800b752:	6643      	str	r3, [r0, #100]	; 0x64
 800b754:	81c2      	strh	r2, [r0, #14]
 800b756:	6183      	str	r3, [r0, #24]
 800b758:	4619      	mov	r1, r3
 800b75a:	2208      	movs	r2, #8
 800b75c:	305c      	adds	r0, #92	; 0x5c
 800b75e:	f7fd fa31 	bl	8008bc4 <memset>
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <std+0x38>)
 800b764:	6224      	str	r4, [r4, #32]
 800b766:	6263      	str	r3, [r4, #36]	; 0x24
 800b768:	4b04      	ldr	r3, [pc, #16]	; (800b77c <std+0x3c>)
 800b76a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b76c:	4b04      	ldr	r3, [pc, #16]	; (800b780 <std+0x40>)
 800b76e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b770:	4b04      	ldr	r3, [pc, #16]	; (800b784 <std+0x44>)
 800b772:	6323      	str	r3, [r4, #48]	; 0x30
 800b774:	bd10      	pop	{r4, pc}
 800b776:	bf00      	nop
 800b778:	0800d229 	.word	0x0800d229
 800b77c:	0800d24b 	.word	0x0800d24b
 800b780:	0800d283 	.word	0x0800d283
 800b784:	0800d2a7 	.word	0x0800d2a7

0800b788 <_cleanup_r>:
 800b788:	4901      	ldr	r1, [pc, #4]	; (800b790 <_cleanup_r+0x8>)
 800b78a:	f000 b8c1 	b.w	800b910 <_fwalk_reent>
 800b78e:	bf00      	nop
 800b790:	0800b6c9 	.word	0x0800b6c9

0800b794 <__sfmoreglue>:
 800b794:	2268      	movs	r2, #104	; 0x68
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	1e4d      	subs	r5, r1, #1
 800b79a:	4355      	muls	r5, r2
 800b79c:	460e      	mov	r6, r1
 800b79e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7a2:	f001 fa03 	bl	800cbac <_malloc_r>
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	b140      	cbz	r0, 800b7bc <__sfmoreglue+0x28>
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	e9c0 1600 	strd	r1, r6, [r0]
 800b7b0:	300c      	adds	r0, #12
 800b7b2:	60a0      	str	r0, [r4, #8]
 800b7b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7b8:	f7fd fa04 	bl	8008bc4 <memset>
 800b7bc:	4620      	mov	r0, r4
 800b7be:	bd70      	pop	{r4, r5, r6, pc}

0800b7c0 <__sfp_lock_acquire>:
 800b7c0:	4801      	ldr	r0, [pc, #4]	; (800b7c8 <__sfp_lock_acquire+0x8>)
 800b7c2:	f000 bc30 	b.w	800c026 <__retarget_lock_acquire_recursive>
 800b7c6:	bf00      	nop
 800b7c8:	20000c9d 	.word	0x20000c9d

0800b7cc <__sfp_lock_release>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__sfp_lock_release+0x8>)
 800b7ce:	f000 bc2b 	b.w	800c028 <__retarget_lock_release_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	20000c9d 	.word	0x20000c9d

0800b7d8 <__sinit_lock_acquire>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sinit_lock_acquire+0x8>)
 800b7da:	f000 bc24 	b.w	800c026 <__retarget_lock_acquire_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20000c9e 	.word	0x20000c9e

0800b7e4 <__sinit_lock_release>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__sinit_lock_release+0x8>)
 800b7e6:	f000 bc1f 	b.w	800c028 <__retarget_lock_release_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20000c9e 	.word	0x20000c9e

0800b7f0 <__sinit>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	f7ff fff0 	bl	800b7d8 <__sinit_lock_acquire>
 800b7f8:	69a3      	ldr	r3, [r4, #24]
 800b7fa:	b11b      	cbz	r3, 800b804 <__sinit+0x14>
 800b7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b800:	f7ff bff0 	b.w	800b7e4 <__sinit_lock_release>
 800b804:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b808:	6523      	str	r3, [r4, #80]	; 0x50
 800b80a:	4b13      	ldr	r3, [pc, #76]	; (800b858 <__sinit+0x68>)
 800b80c:	4a13      	ldr	r2, [pc, #76]	; (800b85c <__sinit+0x6c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	62a2      	str	r2, [r4, #40]	; 0x28
 800b812:	42a3      	cmp	r3, r4
 800b814:	bf08      	it	eq
 800b816:	2301      	moveq	r3, #1
 800b818:	4620      	mov	r0, r4
 800b81a:	bf08      	it	eq
 800b81c:	61a3      	streq	r3, [r4, #24]
 800b81e:	f000 f81f 	bl	800b860 <__sfp>
 800b822:	6060      	str	r0, [r4, #4]
 800b824:	4620      	mov	r0, r4
 800b826:	f000 f81b 	bl	800b860 <__sfp>
 800b82a:	60a0      	str	r0, [r4, #8]
 800b82c:	4620      	mov	r0, r4
 800b82e:	f000 f817 	bl	800b860 <__sfp>
 800b832:	2200      	movs	r2, #0
 800b834:	2104      	movs	r1, #4
 800b836:	60e0      	str	r0, [r4, #12]
 800b838:	6860      	ldr	r0, [r4, #4]
 800b83a:	f7ff ff81 	bl	800b740 <std>
 800b83e:	2201      	movs	r2, #1
 800b840:	2109      	movs	r1, #9
 800b842:	68a0      	ldr	r0, [r4, #8]
 800b844:	f7ff ff7c 	bl	800b740 <std>
 800b848:	2202      	movs	r2, #2
 800b84a:	2112      	movs	r1, #18
 800b84c:	68e0      	ldr	r0, [r4, #12]
 800b84e:	f7ff ff77 	bl	800b740 <std>
 800b852:	2301      	movs	r3, #1
 800b854:	61a3      	str	r3, [r4, #24]
 800b856:	e7d1      	b.n	800b7fc <__sinit+0xc>
 800b858:	0800d654 	.word	0x0800d654
 800b85c:	0800b789 	.word	0x0800b789

0800b860 <__sfp>:
 800b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b862:	4607      	mov	r7, r0
 800b864:	f7ff ffac 	bl	800b7c0 <__sfp_lock_acquire>
 800b868:	4b1e      	ldr	r3, [pc, #120]	; (800b8e4 <__sfp+0x84>)
 800b86a:	681e      	ldr	r6, [r3, #0]
 800b86c:	69b3      	ldr	r3, [r6, #24]
 800b86e:	b913      	cbnz	r3, 800b876 <__sfp+0x16>
 800b870:	4630      	mov	r0, r6
 800b872:	f7ff ffbd 	bl	800b7f0 <__sinit>
 800b876:	3648      	adds	r6, #72	; 0x48
 800b878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	d503      	bpl.n	800b888 <__sfp+0x28>
 800b880:	6833      	ldr	r3, [r6, #0]
 800b882:	b30b      	cbz	r3, 800b8c8 <__sfp+0x68>
 800b884:	6836      	ldr	r6, [r6, #0]
 800b886:	e7f7      	b.n	800b878 <__sfp+0x18>
 800b888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b88c:	b9d5      	cbnz	r5, 800b8c4 <__sfp+0x64>
 800b88e:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <__sfp+0x88>)
 800b890:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b894:	60e3      	str	r3, [r4, #12]
 800b896:	6665      	str	r5, [r4, #100]	; 0x64
 800b898:	f000 fbc4 	bl	800c024 <__retarget_lock_init_recursive>
 800b89c:	f7ff ff96 	bl	800b7cc <__sfp_lock_release>
 800b8a0:	2208      	movs	r2, #8
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8ac:	6025      	str	r5, [r4, #0]
 800b8ae:	61a5      	str	r5, [r4, #24]
 800b8b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8b4:	f7fd f986 	bl	8008bc4 <memset>
 800b8b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c4:	3468      	adds	r4, #104	; 0x68
 800b8c6:	e7d9      	b.n	800b87c <__sfp+0x1c>
 800b8c8:	2104      	movs	r1, #4
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7ff ff62 	bl	800b794 <__sfmoreglue>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	6030      	str	r0, [r6, #0]
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d1d5      	bne.n	800b884 <__sfp+0x24>
 800b8d8:	f7ff ff78 	bl	800b7cc <__sfp_lock_release>
 800b8dc:	230c      	movs	r3, #12
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	e7ee      	b.n	800b8c0 <__sfp+0x60>
 800b8e2:	bf00      	nop
 800b8e4:	0800d654 	.word	0x0800d654
 800b8e8:	ffff0001 	.word	0xffff0001

0800b8ec <fiprintf>:
 800b8ec:	b40e      	push	{r1, r2, r3}
 800b8ee:	b503      	push	{r0, r1, lr}
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	4805      	ldr	r0, [pc, #20]	; (800b90c <fiprintf+0x20>)
 800b8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8fa:	6800      	ldr	r0, [r0, #0]
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	f001 fb4d 	bl	800cf9c <_vfiprintf_r>
 800b902:	b002      	add	sp, #8
 800b904:	f85d eb04 	ldr.w	lr, [sp], #4
 800b908:	b003      	add	sp, #12
 800b90a:	4770      	bx	lr
 800b90c:	200005ec 	.word	0x200005ec

0800b910 <_fwalk_reent>:
 800b910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b914:	4606      	mov	r6, r0
 800b916:	4688      	mov	r8, r1
 800b918:	2700      	movs	r7, #0
 800b91a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b91e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b922:	f1b9 0901 	subs.w	r9, r9, #1
 800b926:	d505      	bpl.n	800b934 <_fwalk_reent+0x24>
 800b928:	6824      	ldr	r4, [r4, #0]
 800b92a:	2c00      	cmp	r4, #0
 800b92c:	d1f7      	bne.n	800b91e <_fwalk_reent+0xe>
 800b92e:	4638      	mov	r0, r7
 800b930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b934:	89ab      	ldrh	r3, [r5, #12]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d907      	bls.n	800b94a <_fwalk_reent+0x3a>
 800b93a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b93e:	3301      	adds	r3, #1
 800b940:	d003      	beq.n	800b94a <_fwalk_reent+0x3a>
 800b942:	4629      	mov	r1, r5
 800b944:	4630      	mov	r0, r6
 800b946:	47c0      	blx	r8
 800b948:	4307      	orrs	r7, r0
 800b94a:	3568      	adds	r5, #104	; 0x68
 800b94c:	e7e9      	b.n	800b922 <_fwalk_reent+0x12>

0800b94e <rshift>:
 800b94e:	6903      	ldr	r3, [r0, #16]
 800b950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b954:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b958:	f100 0414 	add.w	r4, r0, #20
 800b95c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b960:	dd46      	ble.n	800b9f0 <rshift+0xa2>
 800b962:	f011 011f 	ands.w	r1, r1, #31
 800b966:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b96a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b96e:	d10c      	bne.n	800b98a <rshift+0x3c>
 800b970:	4629      	mov	r1, r5
 800b972:	f100 0710 	add.w	r7, r0, #16
 800b976:	42b1      	cmp	r1, r6
 800b978:	d335      	bcc.n	800b9e6 <rshift+0x98>
 800b97a:	1a9b      	subs	r3, r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	1eea      	subs	r2, r5, #3
 800b980:	4296      	cmp	r6, r2
 800b982:	bf38      	it	cc
 800b984:	2300      	movcc	r3, #0
 800b986:	4423      	add	r3, r4
 800b988:	e015      	b.n	800b9b6 <rshift+0x68>
 800b98a:	46a1      	mov	r9, r4
 800b98c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b990:	f1c1 0820 	rsb	r8, r1, #32
 800b994:	40cf      	lsrs	r7, r1
 800b996:	f105 0e04 	add.w	lr, r5, #4
 800b99a:	4576      	cmp	r6, lr
 800b99c:	46f4      	mov	ip, lr
 800b99e:	d816      	bhi.n	800b9ce <rshift+0x80>
 800b9a0:	1a9a      	subs	r2, r3, r2
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	3a04      	subs	r2, #4
 800b9a6:	3501      	adds	r5, #1
 800b9a8:	42ae      	cmp	r6, r5
 800b9aa:	bf38      	it	cc
 800b9ac:	2200      	movcc	r2, #0
 800b9ae:	18a3      	adds	r3, r4, r2
 800b9b0:	50a7      	str	r7, [r4, r2]
 800b9b2:	b107      	cbz	r7, 800b9b6 <rshift+0x68>
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	eba3 0204 	sub.w	r2, r3, r4
 800b9bc:	bf08      	it	eq
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9c4:	6102      	str	r2, [r0, #16]
 800b9c6:	bf08      	it	eq
 800b9c8:	6143      	streq	r3, [r0, #20]
 800b9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ce:	f8dc c000 	ldr.w	ip, [ip]
 800b9d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b9d6:	ea4c 0707 	orr.w	r7, ip, r7
 800b9da:	f849 7b04 	str.w	r7, [r9], #4
 800b9de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9e2:	40cf      	lsrs	r7, r1
 800b9e4:	e7d9      	b.n	800b99a <rshift+0x4c>
 800b9e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9ee:	e7c2      	b.n	800b976 <rshift+0x28>
 800b9f0:	4623      	mov	r3, r4
 800b9f2:	e7e0      	b.n	800b9b6 <rshift+0x68>

0800b9f4 <__hexdig_fun>:
 800b9f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b9f8:	2b09      	cmp	r3, #9
 800b9fa:	d802      	bhi.n	800ba02 <__hexdig_fun+0xe>
 800b9fc:	3820      	subs	r0, #32
 800b9fe:	b2c0      	uxtb	r0, r0
 800ba00:	4770      	bx	lr
 800ba02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba06:	2b05      	cmp	r3, #5
 800ba08:	d801      	bhi.n	800ba0e <__hexdig_fun+0x1a>
 800ba0a:	3847      	subs	r0, #71	; 0x47
 800ba0c:	e7f7      	b.n	800b9fe <__hexdig_fun+0xa>
 800ba0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d801      	bhi.n	800ba1a <__hexdig_fun+0x26>
 800ba16:	3827      	subs	r0, #39	; 0x27
 800ba18:	e7f1      	b.n	800b9fe <__hexdig_fun+0xa>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	4770      	bx	lr
	...

0800ba20 <__gethex>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	b08b      	sub	sp, #44	; 0x2c
 800ba26:	9305      	str	r3, [sp, #20]
 800ba28:	4bb2      	ldr	r3, [pc, #712]	; (800bcf4 <__gethex+0x2d4>)
 800ba2a:	9002      	str	r0, [sp, #8]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	468b      	mov	fp, r1
 800ba30:	4618      	mov	r0, r3
 800ba32:	4690      	mov	r8, r2
 800ba34:	9303      	str	r3, [sp, #12]
 800ba36:	f7f4 fc05 	bl	8000244 <strlen>
 800ba3a:	4682      	mov	sl, r0
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	f8db 2000 	ldr.w	r2, [fp]
 800ba42:	4403      	add	r3, r0
 800ba44:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ba48:	9306      	str	r3, [sp, #24]
 800ba4a:	1c93      	adds	r3, r2, #2
 800ba4c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba50:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba54:	32fe      	adds	r2, #254	; 0xfe
 800ba56:	18d1      	adds	r1, r2, r3
 800ba58:	461f      	mov	r7, r3
 800ba5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba5e:	9101      	str	r1, [sp, #4]
 800ba60:	2830      	cmp	r0, #48	; 0x30
 800ba62:	d0f8      	beq.n	800ba56 <__gethex+0x36>
 800ba64:	f7ff ffc6 	bl	800b9f4 <__hexdig_fun>
 800ba68:	4604      	mov	r4, r0
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d13a      	bne.n	800bae4 <__gethex+0xc4>
 800ba6e:	4652      	mov	r2, sl
 800ba70:	4638      	mov	r0, r7
 800ba72:	9903      	ldr	r1, [sp, #12]
 800ba74:	f001 fc1b 	bl	800d2ae <strncmp>
 800ba78:	4605      	mov	r5, r0
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d166      	bne.n	800bb4c <__gethex+0x12c>
 800ba7e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba82:	eb07 060a 	add.w	r6, r7, sl
 800ba86:	f7ff ffb5 	bl	800b9f4 <__hexdig_fun>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d060      	beq.n	800bb50 <__gethex+0x130>
 800ba8e:	4633      	mov	r3, r6
 800ba90:	7818      	ldrb	r0, [r3, #0]
 800ba92:	461f      	mov	r7, r3
 800ba94:	2830      	cmp	r0, #48	; 0x30
 800ba96:	f103 0301 	add.w	r3, r3, #1
 800ba9a:	d0f9      	beq.n	800ba90 <__gethex+0x70>
 800ba9c:	f7ff ffaa 	bl	800b9f4 <__hexdig_fun>
 800baa0:	2301      	movs	r3, #1
 800baa2:	fab0 f480 	clz	r4, r0
 800baa6:	4635      	mov	r5, r6
 800baa8:	0964      	lsrs	r4, r4, #5
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	463a      	mov	r2, r7
 800baae:	4616      	mov	r6, r2
 800bab0:	7830      	ldrb	r0, [r6, #0]
 800bab2:	3201      	adds	r2, #1
 800bab4:	f7ff ff9e 	bl	800b9f4 <__hexdig_fun>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d1f8      	bne.n	800baae <__gethex+0x8e>
 800babc:	4652      	mov	r2, sl
 800babe:	4630      	mov	r0, r6
 800bac0:	9903      	ldr	r1, [sp, #12]
 800bac2:	f001 fbf4 	bl	800d2ae <strncmp>
 800bac6:	b980      	cbnz	r0, 800baea <__gethex+0xca>
 800bac8:	b94d      	cbnz	r5, 800bade <__gethex+0xbe>
 800baca:	eb06 050a 	add.w	r5, r6, sl
 800bace:	462a      	mov	r2, r5
 800bad0:	4616      	mov	r6, r2
 800bad2:	7830      	ldrb	r0, [r6, #0]
 800bad4:	3201      	adds	r2, #1
 800bad6:	f7ff ff8d 	bl	800b9f4 <__hexdig_fun>
 800bada:	2800      	cmp	r0, #0
 800badc:	d1f8      	bne.n	800bad0 <__gethex+0xb0>
 800bade:	1bad      	subs	r5, r5, r6
 800bae0:	00ad      	lsls	r5, r5, #2
 800bae2:	e004      	b.n	800baee <__gethex+0xce>
 800bae4:	2400      	movs	r4, #0
 800bae6:	4625      	mov	r5, r4
 800bae8:	e7e0      	b.n	800baac <__gethex+0x8c>
 800baea:	2d00      	cmp	r5, #0
 800baec:	d1f7      	bne.n	800bade <__gethex+0xbe>
 800baee:	7833      	ldrb	r3, [r6, #0]
 800baf0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800baf4:	2b50      	cmp	r3, #80	; 0x50
 800baf6:	d139      	bne.n	800bb6c <__gethex+0x14c>
 800baf8:	7873      	ldrb	r3, [r6, #1]
 800bafa:	2b2b      	cmp	r3, #43	; 0x2b
 800bafc:	d02a      	beq.n	800bb54 <__gethex+0x134>
 800bafe:	2b2d      	cmp	r3, #45	; 0x2d
 800bb00:	d02c      	beq.n	800bb5c <__gethex+0x13c>
 800bb02:	f04f 0900 	mov.w	r9, #0
 800bb06:	1c71      	adds	r1, r6, #1
 800bb08:	7808      	ldrb	r0, [r1, #0]
 800bb0a:	f7ff ff73 	bl	800b9f4 <__hexdig_fun>
 800bb0e:	1e43      	subs	r3, r0, #1
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b18      	cmp	r3, #24
 800bb14:	d82a      	bhi.n	800bb6c <__gethex+0x14c>
 800bb16:	f1a0 0210 	sub.w	r2, r0, #16
 800bb1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb1e:	f7ff ff69 	bl	800b9f4 <__hexdig_fun>
 800bb22:	1e43      	subs	r3, r0, #1
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b18      	cmp	r3, #24
 800bb28:	d91b      	bls.n	800bb62 <__gethex+0x142>
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	d000      	beq.n	800bb32 <__gethex+0x112>
 800bb30:	4252      	negs	r2, r2
 800bb32:	4415      	add	r5, r2
 800bb34:	f8cb 1000 	str.w	r1, [fp]
 800bb38:	b1d4      	cbz	r4, 800bb70 <__gethex+0x150>
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	bf14      	ite	ne
 800bb40:	2700      	movne	r7, #0
 800bb42:	2706      	moveq	r7, #6
 800bb44:	4638      	mov	r0, r7
 800bb46:	b00b      	add	sp, #44	; 0x2c
 800bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4c:	463e      	mov	r6, r7
 800bb4e:	4625      	mov	r5, r4
 800bb50:	2401      	movs	r4, #1
 800bb52:	e7cc      	b.n	800baee <__gethex+0xce>
 800bb54:	f04f 0900 	mov.w	r9, #0
 800bb58:	1cb1      	adds	r1, r6, #2
 800bb5a:	e7d5      	b.n	800bb08 <__gethex+0xe8>
 800bb5c:	f04f 0901 	mov.w	r9, #1
 800bb60:	e7fa      	b.n	800bb58 <__gethex+0x138>
 800bb62:	230a      	movs	r3, #10
 800bb64:	fb03 0202 	mla	r2, r3, r2, r0
 800bb68:	3a10      	subs	r2, #16
 800bb6a:	e7d6      	b.n	800bb1a <__gethex+0xfa>
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	e7e1      	b.n	800bb34 <__gethex+0x114>
 800bb70:	4621      	mov	r1, r4
 800bb72:	1bf3      	subs	r3, r6, r7
 800bb74:	3b01      	subs	r3, #1
 800bb76:	2b07      	cmp	r3, #7
 800bb78:	dc0a      	bgt.n	800bb90 <__gethex+0x170>
 800bb7a:	9802      	ldr	r0, [sp, #8]
 800bb7c:	f000 fae2 	bl	800c144 <_Balloc>
 800bb80:	4604      	mov	r4, r0
 800bb82:	b940      	cbnz	r0, 800bb96 <__gethex+0x176>
 800bb84:	4602      	mov	r2, r0
 800bb86:	21de      	movs	r1, #222	; 0xde
 800bb88:	4b5b      	ldr	r3, [pc, #364]	; (800bcf8 <__gethex+0x2d8>)
 800bb8a:	485c      	ldr	r0, [pc, #368]	; (800bcfc <__gethex+0x2dc>)
 800bb8c:	f7fe fe82 	bl	800a894 <__assert_func>
 800bb90:	3101      	adds	r1, #1
 800bb92:	105b      	asrs	r3, r3, #1
 800bb94:	e7ef      	b.n	800bb76 <__gethex+0x156>
 800bb96:	f04f 0b00 	mov.w	fp, #0
 800bb9a:	f100 0914 	add.w	r9, r0, #20
 800bb9e:	f1ca 0301 	rsb	r3, sl, #1
 800bba2:	f8cd 9010 	str.w	r9, [sp, #16]
 800bba6:	f8cd b004 	str.w	fp, [sp, #4]
 800bbaa:	9308      	str	r3, [sp, #32]
 800bbac:	42b7      	cmp	r7, r6
 800bbae:	d33f      	bcc.n	800bc30 <__gethex+0x210>
 800bbb0:	9f04      	ldr	r7, [sp, #16]
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	f847 3b04 	str.w	r3, [r7], #4
 800bbb8:	eba7 0709 	sub.w	r7, r7, r9
 800bbbc:	10bf      	asrs	r7, r7, #2
 800bbbe:	6127      	str	r7, [r4, #16]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fbb1 	bl	800c328 <__hi0bits>
 800bbc6:	017f      	lsls	r7, r7, #5
 800bbc8:	f8d8 6000 	ldr.w	r6, [r8]
 800bbcc:	1a3f      	subs	r7, r7, r0
 800bbce:	42b7      	cmp	r7, r6
 800bbd0:	dd62      	ble.n	800bc98 <__gethex+0x278>
 800bbd2:	1bbf      	subs	r7, r7, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 ff4b 	bl	800ca72 <__any_on>
 800bbdc:	4682      	mov	sl, r0
 800bbde:	b1a8      	cbz	r0, 800bc0c <__gethex+0x1ec>
 800bbe0:	f04f 0a01 	mov.w	sl, #1
 800bbe4:	1e7b      	subs	r3, r7, #1
 800bbe6:	1159      	asrs	r1, r3, #5
 800bbe8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bbec:	f003 021f 	and.w	r2, r3, #31
 800bbf0:	fa0a f202 	lsl.w	r2, sl, r2
 800bbf4:	420a      	tst	r2, r1
 800bbf6:	d009      	beq.n	800bc0c <__gethex+0x1ec>
 800bbf8:	4553      	cmp	r3, sl
 800bbfa:	dd05      	ble.n	800bc08 <__gethex+0x1e8>
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	1eb9      	subs	r1, r7, #2
 800bc00:	f000 ff37 	bl	800ca72 <__any_on>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d144      	bne.n	800bc92 <__gethex+0x272>
 800bc08:	f04f 0a02 	mov.w	sl, #2
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff fe9d 	bl	800b94e <rshift>
 800bc14:	443d      	add	r5, r7
 800bc16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc1a:	42ab      	cmp	r3, r5
 800bc1c:	da4a      	bge.n	800bcb4 <__gethex+0x294>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	9802      	ldr	r0, [sp, #8]
 800bc22:	f000 facf 	bl	800c1c4 <_Bfree>
 800bc26:	2300      	movs	r3, #0
 800bc28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc2a:	27a3      	movs	r7, #163	; 0xa3
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	e789      	b.n	800bb44 <__gethex+0x124>
 800bc30:	1e73      	subs	r3, r6, #1
 800bc32:	9a06      	ldr	r2, [sp, #24]
 800bc34:	9307      	str	r3, [sp, #28]
 800bc36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d019      	beq.n	800bc72 <__gethex+0x252>
 800bc3e:	f1bb 0f20 	cmp.w	fp, #32
 800bc42:	d107      	bne.n	800bc54 <__gethex+0x234>
 800bc44:	9b04      	ldr	r3, [sp, #16]
 800bc46:	9a01      	ldr	r2, [sp, #4]
 800bc48:	f843 2b04 	str.w	r2, [r3], #4
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	469b      	mov	fp, r3
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc58:	f7ff fecc 	bl	800b9f4 <__hexdig_fun>
 800bc5c:	9b01      	ldr	r3, [sp, #4]
 800bc5e:	f000 000f 	and.w	r0, r0, #15
 800bc62:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc66:	4303      	orrs	r3, r0
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	f10b 0b04 	add.w	fp, fp, #4
 800bc6e:	9b07      	ldr	r3, [sp, #28]
 800bc70:	e00d      	b.n	800bc8e <__gethex+0x26e>
 800bc72:	9a08      	ldr	r2, [sp, #32]
 800bc74:	1e73      	subs	r3, r6, #1
 800bc76:	4413      	add	r3, r2
 800bc78:	42bb      	cmp	r3, r7
 800bc7a:	d3e0      	bcc.n	800bc3e <__gethex+0x21e>
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	4652      	mov	r2, sl
 800bc80:	9903      	ldr	r1, [sp, #12]
 800bc82:	9309      	str	r3, [sp, #36]	; 0x24
 800bc84:	f001 fb13 	bl	800d2ae <strncmp>
 800bc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d1d7      	bne.n	800bc3e <__gethex+0x21e>
 800bc8e:	461e      	mov	r6, r3
 800bc90:	e78c      	b.n	800bbac <__gethex+0x18c>
 800bc92:	f04f 0a03 	mov.w	sl, #3
 800bc96:	e7b9      	b.n	800bc0c <__gethex+0x1ec>
 800bc98:	da09      	bge.n	800bcae <__gethex+0x28e>
 800bc9a:	1bf7      	subs	r7, r6, r7
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	463a      	mov	r2, r7
 800bca0:	9802      	ldr	r0, [sp, #8]
 800bca2:	f000 fca7 	bl	800c5f4 <__lshift>
 800bca6:	4604      	mov	r4, r0
 800bca8:	1bed      	subs	r5, r5, r7
 800bcaa:	f100 0914 	add.w	r9, r0, #20
 800bcae:	f04f 0a00 	mov.w	sl, #0
 800bcb2:	e7b0      	b.n	800bc16 <__gethex+0x1f6>
 800bcb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bcb8:	42a8      	cmp	r0, r5
 800bcba:	dd72      	ble.n	800bda2 <__gethex+0x382>
 800bcbc:	1b45      	subs	r5, r0, r5
 800bcbe:	42ae      	cmp	r6, r5
 800bcc0:	dc35      	bgt.n	800bd2e <__gethex+0x30e>
 800bcc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d029      	beq.n	800bd1e <__gethex+0x2fe>
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d02b      	beq.n	800bd26 <__gethex+0x306>
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d11c      	bne.n	800bd0c <__gethex+0x2ec>
 800bcd2:	42ae      	cmp	r6, r5
 800bcd4:	d11a      	bne.n	800bd0c <__gethex+0x2ec>
 800bcd6:	2e01      	cmp	r6, #1
 800bcd8:	d112      	bne.n	800bd00 <__gethex+0x2e0>
 800bcda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcde:	9a05      	ldr	r2, [sp, #20]
 800bce0:	2762      	movs	r7, #98	; 0x62
 800bce2:	6013      	str	r3, [r2, #0]
 800bce4:	2301      	movs	r3, #1
 800bce6:	6123      	str	r3, [r4, #16]
 800bce8:	f8c9 3000 	str.w	r3, [r9]
 800bcec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcee:	601c      	str	r4, [r3, #0]
 800bcf0:	e728      	b.n	800bb44 <__gethex+0x124>
 800bcf2:	bf00      	nop
 800bcf4:	0800d9dc 	.word	0x0800d9dc
 800bcf8:	0800d901 	.word	0x0800d901
 800bcfc:	0800d974 	.word	0x0800d974
 800bd00:	4620      	mov	r0, r4
 800bd02:	1e71      	subs	r1, r6, #1
 800bd04:	f000 feb5 	bl	800ca72 <__any_on>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d1e6      	bne.n	800bcda <__gethex+0x2ba>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	9802      	ldr	r0, [sp, #8]
 800bd10:	f000 fa58 	bl	800c1c4 <_Bfree>
 800bd14:	2300      	movs	r3, #0
 800bd16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd18:	2750      	movs	r7, #80	; 0x50
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	e712      	b.n	800bb44 <__gethex+0x124>
 800bd1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1f3      	bne.n	800bd0c <__gethex+0x2ec>
 800bd24:	e7d9      	b.n	800bcda <__gethex+0x2ba>
 800bd26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1d6      	bne.n	800bcda <__gethex+0x2ba>
 800bd2c:	e7ee      	b.n	800bd0c <__gethex+0x2ec>
 800bd2e:	1e6f      	subs	r7, r5, #1
 800bd30:	f1ba 0f00 	cmp.w	sl, #0
 800bd34:	d132      	bne.n	800bd9c <__gethex+0x37c>
 800bd36:	b127      	cbz	r7, 800bd42 <__gethex+0x322>
 800bd38:	4639      	mov	r1, r7
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fe99 	bl	800ca72 <__any_on>
 800bd40:	4682      	mov	sl, r0
 800bd42:	2101      	movs	r1, #1
 800bd44:	117b      	asrs	r3, r7, #5
 800bd46:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd4a:	f007 071f 	and.w	r7, r7, #31
 800bd4e:	fa01 f707 	lsl.w	r7, r1, r7
 800bd52:	421f      	tst	r7, r3
 800bd54:	f04f 0702 	mov.w	r7, #2
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	bf18      	it	ne
 800bd5e:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd62:	1b76      	subs	r6, r6, r5
 800bd64:	f7ff fdf3 	bl	800b94e <rshift>
 800bd68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd6c:	f1ba 0f00 	cmp.w	sl, #0
 800bd70:	d048      	beq.n	800be04 <__gethex+0x3e4>
 800bd72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d015      	beq.n	800bda6 <__gethex+0x386>
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d017      	beq.n	800bdae <__gethex+0x38e>
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d109      	bne.n	800bd96 <__gethex+0x376>
 800bd82:	f01a 0f02 	tst.w	sl, #2
 800bd86:	d006      	beq.n	800bd96 <__gethex+0x376>
 800bd88:	f8d9 0000 	ldr.w	r0, [r9]
 800bd8c:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd90:	f01a 0f01 	tst.w	sl, #1
 800bd94:	d10e      	bne.n	800bdb4 <__gethex+0x394>
 800bd96:	f047 0710 	orr.w	r7, r7, #16
 800bd9a:	e033      	b.n	800be04 <__gethex+0x3e4>
 800bd9c:	f04f 0a01 	mov.w	sl, #1
 800bda0:	e7cf      	b.n	800bd42 <__gethex+0x322>
 800bda2:	2701      	movs	r7, #1
 800bda4:	e7e2      	b.n	800bd6c <__gethex+0x34c>
 800bda6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bda8:	f1c3 0301 	rsb	r3, r3, #1
 800bdac:	9315      	str	r3, [sp, #84]	; 0x54
 800bdae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0f0      	beq.n	800bd96 <__gethex+0x376>
 800bdb4:	f04f 0c00 	mov.w	ip, #0
 800bdb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bdbc:	f104 0314 	add.w	r3, r4, #20
 800bdc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bdc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdd2:	d01c      	beq.n	800be0e <__gethex+0x3ee>
 800bdd4:	3201      	adds	r2, #1
 800bdd6:	6002      	str	r2, [r0, #0]
 800bdd8:	2f02      	cmp	r7, #2
 800bdda:	f104 0314 	add.w	r3, r4, #20
 800bdde:	d13d      	bne.n	800be5c <__gethex+0x43c>
 800bde0:	f8d8 2000 	ldr.w	r2, [r8]
 800bde4:	3a01      	subs	r2, #1
 800bde6:	42b2      	cmp	r2, r6
 800bde8:	d10a      	bne.n	800be00 <__gethex+0x3e0>
 800bdea:	2201      	movs	r2, #1
 800bdec:	1171      	asrs	r1, r6, #5
 800bdee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdf2:	f006 061f 	and.w	r6, r6, #31
 800bdf6:	fa02 f606 	lsl.w	r6, r2, r6
 800bdfa:	421e      	tst	r6, r3
 800bdfc:	bf18      	it	ne
 800bdfe:	4617      	movne	r7, r2
 800be00:	f047 0720 	orr.w	r7, r7, #32
 800be04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be06:	601c      	str	r4, [r3, #0]
 800be08:	9b05      	ldr	r3, [sp, #20]
 800be0a:	601d      	str	r5, [r3, #0]
 800be0c:	e69a      	b.n	800bb44 <__gethex+0x124>
 800be0e:	4299      	cmp	r1, r3
 800be10:	f843 cc04 	str.w	ip, [r3, #-4]
 800be14:	d8d8      	bhi.n	800bdc8 <__gethex+0x3a8>
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	459b      	cmp	fp, r3
 800be1a:	db17      	blt.n	800be4c <__gethex+0x42c>
 800be1c:	6861      	ldr	r1, [r4, #4]
 800be1e:	9802      	ldr	r0, [sp, #8]
 800be20:	3101      	adds	r1, #1
 800be22:	f000 f98f 	bl	800c144 <_Balloc>
 800be26:	4681      	mov	r9, r0
 800be28:	b918      	cbnz	r0, 800be32 <__gethex+0x412>
 800be2a:	4602      	mov	r2, r0
 800be2c:	2184      	movs	r1, #132	; 0x84
 800be2e:	4b19      	ldr	r3, [pc, #100]	; (800be94 <__gethex+0x474>)
 800be30:	e6ab      	b.n	800bb8a <__gethex+0x16a>
 800be32:	6922      	ldr	r2, [r4, #16]
 800be34:	f104 010c 	add.w	r1, r4, #12
 800be38:	3202      	adds	r2, #2
 800be3a:	0092      	lsls	r2, r2, #2
 800be3c:	300c      	adds	r0, #12
 800be3e:	f7fc feb3 	bl	8008ba8 <memcpy>
 800be42:	4621      	mov	r1, r4
 800be44:	9802      	ldr	r0, [sp, #8]
 800be46:	f000 f9bd 	bl	800c1c4 <_Bfree>
 800be4a:	464c      	mov	r4, r9
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	6122      	str	r2, [r4, #16]
 800be52:	2201      	movs	r2, #1
 800be54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be58:	615a      	str	r2, [r3, #20]
 800be5a:	e7bd      	b.n	800bdd8 <__gethex+0x3b8>
 800be5c:	6922      	ldr	r2, [r4, #16]
 800be5e:	455a      	cmp	r2, fp
 800be60:	dd0b      	ble.n	800be7a <__gethex+0x45a>
 800be62:	2101      	movs	r1, #1
 800be64:	4620      	mov	r0, r4
 800be66:	f7ff fd72 	bl	800b94e <rshift>
 800be6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be6e:	3501      	adds	r5, #1
 800be70:	42ab      	cmp	r3, r5
 800be72:	f6ff aed4 	blt.w	800bc1e <__gethex+0x1fe>
 800be76:	2701      	movs	r7, #1
 800be78:	e7c2      	b.n	800be00 <__gethex+0x3e0>
 800be7a:	f016 061f 	ands.w	r6, r6, #31
 800be7e:	d0fa      	beq.n	800be76 <__gethex+0x456>
 800be80:	4453      	add	r3, sl
 800be82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be86:	f000 fa4f 	bl	800c328 <__hi0bits>
 800be8a:	f1c6 0620 	rsb	r6, r6, #32
 800be8e:	42b0      	cmp	r0, r6
 800be90:	dbe7      	blt.n	800be62 <__gethex+0x442>
 800be92:	e7f0      	b.n	800be76 <__gethex+0x456>
 800be94:	0800d901 	.word	0x0800d901

0800be98 <L_shift>:
 800be98:	f1c2 0208 	rsb	r2, r2, #8
 800be9c:	0092      	lsls	r2, r2, #2
 800be9e:	b570      	push	{r4, r5, r6, lr}
 800bea0:	f1c2 0620 	rsb	r6, r2, #32
 800bea4:	6843      	ldr	r3, [r0, #4]
 800bea6:	6804      	ldr	r4, [r0, #0]
 800bea8:	fa03 f506 	lsl.w	r5, r3, r6
 800beac:	432c      	orrs	r4, r5
 800beae:	40d3      	lsrs	r3, r2
 800beb0:	6004      	str	r4, [r0, #0]
 800beb2:	f840 3f04 	str.w	r3, [r0, #4]!
 800beb6:	4288      	cmp	r0, r1
 800beb8:	d3f4      	bcc.n	800bea4 <L_shift+0xc>
 800beba:	bd70      	pop	{r4, r5, r6, pc}

0800bebc <__match>:
 800bebc:	b530      	push	{r4, r5, lr}
 800bebe:	6803      	ldr	r3, [r0, #0]
 800bec0:	3301      	adds	r3, #1
 800bec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bec6:	b914      	cbnz	r4, 800bece <__match+0x12>
 800bec8:	6003      	str	r3, [r0, #0]
 800beca:	2001      	movs	r0, #1
 800becc:	bd30      	pop	{r4, r5, pc}
 800bece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bed2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bed6:	2d19      	cmp	r5, #25
 800bed8:	bf98      	it	ls
 800beda:	3220      	addls	r2, #32
 800bedc:	42a2      	cmp	r2, r4
 800bede:	d0f0      	beq.n	800bec2 <__match+0x6>
 800bee0:	2000      	movs	r0, #0
 800bee2:	e7f3      	b.n	800becc <__match+0x10>

0800bee4 <__hexnan>:
 800bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	2500      	movs	r5, #0
 800beea:	680b      	ldr	r3, [r1, #0]
 800beec:	4682      	mov	sl, r0
 800beee:	115e      	asrs	r6, r3, #5
 800bef0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bef4:	f013 031f 	ands.w	r3, r3, #31
 800bef8:	bf18      	it	ne
 800befa:	3604      	addne	r6, #4
 800befc:	1f37      	subs	r7, r6, #4
 800befe:	46b9      	mov	r9, r7
 800bf00:	463c      	mov	r4, r7
 800bf02:	46ab      	mov	fp, r5
 800bf04:	b087      	sub	sp, #28
 800bf06:	4690      	mov	r8, r2
 800bf08:	6802      	ldr	r2, [r0, #0]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf10:	9502      	str	r5, [sp, #8]
 800bf12:	7851      	ldrb	r1, [r2, #1]
 800bf14:	1c53      	adds	r3, r2, #1
 800bf16:	9303      	str	r3, [sp, #12]
 800bf18:	b341      	cbz	r1, 800bf6c <__hexnan+0x88>
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	9205      	str	r2, [sp, #20]
 800bf1e:	9104      	str	r1, [sp, #16]
 800bf20:	f7ff fd68 	bl	800b9f4 <__hexdig_fun>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d14f      	bne.n	800bfc8 <__hexnan+0xe4>
 800bf28:	9904      	ldr	r1, [sp, #16]
 800bf2a:	9a05      	ldr	r2, [sp, #20]
 800bf2c:	2920      	cmp	r1, #32
 800bf2e:	d818      	bhi.n	800bf62 <__hexnan+0x7e>
 800bf30:	9b02      	ldr	r3, [sp, #8]
 800bf32:	459b      	cmp	fp, r3
 800bf34:	dd13      	ble.n	800bf5e <__hexnan+0x7a>
 800bf36:	454c      	cmp	r4, r9
 800bf38:	d206      	bcs.n	800bf48 <__hexnan+0x64>
 800bf3a:	2d07      	cmp	r5, #7
 800bf3c:	dc04      	bgt.n	800bf48 <__hexnan+0x64>
 800bf3e:	462a      	mov	r2, r5
 800bf40:	4649      	mov	r1, r9
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff ffa8 	bl	800be98 <L_shift>
 800bf48:	4544      	cmp	r4, r8
 800bf4a:	d950      	bls.n	800bfee <__hexnan+0x10a>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f1a4 0904 	sub.w	r9, r4, #4
 800bf52:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf56:	461d      	mov	r5, r3
 800bf58:	464c      	mov	r4, r9
 800bf5a:	f8cd b008 	str.w	fp, [sp, #8]
 800bf5e:	9a03      	ldr	r2, [sp, #12]
 800bf60:	e7d7      	b.n	800bf12 <__hexnan+0x2e>
 800bf62:	2929      	cmp	r1, #41	; 0x29
 800bf64:	d156      	bne.n	800c014 <__hexnan+0x130>
 800bf66:	3202      	adds	r2, #2
 800bf68:	f8ca 2000 	str.w	r2, [sl]
 800bf6c:	f1bb 0f00 	cmp.w	fp, #0
 800bf70:	d050      	beq.n	800c014 <__hexnan+0x130>
 800bf72:	454c      	cmp	r4, r9
 800bf74:	d206      	bcs.n	800bf84 <__hexnan+0xa0>
 800bf76:	2d07      	cmp	r5, #7
 800bf78:	dc04      	bgt.n	800bf84 <__hexnan+0xa0>
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f7ff ff8a 	bl	800be98 <L_shift>
 800bf84:	4544      	cmp	r4, r8
 800bf86:	d934      	bls.n	800bff2 <__hexnan+0x10e>
 800bf88:	4623      	mov	r3, r4
 800bf8a:	f1a8 0204 	sub.w	r2, r8, #4
 800bf8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf92:	429f      	cmp	r7, r3
 800bf94:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf98:	d2f9      	bcs.n	800bf8e <__hexnan+0xaa>
 800bf9a:	1b3b      	subs	r3, r7, r4
 800bf9c:	f023 0303 	bic.w	r3, r3, #3
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	3401      	adds	r4, #1
 800bfa4:	3e03      	subs	r6, #3
 800bfa6:	42b4      	cmp	r4, r6
 800bfa8:	bf88      	it	hi
 800bfaa:	2304      	movhi	r3, #4
 800bfac:	2200      	movs	r2, #0
 800bfae:	4443      	add	r3, r8
 800bfb0:	f843 2b04 	str.w	r2, [r3], #4
 800bfb4:	429f      	cmp	r7, r3
 800bfb6:	d2fb      	bcs.n	800bfb0 <__hexnan+0xcc>
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	b91b      	cbnz	r3, 800bfc4 <__hexnan+0xe0>
 800bfbc:	4547      	cmp	r7, r8
 800bfbe:	d127      	bne.n	800c010 <__hexnan+0x12c>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	2005      	movs	r0, #5
 800bfc6:	e026      	b.n	800c016 <__hexnan+0x132>
 800bfc8:	3501      	adds	r5, #1
 800bfca:	2d08      	cmp	r5, #8
 800bfcc:	f10b 0b01 	add.w	fp, fp, #1
 800bfd0:	dd06      	ble.n	800bfe0 <__hexnan+0xfc>
 800bfd2:	4544      	cmp	r4, r8
 800bfd4:	d9c3      	bls.n	800bf5e <__hexnan+0x7a>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2501      	movs	r5, #1
 800bfda:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfde:	3c04      	subs	r4, #4
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	f000 000f 	and.w	r0, r0, #15
 800bfe6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bfea:	6022      	str	r2, [r4, #0]
 800bfec:	e7b7      	b.n	800bf5e <__hexnan+0x7a>
 800bfee:	2508      	movs	r5, #8
 800bff0:	e7b5      	b.n	800bf5e <__hexnan+0x7a>
 800bff2:	9b01      	ldr	r3, [sp, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d0df      	beq.n	800bfb8 <__hexnan+0xd4>
 800bff8:	f04f 32ff 	mov.w	r2, #4294967295
 800bffc:	f1c3 0320 	rsb	r3, r3, #32
 800c000:	fa22 f303 	lsr.w	r3, r2, r3
 800c004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c008:	401a      	ands	r2, r3
 800c00a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c00e:	e7d3      	b.n	800bfb8 <__hexnan+0xd4>
 800c010:	3f04      	subs	r7, #4
 800c012:	e7d1      	b.n	800bfb8 <__hexnan+0xd4>
 800c014:	2004      	movs	r0, #4
 800c016:	b007      	add	sp, #28
 800c018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c01c <_localeconv_r>:
 800c01c:	4800      	ldr	r0, [pc, #0]	; (800c020 <_localeconv_r+0x4>)
 800c01e:	4770      	bx	lr
 800c020:	20000744 	.word	0x20000744

0800c024 <__retarget_lock_init_recursive>:
 800c024:	4770      	bx	lr

0800c026 <__retarget_lock_acquire_recursive>:
 800c026:	4770      	bx	lr

0800c028 <__retarget_lock_release_recursive>:
 800c028:	4770      	bx	lr

0800c02a <__swhatbuf_r>:
 800c02a:	b570      	push	{r4, r5, r6, lr}
 800c02c:	460e      	mov	r6, r1
 800c02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c032:	4614      	mov	r4, r2
 800c034:	2900      	cmp	r1, #0
 800c036:	461d      	mov	r5, r3
 800c038:	b096      	sub	sp, #88	; 0x58
 800c03a:	da08      	bge.n	800c04e <__swhatbuf_r+0x24>
 800c03c:	2200      	movs	r2, #0
 800c03e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c042:	602a      	str	r2, [r5, #0]
 800c044:	061a      	lsls	r2, r3, #24
 800c046:	d410      	bmi.n	800c06a <__swhatbuf_r+0x40>
 800c048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c04c:	e00e      	b.n	800c06c <__swhatbuf_r+0x42>
 800c04e:	466a      	mov	r2, sp
 800c050:	f001 f978 	bl	800d344 <_fstat_r>
 800c054:	2800      	cmp	r0, #0
 800c056:	dbf1      	blt.n	800c03c <__swhatbuf_r+0x12>
 800c058:	9a01      	ldr	r2, [sp, #4]
 800c05a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c05e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c062:	425a      	negs	r2, r3
 800c064:	415a      	adcs	r2, r3
 800c066:	602a      	str	r2, [r5, #0]
 800c068:	e7ee      	b.n	800c048 <__swhatbuf_r+0x1e>
 800c06a:	2340      	movs	r3, #64	; 0x40
 800c06c:	2000      	movs	r0, #0
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	b016      	add	sp, #88	; 0x58
 800c072:	bd70      	pop	{r4, r5, r6, pc}

0800c074 <__smakebuf_r>:
 800c074:	898b      	ldrh	r3, [r1, #12]
 800c076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c078:	079d      	lsls	r5, r3, #30
 800c07a:	4606      	mov	r6, r0
 800c07c:	460c      	mov	r4, r1
 800c07e:	d507      	bpl.n	800c090 <__smakebuf_r+0x1c>
 800c080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	6123      	str	r3, [r4, #16]
 800c088:	2301      	movs	r3, #1
 800c08a:	6163      	str	r3, [r4, #20]
 800c08c:	b002      	add	sp, #8
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	466a      	mov	r2, sp
 800c092:	ab01      	add	r3, sp, #4
 800c094:	f7ff ffc9 	bl	800c02a <__swhatbuf_r>
 800c098:	9900      	ldr	r1, [sp, #0]
 800c09a:	4605      	mov	r5, r0
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 fd85 	bl	800cbac <_malloc_r>
 800c0a2:	b948      	cbnz	r0, 800c0b8 <__smakebuf_r+0x44>
 800c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a8:	059a      	lsls	r2, r3, #22
 800c0aa:	d4ef      	bmi.n	800c08c <__smakebuf_r+0x18>
 800c0ac:	f023 0303 	bic.w	r3, r3, #3
 800c0b0:	f043 0302 	orr.w	r3, r3, #2
 800c0b4:	81a3      	strh	r3, [r4, #12]
 800c0b6:	e7e3      	b.n	800c080 <__smakebuf_r+0xc>
 800c0b8:	4b0d      	ldr	r3, [pc, #52]	; (800c0f0 <__smakebuf_r+0x7c>)
 800c0ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	6020      	str	r0, [r4, #0]
 800c0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c4:	81a3      	strh	r3, [r4, #12]
 800c0c6:	9b00      	ldr	r3, [sp, #0]
 800c0c8:	6120      	str	r0, [r4, #16]
 800c0ca:	6163      	str	r3, [r4, #20]
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	b15b      	cbz	r3, 800c0e8 <__smakebuf_r+0x74>
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d6:	f001 f947 	bl	800d368 <_isatty_r>
 800c0da:	b128      	cbz	r0, 800c0e8 <__smakebuf_r+0x74>
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f023 0303 	bic.w	r3, r3, #3
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	81a3      	strh	r3, [r4, #12]
 800c0e8:	89a0      	ldrh	r0, [r4, #12]
 800c0ea:	4305      	orrs	r5, r0
 800c0ec:	81a5      	strh	r5, [r4, #12]
 800c0ee:	e7cd      	b.n	800c08c <__smakebuf_r+0x18>
 800c0f0:	0800b789 	.word	0x0800b789

0800c0f4 <malloc>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	; (800c100 <malloc+0xc>)
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f000 bd57 	b.w	800cbac <_malloc_r>
 800c0fe:	bf00      	nop
 800c100:	200005ec 	.word	0x200005ec

0800c104 <__ascii_mbtowc>:
 800c104:	b082      	sub	sp, #8
 800c106:	b901      	cbnz	r1, 800c10a <__ascii_mbtowc+0x6>
 800c108:	a901      	add	r1, sp, #4
 800c10a:	b142      	cbz	r2, 800c11e <__ascii_mbtowc+0x1a>
 800c10c:	b14b      	cbz	r3, 800c122 <__ascii_mbtowc+0x1e>
 800c10e:	7813      	ldrb	r3, [r2, #0]
 800c110:	600b      	str	r3, [r1, #0]
 800c112:	7812      	ldrb	r2, [r2, #0]
 800c114:	1e10      	subs	r0, r2, #0
 800c116:	bf18      	it	ne
 800c118:	2001      	movne	r0, #1
 800c11a:	b002      	add	sp, #8
 800c11c:	4770      	bx	lr
 800c11e:	4610      	mov	r0, r2
 800c120:	e7fb      	b.n	800c11a <__ascii_mbtowc+0x16>
 800c122:	f06f 0001 	mvn.w	r0, #1
 800c126:	e7f8      	b.n	800c11a <__ascii_mbtowc+0x16>

0800c128 <memchr>:
 800c128:	4603      	mov	r3, r0
 800c12a:	b510      	push	{r4, lr}
 800c12c:	b2c9      	uxtb	r1, r1
 800c12e:	4402      	add	r2, r0
 800c130:	4293      	cmp	r3, r2
 800c132:	4618      	mov	r0, r3
 800c134:	d101      	bne.n	800c13a <memchr+0x12>
 800c136:	2000      	movs	r0, #0
 800c138:	e003      	b.n	800c142 <memchr+0x1a>
 800c13a:	7804      	ldrb	r4, [r0, #0]
 800c13c:	3301      	adds	r3, #1
 800c13e:	428c      	cmp	r4, r1
 800c140:	d1f6      	bne.n	800c130 <memchr+0x8>
 800c142:	bd10      	pop	{r4, pc}

0800c144 <_Balloc>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c148:	4604      	mov	r4, r0
 800c14a:	460d      	mov	r5, r1
 800c14c:	b976      	cbnz	r6, 800c16c <_Balloc+0x28>
 800c14e:	2010      	movs	r0, #16
 800c150:	f7ff ffd0 	bl	800c0f4 <malloc>
 800c154:	4602      	mov	r2, r0
 800c156:	6260      	str	r0, [r4, #36]	; 0x24
 800c158:	b920      	cbnz	r0, 800c164 <_Balloc+0x20>
 800c15a:	2166      	movs	r1, #102	; 0x66
 800c15c:	4b17      	ldr	r3, [pc, #92]	; (800c1bc <_Balloc+0x78>)
 800c15e:	4818      	ldr	r0, [pc, #96]	; (800c1c0 <_Balloc+0x7c>)
 800c160:	f7fe fb98 	bl	800a894 <__assert_func>
 800c164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c168:	6006      	str	r6, [r0, #0]
 800c16a:	60c6      	str	r6, [r0, #12]
 800c16c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c16e:	68f3      	ldr	r3, [r6, #12]
 800c170:	b183      	cbz	r3, 800c194 <_Balloc+0x50>
 800c172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c17a:	b9b8      	cbnz	r0, 800c1ac <_Balloc+0x68>
 800c17c:	2101      	movs	r1, #1
 800c17e:	fa01 f605 	lsl.w	r6, r1, r5
 800c182:	1d72      	adds	r2, r6, #5
 800c184:	4620      	mov	r0, r4
 800c186:	0092      	lsls	r2, r2, #2
 800c188:	f000 fc94 	bl	800cab4 <_calloc_r>
 800c18c:	b160      	cbz	r0, 800c1a8 <_Balloc+0x64>
 800c18e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c192:	e00e      	b.n	800c1b2 <_Balloc+0x6e>
 800c194:	2221      	movs	r2, #33	; 0x21
 800c196:	2104      	movs	r1, #4
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 fc8b 	bl	800cab4 <_calloc_r>
 800c19e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1a0:	60f0      	str	r0, [r6, #12]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1e4      	bne.n	800c172 <_Balloc+0x2e>
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	6802      	ldr	r2, [r0, #0]
 800c1ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1b8:	e7f7      	b.n	800c1aa <_Balloc+0x66>
 800c1ba:	bf00      	nop
 800c1bc:	0800d6e8 	.word	0x0800d6e8
 800c1c0:	0800d9f0 	.word	0x0800d9f0

0800c1c4 <_Bfree>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	b976      	cbnz	r6, 800c1ec <_Bfree+0x28>
 800c1ce:	2010      	movs	r0, #16
 800c1d0:	f7ff ff90 	bl	800c0f4 <malloc>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	6268      	str	r0, [r5, #36]	; 0x24
 800c1d8:	b920      	cbnz	r0, 800c1e4 <_Bfree+0x20>
 800c1da:	218a      	movs	r1, #138	; 0x8a
 800c1dc:	4b08      	ldr	r3, [pc, #32]	; (800c200 <_Bfree+0x3c>)
 800c1de:	4809      	ldr	r0, [pc, #36]	; (800c204 <_Bfree+0x40>)
 800c1e0:	f7fe fb58 	bl	800a894 <__assert_func>
 800c1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1e8:	6006      	str	r6, [r0, #0]
 800c1ea:	60c6      	str	r6, [r0, #12]
 800c1ec:	b13c      	cbz	r4, 800c1fe <_Bfree+0x3a>
 800c1ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1f0:	6862      	ldr	r2, [r4, #4]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1f8:	6021      	str	r1, [r4, #0]
 800c1fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}
 800c200:	0800d6e8 	.word	0x0800d6e8
 800c204:	0800d9f0 	.word	0x0800d9f0

0800c208 <__multadd>:
 800c208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20c:	4607      	mov	r7, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	461e      	mov	r6, r3
 800c212:	2000      	movs	r0, #0
 800c214:	690d      	ldr	r5, [r1, #16]
 800c216:	f101 0c14 	add.w	ip, r1, #20
 800c21a:	f8dc 3000 	ldr.w	r3, [ip]
 800c21e:	3001      	adds	r0, #1
 800c220:	b299      	uxth	r1, r3
 800c222:	fb02 6101 	mla	r1, r2, r1, r6
 800c226:	0c1e      	lsrs	r6, r3, #16
 800c228:	0c0b      	lsrs	r3, r1, #16
 800c22a:	fb02 3306 	mla	r3, r2, r6, r3
 800c22e:	b289      	uxth	r1, r1
 800c230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c234:	4285      	cmp	r5, r0
 800c236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c23a:	f84c 1b04 	str.w	r1, [ip], #4
 800c23e:	dcec      	bgt.n	800c21a <__multadd+0x12>
 800c240:	b30e      	cbz	r6, 800c286 <__multadd+0x7e>
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	42ab      	cmp	r3, r5
 800c246:	dc19      	bgt.n	800c27c <__multadd+0x74>
 800c248:	6861      	ldr	r1, [r4, #4]
 800c24a:	4638      	mov	r0, r7
 800c24c:	3101      	adds	r1, #1
 800c24e:	f7ff ff79 	bl	800c144 <_Balloc>
 800c252:	4680      	mov	r8, r0
 800c254:	b928      	cbnz	r0, 800c262 <__multadd+0x5a>
 800c256:	4602      	mov	r2, r0
 800c258:	21b5      	movs	r1, #181	; 0xb5
 800c25a:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <__multadd+0x84>)
 800c25c:	480c      	ldr	r0, [pc, #48]	; (800c290 <__multadd+0x88>)
 800c25e:	f7fe fb19 	bl	800a894 <__assert_func>
 800c262:	6922      	ldr	r2, [r4, #16]
 800c264:	f104 010c 	add.w	r1, r4, #12
 800c268:	3202      	adds	r2, #2
 800c26a:	0092      	lsls	r2, r2, #2
 800c26c:	300c      	adds	r0, #12
 800c26e:	f7fc fc9b 	bl	8008ba8 <memcpy>
 800c272:	4621      	mov	r1, r4
 800c274:	4638      	mov	r0, r7
 800c276:	f7ff ffa5 	bl	800c1c4 <_Bfree>
 800c27a:	4644      	mov	r4, r8
 800c27c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c280:	3501      	adds	r5, #1
 800c282:	615e      	str	r6, [r3, #20]
 800c284:	6125      	str	r5, [r4, #16]
 800c286:	4620      	mov	r0, r4
 800c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c28c:	0800d901 	.word	0x0800d901
 800c290:	0800d9f0 	.word	0x0800d9f0

0800c294 <__s2b>:
 800c294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c298:	4615      	mov	r5, r2
 800c29a:	2209      	movs	r2, #9
 800c29c:	461f      	mov	r7, r3
 800c29e:	3308      	adds	r3, #8
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	db09      	blt.n	800c2c4 <__s2b+0x30>
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f7ff ff47 	bl	800c144 <_Balloc>
 800c2b6:	b940      	cbnz	r0, 800c2ca <__s2b+0x36>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	21ce      	movs	r1, #206	; 0xce
 800c2bc:	4b18      	ldr	r3, [pc, #96]	; (800c320 <__s2b+0x8c>)
 800c2be:	4819      	ldr	r0, [pc, #100]	; (800c324 <__s2b+0x90>)
 800c2c0:	f7fe fae8 	bl	800a894 <__assert_func>
 800c2c4:	0052      	lsls	r2, r2, #1
 800c2c6:	3101      	adds	r1, #1
 800c2c8:	e7f0      	b.n	800c2ac <__s2b+0x18>
 800c2ca:	9b08      	ldr	r3, [sp, #32]
 800c2cc:	2d09      	cmp	r5, #9
 800c2ce:	6143      	str	r3, [r0, #20]
 800c2d0:	f04f 0301 	mov.w	r3, #1
 800c2d4:	6103      	str	r3, [r0, #16]
 800c2d6:	dd16      	ble.n	800c306 <__s2b+0x72>
 800c2d8:	f104 0909 	add.w	r9, r4, #9
 800c2dc:	46c8      	mov	r8, r9
 800c2de:	442c      	add	r4, r5
 800c2e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	220a      	movs	r2, #10
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	3b30      	subs	r3, #48	; 0x30
 800c2ec:	f7ff ff8c 	bl	800c208 <__multadd>
 800c2f0:	45a0      	cmp	r8, r4
 800c2f2:	d1f5      	bne.n	800c2e0 <__s2b+0x4c>
 800c2f4:	f1a5 0408 	sub.w	r4, r5, #8
 800c2f8:	444c      	add	r4, r9
 800c2fa:	1b2d      	subs	r5, r5, r4
 800c2fc:	1963      	adds	r3, r4, r5
 800c2fe:	42bb      	cmp	r3, r7
 800c300:	db04      	blt.n	800c30c <__s2b+0x78>
 800c302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c306:	2509      	movs	r5, #9
 800c308:	340a      	adds	r4, #10
 800c30a:	e7f6      	b.n	800c2fa <__s2b+0x66>
 800c30c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c310:	4601      	mov	r1, r0
 800c312:	220a      	movs	r2, #10
 800c314:	4630      	mov	r0, r6
 800c316:	3b30      	subs	r3, #48	; 0x30
 800c318:	f7ff ff76 	bl	800c208 <__multadd>
 800c31c:	e7ee      	b.n	800c2fc <__s2b+0x68>
 800c31e:	bf00      	nop
 800c320:	0800d901 	.word	0x0800d901
 800c324:	0800d9f0 	.word	0x0800d9f0

0800c328 <__hi0bits>:
 800c328:	0c02      	lsrs	r2, r0, #16
 800c32a:	0412      	lsls	r2, r2, #16
 800c32c:	4603      	mov	r3, r0
 800c32e:	b9ca      	cbnz	r2, 800c364 <__hi0bits+0x3c>
 800c330:	0403      	lsls	r3, r0, #16
 800c332:	2010      	movs	r0, #16
 800c334:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c338:	bf04      	itt	eq
 800c33a:	021b      	lsleq	r3, r3, #8
 800c33c:	3008      	addeq	r0, #8
 800c33e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c342:	bf04      	itt	eq
 800c344:	011b      	lsleq	r3, r3, #4
 800c346:	3004      	addeq	r0, #4
 800c348:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c34c:	bf04      	itt	eq
 800c34e:	009b      	lsleq	r3, r3, #2
 800c350:	3002      	addeq	r0, #2
 800c352:	2b00      	cmp	r3, #0
 800c354:	db05      	blt.n	800c362 <__hi0bits+0x3a>
 800c356:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c35a:	f100 0001 	add.w	r0, r0, #1
 800c35e:	bf08      	it	eq
 800c360:	2020      	moveq	r0, #32
 800c362:	4770      	bx	lr
 800c364:	2000      	movs	r0, #0
 800c366:	e7e5      	b.n	800c334 <__hi0bits+0xc>

0800c368 <__lo0bits>:
 800c368:	6803      	ldr	r3, [r0, #0]
 800c36a:	4602      	mov	r2, r0
 800c36c:	f013 0007 	ands.w	r0, r3, #7
 800c370:	d00b      	beq.n	800c38a <__lo0bits+0x22>
 800c372:	07d9      	lsls	r1, r3, #31
 800c374:	d421      	bmi.n	800c3ba <__lo0bits+0x52>
 800c376:	0798      	lsls	r0, r3, #30
 800c378:	bf49      	itett	mi
 800c37a:	085b      	lsrmi	r3, r3, #1
 800c37c:	089b      	lsrpl	r3, r3, #2
 800c37e:	2001      	movmi	r0, #1
 800c380:	6013      	strmi	r3, [r2, #0]
 800c382:	bf5c      	itt	pl
 800c384:	2002      	movpl	r0, #2
 800c386:	6013      	strpl	r3, [r2, #0]
 800c388:	4770      	bx	lr
 800c38a:	b299      	uxth	r1, r3
 800c38c:	b909      	cbnz	r1, 800c392 <__lo0bits+0x2a>
 800c38e:	2010      	movs	r0, #16
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	b2d9      	uxtb	r1, r3
 800c394:	b909      	cbnz	r1, 800c39a <__lo0bits+0x32>
 800c396:	3008      	adds	r0, #8
 800c398:	0a1b      	lsrs	r3, r3, #8
 800c39a:	0719      	lsls	r1, r3, #28
 800c39c:	bf04      	itt	eq
 800c39e:	091b      	lsreq	r3, r3, #4
 800c3a0:	3004      	addeq	r0, #4
 800c3a2:	0799      	lsls	r1, r3, #30
 800c3a4:	bf04      	itt	eq
 800c3a6:	089b      	lsreq	r3, r3, #2
 800c3a8:	3002      	addeq	r0, #2
 800c3aa:	07d9      	lsls	r1, r3, #31
 800c3ac:	d403      	bmi.n	800c3b6 <__lo0bits+0x4e>
 800c3ae:	085b      	lsrs	r3, r3, #1
 800c3b0:	f100 0001 	add.w	r0, r0, #1
 800c3b4:	d003      	beq.n	800c3be <__lo0bits+0x56>
 800c3b6:	6013      	str	r3, [r2, #0]
 800c3b8:	4770      	bx	lr
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	4770      	bx	lr
 800c3be:	2020      	movs	r0, #32
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <__i2b>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	f7ff febb 	bl	800c144 <_Balloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	b928      	cbnz	r0, 800c3de <__i2b+0x1a>
 800c3d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3d6:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <__i2b+0x24>)
 800c3d8:	4804      	ldr	r0, [pc, #16]	; (800c3ec <__i2b+0x28>)
 800c3da:	f7fe fa5b 	bl	800a894 <__assert_func>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	6144      	str	r4, [r0, #20]
 800c3e2:	6103      	str	r3, [r0, #16]
 800c3e4:	bd10      	pop	{r4, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800d901 	.word	0x0800d901
 800c3ec:	0800d9f0 	.word	0x0800d9f0

0800c3f0 <__multiply>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	4691      	mov	r9, r2
 800c3f6:	690a      	ldr	r2, [r1, #16]
 800c3f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	429a      	cmp	r2, r3
 800c400:	bfbe      	ittt	lt
 800c402:	460b      	movlt	r3, r1
 800c404:	464c      	movlt	r4, r9
 800c406:	4699      	movlt	r9, r3
 800c408:	6927      	ldr	r7, [r4, #16]
 800c40a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c40e:	68a3      	ldr	r3, [r4, #8]
 800c410:	6861      	ldr	r1, [r4, #4]
 800c412:	eb07 060a 	add.w	r6, r7, sl
 800c416:	42b3      	cmp	r3, r6
 800c418:	b085      	sub	sp, #20
 800c41a:	bfb8      	it	lt
 800c41c:	3101      	addlt	r1, #1
 800c41e:	f7ff fe91 	bl	800c144 <_Balloc>
 800c422:	b930      	cbnz	r0, 800c432 <__multiply+0x42>
 800c424:	4602      	mov	r2, r0
 800c426:	f240 115d 	movw	r1, #349	; 0x15d
 800c42a:	4b43      	ldr	r3, [pc, #268]	; (800c538 <__multiply+0x148>)
 800c42c:	4843      	ldr	r0, [pc, #268]	; (800c53c <__multiply+0x14c>)
 800c42e:	f7fe fa31 	bl	800a894 <__assert_func>
 800c432:	f100 0514 	add.w	r5, r0, #20
 800c436:	462b      	mov	r3, r5
 800c438:	2200      	movs	r2, #0
 800c43a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c43e:	4543      	cmp	r3, r8
 800c440:	d321      	bcc.n	800c486 <__multiply+0x96>
 800c442:	f104 0314 	add.w	r3, r4, #20
 800c446:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c44a:	f109 0314 	add.w	r3, r9, #20
 800c44e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c452:	9202      	str	r2, [sp, #8]
 800c454:	1b3a      	subs	r2, r7, r4
 800c456:	3a15      	subs	r2, #21
 800c458:	f022 0203 	bic.w	r2, r2, #3
 800c45c:	3204      	adds	r2, #4
 800c45e:	f104 0115 	add.w	r1, r4, #21
 800c462:	428f      	cmp	r7, r1
 800c464:	bf38      	it	cc
 800c466:	2204      	movcc	r2, #4
 800c468:	9201      	str	r2, [sp, #4]
 800c46a:	9a02      	ldr	r2, [sp, #8]
 800c46c:	9303      	str	r3, [sp, #12]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d80c      	bhi.n	800c48c <__multiply+0x9c>
 800c472:	2e00      	cmp	r6, #0
 800c474:	dd03      	ble.n	800c47e <__multiply+0x8e>
 800c476:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d059      	beq.n	800c532 <__multiply+0x142>
 800c47e:	6106      	str	r6, [r0, #16]
 800c480:	b005      	add	sp, #20
 800c482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c486:	f843 2b04 	str.w	r2, [r3], #4
 800c48a:	e7d8      	b.n	800c43e <__multiply+0x4e>
 800c48c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c490:	f1ba 0f00 	cmp.w	sl, #0
 800c494:	d023      	beq.n	800c4de <__multiply+0xee>
 800c496:	46a9      	mov	r9, r5
 800c498:	f04f 0c00 	mov.w	ip, #0
 800c49c:	f104 0e14 	add.w	lr, r4, #20
 800c4a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c4a4:	f8d9 1000 	ldr.w	r1, [r9]
 800c4a8:	fa1f fb82 	uxth.w	fp, r2
 800c4ac:	b289      	uxth	r1, r1
 800c4ae:	fb0a 110b 	mla	r1, sl, fp, r1
 800c4b2:	4461      	add	r1, ip
 800c4b4:	f8d9 c000 	ldr.w	ip, [r9]
 800c4b8:	0c12      	lsrs	r2, r2, #16
 800c4ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c4be:	fb0a c202 	mla	r2, sl, r2, ip
 800c4c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4c6:	b289      	uxth	r1, r1
 800c4c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4cc:	4577      	cmp	r7, lr
 800c4ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4d2:	f849 1b04 	str.w	r1, [r9], #4
 800c4d6:	d8e3      	bhi.n	800c4a0 <__multiply+0xb0>
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	f845 c002 	str.w	ip, [r5, r2]
 800c4de:	9a03      	ldr	r2, [sp, #12]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	d020      	beq.n	800c52e <__multiply+0x13e>
 800c4ec:	46ae      	mov	lr, r5
 800c4ee:	f04f 0a00 	mov.w	sl, #0
 800c4f2:	6829      	ldr	r1, [r5, #0]
 800c4f4:	f104 0c14 	add.w	ip, r4, #20
 800c4f8:	f8bc b000 	ldrh.w	fp, [ip]
 800c4fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c500:	b289      	uxth	r1, r1
 800c502:	fb09 220b 	mla	r2, r9, fp, r2
 800c506:	4492      	add	sl, r2
 800c508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c50c:	f84e 1b04 	str.w	r1, [lr], #4
 800c510:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c514:	f8be 1000 	ldrh.w	r1, [lr]
 800c518:	0c12      	lsrs	r2, r2, #16
 800c51a:	fb09 1102 	mla	r1, r9, r2, r1
 800c51e:	4567      	cmp	r7, ip
 800c520:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c528:	d8e6      	bhi.n	800c4f8 <__multiply+0x108>
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	50a9      	str	r1, [r5, r2]
 800c52e:	3504      	adds	r5, #4
 800c530:	e79b      	b.n	800c46a <__multiply+0x7a>
 800c532:	3e01      	subs	r6, #1
 800c534:	e79d      	b.n	800c472 <__multiply+0x82>
 800c536:	bf00      	nop
 800c538:	0800d901 	.word	0x0800d901
 800c53c:	0800d9f0 	.word	0x0800d9f0

0800c540 <__pow5mult>:
 800c540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c544:	4615      	mov	r5, r2
 800c546:	f012 0203 	ands.w	r2, r2, #3
 800c54a:	4606      	mov	r6, r0
 800c54c:	460f      	mov	r7, r1
 800c54e:	d007      	beq.n	800c560 <__pow5mult+0x20>
 800c550:	4c25      	ldr	r4, [pc, #148]	; (800c5e8 <__pow5mult+0xa8>)
 800c552:	3a01      	subs	r2, #1
 800c554:	2300      	movs	r3, #0
 800c556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c55a:	f7ff fe55 	bl	800c208 <__multadd>
 800c55e:	4607      	mov	r7, r0
 800c560:	10ad      	asrs	r5, r5, #2
 800c562:	d03d      	beq.n	800c5e0 <__pow5mult+0xa0>
 800c564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c566:	b97c      	cbnz	r4, 800c588 <__pow5mult+0x48>
 800c568:	2010      	movs	r0, #16
 800c56a:	f7ff fdc3 	bl	800c0f4 <malloc>
 800c56e:	4602      	mov	r2, r0
 800c570:	6270      	str	r0, [r6, #36]	; 0x24
 800c572:	b928      	cbnz	r0, 800c580 <__pow5mult+0x40>
 800c574:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c578:	4b1c      	ldr	r3, [pc, #112]	; (800c5ec <__pow5mult+0xac>)
 800c57a:	481d      	ldr	r0, [pc, #116]	; (800c5f0 <__pow5mult+0xb0>)
 800c57c:	f7fe f98a 	bl	800a894 <__assert_func>
 800c580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c584:	6004      	str	r4, [r0, #0]
 800c586:	60c4      	str	r4, [r0, #12]
 800c588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c58c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c590:	b94c      	cbnz	r4, 800c5a6 <__pow5mult+0x66>
 800c592:	f240 2171 	movw	r1, #625	; 0x271
 800c596:	4630      	mov	r0, r6
 800c598:	f7ff ff14 	bl	800c3c4 <__i2b>
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5a4:	6003      	str	r3, [r0, #0]
 800c5a6:	f04f 0900 	mov.w	r9, #0
 800c5aa:	07eb      	lsls	r3, r5, #31
 800c5ac:	d50a      	bpl.n	800c5c4 <__pow5mult+0x84>
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	4622      	mov	r2, r4
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7ff ff1c 	bl	800c3f0 <__multiply>
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff fe01 	bl	800c1c4 <_Bfree>
 800c5c2:	4647      	mov	r7, r8
 800c5c4:	106d      	asrs	r5, r5, #1
 800c5c6:	d00b      	beq.n	800c5e0 <__pow5mult+0xa0>
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	b938      	cbnz	r0, 800c5dc <__pow5mult+0x9c>
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7ff ff0d 	bl	800c3f0 <__multiply>
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	f8c0 9000 	str.w	r9, [r0]
 800c5dc:	4604      	mov	r4, r0
 800c5de:	e7e4      	b.n	800c5aa <__pow5mult+0x6a>
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	bf00      	nop
 800c5e8:	0800db40 	.word	0x0800db40
 800c5ec:	0800d6e8 	.word	0x0800d6e8
 800c5f0:	0800d9f0 	.word	0x0800d9f0

0800c5f4 <__lshift>:
 800c5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f8:	460c      	mov	r4, r1
 800c5fa:	4607      	mov	r7, r0
 800c5fc:	4691      	mov	r9, r2
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	6849      	ldr	r1, [r1, #4]
 800c602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c60c:	f108 0601 	add.w	r6, r8, #1
 800c610:	42b3      	cmp	r3, r6
 800c612:	db0b      	blt.n	800c62c <__lshift+0x38>
 800c614:	4638      	mov	r0, r7
 800c616:	f7ff fd95 	bl	800c144 <_Balloc>
 800c61a:	4605      	mov	r5, r0
 800c61c:	b948      	cbnz	r0, 800c632 <__lshift+0x3e>
 800c61e:	4602      	mov	r2, r0
 800c620:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c624:	4b29      	ldr	r3, [pc, #164]	; (800c6cc <__lshift+0xd8>)
 800c626:	482a      	ldr	r0, [pc, #168]	; (800c6d0 <__lshift+0xdc>)
 800c628:	f7fe f934 	bl	800a894 <__assert_func>
 800c62c:	3101      	adds	r1, #1
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	e7ee      	b.n	800c610 <__lshift+0x1c>
 800c632:	2300      	movs	r3, #0
 800c634:	f100 0114 	add.w	r1, r0, #20
 800c638:	f100 0210 	add.w	r2, r0, #16
 800c63c:	4618      	mov	r0, r3
 800c63e:	4553      	cmp	r3, sl
 800c640:	db37      	blt.n	800c6b2 <__lshift+0xbe>
 800c642:	6920      	ldr	r0, [r4, #16]
 800c644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c648:	f104 0314 	add.w	r3, r4, #20
 800c64c:	f019 091f 	ands.w	r9, r9, #31
 800c650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c658:	d02f      	beq.n	800c6ba <__lshift+0xc6>
 800c65a:	468a      	mov	sl, r1
 800c65c:	f04f 0c00 	mov.w	ip, #0
 800c660:	f1c9 0e20 	rsb	lr, r9, #32
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	fa02 f209 	lsl.w	r2, r2, r9
 800c66a:	ea42 020c 	orr.w	r2, r2, ip
 800c66e:	f84a 2b04 	str.w	r2, [sl], #4
 800c672:	f853 2b04 	ldr.w	r2, [r3], #4
 800c676:	4298      	cmp	r0, r3
 800c678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c67c:	d8f2      	bhi.n	800c664 <__lshift+0x70>
 800c67e:	1b03      	subs	r3, r0, r4
 800c680:	3b15      	subs	r3, #21
 800c682:	f023 0303 	bic.w	r3, r3, #3
 800c686:	3304      	adds	r3, #4
 800c688:	f104 0215 	add.w	r2, r4, #21
 800c68c:	4290      	cmp	r0, r2
 800c68e:	bf38      	it	cc
 800c690:	2304      	movcc	r3, #4
 800c692:	f841 c003 	str.w	ip, [r1, r3]
 800c696:	f1bc 0f00 	cmp.w	ip, #0
 800c69a:	d001      	beq.n	800c6a0 <__lshift+0xac>
 800c69c:	f108 0602 	add.w	r6, r8, #2
 800c6a0:	3e01      	subs	r6, #1
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	612e      	str	r6, [r5, #16]
 800c6a8:	f7ff fd8c 	bl	800c1c4 <_Bfree>
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	e7c1      	b.n	800c63e <__lshift+0x4a>
 800c6ba:	3904      	subs	r1, #4
 800c6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c0:	4298      	cmp	r0, r3
 800c6c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6c6:	d8f9      	bhi.n	800c6bc <__lshift+0xc8>
 800c6c8:	e7ea      	b.n	800c6a0 <__lshift+0xac>
 800c6ca:	bf00      	nop
 800c6cc:	0800d901 	.word	0x0800d901
 800c6d0:	0800d9f0 	.word	0x0800d9f0

0800c6d4 <__mcmp>:
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	690a      	ldr	r2, [r1, #16]
 800c6d8:	6900      	ldr	r0, [r0, #16]
 800c6da:	b530      	push	{r4, r5, lr}
 800c6dc:	1a80      	subs	r0, r0, r2
 800c6de:	d10d      	bne.n	800c6fc <__mcmp+0x28>
 800c6e0:	3314      	adds	r3, #20
 800c6e2:	3114      	adds	r1, #20
 800c6e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6f4:	4295      	cmp	r5, r2
 800c6f6:	d002      	beq.n	800c6fe <__mcmp+0x2a>
 800c6f8:	d304      	bcc.n	800c704 <__mcmp+0x30>
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	bd30      	pop	{r4, r5, pc}
 800c6fe:	42a3      	cmp	r3, r4
 800c700:	d3f4      	bcc.n	800c6ec <__mcmp+0x18>
 800c702:	e7fb      	b.n	800c6fc <__mcmp+0x28>
 800c704:	f04f 30ff 	mov.w	r0, #4294967295
 800c708:	e7f8      	b.n	800c6fc <__mcmp+0x28>
	...

0800c70c <__mdiff>:
 800c70c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c710:	460d      	mov	r5, r1
 800c712:	4607      	mov	r7, r0
 800c714:	4611      	mov	r1, r2
 800c716:	4628      	mov	r0, r5
 800c718:	4614      	mov	r4, r2
 800c71a:	f7ff ffdb 	bl	800c6d4 <__mcmp>
 800c71e:	1e06      	subs	r6, r0, #0
 800c720:	d111      	bne.n	800c746 <__mdiff+0x3a>
 800c722:	4631      	mov	r1, r6
 800c724:	4638      	mov	r0, r7
 800c726:	f7ff fd0d 	bl	800c144 <_Balloc>
 800c72a:	4602      	mov	r2, r0
 800c72c:	b928      	cbnz	r0, 800c73a <__mdiff+0x2e>
 800c72e:	f240 2132 	movw	r1, #562	; 0x232
 800c732:	4b3a      	ldr	r3, [pc, #232]	; (800c81c <__mdiff+0x110>)
 800c734:	483a      	ldr	r0, [pc, #232]	; (800c820 <__mdiff+0x114>)
 800c736:	f7fe f8ad 	bl	800a894 <__assert_func>
 800c73a:	2301      	movs	r3, #1
 800c73c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c740:	4610      	mov	r0, r2
 800c742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c746:	bfa4      	itt	ge
 800c748:	4623      	movge	r3, r4
 800c74a:	462c      	movge	r4, r5
 800c74c:	4638      	mov	r0, r7
 800c74e:	6861      	ldr	r1, [r4, #4]
 800c750:	bfa6      	itte	ge
 800c752:	461d      	movge	r5, r3
 800c754:	2600      	movge	r6, #0
 800c756:	2601      	movlt	r6, #1
 800c758:	f7ff fcf4 	bl	800c144 <_Balloc>
 800c75c:	4602      	mov	r2, r0
 800c75e:	b918      	cbnz	r0, 800c768 <__mdiff+0x5c>
 800c760:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c764:	4b2d      	ldr	r3, [pc, #180]	; (800c81c <__mdiff+0x110>)
 800c766:	e7e5      	b.n	800c734 <__mdiff+0x28>
 800c768:	f102 0814 	add.w	r8, r2, #20
 800c76c:	46c2      	mov	sl, r8
 800c76e:	f04f 0c00 	mov.w	ip, #0
 800c772:	6927      	ldr	r7, [r4, #16]
 800c774:	60c6      	str	r6, [r0, #12]
 800c776:	692e      	ldr	r6, [r5, #16]
 800c778:	f104 0014 	add.w	r0, r4, #20
 800c77c:	f105 0914 	add.w	r9, r5, #20
 800c780:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c788:	3410      	adds	r4, #16
 800c78a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c78e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c792:	fa1f f18b 	uxth.w	r1, fp
 800c796:	448c      	add	ip, r1
 800c798:	b299      	uxth	r1, r3
 800c79a:	0c1b      	lsrs	r3, r3, #16
 800c79c:	ebac 0101 	sub.w	r1, ip, r1
 800c7a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c7a8:	b289      	uxth	r1, r1
 800c7aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c7ae:	454e      	cmp	r6, r9
 800c7b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c7b4:	f84a 3b04 	str.w	r3, [sl], #4
 800c7b8:	d8e7      	bhi.n	800c78a <__mdiff+0x7e>
 800c7ba:	1b73      	subs	r3, r6, r5
 800c7bc:	3b15      	subs	r3, #21
 800c7be:	f023 0303 	bic.w	r3, r3, #3
 800c7c2:	3515      	adds	r5, #21
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	42ae      	cmp	r6, r5
 800c7c8:	bf38      	it	cc
 800c7ca:	2304      	movcc	r3, #4
 800c7cc:	4418      	add	r0, r3
 800c7ce:	4443      	add	r3, r8
 800c7d0:	461e      	mov	r6, r3
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	4575      	cmp	r5, lr
 800c7d6:	d30e      	bcc.n	800c7f6 <__mdiff+0xea>
 800c7d8:	f10e 0103 	add.w	r1, lr, #3
 800c7dc:	1a09      	subs	r1, r1, r0
 800c7de:	f021 0103 	bic.w	r1, r1, #3
 800c7e2:	3803      	subs	r0, #3
 800c7e4:	4586      	cmp	lr, r0
 800c7e6:	bf38      	it	cc
 800c7e8:	2100      	movcc	r1, #0
 800c7ea:	4419      	add	r1, r3
 800c7ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c7f0:	b18b      	cbz	r3, 800c816 <__mdiff+0x10a>
 800c7f2:	6117      	str	r7, [r2, #16]
 800c7f4:	e7a4      	b.n	800c740 <__mdiff+0x34>
 800c7f6:	f855 8b04 	ldr.w	r8, [r5], #4
 800c7fa:	fa1f f188 	uxth.w	r1, r8
 800c7fe:	4461      	add	r1, ip
 800c800:	140c      	asrs	r4, r1, #16
 800c802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c806:	b289      	uxth	r1, r1
 800c808:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c80c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c810:	f846 1b04 	str.w	r1, [r6], #4
 800c814:	e7de      	b.n	800c7d4 <__mdiff+0xc8>
 800c816:	3f01      	subs	r7, #1
 800c818:	e7e8      	b.n	800c7ec <__mdiff+0xe0>
 800c81a:	bf00      	nop
 800c81c:	0800d901 	.word	0x0800d901
 800c820:	0800d9f0 	.word	0x0800d9f0

0800c824 <__ulp>:
 800c824:	4b11      	ldr	r3, [pc, #68]	; (800c86c <__ulp+0x48>)
 800c826:	400b      	ands	r3, r1
 800c828:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dd02      	ble.n	800c836 <__ulp+0x12>
 800c830:	2000      	movs	r0, #0
 800c832:	4619      	mov	r1, r3
 800c834:	4770      	bx	lr
 800c836:	425b      	negs	r3, r3
 800c838:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c83c:	f04f 0000 	mov.w	r0, #0
 800c840:	f04f 0100 	mov.w	r1, #0
 800c844:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c848:	da04      	bge.n	800c854 <__ulp+0x30>
 800c84a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c84e:	fa43 f102 	asr.w	r1, r3, r2
 800c852:	4770      	bx	lr
 800c854:	f1a2 0314 	sub.w	r3, r2, #20
 800c858:	2b1e      	cmp	r3, #30
 800c85a:	bfd6      	itet	le
 800c85c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c860:	2301      	movgt	r3, #1
 800c862:	fa22 f303 	lsrle.w	r3, r2, r3
 800c866:	4618      	mov	r0, r3
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	7ff00000 	.word	0x7ff00000

0800c870 <__b2d>:
 800c870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c874:	6907      	ldr	r7, [r0, #16]
 800c876:	f100 0914 	add.w	r9, r0, #20
 800c87a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c87e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c882:	f1a7 0804 	sub.w	r8, r7, #4
 800c886:	4630      	mov	r0, r6
 800c888:	f7ff fd4e 	bl	800c328 <__hi0bits>
 800c88c:	f1c0 0320 	rsb	r3, r0, #32
 800c890:	280a      	cmp	r0, #10
 800c892:	600b      	str	r3, [r1, #0]
 800c894:	491f      	ldr	r1, [pc, #124]	; (800c914 <__b2d+0xa4>)
 800c896:	dc17      	bgt.n	800c8c8 <__b2d+0x58>
 800c898:	45c1      	cmp	r9, r8
 800c89a:	bf28      	it	cs
 800c89c:	2200      	movcs	r2, #0
 800c89e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c8a2:	fa26 f30c 	lsr.w	r3, r6, ip
 800c8a6:	bf38      	it	cc
 800c8a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c8ac:	ea43 0501 	orr.w	r5, r3, r1
 800c8b0:	f100 0315 	add.w	r3, r0, #21
 800c8b4:	fa06 f303 	lsl.w	r3, r6, r3
 800c8b8:	fa22 f20c 	lsr.w	r2, r2, ip
 800c8bc:	ea43 0402 	orr.w	r4, r3, r2
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c8:	45c1      	cmp	r9, r8
 800c8ca:	bf2e      	itee	cs
 800c8cc:	2200      	movcs	r2, #0
 800c8ce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c8d2:	f1a7 0808 	subcc.w	r8, r7, #8
 800c8d6:	f1b0 030b 	subs.w	r3, r0, #11
 800c8da:	d016      	beq.n	800c90a <__b2d+0x9a>
 800c8dc:	f1c3 0720 	rsb	r7, r3, #32
 800c8e0:	fa22 f107 	lsr.w	r1, r2, r7
 800c8e4:	45c8      	cmp	r8, r9
 800c8e6:	fa06 f603 	lsl.w	r6, r6, r3
 800c8ea:	ea46 0601 	orr.w	r6, r6, r1
 800c8ee:	bf94      	ite	ls
 800c8f0:	2100      	movls	r1, #0
 800c8f2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c8f6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c8fa:	fa02 f003 	lsl.w	r0, r2, r3
 800c8fe:	40f9      	lsrs	r1, r7
 800c900:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c904:	ea40 0401 	orr.w	r4, r0, r1
 800c908:	e7da      	b.n	800c8c0 <__b2d+0x50>
 800c90a:	4614      	mov	r4, r2
 800c90c:	ea46 0501 	orr.w	r5, r6, r1
 800c910:	e7d6      	b.n	800c8c0 <__b2d+0x50>
 800c912:	bf00      	nop
 800c914:	3ff00000 	.word	0x3ff00000

0800c918 <__d2b>:
 800c918:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c91c:	2101      	movs	r1, #1
 800c91e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c922:	4690      	mov	r8, r2
 800c924:	461d      	mov	r5, r3
 800c926:	f7ff fc0d 	bl	800c144 <_Balloc>
 800c92a:	4604      	mov	r4, r0
 800c92c:	b930      	cbnz	r0, 800c93c <__d2b+0x24>
 800c92e:	4602      	mov	r2, r0
 800c930:	f240 310a 	movw	r1, #778	; 0x30a
 800c934:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <__d2b+0xb0>)
 800c936:	4825      	ldr	r0, [pc, #148]	; (800c9cc <__d2b+0xb4>)
 800c938:	f7fd ffac 	bl	800a894 <__assert_func>
 800c93c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c940:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c944:	bb2d      	cbnz	r5, 800c992 <__d2b+0x7a>
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	f1b8 0300 	subs.w	r3, r8, #0
 800c94c:	d026      	beq.n	800c99c <__d2b+0x84>
 800c94e:	4668      	mov	r0, sp
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	f7ff fd09 	bl	800c368 <__lo0bits>
 800c956:	9900      	ldr	r1, [sp, #0]
 800c958:	b1f0      	cbz	r0, 800c998 <__d2b+0x80>
 800c95a:	9a01      	ldr	r2, [sp, #4]
 800c95c:	f1c0 0320 	rsb	r3, r0, #32
 800c960:	fa02 f303 	lsl.w	r3, r2, r3
 800c964:	430b      	orrs	r3, r1
 800c966:	40c2      	lsrs	r2, r0
 800c968:	6163      	str	r3, [r4, #20]
 800c96a:	9201      	str	r2, [sp, #4]
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bf14      	ite	ne
 800c972:	2102      	movne	r1, #2
 800c974:	2101      	moveq	r1, #1
 800c976:	61a3      	str	r3, [r4, #24]
 800c978:	6121      	str	r1, [r4, #16]
 800c97a:	b1c5      	cbz	r5, 800c9ae <__d2b+0x96>
 800c97c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c980:	4405      	add	r5, r0
 800c982:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c986:	603d      	str	r5, [r7, #0]
 800c988:	6030      	str	r0, [r6, #0]
 800c98a:	4620      	mov	r0, r4
 800c98c:	b002      	add	sp, #8
 800c98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c996:	e7d6      	b.n	800c946 <__d2b+0x2e>
 800c998:	6161      	str	r1, [r4, #20]
 800c99a:	e7e7      	b.n	800c96c <__d2b+0x54>
 800c99c:	a801      	add	r0, sp, #4
 800c99e:	f7ff fce3 	bl	800c368 <__lo0bits>
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	6121      	str	r1, [r4, #16]
 800c9a8:	6163      	str	r3, [r4, #20]
 800c9aa:	3020      	adds	r0, #32
 800c9ac:	e7e5      	b.n	800c97a <__d2b+0x62>
 800c9ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c9b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9b6:	6038      	str	r0, [r7, #0]
 800c9b8:	6918      	ldr	r0, [r3, #16]
 800c9ba:	f7ff fcb5 	bl	800c328 <__hi0bits>
 800c9be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c9c2:	6031      	str	r1, [r6, #0]
 800c9c4:	e7e1      	b.n	800c98a <__d2b+0x72>
 800c9c6:	bf00      	nop
 800c9c8:	0800d901 	.word	0x0800d901
 800c9cc:	0800d9f0 	.word	0x0800d9f0

0800c9d0 <__ratio>:
 800c9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	4688      	mov	r8, r1
 800c9d6:	4669      	mov	r1, sp
 800c9d8:	4681      	mov	r9, r0
 800c9da:	f7ff ff49 	bl	800c870 <__b2d>
 800c9de:	460f      	mov	r7, r1
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	a901      	add	r1, sp, #4
 800c9e8:	f7ff ff42 	bl	800c870 <__b2d>
 800c9ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9f4:	468b      	mov	fp, r1
 800c9f6:	eba3 0c02 	sub.w	ip, r3, r2
 800c9fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	bfd5      	itete	le
 800ca08:	460a      	movle	r2, r1
 800ca0a:	462a      	movgt	r2, r5
 800ca0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca10:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca14:	bfd8      	it	le
 800ca16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca1a:	465b      	mov	r3, fp
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	4639      	mov	r1, r7
 800ca20:	4620      	mov	r0, r4
 800ca22:	f7f3 ffb1 	bl	8000988 <__aeabi_ddiv>
 800ca26:	b003      	add	sp, #12
 800ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca2c <__copybits>:
 800ca2c:	3901      	subs	r1, #1
 800ca2e:	b570      	push	{r4, r5, r6, lr}
 800ca30:	1149      	asrs	r1, r1, #5
 800ca32:	6914      	ldr	r4, [r2, #16]
 800ca34:	3101      	adds	r1, #1
 800ca36:	f102 0314 	add.w	r3, r2, #20
 800ca3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca42:	1f05      	subs	r5, r0, #4
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	d30c      	bcc.n	800ca62 <__copybits+0x36>
 800ca48:	1aa3      	subs	r3, r4, r2
 800ca4a:	3b11      	subs	r3, #17
 800ca4c:	f023 0303 	bic.w	r3, r3, #3
 800ca50:	3211      	adds	r2, #17
 800ca52:	42a2      	cmp	r2, r4
 800ca54:	bf88      	it	hi
 800ca56:	2300      	movhi	r3, #0
 800ca58:	4418      	add	r0, r3
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	4288      	cmp	r0, r1
 800ca5e:	d305      	bcc.n	800ca6c <__copybits+0x40>
 800ca60:	bd70      	pop	{r4, r5, r6, pc}
 800ca62:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca66:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca6a:	e7eb      	b.n	800ca44 <__copybits+0x18>
 800ca6c:	f840 3b04 	str.w	r3, [r0], #4
 800ca70:	e7f4      	b.n	800ca5c <__copybits+0x30>

0800ca72 <__any_on>:
 800ca72:	f100 0214 	add.w	r2, r0, #20
 800ca76:	6900      	ldr	r0, [r0, #16]
 800ca78:	114b      	asrs	r3, r1, #5
 800ca7a:	4298      	cmp	r0, r3
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	db11      	blt.n	800caa4 <__any_on+0x32>
 800ca80:	dd0a      	ble.n	800ca98 <__any_on+0x26>
 800ca82:	f011 011f 	ands.w	r1, r1, #31
 800ca86:	d007      	beq.n	800ca98 <__any_on+0x26>
 800ca88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca8c:	fa24 f001 	lsr.w	r0, r4, r1
 800ca90:	fa00 f101 	lsl.w	r1, r0, r1
 800ca94:	428c      	cmp	r4, r1
 800ca96:	d10b      	bne.n	800cab0 <__any_on+0x3e>
 800ca98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d803      	bhi.n	800caa8 <__any_on+0x36>
 800caa0:	2000      	movs	r0, #0
 800caa2:	bd10      	pop	{r4, pc}
 800caa4:	4603      	mov	r3, r0
 800caa6:	e7f7      	b.n	800ca98 <__any_on+0x26>
 800caa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800caac:	2900      	cmp	r1, #0
 800caae:	d0f5      	beq.n	800ca9c <__any_on+0x2a>
 800cab0:	2001      	movs	r0, #1
 800cab2:	e7f6      	b.n	800caa2 <__any_on+0x30>

0800cab4 <_calloc_r>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	fba1 5402 	umull	r5, r4, r1, r2
 800caba:	b934      	cbnz	r4, 800caca <_calloc_r+0x16>
 800cabc:	4629      	mov	r1, r5
 800cabe:	f000 f875 	bl	800cbac <_malloc_r>
 800cac2:	4606      	mov	r6, r0
 800cac4:	b928      	cbnz	r0, 800cad2 <_calloc_r+0x1e>
 800cac6:	4630      	mov	r0, r6
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
 800caca:	220c      	movs	r2, #12
 800cacc:	2600      	movs	r6, #0
 800cace:	6002      	str	r2, [r0, #0]
 800cad0:	e7f9      	b.n	800cac6 <_calloc_r+0x12>
 800cad2:	462a      	mov	r2, r5
 800cad4:	4621      	mov	r1, r4
 800cad6:	f7fc f875 	bl	8008bc4 <memset>
 800cada:	e7f4      	b.n	800cac6 <_calloc_r+0x12>

0800cadc <_free_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4605      	mov	r5, r0
 800cae0:	2900      	cmp	r1, #0
 800cae2:	d040      	beq.n	800cb66 <_free_r+0x8a>
 800cae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cae8:	1f0c      	subs	r4, r1, #4
 800caea:	2b00      	cmp	r3, #0
 800caec:	bfb8      	it	lt
 800caee:	18e4      	addlt	r4, r4, r3
 800caf0:	f000 fc76 	bl	800d3e0 <__malloc_lock>
 800caf4:	4a1c      	ldr	r2, [pc, #112]	; (800cb68 <_free_r+0x8c>)
 800caf6:	6813      	ldr	r3, [r2, #0]
 800caf8:	b933      	cbnz	r3, 800cb08 <_free_r+0x2c>
 800cafa:	6063      	str	r3, [r4, #4]
 800cafc:	6014      	str	r4, [r2, #0]
 800cafe:	4628      	mov	r0, r5
 800cb00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb04:	f000 bc72 	b.w	800d3ec <__malloc_unlock>
 800cb08:	42a3      	cmp	r3, r4
 800cb0a:	d908      	bls.n	800cb1e <_free_r+0x42>
 800cb0c:	6820      	ldr	r0, [r4, #0]
 800cb0e:	1821      	adds	r1, r4, r0
 800cb10:	428b      	cmp	r3, r1
 800cb12:	bf01      	itttt	eq
 800cb14:	6819      	ldreq	r1, [r3, #0]
 800cb16:	685b      	ldreq	r3, [r3, #4]
 800cb18:	1809      	addeq	r1, r1, r0
 800cb1a:	6021      	streq	r1, [r4, #0]
 800cb1c:	e7ed      	b.n	800cafa <_free_r+0x1e>
 800cb1e:	461a      	mov	r2, r3
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	b10b      	cbz	r3, 800cb28 <_free_r+0x4c>
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	d9fa      	bls.n	800cb1e <_free_r+0x42>
 800cb28:	6811      	ldr	r1, [r2, #0]
 800cb2a:	1850      	adds	r0, r2, r1
 800cb2c:	42a0      	cmp	r0, r4
 800cb2e:	d10b      	bne.n	800cb48 <_free_r+0x6c>
 800cb30:	6820      	ldr	r0, [r4, #0]
 800cb32:	4401      	add	r1, r0
 800cb34:	1850      	adds	r0, r2, r1
 800cb36:	4283      	cmp	r3, r0
 800cb38:	6011      	str	r1, [r2, #0]
 800cb3a:	d1e0      	bne.n	800cafe <_free_r+0x22>
 800cb3c:	6818      	ldr	r0, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4401      	add	r1, r0
 800cb42:	6011      	str	r1, [r2, #0]
 800cb44:	6053      	str	r3, [r2, #4]
 800cb46:	e7da      	b.n	800cafe <_free_r+0x22>
 800cb48:	d902      	bls.n	800cb50 <_free_r+0x74>
 800cb4a:	230c      	movs	r3, #12
 800cb4c:	602b      	str	r3, [r5, #0]
 800cb4e:	e7d6      	b.n	800cafe <_free_r+0x22>
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	1821      	adds	r1, r4, r0
 800cb54:	428b      	cmp	r3, r1
 800cb56:	bf01      	itttt	eq
 800cb58:	6819      	ldreq	r1, [r3, #0]
 800cb5a:	685b      	ldreq	r3, [r3, #4]
 800cb5c:	1809      	addeq	r1, r1, r0
 800cb5e:	6021      	streq	r1, [r4, #0]
 800cb60:	6063      	str	r3, [r4, #4]
 800cb62:	6054      	str	r4, [r2, #4]
 800cb64:	e7cb      	b.n	800cafe <_free_r+0x22>
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	20000ca0 	.word	0x20000ca0

0800cb6c <sbrk_aligned>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	4e0e      	ldr	r6, [pc, #56]	; (800cba8 <sbrk_aligned+0x3c>)
 800cb70:	460c      	mov	r4, r1
 800cb72:	6831      	ldr	r1, [r6, #0]
 800cb74:	4605      	mov	r5, r0
 800cb76:	b911      	cbnz	r1, 800cb7e <sbrk_aligned+0x12>
 800cb78:	f000 fb46 	bl	800d208 <_sbrk_r>
 800cb7c:	6030      	str	r0, [r6, #0]
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4628      	mov	r0, r5
 800cb82:	f000 fb41 	bl	800d208 <_sbrk_r>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d00a      	beq.n	800cba0 <sbrk_aligned+0x34>
 800cb8a:	1cc4      	adds	r4, r0, #3
 800cb8c:	f024 0403 	bic.w	r4, r4, #3
 800cb90:	42a0      	cmp	r0, r4
 800cb92:	d007      	beq.n	800cba4 <sbrk_aligned+0x38>
 800cb94:	1a21      	subs	r1, r4, r0
 800cb96:	4628      	mov	r0, r5
 800cb98:	f000 fb36 	bl	800d208 <_sbrk_r>
 800cb9c:	3001      	adds	r0, #1
 800cb9e:	d101      	bne.n	800cba4 <sbrk_aligned+0x38>
 800cba0:	f04f 34ff 	mov.w	r4, #4294967295
 800cba4:	4620      	mov	r0, r4
 800cba6:	bd70      	pop	{r4, r5, r6, pc}
 800cba8:	20000ca4 	.word	0x20000ca4

0800cbac <_malloc_r>:
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	1ccd      	adds	r5, r1, #3
 800cbb2:	f025 0503 	bic.w	r5, r5, #3
 800cbb6:	3508      	adds	r5, #8
 800cbb8:	2d0c      	cmp	r5, #12
 800cbba:	bf38      	it	cc
 800cbbc:	250c      	movcc	r5, #12
 800cbbe:	2d00      	cmp	r5, #0
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	db01      	blt.n	800cbc8 <_malloc_r+0x1c>
 800cbc4:	42a9      	cmp	r1, r5
 800cbc6:	d905      	bls.n	800cbd4 <_malloc_r+0x28>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	2600      	movs	r6, #0
 800cbcc:	603b      	str	r3, [r7, #0]
 800cbce:	4630      	mov	r0, r6
 800cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd4:	4e2e      	ldr	r6, [pc, #184]	; (800cc90 <_malloc_r+0xe4>)
 800cbd6:	f000 fc03 	bl	800d3e0 <__malloc_lock>
 800cbda:	6833      	ldr	r3, [r6, #0]
 800cbdc:	461c      	mov	r4, r3
 800cbde:	bb34      	cbnz	r4, 800cc2e <_malloc_r+0x82>
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	f7ff ffc2 	bl	800cb6c <sbrk_aligned>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	4604      	mov	r4, r0
 800cbec:	d14d      	bne.n	800cc8a <_malloc_r+0xde>
 800cbee:	6834      	ldr	r4, [r6, #0]
 800cbf0:	4626      	mov	r6, r4
 800cbf2:	2e00      	cmp	r6, #0
 800cbf4:	d140      	bne.n	800cc78 <_malloc_r+0xcc>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	eb04 0803 	add.w	r8, r4, r3
 800cc00:	f000 fb02 	bl	800d208 <_sbrk_r>
 800cc04:	4580      	cmp	r8, r0
 800cc06:	d13a      	bne.n	800cc7e <_malloc_r+0xd2>
 800cc08:	6821      	ldr	r1, [r4, #0]
 800cc0a:	3503      	adds	r5, #3
 800cc0c:	1a6d      	subs	r5, r5, r1
 800cc0e:	f025 0503 	bic.w	r5, r5, #3
 800cc12:	3508      	adds	r5, #8
 800cc14:	2d0c      	cmp	r5, #12
 800cc16:	bf38      	it	cc
 800cc18:	250c      	movcc	r5, #12
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	f7ff ffa5 	bl	800cb6c <sbrk_aligned>
 800cc22:	3001      	adds	r0, #1
 800cc24:	d02b      	beq.n	800cc7e <_malloc_r+0xd2>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	442b      	add	r3, r5
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	e00e      	b.n	800cc4c <_malloc_r+0xa0>
 800cc2e:	6822      	ldr	r2, [r4, #0]
 800cc30:	1b52      	subs	r2, r2, r5
 800cc32:	d41e      	bmi.n	800cc72 <_malloc_r+0xc6>
 800cc34:	2a0b      	cmp	r2, #11
 800cc36:	d916      	bls.n	800cc66 <_malloc_r+0xba>
 800cc38:	1961      	adds	r1, r4, r5
 800cc3a:	42a3      	cmp	r3, r4
 800cc3c:	6025      	str	r5, [r4, #0]
 800cc3e:	bf18      	it	ne
 800cc40:	6059      	strne	r1, [r3, #4]
 800cc42:	6863      	ldr	r3, [r4, #4]
 800cc44:	bf08      	it	eq
 800cc46:	6031      	streq	r1, [r6, #0]
 800cc48:	5162      	str	r2, [r4, r5]
 800cc4a:	604b      	str	r3, [r1, #4]
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	f104 060b 	add.w	r6, r4, #11
 800cc52:	f000 fbcb 	bl	800d3ec <__malloc_unlock>
 800cc56:	f026 0607 	bic.w	r6, r6, #7
 800cc5a:	1d23      	adds	r3, r4, #4
 800cc5c:	1af2      	subs	r2, r6, r3
 800cc5e:	d0b6      	beq.n	800cbce <_malloc_r+0x22>
 800cc60:	1b9b      	subs	r3, r3, r6
 800cc62:	50a3      	str	r3, [r4, r2]
 800cc64:	e7b3      	b.n	800cbce <_malloc_r+0x22>
 800cc66:	6862      	ldr	r2, [r4, #4]
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	bf0c      	ite	eq
 800cc6c:	6032      	streq	r2, [r6, #0]
 800cc6e:	605a      	strne	r2, [r3, #4]
 800cc70:	e7ec      	b.n	800cc4c <_malloc_r+0xa0>
 800cc72:	4623      	mov	r3, r4
 800cc74:	6864      	ldr	r4, [r4, #4]
 800cc76:	e7b2      	b.n	800cbde <_malloc_r+0x32>
 800cc78:	4634      	mov	r4, r6
 800cc7a:	6876      	ldr	r6, [r6, #4]
 800cc7c:	e7b9      	b.n	800cbf2 <_malloc_r+0x46>
 800cc7e:	230c      	movs	r3, #12
 800cc80:	4638      	mov	r0, r7
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	f000 fbb2 	bl	800d3ec <__malloc_unlock>
 800cc88:	e7a1      	b.n	800cbce <_malloc_r+0x22>
 800cc8a:	6025      	str	r5, [r4, #0]
 800cc8c:	e7de      	b.n	800cc4c <_malloc_r+0xa0>
 800cc8e:	bf00      	nop
 800cc90:	20000ca0 	.word	0x20000ca0

0800cc94 <__ssputs_r>:
 800cc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc98:	688e      	ldr	r6, [r1, #8]
 800cc9a:	4682      	mov	sl, r0
 800cc9c:	429e      	cmp	r6, r3
 800cc9e:	460c      	mov	r4, r1
 800cca0:	4690      	mov	r8, r2
 800cca2:	461f      	mov	r7, r3
 800cca4:	d838      	bhi.n	800cd18 <__ssputs_r+0x84>
 800cca6:	898a      	ldrh	r2, [r1, #12]
 800cca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccac:	d032      	beq.n	800cd14 <__ssputs_r+0x80>
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	6909      	ldr	r1, [r1, #16]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	eba5 0901 	sub.w	r9, r5, r1
 800ccb8:	6965      	ldr	r5, [r4, #20]
 800ccba:	444b      	add	r3, r9
 800ccbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccc4:	106d      	asrs	r5, r5, #1
 800ccc6:	429d      	cmp	r5, r3
 800ccc8:	bf38      	it	cc
 800ccca:	461d      	movcc	r5, r3
 800cccc:	0553      	lsls	r3, r2, #21
 800ccce:	d531      	bpl.n	800cd34 <__ssputs_r+0xa0>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	f7ff ff6b 	bl	800cbac <_malloc_r>
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	b950      	cbnz	r0, 800ccf0 <__ssputs_r+0x5c>
 800ccda:	230c      	movs	r3, #12
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	f8ca 3000 	str.w	r3, [sl]
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf0:	464a      	mov	r2, r9
 800ccf2:	6921      	ldr	r1, [r4, #16]
 800ccf4:	f7fb ff58 	bl	8008ba8 <memcpy>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	6126      	str	r6, [r4, #16]
 800cd06:	444e      	add	r6, r9
 800cd08:	6026      	str	r6, [r4, #0]
 800cd0a:	463e      	mov	r6, r7
 800cd0c:	6165      	str	r5, [r4, #20]
 800cd0e:	eba5 0509 	sub.w	r5, r5, r9
 800cd12:	60a5      	str	r5, [r4, #8]
 800cd14:	42be      	cmp	r6, r7
 800cd16:	d900      	bls.n	800cd1a <__ssputs_r+0x86>
 800cd18:	463e      	mov	r6, r7
 800cd1a:	4632      	mov	r2, r6
 800cd1c:	4641      	mov	r1, r8
 800cd1e:	6820      	ldr	r0, [r4, #0]
 800cd20:	f000 fb44 	bl	800d3ac <memmove>
 800cd24:	68a3      	ldr	r3, [r4, #8]
 800cd26:	2000      	movs	r0, #0
 800cd28:	1b9b      	subs	r3, r3, r6
 800cd2a:	60a3      	str	r3, [r4, #8]
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	4433      	add	r3, r6
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	e7db      	b.n	800ccec <__ssputs_r+0x58>
 800cd34:	462a      	mov	r2, r5
 800cd36:	f000 fb5f 	bl	800d3f8 <_realloc_r>
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d1e1      	bne.n	800cd04 <__ssputs_r+0x70>
 800cd40:	4650      	mov	r0, sl
 800cd42:	6921      	ldr	r1, [r4, #16]
 800cd44:	f7ff feca 	bl	800cadc <_free_r>
 800cd48:	e7c7      	b.n	800ccda <__ssputs_r+0x46>
	...

0800cd4c <_svfiprintf_r>:
 800cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd50:	4698      	mov	r8, r3
 800cd52:	898b      	ldrh	r3, [r1, #12]
 800cd54:	4607      	mov	r7, r0
 800cd56:	061b      	lsls	r3, r3, #24
 800cd58:	460d      	mov	r5, r1
 800cd5a:	4614      	mov	r4, r2
 800cd5c:	b09d      	sub	sp, #116	; 0x74
 800cd5e:	d50e      	bpl.n	800cd7e <_svfiprintf_r+0x32>
 800cd60:	690b      	ldr	r3, [r1, #16]
 800cd62:	b963      	cbnz	r3, 800cd7e <_svfiprintf_r+0x32>
 800cd64:	2140      	movs	r1, #64	; 0x40
 800cd66:	f7ff ff21 	bl	800cbac <_malloc_r>
 800cd6a:	6028      	str	r0, [r5, #0]
 800cd6c:	6128      	str	r0, [r5, #16]
 800cd6e:	b920      	cbnz	r0, 800cd7a <_svfiprintf_r+0x2e>
 800cd70:	230c      	movs	r3, #12
 800cd72:	603b      	str	r3, [r7, #0]
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295
 800cd78:	e0d1      	b.n	800cf1e <_svfiprintf_r+0x1d2>
 800cd7a:	2340      	movs	r3, #64	; 0x40
 800cd7c:	616b      	str	r3, [r5, #20]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	9309      	str	r3, [sp, #36]	; 0x24
 800cd82:	2320      	movs	r3, #32
 800cd84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd88:	2330      	movs	r3, #48	; 0x30
 800cd8a:	f04f 0901 	mov.w	r9, #1
 800cd8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf38 <_svfiprintf_r+0x1ec>
 800cd96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd9a:	4623      	mov	r3, r4
 800cd9c:	469a      	mov	sl, r3
 800cd9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda2:	b10a      	cbz	r2, 800cda8 <_svfiprintf_r+0x5c>
 800cda4:	2a25      	cmp	r2, #37	; 0x25
 800cda6:	d1f9      	bne.n	800cd9c <_svfiprintf_r+0x50>
 800cda8:	ebba 0b04 	subs.w	fp, sl, r4
 800cdac:	d00b      	beq.n	800cdc6 <_svfiprintf_r+0x7a>
 800cdae:	465b      	mov	r3, fp
 800cdb0:	4622      	mov	r2, r4
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff ff6d 	bl	800cc94 <__ssputs_r>
 800cdba:	3001      	adds	r0, #1
 800cdbc:	f000 80aa 	beq.w	800cf14 <_svfiprintf_r+0x1c8>
 800cdc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdc2:	445a      	add	r2, fp
 800cdc4:	9209      	str	r2, [sp, #36]	; 0x24
 800cdc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 80a2 	beq.w	800cf14 <_svfiprintf_r+0x1c8>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdda:	f10a 0a01 	add.w	sl, sl, #1
 800cdde:	9304      	str	r3, [sp, #16]
 800cde0:	9307      	str	r3, [sp, #28]
 800cde2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cde6:	931a      	str	r3, [sp, #104]	; 0x68
 800cde8:	4654      	mov	r4, sl
 800cdea:	2205      	movs	r2, #5
 800cdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf0:	4851      	ldr	r0, [pc, #324]	; (800cf38 <_svfiprintf_r+0x1ec>)
 800cdf2:	f7ff f999 	bl	800c128 <memchr>
 800cdf6:	9a04      	ldr	r2, [sp, #16]
 800cdf8:	b9d8      	cbnz	r0, 800ce32 <_svfiprintf_r+0xe6>
 800cdfa:	06d0      	lsls	r0, r2, #27
 800cdfc:	bf44      	itt	mi
 800cdfe:	2320      	movmi	r3, #32
 800ce00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce04:	0711      	lsls	r1, r2, #28
 800ce06:	bf44      	itt	mi
 800ce08:	232b      	movmi	r3, #43	; 0x2b
 800ce0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce12:	2b2a      	cmp	r3, #42	; 0x2a
 800ce14:	d015      	beq.n	800ce42 <_svfiprintf_r+0xf6>
 800ce16:	4654      	mov	r4, sl
 800ce18:	2000      	movs	r0, #0
 800ce1a:	f04f 0c0a 	mov.w	ip, #10
 800ce1e:	9a07      	ldr	r2, [sp, #28]
 800ce20:	4621      	mov	r1, r4
 800ce22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce26:	3b30      	subs	r3, #48	; 0x30
 800ce28:	2b09      	cmp	r3, #9
 800ce2a:	d94e      	bls.n	800ceca <_svfiprintf_r+0x17e>
 800ce2c:	b1b0      	cbz	r0, 800ce5c <_svfiprintf_r+0x110>
 800ce2e:	9207      	str	r2, [sp, #28]
 800ce30:	e014      	b.n	800ce5c <_svfiprintf_r+0x110>
 800ce32:	eba0 0308 	sub.w	r3, r0, r8
 800ce36:	fa09 f303 	lsl.w	r3, r9, r3
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	46a2      	mov	sl, r4
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	e7d2      	b.n	800cde8 <_svfiprintf_r+0x9c>
 800ce42:	9b03      	ldr	r3, [sp, #12]
 800ce44:	1d19      	adds	r1, r3, #4
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	9103      	str	r1, [sp, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	bfbb      	ittet	lt
 800ce4e:	425b      	neglt	r3, r3
 800ce50:	f042 0202 	orrlt.w	r2, r2, #2
 800ce54:	9307      	strge	r3, [sp, #28]
 800ce56:	9307      	strlt	r3, [sp, #28]
 800ce58:	bfb8      	it	lt
 800ce5a:	9204      	strlt	r2, [sp, #16]
 800ce5c:	7823      	ldrb	r3, [r4, #0]
 800ce5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce60:	d10c      	bne.n	800ce7c <_svfiprintf_r+0x130>
 800ce62:	7863      	ldrb	r3, [r4, #1]
 800ce64:	2b2a      	cmp	r3, #42	; 0x2a
 800ce66:	d135      	bne.n	800ced4 <_svfiprintf_r+0x188>
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	3402      	adds	r4, #2
 800ce6c:	1d1a      	adds	r2, r3, #4
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	9203      	str	r2, [sp, #12]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	bfb8      	it	lt
 800ce76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce7a:	9305      	str	r3, [sp, #20]
 800ce7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cf3c <_svfiprintf_r+0x1f0>
 800ce80:	2203      	movs	r2, #3
 800ce82:	4650      	mov	r0, sl
 800ce84:	7821      	ldrb	r1, [r4, #0]
 800ce86:	f7ff f94f 	bl	800c128 <memchr>
 800ce8a:	b140      	cbz	r0, 800ce9e <_svfiprintf_r+0x152>
 800ce8c:	2340      	movs	r3, #64	; 0x40
 800ce8e:	eba0 000a 	sub.w	r0, r0, sl
 800ce92:	fa03 f000 	lsl.w	r0, r3, r0
 800ce96:	9b04      	ldr	r3, [sp, #16]
 800ce98:	3401      	adds	r4, #1
 800ce9a:	4303      	orrs	r3, r0
 800ce9c:	9304      	str	r3, [sp, #16]
 800ce9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea2:	2206      	movs	r2, #6
 800cea4:	4826      	ldr	r0, [pc, #152]	; (800cf40 <_svfiprintf_r+0x1f4>)
 800cea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ceaa:	f7ff f93d 	bl	800c128 <memchr>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d038      	beq.n	800cf24 <_svfiprintf_r+0x1d8>
 800ceb2:	4b24      	ldr	r3, [pc, #144]	; (800cf44 <_svfiprintf_r+0x1f8>)
 800ceb4:	bb1b      	cbnz	r3, 800cefe <_svfiprintf_r+0x1b2>
 800ceb6:	9b03      	ldr	r3, [sp, #12]
 800ceb8:	3307      	adds	r3, #7
 800ceba:	f023 0307 	bic.w	r3, r3, #7
 800cebe:	3308      	adds	r3, #8
 800cec0:	9303      	str	r3, [sp, #12]
 800cec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec4:	4433      	add	r3, r6
 800cec6:	9309      	str	r3, [sp, #36]	; 0x24
 800cec8:	e767      	b.n	800cd9a <_svfiprintf_r+0x4e>
 800ceca:	460c      	mov	r4, r1
 800cecc:	2001      	movs	r0, #1
 800cece:	fb0c 3202 	mla	r2, ip, r2, r3
 800ced2:	e7a5      	b.n	800ce20 <_svfiprintf_r+0xd4>
 800ced4:	2300      	movs	r3, #0
 800ced6:	f04f 0c0a 	mov.w	ip, #10
 800ceda:	4619      	mov	r1, r3
 800cedc:	3401      	adds	r4, #1
 800cede:	9305      	str	r3, [sp, #20]
 800cee0:	4620      	mov	r0, r4
 800cee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cee6:	3a30      	subs	r2, #48	; 0x30
 800cee8:	2a09      	cmp	r2, #9
 800ceea:	d903      	bls.n	800cef4 <_svfiprintf_r+0x1a8>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0c5      	beq.n	800ce7c <_svfiprintf_r+0x130>
 800cef0:	9105      	str	r1, [sp, #20]
 800cef2:	e7c3      	b.n	800ce7c <_svfiprintf_r+0x130>
 800cef4:	4604      	mov	r4, r0
 800cef6:	2301      	movs	r3, #1
 800cef8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cefc:	e7f0      	b.n	800cee0 <_svfiprintf_r+0x194>
 800cefe:	ab03      	add	r3, sp, #12
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	462a      	mov	r2, r5
 800cf04:	4638      	mov	r0, r7
 800cf06:	4b10      	ldr	r3, [pc, #64]	; (800cf48 <_svfiprintf_r+0x1fc>)
 800cf08:	a904      	add	r1, sp, #16
 800cf0a:	f7fb ff01 	bl	8008d10 <_printf_float>
 800cf0e:	1c42      	adds	r2, r0, #1
 800cf10:	4606      	mov	r6, r0
 800cf12:	d1d6      	bne.n	800cec2 <_svfiprintf_r+0x176>
 800cf14:	89ab      	ldrh	r3, [r5, #12]
 800cf16:	065b      	lsls	r3, r3, #25
 800cf18:	f53f af2c 	bmi.w	800cd74 <_svfiprintf_r+0x28>
 800cf1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf1e:	b01d      	add	sp, #116	; 0x74
 800cf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf24:	ab03      	add	r3, sp, #12
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	462a      	mov	r2, r5
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <_svfiprintf_r+0x1fc>)
 800cf2e:	a904      	add	r1, sp, #16
 800cf30:	f7fc f98a 	bl	8009248 <_printf_i>
 800cf34:	e7eb      	b.n	800cf0e <_svfiprintf_r+0x1c2>
 800cf36:	bf00      	nop
 800cf38:	0800db4c 	.word	0x0800db4c
 800cf3c:	0800db52 	.word	0x0800db52
 800cf40:	0800db56 	.word	0x0800db56
 800cf44:	08008d11 	.word	0x08008d11
 800cf48:	0800cc95 	.word	0x0800cc95

0800cf4c <__sfputc_r>:
 800cf4c:	6893      	ldr	r3, [r2, #8]
 800cf4e:	b410      	push	{r4}
 800cf50:	3b01      	subs	r3, #1
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	6093      	str	r3, [r2, #8]
 800cf56:	da07      	bge.n	800cf68 <__sfputc_r+0x1c>
 800cf58:	6994      	ldr	r4, [r2, #24]
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	db01      	blt.n	800cf62 <__sfputc_r+0x16>
 800cf5e:	290a      	cmp	r1, #10
 800cf60:	d102      	bne.n	800cf68 <__sfputc_r+0x1c>
 800cf62:	bc10      	pop	{r4}
 800cf64:	f7fd bbd6 	b.w	800a714 <__swbuf_r>
 800cf68:	6813      	ldr	r3, [r2, #0]
 800cf6a:	1c58      	adds	r0, r3, #1
 800cf6c:	6010      	str	r0, [r2, #0]
 800cf6e:	7019      	strb	r1, [r3, #0]
 800cf70:	4608      	mov	r0, r1
 800cf72:	bc10      	pop	{r4}
 800cf74:	4770      	bx	lr

0800cf76 <__sfputs_r>:
 800cf76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf78:	4606      	mov	r6, r0
 800cf7a:	460f      	mov	r7, r1
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	18d5      	adds	r5, r2, r3
 800cf80:	42ac      	cmp	r4, r5
 800cf82:	d101      	bne.n	800cf88 <__sfputs_r+0x12>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e007      	b.n	800cf98 <__sfputs_r+0x22>
 800cf88:	463a      	mov	r2, r7
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf90:	f7ff ffdc 	bl	800cf4c <__sfputc_r>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d1f3      	bne.n	800cf80 <__sfputs_r+0xa>
 800cf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf9c <_vfiprintf_r>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	4614      	mov	r4, r2
 800cfa4:	4698      	mov	r8, r3
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	b09d      	sub	sp, #116	; 0x74
 800cfaa:	b118      	cbz	r0, 800cfb4 <_vfiprintf_r+0x18>
 800cfac:	6983      	ldr	r3, [r0, #24]
 800cfae:	b90b      	cbnz	r3, 800cfb4 <_vfiprintf_r+0x18>
 800cfb0:	f7fe fc1e 	bl	800b7f0 <__sinit>
 800cfb4:	4b89      	ldr	r3, [pc, #548]	; (800d1dc <_vfiprintf_r+0x240>)
 800cfb6:	429d      	cmp	r5, r3
 800cfb8:	d11b      	bne.n	800cff2 <_vfiprintf_r+0x56>
 800cfba:	6875      	ldr	r5, [r6, #4]
 800cfbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfbe:	07d9      	lsls	r1, r3, #31
 800cfc0:	d405      	bmi.n	800cfce <_vfiprintf_r+0x32>
 800cfc2:	89ab      	ldrh	r3, [r5, #12]
 800cfc4:	059a      	lsls	r2, r3, #22
 800cfc6:	d402      	bmi.n	800cfce <_vfiprintf_r+0x32>
 800cfc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfca:	f7ff f82c 	bl	800c026 <__retarget_lock_acquire_recursive>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	071b      	lsls	r3, r3, #28
 800cfd2:	d501      	bpl.n	800cfd8 <_vfiprintf_r+0x3c>
 800cfd4:	692b      	ldr	r3, [r5, #16]
 800cfd6:	b9eb      	cbnz	r3, 800d014 <_vfiprintf_r+0x78>
 800cfd8:	4629      	mov	r1, r5
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f7fd fbec 	bl	800a7b8 <__swsetup_r>
 800cfe0:	b1c0      	cbz	r0, 800d014 <_vfiprintf_r+0x78>
 800cfe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfe4:	07dc      	lsls	r4, r3, #31
 800cfe6:	d50e      	bpl.n	800d006 <_vfiprintf_r+0x6a>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	b01d      	add	sp, #116	; 0x74
 800cfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff2:	4b7b      	ldr	r3, [pc, #492]	; (800d1e0 <_vfiprintf_r+0x244>)
 800cff4:	429d      	cmp	r5, r3
 800cff6:	d101      	bne.n	800cffc <_vfiprintf_r+0x60>
 800cff8:	68b5      	ldr	r5, [r6, #8]
 800cffa:	e7df      	b.n	800cfbc <_vfiprintf_r+0x20>
 800cffc:	4b79      	ldr	r3, [pc, #484]	; (800d1e4 <_vfiprintf_r+0x248>)
 800cffe:	429d      	cmp	r5, r3
 800d000:	bf08      	it	eq
 800d002:	68f5      	ldreq	r5, [r6, #12]
 800d004:	e7da      	b.n	800cfbc <_vfiprintf_r+0x20>
 800d006:	89ab      	ldrh	r3, [r5, #12]
 800d008:	0598      	lsls	r0, r3, #22
 800d00a:	d4ed      	bmi.n	800cfe8 <_vfiprintf_r+0x4c>
 800d00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d00e:	f7ff f80b 	bl	800c028 <__retarget_lock_release_recursive>
 800d012:	e7e9      	b.n	800cfe8 <_vfiprintf_r+0x4c>
 800d014:	2300      	movs	r3, #0
 800d016:	9309      	str	r3, [sp, #36]	; 0x24
 800d018:	2320      	movs	r3, #32
 800d01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d01e:	2330      	movs	r3, #48	; 0x30
 800d020:	f04f 0901 	mov.w	r9, #1
 800d024:	f8cd 800c 	str.w	r8, [sp, #12]
 800d028:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d1e8 <_vfiprintf_r+0x24c>
 800d02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d030:	4623      	mov	r3, r4
 800d032:	469a      	mov	sl, r3
 800d034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d038:	b10a      	cbz	r2, 800d03e <_vfiprintf_r+0xa2>
 800d03a:	2a25      	cmp	r2, #37	; 0x25
 800d03c:	d1f9      	bne.n	800d032 <_vfiprintf_r+0x96>
 800d03e:	ebba 0b04 	subs.w	fp, sl, r4
 800d042:	d00b      	beq.n	800d05c <_vfiprintf_r+0xc0>
 800d044:	465b      	mov	r3, fp
 800d046:	4622      	mov	r2, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff ff93 	bl	800cf76 <__sfputs_r>
 800d050:	3001      	adds	r0, #1
 800d052:	f000 80aa 	beq.w	800d1aa <_vfiprintf_r+0x20e>
 800d056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d058:	445a      	add	r2, fp
 800d05a:	9209      	str	r2, [sp, #36]	; 0x24
 800d05c:	f89a 3000 	ldrb.w	r3, [sl]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 80a2 	beq.w	800d1aa <_vfiprintf_r+0x20e>
 800d066:	2300      	movs	r3, #0
 800d068:	f04f 32ff 	mov.w	r2, #4294967295
 800d06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d070:	f10a 0a01 	add.w	sl, sl, #1
 800d074:	9304      	str	r3, [sp, #16]
 800d076:	9307      	str	r3, [sp, #28]
 800d078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d07c:	931a      	str	r3, [sp, #104]	; 0x68
 800d07e:	4654      	mov	r4, sl
 800d080:	2205      	movs	r2, #5
 800d082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d086:	4858      	ldr	r0, [pc, #352]	; (800d1e8 <_vfiprintf_r+0x24c>)
 800d088:	f7ff f84e 	bl	800c128 <memchr>
 800d08c:	9a04      	ldr	r2, [sp, #16]
 800d08e:	b9d8      	cbnz	r0, 800d0c8 <_vfiprintf_r+0x12c>
 800d090:	06d1      	lsls	r1, r2, #27
 800d092:	bf44      	itt	mi
 800d094:	2320      	movmi	r3, #32
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d09a:	0713      	lsls	r3, r2, #28
 800d09c:	bf44      	itt	mi
 800d09e:	232b      	movmi	r3, #43	; 0x2b
 800d0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0aa:	d015      	beq.n	800d0d8 <_vfiprintf_r+0x13c>
 800d0ac:	4654      	mov	r4, sl
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	f04f 0c0a 	mov.w	ip, #10
 800d0b4:	9a07      	ldr	r2, [sp, #28]
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0bc:	3b30      	subs	r3, #48	; 0x30
 800d0be:	2b09      	cmp	r3, #9
 800d0c0:	d94e      	bls.n	800d160 <_vfiprintf_r+0x1c4>
 800d0c2:	b1b0      	cbz	r0, 800d0f2 <_vfiprintf_r+0x156>
 800d0c4:	9207      	str	r2, [sp, #28]
 800d0c6:	e014      	b.n	800d0f2 <_vfiprintf_r+0x156>
 800d0c8:	eba0 0308 	sub.w	r3, r0, r8
 800d0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	46a2      	mov	sl, r4
 800d0d4:	9304      	str	r3, [sp, #16]
 800d0d6:	e7d2      	b.n	800d07e <_vfiprintf_r+0xe2>
 800d0d8:	9b03      	ldr	r3, [sp, #12]
 800d0da:	1d19      	adds	r1, r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	9103      	str	r1, [sp, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bfbb      	ittet	lt
 800d0e4:	425b      	neglt	r3, r3
 800d0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ea:	9307      	strge	r3, [sp, #28]
 800d0ec:	9307      	strlt	r3, [sp, #28]
 800d0ee:	bfb8      	it	lt
 800d0f0:	9204      	strlt	r2, [sp, #16]
 800d0f2:	7823      	ldrb	r3, [r4, #0]
 800d0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0f6:	d10c      	bne.n	800d112 <_vfiprintf_r+0x176>
 800d0f8:	7863      	ldrb	r3, [r4, #1]
 800d0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d0fc:	d135      	bne.n	800d16a <_vfiprintf_r+0x1ce>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	3402      	adds	r4, #2
 800d102:	1d1a      	adds	r2, r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	9203      	str	r2, [sp, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfb8      	it	lt
 800d10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d110:	9305      	str	r3, [sp, #20]
 800d112:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d1ec <_vfiprintf_r+0x250>
 800d116:	2203      	movs	r2, #3
 800d118:	4650      	mov	r0, sl
 800d11a:	7821      	ldrb	r1, [r4, #0]
 800d11c:	f7ff f804 	bl	800c128 <memchr>
 800d120:	b140      	cbz	r0, 800d134 <_vfiprintf_r+0x198>
 800d122:	2340      	movs	r3, #64	; 0x40
 800d124:	eba0 000a 	sub.w	r0, r0, sl
 800d128:	fa03 f000 	lsl.w	r0, r3, r0
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	3401      	adds	r4, #1
 800d130:	4303      	orrs	r3, r0
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d138:	2206      	movs	r2, #6
 800d13a:	482d      	ldr	r0, [pc, #180]	; (800d1f0 <_vfiprintf_r+0x254>)
 800d13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d140:	f7fe fff2 	bl	800c128 <memchr>
 800d144:	2800      	cmp	r0, #0
 800d146:	d03f      	beq.n	800d1c8 <_vfiprintf_r+0x22c>
 800d148:	4b2a      	ldr	r3, [pc, #168]	; (800d1f4 <_vfiprintf_r+0x258>)
 800d14a:	bb1b      	cbnz	r3, 800d194 <_vfiprintf_r+0x1f8>
 800d14c:	9b03      	ldr	r3, [sp, #12]
 800d14e:	3307      	adds	r3, #7
 800d150:	f023 0307 	bic.w	r3, r3, #7
 800d154:	3308      	adds	r3, #8
 800d156:	9303      	str	r3, [sp, #12]
 800d158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d15a:	443b      	add	r3, r7
 800d15c:	9309      	str	r3, [sp, #36]	; 0x24
 800d15e:	e767      	b.n	800d030 <_vfiprintf_r+0x94>
 800d160:	460c      	mov	r4, r1
 800d162:	2001      	movs	r0, #1
 800d164:	fb0c 3202 	mla	r2, ip, r2, r3
 800d168:	e7a5      	b.n	800d0b6 <_vfiprintf_r+0x11a>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f04f 0c0a 	mov.w	ip, #10
 800d170:	4619      	mov	r1, r3
 800d172:	3401      	adds	r4, #1
 800d174:	9305      	str	r3, [sp, #20]
 800d176:	4620      	mov	r0, r4
 800d178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d17c:	3a30      	subs	r2, #48	; 0x30
 800d17e:	2a09      	cmp	r2, #9
 800d180:	d903      	bls.n	800d18a <_vfiprintf_r+0x1ee>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d0c5      	beq.n	800d112 <_vfiprintf_r+0x176>
 800d186:	9105      	str	r1, [sp, #20]
 800d188:	e7c3      	b.n	800d112 <_vfiprintf_r+0x176>
 800d18a:	4604      	mov	r4, r0
 800d18c:	2301      	movs	r3, #1
 800d18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d192:	e7f0      	b.n	800d176 <_vfiprintf_r+0x1da>
 800d194:	ab03      	add	r3, sp, #12
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	462a      	mov	r2, r5
 800d19a:	4630      	mov	r0, r6
 800d19c:	4b16      	ldr	r3, [pc, #88]	; (800d1f8 <_vfiprintf_r+0x25c>)
 800d19e:	a904      	add	r1, sp, #16
 800d1a0:	f7fb fdb6 	bl	8008d10 <_printf_float>
 800d1a4:	4607      	mov	r7, r0
 800d1a6:	1c78      	adds	r0, r7, #1
 800d1a8:	d1d6      	bne.n	800d158 <_vfiprintf_r+0x1bc>
 800d1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ac:	07d9      	lsls	r1, r3, #31
 800d1ae:	d405      	bmi.n	800d1bc <_vfiprintf_r+0x220>
 800d1b0:	89ab      	ldrh	r3, [r5, #12]
 800d1b2:	059a      	lsls	r2, r3, #22
 800d1b4:	d402      	bmi.n	800d1bc <_vfiprintf_r+0x220>
 800d1b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1b8:	f7fe ff36 	bl	800c028 <__retarget_lock_release_recursive>
 800d1bc:	89ab      	ldrh	r3, [r5, #12]
 800d1be:	065b      	lsls	r3, r3, #25
 800d1c0:	f53f af12 	bmi.w	800cfe8 <_vfiprintf_r+0x4c>
 800d1c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1c6:	e711      	b.n	800cfec <_vfiprintf_r+0x50>
 800d1c8:	ab03      	add	r3, sp, #12
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <_vfiprintf_r+0x25c>)
 800d1d2:	a904      	add	r1, sp, #16
 800d1d4:	f7fc f838 	bl	8009248 <_printf_i>
 800d1d8:	e7e4      	b.n	800d1a4 <_vfiprintf_r+0x208>
 800d1da:	bf00      	nop
 800d1dc:	0800d934 	.word	0x0800d934
 800d1e0:	0800d954 	.word	0x0800d954
 800d1e4:	0800d914 	.word	0x0800d914
 800d1e8:	0800db4c 	.word	0x0800db4c
 800d1ec:	0800db52 	.word	0x0800db52
 800d1f0:	0800db56 	.word	0x0800db56
 800d1f4:	08008d11 	.word	0x08008d11
 800d1f8:	0800cf77 	.word	0x0800cf77

0800d1fc <nan>:
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	4901      	ldr	r1, [pc, #4]	; (800d204 <nan+0x8>)
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	7ff80000 	.word	0x7ff80000

0800d208 <_sbrk_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	2300      	movs	r3, #0
 800d20c:	4d05      	ldr	r5, [pc, #20]	; (800d224 <_sbrk_r+0x1c>)
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	602b      	str	r3, [r5, #0]
 800d214:	f7f6 f978 	bl	8003508 <_sbrk>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d102      	bne.n	800d222 <_sbrk_r+0x1a>
 800d21c:	682b      	ldr	r3, [r5, #0]
 800d21e:	b103      	cbz	r3, 800d222 <_sbrk_r+0x1a>
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	20000ca8 	.word	0x20000ca8

0800d228 <__sread>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	f000 f912 	bl	800d458 <_read_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	bfab      	itete	ge
 800d238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrhlt	r3, [r4, #12]
 800d23c:	181b      	addge	r3, r3, r0
 800d23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d242:	bfac      	ite	ge
 800d244:	6563      	strge	r3, [r4, #84]	; 0x54
 800d246:	81a3      	strhlt	r3, [r4, #12]
 800d248:	bd10      	pop	{r4, pc}

0800d24a <__swrite>:
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	461f      	mov	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	4605      	mov	r5, r0
 800d254:	05db      	lsls	r3, r3, #23
 800d256:	460c      	mov	r4, r1
 800d258:	4616      	mov	r6, r2
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1e>
 800d25c:	2302      	movs	r3, #2
 800d25e:	2200      	movs	r2, #0
 800d260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d264:	f000 f890 	bl	800d388 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	4632      	mov	r2, r6
 800d26c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d270:	81a3      	strh	r3, [r4, #12]
 800d272:	4628      	mov	r0, r5
 800d274:	463b      	mov	r3, r7
 800d276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	f000 b837 	b.w	800d2f0 <_write_r>

0800d282 <__sseek>:
 800d282:	b510      	push	{r4, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28a:	f000 f87d 	bl	800d388 <_lseek_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	bf15      	itete	ne
 800d294:	6560      	strne	r0, [r4, #84]	; 0x54
 800d296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29e:	81a3      	strheq	r3, [r4, #12]
 800d2a0:	bf18      	it	ne
 800d2a2:	81a3      	strhne	r3, [r4, #12]
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__sclose>:
 800d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2aa:	f000 b83b 	b.w	800d324 <_close_r>

0800d2ae <strncmp>:
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	b172      	cbz	r2, 800d2d2 <strncmp+0x24>
 800d2b4:	3901      	subs	r1, #1
 800d2b6:	1884      	adds	r4, r0, r2
 800d2b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d2bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d2c0:	4290      	cmp	r0, r2
 800d2c2:	d101      	bne.n	800d2c8 <strncmp+0x1a>
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	d101      	bne.n	800d2cc <strncmp+0x1e>
 800d2c8:	1a80      	subs	r0, r0, r2
 800d2ca:	bd10      	pop	{r4, pc}
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d1f3      	bne.n	800d2b8 <strncmp+0xa>
 800d2d0:	e7fa      	b.n	800d2c8 <strncmp+0x1a>
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	e7f9      	b.n	800d2ca <strncmp+0x1c>

0800d2d6 <__ascii_wctomb>:
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	b141      	cbz	r1, 800d2ee <__ascii_wctomb+0x18>
 800d2dc:	2aff      	cmp	r2, #255	; 0xff
 800d2de:	d904      	bls.n	800d2ea <__ascii_wctomb+0x14>
 800d2e0:	228a      	movs	r2, #138	; 0x8a
 800d2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e6:	601a      	str	r2, [r3, #0]
 800d2e8:	4770      	bx	lr
 800d2ea:	2001      	movs	r0, #1
 800d2ec:	700a      	strb	r2, [r1, #0]
 800d2ee:	4770      	bx	lr

0800d2f0 <_write_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	4d05      	ldr	r5, [pc, #20]	; (800d310 <_write_r+0x20>)
 800d2fc:	602a      	str	r2, [r5, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	f7f6 f8b6 	bl	8003470 <_write>
 800d304:	1c43      	adds	r3, r0, #1
 800d306:	d102      	bne.n	800d30e <_write_r+0x1e>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	b103      	cbz	r3, 800d30e <_write_r+0x1e>
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	bd38      	pop	{r3, r4, r5, pc}
 800d310:	20000ca8 	.word	0x20000ca8

0800d314 <abort>:
 800d314:	2006      	movs	r0, #6
 800d316:	b508      	push	{r3, lr}
 800d318:	f000 f8d8 	bl	800d4cc <raise>
 800d31c:	2001      	movs	r0, #1
 800d31e:	f7f6 f880 	bl	8003422 <_exit>
	...

0800d324 <_close_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	2300      	movs	r3, #0
 800d328:	4d05      	ldr	r5, [pc, #20]	; (800d340 <_close_r+0x1c>)
 800d32a:	4604      	mov	r4, r0
 800d32c:	4608      	mov	r0, r1
 800d32e:	602b      	str	r3, [r5, #0]
 800d330:	f7f6 f8ba 	bl	80034a8 <_close>
 800d334:	1c43      	adds	r3, r0, #1
 800d336:	d102      	bne.n	800d33e <_close_r+0x1a>
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	b103      	cbz	r3, 800d33e <_close_r+0x1a>
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	bd38      	pop	{r3, r4, r5, pc}
 800d340:	20000ca8 	.word	0x20000ca8

0800d344 <_fstat_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	2300      	movs	r3, #0
 800d348:	4d06      	ldr	r5, [pc, #24]	; (800d364 <_fstat_r+0x20>)
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	4611      	mov	r1, r2
 800d350:	602b      	str	r3, [r5, #0]
 800d352:	f7f6 f8b4 	bl	80034be <_fstat>
 800d356:	1c43      	adds	r3, r0, #1
 800d358:	d102      	bne.n	800d360 <_fstat_r+0x1c>
 800d35a:	682b      	ldr	r3, [r5, #0]
 800d35c:	b103      	cbz	r3, 800d360 <_fstat_r+0x1c>
 800d35e:	6023      	str	r3, [r4, #0]
 800d360:	bd38      	pop	{r3, r4, r5, pc}
 800d362:	bf00      	nop
 800d364:	20000ca8 	.word	0x20000ca8

0800d368 <_isatty_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	2300      	movs	r3, #0
 800d36c:	4d05      	ldr	r5, [pc, #20]	; (800d384 <_isatty_r+0x1c>)
 800d36e:	4604      	mov	r4, r0
 800d370:	4608      	mov	r0, r1
 800d372:	602b      	str	r3, [r5, #0]
 800d374:	f7f6 f8b2 	bl	80034dc <_isatty>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	d102      	bne.n	800d382 <_isatty_r+0x1a>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	b103      	cbz	r3, 800d382 <_isatty_r+0x1a>
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	20000ca8 	.word	0x20000ca8

0800d388 <_lseek_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4604      	mov	r4, r0
 800d38c:	4608      	mov	r0, r1
 800d38e:	4611      	mov	r1, r2
 800d390:	2200      	movs	r2, #0
 800d392:	4d05      	ldr	r5, [pc, #20]	; (800d3a8 <_lseek_r+0x20>)
 800d394:	602a      	str	r2, [r5, #0]
 800d396:	461a      	mov	r2, r3
 800d398:	f7f6 f8aa 	bl	80034f0 <_lseek>
 800d39c:	1c43      	adds	r3, r0, #1
 800d39e:	d102      	bne.n	800d3a6 <_lseek_r+0x1e>
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	b103      	cbz	r3, 800d3a6 <_lseek_r+0x1e>
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
 800d3a8:	20000ca8 	.word	0x20000ca8

0800d3ac <memmove>:
 800d3ac:	4288      	cmp	r0, r1
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	eb01 0402 	add.w	r4, r1, r2
 800d3b4:	d902      	bls.n	800d3bc <memmove+0x10>
 800d3b6:	4284      	cmp	r4, r0
 800d3b8:	4623      	mov	r3, r4
 800d3ba:	d807      	bhi.n	800d3cc <memmove+0x20>
 800d3bc:	1e43      	subs	r3, r0, #1
 800d3be:	42a1      	cmp	r1, r4
 800d3c0:	d008      	beq.n	800d3d4 <memmove+0x28>
 800d3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3ca:	e7f8      	b.n	800d3be <memmove+0x12>
 800d3cc:	4601      	mov	r1, r0
 800d3ce:	4402      	add	r2, r0
 800d3d0:	428a      	cmp	r2, r1
 800d3d2:	d100      	bne.n	800d3d6 <memmove+0x2a>
 800d3d4:	bd10      	pop	{r4, pc}
 800d3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3de:	e7f7      	b.n	800d3d0 <memmove+0x24>

0800d3e0 <__malloc_lock>:
 800d3e0:	4801      	ldr	r0, [pc, #4]	; (800d3e8 <__malloc_lock+0x8>)
 800d3e2:	f7fe be20 	b.w	800c026 <__retarget_lock_acquire_recursive>
 800d3e6:	bf00      	nop
 800d3e8:	20000c9c 	.word	0x20000c9c

0800d3ec <__malloc_unlock>:
 800d3ec:	4801      	ldr	r0, [pc, #4]	; (800d3f4 <__malloc_unlock+0x8>)
 800d3ee:	f7fe be1b 	b.w	800c028 <__retarget_lock_release_recursive>
 800d3f2:	bf00      	nop
 800d3f4:	20000c9c 	.word	0x20000c9c

0800d3f8 <_realloc_r>:
 800d3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fc:	4680      	mov	r8, r0
 800d3fe:	4614      	mov	r4, r2
 800d400:	460e      	mov	r6, r1
 800d402:	b921      	cbnz	r1, 800d40e <_realloc_r+0x16>
 800d404:	4611      	mov	r1, r2
 800d406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d40a:	f7ff bbcf 	b.w	800cbac <_malloc_r>
 800d40e:	b92a      	cbnz	r2, 800d41c <_realloc_r+0x24>
 800d410:	f7ff fb64 	bl	800cadc <_free_r>
 800d414:	4625      	mov	r5, r4
 800d416:	4628      	mov	r0, r5
 800d418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41c:	f000 f872 	bl	800d504 <_malloc_usable_size_r>
 800d420:	4284      	cmp	r4, r0
 800d422:	4607      	mov	r7, r0
 800d424:	d802      	bhi.n	800d42c <_realloc_r+0x34>
 800d426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d42a:	d812      	bhi.n	800d452 <_realloc_r+0x5a>
 800d42c:	4621      	mov	r1, r4
 800d42e:	4640      	mov	r0, r8
 800d430:	f7ff fbbc 	bl	800cbac <_malloc_r>
 800d434:	4605      	mov	r5, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	d0ed      	beq.n	800d416 <_realloc_r+0x1e>
 800d43a:	42bc      	cmp	r4, r7
 800d43c:	4622      	mov	r2, r4
 800d43e:	4631      	mov	r1, r6
 800d440:	bf28      	it	cs
 800d442:	463a      	movcs	r2, r7
 800d444:	f7fb fbb0 	bl	8008ba8 <memcpy>
 800d448:	4631      	mov	r1, r6
 800d44a:	4640      	mov	r0, r8
 800d44c:	f7ff fb46 	bl	800cadc <_free_r>
 800d450:	e7e1      	b.n	800d416 <_realloc_r+0x1e>
 800d452:	4635      	mov	r5, r6
 800d454:	e7df      	b.n	800d416 <_realloc_r+0x1e>
	...

0800d458 <_read_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	4611      	mov	r1, r2
 800d460:	2200      	movs	r2, #0
 800d462:	4d05      	ldr	r5, [pc, #20]	; (800d478 <_read_r+0x20>)
 800d464:	602a      	str	r2, [r5, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	f7f5 ffe5 	bl	8003436 <_read>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_read_r+0x1e>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_read_r+0x1e>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20000ca8 	.word	0x20000ca8

0800d47c <_raise_r>:
 800d47c:	291f      	cmp	r1, #31
 800d47e:	b538      	push	{r3, r4, r5, lr}
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	d904      	bls.n	800d490 <_raise_r+0x14>
 800d486:	2316      	movs	r3, #22
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	bd38      	pop	{r3, r4, r5, pc}
 800d490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d492:	b112      	cbz	r2, 800d49a <_raise_r+0x1e>
 800d494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d498:	b94b      	cbnz	r3, 800d4ae <_raise_r+0x32>
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 f830 	bl	800d500 <_getpid_r>
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4aa:	f000 b817 	b.w	800d4dc <_kill_r>
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d00a      	beq.n	800d4c8 <_raise_r+0x4c>
 800d4b2:	1c59      	adds	r1, r3, #1
 800d4b4:	d103      	bne.n	800d4be <_raise_r+0x42>
 800d4b6:	2316      	movs	r3, #22
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	e7e7      	b.n	800d48e <_raise_r+0x12>
 800d4be:	2400      	movs	r4, #0
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4c6:	4798      	blx	r3
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e7e0      	b.n	800d48e <_raise_r+0x12>

0800d4cc <raise>:
 800d4cc:	4b02      	ldr	r3, [pc, #8]	; (800d4d8 <raise+0xc>)
 800d4ce:	4601      	mov	r1, r0
 800d4d0:	6818      	ldr	r0, [r3, #0]
 800d4d2:	f7ff bfd3 	b.w	800d47c <_raise_r>
 800d4d6:	bf00      	nop
 800d4d8:	200005ec 	.word	0x200005ec

0800d4dc <_kill_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	2300      	movs	r3, #0
 800d4e0:	4d06      	ldr	r5, [pc, #24]	; (800d4fc <_kill_r+0x20>)
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	f7f5 ff8a 	bl	8003402 <_kill>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	d102      	bne.n	800d4f8 <_kill_r+0x1c>
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	b103      	cbz	r3, 800d4f8 <_kill_r+0x1c>
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	bd38      	pop	{r3, r4, r5, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20000ca8 	.word	0x20000ca8

0800d500 <_getpid_r>:
 800d500:	f7f5 bf78 	b.w	80033f4 <_getpid>

0800d504 <_malloc_usable_size_r>:
 800d504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d508:	1f18      	subs	r0, r3, #4
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfbc      	itt	lt
 800d50e:	580b      	ldrlt	r3, [r1, r0]
 800d510:	18c0      	addlt	r0, r0, r3
 800d512:	4770      	bx	lr

0800d514 <_init>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	bf00      	nop
 800d518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51a:	bc08      	pop	{r3}
 800d51c:	469e      	mov	lr, r3
 800d51e:	4770      	bx	lr

0800d520 <_fini>:
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d522:	bf00      	nop
 800d524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d526:	bc08      	pop	{r3}
 800d528:	469e      	mov	lr, r3
 800d52a:	4770      	bx	lr
