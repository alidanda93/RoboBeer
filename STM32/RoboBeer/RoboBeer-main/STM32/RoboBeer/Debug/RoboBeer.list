
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d49c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800d688  0800d688  0001d688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc80  0800dc80  000207e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc80  0800dc80  000207e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc80  0800dc80  000207e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc80  0800dc80  0001dc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc84  0800dc84  0001dc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007e4  20000000  0800dc88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200007e4  0800e46c  000207e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  0800e46c  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014481  00000000  00000000  0002080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003797  00000000  00000000  00034c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00038428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed98  00000000  00000000  0003aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a637  00000000  00000000  00059820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a49eb  00000000  00000000  00073e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006960  00000000  00000000  00118894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200007e4 	.word	0x200007e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d66c 	.word	0x0800d66c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200007e8 	.word	0x200007e8
 8000224:	0800d66c 	.word	0x0800d66c

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_fmul>:
 800024c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000250:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000254:	bf1e      	ittt	ne
 8000256:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800025a:	ea92 0f0c 	teqne	r2, ip
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d06f      	beq.n	8000344 <__aeabi_fmul+0xf8>
 8000264:	441a      	add	r2, r3
 8000266:	ea80 0c01 	eor.w	ip, r0, r1
 800026a:	0240      	lsls	r0, r0, #9
 800026c:	bf18      	it	ne
 800026e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000272:	d01e      	beq.n	80002b2 <__aeabi_fmul+0x66>
 8000274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000278:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800027c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000280:	fba0 3101 	umull	r3, r1, r0, r1
 8000284:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000288:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800028c:	bf3e      	ittt	cc
 800028e:	0049      	lslcc	r1, r1, #1
 8000290:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000294:	005b      	lslcc	r3, r3, #1
 8000296:	ea40 0001 	orr.w	r0, r0, r1
 800029a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029e:	2afd      	cmp	r2, #253	; 0xfd
 80002a0:	d81d      	bhi.n	80002de <__aeabi_fmul+0x92>
 80002a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	4770      	bx	lr
 80002b2:	f090 0f00 	teq	r0, #0
 80002b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ba:	bf08      	it	eq
 80002bc:	0249      	lsleq	r1, r1, #9
 80002be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c6:	3a7f      	subs	r2, #127	; 0x7f
 80002c8:	bfc2      	ittt	gt
 80002ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002d2:	4770      	bxgt	lr
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	f04f 0300 	mov.w	r3, #0
 80002dc:	3a01      	subs	r2, #1
 80002de:	dc5d      	bgt.n	800039c <__aeabi_fmul+0x150>
 80002e0:	f112 0f19 	cmn.w	r2, #25
 80002e4:	bfdc      	itt	le
 80002e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ea:	4770      	bxle	lr
 80002ec:	f1c2 0200 	rsb	r2, r2, #0
 80002f0:	0041      	lsls	r1, r0, #1
 80002f2:	fa21 f102 	lsr.w	r1, r1, r2
 80002f6:	f1c2 0220 	rsb	r2, r2, #32
 80002fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000302:	f140 0000 	adc.w	r0, r0, #0
 8000306:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800030a:	bf08      	it	eq
 800030c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000310:	4770      	bx	lr
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800031a:	bf02      	ittt	eq
 800031c:	0040      	lsleq	r0, r0, #1
 800031e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000322:	3a01      	subeq	r2, #1
 8000324:	d0f9      	beq.n	800031a <__aeabi_fmul+0xce>
 8000326:	ea40 000c 	orr.w	r0, r0, ip
 800032a:	f093 0f00 	teq	r3, #0
 800032e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000332:	bf02      	ittt	eq
 8000334:	0049      	lsleq	r1, r1, #1
 8000336:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800033a:	3b01      	subeq	r3, #1
 800033c:	d0f9      	beq.n	8000332 <__aeabi_fmul+0xe6>
 800033e:	ea41 010c 	orr.w	r1, r1, ip
 8000342:	e78f      	b.n	8000264 <__aeabi_fmul+0x18>
 8000344:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000348:	ea92 0f0c 	teq	r2, ip
 800034c:	bf18      	it	ne
 800034e:	ea93 0f0c 	teqne	r3, ip
 8000352:	d00a      	beq.n	800036a <__aeabi_fmul+0x11e>
 8000354:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000358:	bf18      	it	ne
 800035a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035e:	d1d8      	bne.n	8000312 <__aeabi_fmul+0xc6>
 8000360:	ea80 0001 	eor.w	r0, r0, r1
 8000364:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000368:	4770      	bx	lr
 800036a:	f090 0f00 	teq	r0, #0
 800036e:	bf17      	itett	ne
 8000370:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000374:	4608      	moveq	r0, r1
 8000376:	f091 0f00 	teqne	r1, #0
 800037a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037e:	d014      	beq.n	80003aa <__aeabi_fmul+0x15e>
 8000380:	ea92 0f0c 	teq	r2, ip
 8000384:	d101      	bne.n	800038a <__aeabi_fmul+0x13e>
 8000386:	0242      	lsls	r2, r0, #9
 8000388:	d10f      	bne.n	80003aa <__aeabi_fmul+0x15e>
 800038a:	ea93 0f0c 	teq	r3, ip
 800038e:	d103      	bne.n	8000398 <__aeabi_fmul+0x14c>
 8000390:	024b      	lsls	r3, r1, #9
 8000392:	bf18      	it	ne
 8000394:	4608      	movne	r0, r1
 8000396:	d108      	bne.n	80003aa <__aeabi_fmul+0x15e>
 8000398:	ea80 0001 	eor.w	r0, r0, r1
 800039c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a8:	4770      	bx	lr
 80003aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003b2:	4770      	bx	lr

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_dmul>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8de 	bleq	8000908 <__aeabi_dmul+0x1dc>
 800074c:	442c      	add	r4, r5
 800074e:	ea81 0603 	eor.w	r6, r1, r3
 8000752:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000756:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800075a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800075e:	bf18      	it	ne
 8000760:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800076c:	d038      	beq.n	80007e0 <__aeabi_dmul+0xb4>
 800076e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	fbe1 e502 	umlal	lr, r5, r1, r2
 800077a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800077e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000782:	f04f 0600 	mov.w	r6, #0
 8000786:	fbe1 5603 	umlal	r5, r6, r1, r3
 800078a:	f09c 0f00 	teq	ip, #0
 800078e:	bf18      	it	ne
 8000790:	f04e 0e01 	orrne.w	lr, lr, #1
 8000794:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000798:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800079c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a0:	d204      	bcs.n	80007ac <__aeabi_dmul+0x80>
 80007a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007a6:	416d      	adcs	r5, r5
 80007a8:	eb46 0606 	adc.w	r6, r6, r6
 80007ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c4:	bf88      	it	hi
 80007c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ca:	d81e      	bhi.n	800080a <__aeabi_dmul+0xde>
 80007cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d0:	bf08      	it	eq
 80007d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007d6:	f150 0000 	adcs.w	r0, r0, #0
 80007da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e4:	ea46 0101 	orr.w	r1, r6, r1
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f4:	bfc2      	ittt	gt
 80007f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000804:	f04f 0e00 	mov.w	lr, #0
 8000808:	3c01      	subs	r4, #1
 800080a:	f300 80ab 	bgt.w	8000964 <__aeabi_dmul+0x238>
 800080e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000812:	bfde      	ittt	le
 8000814:	2000      	movle	r0, #0
 8000816:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800081a:	bd70      	pople	{r4, r5, r6, pc}
 800081c:	f1c4 0400 	rsb	r4, r4, #0
 8000820:	3c20      	subs	r4, #32
 8000822:	da35      	bge.n	8000890 <__aeabi_dmul+0x164>
 8000824:	340c      	adds	r4, #12
 8000826:	dc1b      	bgt.n	8000860 <__aeabi_dmul+0x134>
 8000828:	f104 0414 	add.w	r4, r4, #20
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f305 	lsl.w	r3, r0, r5
 8000834:	fa20 f004 	lsr.w	r0, r0, r4
 8000838:	fa01 f205 	lsl.w	r2, r1, r5
 800083c:	ea40 0002 	orr.w	r0, r0, r2
 8000840:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000844:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	fa21 f604 	lsr.w	r6, r1, r4
 8000850:	eb42 0106 	adc.w	r1, r2, r6
 8000854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000858:	bf08      	it	eq
 800085a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f1c4 040c 	rsb	r4, r4, #12
 8000864:	f1c4 0520 	rsb	r5, r4, #32
 8000868:	fa00 f304 	lsl.w	r3, r0, r4
 800086c:	fa20 f005 	lsr.w	r0, r0, r5
 8000870:	fa01 f204 	lsl.w	r2, r1, r4
 8000874:	ea40 0002 	orr.w	r0, r0, r2
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000880:	f141 0100 	adc.w	r1, r1, #0
 8000884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000888:	bf08      	it	eq
 800088a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f1c4 0520 	rsb	r5, r4, #32
 8000894:	fa00 f205 	lsl.w	r2, r0, r5
 8000898:	ea4e 0e02 	orr.w	lr, lr, r2
 800089c:	fa20 f304 	lsr.w	r3, r0, r4
 80008a0:	fa01 f205 	lsl.w	r2, r1, r5
 80008a4:	ea43 0302 	orr.w	r3, r3, r2
 80008a8:	fa21 f004 	lsr.w	r0, r1, r4
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	fa21 f204 	lsr.w	r2, r1, r4
 80008b4:	ea20 0002 	bic.w	r0, r0, r2
 80008b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c0:	bf08      	it	eq
 80008c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f094 0f00 	teq	r4, #0
 80008cc:	d10f      	bne.n	80008ee <__aeabi_dmul+0x1c2>
 80008ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008d2:	0040      	lsls	r0, r0, #1
 80008d4:	eb41 0101 	adc.w	r1, r1, r1
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf08      	it	eq
 80008de:	3c01      	subeq	r4, #1
 80008e0:	d0f7      	beq.n	80008d2 <__aeabi_dmul+0x1a6>
 80008e2:	ea41 0106 	orr.w	r1, r1, r6
 80008e6:	f095 0f00 	teq	r5, #0
 80008ea:	bf18      	it	ne
 80008ec:	4770      	bxne	lr
 80008ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	eb43 0303 	adc.w	r3, r3, r3
 80008f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008fc:	bf08      	it	eq
 80008fe:	3d01      	subeq	r5, #1
 8000900:	d0f7      	beq.n	80008f2 <__aeabi_dmul+0x1c6>
 8000902:	ea43 0306 	orr.w	r3, r3, r6
 8000906:	4770      	bx	lr
 8000908:	ea94 0f0c 	teq	r4, ip
 800090c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000910:	bf18      	it	ne
 8000912:	ea95 0f0c 	teqne	r5, ip
 8000916:	d00c      	beq.n	8000932 <__aeabi_dmul+0x206>
 8000918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000922:	d1d1      	bne.n	80008c8 <__aeabi_dmul+0x19c>
 8000924:	ea81 0103 	eor.w	r1, r1, r3
 8000928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000936:	bf06      	itte	eq
 8000938:	4610      	moveq	r0, r2
 800093a:	4619      	moveq	r1, r3
 800093c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000940:	d019      	beq.n	8000976 <__aeabi_dmul+0x24a>
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	d102      	bne.n	800094e <__aeabi_dmul+0x222>
 8000948:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800094c:	d113      	bne.n	8000976 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	d105      	bne.n	8000960 <__aeabi_dmul+0x234>
 8000954:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000958:	bf1c      	itt	ne
 800095a:	4610      	movne	r0, r2
 800095c:	4619      	movne	r1, r3
 800095e:	d10a      	bne.n	8000976 <__aeabi_dmul+0x24a>
 8000960:	ea81 0103 	eor.w	r1, r1, r3
 8000964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000968:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800097a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800097e:	bd70      	pop	{r4, r5, r6, pc}

08000980 <__aeabi_ddiv>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000986:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800098a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800098e:	bf1d      	ittte	ne
 8000990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000994:	ea94 0f0c 	teqne	r4, ip
 8000998:	ea95 0f0c 	teqne	r5, ip
 800099c:	f000 f8a7 	bleq	8000aee <__aeabi_ddiv+0x16e>
 80009a0:	eba4 0405 	sub.w	r4, r4, r5
 80009a4:	ea81 0e03 	eor.w	lr, r1, r3
 80009a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b0:	f000 8088 	beq.w	8000ac4 <__aeabi_ddiv+0x144>
 80009b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009d8:	429d      	cmp	r5, r3
 80009da:	bf08      	it	eq
 80009dc:	4296      	cmpeq	r6, r2
 80009de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009e6:	d202      	bcs.n	80009ee <__aeabi_ddiv+0x6e>
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	1ab6      	subs	r6, r6, r2
 80009f0:	eb65 0503 	sbc.w	r5, r5, r3
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a02:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0a:	bf22      	ittt	cs
 8000a0c:	1ab6      	subcs	r6, r6, r2
 8000a0e:	4675      	movcs	r5, lr
 8000a10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a22:	bf22      	ittt	cs
 8000a24:	1ab6      	subcs	r6, r6, r2
 8000a26:	4675      	movcs	r5, lr
 8000a28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3a:	bf22      	ittt	cs
 8000a3c:	1ab6      	subcs	r6, r6, r2
 8000a3e:	4675      	movcs	r5, lr
 8000a40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a52:	bf22      	ittt	cs
 8000a54:	1ab6      	subcs	r6, r6, r2
 8000a56:	4675      	movcs	r5, lr
 8000a58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a60:	d018      	beq.n	8000a94 <__aeabi_ddiv+0x114>
 8000a62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a7e:	d1c0      	bne.n	8000a02 <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	d10b      	bne.n	8000a9e <__aeabi_ddiv+0x11e>
 8000a86:	ea41 0100 	orr.w	r1, r1, r0
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a92:	e7b6      	b.n	8000a02 <__aeabi_ddiv+0x82>
 8000a94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a98:	bf04      	itt	eq
 8000a9a:	4301      	orreq	r1, r0
 8000a9c:	2000      	moveq	r0, #0
 8000a9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa2:	bf88      	it	hi
 8000aa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aa8:	f63f aeaf 	bhi.w	800080a <__aeabi_dmul+0xde>
 8000aac:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab0:	bf04      	itt	eq
 8000ab2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ab6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ac8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000acc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad0:	bfc2      	ittt	gt
 8000ad2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ad6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ada:	bd70      	popgt	{r4, r5, r6, pc}
 8000adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae0:	f04f 0e00 	mov.w	lr, #0
 8000ae4:	3c01      	subs	r4, #1
 8000ae6:	e690      	b.n	800080a <__aeabi_dmul+0xde>
 8000ae8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aec:	e68d      	b.n	800080a <__aeabi_dmul+0xde>
 8000aee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000af2:	ea94 0f0c 	teq	r4, ip
 8000af6:	bf08      	it	eq
 8000af8:	ea95 0f0c 	teqeq	r5, ip
 8000afc:	f43f af3b 	beq.w	8000976 <__aeabi_dmul+0x24a>
 8000b00:	ea94 0f0c 	teq	r4, ip
 8000b04:	d10a      	bne.n	8000b1c <__aeabi_ddiv+0x19c>
 8000b06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0a:	f47f af34 	bne.w	8000976 <__aeabi_dmul+0x24a>
 8000b0e:	ea95 0f0c 	teq	r5, ip
 8000b12:	f47f af25 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e72c      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b1c:	ea95 0f0c 	teq	r5, ip
 8000b20:	d106      	bne.n	8000b30 <__aeabi_ddiv+0x1b0>
 8000b22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b26:	f43f aefd 	beq.w	8000924 <__aeabi_dmul+0x1f8>
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	e722      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3a:	f47f aec5 	bne.w	80008c8 <__aeabi_dmul+0x19c>
 8000b3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b42:	f47f af0d 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b4a:	f47f aeeb 	bne.w	8000924 <__aeabi_dmul+0x1f8>
 8000b4e:	e712      	b.n	8000976 <__aeabi_dmul+0x24a>

08000b50 <__gedf2>:
 8000b50:	f04f 3cff 	mov.w	ip, #4294967295
 8000b54:	e006      	b.n	8000b64 <__cmpdf2+0x4>
 8000b56:	bf00      	nop

08000b58 <__ledf2>:
 8000b58:	f04f 0c01 	mov.w	ip, #1
 8000b5c:	e002      	b.n	8000b64 <__cmpdf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__cmpdf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b7a:	d01b      	beq.n	8000bb4 <__cmpdf2+0x54>
 8000b7c:	b001      	add	sp, #4
 8000b7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b82:	bf0c      	ite	eq
 8000b84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b88:	ea91 0f03 	teqne	r1, r3
 8000b8c:	bf02      	ittt	eq
 8000b8e:	ea90 0f02 	teqeq	r0, r2
 8000b92:	2000      	moveq	r0, #0
 8000b94:	4770      	bxeq	lr
 8000b96:	f110 0f00 	cmn.w	r0, #0
 8000b9a:	ea91 0f03 	teq	r1, r3
 8000b9e:	bf58      	it	pl
 8000ba0:	4299      	cmppl	r1, r3
 8000ba2:	bf08      	it	eq
 8000ba4:	4290      	cmpeq	r0, r2
 8000ba6:	bf2c      	ite	cs
 8000ba8:	17d8      	asrcs	r0, r3, #31
 8000baa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bae:	f040 0001 	orr.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__cmpdf2+0x64>
 8000bbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bc2:	d107      	bne.n	8000bd4 <__cmpdf2+0x74>
 8000bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bcc:	d1d6      	bne.n	8000b7c <__cmpdf2+0x1c>
 8000bce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bd2:	d0d3      	beq.n	8000b7c <__cmpdf2+0x1c>
 8000bd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_cdrcmple>:
 8000bdc:	4684      	mov	ip, r0
 8000bde:	4610      	mov	r0, r2
 8000be0:	4662      	mov	r2, ip
 8000be2:	468c      	mov	ip, r1
 8000be4:	4619      	mov	r1, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	e000      	b.n	8000bec <__aeabi_cdcmpeq>
 8000bea:	bf00      	nop

08000bec <__aeabi_cdcmpeq>:
 8000bec:	b501      	push	{r0, lr}
 8000bee:	f7ff ffb7 	bl	8000b60 <__cmpdf2>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	bf48      	it	mi
 8000bf6:	f110 0f00 	cmnmi.w	r0, #0
 8000bfa:	bd01      	pop	{r0, pc}

08000bfc <__aeabi_dcmpeq>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff fff4 	bl	8000bec <__aeabi_cdcmpeq>
 8000c04:	bf0c      	ite	eq
 8000c06:	2001      	moveq	r0, #1
 8000c08:	2000      	movne	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmplt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffea 	bl	8000bec <__aeabi_cdcmpeq>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmple>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffe0 	bl	8000bec <__aeabi_cdcmpeq>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpge>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffce 	bl	8000bdc <__aeabi_cdrcmple>
 8000c40:	bf94      	ite	ls
 8000c42:	2001      	movls	r0, #1
 8000c44:	2000      	movhi	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpgt>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff ffc4 	bl	8000bdc <__aeabi_cdrcmple>
 8000c54:	bf34      	ite	cc
 8000c56:	2001      	movcc	r0, #1
 8000c58:	2000      	movcs	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_dcmpun>:
 8000c60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c68:	d102      	bne.n	8000c70 <__aeabi_dcmpun+0x10>
 8000c6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c6e:	d10a      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c78:	d102      	bne.n	8000c80 <__aeabi_dcmpun+0x20>
 8000c7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c7e:	d102      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	f04f 0001 	mov.w	r0, #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2iz>:
 8000c8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c94:	d215      	bcs.n	8000cc2 <__aeabi_d2iz+0x36>
 8000c96:	d511      	bpl.n	8000cbc <__aeabi_d2iz+0x30>
 8000c98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca0:	d912      	bls.n	8000cc8 <__aeabi_d2iz+0x3c>
 8000ca2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000caa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb6:	bf18      	it	ne
 8000cb8:	4240      	negne	r0, r0
 8000cba:	4770      	bx	lr
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4770      	bx	lr
 8000cc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cc6:	d105      	bne.n	8000cd4 <__aeabi_d2iz+0x48>
 8000cc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	bf08      	it	eq
 8000cce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cd2:	4770      	bx	lr
 8000cd4:	f04f 0000 	mov.w	r0, #0
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_d2uiz>:
 8000cdc:	004a      	lsls	r2, r1, #1
 8000cde:	d211      	bcs.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce4:	d211      	bcs.n	8000d0a <__aeabi_d2uiz+0x2e>
 8000ce6:	d50d      	bpl.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf0:	d40e      	bmi.n	8000d10 <__aeabi_d2uiz+0x34>
 8000cf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000d02:	4770      	bx	lr
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0e:	d102      	bne.n	8000d16 <__aeabi_d2uiz+0x3a>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	4770      	bx	lr
 8000d16:	f04f 0000 	mov.w	r0, #0
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2f>:
 8000d1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d24:	bf24      	itt	cs
 8000d26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d2e:	d90d      	bls.n	8000d4c <__aeabi_d2f+0x30>
 8000d30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d50:	d121      	bne.n	8000d96 <__aeabi_d2f+0x7a>
 8000d52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d56:	bfbc      	itt	lt
 8000d58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	4770      	bxlt	lr
 8000d5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d66:	f1c2 0218 	rsb	r2, r2, #24
 8000d6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d72:	fa20 f002 	lsr.w	r0, r0, r2
 8000d76:	bf18      	it	ne
 8000d78:	f040 0001 	orrne.w	r0, r0, #1
 8000d7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d88:	ea40 000c 	orr.w	r0, r0, ip
 8000d8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d94:	e7cc      	b.n	8000d30 <__aeabi_d2f+0x14>
 8000d96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d9a:	d107      	bne.n	8000dac <__aeabi_d2f+0x90>
 8000d9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da0:	bf1e      	ittt	ne
 8000da2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bxne	lr
 8000dac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <__aeabi_frsub>:
 8000dbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	e002      	b.n	8000dc8 <__addsf3>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_fsub>:
 8000dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dc8 <__addsf3>:
 8000dc8:	0042      	lsls	r2, r0, #1
 8000dca:	bf1f      	itttt	ne
 8000dcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd0:	ea92 0f03 	teqne	r2, r3
 8000dd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ddc:	d06a      	beq.n	8000eb4 <__addsf3+0xec>
 8000dde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000de6:	bfc1      	itttt	gt
 8000de8:	18d2      	addgt	r2, r2, r3
 8000dea:	4041      	eorgt	r1, r0
 8000dec:	4048      	eorgt	r0, r1
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	bfb8      	it	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	2b19      	cmp	r3, #25
 8000df6:	bf88      	it	hi
 8000df8:	4770      	bxhi	lr
 8000dfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e06:	bf18      	it	ne
 8000e08:	4240      	negne	r0, r0
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e16:	bf18      	it	ne
 8000e18:	4249      	negne	r1, r1
 8000e1a:	ea92 0f03 	teq	r2, r3
 8000e1e:	d03f      	beq.n	8000ea0 <__addsf3+0xd8>
 8000e20:	f1a2 0201 	sub.w	r2, r2, #1
 8000e24:	fa41 fc03 	asr.w	ip, r1, r3
 8000e28:	eb10 000c 	adds.w	r0, r0, ip
 8000e2c:	f1c3 0320 	rsb	r3, r3, #32
 8000e30:	fa01 f103 	lsl.w	r1, r1, r3
 8000e34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	d502      	bpl.n	8000e40 <__addsf3+0x78>
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e44:	d313      	bcc.n	8000e6e <__addsf3+0xa6>
 8000e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4a:	d306      	bcc.n	8000e5a <__addsf3+0x92>
 8000e4c:	0840      	lsrs	r0, r0, #1
 8000e4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e52:	f102 0201 	add.w	r2, r2, #1
 8000e56:	2afe      	cmp	r2, #254	; 0xfe
 8000e58:	d251      	bcs.n	8000efe <__addsf3+0x136>
 8000e5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	ea40 0003 	orr.w	r0, r0, r3
 8000e6c:	4770      	bx	lr
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	eb40 0000 	adc.w	r0, r0, r0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	bf28      	it	cs
 8000e78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e7c:	d2ed      	bcs.n	8000e5a <__addsf3+0x92>
 8000e7e:	fab0 fc80 	clz	ip, r0
 8000e82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e86:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e8e:	bfaa      	itet	ge
 8000e90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e94:	4252      	neglt	r2, r2
 8000e96:	4318      	orrge	r0, r3
 8000e98:	bfbc      	itt	lt
 8000e9a:	40d0      	lsrlt	r0, r2
 8000e9c:	4318      	orrlt	r0, r3
 8000e9e:	4770      	bx	lr
 8000ea0:	f092 0f00 	teq	r2, #0
 8000ea4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ea8:	bf06      	itte	eq
 8000eaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eae:	3201      	addeq	r2, #1
 8000eb0:	3b01      	subne	r3, #1
 8000eb2:	e7b5      	b.n	8000e20 <__addsf3+0x58>
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d021      	beq.n	8000f08 <__addsf3+0x140>
 8000ec4:	ea92 0f03 	teq	r2, r3
 8000ec8:	d004      	beq.n	8000ed4 <__addsf3+0x10c>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	bf08      	it	eq
 8000ed0:	4608      	moveq	r0, r1
 8000ed2:	4770      	bx	lr
 8000ed4:	ea90 0f01 	teq	r0, r1
 8000ed8:	bf1c      	itt	ne
 8000eda:	2000      	movne	r0, #0
 8000edc:	4770      	bxne	lr
 8000ede:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee2:	d104      	bne.n	8000eee <__addsf3+0x126>
 8000ee4:	0040      	lsls	r0, r0, #1
 8000ee6:	bf28      	it	cs
 8000ee8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef2:	bf3c      	itt	cc
 8000ef4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ef8:	4770      	bxcc	lr
 8000efa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000efe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f0c:	bf16      	itet	ne
 8000f0e:	4608      	movne	r0, r1
 8000f10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f14:	4601      	movne	r1, r0
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	bf06      	itte	eq
 8000f1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f1e:	ea90 0f01 	teqeq	r0, r1
 8000f22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_ui2f>:
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e004      	b.n	8000f38 <__aeabi_i2f+0x8>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_i2f>:
 8000f30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f34:	bf48      	it	mi
 8000f36:	4240      	negmi	r0, r0
 8000f38:	ea5f 0c00 	movs.w	ip, r0
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f44:	4601      	mov	r1, r0
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	e01c      	b.n	8000f86 <__aeabi_l2f+0x2a>

08000f4c <__aeabi_ul2f>:
 8000f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f50:	bf08      	it	eq
 8000f52:	4770      	bxeq	lr
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e00a      	b.n	8000f70 <__aeabi_l2f+0x14>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_l2f>:
 8000f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f60:	bf08      	it	eq
 8000f62:	4770      	bxeq	lr
 8000f64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	d502      	bpl.n	8000f70 <__aeabi_l2f+0x14>
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	ea5f 0c01 	movs.w	ip, r1
 8000f74:	bf02      	ittt	eq
 8000f76:	4684      	moveq	ip, r0
 8000f78:	4601      	moveq	r1, r0
 8000f7a:	2000      	moveq	r0, #0
 8000f7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f80:	bf08      	it	eq
 8000f82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8a:	fabc f28c 	clz	r2, ip
 8000f8e:	3a08      	subs	r2, #8
 8000f90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f94:	db10      	blt.n	8000fb8 <__aeabi_l2f+0x5c>
 8000f96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa0:	f1c2 0220 	rsb	r2, r2, #32
 8000fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fac:	eb43 0002 	adc.w	r0, r3, r2
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f102 0220 	add.w	r2, r2, #32
 8000fbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc0:	f1c2 0220 	rsb	r2, r2, #32
 8000fc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000fcc:	eb43 0002 	adc.w	r0, r3, r2
 8000fd0:	bf08      	it	eq
 8000fd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fd6:	4770      	bx	lr

08000fd8 <__gesf2>:
 8000fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fdc:	e006      	b.n	8000fec <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__lesf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	e002      	b.n	8000fec <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__cmpsf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	bf18      	it	ne
 8000ffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001002:	d011      	beq.n	8001028 <__cmpsf2+0x40>
 8001004:	b001      	add	sp, #4
 8001006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100a:	bf18      	it	ne
 800100c:	ea90 0f01 	teqne	r0, r1
 8001010:	bf58      	it	pl
 8001012:	ebb2 0003 	subspl.w	r0, r2, r3
 8001016:	bf88      	it	hi
 8001018:	17c8      	asrhi	r0, r1, #31
 800101a:	bf38      	it	cc
 800101c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001020:	bf18      	it	ne
 8001022:	f040 0001 	orrne.w	r0, r0, #1
 8001026:	4770      	bx	lr
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	d102      	bne.n	8001034 <__cmpsf2+0x4c>
 800102e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001032:	d105      	bne.n	8001040 <__cmpsf2+0x58>
 8001034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001038:	d1e4      	bne.n	8001004 <__cmpsf2+0x1c>
 800103a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103e:	d0e1      	beq.n	8001004 <__cmpsf2+0x1c>
 8001040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b50f      	push	{r0, r1, r2, r3, lr}
 8001052:	f7ff ffc9 	bl	8000fe8 <__cmpsf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cfcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cfcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cfcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffd2 	bl	8001048 <__aeabi_cfrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc8 	bl	8001048 <__aeabi_cfrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_f2iz>:
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010cc:	d30f      	bcc.n	80010ee <__aeabi_f2iz+0x2a>
 80010ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d6:	d90d      	bls.n	80010f4 <__aeabi_f2iz+0x30>
 80010d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e4:	fa23 f002 	lsr.w	r0, r3, r2
 80010e8:	bf18      	it	ne
 80010ea:	4240      	negne	r0, r0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2iz+0x3a>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d105      	bne.n	800110a <__aeabi_f2iz+0x46>
 80010fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001102:	bf08      	it	eq
 8001104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001108:	4770      	bx	lr
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4770      	bx	lr

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fd77 	bl	8000c10 <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff faed 	bl	800072c <__aeabi_dmul>
 8001152:	f7ff fdc3 	bl	8000cdc <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff fae4 	bl	800072c <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7ff f926 	bl	80003bc <__aeabi_dsub>
 8001170:	f7ff fdb4 	bl	8000cdc <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <InitMCC>:
extern int speedD;
extern int speedG;


void InitMCC()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <InitMCC+0x2c>)
 8001188:	f005 fe3c 	bl	8006e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800118c:	2104      	movs	r1, #4
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <InitMCC+0x2c>)
 8001190:	f005 fe38 	bl	8006e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001194:	2108      	movs	r1, #8
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <InitMCC+0x2c>)
 8001198:	f005 fe34 	bl	8006e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800119c:	210c      	movs	r1, #12
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <InitMCC+0x2c>)
 80011a0:	f005 fe30 	bl	8006e04 <HAL_TIM_PWM_Start>
	Stop();
 80011a4:	f000 f888 	bl	80012b8 <Stop>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200009e4 	.word	0x200009e4

080011b0 <Avancer>:

void Avancer(int vitesse)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2bc8      	cmp	r3, #200	; 0xc8
 80011bc:	dc02      	bgt.n	80011c4 <Avancer+0x14>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da01      	bge.n	80011c8 <Avancer+0x18>
 80011c4:	f001 fe8c 	bl	8002ee0 <Error_Handler>
	TIM1->CCR1=vitesse;
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <Avancer+0x38>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <Avancer+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <Avancer+0x38>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <Avancer+0x38>)
 80011dc:	2200      	movs	r2, #0
 80011de:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012c00 	.word	0x40012c00

080011ec <AvancerPI>:

void AvancerPI(int moteur, int vitesse)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2bc8      	cmp	r3, #200	; 0xc8
 80011fa:	dc02      	bgt.n	8001202 <AvancerPI+0x16>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da01      	bge.n	8001206 <AvancerPI+0x1a>
 8001202:	f001 fe6d 	bl	8002ee0 <Error_Handler>
	if (moteur)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <AvancerPI+0x2e>
	{
		TIM1->CCR1=0;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <AvancerPI+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=vitesse;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <AvancerPI+0x44>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM1->CCR3=0;
		TIM1->CCR4=vitesse;
	}
}
 8001218:	e005      	b.n	8001226 <AvancerPI+0x3a>
		TIM1->CCR3=0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <AvancerPI+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <AvancerPI+0x44>)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012c00 	.word	0x40012c00

08001234 <Reculer>:

void Reculer(int vitesse)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2bc8      	cmp	r3, #200	; 0xc8
 8001240:	dc02      	bgt.n	8001248 <Reculer+0x14>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da01      	bge.n	800124c <Reculer+0x18>
 8001248:	f001 fe4a 	bl	8002ee0 <Error_Handler>
	TIM1->CCR1=0;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Reculer+0x38>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <Reculer+0x38>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <Reculer+0x38>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <Reculer+0x38>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40012c00 	.word	0x40012c00

08001270 <ReculerPI>:

void ReculerPI(int moteur, int vitesse)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2bc8      	cmp	r3, #200	; 0xc8
 800127e:	dc02      	bgt.n	8001286 <ReculerPI+0x16>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	da01      	bge.n	800128a <ReculerPI+0x1a>
 8001286:	f001 fe2b 	bl	8002ee0 <Error_Handler>
	if (moteur)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <ReculerPI+0x2e>
	{
		TIM1->CCR1=vitesse;
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <ReculerPI+0x44>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <ReculerPI+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM1->CCR3=vitesse;
		TIM1->CCR4=0;
	}
}
 800129c:	e005      	b.n	80012aa <ReculerPI+0x3a>
		TIM1->CCR3=vitesse;
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <ReculerPI+0x44>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4=0;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <ReculerPI+0x44>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <Stop>:

void Stop(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <Stop+0x24>)
 80012be:	22c8      	movs	r2, #200	; 0xc8
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <Stop+0x24>)
 80012c4:	22c8      	movs	r2, #200	; 0xc8
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <Stop+0x24>)
 80012ca:	22c8      	movs	r2, #200	; 0xc8
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <Stop+0x24>)
 80012d0:	22c8      	movs	r2, #200	; 0xc8
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40012c00 	.word	0x40012c00

080012e0 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2bc8      	cmp	r3, #200	; 0xc8
 80012ee:	dc02      	bgt.n	80012f6 <Tourner+0x16>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da01      	bge.n	80012fa <Tourner+0x1a>
 80012f6:	f001 fdf3 	bl	8002ee0 <Error_Handler>
	if(sens)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <Tourner+0x68>)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <Tourner+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Tourner+0x68>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <Tourner+0x68>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8001318:	e011      	b.n	800133e <Tourner+0x5e>
	else if(!sens)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <Tourner+0x5a>
		    TIM1->CCR1=0;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <Tourner+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <Tourner+0x68>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <Tourner+0x68>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <Tourner+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001338:	e001      	b.n	800133e <Tourner+0x5e>
	else Error_Handler();
 800133a:	f001 fdd1 	bl	8002ee0 <Error_Handler>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00

0800134c <ReadEncodeur>:

void ReadEncodeur()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	tickD = Mid_Period_TIM2 - (TIM2->CNT);
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800135a:	337f      	adds	r3, #127	; 0x7f
 800135c:	461a      	mov	r2, r3
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <ReadEncodeur+0x40>)
 8001360:	601a      	str	r2, [r3, #0]
	TIM2->CNT = Mid_Period_TIM2;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	tickG = (TIM5->CNT) - Mid_Period_TIM5;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <ReadEncodeur+0x44>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001374:	3b7f      	subs	r3, #127	; 0x7f
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <ReadEncodeur+0x48>)
 800137a:	601a      	str	r2, [r3, #0]
	TIM5->CNT = Mid_Period_TIM5;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <ReadEncodeur+0x44>)
 800137e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000908 	.word	0x20000908
 8001390:	40000c00 	.word	0x40000c00
 8001394:	20000910 	.word	0x20000910

08001398 <PIController_Init>:
 * @param struct pi
 *
 * @return None
 */
void PIController_Init(PIController *pi)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	pi->integrator = 0.0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
	pi->prevError  = 0.0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

	pi->out = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

	pi->Kp = 1.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013be:	601a      	str	r2, [r3, #0]
	pi->Ki = 0.5;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013c6:	605a      	str	r2, [r3, #4]

	pi->limMin_output = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	pi->limMax_output = MAX_ARR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <PIController_Init+0x74>)
 80013d4:	60da      	str	r2, [r3, #12]

		/* Integrator limits */
	pi->limMin_integrator = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
	pi->limMax_integrator = MAX_ARR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <PIController_Init+0x74>)
 80013e2:	615a      	str	r2, [r3, #20]

		/* Sample time (in seconds) */
	pi->T = 0.1; // 10Hz frequence Tim1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <PIController_Init+0x78>)
 80013e8:	619a      	str	r2, [r3, #24]

		/* Controller "memory" */
	pi->integrator = 0.0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
	pi->prevError = 0.0;		/* Required for integrator */
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]

		/* Controller output */
	pi->out = 0.0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	43480000 	.word	0x43480000
 8001410:	3dcccccd 	.word	0x3dcccccd

08001414 <PIController_Update>:
 * @param measurement
 *
 * @return None
 */
float PIController_Update(PIController *pi, float consigne, float measurement)
{
 8001414:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]

    float error = consigne - measurement;
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fccd 	bl	8000dc4 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	617b      	str	r3, [r7, #20]

    float proportional = pi->Kp * error;	//Proportional
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f7fe ff09 	bl	800024c <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

    pi->integrator = pi->integrator + 0.5 * pi->Ki * pi->T * (error + pi->prevError);	//Integrator
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f91a 	bl	800067c <__aeabi_f2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f913 	bl	800067c <__aeabi_f2d>
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <PIController_Update+0x154>)
 800145c:	f7ff f966 	bl	800072c <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f905 	bl	800067c <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4640      	mov	r0, r8
 8001478:	4649      	mov	r1, r9
 800147a:	f7ff f957 	bl	800072c <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4690      	mov	r8, r2
 8001484:	4699      	mov	r9, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc9b 	bl	8000dc8 <__addsf3>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f8f1 	bl	800067c <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4640      	mov	r0, r8
 80014a0:	4649      	mov	r1, r9
 80014a2:	f7ff f943 	bl	800072c <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff87 	bl	80003c0 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fc2f 	bl	8000d1c <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	61da      	str	r2, [r3, #28]

    if (pi->integrator > pi->limMax_integrator) pi->integrator = pi->limMax_integrator; //anti-wind-up par ecretage
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fdee 	bl	80010b0 <__aeabi_fcmpgt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <PIController_Update+0xd0>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	61da      	str	r2, [r3, #28]
 80014e2:	e00e      	b.n	8001502 <PIController_Update+0xee>
    else if (pi->integrator < pi->limMin_integrator) pi->integrator = pi->limMin_integrator;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fdc0 	bl	8001074 <__aeabi_fcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <PIController_Update+0xee>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	61da      	str	r2, [r3, #28]


    pi->out = proportional + pi->integrator;	//Output
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc5d 	bl	8000dc8 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

    if (pi->out > pi->limMax_output) pi->out = pi->limMax_output;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fdc5 	bl	80010b0 <__aeabi_fcmpgt>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <PIController_Update+0x122>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
 8001534:	e00e      	b.n	8001554 <PIController_Update+0x140>
    else if (pi->out < pi->limMin_output) pi->out = pi->limMin_output;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff fd97 	bl	8001074 <__aeabi_fcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <PIController_Update+0x140>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

    pi->prevError       = error;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	621a      	str	r2, [r3, #32]

    return pi->out;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001568:	3fe00000 	.word	0x3fe00000

0800156c <raspGetChar>:
extern uint8_t uartTxBufferRasp[UART_TX_BUFFER_SIZE];
extern uint8_t stringSizeRasp;


uint8_t raspGetChar(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
	char* token;

	cmdBufferRasp[idxCmdRasp++] = uartRxBufferRasp[0];
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <raspGetChar+0x9c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	b2d1      	uxtb	r1, r2
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <raspGetChar+0x9c>)
 8001580:	7011      	strb	r1, [r2, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <raspGetChar+0xa0>)
 8001586:	7819      	ldrb	r1, [r3, #0]
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <raspGetChar+0xa4>)
 800158a:	5499      	strb	r1, [r3, r2]
	HAL_UART_Transmit(&huart1, uartRxBufferRasp, 1, HAL_MAX_DELAY); //ecrit à l'ordi
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2201      	movs	r2, #1
 8001592:	491e      	ldr	r1, [pc, #120]	; (800160c <raspGetChar+0xa0>)
 8001594:	481f      	ldr	r0, [pc, #124]	; (8001614 <raspGetChar+0xa8>)
 8001596:	f006 fdc9 	bl	800812c <HAL_UART_Transmit>

	if(idxCmdRasp == NB_CARACT)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <raspGetChar+0x9c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d12d      	bne.n	80015fe <raspGetChar+0x92>
		{
			HAL_UART_Transmit(&huart1, newlineRasp, sizeof(newlineRasp), HAL_MAX_DELAY);
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	2203      	movs	r2, #3
 80015a8:	491b      	ldr	r1, [pc, #108]	; (8001618 <raspGetChar+0xac>)
 80015aa:	481a      	ldr	r0, [pc, #104]	; (8001614 <raspGetChar+0xa8>)
 80015ac:	f006 fdbe 	bl	800812c <HAL_UART_Transmit>
			cmdBufferRasp[idxCmdRasp] = '\0';
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <raspGetChar+0x9c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <raspGetChar+0xa4>)
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]
			argcRasp = 0;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <raspGetChar+0xb0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
			token = (char*)strtok(cmdBufferRasp, " ");
 80015c2:	4917      	ldr	r1, [pc, #92]	; (8001620 <raspGetChar+0xb4>)
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <raspGetChar+0xa4>)
 80015c6:	f009 f825 	bl	800a614 <strtok>
 80015ca:	6038      	str	r0, [r7, #0]
			while(token!=NULL){
 80015cc:	e00f      	b.n	80015ee <raspGetChar+0x82>
				argvRasp[argcRasp++] = token;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <raspGetChar+0xb0>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	b2d1      	uxtb	r1, r2
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <raspGetChar+0xb0>)
 80015d8:	7011      	strb	r1, [r2, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <raspGetChar+0xb8>)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				token = (char*)strtok(NULL, " ");
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <raspGetChar+0xb4>)
 80015e6:	2000      	movs	r0, #0
 80015e8:	f009 f814 	bl	800a614 <strtok>
 80015ec:	6038      	str	r0, [r7, #0]
			while(token!=NULL){
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ec      	bne.n	80015ce <raspGetChar+0x62>
			}

			idxCmdRasp = 0;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <raspGetChar+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			newCmdReady = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
		}

	return newCmdReady;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000840 	.word	0x20000840
 800160c:	20000be0 	.word	0x20000be0
 8001610:	20000800 	.word	0x20000800
 8001614:	20000be4 	.word	0x20000be4
 8001618:	20000020 	.word	0x20000020
 800161c:	20000868 	.word	0x20000868
 8001620:	0800d688 	.word	0x0800d688
 8001624:	20000844 	.word	0x20000844

08001628 <raspErrorReceive>:

void raspErrorReceive(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, errlect, sizeof(errlect), HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	221d      	movs	r2, #29
 8001632:	4903      	ldr	r1, [pc, #12]	; (8001640 <raspErrorReceive+0x18>)
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <raspErrorReceive+0x1c>)
 8001636:	f006 fd79 	bl	800812c <HAL_UART_Transmit>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000000 	.word	0x20000000
 8001644:	20000be4 	.word	0x20000be4

08001648 <raspExec>:
/**
  * @brief  Call function depends of the value of argcRasp and argvRasp
  * @retval None
  */
void raspExec(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	if(strcmp(argvRasp[0],"FM")==0 && strcmp(argvRasp[5],"RT")==0)
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <raspExec+0x74>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	491b      	ldr	r1, [pc, #108]	; (80016c0 <raspExec+0x78>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fde8 	bl	8000228 <strcmp>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d129      	bne.n	80016b2 <raspExec+0x6a>
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <raspExec+0x74>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4918      	ldr	r1, [pc, #96]	; (80016c4 <raspExec+0x7c>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fddf 	bl	8000228 <strcmp>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d120      	bne.n	80016b2 <raspExec+0x6a>
	{
		action = atoi(argvRasp[1]);
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <raspExec+0x74>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	f007 fa43 	bl	8008b00 <atoi>
 800167a:	4603      	mov	r3, r0
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <raspExec+0x80>)
 800167e:	6013      	str	r3, [r2, #0]
		sens = atoi(argvRasp[2]);
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <raspExec+0x74>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f007 fa3b 	bl	8008b00 <atoi>
 800168a:	4603      	mov	r3, r0
 800168c:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <raspExec+0x84>)
 800168e:	6013      	str	r3, [r2, #0]
		couleur = atoi(argvRasp[3]);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <raspExec+0x74>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4618      	mov	r0, r3
 8001696:	f007 fa33 	bl	8008b00 <atoi>
 800169a:	4603      	mov	r3, r0
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <raspExec+0x88>)
 800169e:	6013      	str	r3, [r2, #0]
		TOF_dist = atoi(argvRasp[4]);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <raspExec+0x74>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f007 fa2b 	bl	8008b00 <atoi>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <raspExec+0x8c>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e002      	b.n	80016b8 <raspExec+0x70>
		//printf("%d %d %d %d\r\n", action, sens, couleur, TOF_dist);
	}

	else{
		raspErrorReceive();
 80016b2:	f7ff ffb9 	bl	8001628 <raspErrorReceive>
	}

}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000844 	.word	0x20000844
 80016c0:	0800d68c 	.word	0x0800d68c
 80016c4:	0800d690 	.word	0x0800d690
 80016c8:	2000010c 	.word	0x2000010c
 80016cc:	20000918 	.word	0x20000918
 80016d0:	2000091c 	.word	0x2000091c
 80016d4:	20000920 	.word	0x20000920

080016d8 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f640 0298 	movw	r2, #2200	; 0x898
 80016e6:	4293      	cmp	r3, r2
 80016e8:	dc08      	bgt.n	80016fc <ControlServo+0x24>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016f0:	db04      	blt.n	80016fc <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <ControlServo+0x30>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <ControlServo+0x26>
	}
	else
	{
		return 1;
 80016fc:	2301      	movs	r3, #1
	}
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40000400 	.word	0x40000400

0800170c <Debut_Test>:
#define DELAY 1000
#define OFFSET_OUVERTURE_PINCE 1150
#define MM2TICK 5//convert distance in mm in encoder tick variable (d=2.pi.(75/2)=235.6 et inc = 16*75 = 1200 ==> 1200/235.6 = 5

void Debut_Test()
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	start = (start+1)%2;
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <Debut_Test+0x34>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	bfb8      	it	lt
 800171e:	425b      	neglt	r3, r3
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <Debut_Test+0x34>)
 8001722:	6013      	str	r3, [r2, #0]
	X_odo = 0;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <Debut_Test+0x38>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
	Y_odo = 0;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <Debut_Test+0x3c>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <Debut_Test+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000086c 	.word	0x2000086c
 8001744:	20000900 	.word	0x20000900
 8001748:	20000904 	.word	0x20000904
 800174c:	200008fc 	.word	0x200008fc

08001750 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <MX_ADC1_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_ADC1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_ADC1_Init+0x74>)
 800177a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800177e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001788:	2201      	movs	r2, #1
 800178a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_ADC1_Init+0x74>)
 800178e:	f002 fd15 	bl	80041bc <HAL_ADC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f001 fba2 	bl	8002ee0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800179c:	2304      	movs	r3, #4
 800179e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_ADC1_Init+0x74>)
 80017ae:	f002 fdef 	bl	8004390 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017b8:	f001 fb92 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000870 	.word	0x20000870
 80017c8:	40012400 	.word	0x40012400

080017cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_ADC_MspInit+0x98>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d137      	bne.n	800185c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_ADC_MspInit+0x9c>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8001834:	23f0      	movs	r3, #240	; 0xf0
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	2303      	movs	r3, #3
 800183a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4619      	mov	r1, r3
 8001842:	480a      	ldr	r0, [pc, #40]	; (800186c <HAL_ADC_MspInit+0xa0>)
 8001844:	f003 f92e 	bl	8004aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 8001848:	2303      	movs	r3, #3
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <HAL_ADC_MspInit+0xa4>)
 8001858:	f003 f924 	bl	8004aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40012400 	.word	0x40012400
 8001868:	40021000 	.word	0x40021000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00

08001874 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fd09 	bl	8002294 <initSensor>
 8001882:	4603      	mov	r3, r0

} /* tofInit() */
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001896:	1dfa      	adds	r2, r7, #7
 8001898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	2152      	movs	r1, #82	; 0x52
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <readReg16+0x48>)
 80018a4:	f003 fd1c 	bl	80052e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 80018a8:	f107 020c 	add.w	r2, r7, #12
 80018ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	2153      	movs	r1, #83	; 0x53
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <readReg16+0x48>)
 80018b8:	f003 fe10 	bl	80054dc <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 80018bc:	7b3b      	ldrb	r3, [r7, #12]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	7b7b      	ldrb	r3, [r7, #13]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	b29b      	uxth	r3, r3
} /* readReg16() */
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200008a8 	.word	0x200008a8

080018d8 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80018e2:	1dfa      	adds	r2, r7, #7
 80018e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	2152      	movs	r1, #82	; 0x52
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <readReg+0x3c>)
 80018f0:	f003 fcf6 	bl	80052e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80018f4:	f107 020f 	add.w	r2, r7, #15
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2301      	movs	r3, #1
 8001900:	2153      	movs	r1, #83	; 0x53
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <readReg+0x3c>)
 8001904:	f003 fdea 	bl	80054dc <HAL_I2C_Master_Receive>
	return ucTemp;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200008a8 	.word	0x200008a8

08001918 <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af02      	add	r7, sp, #8
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	4613      	mov	r3, r2
 8001926:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001928:	1dfa      	adds	r2, r7, #7
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	2152      	movs	r1, #82	; 0x52
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <readMulti+0x3c>)
 8001936:	f003 fcd3 	bl	80052e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001940:	9200      	str	r2, [sp, #0]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	2153      	movs	r1, #83	; 0x53
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <readMulti+0x3c>)
 8001948:	f003 fdc8 	bl	80054dc <HAL_I2C_Master_Receive>
} /* readMulti() */
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200008a8 	.word	0x200008a8

08001958 <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800195c:	b087      	sub	sp, #28
 800195e:	af02      	add	r7, sp, #8
 8001960:	4603      	mov	r3, r0
 8001962:	6039      	str	r1, [r7, #0]
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	4613      	mov	r3, r2
 8001968:	80bb      	strh	r3, [r7, #4]
 800196a:	466b      	mov	r3, sp
 800196c:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	1c59      	adds	r1, r3, #1
 8001972:	1e4b      	subs	r3, r1, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	460a      	mov	r2, r1
 8001978:	2300      	movs	r3, #0
 800197a:	4690      	mov	r8, r2
 800197c:	4699      	mov	r9, r3
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001992:	460a      	mov	r2, r1
 8001994:	2300      	movs	r3, #0
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	00eb      	lsls	r3, r5, #3
 80019a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a8:	00e2      	lsls	r2, r4, #3
 80019aa:	460b      	mov	r3, r1
 80019ac:	3307      	adds	r3, #7
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	ebad 0d03 	sub.w	sp, sp, r3
 80019b6:	ab02      	add	r3, sp, #8
 80019b8:	3300      	adds	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	79fa      	ldrb	r2, [r7, #7]
 80019c0:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	88ba      	ldrh	r2, [r7, #4]
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 f8c6 	bl	8008b5c <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 80019d0:	88bb      	ldrh	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	2152      	movs	r1, #82	; 0x52
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <writeMulti+0x9c>)
 80019e2:	f003 fc7d 	bl	80052e0 <HAL_I2C_Master_Transmit>
 80019e6:	46b5      	mov	sp, r6
} /* writeMulti() */
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019f2:	bf00      	nop
 80019f4:	200008a8 	.word	0x200008a8

080019f8 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2303      	movs	r3, #3
 8001a28:	2152      	movs	r1, #82	; 0x52
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <writeReg16+0x40>)
 8001a2c:	f003 fc58 	bl	80052e0 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200008a8 	.word	0x200008a8

08001a3c <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 8001a50:	79bb      	ldrb	r3, [r7, #6]
 8001a52:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8001a54:	f107 020c 	add.w	r2, r7, #12
 8001a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	2152      	movs	r1, #82	; 0x52
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <writeReg+0x34>)
 8001a64:	f003 fc3c 	bl	80052e0 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200008a8 	.word	0x200008a8

08001a74 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8001a86:	e00e      	b.n	8001aa6 <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 8001a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	2152      	movs	r1, #82	; 0x52
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <writeRegList+0x44>)
 8001a96:	f003 fc23 	bl	80052e0 <HAL_I2C_Master_Transmit>
		ucList += 2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
		ucCount--;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ed      	bne.n	8001a88 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200008a8 	.word	0x200008a8

08001abc <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 8001ac6:	482d      	ldr	r0, [pc, #180]	; (8001b7c <getSpadInfo+0xc0>)
 8001ac8:	f7ff ffd4 	bl	8001a74 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001acc:	2083      	movs	r0, #131	; 0x83
 8001ace:	f7ff ff03 	bl	80018d8 <readReg>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	2083      	movs	r0, #131	; 0x83
 8001ade:	f7ff ffad 	bl	8001a3c <writeReg>
  writeRegList(ucSPAD1);
 8001ae2:	4827      	ldr	r0, [pc, #156]	; (8001b80 <getSpadInfo+0xc4>)
 8001ae4:	f7ff ffc6 	bl	8001a74 <writeRegList>
  iTimeout = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001aec:	e00b      	b.n	8001b06 <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 8001aee:	2083      	movs	r0, #131	; 0x83
 8001af0:	f7ff fef2 	bl	80018d8 <readReg>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <getSpadInfo+0x52>
    iTimeout++;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8001b00:	2005      	movs	r0, #5
 8001b02:	f002 fb37 	bl	8004174 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b31      	cmp	r3, #49	; 0x31
 8001b0a:	ddf0      	ble.n	8001aee <getSpadInfo+0x32>
 8001b0c:	e000      	b.n	8001b10 <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 8001b0e:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b32      	cmp	r3, #50	; 0x32
 8001b14:	d101      	bne.n	8001b1a <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e02b      	b.n	8001b72 <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2083      	movs	r0, #131	; 0x83
 8001b1e:	f7ff ff8d 	bl	8001a3c <writeReg>
  ucTemp = readReg(0x92);
 8001b22:	2092      	movs	r0, #146	; 0x92
 8001b24:	f7ff fed8 	bl	80018d8 <readReg>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2081      	movs	r0, #129	; 0x81
 8001b48:	f7ff ff78 	bl	8001a3c <writeReg>
  writeReg(0xff,0x06);
 8001b4c:	2106      	movs	r1, #6
 8001b4e:	20ff      	movs	r0, #255	; 0xff
 8001b50:	f7ff ff74 	bl	8001a3c <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8001b54:	2083      	movs	r0, #131	; 0x83
 8001b56:	f7ff febf 	bl	80018d8 <readReg>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4619      	mov	r1, r3
 8001b64:	2083      	movs	r0, #131	; 0x83
 8001b66:	f7ff ff69 	bl	8001a3c <writeReg>
  writeRegList(ucSPAD2);
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <getSpadInfo+0xc8>)
 8001b6c:	f7ff ff82 	bl	8001a74 <writeRegList>

  return 1;
 8001b70:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000038 	.word	0x20000038
 8001b80:	20000044 	.word	0x20000044
 8001b84:	20000050 	.word	0x20000050

08001b88 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	0a12      	lsrs	r2, r2, #8
 8001b9a:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b29b      	uxth	r3, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
	...

08001bb0 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	80fb      	strh	r3, [r7, #6]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <timeoutMclksToMicroseconds+0x48>)
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <timeoutMclksToMicroseconds+0x4c>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <timeoutMclksToMicroseconds+0x4c>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	099b      	lsrs	r3, r3, #6
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	003a2f00 	.word	0x003a2f00
 8001bfc:	10624dd3 	.word	0x10624dd3

08001c00 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <timeoutMicrosecondsToMclks+0x44>)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <timeoutMicrosecondsToMclks+0x48>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c28:	fb03 f202 	mul.w	r2, r3, r2
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	441a      	add	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	003a2f00 	.word	0x003a2f00
 8001c48:	10624dd3 	.word	0x10624dd3

08001c4c <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d018      	beq.n	8001c96 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c6a:	e005      	b.n	8001c78 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001c72:	897b      	ldrh	r3, [r7, #10]
 8001c74:	3301      	adds	r3, #1
 8001c76:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f4      	bne.n	8001c6c <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	e000      	b.n	8001c98 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	6039      	str	r1, [r7, #0]
 8001cac:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001cae:	2050      	movs	r0, #80	; 0x50
 8001cb0:	f7ff fe12 	bl	80018d8 <readReg>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001cc4:	2046      	movs	r0, #70	; 0x46
 8001cc6:	f7ff fe07 	bl	80018d8 <readReg>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7ff ff64 	bl	8001bb0 <timeoutMclksToMicroseconds>
 8001ce8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001cee:	2051      	movs	r0, #81	; 0x51
 8001cf0:	f7ff fdcc 	bl	800188c <readReg16>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff46 	bl	8001b88 <decodeTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7ff ff4d 	bl	8001bb0 <timeoutMclksToMicroseconds>
 8001d16:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001d1c:	2070      	movs	r0, #112	; 0x70
 8001d1e:	f7ff fddb 	bl	80018d8 <readReg>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001d32:	2071      	movs	r0, #113	; 0x71
 8001d34:	f7ff fdaa 	bl	800188c <readReg16>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff24 	bl	8001b88 <decodeTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	891a      	ldrh	r2, [r3, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	88db      	ldrh	r3, [r3, #6]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7ff ff1e 	bl	8001bb0 <timeoutMclksToMicroseconds>
 8001d74:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff fd99 	bl	80018d8 <readReg>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001dac:	f107 020c 	add.w	r2, r7, #12
 8001db0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff73 	bl	8001ca2 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d15c      	bne.n	8001e7c <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	3b0c      	subs	r3, #12
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d824      	bhi.n	8001e14 <setVcselPulsePeriod+0x90>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <setVcselPulsePeriod+0x4c>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001ded 	.word	0x08001ded
 8001dd4:	08001e15 	.word	0x08001e15
 8001dd8:	08001df7 	.word	0x08001df7
 8001ddc:	08001e15 	.word	0x08001e15
 8001de0:	08001e01 	.word	0x08001e01
 8001de4:	08001e15 	.word	0x08001e15
 8001de8:	08001e0b 	.word	0x08001e0b
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001dec:	2118      	movs	r1, #24
 8001dee:	2057      	movs	r0, #87	; 0x57
 8001df0:	f7ff fe24 	bl	8001a3c <writeReg>
        break;
 8001df4:	e010      	b.n	8001e18 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001df6:	2130      	movs	r1, #48	; 0x30
 8001df8:	2057      	movs	r0, #87	; 0x57
 8001dfa:	f7ff fe1f 	bl	8001a3c <writeReg>
        break;
 8001dfe:	e00b      	b.n	8001e18 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	2057      	movs	r0, #87	; 0x57
 8001e04:	f7ff fe1a 	bl	8001a3c <writeReg>
        break;
 8001e08:	e006      	b.n	8001e18 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001e0a:	2150      	movs	r1, #80	; 0x50
 8001e0c:	2057      	movs	r0, #87	; 0x57
 8001e0e:	f7ff fe15 	bl	8001a3c <writeReg>
        break;
 8001e12:	e001      	b.n	8001e18 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e0fe      	b.n	8002016 <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001e18:	2108      	movs	r1, #8
 8001e1a:	2056      	movs	r0, #86	; 0x56
 8001e1c:	f7ff fe0e 	bl	8001a3c <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001e20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e24:	4619      	mov	r1, r3
 8001e26:	2050      	movs	r0, #80	; 0x50
 8001e28:	f7ff fe08 	bl	8001a3c <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	79ba      	ldrb	r2, [r7, #6]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fee4 	bl	8001c00 <timeoutMicrosecondsToMclks>
 8001e38:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001e3a:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001e3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff04 	bl	8001c4c <encodeTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	2051      	movs	r0, #81	; 0x51
 8001e4a:	f7ff fdd5 	bl	80019f8 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	79ba      	ldrb	r2, [r7, #6]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fed3 	bl	8001c00 <timeoutMicrosecondsToMclks>
 8001e5a:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001e5c:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e64:	d804      	bhi.n	8001e70 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001e66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e68:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e000      	b.n	8001e72 <setVcselPulsePeriod+0xee>
 8001e70:	23ff      	movs	r3, #255	; 0xff
 8001e72:	4619      	mov	r1, r3
 8001e74:	2046      	movs	r0, #70	; 0x46
 8001e76:	f7ff fde1 	bl	8001a3c <writeReg>
 8001e7a:	e0b3      	b.n	8001fe4 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f040 80ae 	bne.w	8001fe0 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	3b08      	subs	r3, #8
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	f200 8085 	bhi.w	8001f98 <setVcselPulsePeriod+0x214>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <setVcselPulsePeriod+0x110>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001eb1 	.word	0x08001eb1
 8001e98:	08001f99 	.word	0x08001f99
 8001e9c:	08001eeb 	.word	0x08001eeb
 8001ea0:	08001f99 	.word	0x08001f99
 8001ea4:	08001f25 	.word	0x08001f25
 8001ea8:	08001f99 	.word	0x08001f99
 8001eac:	08001f5f 	.word	0x08001f5f
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	2048      	movs	r0, #72	; 0x48
 8001eb4:	f7ff fdc2 	bl	8001a3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001eb8:	2108      	movs	r1, #8
 8001eba:	2047      	movs	r0, #71	; 0x47
 8001ebc:	f7ff fdbe 	bl	8001a3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	2032      	movs	r0, #50	; 0x32
 8001ec4:	f7ff fdba 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001ec8:	210c      	movs	r1, #12
 8001eca:	2030      	movs	r0, #48	; 0x30
 8001ecc:	f7ff fdb6 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x01);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	20ff      	movs	r0, #255	; 0xff
 8001ed4:	f7ff fdb2 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001ed8:	2130      	movs	r1, #48	; 0x30
 8001eda:	2030      	movs	r0, #48	; 0x30
 8001edc:	f7ff fdae 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x00);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	20ff      	movs	r0, #255	; 0xff
 8001ee4:	f7ff fdaa 	bl	8001a3c <writeReg>
        break;
 8001ee8:	e058      	b.n	8001f9c <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001eea:	2128      	movs	r1, #40	; 0x28
 8001eec:	2048      	movs	r0, #72	; 0x48
 8001eee:	f7ff fda5 	bl	8001a3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	2047      	movs	r0, #71	; 0x47
 8001ef6:	f7ff fda1 	bl	8001a3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001efa:	2103      	movs	r1, #3
 8001efc:	2032      	movs	r0, #50	; 0x32
 8001efe:	f7ff fd9d 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001f02:	2109      	movs	r1, #9
 8001f04:	2030      	movs	r0, #48	; 0x30
 8001f06:	f7ff fd99 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x01);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	20ff      	movs	r0, #255	; 0xff
 8001f0e:	f7ff fd95 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f12:	2120      	movs	r1, #32
 8001f14:	2030      	movs	r0, #48	; 0x30
 8001f16:	f7ff fd91 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x00);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	20ff      	movs	r0, #255	; 0xff
 8001f1e:	f7ff fd8d 	bl	8001a3c <writeReg>
        break;
 8001f22:	e03b      	b.n	8001f9c <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001f24:	2138      	movs	r1, #56	; 0x38
 8001f26:	2048      	movs	r0, #72	; 0x48
 8001f28:	f7ff fd88 	bl	8001a3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	2047      	movs	r0, #71	; 0x47
 8001f30:	f7ff fd84 	bl	8001a3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f34:	2103      	movs	r1, #3
 8001f36:	2032      	movs	r0, #50	; 0x32
 8001f38:	f7ff fd80 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001f3c:	2108      	movs	r1, #8
 8001f3e:	2030      	movs	r0, #48	; 0x30
 8001f40:	f7ff fd7c 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x01);
 8001f44:	2101      	movs	r1, #1
 8001f46:	20ff      	movs	r0, #255	; 0xff
 8001f48:	f7ff fd78 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	2030      	movs	r0, #48	; 0x30
 8001f50:	f7ff fd74 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x00);
 8001f54:	2100      	movs	r1, #0
 8001f56:	20ff      	movs	r0, #255	; 0xff
 8001f58:	f7ff fd70 	bl	8001a3c <writeReg>
        break;
 8001f5c:	e01e      	b.n	8001f9c <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001f5e:	2148      	movs	r1, #72	; 0x48
 8001f60:	2048      	movs	r0, #72	; 0x48
 8001f62:	f7ff fd6b 	bl	8001a3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f66:	2108      	movs	r1, #8
 8001f68:	2047      	movs	r0, #71	; 0x47
 8001f6a:	f7ff fd67 	bl	8001a3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f6e:	2103      	movs	r1, #3
 8001f70:	2032      	movs	r0, #50	; 0x32
 8001f72:	f7ff fd63 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001f76:	2107      	movs	r1, #7
 8001f78:	2030      	movs	r0, #48	; 0x30
 8001f7a:	f7ff fd5f 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x01);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	20ff      	movs	r0, #255	; 0xff
 8001f82:	f7ff fd5b 	bl	8001a3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f86:	2120      	movs	r1, #32
 8001f88:	2030      	movs	r0, #48	; 0x30
 8001f8a:	f7ff fd57 	bl	8001a3c <writeReg>
        writeReg(0xFF, 0x00);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	20ff      	movs	r0, #255	; 0xff
 8001f92:	f7ff fd53 	bl	8001a3c <writeReg>
        break;
 8001f96:	e001      	b.n	8001f9c <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e03c      	b.n	8002016 <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001f9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	2070      	movs	r0, #112	; 0x70
 8001fa4:	f7ff fd4a 	bl	8001a3c <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	79ba      	ldrb	r2, [r7, #6]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe26 	bl	8001c00 <timeoutMicrosecondsToMclks>
 8001fb4:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001fb6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001fb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001fc4:	8a7a      	ldrh	r2, [r7, #18]
 8001fc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fc8:	4413      	add	r3, r2
 8001fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001fcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe3c 	bl	8001c4c <encodeTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2071      	movs	r0, #113	; 0x71
 8001fda:	f7ff fd0d 	bl	80019f8 <writeReg16>
 8001fde:	e001      	b.n	8001fe4 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e018      	b.n	8002016 <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <setVcselPulsePeriod+0x29c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f81b 	bl	8002024 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff fc72 	bl	80018d8 <readReg>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff fd1d 	bl	8001a3c <writeReg>
  performSingleRefCalibration(0x0);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f916 	bl	8002234 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8002008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800200c:	4619      	mov	r1, r3
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff fd14 	bl	8001a3c <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	3730      	adds	r7, #48	; 0x30
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200008a4 	.word	0x200008a4

08002024 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b090      	sub	sp, #64	; 0x40
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800202c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8002030:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 8002032:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002036:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8002038:	f44f 7325 	mov.w	r3, #660	; 0x294
 800203c:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 800203e:	f240 234e 	movw	r3, #590	; 0x24e
 8002042:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8002044:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002048:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 800204a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800204e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8002050:	f240 2326 	movw	r3, #550	; 0x226
 8002054:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8002056:	f644 6320 	movw	r3, #20000	; 0x4e20
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	429a      	cmp	r2, r3
 8002062:	d201      	bcs.n	8002068 <setMeasurementTimingBudget+0x44>
 8002064:	2300      	movs	r3, #0
 8002066:	e074      	b.n	8002152 <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8002068:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800206a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800206c:	4413      	add	r3, r2
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff fc31 	bl	80018d8 <readReg>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 800207c:	f107 0208 	add.w	r2, r7, #8
 8002080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fe0b 	bl	8001ca2 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 800208c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800209c:	4413      	add	r3, r2
 800209e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020a0:	4413      	add	r3, r2
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80020a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020b4:	4413      	add	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ba:	4413      	add	r3, r2
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020be:	e00b      	b.n	80020d8 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80020c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020d0:	4413      	add	r3, r2
 80020d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d4:	4413      	add	r3, r2
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80020d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e8:	4413      	add	r3, r2
 80020ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ec:	4413      	add	r3, r2
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 80020f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da2b      	bge.n	8002150 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 80020f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fc:	4413      	add	r3, r2
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d901      	bls.n	800210c <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8002108:	2300      	movs	r3, #0
 800210a:	e022      	b.n	8002152 <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002114:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	6a38      	ldr	r0, [r7, #32]
 800211c:	f7ff fd70 	bl	8001c00 <timeoutMicrosecondsToMclks>
 8002120:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8002122:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002130:	89fa      	ldrh	r2, [r7, #14]
 8002132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002134:	4413      	add	r3, r2
 8002136:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002138:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fd86 	bl	8001c4c <encodeTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	2071      	movs	r0, #113	; 0x71
 8002146:	f7ff fc57 	bl	80019f8 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <setMeasurementTimingBudget+0x138>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	3740      	adds	r7, #64	; 0x40
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200008a4 	.word	0x200008a4

08002160 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8002166:	f240 7376 	movw	r3, #1910	; 0x776
 800216a:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 800216c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002170:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 8002172:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002176:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8002178:	f240 234e 	movw	r3, #590	; 0x24e
 800217c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 800217e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002182:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8002184:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002188:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 800218a:	f240 2326 	movw	r3, #550	; 0x226
 800218e:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002190:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002192:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002194:	4413      	add	r3, r2
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002198:	2001      	movs	r0, #1
 800219a:	f7ff fb9d 	bl	80018d8 <readReg>
 800219e:	4603      	mov	r3, r0
 80021a0:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 80021a2:	1d3a      	adds	r2, r7, #4
 80021a4:	7f7b      	ldrb	r3, [r7, #29]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fd7a 	bl	8001ca2 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 80021ae:	7f7b      	ldrb	r3, [r7, #29]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021bc:	4413      	add	r3, r2
 80021be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c0:	4413      	add	r3, r2
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80021c4:	7f7b      	ldrb	r3, [r7, #29]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d8:	4413      	add	r3, r2
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	e00a      	b.n	80021f4 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80021de:	7f7b      	ldrb	r3, [r7, #29]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021ec:	4413      	add	r3, r2
 80021ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f0:	4413      	add	r3, r2
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80021f4:	7f7b      	ldrb	r3, [r7, #29]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	8c3b      	ldrh	r3, [r7, #32]
 8002202:	4413      	add	r3, r2
 8002204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002206:	4413      	add	r3, r2
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 800220a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da05      	bge.n	800221e <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	8bfb      	ldrh	r3, [r7, #30]
 8002216:	4413      	add	r3, r2
 8002218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221a:	4413      	add	r3, r2
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <getMeasurementTimingBudget+0xd0>)
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	6013      	str	r3, [r2, #0]
  return budget_us;
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002226:	4618      	mov	r0, r3
 8002228:	3730      	adds	r7, #48	; 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200008a4 	.word	0x200008a4

08002234 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff fbf7 	bl	8001a3c <writeReg>

  iTimeout = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002252:	e00a      	b.n	800226a <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 800225a:	2005      	movs	r0, #5
 800225c:	f001 ff8a 	bl	8004174 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	dd01      	ble.n	800226a <performSingleRefCalibration+0x36>
 8002266:	2300      	movs	r3, #0
 8002268:	e010      	b.n	800228c <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800226a:	2013      	movs	r0, #19
 800226c:	f7ff fb34 	bl	80018d8 <readReg>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ec      	beq.n	8002254 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800227a:	2101      	movs	r1, #1
 800227c:	200b      	movs	r0, #11
 800227e:	f7ff fbdd 	bl	8001a3c <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8002282:	2100      	movs	r1, #0
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff fbd9 	bl	8001a3c <writeReg>

  return 1;
 800228a:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 800229c:	2300      	movs	r3, #0
 800229e:	75bb      	strb	r3, [r7, #22]
 80022a0:	2300      	movs	r3, #0
 80022a2:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80022a4:	2089      	movs	r0, #137	; 0x89
 80022a6:	f7ff fb17 	bl	80018d8 <readReg>
 80022aa:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4619      	mov	r1, r3
 80022b4:	2089      	movs	r0, #137	; 0x89
 80022b6:	f7ff fbc1 	bl	8001a3c <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 80022ba:	486a      	ldr	r0, [pc, #424]	; (8002464 <initSensor+0x1d0>)
 80022bc:	f7ff fbda 	bl	8001a74 <writeRegList>
  stop_variable = readReg(0x91);
 80022c0:	2091      	movs	r0, #145	; 0x91
 80022c2:	f7ff fb09 	bl	80018d8 <readReg>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <initSensor+0x1d4>)
 80022cc:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 80022ce:	4867      	ldr	r0, [pc, #412]	; (800246c <initSensor+0x1d8>)
 80022d0:	f7ff fbd0 	bl	8001a74 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 80022d4:	2060      	movs	r0, #96	; 0x60
 80022d6:	f7ff faff 	bl	80018d8 <readReg>
 80022da:	4603      	mov	r3, r0
 80022dc:	f043 0312 	orr.w	r3, r3, #18
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	2060      	movs	r0, #96	; 0x60
 80022e6:	f7ff fba9 	bl	8001a3c <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 80022ea:	2120      	movs	r1, #32
 80022ec:	2044      	movs	r0, #68	; 0x44
 80022ee:	f7ff fb83 	bl	80019f8 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80022f2:	21ff      	movs	r1, #255	; 0xff
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff fba1 	bl	8001a3c <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 80022fa:	f107 0215 	add.w	r2, r7, #21
 80022fe:	f107 0316 	add.w	r3, r7, #22
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fbd9 	bl	8001abc <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	2206      	movs	r2, #6
 8002310:	4619      	mov	r1, r3
 8002312:	20b0      	movs	r0, #176	; 0xb0
 8002314:	f7ff fb00 	bl	8001918 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 8002318:	4855      	ldr	r0, [pc, #340]	; (8002470 <initSensor+0x1dc>)
 800231a:	f7ff fbab 	bl	8001a74 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 800231e:	7d7b      	ldrb	r3, [r7, #21]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <initSensor+0x94>
 8002324:	230c      	movs	r3, #12
 8002326:	e000      	b.n	800232a <initSensor+0x96>
 8002328:	2300      	movs	r3, #0
 800232a:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e037      	b.n	80023a6 <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	429a      	cmp	r2, r3
 800233c:	db03      	blt.n	8002346 <initSensor+0xb2>
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	7ffa      	ldrb	r2, [r7, #31]
 8002342:	429a      	cmp	r2, r3
 8002344:	d119      	bne.n	800237a <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	10db      	asrs	r3, r3, #3
 800234a:	3320      	adds	r3, #32
 800234c:	443b      	add	r3, r7
 800234e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002352:	b25a      	sxtb	r2, r3
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	b25b      	sxtb	r3, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	b25b      	sxtb	r3, r3
 8002366:	4013      	ands	r3, r2
 8002368:	b25a      	sxtb	r2, r3
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	10db      	asrs	r3, r3, #3
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	3320      	adds	r3, #32
 8002372:	443b      	add	r3, r7
 8002374:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002378:	e012      	b.n	80023a0 <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	10db      	asrs	r3, r3, #3
 800237e:	3320      	adds	r3, #32
 8002380:	443b      	add	r3, r7
 8002382:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002386:	461a      	mov	r2, r3
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	fa42 f303 	asr.w	r3, r2, r3
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	3301      	adds	r3, #1
 800239e:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b2f      	cmp	r3, #47	; 0x2f
 80023aa:	ddc4      	ble.n	8002336 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	2206      	movs	r2, #6
 80023b2:	4619      	mov	r1, r3
 80023b4:	20b0      	movs	r0, #176	; 0xb0
 80023b6:	f7ff facf 	bl	8001958 <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 80023ba:	482e      	ldr	r0, [pc, #184]	; (8002474 <initSensor+0x1e0>)
 80023bc:	f7ff fb5a 	bl	8001a74 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 80023c6:	210d      	movs	r1, #13
 80023c8:	2044      	movs	r0, #68	; 0x44
 80023ca:	f7ff fb15 	bl	80019f8 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 80023ce:	2112      	movs	r1, #18
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff fcd7 	bl	8001d84 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80023d6:	210e      	movs	r1, #14
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff fcd3 	bl	8001d84 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80023de:	2104      	movs	r1, #4
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fb2b 	bl	8001a3c <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80023e6:	2084      	movs	r0, #132	; 0x84
 80023e8:	f7ff fa76 	bl	80018d8 <readReg>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f023 0310 	bic.w	r3, r3, #16
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	2084      	movs	r0, #132	; 0x84
 80023f8:	f7ff fb20 	bl	8001a3c <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80023fc:	2101      	movs	r1, #1
 80023fe:	200b      	movs	r0, #11
 8002400:	f7ff fb1c 	bl	8001a3c <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8002404:	f7ff feac 	bl	8002160 <getMeasurementTimingBudget>
 8002408:	4603      	mov	r3, r0
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <initSensor+0x1e4>)
 800240c:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 800240e:	21e8      	movs	r1, #232	; 0xe8
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff fb13 	bl	8001a3c <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <initSensor+0x1e4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fe02 	bl	8002024 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002420:	2101      	movs	r1, #1
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff fb0a 	bl	8001a3c <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8002428:	2040      	movs	r0, #64	; 0x40
 800242a:	f7ff ff03 	bl	8002234 <performSingleRefCalibration>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <initSensor+0x1a4>
 8002434:	2300      	movs	r3, #0
 8002436:	e010      	b.n	800245a <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002438:	2102      	movs	r1, #2
 800243a:	2001      	movs	r0, #1
 800243c:	f7ff fafe 	bl	8001a3c <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff fef7 	bl	8002234 <performSingleRefCalibration>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <initSensor+0x1bc>
 800244c:	2300      	movs	r3, #0
 800244e:	e004      	b.n	800245a <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002450:	21e8      	movs	r1, #232	; 0xe8
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff faf2 	bl	8001a3c <writeReg>
  return 1;
 8002458:	2301      	movs	r3, #1
} /* initSensor() */
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000024 	.word	0x20000024
 8002468:	200008a0 	.word	0x200008a0
 800246c:	20000030 	.word	0x20000030
 8002470:	2000005c 	.word	0x2000005c
 8002474:	20000068 	.word	0x20000068
 8002478:	200008a4 	.word	0x200008a4

0800247c <tofGetModel>:
  return readRangeContinuousMillimeters();

} /* tofReadDistance() */

int tofGetModel(int *model, int *revision)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d019      	beq.n	80024c0 <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8002490:	f107 020e 	add.w	r2, r7, #14
 8002494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2301      	movs	r3, #1
 800249c:	2152      	movs	r1, #82	; 0x52
 800249e:	4819      	ldr	r0, [pc, #100]	; (8002504 <tofGetModel+0x88>)
 80024a0:	f002 ff1e 	bl	80052e0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80024a4:	f107 020f 	add.w	r2, r7, #15
 80024a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	2153      	movs	r1, #83	; 0x53
 80024b2:	4814      	ldr	r0, [pc, #80]	; (8002504 <tofGetModel+0x88>)
 80024b4:	f003 f812 	bl	80054dc <HAL_I2C_Master_Receive>
		*model = ucTemp;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	461a      	mov	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d019      	beq.n	80024fa <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 80024c6:	23c2      	movs	r3, #194	; 0xc2
 80024c8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80024ca:	f107 020e 	add.w	r2, r7, #14
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2301      	movs	r3, #1
 80024d6:	2152      	movs	r1, #82	; 0x52
 80024d8:	480a      	ldr	r0, [pc, #40]	; (8002504 <tofGetModel+0x88>)
 80024da:	f002 ff01 	bl	80052e0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80024de:	f107 020f 	add.w	r2, r7, #15
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2301      	movs	r3, #1
 80024ea:	2153      	movs	r1, #83	; 0x53
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <tofGetModel+0x88>)
 80024ee:	f002 fff5 	bl	80054dc <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	461a      	mov	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	601a      	str	r2, [r3, #0]
	}
	return 1;
 80024fa:	2301      	movs	r3, #1

} /* tofGetModel() */
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200008a8 	.word	0x200008a8

08002508 <initTof>:
 * @brief Use to initialize the ToF sensor
 *
 * @return
 */
int initTof()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	int model = 0, revision = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, SET);
 8002516:	2201      	movs	r2, #1
 8002518:	2120      	movs	r1, #32
 800251a:	4821      	ldr	r0, [pc, #132]	; (80025a0 <initTof+0x98>)
 800251c:	f002 fd22 	bl	8004f64 <HAL_GPIO_WritePin>
	while(I2C2->CR2==2)
 8002520:	e00d      	b.n	800253e <initTof+0x36>
		{
		  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 8002522:	bf00      	nop
 8002524:	481f      	ldr	r0, [pc, #124]	; (80025a4 <initTof+0x9c>)
 8002526:	f002 feab 	bl	8005280 <HAL_I2C_DeInit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <initTof+0x1c>
		  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8002530:	bf00      	nop
 8002532:	481c      	ldr	r0, [pc, #112]	; (80025a4 <initTof+0x9c>)
 8002534:	f002 fd60 	bl	8004ff8 <HAL_I2C_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f9      	bne.n	8002532 <initTof+0x2a>
	while(I2C2->CR2==2)
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <initTof+0xa0>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d0ed      	beq.n	8002522 <initTof+0x1a>
		}

	tofInit(1); // set long range mode (up to 2m)
 8002546:	2001      	movs	r0, #1
 8002548:	f7ff f994 	bl	8001874 <tofInit>
	tofGetModel(&model, &revision);
 800254c:	463a      	mov	r2, r7
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff92 	bl	800247c <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 8002558:	e016      	b.n	8002588 <initTof+0x80>
	{
	while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 800255a:	bf00      	nop
 800255c:	4811      	ldr	r0, [pc, #68]	; (80025a4 <initTof+0x9c>)
 800255e:	f002 fe8f 	bl	8005280 <HAL_I2C_DeInit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f9      	bne.n	800255c <initTof+0x54>
	while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8002568:	bf00      	nop
 800256a:	480e      	ldr	r0, [pc, #56]	; (80025a4 <initTof+0x9c>)
 800256c:	f002 fd44 	bl	8004ff8 <HAL_I2C_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <initTof+0x62>
	tofInit(1); // set long range mode (up to 2m)
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff f97c 	bl	8001874 <tofInit>
	tofGetModel(&model, &revision);
 800257c:	463a      	mov	r2, r7
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff7a 	bl	800247c <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2bee      	cmp	r3, #238	; 0xee
 800258c:	d1e5      	bne.n	800255a <initTof+0x52>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b10      	cmp	r3, #16
 8002592:	d1e2      	bne.n	800255a <initTof+0x52>
	}
	return 1;
 8002594:	2301      	movs	r3, #1
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40010c00 	.word	0x40010c00
 80025a4:	200008a8 	.word	0x200008a8
 80025a8:	40005800 	.word	0x40005800

080025ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a33      	ldr	r2, [pc, #204]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d8:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025de:	f043 0320 	orr.w	r3, r3, #32
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <MX_GPIO_Init+0xe8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <MX_GPIO_Init+0xe8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <MX_GPIO_Init+0xe8>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_GPIO_Init+0xe8>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002620:	2200      	movs	r2, #0
 8002622:	f24f 0120 	movw	r1, #61472	; 0xf020
 8002626:	481c      	ldr	r0, [pc, #112]	; (8002698 <MX_GPIO_Init+0xec>)
 8002628:	f002 fc9c 	bl	8004f64 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800262c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_GPIO_Init+0xf0>)
 8002634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4619      	mov	r1, r3
 8002640:	4817      	ldr	r0, [pc, #92]	; (80026a0 <MX_GPIO_Init+0xf4>)
 8002642:	f002 fa2f 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002646:	f24f 0320 	movw	r3, #61472	; 0xf020
 800264a:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2302      	movs	r3, #2
 8002656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4619      	mov	r1, r3
 800265e:	480e      	ldr	r0, [pc, #56]	; (8002698 <MX_GPIO_Init+0xec>)
 8002660:	f002 fa20 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8002664:	2310      	movs	r3, #16
 8002666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_GPIO_Init+0xf0>)
 800266a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4619      	mov	r1, r3
 8002676:	4808      	ldr	r0, [pc, #32]	; (8002698 <MX_GPIO_Init+0xec>)
 8002678:	f002 fa14 	bl	8004aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	2028      	movs	r0, #40	; 0x28
 8002682:	f002 f896 	bl	80047b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002686:	2028      	movs	r0, #40	; 0x28
 8002688:	f002 f8af 	bl	80047ea <HAL_NVIC_EnableIRQ>

}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	40010c00 	.word	0x40010c00
 800269c:	10110000 	.word	0x10110000
 80026a0:	40011000 	.word	0x40011000

080026a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026aa:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <MX_I2C2_Init+0x54>)
 80026ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <MX_I2C2_Init+0x58>)
 80026b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MX_I2C2_Init+0x50>)
 80026e2:	f002 fc89 	bl	8004ff8 <HAL_I2C_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026ec:	f000 fbf8 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200008a8 	.word	0x200008a8
 80026f8:	40005800 	.word	0x40005800
 80026fc:	000186a0 	.word	0x000186a0

08002700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_I2C_MspInit+0x74>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d124      	bne.n	800276a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_I2C_MspInit+0x78>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_I2C_MspInit+0x78>)
 8002726:	f043 0308 	orr.w	r3, r3, #8
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_I2C_MspInit+0x78>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 8002738:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800273c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273e:	2312      	movs	r3, #18
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4619      	mov	r1, r3
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <HAL_I2C_MspInit+0x7c>)
 800274e:	f002 f9a9 	bl	8004aa4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_I2C_MspInit+0x78>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <HAL_I2C_MspInit+0x78>)
 8002758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800275c:	61d3      	str	r3, [r2, #28]
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_I2C_MspInit+0x78>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800276a:	bf00      	nop
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40005800 	.word	0x40005800
 8002778:	40021000 	.word	0x40021000
 800277c:	40010c00 	.word	0x40010c00

08002780 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_I2C_MspDeInit+0x3c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10f      	bne.n	80027b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_I2C_MspDeInit+0x40>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_I2C_MspDeInit+0x40>)
 8002798:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800279c:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(TOF_SCL_GPIO_Port, TOF_SCL_Pin);
 800279e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a2:	4808      	ldr	r0, [pc, #32]	; (80027c4 <HAL_I2C_MspDeInit+0x44>)
 80027a4:	f002 fb12 	bl	8004dcc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(TOF_SDA_GPIO_Port, TOF_SDA_Pin);
 80027a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_I2C_MspDeInit+0x44>)
 80027ae:	f002 fb0d 	bl	8004dcc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40005800 	.word	0x40005800
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010c00 	.word	0x40010c00

080027c8 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	switch (i)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d827      	bhi.n	8002828 <TurnOffLed+0x60>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <TurnOffLed+0x18>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027ff 	.word	0x080027ff
 80027e8:	0800280d 	.word	0x0800280d
 80027ec:	0800281b 	.word	0x0800281b
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f6:	480e      	ldr	r0, [pc, #56]	; (8002830 <TurnOffLed+0x68>)
 80027f8:	f002 fbb4 	bl	8004f64 <HAL_GPIO_WritePin>
		    break;
 80027fc:	e014      	b.n	8002828 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80027fe:	2200      	movs	r2, #0
 8002800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002804:	480a      	ldr	r0, [pc, #40]	; (8002830 <TurnOffLed+0x68>)
 8002806:	f002 fbad 	bl	8004f64 <HAL_GPIO_WritePin>
			break;
 800280a:	e00d      	b.n	8002828 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002812:	4807      	ldr	r0, [pc, #28]	; (8002830 <TurnOffLed+0x68>)
 8002814:	f002 fba6 	bl	8004f64 <HAL_GPIO_WritePin>
			break;
 8002818:	e006      	b.n	8002828 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002820:	4803      	ldr	r0, [pc, #12]	; (8002830 <TurnOffLed+0x68>)
 8002822:	f002 fb9f 	bl	8004f64 <HAL_GPIO_WritePin>
			break;
 8002826:	bf00      	nop
	}

}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010c00 	.word	0x40010c00

08002834 <SwitchLed>:



void SwitchLed(int i)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	switch (i)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	2b03      	cmp	r3, #3
 8002842:	d823      	bhi.n	800288c <SwitchLed+0x58>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <SwitchLed+0x18>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	0800285d 	.word	0x0800285d
 8002850:	08002869 	.word	0x08002869
 8002854:	08002875 	.word	0x08002875
 8002858:	08002881 	.word	0x08002881
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800285c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002860:	480c      	ldr	r0, [pc, #48]	; (8002894 <SwitchLed+0x60>)
 8002862:	f002 fb97 	bl	8004f94 <HAL_GPIO_TogglePin>
			break;
 8002866:	e011      	b.n	800288c <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8002868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286c:	4809      	ldr	r0, [pc, #36]	; (8002894 <SwitchLed+0x60>)
 800286e:	f002 fb91 	bl	8004f94 <HAL_GPIO_TogglePin>
			break;
 8002872:	e00b      	b.n	800288c <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8002874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002878:	4806      	ldr	r0, [pc, #24]	; (8002894 <SwitchLed+0x60>)
 800287a:	f002 fb8b 	bl	8004f94 <HAL_GPIO_TogglePin>
			break;
 800287e:	e005      	b.n	800288c <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8002880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <SwitchLed+0x60>)
 8002886:	f002 fb85 	bl	8004f94 <HAL_GPIO_TogglePin>
			break;
 800288a:	bf00      	nop
	}

}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40010c00 	.word	0x40010c00

08002898 <LedError>:



void LedError()
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a2:	480b      	ldr	r0, [pc, #44]	; (80028d0 <LedError+0x38>)
 80028a4:	f002 fb5e 	bl	8004f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ae:	4808      	ldr	r0, [pc, #32]	; (80028d0 <LedError+0x38>)
 80028b0:	f002 fb58 	bl	8004f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <LedError+0x38>)
 80028bc:	f002 fb52 	bl	8004f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c6:	4802      	ldr	r0, [pc, #8]	; (80028d0 <LedError+0x38>)
 80028c8:	f002 fb4c 	bl	8004f64 <HAL_GPIO_WritePin>
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40010c00 	.word	0x40010c00

080028d4 <TestSensorOnI2C>:
  * @retval None
  */


void TestSensorOnI2C(int * tab)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	 int u = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 80028e0:	4818      	ldr	r0, [pc, #96]	; (8002944 <TestSensorOnI2C+0x70>)
 80028e2:	f007 f859 	bl	8009998 <puts>
	  for(int i =0; i< 256; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e021      	b.n	8002930 <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i),2,2);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	b299      	uxth	r1, r3
 80028f0:	2302      	movs	r3, #2
 80028f2:	2202      	movs	r2, #2
 80028f4:	4814      	ldr	r0, [pc, #80]	; (8002948 <TestSensorOnI2C+0x74>)
 80028f6:	f003 f851 	bl	800599c <HAL_I2C_IsDeviceReady>
 80028fa:	4603      	mov	r3, r0
 80028fc:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 8002904:	202e      	movs	r0, #46	; 0x2e
 8002906:	f006 ffc5 	bl	8009894 <putchar>
		  }
		  if (result == HAL_OK)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]
			  u++;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 8002922:	6939      	ldr	r1, [r7, #16]
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <TestSensorOnI2C+0x78>)
 8002926:	f006 ff9d 	bl	8009864 <iprintf>
	  for(int i =0; i< 256; i++)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3301      	adds	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	ddda      	ble.n	80028ec <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 8002936:	4806      	ldr	r0, [pc, #24]	; (8002950 <TestSensorOnI2C+0x7c>)
 8002938:	f007 f82e 	bl	8009998 <puts>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	0800d694 	.word	0x0800d694
 8002948:	200008a8 	.word	0x200008a8
 800294c:	0800d6b4 	.word	0x0800d6b4
 8002950:	0800d6bc 	.word	0x0800d6bc

08002954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295a:	f001 fba9 	bl	80040b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800295e:	f000 f87f 	bl	8002a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002962:	f7ff fe23 	bl	80025ac <MX_GPIO_Init>
  MX_TIM3_Init();
 8002966:	f000 ff6f 	bl	8003848 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800296a:	f001 fa83 	bl	8003e74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800296e:	f001 faab 	bl	8003ec8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002972:	f000 fe51 	bl	8003618 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002976:	f000 ff13 	bl	80037a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 800297a:	f001 f82b 	bl	80039d4 <MX_TIM5_Init>
  MX_ADC1_Init();
 800297e:	f7fe fee7 	bl	8001750 <MX_ADC1_Init>
  MX_TIM7_Init();
 8002982:	f001 f8b1 	bl	8003ae8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8002986:	f001 f879 	bl	8003a7c <MX_TIM6_Init>
  MX_TIM4_Init();
 800298a:	f000 ffd5 	bl	8003938 <MX_TIM4_Init>
  MX_I2C2_Init();
 800298e:	f7ff fe89 	bl	80026a4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002992:	2201      	movs	r2, #1
 8002994:	4926      	ldr	r1, [pc, #152]	; (8002a30 <main+0xdc>)
 8002996:	4827      	ldr	r0, [pc, #156]	; (8002a34 <main+0xe0>)
 8002998:	f005 fc5a 	bl	8008250 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 800299c:	2001      	movs	r0, #1
 800299e:	f001 fbe9 	bl	8004174 <HAL_Delay>
  shellInit();
 80029a2:	f000 faa5 	bl	8002ef0 <shellInit>

  HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE);
 80029a6:	2201      	movs	r2, #1
 80029a8:	4923      	ldr	r1, [pc, #140]	; (8002a38 <main+0xe4>)
 80029aa:	4824      	ldr	r0, [pc, #144]	; (8002a3c <main+0xe8>)
 80029ac:	f005 fc50 	bl	8008250 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 80029b0:	2001      	movs	r0, #1
 80029b2:	f001 fbdf 	bl	8004174 <HAL_Delay>

  int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
 80029b6:	463b      	mov	r3, r7
 80029b8:	2220      	movs	r2, #32
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f006 f8db 	bl	8008b78 <memset>
  TestSensorOnI2C(tabI2CAdd);
 80029c2:	463b      	mov	r3, r7
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff85 	bl	80028d4 <TestSensorOnI2C>
  initTof();
 80029ca:	f7ff fd9d 	bl	8002508 <initTof>
  //int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
  //TestSensorOnI2C(tabI2CAdd);

  TurnOffLed(1);
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7ff fefa 	bl	80027c8 <TurnOffLed>
  TurnOffLed(2);
 80029d4:	2002      	movs	r0, #2
 80029d6:	f7ff fef7 	bl	80027c8 <TurnOffLed>
  TurnOffLed(3);
 80029da:	2003      	movs	r0, #3
 80029dc:	f7ff fef4 	bl	80027c8 <TurnOffLed>
  TurnOffLed(4);
 80029e0:	2004      	movs	r0, #4
 80029e2:	f7ff fef1 	bl	80027c8 <TurnOffLed>

  HAL_TIM_Base_Start_IT(&htim3);
 80029e6:	4816      	ldr	r0, [pc, #88]	; (8002a40 <main+0xec>)
 80029e8:	f004 f954 	bl	8006c94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80029ec:	2100      	movs	r1, #0
 80029ee:	4814      	ldr	r0, [pc, #80]	; (8002a40 <main+0xec>)
 80029f0:	f004 fac2 	bl	8006f78 <HAL_TIM_PWM_Start_IT>
  ControlServo(SERVO_CLOSED);
 80029f4:	f44f 7052 	mov.w	r0, #840	; 0x348
 80029f8:	f7fe fe6e 	bl	80016d8 <ControlServo>

  HAL_TIM_Base_Start_IT(&htim6);
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <main+0xf0>)
 80029fe:	f004 f949 	bl	8006c94 <HAL_TIM_Base_Start_IT>
  InitMCC();
 8002a02:	f7fe fbbd 	bl	8001180 <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002a06:	213c      	movs	r1, #60	; 0x3c
 8002a08:	480f      	ldr	r0, [pc, #60]	; (8002a48 <main+0xf4>)
 8002a0a:	f004 fc57 	bl	80072bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002a0e:	213c      	movs	r1, #60	; 0x3c
 8002a10:	480e      	ldr	r0, [pc, #56]	; (8002a4c <main+0xf8>)
 8002a12:	f004 fc53 	bl	80072bc <HAL_TIM_Encoder_Start>

  PIController_Init(&MoteurD);
 8002a16:	480e      	ldr	r0, [pc, #56]	; (8002a50 <main+0xfc>)
 8002a18:	f7fe fcbe 	bl	8001398 <PIController_Init>
  PIController_Init(&MoteurG);
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <main+0x100>)
 8002a1e:	f7fe fcbb 	bl	8001398 <PIController_Init>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 8002a22:	480d      	ldr	r0, [pc, #52]	; (8002a58 <main+0x104>)
 8002a24:	f004 f936 	bl	8006c94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002a28:	480c      	ldr	r0, [pc, #48]	; (8002a5c <main+0x108>)
 8002a2a:	f004 f933 	bl	8006c94 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start)
 8002a2e:	e7fe      	b.n	8002a2e <main+0xda>
 8002a30:	20000bdc 	.word	0x20000bdc
 8002a34:	20000be4 	.word	0x20000be4
 8002a38:	20000be0 	.word	0x20000be0
 8002a3c:	20000c28 	.word	0x20000c28
 8002a40:	20000a74 	.word	0x20000a74
 8002a44:	20000b4c 	.word	0x20000b4c
 8002a48:	20000a2c 	.word	0x20000a2c
 8002a4c:	20000b04 	.word	0x20000b04
 8002a50:	20000924 	.word	0x20000924
 8002a54:	2000094c 	.word	0x2000094c
 8002a58:	20000b94 	.word	0x20000b94
 8002a5c:	20000abc 	.word	0x20000abc

08002a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b096      	sub	sp, #88	; 0x58
 8002a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a6a:	2228      	movs	r2, #40	; 0x28
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f006 f882 	bl	8008b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ab2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ab6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fbc7 	bl	8006250 <HAL_RCC_OscConfig>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002ac8:	f000 fa0a 	bl	8002ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002acc:	230f      	movs	r3, #15
 8002ace:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ae2:	f107 031c 	add.w	r3, r7, #28
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 fe33 	bl	8006754 <HAL_RCC_ClockConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002af4:	f000 f9f4 	bl	8002ee0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002af8:	2302      	movs	r3, #2
 8002afa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b00:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 ffbf 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002b10:	f000 f9e6 	bl	8002ee0 <Error_Handler>
  }
}
 8002b14:	bf00      	nop
 8002b16:	3758      	adds	r7, #88	; 0x58
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002b24:	1d39      	adds	r1, r7, #4
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4803      	ldr	r0, [pc, #12]	; (8002b3c <__io_putchar+0x20>)
 8002b2e:	f005 fafd 	bl	800812c <HAL_UART_Transmit>
	return ch;
 8002b32:	687b      	ldr	r3, [r7, #4]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000be4 	.word	0x20000be4

08002b40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // 50Hz freq lecture TOF
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4aae      	ldr	r2, [pc, #696]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	f000 817b 	beq.w	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
		//TOF_dist = tofReadDistance();//scan
	}



	else if (htim->Instance == TIM7) //Tim 7 1sec pour du printf shell
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4aac      	ldr	r2, [pc, #688]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f000 8175 	beq.w	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
		//printf("ali petit zizi ca rime...je dis ca je dis rien\r\n");
		//TOF_dist = tofReadDistance();//scan
		//printf("distance : %d\r\n", TOF_dist);
	}

	else if (htim->Instance == TIM4) //Delay Tof
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4aaa      	ldr	r2, [pc, #680]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f000 816f 	beq.w	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
		{
		}

	else if (htim->Instance == TIM6) //Tim 6 asserv en vitesse a 0.1sec
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4aa8      	ldr	r2, [pc, #672]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	f040 8168 	bne.w	8002e48 <HAL_TIM_PeriodElapsedCallback+0x308>
		{

		switch(action)
 8002b78:	4ba7      	ldr	r3, [pc, #668]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d127      	bne.n	8002bd0 <HAL_TIM_PeriodElapsedCallback+0x90>
		{
		case TOURNER :
			if(sens)dist -=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002b80:	4ba6      	ldr	r3, [pc, #664]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <HAL_TIM_PeriodElapsedCallback+0x6c>
 8002b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	4ba4      	ldr	r3, [pc, #656]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	4413      	add	r3, r2
 8002b94:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002b98:	3bfe      	subs	r3, #254	; 0xfe
 8002b9a:	0859      	lsrs	r1, r3, #1
 8002b9c:	4ba1      	ldr	r3, [pc, #644]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	b28b      	uxth	r3, r1
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b9f      	ldr	r3, [pc, #636]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ba8:	801a      	strh	r2, [r3, #0]
			else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
			break;
 8002baa:	e020      	b.n	8002bee <HAL_TIM_PeriodElapsedCallback+0xae>
			else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb2:	4b9b      	ldr	r3, [pc, #620]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002bbc:	3bfe      	subs	r3, #254	; 0xfe
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b98      	ldr	r3, [pc, #608]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b96      	ldr	r3, [pc, #600]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002bcc:	801a      	strh	r2, [r3, #0]
			break;
 8002bce:	e00e      	b.n	8002bee <HAL_TIM_PeriodElapsedCallback+0xae>
		default :
			dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ( Mid_Period_TIM5 - (TIM5->CNT)) ) / 2; //on moyenne la valeur
 8002bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd6:	4b92      	ldr	r3, [pc, #584]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b90      	ldr	r3, [pc, #576]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	4b8e      	ldr	r3, [pc, #568]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002bea:	801a      	strh	r2, [r3, #0]
			break;
 8002bec:	bf00      	nop
		}

		  ReadEncodeur();
 8002bee:	f7fe fbad 	bl	800134c <ReadEncodeur>

		  if(consigneD == 0)
 8002bf2:	4b8d      	ldr	r3, [pc, #564]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_TIM_PeriodElapsedCallback+0xc0>
		  {
			  Stop();
 8002bfa:	f7fe fb5d 	bl	80012b8 <Stop>
				break;
			}

		  }
		}
}
 8002bfe:	e124      	b.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
			switch(action)
 8002c00:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	f000 809a 	beq.w	8002d3e <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	f300 80f9 	bgt.w	8002e02 <HAL_TIM_PeriodElapsedCallback+0x2c2>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_TIM_PeriodElapsedCallback+0xda>
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d049      	beq.n	8002cac <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002c18:	e0f3      	b.n	8002e02 <HAL_TIM_PeriodElapsedCallback+0x2c2>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002c1a:	4b83      	ldr	r3, [pc, #524]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f986 	bl	8000f30 <__aeabi_i2f>
 8002c24:	4604      	mov	r4, r0
 8002c26:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	22c8      	movs	r2, #200	; 0xc8
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	4a7f      	ldr	r2, [pc, #508]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002c32:	fb82 1203 	smull	r1, r2, r2, r3
 8002c36:	1152      	asrs	r2, r2, #5
 8002c38:	17db      	asrs	r3, r3, #31
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f977 	bl	8000f30 <__aeabi_i2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	4621      	mov	r1, r4
 8002c48:	487a      	ldr	r0, [pc, #488]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c4a:	f7fe fbe3 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f96c 	bl	8000f30 <__aeabi_i2f>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	22c8      	movs	r2, #200	; 0xc8
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	4a76      	ldr	r2, [pc, #472]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002c66:	fb82 1203 	smull	r1, r2, r2, r3
 8002c6a:	1112      	asrs	r2, r2, #4
 8002c6c:	17db      	asrs	r3, r3, #31
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe f95d 	bl	8000f30 <__aeabi_i2f>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	4871      	ldr	r0, [pc, #452]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c7e:	f7fe fbc9 	bl	8001414 <PIController_Update>
				AvancerPI(0, MoteurD.out);
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fa1c 	bl	80010c4 <__aeabi_f2iz>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fe faab 	bl	80011ec <AvancerPI>
				AvancerPI(1, MoteurG.out);
 8002c96:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fa12 	bl	80010c4 <__aeabi_f2iz>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7fe faa1 	bl	80011ec <AvancerPI>
				break;
 8002caa:	e0ce      	b.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002cac:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe f93d 	bl	8000f30 <__aeabi_i2f>
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	22c8      	movs	r2, #200	; 0xc8
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc8:	1152      	asrs	r2, r2, #5
 8002cca:	17db      	asrs	r3, r3, #31
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f92e 	bl	8000f30 <__aeabi_i2f>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4621      	mov	r1, r4
 8002cda:	4856      	ldr	r0, [pc, #344]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002cdc:	f7fe fb9a 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002ce0:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f923 	bl	8000f30 <__aeabi_i2f>
 8002cea:	4604      	mov	r4, r0
 8002cec:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	22c8      	movs	r2, #200	; 0xc8
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfc:	1112      	asrs	r2, r2, #4
 8002cfe:	17db      	asrs	r3, r3, #31
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f914 	bl	8000f30 <__aeabi_i2f>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	484d      	ldr	r0, [pc, #308]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002d10:	f7fe fb80 	bl	8001414 <PIController_Update>
				ReculerPI(0, MoteurD.out);
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe f9d3 	bl	80010c4 <__aeabi_f2iz>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fe faa4 	bl	8001270 <ReculerPI>
				ReculerPI(1, MoteurG.out);
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe f9c9 	bl	80010c4 <__aeabi_f2iz>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4619      	mov	r1, r3
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7fe fa9a 	bl	8001270 <ReculerPI>
				break;
 8002d3c:	e085      	b.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe f8f4 	bl	8000f30 <__aeabi_i2f>
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	22c8      	movs	r2, #200	; 0xc8
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	4a36      	ldr	r2, [pc, #216]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d56:	fb82 1203 	smull	r1, r2, r2, r3
 8002d5a:	1152      	asrs	r2, r2, #5
 8002d5c:	17db      	asrs	r3, r3, #31
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f8e5 	bl	8000f30 <__aeabi_i2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	4831      	ldr	r0, [pc, #196]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d6e:	f7fe fb51 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe f8da 	bl	8000f30 <__aeabi_i2f>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	22c8      	movs	r2, #200	; 0xc8
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d8e:	1112      	asrs	r2, r2, #4
 8002d90:	17db      	asrs	r3, r3, #31
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe f8cb 	bl	8000f30 <__aeabi_i2f>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4828      	ldr	r0, [pc, #160]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002da2:	f7fe fb37 	bl	8001414 <PIController_Update>
				if(sens)
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d014      	beq.n	8002dd8 <HAL_TIM_PeriodElapsedCallback+0x298>
					ReculerPI(0, MoteurD.out);
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f986 	bl	80010c4 <__aeabi_f2iz>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe fa57 	bl	8001270 <ReculerPI>
					AvancerPI(1, MoteurG.out);
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f97c 	bl	80010c4 <__aeabi_f2iz>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7fe fa0b 	bl	80011ec <AvancerPI>
				break;
 8002dd6:	e038      	b.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
					AvancerPI(0, MoteurD.out);
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe f971 	bl	80010c4 <__aeabi_f2iz>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe fa00 	bl	80011ec <AvancerPI>
					ReculerPI(1, MoteurG.out);
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f967 	bl	80010c4 <__aeabi_f2iz>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f7fe fa38 	bl	8001270 <ReculerPI>
				break;
 8002e00:	e023      	b.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
				Stop();
 8002e02:	f7fe fa59 	bl	80012b8 <Stop>
				break;
 8002e06:	e020      	b.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x30a>
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40001400 	.word	0x40001400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40001000 	.word	0x40001000
 8002e18:	2000010c 	.word	0x2000010c
 8002e1c:	20000918 	.word	0x20000918
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	200008fc 	.word	0x200008fc
 8002e28:	2000090c 	.word	0x2000090c
 8002e2c:	20000908 	.word	0x20000908
 8002e30:	3531dec1 	.word	0x3531dec1
 8002e34:	20000924 	.word	0x20000924
 8002e38:	20000914 	.word	0x20000914
 8002e3c:	20000910 	.word	0x20000910
 8002e40:	19c2d14f 	.word	0x19c2d14f
 8002e44:	2000094c 	.word	0x2000094c
		  }
 8002e48:	bf00      	nop
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	bf00      	nop

08002e54 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
	//enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
	Debut_Test();
 8002e5e:	f7fe fc55 	bl	800170c <Debut_Test>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_UART_RxCpltCallback+0x5c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10e      	bne.n	8002e9c <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4912      	ldr	r1, [pc, #72]	; (8002ecc <HAL_UART_RxCpltCallback+0x60>)
 8002e82:	4813      	ldr	r0, [pc, #76]	; (8002ed0 <HAL_UART_RxCpltCallback+0x64>)
 8002e84:	f005 f9e4 	bl	8008250 <HAL_UART_Receive_IT>
		if(shellGetChar())
 8002e88:	f000 f86a 	bl	8002f60 <shellGetChar>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_UART_RxCpltCallback+0x52>
		{
		  shellExec();
 8002e92:	f000 f8d9 	bl	8003048 <shellExec>
		  shellPrompt();
 8002e96:	f000 f843 	bl	8002f20 <shellPrompt>
		if(raspGetChar())
		{
			raspExec();
		}
	}
}
 8002e9a:	e010      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x52>
	else if(huart->Instance == USART2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <HAL_UART_RxCpltCallback+0x68>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10b      	bne.n	8002ebe <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	490b      	ldr	r1, [pc, #44]	; (8002ed8 <HAL_UART_RxCpltCallback+0x6c>)
 8002eaa:	480c      	ldr	r0, [pc, #48]	; (8002edc <HAL_UART_RxCpltCallback+0x70>)
 8002eac:	f005 f9d0 	bl	8008250 <HAL_UART_Receive_IT>
		if(raspGetChar())
 8002eb0:	f7fe fb5c 	bl	800156c <raspGetChar>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_RxCpltCallback+0x52>
			raspExec();
 8002eba:	f7fe fbc5 	bl	8001648 <raspExec>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	20000bdc 	.word	0x20000bdc
 8002ed0:	20000be4 	.word	0x20000be4
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	20000be0 	.word	0x20000be0
 8002edc:	20000c28 	.word	0x20000c28

08002ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee4:	b672      	cpsid	i
}
 8002ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8002ee8:	f7ff fcd6 	bl	8002898 <LedError>
  while (1)
 8002eec:	e7fe      	b.n	8002eec <Error_Handler+0xc>
	...

08002ef0 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	226c      	movs	r2, #108	; 0x6c
 8002efa:	4906      	ldr	r1, [pc, #24]	; (8002f14 <shellInit+0x24>)
 8002efc:	4806      	ldr	r0, [pc, #24]	; (8002f18 <shellInit+0x28>)
 8002efe:	f005 f915 	bl	800812c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	220a      	movs	r2, #10
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <shellInit+0x2c>)
 8002f0a:	4803      	ldr	r0, [pc, #12]	; (8002f18 <shellInit+0x28>)
 8002f0c:	f005 f90e 	bl	800812c <HAL_UART_Transmit>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000011c 	.word	0x2000011c
 8002f18:	20000be4 	.word	0x20000be4
 8002f1c:	20000110 	.word	0x20000110

08002f20 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	220a      	movs	r2, #10
 8002f2a:	4903      	ldr	r1, [pc, #12]	; (8002f38 <shellPrompt+0x18>)
 8002f2c:	4803      	ldr	r0, [pc, #12]	; (8002f3c <shellPrompt+0x1c>)
 8002f2e:	f005 f8fd 	bl	800812c <HAL_UART_Transmit>
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000110 	.word	0x20000110
 8002f3c:	20000be4 	.word	0x20000be4

08002f40 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	2214      	movs	r2, #20
 8002f4a:	4903      	ldr	r1, [pc, #12]	; (8002f58 <shellCmdNotFound+0x18>)
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <shellCmdNotFound+0x1c>)
 8002f4e:	f005 f8ed 	bl	800812c <HAL_UART_Transmit>
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200005f0 	.word	0x200005f0
 8002f5c:	20000be4 	.word	0x20000be4

08002f60 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8002f6a:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <shellGetChar+0xc8>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d030      	beq.n	8002fd4 <shellGetChar+0x74>
 8002f72:	2b0d      	cmp	r3, #13
 8002f74:	d140      	bne.n	8002ff8 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	492b      	ldr	r1, [pc, #172]	; (800302c <shellGetChar+0xcc>)
 8002f7e:	482c      	ldr	r0, [pc, #176]	; (8003030 <shellGetChar+0xd0>)
 8002f80:	f005 f8d4 	bl	800812c <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <shellGetChar+0xd4>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <shellGetChar+0xd8>)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <shellGetChar+0xdc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8002f96:	492a      	ldr	r1, [pc, #168]	; (8003040 <shellGetChar+0xe0>)
 8002f98:	4827      	ldr	r0, [pc, #156]	; (8003038 <shellGetChar+0xd8>)
 8002f9a:	f007 fb3b 	bl	800a614 <strtok>
 8002f9e:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8002fa0:	e00f      	b.n	8002fc2 <shellGetChar+0x62>
			argv[argc++] = token;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <shellGetChar+0xdc>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	b2d1      	uxtb	r1, r2
 8002faa:	4a24      	ldr	r2, [pc, #144]	; (800303c <shellGetChar+0xdc>)
 8002fac:	7011      	strb	r1, [r2, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <shellGetChar+0xe4>)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8002fb8:	4921      	ldr	r1, [pc, #132]	; (8003040 <shellGetChar+0xe0>)
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f007 fb2a 	bl	800a614 <strtok>
 8002fc0:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ec      	bne.n	8002fa2 <shellGetChar+0x42>
		}

		idxCmd = 0;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <shellGetChar+0xd4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	71fb      	strb	r3, [r7, #7]
		break;
 8002fd2:	e023      	b.n	800301c <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <shellGetChar+0xd4>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	b2d1      	uxtb	r1, r2
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <shellGetChar+0xd4>)
 8002fde:	7011      	strb	r1, [r2, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <shellGetChar+0xd8>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fec:	2201      	movs	r2, #1
 8002fee:	490e      	ldr	r1, [pc, #56]	; (8003028 <shellGetChar+0xc8>)
 8002ff0:	480f      	ldr	r0, [pc, #60]	; (8003030 <shellGetChar+0xd0>)
 8002ff2:	f005 f89b 	bl	800812c <HAL_UART_Transmit>
		break;
 8002ff6:	e011      	b.n	800301c <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <shellGetChar+0xd4>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	b2d1      	uxtb	r1, r2
 8003000:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <shellGetChar+0xd4>)
 8003002:	7011      	strb	r1, [r2, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <shellGetChar+0xc8>)
 8003008:	7819      	ldrb	r1, [r3, #0]
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <shellGetChar+0xd8>)
 800300c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	2201      	movs	r2, #1
 8003014:	4904      	ldr	r1, [pc, #16]	; (8003028 <shellGetChar+0xc8>)
 8003016:	4806      	ldr	r0, [pc, #24]	; (8003030 <shellGetChar+0xd0>)
 8003018:	f005 f888 	bl	800812c <HAL_UART_Transmit>
	}

	return newCmdReady;
 800301c:	79fb      	ldrb	r3, [r7, #7]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000bdc 	.word	0x20000bdc
 800302c:	20000188 	.word	0x20000188
 8003030:	20000be4 	.word	0x20000be4
 8003034:	200009b4 	.word	0x200009b4
 8003038:	20000974 	.word	0x20000974
 800303c:	200009dc 	.word	0x200009dc
 8003040:	0800d6dc 	.word	0x0800d6dc
 8003044:	200009b8 	.word	0x200009b8

08003048 <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 8003048:	b598      	push	{r3, r4, r7, lr}
 800304a:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 800304c:	4ba4      	ldr	r3, [pc, #656]	; (80032e0 <shellExec+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	49a4      	ldr	r1, [pc, #656]	; (80032e4 <shellExec+0x29c>)
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd f8e8 	bl	8000228 <strcmp>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	f240 2231 	movw	r2, #561	; 0x231
 8003066:	49a0      	ldr	r1, [pc, #640]	; (80032e8 <shellExec+0x2a0>)
 8003068:	48a0      	ldr	r0, [pc, #640]	; (80032ec <shellExec+0x2a4>)
 800306a:	f005 f85f 	bl	800812c <HAL_UART_Transmit>

	else{
		shellCmdNotFound();
	}

}
 800306e:	e134      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"RTFM")==0)
 8003070:	4b9b      	ldr	r3, [pc, #620]	; (80032e0 <shellExec+0x298>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	499e      	ldr	r1, [pc, #632]	; (80032f0 <shellExec+0x2a8>)
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd f8d6 	bl	8000228 <strcmp>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800308a:	499a      	ldr	r1, [pc, #616]	; (80032f4 <shellExec+0x2ac>)
 800308c:	4897      	ldr	r0, [pc, #604]	; (80032ec <shellExec+0x2a4>)
 800308e:	f005 f84d 	bl	800812c <HAL_UART_Transmit>
}
 8003092:	e122      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"led")==0)
 8003094:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <shellExec+0x298>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4997      	ldr	r1, [pc, #604]	; (80032f8 <shellExec+0x2b0>)
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd f8c4 	bl	8000228 <strcmp>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d110      	bne.n	80030c8 <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	2222      	movs	r2, #34	; 0x22
 80030ac:	4993      	ldr	r1, [pc, #588]	; (80032fc <shellExec+0x2b4>)
 80030ae:	488f      	ldr	r0, [pc, #572]	; (80032ec <shellExec+0x2a4>)
 80030b0:	f005 f83c 	bl	800812c <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 80030b4:	4b8a      	ldr	r3, [pc, #552]	; (80032e0 <shellExec+0x298>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 fd21 	bl	8008b00 <atoi>
 80030be:	4603      	mov	r3, r0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fbb7 	bl	8002834 <SwitchLed>
}
 80030c6:	e108      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"avancer")==0)
 80030c8:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <shellExec+0x298>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	498c      	ldr	r1, [pc, #560]	; (8003300 <shellExec+0x2b8>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd f8aa 	bl	8000228 <strcmp>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d110      	bne.n	80030fc <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 80030da:	f04f 33ff 	mov.w	r3, #4294967295
 80030de:	2225      	movs	r2, #37	; 0x25
 80030e0:	4988      	ldr	r1, [pc, #544]	; (8003304 <shellExec+0x2bc>)
 80030e2:	4882      	ldr	r0, [pc, #520]	; (80032ec <shellExec+0x2a4>)
 80030e4:	f005 f822 	bl	800812c <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 80030e8:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <shellExec+0x298>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 fd07 	bl	8008b00 <atoi>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe f85b 	bl	80011b0 <Avancer>
}
 80030fa:	e0ee      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"reculer")==0)
 80030fc:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <shellExec+0x298>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4981      	ldr	r1, [pc, #516]	; (8003308 <shellExec+0x2c0>)
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd f890 	bl	8000228 <strcmp>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d110      	bne.n	8003130 <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	2227      	movs	r2, #39	; 0x27
 8003114:	497d      	ldr	r1, [pc, #500]	; (800330c <shellExec+0x2c4>)
 8003116:	4875      	ldr	r0, [pc, #468]	; (80032ec <shellExec+0x2a4>)
 8003118:	f005 f808 	bl	800812c <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 800311c:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <shellExec+0x298>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f005 fced 	bl	8008b00 <atoi>
 8003126:	4603      	mov	r3, r0
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe f883 	bl	8001234 <Reculer>
}
 800312e:	e0d4      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"stop")==0)
 8003130:	4b6b      	ldr	r3, [pc, #428]	; (80032e0 <shellExec+0x298>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4976      	ldr	r1, [pc, #472]	; (8003310 <shellExec+0x2c8>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f876 	bl	8000228 <strcmp>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	2216      	movs	r2, #22
 8003148:	4972      	ldr	r1, [pc, #456]	; (8003314 <shellExec+0x2cc>)
 800314a:	4868      	ldr	r0, [pc, #416]	; (80032ec <shellExec+0x2a4>)
 800314c:	f004 ffee 	bl	800812c <HAL_UART_Transmit>
		Stop();
 8003150:	f7fe f8b2 	bl	80012b8 <Stop>
}
 8003154:	e0c1      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"tourner")==0)
 8003156:	4b62      	ldr	r3, [pc, #392]	; (80032e0 <shellExec+0x298>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	496f      	ldr	r1, [pc, #444]	; (8003318 <shellExec+0x2d0>)
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f863 	bl	8000228 <strcmp>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12a      	bne.n	80031be <shellExec+0x176>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 8003168:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <shellExec+0x298>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	496b      	ldr	r1, [pc, #428]	; (800331c <shellExec+0x2d4>)
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f85a 	bl	8000228 <strcmp>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <shellExec+0x146>
 800317a:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <shellExec+0x298>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4968      	ldr	r1, [pc, #416]	; (8003320 <shellExec+0x2d8>)
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f851 	bl	8000228 <strcmp>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a6 	beq.w	80032da <shellExec+0x292>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	2230      	movs	r2, #48	; 0x30
 8003194:	4963      	ldr	r1, [pc, #396]	; (8003324 <shellExec+0x2dc>)
 8003196:	4855      	ldr	r0, [pc, #340]	; (80032ec <shellExec+0x2a4>)
 8003198:	f004 ffc8 	bl	800812c <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <shellExec+0x298>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f005 fcad 	bl	8008b00 <atoi>
 80031a6:	4604      	mov	r4, r0
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <shellExec+0x298>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f005 fca7 	bl	8008b00 <atoi>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7fe f892 	bl	80012e0 <Tourner>
}
 80031bc:	e08d      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"avancerPI")==0)
 80031be:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <shellExec+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4959      	ldr	r1, [pc, #356]	; (8003328 <shellExec+0x2e0>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f82f 	bl	8000228 <strcmp>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d117      	bne.n	8003200 <shellExec+0x1b8>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	2225      	movs	r2, #37	; 0x25
 80031d6:	494b      	ldr	r1, [pc, #300]	; (8003304 <shellExec+0x2bc>)
 80031d8:	4844      	ldr	r0, [pc, #272]	; (80032ec <shellExec+0x2a4>)
 80031da:	f004 ffa7 	bl	800812c <HAL_UART_Transmit>
		consigneD = atoi(argv[1]);
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <shellExec+0x298>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fc8c 	bl	8008b00 <atoi>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4a50      	ldr	r2, [pc, #320]	; (800332c <shellExec+0x2e4>)
 80031ec:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[1]);
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <shellExec+0x298>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 fc84 	bl	8008b00 <atoi>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a4d      	ldr	r2, [pc, #308]	; (8003330 <shellExec+0x2e8>)
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	e06c      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"actionPI")==0)
 8003200:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <shellExec+0x298>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	494b      	ldr	r1, [pc, #300]	; (8003334 <shellExec+0x2ec>)
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f80e 	bl	8000228 <strcmp>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d12b      	bne.n	800326a <shellExec+0x222>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	2225      	movs	r2, #37	; 0x25
 8003218:	493a      	ldr	r1, [pc, #232]	; (8003304 <shellExec+0x2bc>)
 800321a:	4834      	ldr	r0, [pc, #208]	; (80032ec <shellExec+0x2a4>)
 800321c:	f004 ff86 	bl	800812c <HAL_UART_Transmit>
		action = atoi(argv[1]);
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <shellExec+0x298>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f005 fc6b 	bl	8008b00 <atoi>
 800322a:	4603      	mov	r3, r0
 800322c:	4a42      	ldr	r2, [pc, #264]	; (8003338 <shellExec+0x2f0>)
 800322e:	6013      	str	r3, [r2, #0]
		if(action ==2) sens = atoi(argv[3]);
 8003230:	4b41      	ldr	r3, [pc, #260]	; (8003338 <shellExec+0x2f0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d107      	bne.n	8003248 <shellExec+0x200>
 8003238:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <shellExec+0x298>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4618      	mov	r0, r3
 800323e:	f005 fc5f 	bl	8008b00 <atoi>
 8003242:	4603      	mov	r3, r0
 8003244:	4a3d      	ldr	r2, [pc, #244]	; (800333c <shellExec+0x2f4>)
 8003246:	6013      	str	r3, [r2, #0]
		consigneD = atoi(argv[2]);
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <shellExec+0x298>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f005 fc57 	bl	8008b00 <atoi>
 8003252:	4603      	mov	r3, r0
 8003254:	4a35      	ldr	r2, [pc, #212]	; (800332c <shellExec+0x2e4>)
 8003256:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[2]);
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <shellExec+0x298>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f005 fc4f 	bl	8008b00 <atoi>
 8003262:	4603      	mov	r3, r0
 8003264:	4a32      	ldr	r2, [pc, #200]	; (8003330 <shellExec+0x2e8>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	e037      	b.n	80032da <shellExec+0x292>
	else if(strcmp(argv[0],"servo")==0)
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <shellExec+0x298>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4934      	ldr	r1, [pc, #208]	; (8003340 <shellExec+0x2f8>)
 8003270:	4618      	mov	r0, r3
 8003272:	f7fc ffd9 	bl	8000228 <strcmp>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12c      	bne.n	80032d6 <shellExec+0x28e>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 800327c:	f04f 33ff 	mov.w	r3, #4294967295
 8003280:	2217      	movs	r2, #23
 8003282:	4930      	ldr	r1, [pc, #192]	; (8003344 <shellExec+0x2fc>)
 8003284:	4819      	ldr	r0, [pc, #100]	; (80032ec <shellExec+0x2a4>)
 8003286:	f004 ff51 	bl	800812c <HAL_UART_Transmit>
		if(strcmp(argv[1],"ouvert")==0)
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <shellExec+0x298>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	492e      	ldr	r1, [pc, #184]	; (8003348 <shellExec+0x300>)
 8003290:	4618      	mov	r0, r3
 8003292:	f7fc ffc9 	bl	8000228 <strcmp>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <shellExec+0x25e>
			ControlServo(SERVO_OPEN);
 800329c:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80032a0:	f7fe fa1a 	bl	80016d8 <ControlServo>
}
 80032a4:	e019      	b.n	80032da <shellExec+0x292>
		else if(strcmp(argv[1],"ferme")==0)
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <shellExec+0x298>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4928      	ldr	r1, [pc, #160]	; (800334c <shellExec+0x304>)
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fc ffbb 	bl	8000228 <strcmp>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <shellExec+0x27a>
			ControlServo(SERVO_CLOSED);
 80032b8:	f44f 7052 	mov.w	r0, #840	; 0x348
 80032bc:	f7fe fa0c 	bl	80016d8 <ControlServo>
}
 80032c0:	e00b      	b.n	80032da <shellExec+0x292>
		else ControlServo(atoi(argv[1]));
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <shellExec+0x298>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f005 fc1a 	bl	8008b00 <atoi>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fa02 	bl	80016d8 <ControlServo>
}
 80032d4:	e001      	b.n	80032da <shellExec+0x292>
		shellCmdNotFound();
 80032d6:	f7ff fe33 	bl	8002f40 <shellCmdNotFound>
}
 80032da:	bf00      	nop
 80032dc:	bd98      	pop	{r3, r4, r7, pc}
 80032de:	bf00      	nop
 80032e0:	200009b8 	.word	0x200009b8
 80032e4:	0800d6e0 	.word	0x0800d6e0
 80032e8:	2000018c 	.word	0x2000018c
 80032ec:	20000be4 	.word	0x20000be4
 80032f0:	0800d6e8 	.word	0x0800d6e8
 80032f4:	200003c0 	.word	0x200003c0
 80032f8:	0800d6f0 	.word	0x0800d6f0
 80032fc:	2000051c 	.word	0x2000051c
 8003300:	0800d6f4 	.word	0x0800d6f4
 8003304:	20000540 	.word	0x20000540
 8003308:	0800d6fc 	.word	0x0800d6fc
 800330c:	20000568 	.word	0x20000568
 8003310:	0800d704 	.word	0x0800d704
 8003314:	20000590 	.word	0x20000590
 8003318:	0800d70c 	.word	0x0800d70c
 800331c:	0800d714 	.word	0x0800d714
 8003320:	0800d718 	.word	0x0800d718
 8003324:	200005a8 	.word	0x200005a8
 8003328:	0800d71c 	.word	0x0800d71c
 800332c:	2000090c 	.word	0x2000090c
 8003330:	20000914 	.word	0x20000914
 8003334:	0800d728 	.word	0x0800d728
 8003338:	2000010c 	.word	0x2000010c
 800333c:	20000918 	.word	0x20000918
 8003340:	0800d734 	.word	0x0800d734
 8003344:	200005d8 	.word	0x200005d8
 8003348:	0800d73c 	.word	0x0800d73c
 800334c:	0800d744 	.word	0x0800d744

08003350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_MspInit+0x5c>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <HAL_MspInit+0x5c>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6193      	str	r3, [r2, #24]
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_MspInit+0x5c>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <HAL_MspInit+0x5c>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <HAL_MspInit+0x5c>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_MspInit+0x5c>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_MspInit+0x60>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_MspInit+0x60>)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40010000 	.word	0x40010000

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <NMI_Handler+0x4>

080033ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <HardFault_Handler+0x4>

080033c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <MemManage_Handler+0x4>

080033c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <BusFault_Handler+0x4>

080033cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <UsageFault_Handler+0x4>

080033d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033fa:	f000 fe9f 	bl	800413c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <TIM1_UP_IRQHandler+0x10>)
 800340a:	f003 ffe5 	bl	80073d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200009e4 	.word	0x200009e4

08003418 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <TIM4_IRQHandler+0x10>)
 800341e:	f003 ffdb 	bl	80073d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000abc 	.word	0x20000abc

0800342c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <USART1_IRQHandler+0x10>)
 8003432:	f004 ff3d 	bl	80082b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000be4 	.word	0x20000be4

08003440 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <USART2_IRQHandler+0x10>)
 8003446:	f004 ff33 	bl	80082b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000c28 	.word	0x20000c28

08003454 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8003458:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800345c:	f001 fdb4 	bl	8004fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}

08003464 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <TIM6_IRQHandler+0x10>)
 800346a:	f003 ffb5 	bl	80073d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000b4c 	.word	0x20000b4c

08003478 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <TIM7_IRQHandler+0x10>)
 800347e:	f003 ffab 	bl	80073d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000b94 	.word	0x20000b94

0800348c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
	return 1;
 8003490:	2301      	movs	r3, #1
}
 8003492:	4618      	mov	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <_kill>:

int _kill(int pid, int sig)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034a4:	f005 fb30 	bl	8008b08 <__errno>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2216      	movs	r2, #22
 80034ac:	601a      	str	r2, [r3, #0]
	return -1;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <_exit>:

void _exit (int status)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034c2:	f04f 31ff 	mov.w	r1, #4294967295
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ffe7 	bl	800349a <_kill>
	while (1) {}		/* Make sure we hang here */
 80034cc:	e7fe      	b.n	80034cc <_exit+0x12>

080034ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e00a      	b.n	80034f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034e0:	f3af 8000 	nop.w
 80034e4:	4601      	mov	r1, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	60ba      	str	r2, [r7, #8]
 80034ec:	b2ca      	uxtb	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3301      	adds	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	dbf0      	blt.n	80034e0 <_read+0x12>
	}

return len;
 80034fe:	687b      	ldr	r3, [r7, #4]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e009      	b.n	800352e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	60ba      	str	r2, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fafa 	bl	8002b1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	dbf1      	blt.n	800351a <_write+0x12>
	}
	return len;
 8003536:	687b      	ldr	r3, [r7, #4]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_close>:

int _close(int file)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003566:	605a      	str	r2, [r3, #4]
	return 0;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <_isatty>:

int _isatty(int file)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	return 1;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
	return 0;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <_sbrk+0x5c>)
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <_sbrk+0x60>)
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <_sbrk+0x64>)
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <_sbrk+0x68>)
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <_sbrk+0x64>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d207      	bcs.n	80035e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d0:	f005 fa9a 	bl	8008b08 <__errno>
 80035d4:	4603      	mov	r3, r0
 80035d6:	220c      	movs	r2, #12
 80035d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	e009      	b.n	80035f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <_sbrk+0x64>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	4a05      	ldr	r2, [pc, #20]	; (8003604 <_sbrk+0x64>)
 80035f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000c000 	.word	0x2000c000
 8003600:	00000400 	.word	0x00000400
 8003604:	200009e0 	.word	0x200009e0
 8003608:	20000c80 	.word	0x20000c80

0800360c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b096      	sub	sp, #88	; 0x58
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800361e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800362c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	615a      	str	r2, [r3, #20]
 8003648:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	2220      	movs	r2, #32
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fa91 	bl	8008b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003656:	4b50      	ldr	r3, [pc, #320]	; (8003798 <MX_TIM1_Init+0x180>)
 8003658:	4a50      	ldr	r2, [pc, #320]	; (800379c <MX_TIM1_Init+0x184>)
 800365a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 800365c:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <MX_TIM1_Init+0x180>)
 800365e:	2211      	movs	r2, #17
 8003660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003662:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <MX_TIM1_Init+0x180>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <MX_TIM1_Init+0x180>)
 800366a:	22c7      	movs	r2, #199	; 0xc7
 800366c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <MX_TIM1_Init+0x180>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003674:	4b48      	ldr	r3, [pc, #288]	; (8003798 <MX_TIM1_Init+0x180>)
 8003676:	2200      	movs	r2, #0
 8003678:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <MX_TIM1_Init+0x180>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003680:	4845      	ldr	r0, [pc, #276]	; (8003798 <MX_TIM1_Init+0x180>)
 8003682:	f003 fab7 	bl	8006bf4 <HAL_TIM_Base_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800368c:	f7ff fc28 	bl	8002ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800369a:	4619      	mov	r1, r3
 800369c:	483e      	ldr	r0, [pc, #248]	; (8003798 <MX_TIM1_Init+0x180>)
 800369e:	f004 f861 	bl	8007764 <HAL_TIM_ConfigClockSource>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80036a8:	f7ff fc1a 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036ac:	483a      	ldr	r0, [pc, #232]	; (8003798 <MX_TIM1_Init+0x180>)
 80036ae:	f003 fb51 	bl	8006d54 <HAL_TIM_PWM_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80036b8:	f7ff fc12 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036bc:	2300      	movs	r3, #0
 80036be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036c8:	4619      	mov	r1, r3
 80036ca:	4833      	ldr	r0, [pc, #204]	; (8003798 <MX_TIM1_Init+0x180>)
 80036cc:	f004 fc12 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80036d6:	f7ff fc03 	bl	8002ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036da:	2360      	movs	r3, #96	; 0x60
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036e2:	2300      	movs	r3, #0
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036e6:	2300      	movs	r3, #0
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fa:	2200      	movs	r2, #0
 80036fc:	4619      	mov	r1, r3
 80036fe:	4826      	ldr	r0, [pc, #152]	; (8003798 <MX_TIM1_Init+0x180>)
 8003700:	f003 ff72 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800370a:	f7ff fbe9 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800370e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003712:	2204      	movs	r2, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4820      	ldr	r0, [pc, #128]	; (8003798 <MX_TIM1_Init+0x180>)
 8003718:	f003 ff66 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003722:	f7ff fbdd 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800372a:	2208      	movs	r2, #8
 800372c:	4619      	mov	r1, r3
 800372e:	481a      	ldr	r0, [pc, #104]	; (8003798 <MX_TIM1_Init+0x180>)
 8003730:	f003 ff5a 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800373a:	f7ff fbd1 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	220c      	movs	r2, #12
 8003744:	4619      	mov	r1, r3
 8003746:	4814      	ldr	r0, [pc, #80]	; (8003798 <MX_TIM1_Init+0x180>)
 8003748:	f003 ff4e 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003752:	f7ff fbc5 	bl	8002ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800376a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800376e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4807      	ldr	r0, [pc, #28]	; (8003798 <MX_TIM1_Init+0x180>)
 800377a:	f004 fc27 	bl	8007fcc <HAL_TIMEx_ConfigBreakDeadTime>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003784:	f7ff fbac 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003788:	4803      	ldr	r0, [pc, #12]	; (8003798 <MX_TIM1_Init+0x180>)
 800378a:	f000 fb09 	bl	8003da0 <HAL_TIM_MspPostInit>

}
 800378e:	bf00      	nop
 8003790:	3758      	adds	r7, #88	; 0x58
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200009e4 	.word	0x200009e4
 800379c:	40012c00 	.word	0x40012c00

080037a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037a6:	f107 030c 	add.w	r3, r7, #12
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f005 f9e2 	bl	8008b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <MX_TIM2_Init+0xa4>)
 80037be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <MX_TIM2_Init+0xa4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <MX_TIM2_Init+0xa4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <MX_TIM2_Init+0xa4>)
 80037d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <MX_TIM2_Init+0xa4>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <MX_TIM2_Init+0xa4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037f8:	2300      	movs	r3, #0
 80037fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037fc:	2301      	movs	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4619      	mov	r1, r3
 800380e:	480d      	ldr	r0, [pc, #52]	; (8003844 <MX_TIM2_Init+0xa4>)
 8003810:	f003 fcb2 	bl	8007178 <HAL_TIM_Encoder_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800381a:	f7ff fb61 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4806      	ldr	r0, [pc, #24]	; (8003844 <MX_TIM2_Init+0xa4>)
 800382c:	f004 fb62 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003836:	f7ff fb53 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800383a:	bf00      	nop
 800383c:	3730      	adds	r7, #48	; 0x30
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000a2c 	.word	0x20000a2c

08003848 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08e      	sub	sp, #56	; 0x38
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385c:	f107 0320 	add.w	r3, r7, #32
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
 8003874:	615a      	str	r2, [r3, #20]
 8003876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003878:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <MX_TIM3_Init+0xe8>)
 800387a:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <MX_TIM3_Init+0xec>)
 800387c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <MX_TIM3_Init+0xe8>)
 8003880:	2247      	movs	r2, #71	; 0x47
 8003882:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <MX_TIM3_Init+0xe8>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <MX_TIM3_Init+0xe8>)
 800388c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <MX_TIM3_Init+0xe8>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <MX_TIM3_Init+0xe8>)
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800389e:	4824      	ldr	r0, [pc, #144]	; (8003930 <MX_TIM3_Init+0xe8>)
 80038a0:	f003 f9a8 	bl	8006bf4 <HAL_TIM_Base_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80038aa:	f7ff fb19 	bl	8002ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b8:	4619      	mov	r1, r3
 80038ba:	481d      	ldr	r0, [pc, #116]	; (8003930 <MX_TIM3_Init+0xe8>)
 80038bc:	f003 ff52 	bl	8007764 <HAL_TIM_ConfigClockSource>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80038c6:	f7ff fb0b 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <MX_TIM3_Init+0xe8>)
 80038cc:	f003 fa42 	bl	8006d54 <HAL_TIM_PWM_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80038d6:	f7ff fb03 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038e2:	f107 0320 	add.w	r3, r7, #32
 80038e6:	4619      	mov	r1, r3
 80038e8:	4811      	ldr	r0, [pc, #68]	; (8003930 <MX_TIM3_Init+0xe8>)
 80038ea:	f004 fb03 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80038f4:	f7ff faf4 	bl	8002ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038f8:	2360      	movs	r3, #96	; 0x60
 80038fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 80038fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	2200      	movs	r2, #0
 800390e:	4619      	mov	r1, r3
 8003910:	4807      	ldr	r0, [pc, #28]	; (8003930 <MX_TIM3_Init+0xe8>)
 8003912:	f003 fe69 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800391c:	f7ff fae0 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003920:	4803      	ldr	r0, [pc, #12]	; (8003930 <MX_TIM3_Init+0xe8>)
 8003922:	f000 fa3d 	bl	8003da0 <HAL_TIM_MspPostInit>

}
 8003926:	bf00      	nop
 8003928:	3738      	adds	r7, #56	; 0x38
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000a74 	.word	0x20000a74
 8003934:	40000400 	.word	0x40000400

08003938 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800394c:	463b      	mov	r3, r7
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <MX_TIM4_Init+0x94>)
 8003956:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <MX_TIM4_Init+0x98>)
 8003958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <MX_TIM4_Init+0x94>)
 800395c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003960:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <MX_TIM4_Init+0x94>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003968:	4b18      	ldr	r3, [pc, #96]	; (80039cc <MX_TIM4_Init+0x94>)
 800396a:	220a      	movs	r2, #10
 800396c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396e:	4b17      	ldr	r3, [pc, #92]	; (80039cc <MX_TIM4_Init+0x94>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <MX_TIM4_Init+0x94>)
 8003976:	2200      	movs	r2, #0
 8003978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800397a:	4814      	ldr	r0, [pc, #80]	; (80039cc <MX_TIM4_Init+0x94>)
 800397c:	f003 f93a 	bl	8006bf4 <HAL_TIM_Base_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003986:	f7ff faab 	bl	8002ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800398a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	4619      	mov	r1, r3
 8003996:	480d      	ldr	r0, [pc, #52]	; (80039cc <MX_TIM4_Init+0x94>)
 8003998:	f003 fee4 	bl	8007764 <HAL_TIM_ConfigClockSource>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80039a2:	f7ff fa9d 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a6:	2300      	movs	r3, #0
 80039a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039ae:	463b      	mov	r3, r7
 80039b0:	4619      	mov	r1, r3
 80039b2:	4806      	ldr	r0, [pc, #24]	; (80039cc <MX_TIM4_Init+0x94>)
 80039b4:	f004 fa9e 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80039be:	f7ff fa8f 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80039c2:	bf00      	nop
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000abc 	.word	0x20000abc
 80039d0:	40000800 	.word	0x40000800

080039d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039da:	f107 030c 	add.w	r3, r7, #12
 80039de:	2224      	movs	r2, #36	; 0x24
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f005 f8c8 	bl	8008b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039f0:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <MX_TIM5_Init+0xa0>)
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <MX_TIM5_Init+0xa4>)
 80039f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <MX_TIM5_Init+0xa0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <MX_TIM5_Init+0xa0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <MX_TIM5_Init+0xa0>)
 8003a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <MX_TIM5_Init+0xa0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <MX_TIM5_Init+0xa0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4619      	mov	r1, r3
 8003a40:	480c      	ldr	r0, [pc, #48]	; (8003a74 <MX_TIM5_Init+0xa0>)
 8003a42:	f003 fb99 	bl	8007178 <HAL_TIM_Encoder_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003a4c:	f7ff fa48 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a50:	2300      	movs	r3, #0
 8003a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4805      	ldr	r0, [pc, #20]	; (8003a74 <MX_TIM5_Init+0xa0>)
 8003a5e:	f004 fa49 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003a68:	f7ff fa3a 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a6c:	bf00      	nop
 8003a6e:	3730      	adds	r7, #48	; 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000b04 	.word	0x20000b04
 8003a78:	40000c00 	.word	0x40000c00

08003a7c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a82:	463b      	mov	r3, r7
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <MX_TIM6_Init+0x68>)
 8003a8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003a92:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003a96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aa4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003aac:	480c      	ldr	r0, [pc, #48]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003aae:	f003 f8a1 	bl	8006bf4 <HAL_TIM_Base_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003ab8:	f7ff fa12 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003abc:	2300      	movs	r3, #0
 8003abe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4805      	ldr	r0, [pc, #20]	; (8003ae0 <MX_TIM6_Init+0x64>)
 8003aca:	f004 fa13 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ad4:	f7ff fa04 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000b4c 	.word	0x20000b4c
 8003ae4:	40001000 	.word	0x40001000

08003ae8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aee:	463b      	mov	r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <MX_TIM7_Init+0x68>)
 8003afa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003afe:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003b02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b10:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003b18:	480c      	ldr	r0, [pc, #48]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003b1a:	f003 f86b 	bl	8006bf4 <HAL_TIM_Base_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003b24:	f7ff f9dc 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003b30:	463b      	mov	r3, r7
 8003b32:	4619      	mov	r1, r3
 8003b34:	4805      	ldr	r0, [pc, #20]	; (8003b4c <MX_TIM7_Init+0x64>)
 8003b36:	f004 f9dd 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003b40:	f7ff f9ce 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000b94 	.word	0x20000b94
 8003b50:	40001400 	.word	0x40001400

08003b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3d      	ldr	r2, [pc, #244]	; (8003c58 <HAL_TIM_Base_MspInit+0x104>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d114      	bne.n	8003b90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b66:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b70:	6193      	str	r3, [r2, #24]
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	2019      	movs	r0, #25
 8003b84:	f000 fe15 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003b88:	2019      	movs	r0, #25
 8003b8a:	f000 fe2e 	bl	80047ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003b8e:	e05e      	b.n	8003c4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a32      	ldr	r2, [pc, #200]	; (8003c60 <HAL_TIM_Base_MspInit+0x10c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10c      	bne.n	8003bb4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	61d3      	str	r3, [r2, #28]
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
}
 8003bb2:	e04c      	b.n	8003c4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <HAL_TIM_Base_MspInit+0x110>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d114      	bne.n	8003be8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bbe:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	61d3      	str	r3, [r2, #28]
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	201e      	movs	r0, #30
 8003bdc:	f000 fde9 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003be0:	201e      	movs	r0, #30
 8003be2:	f000 fe02 	bl	80047ea <HAL_NVIC_EnableIRQ>
}
 8003be6:	e032      	b.n	8003c4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM6)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <HAL_TIM_Base_MspInit+0x114>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d114      	bne.n	8003c1c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003bf8:	f043 0310 	orr.w	r3, r3, #16
 8003bfc:	61d3      	str	r3, [r2, #28]
 8003bfe:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2036      	movs	r0, #54	; 0x36
 8003c10:	f000 fdcf 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003c14:	2036      	movs	r0, #54	; 0x36
 8003c16:	f000 fde8 	bl	80047ea <HAL_NVIC_EnableIRQ>
}
 8003c1a:	e018      	b.n	8003c4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM7)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <HAL_TIM_Base_MspInit+0x118>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d113      	bne.n	8003c4e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003c2c:	f043 0320 	orr.w	r3, r3, #32
 8003c30:	61d3      	str	r3, [r2, #28]
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_TIM_Base_MspInit+0x108>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	2037      	movs	r0, #55	; 0x37
 8003c44:	f000 fdb5 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c48:	2037      	movs	r0, #55	; 0x37
 8003c4a:	f000 fdce 	bl	80047ea <HAL_NVIC_EnableIRQ>
}
 8003c4e:	bf00      	nop
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40001000 	.word	0x40001000
 8003c6c:	40001400 	.word	0x40001400

08003c70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8e:	d14f      	bne.n	8003d30 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4a3d      	ldr	r2, [pc, #244]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	61d3      	str	r3, [r2, #28]
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cae:	f043 0304 	orr.w	r3, r3, #4
 8003cb2:	6193      	str	r3, [r2, #24]
 8003cb4:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4a31      	ldr	r2, [pc, #196]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cc6:	f043 0308 	orr.w	r3, r3, #8
 8003cca:	6193      	str	r3, [r2, #24]
 8003ccc:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8003cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f107 031c 	add.w	r3, r7, #28
 8003cea:	4619      	mov	r1, r3
 8003cec:	4828      	ldr	r0, [pc, #160]	; (8003d90 <HAL_TIM_Encoder_MspInit+0x120>)
 8003cee:	f000 fed9 	bl	8004aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003cfe:	f107 031c 	add.w	r3, r7, #28
 8003d02:	4619      	mov	r1, r3
 8003d04:	4823      	ldr	r0, [pc, #140]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d06:	f000 fecd 	bl	8004aa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003d0a:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d28:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003d2e:	e028      	b.n	8003d82 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d123      	bne.n	8003d82 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	61d3      	str	r3, [r2, #28]
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	6193      	str	r3, [r2, #24]
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4804      	ldr	r0, [pc, #16]	; (8003d90 <HAL_TIM_Encoder_MspInit+0x120>)
 8003d7e:	f000 fe91 	bl	8004aa4 <HAL_GPIO_Init>
}
 8003d82:	bf00      	nop
 8003d84:	3730      	adds	r7, #48	; 0x30
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40010800 	.word	0x40010800
 8003d94:	40010c00 	.word	0x40010c00
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	40000c00 	.word	0x40000c00

08003da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <HAL_TIM_MspPostInit+0xbc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d119      	bne.n	8003df4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <HAL_TIM_MspPostInit+0xc0>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <HAL_TIM_MspPostInit+0xc0>)
 8003dc6:	f043 0304 	orr.w	r3, r3, #4
 8003dca:	6193      	str	r3, [r2, #24]
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_TIM_MspPostInit+0xc0>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8003dd8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dde:	2302      	movs	r3, #2
 8003de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2302      	movs	r3, #2
 8003de4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	481d      	ldr	r0, [pc, #116]	; (8003e64 <HAL_TIM_MspPostInit+0xc4>)
 8003dee:	f000 fe59 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003df2:	e02e      	b.n	8003e52 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_TIM_MspPostInit+0xc8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d129      	bne.n	8003e52 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_TIM_MspPostInit+0xc0>)
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_TIM_MspPostInit+0xc0>)
 8003e04:	f043 0310 	orr.w	r3, r3, #16
 8003e08:	6193      	str	r3, [r2, #24]
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_TIM_MspPostInit+0xc0>)
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	4619      	mov	r1, r3
 8003e28:	4810      	ldr	r0, [pc, #64]	; (8003e6c <HAL_TIM_MspPostInit+0xcc>)
 8003e2a:	f000 fe3b 	bl	8004aa4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_TIM_MspPostInit+0xd0>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <HAL_TIM_MspPostInit+0xd0>)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6053      	str	r3, [r2, #4]
}
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40010800 	.word	0x40010800
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40010000 	.word	0x40010000

08003e74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <MX_USART1_UART_Init+0x50>)
 8003e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003eaa:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <MX_USART1_UART_Init+0x4c>)
 8003eac:	f004 f8f1 	bl	8008092 <HAL_UART_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003eb6:	f7ff f813 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000be4 	.word	0x20000be4
 8003ec4:	40013800 	.word	0x40013800

08003ec8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <MX_USART2_UART_Init+0x50>)
 8003ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003eee:	220c      	movs	r2, #12
 8003ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003efe:	4805      	ldr	r0, [pc, #20]	; (8003f14 <MX_USART2_UART_Init+0x4c>)
 8003f00:	f004 f8c7 	bl	8008092 <HAL_UART_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f0a:	f7fe ffe9 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000c28 	.word	0x20000c28
 8003f18:	40004400 	.word	0x40004400

08003f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a45      	ldr	r2, [pc, #276]	; (800404c <HAL_UART_MspInit+0x130>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d146      	bne.n	8003fca <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f3c:	4b44      	ldr	r3, [pc, #272]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	4a43      	ldr	r2, [pc, #268]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f46:	6193      	str	r3, [r2, #24]
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f54:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003f78:	f107 031c 	add.w	r3, r7, #28
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4835      	ldr	r0, [pc, #212]	; (8004054 <HAL_UART_MspInit+0x138>)
 8003f80:	f000 fd90 	bl	8004aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	4619      	mov	r1, r3
 8003f96:	482f      	ldr	r0, [pc, #188]	; (8004054 <HAL_UART_MspInit+0x138>)
 8003f98:	f000 fd84 	bl	8004aa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003f9c:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_UART_MspInit+0x13c>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb2:	4a29      	ldr	r2, [pc, #164]	; (8004058 <HAL_UART_MspInit+0x13c>)
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2100      	movs	r1, #0
 8003fbc:	2025      	movs	r0, #37	; 0x25
 8003fbe:	f000 fbf8 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fc2:	2025      	movs	r0, #37	; 0x25
 8003fc4:	f000 fc11 	bl	80047ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003fc8:	e03c      	b.n	8004044 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a23      	ldr	r2, [pc, #140]	; (800405c <HAL_UART_MspInit+0x140>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d137      	bne.n	8004044 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fde:	61d3      	str	r3, [r2, #28]
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6193      	str	r3, [r2, #24]
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_UART_MspInit+0x134>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8004004:	2304      	movs	r3, #4
 8004006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004010:	f107 031c 	add.w	r3, r7, #28
 8004014:	4619      	mov	r1, r3
 8004016:	4812      	ldr	r0, [pc, #72]	; (8004060 <HAL_UART_MspInit+0x144>)
 8004018:	f000 fd44 	bl	8004aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 800401c:	2308      	movs	r3, #8
 800401e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4619      	mov	r1, r3
 800402e:	480c      	ldr	r0, [pc, #48]	; (8004060 <HAL_UART_MspInit+0x144>)
 8004030:	f000 fd38 	bl	8004aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	2026      	movs	r0, #38	; 0x26
 800403a:	f000 fbba 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800403e:	2026      	movs	r0, #38	; 0x26
 8004040:	f000 fbd3 	bl	80047ea <HAL_NVIC_EnableIRQ>
}
 8004044:	bf00      	nop
 8004046:	3730      	adds	r7, #48	; 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40013800 	.word	0x40013800
 8004050:	40021000 	.word	0x40021000
 8004054:	40010c00 	.word	0x40010c00
 8004058:	40010000 	.word	0x40010000
 800405c:	40004400 	.word	0x40004400
 8004060:	40010800 	.word	0x40010800

08004064 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004064:	480c      	ldr	r0, [pc, #48]	; (8004098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004066:	490d      	ldr	r1, [pc, #52]	; (800409c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800407c:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800408a:	f7ff fabf 	bl	800360c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408e:	f004 fd41 	bl	8008b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004092:	f7fe fc5f 	bl	8002954 <main>
  bx lr
 8004096:	4770      	bx	lr
  ldr r0, =_sdata
 8004098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800409c:	200007e4 	.word	0x200007e4
  ldr r2, =_sidata
 80040a0:	0800dc88 	.word	0x0800dc88
  ldr r2, =_sbss
 80040a4:	200007e4 	.word	0x200007e4
  ldr r4, =_ebss
 80040a8:	20000c80 	.word	0x20000c80

080040ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC1_2_IRQHandler>
	...

080040b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_Init+0x28>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_Init+0x28>)
 80040ba:	f043 0310 	orr.w	r3, r3, #16
 80040be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c0:	2003      	movs	r0, #3
 80040c2:	f000 fb6b 	bl	800479c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040c6:	200f      	movs	r0, #15
 80040c8:	f000 f808 	bl	80040dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040cc:	f7ff f940 	bl	8003350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40022000 	.word	0x40022000

080040dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_InitTick+0x54>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_InitTick+0x58>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb83 	bl	8004806 <HAL_SYSTICK_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e00e      	b.n	8004128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d80a      	bhi.n	8004126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004110:	2200      	movs	r2, #0
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	f000 fb4b 	bl	80047b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800411c:	4a06      	ldr	r2, [pc, #24]	; (8004138 <HAL_InitTick+0x5c>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000604 	.word	0x20000604
 8004134:	2000060c 	.word	0x2000060c
 8004138:	20000608 	.word	0x20000608

0800413c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_IncTick+0x1c>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_IncTick+0x20>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4413      	add	r3, r2
 800414c:	4a03      	ldr	r2, [pc, #12]	; (800415c <HAL_IncTick+0x20>)
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	2000060c 	.word	0x2000060c
 800415c:	20000c6c 	.word	0x20000c6c

08004160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return uwTick;
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <HAL_GetTick+0x10>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20000c6c 	.word	0x20000c6c

08004174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff fff0 	bl	8004160 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d005      	beq.n	800419a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_Delay+0x44>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800419a:	bf00      	nop
 800419c:	f7ff ffe0 	bl	8004160 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d8f7      	bhi.n	800419c <HAL_Delay+0x28>
  {
  }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000060c 	.word	0x2000060c

080041bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0ce      	b.n	800437c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fae6 	bl	80017cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f9bd 	bl	8004580 <ADC_ConversionStop_Disable>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 80a9 	bne.w	800436a <HAL_ADC_Init+0x1ae>
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 80a5 	bne.w	800436a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004228:	f023 0302 	bic.w	r3, r3, #2
 800422c:	f043 0202 	orr.w	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4951      	ldr	r1, [pc, #324]	; (8004384 <HAL_ADC_Init+0x1c8>)
 800423e:	428b      	cmp	r3, r1
 8004240:	d10a      	bne.n	8004258 <HAL_ADC_Init+0x9c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800424a:	d002      	beq.n	8004252 <HAL_ADC_Init+0x96>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	e004      	b.n	800425c <HAL_ADC_Init+0xa0>
 8004252:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004256:	e001      	b.n	800425c <HAL_ADC_Init+0xa0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800425c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7b1b      	ldrb	r3, [r3, #12]
 8004262:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004264:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004274:	d003      	beq.n	800427e <HAL_ADC_Init+0xc2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d102      	bne.n	8004284 <HAL_ADC_Init+0xc8>
 800427e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004282:	e000      	b.n	8004286 <HAL_ADC_Init+0xca>
 8004284:	2300      	movs	r3, #0
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7d1b      	ldrb	r3, [r3, #20]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d119      	bne.n	80042c8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7b1b      	ldrb	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d109      	bne.n	80042b0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	035a      	lsls	r2, r3, #13
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	e00b      	b.n	80042c8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <HAL_ADC_Init+0x1cc>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	d003      	beq.n	8004302 <HAL_ADC_Init+0x146>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d104      	bne.n	800430c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	051b      	lsls	r3, r3, #20
 800430a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	430a      	orrs	r2, r1
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_ADC_Init+0x1d0>)
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	d10b      	bne.n	8004348 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	f043 0201 	orr.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004346:	e018      	b.n	800437a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	f023 0312 	bic.w	r3, r3, #18
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004368:	e007      	b.n	800437a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	f043 0210 	orr.w	r2, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40013c00 	.word	0x40013c00
 8004388:	ffe1f7fd 	.word	0xffe1f7fd
 800438c:	ff1f0efe 	.word	0xff1f0efe

08004390 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x20>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e0dc      	b.n	800456a <HAL_ADC_ConfigChannel+0x1da>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d81c      	bhi.n	80043fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	3b05      	subs	r3, #5
 80043d2:	221f      	movs	r2, #31
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	4019      	ands	r1, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	3b05      	subs	r3, #5
 80043ec:	fa00 f203 	lsl.w	r2, r0, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34
 80043f8:	e03c      	b.n	8004474 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d81c      	bhi.n	800443c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	3b23      	subs	r3, #35	; 0x23
 8004414:	221f      	movs	r2, #31
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	4019      	ands	r1, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	3b23      	subs	r3, #35	; 0x23
 800442e:	fa00 f203 	lsl.w	r2, r0, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
 800443a:	e01b      	b.n	8004474 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	3b41      	subs	r3, #65	; 0x41
 800444e:	221f      	movs	r2, #31
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	4019      	ands	r1, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	3b41      	subs	r3, #65	; 0x41
 8004468:	fa00 f203 	lsl.w	r2, r0, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b09      	cmp	r3, #9
 800447a:	d91c      	bls.n	80044b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68d9      	ldr	r1, [r3, #12]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	3b1e      	subs	r3, #30
 800448e:	2207      	movs	r2, #7
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	4019      	ands	r1, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6898      	ldr	r0, [r3, #8]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	3b1e      	subs	r3, #30
 80044a8:	fa00 f203 	lsl.w	r2, r0, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	e019      	b.n	80044ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6919      	ldr	r1, [r3, #16]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	2207      	movs	r2, #7
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	4019      	ands	r1, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6898      	ldr	r0, [r3, #8]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	fa00 f203 	lsl.w	r2, r0, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d003      	beq.n	80044fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80044f6:	2b11      	cmp	r3, #17
 80044f8:	d132      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_ADC_ConfigChannel+0x1e4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d125      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d126      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004520:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b10      	cmp	r3, #16
 8004528:	d11a      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <HAL_ADC_ConfigChannel+0x1e8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <HAL_ADC_ConfigChannel+0x1ec>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	0c9a      	lsrs	r2, r3, #18
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004540:	e002      	b.n	8004548 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3b01      	subs	r3, #1
 8004546:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f9      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x1b2>
 800454e:	e007      	b.n	8004560 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	40012400 	.word	0x40012400
 8004578:	20000604 	.word	0x20000604
 800457c:	431bde83 	.word	0x431bde83

08004580 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d12e      	bne.n	80045f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045aa:	f7ff fdd9 	bl	8004160 <HAL_GetTick>
 80045ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045b0:	e01b      	b.n	80045ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b2:	f7ff fdd5 	bl	8004160 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d914      	bls.n	80045ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d0dc      	beq.n	80045b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800462c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	60d3      	str	r3, [r2, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_GetPriorityGrouping+0x18>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0307 	and.w	r3, r3, #7
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db0b      	blt.n	8004692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4906      	ldr	r1, [pc, #24]	; (800469c <__NVIC_EnableIRQ+0x34>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2001      	movs	r0, #1
 800468a:	fa00 f202 	lsl.w	r2, r0, r2
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	; (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3b01      	subs	r3, #1
 8004764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004768:	d301      	bcc.n	800476e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800476a:	2301      	movs	r3, #1
 800476c:	e00f      	b.n	800478e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <SysTick_Config+0x40>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3b01      	subs	r3, #1
 8004774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004776:	210f      	movs	r1, #15
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	f7ff ff90 	bl	80046a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <SysTick_Config+0x40>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <SysTick_Config+0x40>)
 8004788:	2207      	movs	r2, #7
 800478a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	e000e010 	.word	0xe000e010

0800479c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff2d 	bl	8004604 <__NVIC_SetPriorityGrouping>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047c4:	f7ff ff42 	bl	800464c <__NVIC_GetPriorityGrouping>
 80047c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f7ff ff90 	bl	80046f4 <NVIC_EncodePriority>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ff5f 	bl	80046a0 <__NVIC_SetPriority>
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	4603      	mov	r3, r0
 80047f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff35 	bl	8004668 <__NVIC_EnableIRQ>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ffa2 	bl	8004758 <SysTick_Config>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004830:	2b02      	cmp	r3, #2
 8004832:	d008      	beq.n	8004846 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2204      	movs	r2, #4
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e020      	b.n	8004888 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 020e 	bic.w	r2, r2, #14
 8004854:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f202 	lsl.w	r2, r1, r2
 8004874:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
	...

08004894 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d005      	beq.n	80048b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e0d6      	b.n	8004a64 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 020e 	bic.w	r2, r2, #14
 80048c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b64      	ldr	r3, [pc, #400]	; (8004a70 <HAL_DMA_Abort_IT+0x1dc>)
 80048de:	429a      	cmp	r2, r3
 80048e0:	d958      	bls.n	8004994 <HAL_DMA_Abort_IT+0x100>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a63      	ldr	r2, [pc, #396]	; (8004a74 <HAL_DMA_Abort_IT+0x1e0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04f      	beq.n	800498c <HAL_DMA_Abort_IT+0xf8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a61      	ldr	r2, [pc, #388]	; (8004a78 <HAL_DMA_Abort_IT+0x1e4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d048      	beq.n	8004988 <HAL_DMA_Abort_IT+0xf4>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a60      	ldr	r2, [pc, #384]	; (8004a7c <HAL_DMA_Abort_IT+0x1e8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_Abort_IT+0xee>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5e      	ldr	r2, [pc, #376]	; (8004a80 <HAL_DMA_Abort_IT+0x1ec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d038      	beq.n	800497c <HAL_DMA_Abort_IT+0xe8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a5d      	ldr	r2, [pc, #372]	; (8004a84 <HAL_DMA_Abort_IT+0x1f0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d030      	beq.n	8004976 <HAL_DMA_Abort_IT+0xe2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5b      	ldr	r2, [pc, #364]	; (8004a88 <HAL_DMA_Abort_IT+0x1f4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d028      	beq.n	8004970 <HAL_DMA_Abort_IT+0xdc>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a53      	ldr	r2, [pc, #332]	; (8004a70 <HAL_DMA_Abort_IT+0x1dc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d020      	beq.n	800496a <HAL_DMA_Abort_IT+0xd6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <HAL_DMA_Abort_IT+0x1f8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d019      	beq.n	8004966 <HAL_DMA_Abort_IT+0xd2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a56      	ldr	r2, [pc, #344]	; (8004a90 <HAL_DMA_Abort_IT+0x1fc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d012      	beq.n	8004962 <HAL_DMA_Abort_IT+0xce>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a54      	ldr	r2, [pc, #336]	; (8004a94 <HAL_DMA_Abort_IT+0x200>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00a      	beq.n	800495c <HAL_DMA_Abort_IT+0xc8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a53      	ldr	r2, [pc, #332]	; (8004a98 <HAL_DMA_Abort_IT+0x204>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d102      	bne.n	8004956 <HAL_DMA_Abort_IT+0xc2>
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	e01b      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800495a:	e018      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 800495c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004960:	e015      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004962:	2310      	movs	r3, #16
 8004964:	e013      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004966:	2301      	movs	r3, #1
 8004968:	e011      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 800496a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800496e:	e00e      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004974:	e00b      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800497a:	e008      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 800497c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004980:	e005      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004986:	e002      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 8004988:	2310      	movs	r3, #16
 800498a:	e000      	b.n	800498e <HAL_DMA_Abort_IT+0xfa>
 800498c:	2301      	movs	r3, #1
 800498e:	4a43      	ldr	r2, [pc, #268]	; (8004a9c <HAL_DMA_Abort_IT+0x208>)
 8004990:	6053      	str	r3, [r2, #4]
 8004992:	e057      	b.n	8004a44 <HAL_DMA_Abort_IT+0x1b0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a36      	ldr	r2, [pc, #216]	; (8004a74 <HAL_DMA_Abort_IT+0x1e0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d04f      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x1aa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a35      	ldr	r2, [pc, #212]	; (8004a78 <HAL_DMA_Abort_IT+0x1e4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d048      	beq.n	8004a3a <HAL_DMA_Abort_IT+0x1a6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a33      	ldr	r2, [pc, #204]	; (8004a7c <HAL_DMA_Abort_IT+0x1e8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d040      	beq.n	8004a34 <HAL_DMA_Abort_IT+0x1a0>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a32      	ldr	r2, [pc, #200]	; (8004a80 <HAL_DMA_Abort_IT+0x1ec>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d038      	beq.n	8004a2e <HAL_DMA_Abort_IT+0x19a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a30      	ldr	r2, [pc, #192]	; (8004a84 <HAL_DMA_Abort_IT+0x1f0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d030      	beq.n	8004a28 <HAL_DMA_Abort_IT+0x194>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2f      	ldr	r2, [pc, #188]	; (8004a88 <HAL_DMA_Abort_IT+0x1f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d028      	beq.n	8004a22 <HAL_DMA_Abort_IT+0x18e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <HAL_DMA_Abort_IT+0x1dc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d020      	beq.n	8004a1c <HAL_DMA_Abort_IT+0x188>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <HAL_DMA_Abort_IT+0x1f8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d019      	beq.n	8004a18 <HAL_DMA_Abort_IT+0x184>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <HAL_DMA_Abort_IT+0x1fc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d012      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x180>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <HAL_DMA_Abort_IT+0x200>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00a      	beq.n	8004a0e <HAL_DMA_Abort_IT+0x17a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <HAL_DMA_Abort_IT+0x204>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d102      	bne.n	8004a08 <HAL_DMA_Abort_IT+0x174>
 8004a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a06:	e01b      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a0c:	e018      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a12:	e015      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a14:	2310      	movs	r3, #16
 8004a16:	e013      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e011      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a20:	e00e      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a26:	e00b      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a2c:	e008      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a32:	e005      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a38:	e002      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	e000      	b.n	8004a40 <HAL_DMA_Abort_IT+0x1ac>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_DMA_Abort_IT+0x20c>)
 8004a42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
    } 
  }
  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40020080 	.word	0x40020080
 8004a74:	40020008 	.word	0x40020008
 8004a78:	4002001c 	.word	0x4002001c
 8004a7c:	40020030 	.word	0x40020030
 8004a80:	40020044 	.word	0x40020044
 8004a84:	40020058 	.word	0x40020058
 8004a88:	4002006c 	.word	0x4002006c
 8004a8c:	40020408 	.word	0x40020408
 8004a90:	4002041c 	.word	0x4002041c
 8004a94:	40020430 	.word	0x40020430
 8004a98:	40020444 	.word	0x40020444
 8004a9c:	40020400 	.word	0x40020400
 8004aa0:	40020000 	.word	0x40020000

08004aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab6:	e179      	b.n	8004dac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ab8:	2201      	movs	r2, #1
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	f040 8168 	bne.w	8004da6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a96      	ldr	r2, [pc, #600]	; (8004d34 <HAL_GPIO_Init+0x290>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d05e      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004ae0:	4a94      	ldr	r2, [pc, #592]	; (8004d34 <HAL_GPIO_Init+0x290>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d875      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004ae6:	4a94      	ldr	r2, [pc, #592]	; (8004d38 <HAL_GPIO_Init+0x294>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d058      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004aec:	4a92      	ldr	r2, [pc, #584]	; (8004d38 <HAL_GPIO_Init+0x294>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d86f      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004af2:	4a92      	ldr	r2, [pc, #584]	; (8004d3c <HAL_GPIO_Init+0x298>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d052      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004af8:	4a90      	ldr	r2, [pc, #576]	; (8004d3c <HAL_GPIO_Init+0x298>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d869      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004afe:	4a90      	ldr	r2, [pc, #576]	; (8004d40 <HAL_GPIO_Init+0x29c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04c      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004b04:	4a8e      	ldr	r2, [pc, #568]	; (8004d40 <HAL_GPIO_Init+0x29c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d863      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004b0a:	4a8e      	ldr	r2, [pc, #568]	; (8004d44 <HAL_GPIO_Init+0x2a0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d046      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004b10:	4a8c      	ldr	r2, [pc, #560]	; (8004d44 <HAL_GPIO_Init+0x2a0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d85d      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004b16:	2b12      	cmp	r3, #18
 8004b18:	d82a      	bhi.n	8004b70 <HAL_GPIO_Init+0xcc>
 8004b1a:	2b12      	cmp	r3, #18
 8004b1c:	d859      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_GPIO_Init+0x80>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b9f 	.word	0x08004b9f
 8004b28:	08004b79 	.word	0x08004b79
 8004b2c:	08004b8b 	.word	0x08004b8b
 8004b30:	08004bcd 	.word	0x08004bcd
 8004b34:	08004bd3 	.word	0x08004bd3
 8004b38:	08004bd3 	.word	0x08004bd3
 8004b3c:	08004bd3 	.word	0x08004bd3
 8004b40:	08004bd3 	.word	0x08004bd3
 8004b44:	08004bd3 	.word	0x08004bd3
 8004b48:	08004bd3 	.word	0x08004bd3
 8004b4c:	08004bd3 	.word	0x08004bd3
 8004b50:	08004bd3 	.word	0x08004bd3
 8004b54:	08004bd3 	.word	0x08004bd3
 8004b58:	08004bd3 	.word	0x08004bd3
 8004b5c:	08004bd3 	.word	0x08004bd3
 8004b60:	08004bd3 	.word	0x08004bd3
 8004b64:	08004bd3 	.word	0x08004bd3
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	4a75      	ldr	r2, [pc, #468]	; (8004d48 <HAL_GPIO_Init+0x2a4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b76:	e02c      	b.n	8004bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	623b      	str	r3, [r7, #32]
          break;
 8004b7e:	e029      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	623b      	str	r3, [r7, #32]
          break;
 8004b88:	e024      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	623b      	str	r3, [r7, #32]
          break;
 8004b92:	e01f      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	623b      	str	r3, [r7, #32]
          break;
 8004b9c:	e01a      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	623b      	str	r3, [r7, #32]
          break;
 8004baa:	e013      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	611a      	str	r2, [r3, #16]
          break;
 8004bbe:	e009      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	615a      	str	r2, [r3, #20]
          break;
 8004bca:	e003      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	623b      	str	r3, [r7, #32]
          break;
 8004bd0:	e000      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          break;
 8004bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2bff      	cmp	r3, #255	; 0xff
 8004bd8:	d801      	bhi.n	8004bde <HAL_GPIO_Init+0x13a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	e001      	b.n	8004be2 <HAL_GPIO_Init+0x13e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2bff      	cmp	r3, #255	; 0xff
 8004be8:	d802      	bhi.n	8004bf0 <HAL_GPIO_Init+0x14c>
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	e002      	b.n	8004bf6 <HAL_GPIO_Init+0x152>
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	3b08      	subs	r3, #8
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	210f      	movs	r1, #15
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	401a      	ands	r2, r3
 8004c08:	6a39      	ldr	r1, [r7, #32]
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80c1 	beq.w	8004da6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c24:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <HAL_GPIO_Init+0x2a8>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	4a48      	ldr	r2, [pc, #288]	; (8004d4c <HAL_GPIO_Init+0x2a8>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6193      	str	r3, [r2, #24]
 8004c30:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_GPIO_Init+0x2a8>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c3c:	4a44      	ldr	r2, [pc, #272]	; (8004d50 <HAL_GPIO_Init+0x2ac>)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	220f      	movs	r2, #15
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3c      	ldr	r2, [pc, #240]	; (8004d54 <HAL_GPIO_Init+0x2b0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01f      	beq.n	8004ca8 <HAL_GPIO_Init+0x204>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3b      	ldr	r2, [pc, #236]	; (8004d58 <HAL_GPIO_Init+0x2b4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d019      	beq.n	8004ca4 <HAL_GPIO_Init+0x200>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3a      	ldr	r2, [pc, #232]	; (8004d5c <HAL_GPIO_Init+0x2b8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <HAL_GPIO_Init+0x1fc>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a39      	ldr	r2, [pc, #228]	; (8004d60 <HAL_GPIO_Init+0x2bc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00d      	beq.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a38      	ldr	r2, [pc, #224]	; (8004d64 <HAL_GPIO_Init+0x2c0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <HAL_GPIO_Init+0x1f4>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a37      	ldr	r2, [pc, #220]	; (8004d68 <HAL_GPIO_Init+0x2c4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <HAL_GPIO_Init+0x1f0>
 8004c90:	2305      	movs	r3, #5
 8004c92:	e00a      	b.n	8004caa <HAL_GPIO_Init+0x206>
 8004c94:	2306      	movs	r3, #6
 8004c96:	e008      	b.n	8004caa <HAL_GPIO_Init+0x206>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	e006      	b.n	8004caa <HAL_GPIO_Init+0x206>
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e004      	b.n	8004caa <HAL_GPIO_Init+0x206>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e002      	b.n	8004caa <HAL_GPIO_Init+0x206>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_GPIO_Init+0x206>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	f002 0203 	and.w	r2, r2, #3
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	4093      	lsls	r3, r2
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cba:	4925      	ldr	r1, [pc, #148]	; (8004d50 <HAL_GPIO_Init+0x2ac>)
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d006      	beq.n	8004ce2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004cd4:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4924      	ldr	r1, [pc, #144]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]
 8004ce0:	e006      	b.n	8004cf0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	4920      	ldr	r1, [pc, #128]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d006      	beq.n	8004d0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	491a      	ldr	r1, [pc, #104]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
 8004d08:	e006      	b.n	8004d18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d0a:	4b18      	ldr	r3, [pc, #96]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	4916      	ldr	r1, [pc, #88]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d025      	beq.n	8004d70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d24:	4b11      	ldr	r3, [pc, #68]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	4910      	ldr	r1, [pc, #64]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
 8004d30:	e025      	b.n	8004d7e <HAL_GPIO_Init+0x2da>
 8004d32:	bf00      	nop
 8004d34:	10320000 	.word	0x10320000
 8004d38:	10310000 	.word	0x10310000
 8004d3c:	10220000 	.word	0x10220000
 8004d40:	10210000 	.word	0x10210000
 8004d44:	10120000 	.word	0x10120000
 8004d48:	10110000 	.word	0x10110000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40010800 	.word	0x40010800
 8004d58:	40010c00 	.word	0x40010c00
 8004d5c:	40011000 	.word	0x40011000
 8004d60:	40011400 	.word	0x40011400
 8004d64:	40011800 	.word	0x40011800
 8004d68:	40011c00 	.word	0x40011c00
 8004d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d70:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <HAL_GPIO_Init+0x324>)
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	4913      	ldr	r1, [pc, #76]	; (8004dc8 <HAL_GPIO_Init+0x324>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <HAL_GPIO_Init+0x324>)
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_GPIO_Init+0x324>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60cb      	str	r3, [r1, #12]
 8004d96:	e006      	b.n	8004da6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_GPIO_Init+0x324>)
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	4909      	ldr	r1, [pc, #36]	; (8004dc8 <HAL_GPIO_Init+0x324>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	3301      	adds	r3, #1
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f47f ae7e 	bne.w	8004ab8 <HAL_GPIO_Init+0x14>
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	372c      	adds	r7, #44	; 0x2c
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004dda:	e0a6      	b.n	8004f2a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ddc:	2201      	movs	r2, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8099 	beq.w	8004f24 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004df2:	4a54      	ldr	r2, [pc, #336]	; (8004f44 <HAL_GPIO_DeInit+0x178>)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	089b      	lsrs	r3, r3, #2
 8004df8:	3302      	adds	r3, #2
 8004dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfe:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	220f      	movs	r2, #15
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4013      	ands	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a4c      	ldr	r2, [pc, #304]	; (8004f48 <HAL_GPIO_DeInit+0x17c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01f      	beq.n	8004e5c <HAL_GPIO_DeInit+0x90>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a4b      	ldr	r2, [pc, #300]	; (8004f4c <HAL_GPIO_DeInit+0x180>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d019      	beq.n	8004e58 <HAL_GPIO_DeInit+0x8c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a4a      	ldr	r2, [pc, #296]	; (8004f50 <HAL_GPIO_DeInit+0x184>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <HAL_GPIO_DeInit+0x88>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a49      	ldr	r2, [pc, #292]	; (8004f54 <HAL_GPIO_DeInit+0x188>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00d      	beq.n	8004e50 <HAL_GPIO_DeInit+0x84>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a48      	ldr	r2, [pc, #288]	; (8004f58 <HAL_GPIO_DeInit+0x18c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <HAL_GPIO_DeInit+0x80>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a47      	ldr	r2, [pc, #284]	; (8004f5c <HAL_GPIO_DeInit+0x190>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_GPIO_DeInit+0x7c>
 8004e44:	2305      	movs	r3, #5
 8004e46:	e00a      	b.n	8004e5e <HAL_GPIO_DeInit+0x92>
 8004e48:	2306      	movs	r3, #6
 8004e4a:	e008      	b.n	8004e5e <HAL_GPIO_DeInit+0x92>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	e006      	b.n	8004e5e <HAL_GPIO_DeInit+0x92>
 8004e50:	2303      	movs	r3, #3
 8004e52:	e004      	b.n	8004e5e <HAL_GPIO_DeInit+0x92>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e002      	b.n	8004e5e <HAL_GPIO_DeInit+0x92>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <HAL_GPIO_DeInit+0x92>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	f002 0203 	and.w	r2, r2, #3
 8004e64:	0092      	lsls	r2, r2, #2
 8004e66:	4093      	lsls	r3, r2
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d132      	bne.n	8004ed4 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	220f      	movs	r2, #15
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004e7e:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <HAL_GPIO_DeInit+0x178>)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	482d      	ldr	r0, [pc, #180]	; (8004f44 <HAL_GPIO_DeInit+0x178>)
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	400a      	ands	r2, r1
 8004e96:	3302      	adds	r3, #2
 8004e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004e9c:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	492e      	ldr	r1, [pc, #184]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	492b      	ldr	r1, [pc, #172]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	4927      	ldr	r1, [pc, #156]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	4924      	ldr	r1, [pc, #144]	; (8004f60 <HAL_GPIO_DeInit+0x194>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2bff      	cmp	r3, #255	; 0xff
 8004ed8:	d801      	bhi.n	8004ede <HAL_GPIO_DeInit+0x112>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	e001      	b.n	8004ee2 <HAL_GPIO_DeInit+0x116>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2bff      	cmp	r3, #255	; 0xff
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_GPIO_DeInit+0x124>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	e002      	b.n	8004ef6 <HAL_GPIO_DeInit+0x12a>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3b08      	subs	r3, #8
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	210f      	movs	r1, #15
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	2104      	movs	r1, #4
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	431a      	orrs	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	401a      	ands	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	3301      	adds	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f47f af52 	bne.w	8004ddc <HAL_GPIO_DeInit+0x10>
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40010800 	.word	0x40010800
 8004f4c:	40010c00 	.word	0x40010c00
 8004f50:	40011000 	.word	0x40011000
 8004f54:	40011400 	.word	0x40011400
 8004f58:	40011800 	.word	0x40011800
 8004f5c:	40011c00 	.word	0x40011c00
 8004f60:	40010400 	.word	0x40010400

08004f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
 8004f70:	4613      	mov	r3, r2
 8004f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f74:	787b      	ldrb	r3, [r7, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f80:	e003      	b.n	8004f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f82:	887b      	ldrh	r3, [r7, #2]
 8004f84:	041a      	lsls	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	611a      	str	r2, [r3, #16]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4013      	ands	r3, r2
 8004fac:	041a      	lsls	r2, r3, #16
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	43d9      	mvns	r1, r3
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	611a      	str	r2, [r3, #16]
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fde:	4a05      	ldr	r2, [pc, #20]	; (8004ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd ff34 	bl	8002e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e12b      	b.n	8005262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd fb6e 	bl	8002700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800505c:	f001 fcce 	bl	80069fc <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a81      	ldr	r2, [pc, #516]	; (800526c <HAL_I2C_Init+0x274>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d807      	bhi.n	800507c <HAL_I2C_Init+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a80      	ldr	r2, [pc, #512]	; (8005270 <HAL_I2C_Init+0x278>)
 8005070:	4293      	cmp	r3, r2
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e006      	b.n	800508a <HAL_I2C_Init+0x92>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a7d      	ldr	r2, [pc, #500]	; (8005274 <HAL_I2C_Init+0x27c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	bf94      	ite	ls
 8005084:	2301      	movls	r3, #1
 8005086:	2300      	movhi	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0e7      	b.n	8005262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a78      	ldr	r2, [pc, #480]	; (8005278 <HAL_I2C_Init+0x280>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a6a      	ldr	r2, [pc, #424]	; (800526c <HAL_I2C_Init+0x274>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d802      	bhi.n	80050cc <HAL_I2C_Init+0xd4>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	3301      	adds	r3, #1
 80050ca:	e009      	b.n	80050e0 <HAL_I2C_Init+0xe8>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	4a69      	ldr	r2, [pc, #420]	; (800527c <HAL_I2C_Init+0x284>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	3301      	adds	r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	495c      	ldr	r1, [pc, #368]	; (800526c <HAL_I2C_Init+0x274>)
 80050fc:	428b      	cmp	r3, r1
 80050fe:	d819      	bhi.n	8005134 <HAL_I2C_Init+0x13c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1e59      	subs	r1, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fbb1 f3f3 	udiv	r3, r1, r3
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005114:	400b      	ands	r3, r1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_I2C_Init+0x138>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1e59      	subs	r1, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fbb1 f3f3 	udiv	r3, r1, r3
 8005128:	3301      	adds	r3, #1
 800512a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512e:	e051      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 8005130:	2304      	movs	r3, #4
 8005132:	e04f      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d111      	bne.n	8005160 <HAL_I2C_Init+0x168>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1e58      	subs	r0, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	440b      	add	r3, r1
 800514a:	fbb0 f3f3 	udiv	r3, r0, r3
 800514e:	3301      	adds	r3, #1
 8005150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e012      	b.n	8005186 <HAL_I2C_Init+0x18e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1e58      	subs	r0, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	0099      	lsls	r1, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_I2C_Init+0x196>
 800518a:	2301      	movs	r3, #1
 800518c:	e022      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10e      	bne.n	80051b4 <HAL_I2C_Init+0x1bc>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1e58      	subs	r0, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	440b      	add	r3, r1
 80051a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	e00f      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	0099      	lsls	r1, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	6809      	ldr	r1, [r1, #0]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6911      	ldr	r1, [r2, #16]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	4311      	orrs	r1, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	430b      	orrs	r3, r1
 8005216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	000186a0 	.word	0x000186a0
 8005270:	001e847f 	.word	0x001e847f
 8005274:	003d08ff 	.word	0x003d08ff
 8005278:	431bde83 	.word	0x431bde83
 800527c:	10624dd3 	.word	0x10624dd3

08005280 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e021      	b.n	80052d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2224      	movs	r2, #36	; 0x24
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fd fa68 	bl	8002780 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	460b      	mov	r3, r1
 80052ee:	817b      	strh	r3, [r7, #10]
 80052f0:	4613      	mov	r3, r2
 80052f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052f4:	f7fe ff34 	bl	8004160 <HAL_GetTick>
 80052f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b20      	cmp	r3, #32
 8005304:	f040 80e0 	bne.w	80054c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2319      	movs	r3, #25
 800530e:	2201      	movs	r2, #1
 8005310:	4970      	ldr	r1, [pc, #448]	; (80054d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fdc0 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
 8005320:	e0d3      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_I2C_Master_Transmit+0x50>
 800532c:	2302      	movs	r3, #2
 800532e:	e0cc      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d007      	beq.n	8005356 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2221      	movs	r2, #33	; 0x21
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2210      	movs	r2, #16
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	893a      	ldrh	r2, [r7, #8]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a50      	ldr	r2, [pc, #320]	; (80054d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005398:	8979      	ldrh	r1, [r7, #10]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fc2a 	bl	8005bf8 <I2C_MasterRequestWrite>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e08d      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053c4:	e066      	b.n	8005494 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6a39      	ldr	r1, [r7, #32]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fe3a 	bl	8006044 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e06b      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d11b      	bne.n	8005468 <HAL_I2C_Master_Transmit+0x188>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d017      	beq.n	8005468 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	6a39      	ldr	r1, [r7, #32]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fe2a 	bl	80060c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b04      	cmp	r3, #4
 800547e:	d107      	bne.n	8005490 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e01a      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d194      	bne.n	80053c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	00100002 	.word	0x00100002
 80054d8:	ffff0000 	.word	0xffff0000

080054dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	461a      	mov	r2, r3
 80054e8:	460b      	mov	r3, r1
 80054ea:	817b      	strh	r3, [r7, #10]
 80054ec:	4613      	mov	r3, r2
 80054ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054f4:	f7fe fe34 	bl	8004160 <HAL_GetTick>
 80054f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b20      	cmp	r3, #32
 8005504:	f040 823f 	bne.w	8005986 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2319      	movs	r3, #25
 800550e:	2201      	movs	r2, #1
 8005510:	497f      	ldr	r1, [pc, #508]	; (8005710 <HAL_I2C_Master_Receive+0x234>)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fcc0 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
 8005520:	e232      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_I2C_Master_Receive+0x54>
 800552c:	2302      	movs	r3, #2
 800552e:	e22b      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d007      	beq.n	8005556 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005564:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2222      	movs	r2, #34	; 0x22
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2210      	movs	r2, #16
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	893a      	ldrh	r2, [r7, #8]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a5f      	ldr	r2, [pc, #380]	; (8005714 <HAL_I2C_Master_Receive+0x238>)
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005598:	8979      	ldrh	r1, [r7, #10]
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fbac 	bl	8005cfc <I2C_MasterRequestRead>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e1ec      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d113      	bne.n	80055de <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e1c0      	b.n	8005960 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d11e      	bne.n	8005624 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055f6:	b672      	cpsid	i
}
 80055f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005620:	b662      	cpsie	i
}
 8005622:	e035      	b.n	8005690 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	2b02      	cmp	r3, #2
 800562a:	d11e      	bne.n	800566a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800563c:	b672      	cpsid	i
}
 800563e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005664:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005666:	b662      	cpsie	i
}
 8005668:	e012      	b.n	8005690 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005690:	e166      	b.n	8005960 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005696:	2b03      	cmp	r3, #3
 8005698:	f200 811f 	bhi.w	80058da <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d123      	bne.n	80056ec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fd4d 	bl	8006148 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e167      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ea:	e139      	b.n	8005960 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d152      	bne.n	800579a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	2200      	movs	r2, #0
 80056fc:	4906      	ldr	r1, [pc, #24]	; (8005718 <HAL_I2C_Master_Receive+0x23c>)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fbca 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e13c      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
 800570e:	bf00      	nop
 8005710:	00100002 	.word	0x00100002
 8005714:	ffff0000 	.word	0xffff0000
 8005718:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800571c:	b672      	cpsid	i
}
 800571e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005762:	b662      	cpsie	i
}
 8005764:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005798:	e0e2      	b.n	8005960 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	2200      	movs	r2, #0
 80057a2:	497b      	ldr	r1, [pc, #492]	; (8005990 <HAL_I2C_Master_Receive+0x4b4>)
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fb77 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0e9      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80057c4:	b672      	cpsid	i
}
 80057c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057fa:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_I2C_Master_Receive+0x4b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	4a65      	ldr	r2, [pc, #404]	; (8005998 <HAL_I2C_Master_Receive+0x4bc>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0a1a      	lsrs	r2, r3, #8
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00da      	lsls	r2, r3, #3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	3b01      	subs	r3, #1
 8005818:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d118      	bne.n	8005852 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005842:	b662      	cpsie	i
}
 8005844:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e09a      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d1d9      	bne.n	8005814 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058a2:	b662      	cpsie	i
}
 80058a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058d8:	e042      	b.n	8005960 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fc32 	bl	8006148 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e04c      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d118      	bne.n	8005960 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f ae94 	bne.w	8005692 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005986:	2302      	movs	r3, #2
  }
}
 8005988:	4618      	mov	r0, r3
 800598a:	3728      	adds	r7, #40	; 0x28
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	00010004 	.word	0x00010004
 8005994:	20000604 	.word	0x20000604
 8005998:	14f8b589 	.word	0x14f8b589

0800599c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	460b      	mov	r3, r1
 80059aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80059ac:	f7fe fbd8 	bl	8004160 <HAL_GetTick>
 80059b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80059b2:	2301      	movs	r3, #1
 80059b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b20      	cmp	r3, #32
 80059c0:	f040 8111 	bne.w	8005be6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2319      	movs	r3, #25
 80059ca:	2201      	movs	r2, #1
 80059cc:	4988      	ldr	r1, [pc, #544]	; (8005bf0 <HAL_I2C_IsDeviceReady+0x254>)
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa62 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
 80059dc:	e104      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_I2C_IsDeviceReady+0x50>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e0fd      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d007      	beq.n	8005a12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2224      	movs	r2, #36	; 0x24
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a70      	ldr	r2, [pc, #448]	; (8005bf4 <HAL_I2C_IsDeviceReady+0x258>)
 8005a34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fa20 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6c:	d103      	bne.n	8005a76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e0b6      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a7a:	897b      	ldrh	r3, [r7, #10]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a8a:	f7fe fb69 	bl	8004160 <HAL_GetTick>
 8005a8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab4:	bf0c      	ite	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	2300      	movne	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005abe:	e025      	b.n	8005b0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ac0:	f7fe fb4e 	bl	8004160 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d302      	bcc.n	8005ad6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	22a0      	movs	r2, #160	; 0xa0
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	bf0c      	ite	eq
 8005aec:	2301      	moveq	r3, #1
 8005aee:	2300      	movne	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2ba0      	cmp	r3, #160	; 0xa0
 8005b16:	d005      	beq.n	8005b24 <HAL_I2C_IsDeviceReady+0x188>
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <HAL_I2C_IsDeviceReady+0x188>
 8005b1e:	7dbb      	ldrb	r3, [r7, #22]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0cd      	beq.n	8005ac0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d129      	bne.n	8005b8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	2319      	movs	r3, #25
 8005b66:	2201      	movs	r2, #1
 8005b68:	4921      	ldr	r1, [pc, #132]	; (8005bf0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f994 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e036      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e02c      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ba6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2319      	movs	r3, #25
 8005bae:	2201      	movs	r2, #1
 8005bb0:	490f      	ldr	r1, [pc, #60]	; (8005bf0 <HAL_I2C_IsDeviceReady+0x254>)
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f970 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e012      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	f4ff af32 	bcc.w	8005a36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	00100002 	.word	0x00100002
 8005bf4:	ffff0000 	.word	0xffff0000

08005bf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	460b      	mov	r3, r1
 8005c06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d006      	beq.n	8005c22 <I2C_MasterRequestWrite+0x2a>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d003      	beq.n	8005c22 <I2C_MasterRequestWrite+0x2a>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c20:	d108      	bne.n	8005c34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e00b      	b.n	8005c4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	2b12      	cmp	r3, #18
 8005c3a:	d107      	bne.n	8005c4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f91d 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d103      	bne.n	8005c7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e035      	b.n	8005cec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	d108      	bne.n	8005c9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c98:	611a      	str	r2, [r3, #16]
 8005c9a:	e01b      	b.n	8005cd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c9c:	897b      	ldrh	r3, [r7, #10]
 8005c9e:	11db      	asrs	r3, r3, #7
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 0306 	and.w	r3, r3, #6
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f063 030f 	orn	r3, r3, #15
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	490e      	ldr	r1, [pc, #56]	; (8005cf4 <I2C_MasterRequestWrite+0xfc>)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f943 	bl	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e010      	b.n	8005cec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4907      	ldr	r1, [pc, #28]	; (8005cf8 <I2C_MasterRequestWrite+0x100>)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f933 	bl	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	00010008 	.word	0x00010008
 8005cf8:	00010002 	.word	0x00010002

08005cfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d006      	beq.n	8005d36 <I2C_MasterRequestRead+0x3a>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d003      	beq.n	8005d36 <I2C_MasterRequestRead+0x3a>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d34:	d108      	bne.n	8005d48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e00b      	b.n	8005d60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	2b11      	cmp	r3, #17
 8005d4e:	d107      	bne.n	8005d60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f893 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d103      	bne.n	8005d90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e079      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d9c:	d108      	bne.n	8005db0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d9e:	897b      	ldrh	r3, [r7, #10]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e05f      	b.n	8005e70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005db0:	897b      	ldrh	r3, [r7, #10]
 8005db2:	11db      	asrs	r3, r3, #7
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 0306 	and.w	r3, r3, #6
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f063 030f 	orn	r3, r3, #15
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4930      	ldr	r1, [pc, #192]	; (8005e90 <I2C_MasterRequestRead+0x194>)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8b9 	bl	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e054      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dde:	897b      	ldrh	r3, [r7, #10]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4929      	ldr	r1, [pc, #164]	; (8005e94 <I2C_MasterRequestRead+0x198>)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f8a9 	bl	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e044      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f831 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00d      	beq.n	8005e58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d103      	bne.n	8005e54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e017      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	11db      	asrs	r3, r3, #7
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 0306 	and.w	r3, r3, #6
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f063 030e 	orn	r3, r3, #14
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4907      	ldr	r1, [pc, #28]	; (8005e94 <I2C_MasterRequestRead+0x198>)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f865 	bl	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	00010008 	.word	0x00010008
 8005e94:	00010002 	.word	0x00010002

08005e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea8:	e025      	b.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d021      	beq.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	f7fe f955 	bl	8004160 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d116      	bne.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0220 	orr.w	r2, r3, #32
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e023      	b.n	8005f3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10d      	bne.n	8005f1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	43da      	mvns	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf0c      	ite	eq
 8005f12:	2301      	moveq	r3, #1
 8005f14:	2300      	movne	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	e00c      	b.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	43da      	mvns	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d0b6      	beq.n	8005eaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f54:	e051      	b.n	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f64:	d123      	bne.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f043 0204 	orr.w	r2, r3, #4
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e046      	b.n	800603c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d021      	beq.n	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fe f8d3 	bl	8004160 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d116      	bne.n	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e020      	b.n	800603c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10c      	bne.n	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	43da      	mvns	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	bf14      	ite	ne
 8006016:	2301      	movne	r3, #1
 8006018:	2300      	moveq	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	e00b      	b.n	8006036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	43da      	mvns	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4013      	ands	r3, r2
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	bf14      	ite	ne
 8006030:	2301      	movne	r3, #1
 8006032:	2300      	moveq	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d18d      	bne.n	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006050:	e02d      	b.n	80060ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f8ce 	bl	80061f4 <I2C_IsAcknowledgeFailed>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e02d      	b.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d021      	beq.n	80060ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606a:	f7fe f879 	bl	8004160 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d116      	bne.n	80060ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e007      	b.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d1ca      	bne.n	8006052 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060d2:	e02d      	b.n	8006130 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f88d 	bl	80061f4 <I2C_IsAcknowledgeFailed>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e02d      	b.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d021      	beq.n	8006130 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ec:	f7fe f838 	bl	8004160 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d302      	bcc.n	8006102 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d116      	bne.n	8006130 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	f043 0220 	orr.w	r2, r3, #32
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e007      	b.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b04      	cmp	r3, #4
 800613c:	d1ca      	bne.n	80060d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006154:	e042      	b.n	80061dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b10      	cmp	r3, #16
 8006162:	d119      	bne.n	8006198 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0210 	mvn.w	r2, #16
 800616c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e029      	b.n	80061ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006198:	f7fd ffe2 	bl	8004160 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d302      	bcc.n	80061ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d116      	bne.n	80061dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	f043 0220 	orr.w	r2, r3, #32
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e007      	b.n	80061ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d1b5      	bne.n	8006156 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d11b      	bne.n	8006244 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006214:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	f043 0204 	orr.w	r2, r3, #4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e272      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 8087 	beq.w	800637e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006270:	4b92      	ldr	r3, [pc, #584]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 030c 	and.w	r3, r3, #12
 8006278:	2b04      	cmp	r3, #4
 800627a:	d00c      	beq.n	8006296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800627c:	4b8f      	ldr	r3, [pc, #572]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 030c 	and.w	r3, r3, #12
 8006284:	2b08      	cmp	r3, #8
 8006286:	d112      	bne.n	80062ae <HAL_RCC_OscConfig+0x5e>
 8006288:	4b8c      	ldr	r3, [pc, #560]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d10b      	bne.n	80062ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006296:	4b89      	ldr	r3, [pc, #548]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d06c      	beq.n	800637c <HAL_RCC_OscConfig+0x12c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d168      	bne.n	800637c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e24c      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b6:	d106      	bne.n	80062c6 <HAL_RCC_OscConfig+0x76>
 80062b8:	4b80      	ldr	r3, [pc, #512]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a7f      	ldr	r2, [pc, #508]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	e02e      	b.n	8006324 <HAL_RCC_OscConfig+0xd4>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCC_OscConfig+0x98>
 80062ce:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a7a      	ldr	r2, [pc, #488]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b78      	ldr	r3, [pc, #480]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a77      	ldr	r2, [pc, #476]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e01d      	b.n	8006324 <HAL_RCC_OscConfig+0xd4>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062f0:	d10c      	bne.n	800630c <HAL_RCC_OscConfig+0xbc>
 80062f2:	4b72      	ldr	r3, [pc, #456]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a71      	ldr	r2, [pc, #452]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80062f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4b6f      	ldr	r3, [pc, #444]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a6e      	ldr	r2, [pc, #440]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e00b      	b.n	8006324 <HAL_RCC_OscConfig+0xd4>
 800630c:	4b6b      	ldr	r3, [pc, #428]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a6a      	ldr	r2, [pc, #424]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	4b68      	ldr	r3, [pc, #416]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a67      	ldr	r2, [pc, #412]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 800631e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d013      	beq.n	8006354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632c:	f7fd ff18 	bl	8004160 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006334:	f7fd ff14 	bl	8004160 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b64      	cmp	r3, #100	; 0x64
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e200      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006346:	4b5d      	ldr	r3, [pc, #372]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0xe4>
 8006352:	e014      	b.n	800637e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fd ff04 	bl	8004160 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800635c:	f7fd ff00 	bl	8004160 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b64      	cmp	r3, #100	; 0x64
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e1ec      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800636e:	4b53      	ldr	r3, [pc, #332]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x10c>
 800637a:	e000      	b.n	800637e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d063      	beq.n	8006452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800638a:	4b4c      	ldr	r3, [pc, #304]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006396:	4b49      	ldr	r3, [pc, #292]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d11c      	bne.n	80063dc <HAL_RCC_OscConfig+0x18c>
 80063a2:	4b46      	ldr	r3, [pc, #280]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d116      	bne.n	80063dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ae:	4b43      	ldr	r3, [pc, #268]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_RCC_OscConfig+0x176>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d001      	beq.n	80063c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e1c0      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c6:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4939      	ldr	r1, [pc, #228]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063da:	e03a      	b.n	8006452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d020      	beq.n	8006426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063e4:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <HAL_RCC_OscConfig+0x270>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ea:	f7fd feb9 	bl	8004160 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063f2:	f7fd feb5 	bl	8004160 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e1a1      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006404:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006410:	4b2a      	ldr	r3, [pc, #168]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4927      	ldr	r1, [pc, #156]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]
 8006424:	e015      	b.n	8006452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006426:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <HAL_RCC_OscConfig+0x270>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fd fe98 	bl	8004160 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006434:	f7fd fe94 	bl	8004160 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e180      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006446:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d03a      	beq.n	80064d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d019      	beq.n	800649a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006466:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <HAL_RCC_OscConfig+0x274>)
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800646c:	f7fd fe78 	bl	8004160 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006474:	f7fd fe74 	bl	8004160 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e160      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <HAL_RCC_OscConfig+0x26c>)
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006492:	2001      	movs	r0, #1
 8006494:	f000 fada 	bl	8006a4c <RCC_Delay>
 8006498:	e01c      	b.n	80064d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <HAL_RCC_OscConfig+0x274>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a0:	f7fd fe5e 	bl	8004160 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a6:	e00f      	b.n	80064c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a8:	f7fd fe5a 	bl	8004160 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d908      	bls.n	80064c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e146      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000
 80064c0:	42420000 	.word	0x42420000
 80064c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c8:	4b92      	ldr	r3, [pc, #584]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e9      	bne.n	80064a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a6 	beq.w	800662e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e6:	4b8b      	ldr	r3, [pc, #556]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	4b88      	ldr	r3, [pc, #544]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	4a87      	ldr	r2, [pc, #540]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fc:	61d3      	str	r3, [r2, #28]
 80064fe:	4b85      	ldr	r3, [pc, #532]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650e:	4b82      	ldr	r3, [pc, #520]	; (8006718 <HAL_RCC_OscConfig+0x4c8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d118      	bne.n	800654c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800651a:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <HAL_RCC_OscConfig+0x4c8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a7e      	ldr	r2, [pc, #504]	; (8006718 <HAL_RCC_OscConfig+0x4c8>)
 8006520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006526:	f7fd fe1b 	bl	8004160 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fd fe17 	bl	8004160 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b64      	cmp	r3, #100	; 0x64
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e103      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	4b75      	ldr	r3, [pc, #468]	; (8006718 <HAL_RCC_OscConfig+0x4c8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <HAL_RCC_OscConfig+0x312>
 8006554:	4b6f      	ldr	r3, [pc, #444]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	4a6e      	ldr	r2, [pc, #440]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6213      	str	r3, [r2, #32]
 8006560:	e02d      	b.n	80065be <HAL_RCC_OscConfig+0x36e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x334>
 800656a:	4b6a      	ldr	r3, [pc, #424]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	4a69      	ldr	r2, [pc, #420]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	6213      	str	r3, [r2, #32]
 8006576:	4b67      	ldr	r3, [pc, #412]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	4a66      	ldr	r2, [pc, #408]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	6213      	str	r3, [r2, #32]
 8006582:	e01c      	b.n	80065be <HAL_RCC_OscConfig+0x36e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b05      	cmp	r3, #5
 800658a:	d10c      	bne.n	80065a6 <HAL_RCC_OscConfig+0x356>
 800658c:	4b61      	ldr	r3, [pc, #388]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	4a60      	ldr	r2, [pc, #384]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	6213      	str	r3, [r2, #32]
 8006598:	4b5e      	ldr	r3, [pc, #376]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	4a5d      	ldr	r2, [pc, #372]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6213      	str	r3, [r2, #32]
 80065a4:	e00b      	b.n	80065be <HAL_RCC_OscConfig+0x36e>
 80065a6:	4b5b      	ldr	r3, [pc, #364]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	4a5a      	ldr	r2, [pc, #360]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	6213      	str	r3, [r2, #32]
 80065b2:	4b58      	ldr	r3, [pc, #352]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	4a57      	ldr	r2, [pc, #348]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80065b8:	f023 0304 	bic.w	r3, r3, #4
 80065bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d015      	beq.n	80065f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c6:	f7fd fdcb 	bl	8004160 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065cc:	e00a      	b.n	80065e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fd fdc7 	bl	8004160 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e0b1      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e4:	4b4b      	ldr	r3, [pc, #300]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0ee      	beq.n	80065ce <HAL_RCC_OscConfig+0x37e>
 80065f0:	e014      	b.n	800661c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f2:	f7fd fdb5 	bl	8004160 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f8:	e00a      	b.n	8006610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fd fdb1 	bl	8004160 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e09b      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006610:	4b40      	ldr	r3, [pc, #256]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1ee      	bne.n	80065fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d105      	bne.n	800662e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006622:	4b3c      	ldr	r3, [pc, #240]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4a3b      	ldr	r2, [pc, #236]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8087 	beq.w	8006746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006638:	4b36      	ldr	r3, [pc, #216]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f003 030c 	and.w	r3, r3, #12
 8006640:	2b08      	cmp	r3, #8
 8006642:	d061      	beq.n	8006708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d146      	bne.n	80066da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664c:	4b33      	ldr	r3, [pc, #204]	; (800671c <HAL_RCC_OscConfig+0x4cc>)
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006652:	f7fd fd85 	bl	8004160 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665a:	f7fd fd81 	bl	8004160 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e06d      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800666c:	4b29      	ldr	r3, [pc, #164]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f0      	bne.n	800665a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006680:	d108      	bne.n	8006694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4921      	ldr	r1, [pc, #132]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006694:	4b1f      	ldr	r3, [pc, #124]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a19      	ldr	r1, [r3, #32]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	430b      	orrs	r3, r1
 80066a6:	491b      	ldr	r1, [pc, #108]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066ac:	4b1b      	ldr	r3, [pc, #108]	; (800671c <HAL_RCC_OscConfig+0x4cc>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b2:	f7fd fd55 	bl	8004160 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ba:	f7fd fd51 	bl	8004160 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e03d      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066cc:	4b11      	ldr	r3, [pc, #68]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0f0      	beq.n	80066ba <HAL_RCC_OscConfig+0x46a>
 80066d8:	e035      	b.n	8006746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <HAL_RCC_OscConfig+0x4cc>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e0:	f7fd fd3e 	bl	8004160 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e8:	f7fd fd3a 	bl	8004160 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e026      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_RCC_OscConfig+0x4c4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x498>
 8006706:	e01e      	b.n	8006746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d107      	bne.n	8006720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e019      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
 8006714:	40021000 	.word	0x40021000
 8006718:	40007000 	.word	0x40007000
 800671c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_OscConfig+0x500>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	429a      	cmp	r2, r3
 8006732:	d106      	bne.n	8006742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673e:	429a      	cmp	r2, r3
 8006740:	d001      	beq.n	8006746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40021000 	.word	0x40021000

08006754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0d0      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006768:	4b6a      	ldr	r3, [pc, #424]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d910      	bls.n	8006798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b67      	ldr	r3, [pc, #412]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 0207 	bic.w	r2, r3, #7
 800677e:	4965      	ldr	r1, [pc, #404]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b63      	ldr	r3, [pc, #396]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0b8      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d020      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067b0:	4b59      	ldr	r3, [pc, #356]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a58      	ldr	r2, [pc, #352]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c8:	4b53      	ldr	r3, [pc, #332]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	4a52      	ldr	r2, [pc, #328]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d4:	4b50      	ldr	r3, [pc, #320]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	494d      	ldr	r1, [pc, #308]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d040      	beq.n	8006874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d107      	bne.n	800680a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b47      	ldr	r3, [pc, #284]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d115      	bne.n	8006832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e07f      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006812:	4b41      	ldr	r3, [pc, #260]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e073      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006822:	4b3d      	ldr	r3, [pc, #244]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e06b      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006832:	4b39      	ldr	r3, [pc, #228]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f023 0203 	bic.w	r2, r3, #3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	4936      	ldr	r1, [pc, #216]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	4313      	orrs	r3, r2
 8006842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006844:	f7fd fc8c 	bl	8004160 <HAL_GetTick>
 8006848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684a:	e00a      	b.n	8006862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800684c:	f7fd fc88 	bl	8004160 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f241 3288 	movw	r2, #5000	; 0x1388
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e053      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	4b2d      	ldr	r3, [pc, #180]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f003 020c 	and.w	r2, r3, #12
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	429a      	cmp	r2, r3
 8006872:	d1eb      	bne.n	800684c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006874:	4b27      	ldr	r3, [pc, #156]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d210      	bcs.n	80068a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006882:	4b24      	ldr	r3, [pc, #144]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f023 0207 	bic.w	r2, r3, #7
 800688a:	4922      	ldr	r1, [pc, #136]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	4313      	orrs	r3, r2
 8006890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b20      	ldr	r3, [pc, #128]	; (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e032      	b.n	800690a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068b0:	4b19      	ldr	r3, [pc, #100]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4916      	ldr	r1, [pc, #88]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	490e      	ldr	r1, [pc, #56]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068e2:	f000 f821 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	490a      	ldr	r1, [pc, #40]	; (800691c <HAL_RCC_ClockConfig+0x1c8>)
 80068f4:	5ccb      	ldrb	r3, [r1, r3]
 80068f6:	fa22 f303 	lsr.w	r3, r2, r3
 80068fa:	4a09      	ldr	r2, [pc, #36]	; (8006920 <HAL_RCC_ClockConfig+0x1cc>)
 80068fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_RCC_ClockConfig+0x1d0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd fbea 	bl	80040dc <HAL_InitTick>

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40022000 	.word	0x40022000
 8006918:	40021000 	.word	0x40021000
 800691c:	0800d75c 	.word	0x0800d75c
 8006920:	20000604 	.word	0x20000604
 8006924:	20000608 	.word	0x20000608

08006928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006928:	b490      	push	{r4, r7}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800692e:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006930:	1d3c      	adds	r4, r7, #4
 8006932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006938:	f240 2301 	movw	r3, #513	; 0x201
 800693c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006952:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	2b04      	cmp	r3, #4
 8006960:	d002      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x40>
 8006962:	2b08      	cmp	r3, #8
 8006964:	d003      	beq.n	800696e <HAL_RCC_GetSysClockFreq+0x46>
 8006966:	e02b      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006968:	4b1c      	ldr	r3, [pc, #112]	; (80069dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800696a:	623b      	str	r3, [r7, #32]
      break;
 800696c:	e02b      	b.n	80069c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	0c9b      	lsrs	r3, r3, #18
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3328      	adds	r3, #40	; 0x28
 8006978:	443b      	add	r3, r7
 800697a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800697e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d012      	beq.n	80069b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800698a:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	0c5b      	lsrs	r3, r3, #17
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	3328      	adds	r3, #40	; 0x28
 8006996:	443b      	add	r3, r7
 8006998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800699c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80069a2:	fb03 f202 	mul.w	r2, r3, r2
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
 80069ae:	e004      	b.n	80069ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4a0b      	ldr	r2, [pc, #44]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	623b      	str	r3, [r7, #32]
      break;
 80069be:	e002      	b.n	80069c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069c2:	623b      	str	r3, [r7, #32]
      break;
 80069c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069c6:	6a3b      	ldr	r3, [r7, #32]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3728      	adds	r7, #40	; 0x28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc90      	pop	{r4, r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	0800d74c 	.word	0x0800d74c
 80069d8:	40021000 	.word	0x40021000
 80069dc:	00f42400 	.word	0x00f42400
 80069e0:	003d0900 	.word	0x003d0900
 80069e4:	007a1200 	.word	0x007a1200

080069e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069ec:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80069ee:	681b      	ldr	r3, [r3, #0]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr
 80069f8:	20000604 	.word	0x20000604

080069fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a00:	f7ff fff2 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a04:	4602      	mov	r2, r0
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	4903      	ldr	r1, [pc, #12]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a12:	5ccb      	ldrb	r3, [r1, r3]
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	0800d76c 	.word	0x0800d76c

08006a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a28:	f7ff ffde 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	0adb      	lsrs	r3, r3, #11
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40021000 	.word	0x40021000
 8006a48:	0800d76c 	.word	0x0800d76c

08006a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <RCC_Delay+0x34>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a0a      	ldr	r2, [pc, #40]	; (8006a84 <RCC_Delay+0x38>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	0a5b      	lsrs	r3, r3, #9
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a68:	bf00      	nop
  }
  while (Delay --);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1e5a      	subs	r2, r3, #1
 8006a6e:	60fa      	str	r2, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f9      	bne.n	8006a68 <RCC_Delay+0x1c>
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr
 8006a80:	20000604 	.word	0x20000604
 8006a84:	10624dd3 	.word	0x10624dd3

08006a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d07d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aa8:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab4:	4b4c      	ldr	r3, [pc, #304]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	4a4b      	ldr	r2, [pc, #300]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abe:	61d3      	str	r3, [r2, #28]
 8006ac0:	4b49      	ldr	r3, [pc, #292]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad0:	4b46      	ldr	r3, [pc, #280]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d118      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006adc:	4b43      	ldr	r3, [pc, #268]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a42      	ldr	r2, [pc, #264]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae8:	f7fd fb3a 	bl	8004160 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aee:	e008      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af0:	f7fd fb36 	bl	8004160 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	; 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e06d      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b02:	4b3a      	ldr	r3, [pc, #232]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b0e:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02e      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d027      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b36:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3c:	4b2c      	ldr	r3, [pc, #176]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b42:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d014      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fd fb05 	bl	8004160 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b58:	e00a      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5a:	f7fd fb01 	bl	8004160 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e036      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ee      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4917      	ldr	r1, [pc, #92]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b94:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	490b      	ldr	r1, [pc, #44]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	4904      	ldr	r1, [pc, #16]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40021000 	.word	0x40021000
 8006bec:	40007000 	.word	0x40007000
 8006bf0:	42420440 	.word	0x42420440

08006bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e041      	b.n	8006c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fc ff9a 	bl	8003b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f000 fe7e 	bl	8007934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d001      	beq.n	8006cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e044      	b.n	8006d36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_TIM_Base_Start_IT+0xac>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_TIM_Base_Start_IT+0xb0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <HAL_TIM_Base_Start_IT+0xb4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a16      	ldr	r2, [pc, #88]	; (8006d4c <HAL_TIM_Base_Start_IT+0xb8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x6c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <HAL_TIM_Base_Start_IT+0xbc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d111      	bne.n	8006d24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d010      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	e007      	b.n	8006d34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	40013400 	.word	0x40013400
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00

08006d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e041      	b.n	8006dea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f839 	bl	8006df2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f000 fdce 	bl	8007934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_TIM_PWM_Start+0x24>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	bf14      	ite	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	2300      	moveq	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	e022      	b.n	8006e6e <HAL_TIM_PWM_Start+0x6a>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d109      	bne.n	8006e42 <HAL_TIM_PWM_Start+0x3e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	bf14      	ite	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	2300      	moveq	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	e015      	b.n	8006e6e <HAL_TIM_PWM_Start+0x6a>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d109      	bne.n	8006e5c <HAL_TIM_PWM_Start+0x58>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	e008      	b.n	8006e6e <HAL_TIM_PWM_Start+0x6a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e072      	b.n	8006f5c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <HAL_TIM_PWM_Start+0x82>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e84:	e013      	b.n	8006eae <HAL_TIM_PWM_Start+0xaa>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d104      	bne.n	8006e96 <HAL_TIM_PWM_Start+0x92>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e94:	e00b      	b.n	8006eae <HAL_TIM_PWM_Start+0xaa>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d104      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ea4:	e003      	b.n	8006eae <HAL_TIM_PWM_Start+0xaa>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fff8 	bl	8007eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a28      	ldr	r2, [pc, #160]	; (8006f64 <HAL_TIM_PWM_Start+0x160>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0xcc>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a27      	ldr	r2, [pc, #156]	; (8006f68 <HAL_TIM_PWM_Start+0x164>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIM_PWM_Start+0xd0>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <HAL_TIM_PWM_Start+0xd2>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <HAL_TIM_PWM_Start+0x160>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <HAL_TIM_PWM_Start+0x122>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <HAL_TIM_PWM_Start+0x164>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <HAL_TIM_PWM_Start+0x122>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f06:	d00e      	beq.n	8006f26 <HAL_TIM_PWM_Start+0x122>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_TIM_PWM_Start+0x168>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_TIM_PWM_Start+0x122>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <HAL_TIM_PWM_Start+0x16c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_TIM_PWM_Start+0x122>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <HAL_TIM_PWM_Start+0x170>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d111      	bne.n	8006f4a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b06      	cmp	r3, #6
 8006f36:	d010      	beq.n	8006f5a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f48:	e007      	b.n	8006f5a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0201 	orr.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40012c00 	.word	0x40012c00
 8006f68:	40013400 	.word	0x40013400
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00

08006f78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_TIM_PWM_Start_IT+0x24>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e022      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x6a>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d109      	bne.n	8006fb6 <HAL_TIM_PWM_Start_IT+0x3e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	e015      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x6a>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d109      	bne.n	8006fd0 <HAL_TIM_PWM_Start_IT+0x58>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e008      	b.n	8006fe2 <HAL_TIM_PWM_Start_IT+0x6a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0b8      	b.n	800715c <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_PWM_Start_IT+0x82>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff8:	e013      	b.n	8007022 <HAL_TIM_PWM_Start_IT+0xaa>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start_IT+0x92>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007008:	e00b      	b.n	8007022 <HAL_TIM_PWM_Start_IT+0xaa>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start_IT+0xa2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007018:	e003      	b.n	8007022 <HAL_TIM_PWM_Start_IT+0xaa>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d841      	bhi.n	80070ac <HAL_TIM_PWM_Start_IT+0x134>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <HAL_TIM_PWM_Start_IT+0xb8>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007065 	.word	0x08007065
 8007034:	080070ad 	.word	0x080070ad
 8007038:	080070ad 	.word	0x080070ad
 800703c:	080070ad 	.word	0x080070ad
 8007040:	08007077 	.word	0x08007077
 8007044:	080070ad 	.word	0x080070ad
 8007048:	080070ad 	.word	0x080070ad
 800704c:	080070ad 	.word	0x080070ad
 8007050:	08007089 	.word	0x08007089
 8007054:	080070ad 	.word	0x080070ad
 8007058:	080070ad 	.word	0x080070ad
 800705c:	080070ad 	.word	0x080070ad
 8007060:	0800709b 	.word	0x0800709b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0202 	orr.w	r2, r2, #2
 8007072:	60da      	str	r2, [r3, #12]
      break;
 8007074:	e01b      	b.n	80070ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0204 	orr.w	r2, r2, #4
 8007084:	60da      	str	r2, [r3, #12]
      break;
 8007086:	e012      	b.n	80070ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0208 	orr.w	r2, r2, #8
 8007096:	60da      	str	r2, [r3, #12]
      break;
 8007098:	e009      	b.n	80070ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0210 	orr.w	r2, r2, #16
 80070a8:	60da      	str	r2, [r3, #12]
      break;
 80070aa:	e000      	b.n	80070ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80070ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2201      	movs	r2, #1
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fef8 	bl	8007eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a28      	ldr	r2, [pc, #160]	; (8007164 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_TIM_PWM_Start_IT+0x158>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a27      	ldr	r2, [pc, #156]	; (8007168 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d101      	bne.n	80070d4 <HAL_TIM_PWM_Start_IT+0x15c>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <HAL_TIM_PWM_Start_IT+0x15e>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d018      	beq.n	8007126 <HAL_TIM_PWM_Start_IT+0x1ae>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d013      	beq.n	8007126 <HAL_TIM_PWM_Start_IT+0x1ae>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007106:	d00e      	beq.n	8007126 <HAL_TIM_PWM_Start_IT+0x1ae>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_TIM_PWM_Start_IT+0x1f4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d009      	beq.n	8007126 <HAL_TIM_PWM_Start_IT+0x1ae>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d004      	beq.n	8007126 <HAL_TIM_PWM_Start_IT+0x1ae>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a14      	ldr	r2, [pc, #80]	; (8007174 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d111      	bne.n	800714a <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b06      	cmp	r3, #6
 8007136:	d010      	beq.n	800715a <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007148:	e007      	b.n	800715a <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40012c00 	.word	0x40012c00
 8007168:	40013400 	.word	0x40013400
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40000c00 	.word	0x40000c00

08007178 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e093      	b.n	80072b4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fc fd65 	bl	8003c70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071bc:	f023 0307 	bic.w	r3, r3, #7
 80071c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f000 fbb1 	bl	8007934 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fa:	f023 0303 	bic.w	r3, r3, #3
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	4313      	orrs	r3, r2
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007218:	f023 030c 	bic.w	r3, r3, #12
 800721c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	4313      	orrs	r3, r2
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	011a      	lsls	r2, r3, #4
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	031b      	lsls	r3, r3, #12
 8007248:	4313      	orrs	r3, r2
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007256:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	4313      	orrs	r3, r2
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d110      	bne.n	800730e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d102      	bne.n	80072f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072f2:	7b7b      	ldrb	r3, [r7, #13]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d001      	beq.n	80072fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e069      	b.n	80073d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800730c:	e031      	b.n	8007372 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b04      	cmp	r3, #4
 8007312:	d110      	bne.n	8007336 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d102      	bne.n	8007320 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800731a:	7b3b      	ldrb	r3, [r7, #12]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d001      	beq.n	8007324 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e055      	b.n	80073d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007334:	e01d      	b.n	8007372 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d108      	bne.n	800734e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d105      	bne.n	800734e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007342:	7b7b      	ldrb	r3, [r7, #13]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d102      	bne.n	800734e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007348:	7b3b      	ldrb	r3, [r7, #12]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d001      	beq.n	8007352 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e03e      	b.n	80073d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_TIM_Encoder_Start+0xc4>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b04      	cmp	r3, #4
 800737c:	d008      	beq.n	8007390 <HAL_TIM_Encoder_Start+0xd4>
 800737e:	e00f      	b.n	80073a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fd8f 	bl	8007eac <TIM_CCxChannelCmd>
      break;
 800738e:	e016      	b.n	80073be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2201      	movs	r2, #1
 8007396:	2104      	movs	r1, #4
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fd87 	bl	8007eac <TIM_CCxChannelCmd>
      break;
 800739e:	e00e      	b.n	80073be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	2100      	movs	r1, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fd7f 	bl	8007eac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2201      	movs	r2, #1
 80073b4:	2104      	movs	r1, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fd78 	bl	8007eac <TIM_CCxChannelCmd>
      break;
 80073bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0201 	orr.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d122      	bne.n	8007434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d11b      	bne.n	8007434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0202 	mvn.w	r2, #2
 8007404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa6f 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 8007420:	e005      	b.n	800742e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa62 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa71 	bl	8007910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d122      	bne.n	8007488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b04      	cmp	r3, #4
 800744e:	d11b      	bne.n	8007488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0204 	mvn.w	r2, #4
 8007458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa45 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa38 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa47 	bl	8007910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b08      	cmp	r3, #8
 8007494:	d122      	bne.n	80074dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d11b      	bne.n	80074dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0208 	mvn.w	r2, #8
 80074ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2204      	movs	r2, #4
 80074b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa1b 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa0e 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fa1d 	bl	8007910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0210 	mvn.w	r2, #16
 8007500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2208      	movs	r2, #8
 8007506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f9f1 	bl	80078fe <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f9e4 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9f3 	bl	8007910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b01      	cmp	r3, #1
 800753c:	d10e      	bne.n	800755c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d107      	bne.n	800755c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0201 	mvn.w	r2, #1
 8007554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fb faf2 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d10e      	bne.n	8007588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007574:	2b80      	cmp	r3, #128	; 0x80
 8007576:	d107      	bne.n	8007588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fd7c 	bl	8008080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d10e      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d107      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f9b7 	bl	8007922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d10e      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d107      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0220 	mvn.w	r2, #32
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fd47 	bl	800806e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075fe:	2302      	movs	r3, #2
 8007600:	e0ac      	b.n	800775c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b0c      	cmp	r3, #12
 800760e:	f200 809f 	bhi.w	8007750 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	0800764d 	.word	0x0800764d
 800761c:	08007751 	.word	0x08007751
 8007620:	08007751 	.word	0x08007751
 8007624:	08007751 	.word	0x08007751
 8007628:	0800768d 	.word	0x0800768d
 800762c:	08007751 	.word	0x08007751
 8007630:	08007751 	.word	0x08007751
 8007634:	08007751 	.word	0x08007751
 8007638:	080076cf 	.word	0x080076cf
 800763c:	08007751 	.word	0x08007751
 8007640:	08007751 	.word	0x08007751
 8007644:	08007751 	.word	0x08007751
 8007648:	0800770f 	.word	0x0800770f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f9e8 	bl	8007a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0208 	orr.w	r2, r2, #8
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0204 	bic.w	r2, r2, #4
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	619a      	str	r2, [r3, #24]
      break;
 800768a:	e062      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fa38 	bl	8007b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	619a      	str	r2, [r3, #24]
      break;
 80076cc:	e041      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fa8b 	bl	8007bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0204 	bic.w	r2, r2, #4
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	61da      	str	r2, [r3, #28]
      break;
 800770c:	e021      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fadf 	bl	8007cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69d9      	ldr	r1, [r3, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	021a      	lsls	r2, r3, #8
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	61da      	str	r2, [r3, #28]
      break;
 800774e:	e000      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIM_ConfigClockSource+0x18>
 8007778:	2302      	movs	r3, #2
 800777a:	e0b3      	b.n	80078e4 <HAL_TIM_ConfigClockSource+0x180>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800779a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b4:	d03e      	beq.n	8007834 <HAL_TIM_ConfigClockSource+0xd0>
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	f200 8087 	bhi.w	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c2:	f000 8085 	beq.w	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	d87f      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077cc:	2b70      	cmp	r3, #112	; 0x70
 80077ce:	d01a      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0xa2>
 80077d0:	2b70      	cmp	r3, #112	; 0x70
 80077d2:	d87b      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077d4:	2b60      	cmp	r3, #96	; 0x60
 80077d6:	d050      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x116>
 80077d8:	2b60      	cmp	r3, #96	; 0x60
 80077da:	d877      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077dc:	2b50      	cmp	r3, #80	; 0x50
 80077de:	d03c      	beq.n	800785a <HAL_TIM_ConfigClockSource+0xf6>
 80077e0:	2b50      	cmp	r3, #80	; 0x50
 80077e2:	d873      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d058      	beq.n	800789a <HAL_TIM_ConfigClockSource+0x136>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d86f      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077ec:	2b30      	cmp	r3, #48	; 0x30
 80077ee:	d064      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
 80077f0:	2b30      	cmp	r3, #48	; 0x30
 80077f2:	d86b      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d060      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d867      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05c      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
 8007800:	2b10      	cmp	r3, #16
 8007802:	d05a      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007804:	e062      	b.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6899      	ldr	r1, [r3, #8]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f000 fb2a 	bl	8007e6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007828:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	609a      	str	r2, [r3, #8]
      break;
 8007832:	e04e      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	6899      	ldr	r1, [r3, #8]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f000 fb13 	bl	8007e6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007856:	609a      	str	r2, [r3, #8]
      break;
 8007858:	e03b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6859      	ldr	r1, [r3, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	461a      	mov	r2, r3
 8007868:	f000 fa8a 	bl	8007d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2150      	movs	r1, #80	; 0x50
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fae1 	bl	8007e3a <TIM_ITRx_SetConfig>
      break;
 8007878:	e02b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	f000 faa8 	bl	8007ddc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2160      	movs	r1, #96	; 0x60
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fad1 	bl	8007e3a <TIM_ITRx_SetConfig>
      break;
 8007898:	e01b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fa6a 	bl	8007d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2140      	movs	r1, #64	; 0x40
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fac1 	bl	8007e3a <TIM_ITRx_SetConfig>
      break;
 80078b8:	e00b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f000 fab8 	bl	8007e3a <TIM_ITRx_SetConfig>
        break;
 80078ca:	e002      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078cc:	bf00      	nop
 80078ce:	e000      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a33      	ldr	r2, [pc, #204]	; (8007a14 <TIM_Base_SetConfig+0xe0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d013      	beq.n	8007974 <TIM_Base_SetConfig+0x40>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a32      	ldr	r2, [pc, #200]	; (8007a18 <TIM_Base_SetConfig+0xe4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00f      	beq.n	8007974 <TIM_Base_SetConfig+0x40>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795a:	d00b      	beq.n	8007974 <TIM_Base_SetConfig+0x40>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a2f      	ldr	r2, [pc, #188]	; (8007a1c <TIM_Base_SetConfig+0xe8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a2e      	ldr	r2, [pc, #184]	; (8007a20 <TIM_Base_SetConfig+0xec>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <TIM_Base_SetConfig+0xf0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d108      	bne.n	8007986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a22      	ldr	r2, [pc, #136]	; (8007a14 <TIM_Base_SetConfig+0xe0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d013      	beq.n	80079b6 <TIM_Base_SetConfig+0x82>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a21      	ldr	r2, [pc, #132]	; (8007a18 <TIM_Base_SetConfig+0xe4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00f      	beq.n	80079b6 <TIM_Base_SetConfig+0x82>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799c:	d00b      	beq.n	80079b6 <TIM_Base_SetConfig+0x82>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a1e      	ldr	r2, [pc, #120]	; (8007a1c <TIM_Base_SetConfig+0xe8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d007      	beq.n	80079b6 <TIM_Base_SetConfig+0x82>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <TIM_Base_SetConfig+0xec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_Base_SetConfig+0x82>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <TIM_Base_SetConfig+0xf0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d108      	bne.n	80079c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <TIM_Base_SetConfig+0xe0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d003      	beq.n	80079fc <TIM_Base_SetConfig+0xc8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a08      	ldr	r2, [pc, #32]	; (8007a18 <TIM_Base_SetConfig+0xe4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d103      	bne.n	8007a04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	615a      	str	r2, [r3, #20]
}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40013400 	.word	0x40013400
 8007a1c:	40000400 	.word	0x40000400
 8007a20:	40000800 	.word	0x40000800
 8007a24:	40000c00 	.word	0x40000c00

08007a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0201 	bic.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0302 	bic.w	r3, r3, #2
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a20      	ldr	r2, [pc, #128]	; (8007b00 <TIM_OC1_SetConfig+0xd8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_OC1_SetConfig+0x64>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a1f      	ldr	r2, [pc, #124]	; (8007b04 <TIM_OC1_SetConfig+0xdc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d10c      	bne.n	8007aa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f023 0308 	bic.w	r3, r3, #8
 8007a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f023 0304 	bic.w	r3, r3, #4
 8007aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <TIM_OC1_SetConfig+0xd8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_OC1_SetConfig+0x8e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a14      	ldr	r2, [pc, #80]	; (8007b04 <TIM_OC1_SetConfig+0xdc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d111      	bne.n	8007ada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40013400 	.word	0x40013400

08007b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f023 0210 	bic.w	r2, r3, #16
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f023 0320 	bic.w	r3, r3, #32
 8007b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <TIM_OC2_SetConfig+0xe0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC2_SetConfig+0x68>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a20      	ldr	r2, [pc, #128]	; (8007bec <TIM_OC2_SetConfig+0xe4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10d      	bne.n	8007b8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <TIM_OC2_SetConfig+0xe0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC2_SetConfig+0x94>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <TIM_OC2_SetConfig+0xe4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d113      	bne.n	8007bc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400

08007bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0303 	bic.w	r3, r3, #3
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a21      	ldr	r2, [pc, #132]	; (8007cd0 <TIM_OC3_SetConfig+0xe0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC3_SetConfig+0x66>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a20      	ldr	r2, [pc, #128]	; (8007cd4 <TIM_OC3_SetConfig+0xe4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d10d      	bne.n	8007c72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a16      	ldr	r2, [pc, #88]	; (8007cd0 <TIM_OC3_SetConfig+0xe0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC3_SetConfig+0x92>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <TIM_OC3_SetConfig+0xe4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d113      	bne.n	8007caa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	621a      	str	r2, [r3, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40013400 	.word	0x40013400

08007cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	031b      	lsls	r3, r3, #12
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <TIM_OC4_SetConfig+0xa0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC4_SetConfig+0x68>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a10      	ldr	r2, [pc, #64]	; (8007d7c <TIM_OC4_SetConfig+0xa4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d109      	bne.n	8007d54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	019b      	lsls	r3, r3, #6
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	621a      	str	r2, [r3, #32]
}
 8007d6e:	bf00      	nop
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40013400 	.word	0x40013400

08007d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f023 030a 	bic.w	r3, r3, #10
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	f023 0210 	bic.w	r2, r3, #16
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	031b      	lsls	r3, r3, #12
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	621a      	str	r2, [r3, #32]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr

08007e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f043 0307 	orr.w	r3, r3, #7
 8007e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	609a      	str	r2, [r3, #8]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr

08007e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	021a      	lsls	r2, r3, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	609a      	str	r2, [r3, #8]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1a      	ldr	r2, [r3, #32]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	43db      	mvns	r3, r3
 8007ece:	401a      	ands	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a1a      	ldr	r2, [r3, #32]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e050      	b.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1b      	ldr	r2, [pc, #108]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d018      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a19      	ldr	r2, [pc, #100]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a14      	ldr	r2, [pc, #80]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a12      	ldr	r2, [pc, #72]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10c      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40013400 	.word	0x40013400
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00

08007fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e03d      	b.n	8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr

0800806e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr

08008092 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e03f      	b.n	8008124 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7fb ff2f 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2224      	movs	r2, #36	; 0x24
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fc84 	bl	80089e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800810a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	; 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b20      	cmp	r3, #32
 800814a:	d17c      	bne.n	8008246 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Transmit+0x2c>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e075      	b.n	8008248 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_UART_Transmit+0x3e>
 8008166:	2302      	movs	r3, #2
 8008168:	e06e      	b.n	8008248 <HAL_UART_Transmit+0x11c>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2221      	movs	r2, #33	; 0x21
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008180:	f7fb ffee 	bl	8004160 <HAL_GetTick>
 8008184:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	88fa      	ldrh	r2, [r7, #6]
 800818a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819a:	d108      	bne.n	80081ae <HAL_UART_Transmit+0x82>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	e003      	b.n	80081b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081be:	e02a      	b.n	8008216 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2200      	movs	r2, #0
 80081c8:	2180      	movs	r1, #128	; 0x80
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fa37 	bl	800863e <UART_WaitOnFlagUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e036      	b.n	8008248 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10b      	bne.n	80081f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	3302      	adds	r3, #2
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e007      	b.n	8008208 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	3301      	adds	r3, #1
 8008206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1cf      	bne.n	80081c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2200      	movs	r2, #0
 8008228:	2140      	movs	r1, #64	; 0x40
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 fa07 	bl	800863e <UART_WaitOnFlagUntilTimeout>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e006      	b.n	8008248 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	e000      	b.n	8008248 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008246:	2302      	movs	r3, #2
  }
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b20      	cmp	r3, #32
 8008268:	d11d      	bne.n	80082a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_UART_Receive_IT+0x26>
 8008270:	88fb      	ldrh	r3, [r7, #6]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e016      	b.n	80082a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_UART_Receive_IT+0x38>
 8008284:	2302      	movs	r3, #2
 8008286:	e00f      	b.n	80082a8 <HAL_UART_Receive_IT+0x58>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	461a      	mov	r2, r3
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fa18 	bl	80086d2 <UART_Start_Receive_IT>
 80082a2:	4603      	mov	r3, r0
 80082a4:	e000      	b.n	80082a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082a6:	2302      	movs	r3, #2
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08a      	sub	sp, #40	; 0x28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <HAL_UART_IRQHandler+0x52>
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fac9 	bl	8008892 <UART_Receive_IT>
      return;
 8008300:	e17b      	b.n	80085fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80b1 	beq.w	800846c <HAL_UART_IRQHandler+0x1bc>
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <HAL_UART_IRQHandler+0x70>
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80a6 	beq.w	800846c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_UART_IRQHandler+0x90>
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	f043 0201 	orr.w	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <HAL_UART_IRQHandler+0xb0>
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	f043 0202 	orr.w	r2, r3, #2
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <HAL_UART_IRQHandler+0xd0>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	f043 0204 	orr.w	r2, r3, #4
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	f003 0308 	and.w	r3, r3, #8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00f      	beq.n	80083aa <HAL_UART_IRQHandler+0xfa>
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <HAL_UART_IRQHandler+0xee>
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	f043 0208 	orr.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 811e 	beq.w	80085f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <HAL_UART_IRQHandler+0x11e>
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa62 	bl	8008892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bf14      	ite	ne
 80083dc:	2301      	movne	r3, #1
 80083de:	2300      	moveq	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <HAL_UART_IRQHandler+0x146>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d031      	beq.n	800845a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f9a4 	bl	8008744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d023      	beq.n	8008452 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695a      	ldr	r2, [r3, #20]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008418:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	2b00      	cmp	r3, #0
 8008420:	d013      	beq.n	800844a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	4a76      	ldr	r2, [pc, #472]	; (8008600 <HAL_UART_IRQHandler+0x350>)
 8008428:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	4618      	mov	r0, r3
 8008430:	f7fc fa30 	bl	8004894 <HAL_DMA_Abort_IT>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d016      	beq.n	8008468 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008444:	4610      	mov	r0, r2
 8008446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	e00e      	b.n	8008468 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f8e3 	bl	8008616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008450:	e00a      	b.n	8008468 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8df 	bl	8008616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008458:	e006      	b.n	8008468 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8db 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008466:	e0c3      	b.n	80085f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008468:	bf00      	nop
    return;
 800846a:	e0c1      	b.n	80085f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	2b01      	cmp	r3, #1
 8008472:	f040 80a1 	bne.w	80085b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 809b 	beq.w	80085b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8095 	beq.w	80085b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d04e      	beq.n	8008550 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80084bc:	8a3b      	ldrh	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8098 	beq.w	80085f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084c8:	8a3a      	ldrh	r2, [r7, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	f080 8092 	bcs.w	80085f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8a3a      	ldrh	r2, [r7, #16]
 80084d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d02b      	beq.n	8008538 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695a      	ldr	r2, [r3, #20]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0210 	bic.w	r2, r2, #16
 800852c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	4618      	mov	r0, r3
 8008534:	f7fc f973 	bl	800481e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008540:	b29b      	uxth	r3, r3
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	b29b      	uxth	r3, r3
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f86d 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800854e:	e051      	b.n	80085f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008558:	b29b      	uxth	r3, r3
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d047      	beq.n	80085f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008568:	8a7b      	ldrh	r3, [r7, #18]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d044      	beq.n	80085f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800857c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	695a      	ldr	r2, [r3, #20]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0201 	bic.w	r2, r2, #1
 800858c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0210 	bic.w	r2, r2, #16
 80085aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085ac:	8a7b      	ldrh	r3, [r7, #18]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f839 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085b6:	e01f      	b.n	80085f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d008      	beq.n	80085d4 <HAL_UART_IRQHandler+0x324>
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f8f9 	bl	80087c4 <UART_Transmit_IT>
    return;
 80085d2:	e012      	b.n	80085fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <HAL_UART_IRQHandler+0x34a>
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f93a 	bl	8008862 <UART_EndTransmit_IT>
    return;
 80085ee:	e004      	b.n	80085fa <HAL_UART_IRQHandler+0x34a>
    return;
 80085f0:	bf00      	nop
 80085f2:	e002      	b.n	80085fa <HAL_UART_IRQHandler+0x34a>
      return;
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <HAL_UART_IRQHandler+0x34a>
      return;
 80085f8:	bf00      	nop
  }
}
 80085fa:	3728      	adds	r7, #40	; 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	0800879d 	.word	0x0800879d

08008604 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864e:	e02c      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d028      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <UART_WaitOnFlagUntilTimeout+0x30>
 800865e:	f7fb fd7f 	bl	8004160 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	429a      	cmp	r2, r3
 800866c:	d21d      	bcs.n	80086aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800867c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695a      	ldr	r2, [r3, #20]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0201 	bic.w	r2, r2, #1
 800868c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2220      	movs	r2, #32
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e00f      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d0c3      	beq.n	8008650 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b085      	sub	sp, #20
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	4613      	mov	r3, r2
 80086de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2222      	movs	r2, #34	; 0x22
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008716:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695a      	ldr	r2, [r3, #20]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0201 	orr.w	r2, r2, #1
 8008726:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0220 	orr.w	r2, r2, #32
 8008736:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr

08008744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800875a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	2b01      	cmp	r3, #1
 8008772:	d107      	bne.n	8008784 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0210 	bic.w	r2, r2, #16
 8008782:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff ff2d 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b21      	cmp	r3, #33	; 0x21
 80087d6:	d13e      	bne.n	8008856 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e0:	d114      	bne.n	800880c <UART_Transmit_IT+0x48>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d110      	bne.n	800880c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	1c9a      	adds	r2, r3, #2
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	621a      	str	r2, [r3, #32]
 800880a:	e008      	b.n	800881e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	1c59      	adds	r1, r3, #1
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6211      	str	r1, [r2, #32]
 8008816:	781a      	ldrb	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008822:	b29b      	uxth	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b29b      	uxth	r3, r3
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4619      	mov	r1, r3
 800882c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10f      	bne.n	8008852 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008840:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008850:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e000      	b.n	8008858 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008856:	2302      	movs	r3, #2
  }
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	bc80      	pop	{r7}
 8008860:	4770      	bx	lr

08008862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff febe 	bl	8008604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b22      	cmp	r3, #34	; 0x22
 80088a4:	f040 8099 	bne.w	80089da <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b0:	d117      	bne.n	80088e2 <UART_Receive_IT+0x50>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d113      	bne.n	80088e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	1c9a      	adds	r2, r3, #2
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
 80088e0:	e026      	b.n	8008930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f4:	d007      	beq.n	8008906 <UART_Receive_IT+0x74>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10a      	bne.n	8008914 <UART_Receive_IT+0x82>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	e008      	b.n	8008926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008920:	b2da      	uxtb	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	4619      	mov	r1, r3
 800893e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008940:	2b00      	cmp	r3, #0
 8008942:	d148      	bne.n	80089d6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0220 	bic.w	r2, r2, #32
 8008952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695a      	ldr	r2, [r3, #20]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0201 	bic.w	r2, r2, #1
 8008972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	2b01      	cmp	r3, #1
 8008982:	d123      	bne.n	80089cc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0210 	bic.w	r2, r2, #16
 8008998:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b10      	cmp	r3, #16
 80089a6:	d10a      	bne.n	80089be <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fe2f 	bl	8008628 <HAL_UARTEx_RxEventCallback>
 80089ca:	e002      	b.n	80089d2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fa fa4d 	bl	8002e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e002      	b.n	80089dc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e000      	b.n	80089dc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80089da:	2302      	movs	r3, #2
  }
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008a1e:	f023 030c 	bic.w	r3, r3, #12
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699a      	ldr	r2, [r3, #24]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2c      	ldr	r2, [pc, #176]	; (8008af8 <UART_SetConfig+0x114>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d103      	bne.n	8008a54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a4c:	f7fd ffea 	bl	8006a24 <HAL_RCC_GetPCLK2Freq>
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	e002      	b.n	8008a5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008a54:	f7fd ffd2 	bl	80069fc <HAL_RCC_GetPCLK1Freq>
 8008a58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009a      	lsls	r2, r3, #2
 8008a64:	441a      	add	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	4a22      	ldr	r2, [pc, #136]	; (8008afc <UART_SetConfig+0x118>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	0119      	lsls	r1, r3, #4
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	009a      	lsls	r2, r3, #2
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a90:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <UART_SetConfig+0x118>)
 8008a92:	fba3 0302 	umull	r0, r3, r3, r2
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	2064      	movs	r0, #100	; 0x64
 8008a9a:	fb00 f303 	mul.w	r3, r0, r3
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	3332      	adds	r3, #50	; 0x32
 8008aa4:	4a15      	ldr	r2, [pc, #84]	; (8008afc <UART_SetConfig+0x118>)
 8008aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ab0:	4419      	add	r1, r3
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009a      	lsls	r2, r3, #2
 8008abc:	441a      	add	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ac8:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <UART_SetConfig+0x118>)
 8008aca:	fba3 0302 	umull	r0, r3, r3, r2
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	2064      	movs	r0, #100	; 0x64
 8008ad2:	fb00 f303 	mul.w	r3, r0, r3
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	3332      	adds	r3, #50	; 0x32
 8008adc:	4a07      	ldr	r2, [pc, #28]	; (8008afc <UART_SetConfig+0x118>)
 8008ade:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	f003 020f 	and.w	r2, r3, #15
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	440a      	add	r2, r1
 8008aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40013800 	.word	0x40013800
 8008afc:	51eb851f 	.word	0x51eb851f

08008b00 <atoi>:
 8008b00:	220a      	movs	r2, #10
 8008b02:	2100      	movs	r1, #0
 8008b04:	f001 be60 	b.w	800a7c8 <strtol>

08008b08 <__errno>:
 8008b08:	4b01      	ldr	r3, [pc, #4]	; (8008b10 <__errno+0x8>)
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20000610 	.word	0x20000610

08008b14 <__libc_init_array>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	2600      	movs	r6, #0
 8008b18:	4d0c      	ldr	r5, [pc, #48]	; (8008b4c <__libc_init_array+0x38>)
 8008b1a:	4c0d      	ldr	r4, [pc, #52]	; (8008b50 <__libc_init_array+0x3c>)
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	d109      	bne.n	8008b38 <__libc_init_array+0x24>
 8008b24:	f004 fda2 	bl	800d66c <_init>
 8008b28:	2600      	movs	r6, #0
 8008b2a:	4d0a      	ldr	r5, [pc, #40]	; (8008b54 <__libc_init_array+0x40>)
 8008b2c:	4c0a      	ldr	r4, [pc, #40]	; (8008b58 <__libc_init_array+0x44>)
 8008b2e:	1b64      	subs	r4, r4, r5
 8008b30:	10a4      	asrs	r4, r4, #2
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d105      	bne.n	8008b42 <__libc_init_array+0x2e>
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3c:	4798      	blx	r3
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7ee      	b.n	8008b20 <__libc_init_array+0xc>
 8008b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b46:	4798      	blx	r3
 8008b48:	3601      	adds	r6, #1
 8008b4a:	e7f2      	b.n	8008b32 <__libc_init_array+0x1e>
 8008b4c:	0800dc80 	.word	0x0800dc80
 8008b50:	0800dc80 	.word	0x0800dc80
 8008b54:	0800dc80 	.word	0x0800dc80
 8008b58:	0800dc84 	.word	0x0800dc84

08008b5c <memcpy>:
 8008b5c:	440a      	add	r2, r1
 8008b5e:	4291      	cmp	r1, r2
 8008b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b64:	d100      	bne.n	8008b68 <memcpy+0xc>
 8008b66:	4770      	bx	lr
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b74:	d1f9      	bne.n	8008b6a <memcpy+0xe>
 8008b76:	bd10      	pop	{r4, pc}

08008b78 <memset>:
 8008b78:	4603      	mov	r3, r0
 8008b7a:	4402      	add	r2, r0
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d100      	bne.n	8008b82 <memset+0xa>
 8008b80:	4770      	bx	lr
 8008b82:	f803 1b01 	strb.w	r1, [r3], #1
 8008b86:	e7f9      	b.n	8008b7c <memset+0x4>

08008b88 <__cvt>:
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8e:	461f      	mov	r7, r3
 8008b90:	bfbb      	ittet	lt
 8008b92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008b96:	461f      	movlt	r7, r3
 8008b98:	2300      	movge	r3, #0
 8008b9a:	232d      	movlt	r3, #45	; 0x2d
 8008b9c:	b088      	sub	sp, #32
 8008b9e:	4614      	mov	r4, r2
 8008ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ba2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ba4:	7013      	strb	r3, [r2, #0]
 8008ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ba8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008bac:	f023 0820 	bic.w	r8, r3, #32
 8008bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb4:	d005      	beq.n	8008bc2 <__cvt+0x3a>
 8008bb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bba:	d100      	bne.n	8008bbe <__cvt+0x36>
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e000      	b.n	8008bc4 <__cvt+0x3c>
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	aa07      	add	r2, sp, #28
 8008bc6:	9204      	str	r2, [sp, #16]
 8008bc8:	aa06      	add	r2, sp, #24
 8008bca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008bce:	e9cd 3500 	strd	r3, r5, [sp]
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	f001 ff6b 	bl	800aab0 <_dtoa_r>
 8008bda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bde:	4606      	mov	r6, r0
 8008be0:	d102      	bne.n	8008be8 <__cvt+0x60>
 8008be2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008be4:	07db      	lsls	r3, r3, #31
 8008be6:	d522      	bpl.n	8008c2e <__cvt+0xa6>
 8008be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bec:	eb06 0905 	add.w	r9, r6, r5
 8008bf0:	d110      	bne.n	8008c14 <__cvt+0x8c>
 8008bf2:	7833      	ldrb	r3, [r6, #0]
 8008bf4:	2b30      	cmp	r3, #48	; 0x30
 8008bf6:	d10a      	bne.n	8008c0e <__cvt+0x86>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 fffc 	bl	8000bfc <__aeabi_dcmpeq>
 8008c04:	b918      	cbnz	r0, 8008c0e <__cvt+0x86>
 8008c06:	f1c5 0501 	rsb	r5, r5, #1
 8008c0a:	f8ca 5000 	str.w	r5, [sl]
 8008c0e:	f8da 3000 	ldr.w	r3, [sl]
 8008c12:	4499      	add	r9, r3
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	4620      	mov	r0, r4
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	f7f7 ffee 	bl	8000bfc <__aeabi_dcmpeq>
 8008c20:	b108      	cbz	r0, 8008c26 <__cvt+0x9e>
 8008c22:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c26:	2230      	movs	r2, #48	; 0x30
 8008c28:	9b07      	ldr	r3, [sp, #28]
 8008c2a:	454b      	cmp	r3, r9
 8008c2c:	d307      	bcc.n	8008c3e <__cvt+0xb6>
 8008c2e:	4630      	mov	r0, r6
 8008c30:	9b07      	ldr	r3, [sp, #28]
 8008c32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c34:	1b9b      	subs	r3, r3, r6
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	b008      	add	sp, #32
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	1c59      	adds	r1, r3, #1
 8008c40:	9107      	str	r1, [sp, #28]
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	e7f0      	b.n	8008c28 <__cvt+0xa0>

08008c46 <__exponent>:
 8008c46:	4603      	mov	r3, r0
 8008c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	f803 2b02 	strb.w	r2, [r3], #2
 8008c50:	bfb6      	itet	lt
 8008c52:	222d      	movlt	r2, #45	; 0x2d
 8008c54:	222b      	movge	r2, #43	; 0x2b
 8008c56:	4249      	neglt	r1, r1
 8008c58:	2909      	cmp	r1, #9
 8008c5a:	7042      	strb	r2, [r0, #1]
 8008c5c:	dd2b      	ble.n	8008cb6 <__exponent+0x70>
 8008c5e:	f10d 0407 	add.w	r4, sp, #7
 8008c62:	46a4      	mov	ip, r4
 8008c64:	270a      	movs	r7, #10
 8008c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	46a6      	mov	lr, r4
 8008c6e:	fb07 1516 	mls	r5, r7, r6, r1
 8008c72:	2a63      	cmp	r2, #99	; 0x63
 8008c74:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008c78:	4631      	mov	r1, r6
 8008c7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c82:	dcf0      	bgt.n	8008c66 <__exponent+0x20>
 8008c84:	3130      	adds	r1, #48	; 0x30
 8008c86:	f1ae 0502 	sub.w	r5, lr, #2
 8008c8a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c8e:	4629      	mov	r1, r5
 8008c90:	1c44      	adds	r4, r0, #1
 8008c92:	4561      	cmp	r1, ip
 8008c94:	d30a      	bcc.n	8008cac <__exponent+0x66>
 8008c96:	f10d 0209 	add.w	r2, sp, #9
 8008c9a:	eba2 020e 	sub.w	r2, r2, lr
 8008c9e:	4565      	cmp	r5, ip
 8008ca0:	bf88      	it	hi
 8008ca2:	2200      	movhi	r2, #0
 8008ca4:	4413      	add	r3, r2
 8008ca6:	1a18      	subs	r0, r3, r0
 8008ca8:	b003      	add	sp, #12
 8008caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cb4:	e7ed      	b.n	8008c92 <__exponent+0x4c>
 8008cb6:	2330      	movs	r3, #48	; 0x30
 8008cb8:	3130      	adds	r1, #48	; 0x30
 8008cba:	7083      	strb	r3, [r0, #2]
 8008cbc:	70c1      	strb	r1, [r0, #3]
 8008cbe:	1d03      	adds	r3, r0, #4
 8008cc0:	e7f1      	b.n	8008ca6 <__exponent+0x60>
	...

08008cc4 <_printf_float>:
 8008cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	b091      	sub	sp, #68	; 0x44
 8008cca:	460c      	mov	r4, r1
 8008ccc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	f003 fa05 	bl	800c0e4 <_localeconv_r>
 8008cda:	6803      	ldr	r3, [r0, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	f7f7 faac 	bl	800023c <strlen>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cec:	900a      	str	r0, [sp, #40]	; 0x28
 8008cee:	3307      	adds	r3, #7
 8008cf0:	f023 0307 	bic.w	r3, r3, #7
 8008cf4:	f103 0208 	add.w	r2, r3, #8
 8008cf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008cfc:	f8d4 b000 	ldr.w	fp, [r4]
 8008d00:	f8c8 2000 	str.w	r2, [r8]
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d0c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008d10:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	4b9c      	ldr	r3, [pc, #624]	; (8008f90 <_printf_float+0x2cc>)
 8008d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d20:	f7f7 ff9e 	bl	8000c60 <__aeabi_dcmpun>
 8008d24:	bb70      	cbnz	r0, 8008d84 <_printf_float+0xc0>
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4b98      	ldr	r3, [pc, #608]	; (8008f90 <_printf_float+0x2cc>)
 8008d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d30:	f7f7 ff78 	bl	8000c24 <__aeabi_dcmple>
 8008d34:	bb30      	cbnz	r0, 8008d84 <_printf_float+0xc0>
 8008d36:	2200      	movs	r2, #0
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4651      	mov	r1, sl
 8008d3e:	f7f7 ff67 	bl	8000c10 <__aeabi_dcmplt>
 8008d42:	b110      	cbz	r0, 8008d4a <_printf_float+0x86>
 8008d44:	232d      	movs	r3, #45	; 0x2d
 8008d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4a:	4b92      	ldr	r3, [pc, #584]	; (8008f94 <_printf_float+0x2d0>)
 8008d4c:	4892      	ldr	r0, [pc, #584]	; (8008f98 <_printf_float+0x2d4>)
 8008d4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d52:	bf94      	ite	ls
 8008d54:	4698      	movls	r8, r3
 8008d56:	4680      	movhi	r8, r0
 8008d58:	2303      	movs	r3, #3
 8008d5a:	f04f 0a00 	mov.w	sl, #0
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	f02b 0304 	bic.w	r3, fp, #4
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	4633      	mov	r3, r6
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	9700      	str	r7, [sp, #0]
 8008d6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008d70:	f000 f9d4 	bl	800911c <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	f040 8090 	bne.w	8008e9a <_printf_float+0x1d6>
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7e:	b011      	add	sp, #68	; 0x44
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	4642      	mov	r2, r8
 8008d86:	4653      	mov	r3, sl
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4651      	mov	r1, sl
 8008d8c:	f7f7 ff68 	bl	8000c60 <__aeabi_dcmpun>
 8008d90:	b148      	cbz	r0, 8008da6 <_printf_float+0xe2>
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	bfb8      	it	lt
 8008d98:	232d      	movlt	r3, #45	; 0x2d
 8008d9a:	4880      	ldr	r0, [pc, #512]	; (8008f9c <_printf_float+0x2d8>)
 8008d9c:	bfb8      	it	lt
 8008d9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008da2:	4b7f      	ldr	r3, [pc, #508]	; (8008fa0 <_printf_float+0x2dc>)
 8008da4:	e7d3      	b.n	8008d4e <_printf_float+0x8a>
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	d142      	bne.n	8008e36 <_printf_float+0x172>
 8008db0:	2306      	movs	r3, #6
 8008db2:	6063      	str	r3, [r4, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	9206      	str	r2, [sp, #24]
 8008db8:	aa0e      	add	r2, sp, #56	; 0x38
 8008dba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008dbe:	aa0d      	add	r2, sp, #52	; 0x34
 8008dc0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008dc4:	9203      	str	r2, [sp, #12]
 8008dc6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008dca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	6863      	ldr	r3, [r4, #4]
 8008dd2:	4642      	mov	r2, r8
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	4653      	mov	r3, sl
 8008dda:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ddc:	f7ff fed4 	bl	8008b88 <__cvt>
 8008de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008de2:	4680      	mov	r8, r0
 8008de4:	2947      	cmp	r1, #71	; 0x47
 8008de6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008de8:	d108      	bne.n	8008dfc <_printf_float+0x138>
 8008dea:	1cc8      	adds	r0, r1, #3
 8008dec:	db02      	blt.n	8008df4 <_printf_float+0x130>
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	4299      	cmp	r1, r3
 8008df2:	dd40      	ble.n	8008e76 <_printf_float+0x1b2>
 8008df4:	f1a9 0902 	sub.w	r9, r9, #2
 8008df8:	fa5f f989 	uxtb.w	r9, r9
 8008dfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e00:	d81f      	bhi.n	8008e42 <_printf_float+0x17e>
 8008e02:	464a      	mov	r2, r9
 8008e04:	3901      	subs	r1, #1
 8008e06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e0a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e0c:	f7ff ff1b 	bl	8008c46 <__exponent>
 8008e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e12:	4682      	mov	sl, r0
 8008e14:	1813      	adds	r3, r2, r0
 8008e16:	2a01      	cmp	r2, #1
 8008e18:	6123      	str	r3, [r4, #16]
 8008e1a:	dc02      	bgt.n	8008e22 <_printf_float+0x15e>
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	07d2      	lsls	r2, r2, #31
 8008e20:	d501      	bpl.n	8008e26 <_printf_float+0x162>
 8008e22:	3301      	adds	r3, #1
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d09b      	beq.n	8008d66 <_printf_float+0xa2>
 8008e2e:	232d      	movs	r3, #45	; 0x2d
 8008e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e34:	e797      	b.n	8008d66 <_printf_float+0xa2>
 8008e36:	2947      	cmp	r1, #71	; 0x47
 8008e38:	d1bc      	bne.n	8008db4 <_printf_float+0xf0>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1ba      	bne.n	8008db4 <_printf_float+0xf0>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e7b7      	b.n	8008db2 <_printf_float+0xee>
 8008e42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e46:	d118      	bne.n	8008e7a <_printf_float+0x1b6>
 8008e48:	2900      	cmp	r1, #0
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	dd0b      	ble.n	8008e66 <_printf_float+0x1a2>
 8008e4e:	6121      	str	r1, [r4, #16]
 8008e50:	b913      	cbnz	r3, 8008e58 <_printf_float+0x194>
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	07d0      	lsls	r0, r2, #31
 8008e56:	d502      	bpl.n	8008e5e <_printf_float+0x19a>
 8008e58:	3301      	adds	r3, #1
 8008e5a:	440b      	add	r3, r1
 8008e5c:	6123      	str	r3, [r4, #16]
 8008e5e:	f04f 0a00 	mov.w	sl, #0
 8008e62:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e64:	e7df      	b.n	8008e26 <_printf_float+0x162>
 8008e66:	b913      	cbnz	r3, 8008e6e <_printf_float+0x1aa>
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	07d2      	lsls	r2, r2, #31
 8008e6c:	d501      	bpl.n	8008e72 <_printf_float+0x1ae>
 8008e6e:	3302      	adds	r3, #2
 8008e70:	e7f4      	b.n	8008e5c <_printf_float+0x198>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e7f2      	b.n	8008e5c <_printf_float+0x198>
 8008e76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e7c:	4299      	cmp	r1, r3
 8008e7e:	db05      	blt.n	8008e8c <_printf_float+0x1c8>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	6121      	str	r1, [r4, #16]
 8008e84:	07d8      	lsls	r0, r3, #31
 8008e86:	d5ea      	bpl.n	8008e5e <_printf_float+0x19a>
 8008e88:	1c4b      	adds	r3, r1, #1
 8008e8a:	e7e7      	b.n	8008e5c <_printf_float+0x198>
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	bfcc      	ite	gt
 8008e90:	2201      	movgt	r2, #1
 8008e92:	f1c1 0202 	rsble	r2, r1, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	e7e0      	b.n	8008e5c <_printf_float+0x198>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	055a      	lsls	r2, r3, #21
 8008e9e:	d407      	bmi.n	8008eb0 <_printf_float+0x1ec>
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d12b      	bne.n	8008f06 <_printf_float+0x242>
 8008eae:	e764      	b.n	8008d7a <_printf_float+0xb6>
 8008eb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008eb4:	f240 80dd 	bls.w	8009072 <_printf_float+0x3ae>
 8008eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f7f7 fe9c 	bl	8000bfc <__aeabi_dcmpeq>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d033      	beq.n	8008f30 <_printf_float+0x26c>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	4a35      	ldr	r2, [pc, #212]	; (8008fa4 <_printf_float+0x2e0>)
 8008ed0:	47b8      	blx	r7
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f43f af51 	beq.w	8008d7a <_printf_float+0xb6>
 8008ed8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008edc:	429a      	cmp	r2, r3
 8008ede:	db02      	blt.n	8008ee6 <_printf_float+0x222>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	07d8      	lsls	r0, r3, #31
 8008ee4:	d50f      	bpl.n	8008f06 <_printf_float+0x242>
 8008ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eea:	4631      	mov	r1, r6
 8008eec:	4628      	mov	r0, r5
 8008eee:	47b8      	blx	r7
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	f43f af42 	beq.w	8008d7a <_printf_float+0xb6>
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	f104 091a 	add.w	r9, r4, #26
 8008efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f00:	3b01      	subs	r3, #1
 8008f02:	4543      	cmp	r3, r8
 8008f04:	dc09      	bgt.n	8008f1a <_printf_float+0x256>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	079b      	lsls	r3, r3, #30
 8008f0a:	f100 8102 	bmi.w	8009112 <_printf_float+0x44e>
 8008f0e:	68e0      	ldr	r0, [r4, #12]
 8008f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f12:	4298      	cmp	r0, r3
 8008f14:	bfb8      	it	lt
 8008f16:	4618      	movlt	r0, r3
 8008f18:	e731      	b.n	8008d7e <_printf_float+0xba>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	464a      	mov	r2, r9
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	f43f af28 	beq.w	8008d7a <_printf_float+0xb6>
 8008f2a:	f108 0801 	add.w	r8, r8, #1
 8008f2e:	e7e6      	b.n	8008efe <_printf_float+0x23a>
 8008f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dc38      	bgt.n	8008fa8 <_printf_float+0x2e4>
 8008f36:	2301      	movs	r3, #1
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <_printf_float+0x2e0>)
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	f43f af1a 	beq.w	8008d7a <_printf_float+0xb6>
 8008f46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	d102      	bne.n	8008f54 <_printf_float+0x290>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	07d9      	lsls	r1, r3, #31
 8008f52:	d5d8      	bpl.n	8008f06 <_printf_float+0x242>
 8008f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f af0b 	beq.w	8008d7a <_printf_float+0xb6>
 8008f64:	f04f 0900 	mov.w	r9, #0
 8008f68:	f104 0a1a 	add.w	sl, r4, #26
 8008f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f6e:	425b      	negs	r3, r3
 8008f70:	454b      	cmp	r3, r9
 8008f72:	dc01      	bgt.n	8008f78 <_printf_float+0x2b4>
 8008f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f76:	e794      	b.n	8008ea2 <_printf_float+0x1de>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4652      	mov	r2, sl
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f aef9 	beq.w	8008d7a <_printf_float+0xb6>
 8008f88:	f109 0901 	add.w	r9, r9, #1
 8008f8c:	e7ee      	b.n	8008f6c <_printf_float+0x2a8>
 8008f8e:	bf00      	nop
 8008f90:	7fefffff 	.word	0x7fefffff
 8008f94:	0800d778 	.word	0x0800d778
 8008f98:	0800d77c 	.word	0x0800d77c
 8008f9c:	0800d784 	.word	0x0800d784
 8008fa0:	0800d780 	.word	0x0800d780
 8008fa4:	0800d788 	.word	0x0800d788
 8008fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fac:	429a      	cmp	r2, r3
 8008fae:	bfa8      	it	ge
 8008fb0:	461a      	movge	r2, r3
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	4691      	mov	r9, r2
 8008fb6:	dc37      	bgt.n	8009028 <_printf_float+0x364>
 8008fb8:	f04f 0b00 	mov.w	fp, #0
 8008fbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc0:	f104 021a 	add.w	r2, r4, #26
 8008fc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008fc8:	ebaa 0309 	sub.w	r3, sl, r9
 8008fcc:	455b      	cmp	r3, fp
 8008fce:	dc33      	bgt.n	8009038 <_printf_float+0x374>
 8008fd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	db3b      	blt.n	8009050 <_printf_float+0x38c>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	07da      	lsls	r2, r3, #31
 8008fdc:	d438      	bmi.n	8009050 <_printf_float+0x38c>
 8008fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fe2:	eba3 020a 	sub.w	r2, r3, sl
 8008fe6:	eba3 0901 	sub.w	r9, r3, r1
 8008fea:	4591      	cmp	r9, r2
 8008fec:	bfa8      	it	ge
 8008fee:	4691      	movge	r9, r2
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	dc34      	bgt.n	8009060 <_printf_float+0x39c>
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ffe:	f104 0a1a 	add.w	sl, r4, #26
 8009002:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	eba3 0309 	sub.w	r3, r3, r9
 800900c:	4543      	cmp	r3, r8
 800900e:	f77f af7a 	ble.w	8008f06 <_printf_float+0x242>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f aeac 	beq.w	8008d7a <_printf_float+0xb6>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	e7ec      	b.n	8009002 <_printf_float+0x33e>
 8009028:	4613      	mov	r3, r2
 800902a:	4631      	mov	r1, r6
 800902c:	4642      	mov	r2, r8
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	d1c0      	bne.n	8008fb8 <_printf_float+0x2f4>
 8009036:	e6a0      	b.n	8008d7a <_printf_float+0xb6>
 8009038:	2301      	movs	r3, #1
 800903a:	4631      	mov	r1, r6
 800903c:	4628      	mov	r0, r5
 800903e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f ae99 	beq.w	8008d7a <_printf_float+0xb6>
 8009048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800904a:	f10b 0b01 	add.w	fp, fp, #1
 800904e:	e7b9      	b.n	8008fc4 <_printf_float+0x300>
 8009050:	4631      	mov	r1, r6
 8009052:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009056:	4628      	mov	r0, r5
 8009058:	47b8      	blx	r7
 800905a:	3001      	adds	r0, #1
 800905c:	d1bf      	bne.n	8008fde <_printf_float+0x31a>
 800905e:	e68c      	b.n	8008d7a <_printf_float+0xb6>
 8009060:	464b      	mov	r3, r9
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	eb08 020a 	add.w	r2, r8, sl
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	d1c2      	bne.n	8008ff6 <_printf_float+0x332>
 8009070:	e683      	b.n	8008d7a <_printf_float+0xb6>
 8009072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009074:	2a01      	cmp	r2, #1
 8009076:	dc01      	bgt.n	800907c <_printf_float+0x3b8>
 8009078:	07db      	lsls	r3, r3, #31
 800907a:	d537      	bpl.n	80090ec <_printf_float+0x428>
 800907c:	2301      	movs	r3, #1
 800907e:	4642      	mov	r2, r8
 8009080:	4631      	mov	r1, r6
 8009082:	4628      	mov	r0, r5
 8009084:	47b8      	blx	r7
 8009086:	3001      	adds	r0, #1
 8009088:	f43f ae77 	beq.w	8008d7a <_printf_float+0xb6>
 800908c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009090:	4631      	mov	r1, r6
 8009092:	4628      	mov	r0, r5
 8009094:	47b8      	blx	r7
 8009096:	3001      	adds	r0, #1
 8009098:	f43f ae6f 	beq.w	8008d7a <_printf_float+0xb6>
 800909c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a0:	2200      	movs	r2, #0
 80090a2:	2300      	movs	r3, #0
 80090a4:	f7f7 fdaa 	bl	8000bfc <__aeabi_dcmpeq>
 80090a8:	b9d8      	cbnz	r0, 80090e2 <_printf_float+0x41e>
 80090aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ac:	f108 0201 	add.w	r2, r8, #1
 80090b0:	3b01      	subs	r3, #1
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	d10e      	bne.n	80090da <_printf_float+0x416>
 80090bc:	e65d      	b.n	8008d7a <_printf_float+0xb6>
 80090be:	2301      	movs	r3, #1
 80090c0:	464a      	mov	r2, r9
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f ae56 	beq.w	8008d7a <_printf_float+0xb6>
 80090ce:	f108 0801 	add.w	r8, r8, #1
 80090d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d4:	3b01      	subs	r3, #1
 80090d6:	4543      	cmp	r3, r8
 80090d8:	dcf1      	bgt.n	80090be <_printf_float+0x3fa>
 80090da:	4653      	mov	r3, sl
 80090dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090e0:	e6e0      	b.n	8008ea4 <_printf_float+0x1e0>
 80090e2:	f04f 0800 	mov.w	r8, #0
 80090e6:	f104 091a 	add.w	r9, r4, #26
 80090ea:	e7f2      	b.n	80090d2 <_printf_float+0x40e>
 80090ec:	2301      	movs	r3, #1
 80090ee:	4642      	mov	r2, r8
 80090f0:	e7df      	b.n	80090b2 <_printf_float+0x3ee>
 80090f2:	2301      	movs	r3, #1
 80090f4:	464a      	mov	r2, r9
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	f43f ae3c 	beq.w	8008d7a <_printf_float+0xb6>
 8009102:	f108 0801 	add.w	r8, r8, #1
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800910a:	1a5b      	subs	r3, r3, r1
 800910c:	4543      	cmp	r3, r8
 800910e:	dcf0      	bgt.n	80090f2 <_printf_float+0x42e>
 8009110:	e6fd      	b.n	8008f0e <_printf_float+0x24a>
 8009112:	f04f 0800 	mov.w	r8, #0
 8009116:	f104 0919 	add.w	r9, r4, #25
 800911a:	e7f4      	b.n	8009106 <_printf_float+0x442>

0800911c <_printf_common>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	4699      	mov	r9, r3
 8009124:	688a      	ldr	r2, [r1, #8]
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4607      	mov	r7, r0
 800912a:	4293      	cmp	r3, r2
 800912c:	bfb8      	it	lt
 800912e:	4613      	movlt	r3, r2
 8009130:	6033      	str	r3, [r6, #0]
 8009132:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009136:	460c      	mov	r4, r1
 8009138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800913c:	b10a      	cbz	r2, 8009142 <_printf_common+0x26>
 800913e:	3301      	adds	r3, #1
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	0699      	lsls	r1, r3, #26
 8009146:	bf42      	ittt	mi
 8009148:	6833      	ldrmi	r3, [r6, #0]
 800914a:	3302      	addmi	r3, #2
 800914c:	6033      	strmi	r3, [r6, #0]
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f015 0506 	ands.w	r5, r5, #6
 8009154:	d106      	bne.n	8009164 <_printf_common+0x48>
 8009156:	f104 0a19 	add.w	sl, r4, #25
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	6832      	ldr	r2, [r6, #0]
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	42ab      	cmp	r3, r5
 8009162:	dc28      	bgt.n	80091b6 <_printf_common+0x9a>
 8009164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009168:	1e13      	subs	r3, r2, #0
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	bf18      	it	ne
 800916e:	2301      	movne	r3, #1
 8009170:	0692      	lsls	r2, r2, #26
 8009172:	d42d      	bmi.n	80091d0 <_printf_common+0xb4>
 8009174:	4649      	mov	r1, r9
 8009176:	4638      	mov	r0, r7
 8009178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800917c:	47c0      	blx	r8
 800917e:	3001      	adds	r0, #1
 8009180:	d020      	beq.n	80091c4 <_printf_common+0xa8>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	68e5      	ldr	r5, [r4, #12]
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	2b04      	cmp	r3, #4
 800918c:	bf18      	it	ne
 800918e:	2500      	movne	r5, #0
 8009190:	6832      	ldr	r2, [r6, #0]
 8009192:	f04f 0600 	mov.w	r6, #0
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	bf08      	it	eq
 800919a:	1aad      	subeq	r5, r5, r2
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	bf08      	it	eq
 80091a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a4:	4293      	cmp	r3, r2
 80091a6:	bfc4      	itt	gt
 80091a8:	1a9b      	subgt	r3, r3, r2
 80091aa:	18ed      	addgt	r5, r5, r3
 80091ac:	341a      	adds	r4, #26
 80091ae:	42b5      	cmp	r5, r6
 80091b0:	d11a      	bne.n	80091e8 <_printf_common+0xcc>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e008      	b.n	80091c8 <_printf_common+0xac>
 80091b6:	2301      	movs	r3, #1
 80091b8:	4652      	mov	r2, sl
 80091ba:	4649      	mov	r1, r9
 80091bc:	4638      	mov	r0, r7
 80091be:	47c0      	blx	r8
 80091c0:	3001      	adds	r0, #1
 80091c2:	d103      	bne.n	80091cc <_printf_common+0xb0>
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091cc:	3501      	adds	r5, #1
 80091ce:	e7c4      	b.n	800915a <_printf_common+0x3e>
 80091d0:	2030      	movs	r0, #48	; 0x30
 80091d2:	18e1      	adds	r1, r4, r3
 80091d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091de:	4422      	add	r2, r4
 80091e0:	3302      	adds	r3, #2
 80091e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e6:	e7c5      	b.n	8009174 <_printf_common+0x58>
 80091e8:	2301      	movs	r3, #1
 80091ea:	4622      	mov	r2, r4
 80091ec:	4649      	mov	r1, r9
 80091ee:	4638      	mov	r0, r7
 80091f0:	47c0      	blx	r8
 80091f2:	3001      	adds	r0, #1
 80091f4:	d0e6      	beq.n	80091c4 <_printf_common+0xa8>
 80091f6:	3601      	adds	r6, #1
 80091f8:	e7d9      	b.n	80091ae <_printf_common+0x92>
	...

080091fc <_printf_i>:
 80091fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	7e0f      	ldrb	r7, [r1, #24]
 8009202:	4691      	mov	r9, r2
 8009204:	2f78      	cmp	r7, #120	; 0x78
 8009206:	4680      	mov	r8, r0
 8009208:	460c      	mov	r4, r1
 800920a:	469a      	mov	sl, r3
 800920c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800920e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009212:	d807      	bhi.n	8009224 <_printf_i+0x28>
 8009214:	2f62      	cmp	r7, #98	; 0x62
 8009216:	d80a      	bhi.n	800922e <_printf_i+0x32>
 8009218:	2f00      	cmp	r7, #0
 800921a:	f000 80d9 	beq.w	80093d0 <_printf_i+0x1d4>
 800921e:	2f58      	cmp	r7, #88	; 0x58
 8009220:	f000 80a4 	beq.w	800936c <_printf_i+0x170>
 8009224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800922c:	e03a      	b.n	80092a4 <_printf_i+0xa8>
 800922e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009232:	2b15      	cmp	r3, #21
 8009234:	d8f6      	bhi.n	8009224 <_printf_i+0x28>
 8009236:	a101      	add	r1, pc, #4	; (adr r1, 800923c <_printf_i+0x40>)
 8009238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800923c:	08009295 	.word	0x08009295
 8009240:	080092a9 	.word	0x080092a9
 8009244:	08009225 	.word	0x08009225
 8009248:	08009225 	.word	0x08009225
 800924c:	08009225 	.word	0x08009225
 8009250:	08009225 	.word	0x08009225
 8009254:	080092a9 	.word	0x080092a9
 8009258:	08009225 	.word	0x08009225
 800925c:	08009225 	.word	0x08009225
 8009260:	08009225 	.word	0x08009225
 8009264:	08009225 	.word	0x08009225
 8009268:	080093b7 	.word	0x080093b7
 800926c:	080092d9 	.word	0x080092d9
 8009270:	08009399 	.word	0x08009399
 8009274:	08009225 	.word	0x08009225
 8009278:	08009225 	.word	0x08009225
 800927c:	080093d9 	.word	0x080093d9
 8009280:	08009225 	.word	0x08009225
 8009284:	080092d9 	.word	0x080092d9
 8009288:	08009225 	.word	0x08009225
 800928c:	08009225 	.word	0x08009225
 8009290:	080093a1 	.word	0x080093a1
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	1d1a      	adds	r2, r3, #4
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0a4      	b.n	80093f2 <_printf_i+0x1f6>
 80092a8:	6820      	ldr	r0, [r4, #0]
 80092aa:	6829      	ldr	r1, [r5, #0]
 80092ac:	0606      	lsls	r6, r0, #24
 80092ae:	f101 0304 	add.w	r3, r1, #4
 80092b2:	d50a      	bpl.n	80092ca <_printf_i+0xce>
 80092b4:	680e      	ldr	r6, [r1, #0]
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	da03      	bge.n	80092c4 <_printf_i+0xc8>
 80092bc:	232d      	movs	r3, #45	; 0x2d
 80092be:	4276      	negs	r6, r6
 80092c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c4:	230a      	movs	r3, #10
 80092c6:	485e      	ldr	r0, [pc, #376]	; (8009440 <_printf_i+0x244>)
 80092c8:	e019      	b.n	80092fe <_printf_i+0x102>
 80092ca:	680e      	ldr	r6, [r1, #0]
 80092cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	bf18      	it	ne
 80092d4:	b236      	sxthne	r6, r6
 80092d6:	e7ef      	b.n	80092b8 <_printf_i+0xbc>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	6820      	ldr	r0, [r4, #0]
 80092dc:	1d19      	adds	r1, r3, #4
 80092de:	6029      	str	r1, [r5, #0]
 80092e0:	0601      	lsls	r1, r0, #24
 80092e2:	d501      	bpl.n	80092e8 <_printf_i+0xec>
 80092e4:	681e      	ldr	r6, [r3, #0]
 80092e6:	e002      	b.n	80092ee <_printf_i+0xf2>
 80092e8:	0646      	lsls	r6, r0, #25
 80092ea:	d5fb      	bpl.n	80092e4 <_printf_i+0xe8>
 80092ec:	881e      	ldrh	r6, [r3, #0]
 80092ee:	2f6f      	cmp	r7, #111	; 0x6f
 80092f0:	bf0c      	ite	eq
 80092f2:	2308      	moveq	r3, #8
 80092f4:	230a      	movne	r3, #10
 80092f6:	4852      	ldr	r0, [pc, #328]	; (8009440 <_printf_i+0x244>)
 80092f8:	2100      	movs	r1, #0
 80092fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092fe:	6865      	ldr	r5, [r4, #4]
 8009300:	2d00      	cmp	r5, #0
 8009302:	bfa8      	it	ge
 8009304:	6821      	ldrge	r1, [r4, #0]
 8009306:	60a5      	str	r5, [r4, #8]
 8009308:	bfa4      	itt	ge
 800930a:	f021 0104 	bicge.w	r1, r1, #4
 800930e:	6021      	strge	r1, [r4, #0]
 8009310:	b90e      	cbnz	r6, 8009316 <_printf_i+0x11a>
 8009312:	2d00      	cmp	r5, #0
 8009314:	d04d      	beq.n	80093b2 <_printf_i+0x1b6>
 8009316:	4615      	mov	r5, r2
 8009318:	fbb6 f1f3 	udiv	r1, r6, r3
 800931c:	fb03 6711 	mls	r7, r3, r1, r6
 8009320:	5dc7      	ldrb	r7, [r0, r7]
 8009322:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009326:	4637      	mov	r7, r6
 8009328:	42bb      	cmp	r3, r7
 800932a:	460e      	mov	r6, r1
 800932c:	d9f4      	bls.n	8009318 <_printf_i+0x11c>
 800932e:	2b08      	cmp	r3, #8
 8009330:	d10b      	bne.n	800934a <_printf_i+0x14e>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	07de      	lsls	r6, r3, #31
 8009336:	d508      	bpl.n	800934a <_printf_i+0x14e>
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	6861      	ldr	r1, [r4, #4]
 800933c:	4299      	cmp	r1, r3
 800933e:	bfde      	ittt	le
 8009340:	2330      	movle	r3, #48	; 0x30
 8009342:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009346:	f105 35ff 	addle.w	r5, r5, #4294967295
 800934a:	1b52      	subs	r2, r2, r5
 800934c:	6122      	str	r2, [r4, #16]
 800934e:	464b      	mov	r3, r9
 8009350:	4621      	mov	r1, r4
 8009352:	4640      	mov	r0, r8
 8009354:	f8cd a000 	str.w	sl, [sp]
 8009358:	aa03      	add	r2, sp, #12
 800935a:	f7ff fedf 	bl	800911c <_printf_common>
 800935e:	3001      	adds	r0, #1
 8009360:	d14c      	bne.n	80093fc <_printf_i+0x200>
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	b004      	add	sp, #16
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	4834      	ldr	r0, [pc, #208]	; (8009440 <_printf_i+0x244>)
 800936e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009372:	6829      	ldr	r1, [r5, #0]
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	f851 6b04 	ldr.w	r6, [r1], #4
 800937a:	6029      	str	r1, [r5, #0]
 800937c:	061d      	lsls	r5, r3, #24
 800937e:	d514      	bpl.n	80093aa <_printf_i+0x1ae>
 8009380:	07df      	lsls	r7, r3, #31
 8009382:	bf44      	itt	mi
 8009384:	f043 0320 	orrmi.w	r3, r3, #32
 8009388:	6023      	strmi	r3, [r4, #0]
 800938a:	b91e      	cbnz	r6, 8009394 <_printf_i+0x198>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	f023 0320 	bic.w	r3, r3, #32
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	2310      	movs	r3, #16
 8009396:	e7af      	b.n	80092f8 <_printf_i+0xfc>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	f043 0320 	orr.w	r3, r3, #32
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	2378      	movs	r3, #120	; 0x78
 80093a2:	4828      	ldr	r0, [pc, #160]	; (8009444 <_printf_i+0x248>)
 80093a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093a8:	e7e3      	b.n	8009372 <_printf_i+0x176>
 80093aa:	0659      	lsls	r1, r3, #25
 80093ac:	bf48      	it	mi
 80093ae:	b2b6      	uxthmi	r6, r6
 80093b0:	e7e6      	b.n	8009380 <_printf_i+0x184>
 80093b2:	4615      	mov	r5, r2
 80093b4:	e7bb      	b.n	800932e <_printf_i+0x132>
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	6826      	ldr	r6, [r4, #0]
 80093ba:	1d18      	adds	r0, r3, #4
 80093bc:	6961      	ldr	r1, [r4, #20]
 80093be:	6028      	str	r0, [r5, #0]
 80093c0:	0635      	lsls	r5, r6, #24
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	d501      	bpl.n	80093ca <_printf_i+0x1ce>
 80093c6:	6019      	str	r1, [r3, #0]
 80093c8:	e002      	b.n	80093d0 <_printf_i+0x1d4>
 80093ca:	0670      	lsls	r0, r6, #25
 80093cc:	d5fb      	bpl.n	80093c6 <_printf_i+0x1ca>
 80093ce:	8019      	strh	r1, [r3, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	4615      	mov	r5, r2
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	e7ba      	b.n	800934e <_printf_i+0x152>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	2100      	movs	r1, #0
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	602a      	str	r2, [r5, #0]
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	6862      	ldr	r2, [r4, #4]
 80093e4:	4628      	mov	r0, r5
 80093e6:	f002 ff03 	bl	800c1f0 <memchr>
 80093ea:	b108      	cbz	r0, 80093f0 <_printf_i+0x1f4>
 80093ec:	1b40      	subs	r0, r0, r5
 80093ee:	6060      	str	r0, [r4, #4]
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	6123      	str	r3, [r4, #16]
 80093f4:	2300      	movs	r3, #0
 80093f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fa:	e7a8      	b.n	800934e <_printf_i+0x152>
 80093fc:	462a      	mov	r2, r5
 80093fe:	4649      	mov	r1, r9
 8009400:	4640      	mov	r0, r8
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	47d0      	blx	sl
 8009406:	3001      	adds	r0, #1
 8009408:	d0ab      	beq.n	8009362 <_printf_i+0x166>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	079b      	lsls	r3, r3, #30
 800940e:	d413      	bmi.n	8009438 <_printf_i+0x23c>
 8009410:	68e0      	ldr	r0, [r4, #12]
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	4298      	cmp	r0, r3
 8009416:	bfb8      	it	lt
 8009418:	4618      	movlt	r0, r3
 800941a:	e7a4      	b.n	8009366 <_printf_i+0x16a>
 800941c:	2301      	movs	r3, #1
 800941e:	4632      	mov	r2, r6
 8009420:	4649      	mov	r1, r9
 8009422:	4640      	mov	r0, r8
 8009424:	47d0      	blx	sl
 8009426:	3001      	adds	r0, #1
 8009428:	d09b      	beq.n	8009362 <_printf_i+0x166>
 800942a:	3501      	adds	r5, #1
 800942c:	68e3      	ldr	r3, [r4, #12]
 800942e:	9903      	ldr	r1, [sp, #12]
 8009430:	1a5b      	subs	r3, r3, r1
 8009432:	42ab      	cmp	r3, r5
 8009434:	dcf2      	bgt.n	800941c <_printf_i+0x220>
 8009436:	e7eb      	b.n	8009410 <_printf_i+0x214>
 8009438:	2500      	movs	r5, #0
 800943a:	f104 0619 	add.w	r6, r4, #25
 800943e:	e7f5      	b.n	800942c <_printf_i+0x230>
 8009440:	0800d78a 	.word	0x0800d78a
 8009444:	0800d79b 	.word	0x0800d79b

08009448 <_scanf_float>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	b087      	sub	sp, #28
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	688b      	ldr	r3, [r1, #8]
 8009452:	4617      	mov	r7, r2
 8009454:	1e5a      	subs	r2, r3, #1
 8009456:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800945a:	bf85      	ittet	hi
 800945c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009460:	195b      	addhi	r3, r3, r5
 8009462:	2300      	movls	r3, #0
 8009464:	9302      	strhi	r3, [sp, #8]
 8009466:	bf88      	it	hi
 8009468:	f240 135d 	movwhi	r3, #349	; 0x15d
 800946c:	468b      	mov	fp, r1
 800946e:	f04f 0500 	mov.w	r5, #0
 8009472:	bf8c      	ite	hi
 8009474:	608b      	strhi	r3, [r1, #8]
 8009476:	9302      	strls	r3, [sp, #8]
 8009478:	680b      	ldr	r3, [r1, #0]
 800947a:	4680      	mov	r8, r0
 800947c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009480:	f84b 3b1c 	str.w	r3, [fp], #28
 8009484:	460c      	mov	r4, r1
 8009486:	465e      	mov	r6, fp
 8009488:	46aa      	mov	sl, r5
 800948a:	46a9      	mov	r9, r5
 800948c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009490:	9501      	str	r5, [sp, #4]
 8009492:	68a2      	ldr	r2, [r4, #8]
 8009494:	b152      	cbz	r2, 80094ac <_scanf_float+0x64>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b4e      	cmp	r3, #78	; 0x4e
 800949c:	d864      	bhi.n	8009568 <_scanf_float+0x120>
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d83c      	bhi.n	800951c <_scanf_float+0xd4>
 80094a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094a6:	b2c8      	uxtb	r0, r1
 80094a8:	280e      	cmp	r0, #14
 80094aa:	d93a      	bls.n	8009522 <_scanf_float+0xda>
 80094ac:	f1b9 0f00 	cmp.w	r9, #0
 80094b0:	d003      	beq.n	80094ba <_scanf_float+0x72>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094be:	f1ba 0f01 	cmp.w	sl, #1
 80094c2:	f200 8113 	bhi.w	80096ec <_scanf_float+0x2a4>
 80094c6:	455e      	cmp	r6, fp
 80094c8:	f200 8105 	bhi.w	80096d6 <_scanf_float+0x28e>
 80094cc:	2501      	movs	r5, #1
 80094ce:	4628      	mov	r0, r5
 80094d0:	b007      	add	sp, #28
 80094d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094da:	2a0d      	cmp	r2, #13
 80094dc:	d8e6      	bhi.n	80094ac <_scanf_float+0x64>
 80094de:	a101      	add	r1, pc, #4	; (adr r1, 80094e4 <_scanf_float+0x9c>)
 80094e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094e4:	08009623 	.word	0x08009623
 80094e8:	080094ad 	.word	0x080094ad
 80094ec:	080094ad 	.word	0x080094ad
 80094f0:	080094ad 	.word	0x080094ad
 80094f4:	08009683 	.word	0x08009683
 80094f8:	0800965b 	.word	0x0800965b
 80094fc:	080094ad 	.word	0x080094ad
 8009500:	080094ad 	.word	0x080094ad
 8009504:	08009631 	.word	0x08009631
 8009508:	080094ad 	.word	0x080094ad
 800950c:	080094ad 	.word	0x080094ad
 8009510:	080094ad 	.word	0x080094ad
 8009514:	080094ad 	.word	0x080094ad
 8009518:	080095e9 	.word	0x080095e9
 800951c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009520:	e7db      	b.n	80094da <_scanf_float+0x92>
 8009522:	290e      	cmp	r1, #14
 8009524:	d8c2      	bhi.n	80094ac <_scanf_float+0x64>
 8009526:	a001      	add	r0, pc, #4	; (adr r0, 800952c <_scanf_float+0xe4>)
 8009528:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800952c:	080095db 	.word	0x080095db
 8009530:	080094ad 	.word	0x080094ad
 8009534:	080095db 	.word	0x080095db
 8009538:	0800966f 	.word	0x0800966f
 800953c:	080094ad 	.word	0x080094ad
 8009540:	08009589 	.word	0x08009589
 8009544:	080095c5 	.word	0x080095c5
 8009548:	080095c5 	.word	0x080095c5
 800954c:	080095c5 	.word	0x080095c5
 8009550:	080095c5 	.word	0x080095c5
 8009554:	080095c5 	.word	0x080095c5
 8009558:	080095c5 	.word	0x080095c5
 800955c:	080095c5 	.word	0x080095c5
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095c5 	.word	0x080095c5
 8009568:	2b6e      	cmp	r3, #110	; 0x6e
 800956a:	d809      	bhi.n	8009580 <_scanf_float+0x138>
 800956c:	2b60      	cmp	r3, #96	; 0x60
 800956e:	d8b2      	bhi.n	80094d6 <_scanf_float+0x8e>
 8009570:	2b54      	cmp	r3, #84	; 0x54
 8009572:	d077      	beq.n	8009664 <_scanf_float+0x21c>
 8009574:	2b59      	cmp	r3, #89	; 0x59
 8009576:	d199      	bne.n	80094ac <_scanf_float+0x64>
 8009578:	2d07      	cmp	r5, #7
 800957a:	d197      	bne.n	80094ac <_scanf_float+0x64>
 800957c:	2508      	movs	r5, #8
 800957e:	e029      	b.n	80095d4 <_scanf_float+0x18c>
 8009580:	2b74      	cmp	r3, #116	; 0x74
 8009582:	d06f      	beq.n	8009664 <_scanf_float+0x21c>
 8009584:	2b79      	cmp	r3, #121	; 0x79
 8009586:	e7f6      	b.n	8009576 <_scanf_float+0x12e>
 8009588:	6821      	ldr	r1, [r4, #0]
 800958a:	05c8      	lsls	r0, r1, #23
 800958c:	d51a      	bpl.n	80095c4 <_scanf_float+0x17c>
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009594:	6021      	str	r1, [r4, #0]
 8009596:	f109 0901 	add.w	r9, r9, #1
 800959a:	b11b      	cbz	r3, 80095a4 <_scanf_float+0x15c>
 800959c:	3b01      	subs	r3, #1
 800959e:	3201      	adds	r2, #1
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	60a2      	str	r2, [r4, #8]
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	f340 8084 	ble.w	80096c4 <_scanf_float+0x27c>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3301      	adds	r3, #1
 80095c0:	603b      	str	r3, [r7, #0]
 80095c2:	e766      	b.n	8009492 <_scanf_float+0x4a>
 80095c4:	eb1a 0f05 	cmn.w	sl, r5
 80095c8:	f47f af70 	bne.w	80094ac <_scanf_float+0x64>
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095d2:	6022      	str	r2, [r4, #0]
 80095d4:	f806 3b01 	strb.w	r3, [r6], #1
 80095d8:	e7e4      	b.n	80095a4 <_scanf_float+0x15c>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	0610      	lsls	r0, r2, #24
 80095de:	f57f af65 	bpl.w	80094ac <_scanf_float+0x64>
 80095e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095e6:	e7f4      	b.n	80095d2 <_scanf_float+0x18a>
 80095e8:	f1ba 0f00 	cmp.w	sl, #0
 80095ec:	d10e      	bne.n	800960c <_scanf_float+0x1c4>
 80095ee:	f1b9 0f00 	cmp.w	r9, #0
 80095f2:	d10e      	bne.n	8009612 <_scanf_float+0x1ca>
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095fe:	d108      	bne.n	8009612 <_scanf_float+0x1ca>
 8009600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009604:	f04f 0a01 	mov.w	sl, #1
 8009608:	6022      	str	r2, [r4, #0]
 800960a:	e7e3      	b.n	80095d4 <_scanf_float+0x18c>
 800960c:	f1ba 0f02 	cmp.w	sl, #2
 8009610:	d055      	beq.n	80096be <_scanf_float+0x276>
 8009612:	2d01      	cmp	r5, #1
 8009614:	d002      	beq.n	800961c <_scanf_float+0x1d4>
 8009616:	2d04      	cmp	r5, #4
 8009618:	f47f af48 	bne.w	80094ac <_scanf_float+0x64>
 800961c:	3501      	adds	r5, #1
 800961e:	b2ed      	uxtb	r5, r5
 8009620:	e7d8      	b.n	80095d4 <_scanf_float+0x18c>
 8009622:	f1ba 0f01 	cmp.w	sl, #1
 8009626:	f47f af41 	bne.w	80094ac <_scanf_float+0x64>
 800962a:	f04f 0a02 	mov.w	sl, #2
 800962e:	e7d1      	b.n	80095d4 <_scanf_float+0x18c>
 8009630:	b97d      	cbnz	r5, 8009652 <_scanf_float+0x20a>
 8009632:	f1b9 0f00 	cmp.w	r9, #0
 8009636:	f47f af3c 	bne.w	80094b2 <_scanf_float+0x6a>
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009640:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009644:	f47f af39 	bne.w	80094ba <_scanf_float+0x72>
 8009648:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800964c:	2501      	movs	r5, #1
 800964e:	6022      	str	r2, [r4, #0]
 8009650:	e7c0      	b.n	80095d4 <_scanf_float+0x18c>
 8009652:	2d03      	cmp	r5, #3
 8009654:	d0e2      	beq.n	800961c <_scanf_float+0x1d4>
 8009656:	2d05      	cmp	r5, #5
 8009658:	e7de      	b.n	8009618 <_scanf_float+0x1d0>
 800965a:	2d02      	cmp	r5, #2
 800965c:	f47f af26 	bne.w	80094ac <_scanf_float+0x64>
 8009660:	2503      	movs	r5, #3
 8009662:	e7b7      	b.n	80095d4 <_scanf_float+0x18c>
 8009664:	2d06      	cmp	r5, #6
 8009666:	f47f af21 	bne.w	80094ac <_scanf_float+0x64>
 800966a:	2507      	movs	r5, #7
 800966c:	e7b2      	b.n	80095d4 <_scanf_float+0x18c>
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	0591      	lsls	r1, r2, #22
 8009672:	f57f af1b 	bpl.w	80094ac <_scanf_float+0x64>
 8009676:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800967a:	6022      	str	r2, [r4, #0]
 800967c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009680:	e7a8      	b.n	80095d4 <_scanf_float+0x18c>
 8009682:	6822      	ldr	r2, [r4, #0]
 8009684:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009688:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800968c:	d006      	beq.n	800969c <_scanf_float+0x254>
 800968e:	0550      	lsls	r0, r2, #21
 8009690:	f57f af0c 	bpl.w	80094ac <_scanf_float+0x64>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	f43f af0f 	beq.w	80094ba <_scanf_float+0x72>
 800969c:	0591      	lsls	r1, r2, #22
 800969e:	bf58      	it	pl
 80096a0:	9901      	ldrpl	r1, [sp, #4]
 80096a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096a6:	bf58      	it	pl
 80096a8:	eba9 0101 	subpl.w	r1, r9, r1
 80096ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096b0:	f04f 0900 	mov.w	r9, #0
 80096b4:	bf58      	it	pl
 80096b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096ba:	6022      	str	r2, [r4, #0]
 80096bc:	e78a      	b.n	80095d4 <_scanf_float+0x18c>
 80096be:	f04f 0a03 	mov.w	sl, #3
 80096c2:	e787      	b.n	80095d4 <_scanf_float+0x18c>
 80096c4:	4639      	mov	r1, r7
 80096c6:	4640      	mov	r0, r8
 80096c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096cc:	4798      	blx	r3
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f aedf 	beq.w	8009492 <_scanf_float+0x4a>
 80096d4:	e6ea      	b.n	80094ac <_scanf_float+0x64>
 80096d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096da:	463a      	mov	r2, r7
 80096dc:	4640      	mov	r0, r8
 80096de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096e2:	4798      	blx	r3
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	e6ec      	b.n	80094c6 <_scanf_float+0x7e>
 80096ec:	1e6b      	subs	r3, r5, #1
 80096ee:	2b06      	cmp	r3, #6
 80096f0:	d825      	bhi.n	800973e <_scanf_float+0x2f6>
 80096f2:	2d02      	cmp	r5, #2
 80096f4:	d836      	bhi.n	8009764 <_scanf_float+0x31c>
 80096f6:	455e      	cmp	r6, fp
 80096f8:	f67f aee8 	bls.w	80094cc <_scanf_float+0x84>
 80096fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009700:	463a      	mov	r2, r7
 8009702:	4640      	mov	r0, r8
 8009704:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009708:	4798      	blx	r3
 800970a:	6923      	ldr	r3, [r4, #16]
 800970c:	3b01      	subs	r3, #1
 800970e:	6123      	str	r3, [r4, #16]
 8009710:	e7f1      	b.n	80096f6 <_scanf_float+0x2ae>
 8009712:	9802      	ldr	r0, [sp, #8]
 8009714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009718:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800971c:	463a      	mov	r2, r7
 800971e:	9002      	str	r0, [sp, #8]
 8009720:	4640      	mov	r0, r8
 8009722:	4798      	blx	r3
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	3b01      	subs	r3, #1
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800972e:	fa5f fa8a 	uxtb.w	sl, sl
 8009732:	f1ba 0f02 	cmp.w	sl, #2
 8009736:	d1ec      	bne.n	8009712 <_scanf_float+0x2ca>
 8009738:	3d03      	subs	r5, #3
 800973a:	b2ed      	uxtb	r5, r5
 800973c:	1b76      	subs	r6, r6, r5
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	05da      	lsls	r2, r3, #23
 8009742:	d52f      	bpl.n	80097a4 <_scanf_float+0x35c>
 8009744:	055b      	lsls	r3, r3, #21
 8009746:	d510      	bpl.n	800976a <_scanf_float+0x322>
 8009748:	455e      	cmp	r6, fp
 800974a:	f67f aebf 	bls.w	80094cc <_scanf_float+0x84>
 800974e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009752:	463a      	mov	r2, r7
 8009754:	4640      	mov	r0, r8
 8009756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800975a:	4798      	blx	r3
 800975c:	6923      	ldr	r3, [r4, #16]
 800975e:	3b01      	subs	r3, #1
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	e7f1      	b.n	8009748 <_scanf_float+0x300>
 8009764:	46aa      	mov	sl, r5
 8009766:	9602      	str	r6, [sp, #8]
 8009768:	e7df      	b.n	800972a <_scanf_float+0x2e2>
 800976a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	2965      	cmp	r1, #101	; 0x65
 8009772:	f103 33ff 	add.w	r3, r3, #4294967295
 8009776:	f106 35ff 	add.w	r5, r6, #4294967295
 800977a:	6123      	str	r3, [r4, #16]
 800977c:	d00c      	beq.n	8009798 <_scanf_float+0x350>
 800977e:	2945      	cmp	r1, #69	; 0x45
 8009780:	d00a      	beq.n	8009798 <_scanf_float+0x350>
 8009782:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009786:	463a      	mov	r2, r7
 8009788:	4640      	mov	r0, r8
 800978a:	4798      	blx	r3
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009792:	3b01      	subs	r3, #1
 8009794:	1eb5      	subs	r5, r6, #2
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	463a      	mov	r2, r7
 800979a:	4640      	mov	r0, r8
 800979c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a0:	4798      	blx	r3
 80097a2:	462e      	mov	r6, r5
 80097a4:	6825      	ldr	r5, [r4, #0]
 80097a6:	f015 0510 	ands.w	r5, r5, #16
 80097aa:	d155      	bne.n	8009858 <_scanf_float+0x410>
 80097ac:	7035      	strb	r5, [r6, #0]
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b8:	d11b      	bne.n	80097f2 <_scanf_float+0x3aa>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	454b      	cmp	r3, r9
 80097be:	eba3 0209 	sub.w	r2, r3, r9
 80097c2:	d123      	bne.n	800980c <_scanf_float+0x3c4>
 80097c4:	2200      	movs	r2, #0
 80097c6:	4659      	mov	r1, fp
 80097c8:	4640      	mov	r0, r8
 80097ca:	f000 ff1d 	bl	800a608 <_strtod_r>
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	f012 0f02 	tst.w	r2, #2
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	d021      	beq.n	8009822 <_scanf_float+0x3da>
 80097de:	1d1a      	adds	r2, r3, #4
 80097e0:	9903      	ldr	r1, [sp, #12]
 80097e2:	600a      	str	r2, [r1, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	e9c3 6700 	strd	r6, r7, [r3]
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	60e3      	str	r3, [r4, #12]
 80097f0:	e66d      	b.n	80094ce <_scanf_float+0x86>
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0e5      	beq.n	80097c4 <_scanf_float+0x37c>
 80097f8:	9905      	ldr	r1, [sp, #20]
 80097fa:	230a      	movs	r3, #10
 80097fc:	462a      	mov	r2, r5
 80097fe:	4640      	mov	r0, r8
 8009800:	3101      	adds	r1, #1
 8009802:	f000 ffdf 	bl	800a7c4 <_strtol_r>
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	9e05      	ldr	r6, [sp, #20]
 800980a:	1ac2      	subs	r2, r0, r3
 800980c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009810:	429e      	cmp	r6, r3
 8009812:	bf28      	it	cs
 8009814:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009818:	4630      	mov	r0, r6
 800981a:	4910      	ldr	r1, [pc, #64]	; (800985c <_scanf_float+0x414>)
 800981c:	f000 f8c8 	bl	80099b0 <siprintf>
 8009820:	e7d0      	b.n	80097c4 <_scanf_float+0x37c>
 8009822:	f012 0f04 	tst.w	r2, #4
 8009826:	f103 0204 	add.w	r2, r3, #4
 800982a:	d1d9      	bne.n	80097e0 <_scanf_float+0x398>
 800982c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009830:	f8cc 2000 	str.w	r2, [ip]
 8009834:	f8d3 8000 	ldr.w	r8, [r3]
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	f7f7 fa10 	bl	8000c60 <__aeabi_dcmpun>
 8009840:	b128      	cbz	r0, 800984e <_scanf_float+0x406>
 8009842:	4807      	ldr	r0, [pc, #28]	; (8009860 <_scanf_float+0x418>)
 8009844:	f000 f8b0 	bl	80099a8 <nanf>
 8009848:	f8c8 0000 	str.w	r0, [r8]
 800984c:	e7cd      	b.n	80097ea <_scanf_float+0x3a2>
 800984e:	4630      	mov	r0, r6
 8009850:	4639      	mov	r1, r7
 8009852:	f7f7 fa63 	bl	8000d1c <__aeabi_d2f>
 8009856:	e7f7      	b.n	8009848 <_scanf_float+0x400>
 8009858:	2500      	movs	r5, #0
 800985a:	e638      	b.n	80094ce <_scanf_float+0x86>
 800985c:	0800d7ac 	.word	0x0800d7ac
 8009860:	0800d8b7 	.word	0x0800d8b7

08009864 <iprintf>:
 8009864:	b40f      	push	{r0, r1, r2, r3}
 8009866:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <iprintf+0x2c>)
 8009868:	b513      	push	{r0, r1, r4, lr}
 800986a:	681c      	ldr	r4, [r3, #0]
 800986c:	b124      	cbz	r4, 8009878 <iprintf+0x14>
 800986e:	69a3      	ldr	r3, [r4, #24]
 8009870:	b913      	cbnz	r3, 8009878 <iprintf+0x14>
 8009872:	4620      	mov	r0, r4
 8009874:	f002 f820 	bl	800b8b8 <__sinit>
 8009878:	ab05      	add	r3, sp, #20
 800987a:	4620      	mov	r0, r4
 800987c:	9a04      	ldr	r2, [sp, #16]
 800987e:	68a1      	ldr	r1, [r4, #8]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	f003 fbef 	bl	800d064 <_vfiprintf_r>
 8009886:	b002      	add	sp, #8
 8009888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988c:	b004      	add	sp, #16
 800988e:	4770      	bx	lr
 8009890:	20000610 	.word	0x20000610

08009894 <putchar>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <putchar+0x24>)
 8009898:	4605      	mov	r5, r0
 800989a:	681c      	ldr	r4, [r3, #0]
 800989c:	b124      	cbz	r4, 80098a8 <putchar+0x14>
 800989e:	69a3      	ldr	r3, [r4, #24]
 80098a0:	b913      	cbnz	r3, 80098a8 <putchar+0x14>
 80098a2:	4620      	mov	r0, r4
 80098a4:	f002 f808 	bl	800b8b8 <__sinit>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4620      	mov	r0, r4
 80098ac:	68a2      	ldr	r2, [r4, #8]
 80098ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b2:	f003 bd07 	b.w	800d2c4 <_putc_r>
 80098b6:	bf00      	nop
 80098b8:	20000610 	.word	0x20000610

080098bc <_puts_r>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	460e      	mov	r6, r1
 80098c0:	4605      	mov	r5, r0
 80098c2:	b118      	cbz	r0, 80098cc <_puts_r+0x10>
 80098c4:	6983      	ldr	r3, [r0, #24]
 80098c6:	b90b      	cbnz	r3, 80098cc <_puts_r+0x10>
 80098c8:	f001 fff6 	bl	800b8b8 <__sinit>
 80098cc:	69ab      	ldr	r3, [r5, #24]
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	b913      	cbnz	r3, 80098d8 <_puts_r+0x1c>
 80098d2:	4628      	mov	r0, r5
 80098d4:	f001 fff0 	bl	800b8b8 <__sinit>
 80098d8:	4b2c      	ldr	r3, [pc, #176]	; (800998c <_puts_r+0xd0>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	d120      	bne.n	8009920 <_puts_r+0x64>
 80098de:	686c      	ldr	r4, [r5, #4]
 80098e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e2:	07db      	lsls	r3, r3, #31
 80098e4:	d405      	bmi.n	80098f2 <_puts_r+0x36>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	0598      	lsls	r0, r3, #22
 80098ea:	d402      	bmi.n	80098f2 <_puts_r+0x36>
 80098ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ee:	f002 fbfe 	bl	800c0ee <__retarget_lock_acquire_recursive>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	0719      	lsls	r1, r3, #28
 80098f6:	d51d      	bpl.n	8009934 <_puts_r+0x78>
 80098f8:	6923      	ldr	r3, [r4, #16]
 80098fa:	b1db      	cbz	r3, 8009934 <_puts_r+0x78>
 80098fc:	3e01      	subs	r6, #1
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009904:	3b01      	subs	r3, #1
 8009906:	60a3      	str	r3, [r4, #8]
 8009908:	bb39      	cbnz	r1, 800995a <_puts_r+0x9e>
 800990a:	2b00      	cmp	r3, #0
 800990c:	da38      	bge.n	8009980 <_puts_r+0xc4>
 800990e:	4622      	mov	r2, r4
 8009910:	210a      	movs	r1, #10
 8009912:	4628      	mov	r0, r5
 8009914:	f000 ff62 	bl	800a7dc <__swbuf_r>
 8009918:	3001      	adds	r0, #1
 800991a:	d011      	beq.n	8009940 <_puts_r+0x84>
 800991c:	250a      	movs	r5, #10
 800991e:	e011      	b.n	8009944 <_puts_r+0x88>
 8009920:	4b1b      	ldr	r3, [pc, #108]	; (8009990 <_puts_r+0xd4>)
 8009922:	429c      	cmp	r4, r3
 8009924:	d101      	bne.n	800992a <_puts_r+0x6e>
 8009926:	68ac      	ldr	r4, [r5, #8]
 8009928:	e7da      	b.n	80098e0 <_puts_r+0x24>
 800992a:	4b1a      	ldr	r3, [pc, #104]	; (8009994 <_puts_r+0xd8>)
 800992c:	429c      	cmp	r4, r3
 800992e:	bf08      	it	eq
 8009930:	68ec      	ldreq	r4, [r5, #12]
 8009932:	e7d5      	b.n	80098e0 <_puts_r+0x24>
 8009934:	4621      	mov	r1, r4
 8009936:	4628      	mov	r0, r5
 8009938:	f000 ffa2 	bl	800a880 <__swsetup_r>
 800993c:	2800      	cmp	r0, #0
 800993e:	d0dd      	beq.n	80098fc <_puts_r+0x40>
 8009940:	f04f 35ff 	mov.w	r5, #4294967295
 8009944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009946:	07da      	lsls	r2, r3, #31
 8009948:	d405      	bmi.n	8009956 <_puts_r+0x9a>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	059b      	lsls	r3, r3, #22
 800994e:	d402      	bmi.n	8009956 <_puts_r+0x9a>
 8009950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009952:	f002 fbcd 	bl	800c0f0 <__retarget_lock_release_recursive>
 8009956:	4628      	mov	r0, r5
 8009958:	bd70      	pop	{r4, r5, r6, pc}
 800995a:	2b00      	cmp	r3, #0
 800995c:	da04      	bge.n	8009968 <_puts_r+0xac>
 800995e:	69a2      	ldr	r2, [r4, #24]
 8009960:	429a      	cmp	r2, r3
 8009962:	dc06      	bgt.n	8009972 <_puts_r+0xb6>
 8009964:	290a      	cmp	r1, #10
 8009966:	d004      	beq.n	8009972 <_puts_r+0xb6>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	6022      	str	r2, [r4, #0]
 800996e:	7019      	strb	r1, [r3, #0]
 8009970:	e7c5      	b.n	80098fe <_puts_r+0x42>
 8009972:	4622      	mov	r2, r4
 8009974:	4628      	mov	r0, r5
 8009976:	f000 ff31 	bl	800a7dc <__swbuf_r>
 800997a:	3001      	adds	r0, #1
 800997c:	d1bf      	bne.n	80098fe <_puts_r+0x42>
 800997e:	e7df      	b.n	8009940 <_puts_r+0x84>
 8009980:	250a      	movs	r5, #10
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	6022      	str	r2, [r4, #0]
 8009988:	701d      	strb	r5, [r3, #0]
 800998a:	e7db      	b.n	8009944 <_puts_r+0x88>
 800998c:	0800da54 	.word	0x0800da54
 8009990:	0800da74 	.word	0x0800da74
 8009994:	0800da34 	.word	0x0800da34

08009998 <puts>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <puts+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f7ff bf8d 	b.w	80098bc <_puts_r>
 80099a2:	bf00      	nop
 80099a4:	20000610 	.word	0x20000610

080099a8 <nanf>:
 80099a8:	4800      	ldr	r0, [pc, #0]	; (80099ac <nanf+0x4>)
 80099aa:	4770      	bx	lr
 80099ac:	7fc00000 	.word	0x7fc00000

080099b0 <siprintf>:
 80099b0:	b40e      	push	{r1, r2, r3}
 80099b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099b6:	b500      	push	{lr}
 80099b8:	b09c      	sub	sp, #112	; 0x70
 80099ba:	ab1d      	add	r3, sp, #116	; 0x74
 80099bc:	9002      	str	r0, [sp, #8]
 80099be:	9006      	str	r0, [sp, #24]
 80099c0:	9107      	str	r1, [sp, #28]
 80099c2:	9104      	str	r1, [sp, #16]
 80099c4:	4808      	ldr	r0, [pc, #32]	; (80099e8 <siprintf+0x38>)
 80099c6:	4909      	ldr	r1, [pc, #36]	; (80099ec <siprintf+0x3c>)
 80099c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099cc:	9105      	str	r1, [sp, #20]
 80099ce:	6800      	ldr	r0, [r0, #0]
 80099d0:	a902      	add	r1, sp, #8
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	f003 fa1e 	bl	800ce14 <_svfiprintf_r>
 80099d8:	2200      	movs	r2, #0
 80099da:	9b02      	ldr	r3, [sp, #8]
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	b01c      	add	sp, #112	; 0x70
 80099e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e4:	b003      	add	sp, #12
 80099e6:	4770      	bx	lr
 80099e8:	20000610 	.word	0x20000610
 80099ec:	ffff0208 	.word	0xffff0208

080099f0 <sulp>:
 80099f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	460f      	mov	r7, r1
 80099f6:	4690      	mov	r8, r2
 80099f8:	f002 ff78 	bl	800c8ec <__ulp>
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	f1b8 0f00 	cmp.w	r8, #0
 8009a04:	d011      	beq.n	8009a2a <sulp+0x3a>
 8009a06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	dd0b      	ble.n	8009a2a <sulp+0x3a>
 8009a12:	2400      	movs	r4, #0
 8009a14:	051b      	lsls	r3, r3, #20
 8009a16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a1e:	4622      	mov	r2, r4
 8009a20:	462b      	mov	r3, r5
 8009a22:	f7f6 fe83 	bl	800072c <__aeabi_dmul>
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a32:	0000      	movs	r0, r0
 8009a34:	0000      	movs	r0, r0
	...

08009a38 <_strtod_l>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	469b      	mov	fp, r3
 8009a3e:	2300      	movs	r3, #0
 8009a40:	b09f      	sub	sp, #124	; 0x7c
 8009a42:	931a      	str	r3, [sp, #104]	; 0x68
 8009a44:	4b9e      	ldr	r3, [pc, #632]	; (8009cc0 <_strtod_l+0x288>)
 8009a46:	4682      	mov	sl, r0
 8009a48:	681f      	ldr	r7, [r3, #0]
 8009a4a:	460e      	mov	r6, r1
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	9215      	str	r2, [sp, #84]	; 0x54
 8009a50:	f7f6 fbf4 	bl	800023c <strlen>
 8009a54:	f04f 0800 	mov.w	r8, #0
 8009a58:	4604      	mov	r4, r0
 8009a5a:	f04f 0900 	mov.w	r9, #0
 8009a5e:	9619      	str	r6, [sp, #100]	; 0x64
 8009a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a62:	781a      	ldrb	r2, [r3, #0]
 8009a64:	2a2b      	cmp	r2, #43	; 0x2b
 8009a66:	d04c      	beq.n	8009b02 <_strtod_l+0xca>
 8009a68:	d83a      	bhi.n	8009ae0 <_strtod_l+0xa8>
 8009a6a:	2a0d      	cmp	r2, #13
 8009a6c:	d833      	bhi.n	8009ad6 <_strtod_l+0x9e>
 8009a6e:	2a08      	cmp	r2, #8
 8009a70:	d833      	bhi.n	8009ada <_strtod_l+0xa2>
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	d03d      	beq.n	8009af2 <_strtod_l+0xba>
 8009a76:	2300      	movs	r3, #0
 8009a78:	930a      	str	r3, [sp, #40]	; 0x28
 8009a7a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009a7c:	782b      	ldrb	r3, [r5, #0]
 8009a7e:	2b30      	cmp	r3, #48	; 0x30
 8009a80:	f040 80aa 	bne.w	8009bd8 <_strtod_l+0x1a0>
 8009a84:	786b      	ldrb	r3, [r5, #1]
 8009a86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a8a:	2b58      	cmp	r3, #88	; 0x58
 8009a8c:	d166      	bne.n	8009b5c <_strtod_l+0x124>
 8009a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a90:	4650      	mov	r0, sl
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	ab1a      	add	r3, sp, #104	; 0x68
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	4a8a      	ldr	r2, [pc, #552]	; (8009cc4 <_strtod_l+0x28c>)
 8009a9a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a9e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009aa0:	a919      	add	r1, sp, #100	; 0x64
 8009aa2:	f002 f821 	bl	800bae8 <__gethex>
 8009aa6:	f010 0607 	ands.w	r6, r0, #7
 8009aaa:	4604      	mov	r4, r0
 8009aac:	d005      	beq.n	8009aba <_strtod_l+0x82>
 8009aae:	2e06      	cmp	r6, #6
 8009ab0:	d129      	bne.n	8009b06 <_strtod_l+0xce>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	9519      	str	r5, [sp, #100]	; 0x64
 8009ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8009aba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 858a 	bne.w	800a5d6 <_strtod_l+0xb9e>
 8009ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac4:	b1d3      	cbz	r3, 8009afc <_strtod_l+0xc4>
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009acc:	4610      	mov	r0, r2
 8009ace:	4619      	mov	r1, r3
 8009ad0:	b01f      	add	sp, #124	; 0x7c
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	2a20      	cmp	r2, #32
 8009ad8:	d1cd      	bne.n	8009a76 <_strtod_l+0x3e>
 8009ada:	3301      	adds	r3, #1
 8009adc:	9319      	str	r3, [sp, #100]	; 0x64
 8009ade:	e7bf      	b.n	8009a60 <_strtod_l+0x28>
 8009ae0:	2a2d      	cmp	r2, #45	; 0x2d
 8009ae2:	d1c8      	bne.n	8009a76 <_strtod_l+0x3e>
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	9219      	str	r2, [sp, #100]	; 0x64
 8009aec:	785b      	ldrb	r3, [r3, #1]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1c3      	bne.n	8009a7a <_strtod_l+0x42>
 8009af2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af4:	9619      	str	r6, [sp, #100]	; 0x64
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 856b 	bne.w	800a5d2 <_strtod_l+0xb9a>
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	e7e4      	b.n	8009acc <_strtod_l+0x94>
 8009b02:	2200      	movs	r2, #0
 8009b04:	e7ef      	b.n	8009ae6 <_strtod_l+0xae>
 8009b06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b08:	b13a      	cbz	r2, 8009b1a <_strtod_l+0xe2>
 8009b0a:	2135      	movs	r1, #53	; 0x35
 8009b0c:	a81c      	add	r0, sp, #112	; 0x70
 8009b0e:	f002 fff1 	bl	800caf4 <__copybits>
 8009b12:	4650      	mov	r0, sl
 8009b14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b16:	f002 fbb9 	bl	800c28c <_Bfree>
 8009b1a:	3e01      	subs	r6, #1
 8009b1c:	2e04      	cmp	r6, #4
 8009b1e:	d806      	bhi.n	8009b2e <_strtod_l+0xf6>
 8009b20:	e8df f006 	tbb	[pc, r6]
 8009b24:	1714030a 	.word	0x1714030a
 8009b28:	0a          	.byte	0x0a
 8009b29:	00          	.byte	0x00
 8009b2a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009b2e:	0721      	lsls	r1, r4, #28
 8009b30:	d5c3      	bpl.n	8009aba <_strtod_l+0x82>
 8009b32:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009b36:	e7c0      	b.n	8009aba <_strtod_l+0x82>
 8009b38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009b3a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009b3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009b4a:	e7f0      	b.n	8009b2e <_strtod_l+0xf6>
 8009b4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009cc8 <_strtod_l+0x290>
 8009b50:	e7ed      	b.n	8009b2e <_strtod_l+0xf6>
 8009b52:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009b56:	f04f 38ff 	mov.w	r8, #4294967295
 8009b5a:	e7e8      	b.n	8009b2e <_strtod_l+0xf6>
 8009b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	9219      	str	r2, [sp, #100]	; 0x64
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b30      	cmp	r3, #48	; 0x30
 8009b66:	d0f9      	beq.n	8009b5c <_strtod_l+0x124>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0a6      	beq.n	8009aba <_strtod_l+0x82>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	9307      	str	r3, [sp, #28]
 8009b70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b72:	220a      	movs	r2, #10
 8009b74:	9308      	str	r3, [sp, #32]
 8009b76:	2300      	movs	r3, #0
 8009b78:	469b      	mov	fp, r3
 8009b7a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009b7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009b80:	7805      	ldrb	r5, [r0, #0]
 8009b82:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009b86:	b2d9      	uxtb	r1, r3
 8009b88:	2909      	cmp	r1, #9
 8009b8a:	d927      	bls.n	8009bdc <_strtod_l+0x1a4>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	4639      	mov	r1, r7
 8009b90:	f003 fc39 	bl	800d406 <strncmp>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d033      	beq.n	8009c00 <_strtod_l+0x1c8>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	465c      	mov	r4, fp
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	9004      	str	r0, [sp, #16]
 8009ba2:	2a65      	cmp	r2, #101	; 0x65
 8009ba4:	d001      	beq.n	8009baa <_strtod_l+0x172>
 8009ba6:	2a45      	cmp	r2, #69	; 0x45
 8009ba8:	d114      	bne.n	8009bd4 <_strtod_l+0x19c>
 8009baa:	b91c      	cbnz	r4, 8009bb4 <_strtod_l+0x17c>
 8009bac:	9a07      	ldr	r2, [sp, #28]
 8009bae:	4302      	orrs	r2, r0
 8009bb0:	d09f      	beq.n	8009af2 <_strtod_l+0xba>
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009bb6:	1c72      	adds	r2, r6, #1
 8009bb8:	9219      	str	r2, [sp, #100]	; 0x64
 8009bba:	7872      	ldrb	r2, [r6, #1]
 8009bbc:	2a2b      	cmp	r2, #43	; 0x2b
 8009bbe:	d079      	beq.n	8009cb4 <_strtod_l+0x27c>
 8009bc0:	2a2d      	cmp	r2, #45	; 0x2d
 8009bc2:	f000 8083 	beq.w	8009ccc <_strtod_l+0x294>
 8009bc6:	2700      	movs	r7, #0
 8009bc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009bcc:	2909      	cmp	r1, #9
 8009bce:	f240 8083 	bls.w	8009cd8 <_strtod_l+0x2a0>
 8009bd2:	9619      	str	r6, [sp, #100]	; 0x64
 8009bd4:	2500      	movs	r5, #0
 8009bd6:	e09f      	b.n	8009d18 <_strtod_l+0x2e0>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e7c8      	b.n	8009b6e <_strtod_l+0x136>
 8009bdc:	f1bb 0f08 	cmp.w	fp, #8
 8009be0:	bfd5      	itete	le
 8009be2:	9906      	ldrle	r1, [sp, #24]
 8009be4:	9905      	ldrgt	r1, [sp, #20]
 8009be6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bea:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009bee:	f100 0001 	add.w	r0, r0, #1
 8009bf2:	bfd4      	ite	le
 8009bf4:	9306      	strle	r3, [sp, #24]
 8009bf6:	9305      	strgt	r3, [sp, #20]
 8009bf8:	f10b 0b01 	add.w	fp, fp, #1
 8009bfc:	9019      	str	r0, [sp, #100]	; 0x64
 8009bfe:	e7be      	b.n	8009b7e <_strtod_l+0x146>
 8009c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c02:	191a      	adds	r2, r3, r4
 8009c04:	9219      	str	r2, [sp, #100]	; 0x64
 8009c06:	5d1a      	ldrb	r2, [r3, r4]
 8009c08:	f1bb 0f00 	cmp.w	fp, #0
 8009c0c:	d036      	beq.n	8009c7c <_strtod_l+0x244>
 8009c0e:	465c      	mov	r4, fp
 8009c10:	9004      	str	r0, [sp, #16]
 8009c12:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d912      	bls.n	8009c40 <_strtod_l+0x208>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7c1      	b.n	8009ba2 <_strtod_l+0x16a>
 8009c1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c20:	3001      	adds	r0, #1
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	9219      	str	r2, [sp, #100]	; 0x64
 8009c26:	785a      	ldrb	r2, [r3, #1]
 8009c28:	2a30      	cmp	r2, #48	; 0x30
 8009c2a:	d0f8      	beq.n	8009c1e <_strtod_l+0x1e6>
 8009c2c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	f200 84d5 	bhi.w	800a5e0 <_strtod_l+0xba8>
 8009c36:	9004      	str	r0, [sp, #16]
 8009c38:	2000      	movs	r0, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c3e:	9308      	str	r3, [sp, #32]
 8009c40:	3a30      	subs	r2, #48	; 0x30
 8009c42:	f100 0301 	add.w	r3, r0, #1
 8009c46:	d013      	beq.n	8009c70 <_strtod_l+0x238>
 8009c48:	9904      	ldr	r1, [sp, #16]
 8009c4a:	1905      	adds	r5, r0, r4
 8009c4c:	4419      	add	r1, r3
 8009c4e:	9104      	str	r1, [sp, #16]
 8009c50:	4623      	mov	r3, r4
 8009c52:	210a      	movs	r1, #10
 8009c54:	42ab      	cmp	r3, r5
 8009c56:	d113      	bne.n	8009c80 <_strtod_l+0x248>
 8009c58:	1823      	adds	r3, r4, r0
 8009c5a:	2b08      	cmp	r3, #8
 8009c5c:	f104 0401 	add.w	r4, r4, #1
 8009c60:	4404      	add	r4, r0
 8009c62:	dc1b      	bgt.n	8009c9c <_strtod_l+0x264>
 8009c64:	230a      	movs	r3, #10
 8009c66:	9906      	ldr	r1, [sp, #24]
 8009c68:	fb03 2301 	mla	r3, r3, r1, r2
 8009c6c:	9306      	str	r3, [sp, #24]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c72:	4618      	mov	r0, r3
 8009c74:	1c51      	adds	r1, r2, #1
 8009c76:	9119      	str	r1, [sp, #100]	; 0x64
 8009c78:	7852      	ldrb	r2, [r2, #1]
 8009c7a:	e7ca      	b.n	8009c12 <_strtod_l+0x1da>
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	e7d3      	b.n	8009c28 <_strtod_l+0x1f0>
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	dc04      	bgt.n	8009c8e <_strtod_l+0x256>
 8009c84:	9f06      	ldr	r7, [sp, #24]
 8009c86:	434f      	muls	r7, r1
 8009c88:	9706      	str	r7, [sp, #24]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	e7e2      	b.n	8009c54 <_strtod_l+0x21c>
 8009c8e:	1c5f      	adds	r7, r3, #1
 8009c90:	2f10      	cmp	r7, #16
 8009c92:	bfde      	ittt	le
 8009c94:	9f05      	ldrle	r7, [sp, #20]
 8009c96:	434f      	mulle	r7, r1
 8009c98:	9705      	strle	r7, [sp, #20]
 8009c9a:	e7f6      	b.n	8009c8a <_strtod_l+0x252>
 8009c9c:	2c10      	cmp	r4, #16
 8009c9e:	bfdf      	itttt	le
 8009ca0:	230a      	movle	r3, #10
 8009ca2:	9905      	ldrle	r1, [sp, #20]
 8009ca4:	fb03 2301 	mlale	r3, r3, r1, r2
 8009ca8:	9305      	strle	r3, [sp, #20]
 8009caa:	e7e0      	b.n	8009c6e <_strtod_l+0x236>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e77b      	b.n	8009bac <_strtod_l+0x174>
 8009cb4:	2700      	movs	r7, #0
 8009cb6:	1cb2      	adds	r2, r6, #2
 8009cb8:	9219      	str	r2, [sp, #100]	; 0x64
 8009cba:	78b2      	ldrb	r2, [r6, #2]
 8009cbc:	e784      	b.n	8009bc8 <_strtod_l+0x190>
 8009cbe:	bf00      	nop
 8009cc0:	0800dafc 	.word	0x0800dafc
 8009cc4:	0800d7b4 	.word	0x0800d7b4
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	2701      	movs	r7, #1
 8009cce:	e7f2      	b.n	8009cb6 <_strtod_l+0x27e>
 8009cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cd2:	1c51      	adds	r1, r2, #1
 8009cd4:	9119      	str	r1, [sp, #100]	; 0x64
 8009cd6:	7852      	ldrb	r2, [r2, #1]
 8009cd8:	2a30      	cmp	r2, #48	; 0x30
 8009cda:	d0f9      	beq.n	8009cd0 <_strtod_l+0x298>
 8009cdc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ce0:	2908      	cmp	r1, #8
 8009ce2:	f63f af77 	bhi.w	8009bd4 <_strtod_l+0x19c>
 8009ce6:	f04f 0e0a 	mov.w	lr, #10
 8009cea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009cee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cf4:	1c51      	adds	r1, r2, #1
 8009cf6:	9119      	str	r1, [sp, #100]	; 0x64
 8009cf8:	7852      	ldrb	r2, [r2, #1]
 8009cfa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009cfe:	2d09      	cmp	r5, #9
 8009d00:	d935      	bls.n	8009d6e <_strtod_l+0x336>
 8009d02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d04:	1b49      	subs	r1, r1, r5
 8009d06:	2908      	cmp	r1, #8
 8009d08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009d0c:	dc02      	bgt.n	8009d14 <_strtod_l+0x2dc>
 8009d0e:	4565      	cmp	r5, ip
 8009d10:	bfa8      	it	ge
 8009d12:	4665      	movge	r5, ip
 8009d14:	b107      	cbz	r7, 8009d18 <_strtod_l+0x2e0>
 8009d16:	426d      	negs	r5, r5
 8009d18:	2c00      	cmp	r4, #0
 8009d1a:	d14c      	bne.n	8009db6 <_strtod_l+0x37e>
 8009d1c:	9907      	ldr	r1, [sp, #28]
 8009d1e:	4301      	orrs	r1, r0
 8009d20:	f47f aecb 	bne.w	8009aba <_strtod_l+0x82>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f47f aee4 	bne.w	8009af2 <_strtod_l+0xba>
 8009d2a:	2a69      	cmp	r2, #105	; 0x69
 8009d2c:	d026      	beq.n	8009d7c <_strtod_l+0x344>
 8009d2e:	dc23      	bgt.n	8009d78 <_strtod_l+0x340>
 8009d30:	2a49      	cmp	r2, #73	; 0x49
 8009d32:	d023      	beq.n	8009d7c <_strtod_l+0x344>
 8009d34:	2a4e      	cmp	r2, #78	; 0x4e
 8009d36:	f47f aedc 	bne.w	8009af2 <_strtod_l+0xba>
 8009d3a:	499d      	ldr	r1, [pc, #628]	; (8009fb0 <_strtod_l+0x578>)
 8009d3c:	a819      	add	r0, sp, #100	; 0x64
 8009d3e:	f002 f921 	bl	800bf84 <__match>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f aed5 	beq.w	8009af2 <_strtod_l+0xba>
 8009d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b28      	cmp	r3, #40	; 0x28
 8009d4e:	d12c      	bne.n	8009daa <_strtod_l+0x372>
 8009d50:	4998      	ldr	r1, [pc, #608]	; (8009fb4 <_strtod_l+0x57c>)
 8009d52:	aa1c      	add	r2, sp, #112	; 0x70
 8009d54:	a819      	add	r0, sp, #100	; 0x64
 8009d56:	f002 f929 	bl	800bfac <__hexnan>
 8009d5a:	2805      	cmp	r0, #5
 8009d5c:	d125      	bne.n	8009daa <_strtod_l+0x372>
 8009d5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009d64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009d68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009d6c:	e6a5      	b.n	8009aba <_strtod_l+0x82>
 8009d6e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009d72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009d76:	e7bc      	b.n	8009cf2 <_strtod_l+0x2ba>
 8009d78:	2a6e      	cmp	r2, #110	; 0x6e
 8009d7a:	e7dc      	b.n	8009d36 <_strtod_l+0x2fe>
 8009d7c:	498e      	ldr	r1, [pc, #568]	; (8009fb8 <_strtod_l+0x580>)
 8009d7e:	a819      	add	r0, sp, #100	; 0x64
 8009d80:	f002 f900 	bl	800bf84 <__match>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f aeb4 	beq.w	8009af2 <_strtod_l+0xba>
 8009d8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d8c:	498b      	ldr	r1, [pc, #556]	; (8009fbc <_strtod_l+0x584>)
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	a819      	add	r0, sp, #100	; 0x64
 8009d92:	9319      	str	r3, [sp, #100]	; 0x64
 8009d94:	f002 f8f6 	bl	800bf84 <__match>
 8009d98:	b910      	cbnz	r0, 8009da0 <_strtod_l+0x368>
 8009d9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	9319      	str	r3, [sp, #100]	; 0x64
 8009da0:	f04f 0800 	mov.w	r8, #0
 8009da4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009fc0 <_strtod_l+0x588>
 8009da8:	e687      	b.n	8009aba <_strtod_l+0x82>
 8009daa:	4886      	ldr	r0, [pc, #536]	; (8009fc4 <_strtod_l+0x58c>)
 8009dac:	f003 fad2 	bl	800d354 <nan>
 8009db0:	4680      	mov	r8, r0
 8009db2:	4689      	mov	r9, r1
 8009db4:	e681      	b.n	8009aba <_strtod_l+0x82>
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	f1bb 0f00 	cmp.w	fp, #0
 8009dbc:	bf08      	it	eq
 8009dbe:	46a3      	moveq	fp, r4
 8009dc0:	1aeb      	subs	r3, r5, r3
 8009dc2:	2c10      	cmp	r4, #16
 8009dc4:	9806      	ldr	r0, [sp, #24]
 8009dc6:	4626      	mov	r6, r4
 8009dc8:	9307      	str	r3, [sp, #28]
 8009dca:	bfa8      	it	ge
 8009dcc:	2610      	movge	r6, #16
 8009dce:	f7f6 fc33 	bl	8000638 <__aeabi_ui2d>
 8009dd2:	2c09      	cmp	r4, #9
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	4689      	mov	r9, r1
 8009dd8:	dd13      	ble.n	8009e02 <_strtod_l+0x3ca>
 8009dda:	4b7b      	ldr	r3, [pc, #492]	; (8009fc8 <_strtod_l+0x590>)
 8009ddc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009de0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009de4:	f7f6 fca2 	bl	800072c <__aeabi_dmul>
 8009de8:	4680      	mov	r8, r0
 8009dea:	9805      	ldr	r0, [sp, #20]
 8009dec:	4689      	mov	r9, r1
 8009dee:	f7f6 fc23 	bl	8000638 <__aeabi_ui2d>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4640      	mov	r0, r8
 8009df8:	4649      	mov	r1, r9
 8009dfa:	f7f6 fae1 	bl	80003c0 <__adddf3>
 8009dfe:	4680      	mov	r8, r0
 8009e00:	4689      	mov	r9, r1
 8009e02:	2c0f      	cmp	r4, #15
 8009e04:	dc36      	bgt.n	8009e74 <_strtod_l+0x43c>
 8009e06:	9b07      	ldr	r3, [sp, #28]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f43f ae56 	beq.w	8009aba <_strtod_l+0x82>
 8009e0e:	dd22      	ble.n	8009e56 <_strtod_l+0x41e>
 8009e10:	2b16      	cmp	r3, #22
 8009e12:	dc09      	bgt.n	8009e28 <_strtod_l+0x3f0>
 8009e14:	496c      	ldr	r1, [pc, #432]	; (8009fc8 <_strtod_l+0x590>)
 8009e16:	4642      	mov	r2, r8
 8009e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e22:	f7f6 fc83 	bl	800072c <__aeabi_dmul>
 8009e26:	e7c3      	b.n	8009db0 <_strtod_l+0x378>
 8009e28:	9a07      	ldr	r2, [sp, #28]
 8009e2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	db20      	blt.n	8009e74 <_strtod_l+0x43c>
 8009e32:	4d65      	ldr	r5, [pc, #404]	; (8009fc8 <_strtod_l+0x590>)
 8009e34:	f1c4 040f 	rsb	r4, r4, #15
 8009e38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e42:	464b      	mov	r3, r9
 8009e44:	f7f6 fc72 	bl	800072c <__aeabi_dmul>
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	1b1c      	subs	r4, r3, r4
 8009e4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009e50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e54:	e7e5      	b.n	8009e22 <_strtod_l+0x3ea>
 8009e56:	9b07      	ldr	r3, [sp, #28]
 8009e58:	3316      	adds	r3, #22
 8009e5a:	db0b      	blt.n	8009e74 <_strtod_l+0x43c>
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	4640      	mov	r0, r8
 8009e60:	1b5d      	subs	r5, r3, r5
 8009e62:	4b59      	ldr	r3, [pc, #356]	; (8009fc8 <_strtod_l+0x590>)
 8009e64:	4649      	mov	r1, r9
 8009e66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009e6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e6e:	f7f6 fd87 	bl	8000980 <__aeabi_ddiv>
 8009e72:	e79d      	b.n	8009db0 <_strtod_l+0x378>
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	1ba6      	subs	r6, r4, r6
 8009e78:	441e      	add	r6, r3
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	dd74      	ble.n	8009f68 <_strtod_l+0x530>
 8009e7e:	f016 030f 	ands.w	r3, r6, #15
 8009e82:	d00a      	beq.n	8009e9a <_strtod_l+0x462>
 8009e84:	4950      	ldr	r1, [pc, #320]	; (8009fc8 <_strtod_l+0x590>)
 8009e86:	4642      	mov	r2, r8
 8009e88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e90:	464b      	mov	r3, r9
 8009e92:	f7f6 fc4b 	bl	800072c <__aeabi_dmul>
 8009e96:	4680      	mov	r8, r0
 8009e98:	4689      	mov	r9, r1
 8009e9a:	f036 060f 	bics.w	r6, r6, #15
 8009e9e:	d052      	beq.n	8009f46 <_strtod_l+0x50e>
 8009ea0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009ea4:	dd27      	ble.n	8009ef6 <_strtod_l+0x4be>
 8009ea6:	f04f 0b00 	mov.w	fp, #0
 8009eaa:	f8cd b010 	str.w	fp, [sp, #16]
 8009eae:	f8cd b020 	str.w	fp, [sp, #32]
 8009eb2:	f8cd b018 	str.w	fp, [sp, #24]
 8009eb6:	2322      	movs	r3, #34	; 0x22
 8009eb8:	f04f 0800 	mov.w	r8, #0
 8009ebc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009fc0 <_strtod_l+0x588>
 8009ec0:	f8ca 3000 	str.w	r3, [sl]
 8009ec4:	9b08      	ldr	r3, [sp, #32]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f43f adf7 	beq.w	8009aba <_strtod_l+0x82>
 8009ecc:	4650      	mov	r0, sl
 8009ece:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ed0:	f002 f9dc 	bl	800c28c <_Bfree>
 8009ed4:	4650      	mov	r0, sl
 8009ed6:	9906      	ldr	r1, [sp, #24]
 8009ed8:	f002 f9d8 	bl	800c28c <_Bfree>
 8009edc:	4650      	mov	r0, sl
 8009ede:	9904      	ldr	r1, [sp, #16]
 8009ee0:	f002 f9d4 	bl	800c28c <_Bfree>
 8009ee4:	4650      	mov	r0, sl
 8009ee6:	9908      	ldr	r1, [sp, #32]
 8009ee8:	f002 f9d0 	bl	800c28c <_Bfree>
 8009eec:	4659      	mov	r1, fp
 8009eee:	4650      	mov	r0, sl
 8009ef0:	f002 f9cc 	bl	800c28c <_Bfree>
 8009ef4:	e5e1      	b.n	8009aba <_strtod_l+0x82>
 8009ef6:	4b35      	ldr	r3, [pc, #212]	; (8009fcc <_strtod_l+0x594>)
 8009ef8:	4640      	mov	r0, r8
 8009efa:	9305      	str	r3, [sp, #20]
 8009efc:	2300      	movs	r3, #0
 8009efe:	4649      	mov	r1, r9
 8009f00:	461f      	mov	r7, r3
 8009f02:	1136      	asrs	r6, r6, #4
 8009f04:	2e01      	cmp	r6, #1
 8009f06:	dc21      	bgt.n	8009f4c <_strtod_l+0x514>
 8009f08:	b10b      	cbz	r3, 8009f0e <_strtod_l+0x4d6>
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	4689      	mov	r9, r1
 8009f0e:	4b2f      	ldr	r3, [pc, #188]	; (8009fcc <_strtod_l+0x594>)
 8009f10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009f14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f18:	4642      	mov	r2, r8
 8009f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f1e:	464b      	mov	r3, r9
 8009f20:	f7f6 fc04 	bl	800072c <__aeabi_dmul>
 8009f24:	4b26      	ldr	r3, [pc, #152]	; (8009fc0 <_strtod_l+0x588>)
 8009f26:	460a      	mov	r2, r1
 8009f28:	400b      	ands	r3, r1
 8009f2a:	4929      	ldr	r1, [pc, #164]	; (8009fd0 <_strtod_l+0x598>)
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	428b      	cmp	r3, r1
 8009f30:	d8b9      	bhi.n	8009ea6 <_strtod_l+0x46e>
 8009f32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f36:	428b      	cmp	r3, r1
 8009f38:	bf86      	itte	hi
 8009f3a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009f3e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009fd4 <_strtod_l+0x59c>
 8009f42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009f46:	2300      	movs	r3, #0
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	e07f      	b.n	800a04c <_strtod_l+0x614>
 8009f4c:	07f2      	lsls	r2, r6, #31
 8009f4e:	d505      	bpl.n	8009f5c <_strtod_l+0x524>
 8009f50:	9b05      	ldr	r3, [sp, #20]
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fbe9 	bl	800072c <__aeabi_dmul>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	9a05      	ldr	r2, [sp, #20]
 8009f5e:	3701      	adds	r7, #1
 8009f60:	3208      	adds	r2, #8
 8009f62:	1076      	asrs	r6, r6, #1
 8009f64:	9205      	str	r2, [sp, #20]
 8009f66:	e7cd      	b.n	8009f04 <_strtod_l+0x4cc>
 8009f68:	d0ed      	beq.n	8009f46 <_strtod_l+0x50e>
 8009f6a:	4276      	negs	r6, r6
 8009f6c:	f016 020f 	ands.w	r2, r6, #15
 8009f70:	d00a      	beq.n	8009f88 <_strtod_l+0x550>
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <_strtod_l+0x590>)
 8009f74:	4640      	mov	r0, r8
 8009f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 fcfe 	bl	8000980 <__aeabi_ddiv>
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	1136      	asrs	r6, r6, #4
 8009f8a:	d0dc      	beq.n	8009f46 <_strtod_l+0x50e>
 8009f8c:	2e1f      	cmp	r6, #31
 8009f8e:	dd23      	ble.n	8009fd8 <_strtod_l+0x5a0>
 8009f90:	f04f 0b00 	mov.w	fp, #0
 8009f94:	f8cd b010 	str.w	fp, [sp, #16]
 8009f98:	f8cd b020 	str.w	fp, [sp, #32]
 8009f9c:	f8cd b018 	str.w	fp, [sp, #24]
 8009fa0:	2322      	movs	r3, #34	; 0x22
 8009fa2:	f04f 0800 	mov.w	r8, #0
 8009fa6:	f04f 0900 	mov.w	r9, #0
 8009faa:	f8ca 3000 	str.w	r3, [sl]
 8009fae:	e789      	b.n	8009ec4 <_strtod_l+0x48c>
 8009fb0:	0800d785 	.word	0x0800d785
 8009fb4:	0800d7c8 	.word	0x0800d7c8
 8009fb8:	0800d77d 	.word	0x0800d77d
 8009fbc:	0800d9bc 	.word	0x0800d9bc
 8009fc0:	7ff00000 	.word	0x7ff00000
 8009fc4:	0800d8b7 	.word	0x0800d8b7
 8009fc8:	0800db98 	.word	0x0800db98
 8009fcc:	0800db70 	.word	0x0800db70
 8009fd0:	7ca00000 	.word	0x7ca00000
 8009fd4:	7fefffff 	.word	0x7fefffff
 8009fd8:	f016 0310 	ands.w	r3, r6, #16
 8009fdc:	bf18      	it	ne
 8009fde:	236a      	movne	r3, #106	; 0x6a
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4fb0      	ldr	r7, [pc, #704]	; (800a2ac <_strtod_l+0x874>)
 8009fea:	07f2      	lsls	r2, r6, #31
 8009fec:	d504      	bpl.n	8009ff8 <_strtod_l+0x5c0>
 8009fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff2:	f7f6 fb9b 	bl	800072c <__aeabi_dmul>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	1076      	asrs	r6, r6, #1
 8009ffa:	f107 0708 	add.w	r7, r7, #8
 8009ffe:	d1f4      	bne.n	8009fea <_strtod_l+0x5b2>
 800a000:	b10b      	cbz	r3, 800a006 <_strtod_l+0x5ce>
 800a002:	4680      	mov	r8, r0
 800a004:	4689      	mov	r9, r1
 800a006:	9b05      	ldr	r3, [sp, #20]
 800a008:	b1c3      	cbz	r3, 800a03c <_strtod_l+0x604>
 800a00a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a00e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a012:	2b00      	cmp	r3, #0
 800a014:	4649      	mov	r1, r9
 800a016:	dd11      	ble.n	800a03c <_strtod_l+0x604>
 800a018:	2b1f      	cmp	r3, #31
 800a01a:	f340 8127 	ble.w	800a26c <_strtod_l+0x834>
 800a01e:	2b34      	cmp	r3, #52	; 0x34
 800a020:	bfd8      	it	le
 800a022:	f04f 33ff 	movle.w	r3, #4294967295
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	bfcf      	iteee	gt
 800a02c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a030:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a034:	fa03 f202 	lslle.w	r2, r3, r2
 800a038:	ea02 0901 	andle.w	r9, r2, r1
 800a03c:	2200      	movs	r2, #0
 800a03e:	2300      	movs	r3, #0
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 fdda 	bl	8000bfc <__aeabi_dcmpeq>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d1a1      	bne.n	8009f90 <_strtod_l+0x558>
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	465a      	mov	r2, fp
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	4650      	mov	r0, sl
 800a054:	4623      	mov	r3, r4
 800a056:	9908      	ldr	r1, [sp, #32]
 800a058:	f002 f980 	bl	800c35c <__s2b>
 800a05c:	9008      	str	r0, [sp, #32]
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f af21 	beq.w	8009ea6 <_strtod_l+0x46e>
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	f04f 0b00 	mov.w	fp, #0
 800a06a:	1b5d      	subs	r5, r3, r5
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	f8cd b010 	str.w	fp, [sp, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	bfb4      	ite	lt
 800a076:	462b      	movlt	r3, r5
 800a078:	2300      	movge	r3, #0
 800a07a:	930e      	str	r3, [sp, #56]	; 0x38
 800a07c:	9b07      	ldr	r3, [sp, #28]
 800a07e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a082:	9314      	str	r3, [sp, #80]	; 0x50
 800a084:	9b08      	ldr	r3, [sp, #32]
 800a086:	4650      	mov	r0, sl
 800a088:	6859      	ldr	r1, [r3, #4]
 800a08a:	f002 f8bf 	bl	800c20c <_Balloc>
 800a08e:	9006      	str	r0, [sp, #24]
 800a090:	2800      	cmp	r0, #0
 800a092:	f43f af10 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a096:	9b08      	ldr	r3, [sp, #32]
 800a098:	300c      	adds	r0, #12
 800a09a:	691a      	ldr	r2, [r3, #16]
 800a09c:	f103 010c 	add.w	r1, r3, #12
 800a0a0:	3202      	adds	r2, #2
 800a0a2:	0092      	lsls	r2, r2, #2
 800a0a4:	f7fe fd5a 	bl	8008b5c <memcpy>
 800a0a8:	ab1c      	add	r3, sp, #112	; 0x70
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	ab1b      	add	r3, sp, #108	; 0x6c
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a0ba:	f002 fc91 	bl	800c9e0 <__d2b>
 800a0be:	901a      	str	r0, [sp, #104]	; 0x68
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f43f aef8 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	f002 f9df 	bl	800c48c <__i2b>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	9004      	str	r0, [sp, #16]
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	f43f aeef 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a0d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a0da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a0dc:	2d00      	cmp	r5, #0
 800a0de:	bfab      	itete	ge
 800a0e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a0e2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a0e4:	18ee      	addge	r6, r5, r3
 800a0e6:	1b5c      	sublt	r4, r3, r5
 800a0e8:	9b05      	ldr	r3, [sp, #20]
 800a0ea:	bfa8      	it	ge
 800a0ec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a0ee:	eba5 0503 	sub.w	r5, r5, r3
 800a0f2:	4415      	add	r5, r2
 800a0f4:	4b6e      	ldr	r3, [pc, #440]	; (800a2b0 <_strtod_l+0x878>)
 800a0f6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a0fa:	bfb8      	it	lt
 800a0fc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a0fe:	429d      	cmp	r5, r3
 800a100:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a104:	f280 80c4 	bge.w	800a290 <_strtod_l+0x858>
 800a108:	1b5b      	subs	r3, r3, r5
 800a10a:	2b1f      	cmp	r3, #31
 800a10c:	f04f 0701 	mov.w	r7, #1
 800a110:	eba2 0203 	sub.w	r2, r2, r3
 800a114:	f300 80b1 	bgt.w	800a27a <_strtod_l+0x842>
 800a118:	2500      	movs	r5, #0
 800a11a:	fa07 f303 	lsl.w	r3, r7, r3
 800a11e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a120:	18b7      	adds	r7, r6, r2
 800a122:	9b05      	ldr	r3, [sp, #20]
 800a124:	42be      	cmp	r6, r7
 800a126:	4414      	add	r4, r2
 800a128:	441c      	add	r4, r3
 800a12a:	4633      	mov	r3, r6
 800a12c:	bfa8      	it	ge
 800a12e:	463b      	movge	r3, r7
 800a130:	42a3      	cmp	r3, r4
 800a132:	bfa8      	it	ge
 800a134:	4623      	movge	r3, r4
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfc2      	ittt	gt
 800a13a:	1aff      	subgt	r7, r7, r3
 800a13c:	1ae4      	subgt	r4, r4, r3
 800a13e:	1af6      	subgt	r6, r6, r3
 800a140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	dd17      	ble.n	800a176 <_strtod_l+0x73e>
 800a146:	461a      	mov	r2, r3
 800a148:	4650      	mov	r0, sl
 800a14a:	9904      	ldr	r1, [sp, #16]
 800a14c:	f002 fa5c 	bl	800c608 <__pow5mult>
 800a150:	9004      	str	r0, [sp, #16]
 800a152:	2800      	cmp	r0, #0
 800a154:	f43f aeaf 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a158:	4601      	mov	r1, r0
 800a15a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a15c:	4650      	mov	r0, sl
 800a15e:	f002 f9ab 	bl	800c4b8 <__multiply>
 800a162:	9009      	str	r0, [sp, #36]	; 0x24
 800a164:	2800      	cmp	r0, #0
 800a166:	f43f aea6 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a16a:	4650      	mov	r0, sl
 800a16c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a16e:	f002 f88d 	bl	800c28c <_Bfree>
 800a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a174:	931a      	str	r3, [sp, #104]	; 0x68
 800a176:	2f00      	cmp	r7, #0
 800a178:	f300 808e 	bgt.w	800a298 <_strtod_l+0x860>
 800a17c:	9b07      	ldr	r3, [sp, #28]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dd08      	ble.n	800a194 <_strtod_l+0x75c>
 800a182:	4650      	mov	r0, sl
 800a184:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a186:	9906      	ldr	r1, [sp, #24]
 800a188:	f002 fa3e 	bl	800c608 <__pow5mult>
 800a18c:	9006      	str	r0, [sp, #24]
 800a18e:	2800      	cmp	r0, #0
 800a190:	f43f ae91 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a194:	2c00      	cmp	r4, #0
 800a196:	dd08      	ble.n	800a1aa <_strtod_l+0x772>
 800a198:	4622      	mov	r2, r4
 800a19a:	4650      	mov	r0, sl
 800a19c:	9906      	ldr	r1, [sp, #24]
 800a19e:	f002 fa8d 	bl	800c6bc <__lshift>
 800a1a2:	9006      	str	r0, [sp, #24]
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f43f ae86 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a1aa:	2e00      	cmp	r6, #0
 800a1ac:	dd08      	ble.n	800a1c0 <_strtod_l+0x788>
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	9904      	ldr	r1, [sp, #16]
 800a1b4:	f002 fa82 	bl	800c6bc <__lshift>
 800a1b8:	9004      	str	r0, [sp, #16]
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f ae7b 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	9a06      	ldr	r2, [sp, #24]
 800a1c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1c6:	f002 fb05 	bl	800c7d4 <__mdiff>
 800a1ca:	4683      	mov	fp, r0
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	f43f ae72 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	68c3      	ldr	r3, [r0, #12]
 800a1d6:	9904      	ldr	r1, [sp, #16]
 800a1d8:	60c4      	str	r4, [r0, #12]
 800a1da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1dc:	f002 fade 	bl	800c79c <__mcmp>
 800a1e0:	42a0      	cmp	r0, r4
 800a1e2:	da6b      	bge.n	800a2bc <_strtod_l+0x884>
 800a1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e6:	ea53 0308 	orrs.w	r3, r3, r8
 800a1ea:	f040 8091 	bne.w	800a310 <_strtod_l+0x8d8>
 800a1ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f040 808c 	bne.w	800a310 <_strtod_l+0x8d8>
 800a1f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1fc:	0d1b      	lsrs	r3, r3, #20
 800a1fe:	051b      	lsls	r3, r3, #20
 800a200:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a204:	f240 8084 	bls.w	800a310 <_strtod_l+0x8d8>
 800a208:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a20c:	b91b      	cbnz	r3, 800a216 <_strtod_l+0x7de>
 800a20e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a212:	2b01      	cmp	r3, #1
 800a214:	dd7c      	ble.n	800a310 <_strtod_l+0x8d8>
 800a216:	4659      	mov	r1, fp
 800a218:	2201      	movs	r2, #1
 800a21a:	4650      	mov	r0, sl
 800a21c:	f002 fa4e 	bl	800c6bc <__lshift>
 800a220:	9904      	ldr	r1, [sp, #16]
 800a222:	4683      	mov	fp, r0
 800a224:	f002 faba 	bl	800c79c <__mcmp>
 800a228:	2800      	cmp	r0, #0
 800a22a:	dd71      	ble.n	800a310 <_strtod_l+0x8d8>
 800a22c:	9905      	ldr	r1, [sp, #20]
 800a22e:	464b      	mov	r3, r9
 800a230:	4a20      	ldr	r2, [pc, #128]	; (800a2b4 <_strtod_l+0x87c>)
 800a232:	2900      	cmp	r1, #0
 800a234:	f000 808c 	beq.w	800a350 <_strtod_l+0x918>
 800a238:	ea02 0109 	and.w	r1, r2, r9
 800a23c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a240:	f300 8086 	bgt.w	800a350 <_strtod_l+0x918>
 800a244:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a248:	f77f aeaa 	ble.w	8009fa0 <_strtod_l+0x568>
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <_strtod_l+0x880>)
 800a252:	2200      	movs	r2, #0
 800a254:	f7f6 fa6a 	bl	800072c <__aeabi_dmul>
 800a258:	460b      	mov	r3, r1
 800a25a:	4303      	orrs	r3, r0
 800a25c:	bf08      	it	eq
 800a25e:	2322      	moveq	r3, #34	; 0x22
 800a260:	4680      	mov	r8, r0
 800a262:	4689      	mov	r9, r1
 800a264:	bf08      	it	eq
 800a266:	f8ca 3000 	streq.w	r3, [sl]
 800a26a:	e62f      	b.n	8009ecc <_strtod_l+0x494>
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	ea03 0808 	and.w	r8, r3, r8
 800a278:	e6e0      	b.n	800a03c <_strtod_l+0x604>
 800a27a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a27e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a282:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a286:	35e2      	adds	r5, #226	; 0xe2
 800a288:	fa07 f505 	lsl.w	r5, r7, r5
 800a28c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a28e:	e747      	b.n	800a120 <_strtod_l+0x6e8>
 800a290:	2301      	movs	r3, #1
 800a292:	2500      	movs	r5, #0
 800a294:	930f      	str	r3, [sp, #60]	; 0x3c
 800a296:	e743      	b.n	800a120 <_strtod_l+0x6e8>
 800a298:	463a      	mov	r2, r7
 800a29a:	4650      	mov	r0, sl
 800a29c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a29e:	f002 fa0d 	bl	800c6bc <__lshift>
 800a2a2:	901a      	str	r0, [sp, #104]	; 0x68
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	f47f af69 	bne.w	800a17c <_strtod_l+0x744>
 800a2aa:	e604      	b.n	8009eb6 <_strtod_l+0x47e>
 800a2ac:	0800d7e0 	.word	0x0800d7e0
 800a2b0:	fffffc02 	.word	0xfffffc02
 800a2b4:	7ff00000 	.word	0x7ff00000
 800a2b8:	39500000 	.word	0x39500000
 800a2bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a2c0:	d165      	bne.n	800a38e <_strtod_l+0x956>
 800a2c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2c8:	b35a      	cbz	r2, 800a322 <_strtod_l+0x8ea>
 800a2ca:	4a99      	ldr	r2, [pc, #612]	; (800a530 <_strtod_l+0xaf8>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d12b      	bne.n	800a328 <_strtod_l+0x8f0>
 800a2d0:	9b05      	ldr	r3, [sp, #20]
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	b303      	cbz	r3, 800a318 <_strtod_l+0x8e0>
 800a2d6:	464a      	mov	r2, r9
 800a2d8:	4b96      	ldr	r3, [pc, #600]	; (800a534 <_strtod_l+0xafc>)
 800a2da:	4013      	ands	r3, r2
 800a2dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e4:	d81b      	bhi.n	800a31e <_strtod_l+0x8e6>
 800a2e6:	0d1b      	lsrs	r3, r3, #20
 800a2e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	d119      	bne.n	800a328 <_strtod_l+0x8f0>
 800a2f4:	4b90      	ldr	r3, [pc, #576]	; (800a538 <_strtod_l+0xb00>)
 800a2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d102      	bne.n	800a302 <_strtod_l+0x8ca>
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	f43f adda 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	4b8b      	ldr	r3, [pc, #556]	; (800a534 <_strtod_l+0xafc>)
 800a308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a30a:	401a      	ands	r2, r3
 800a30c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a310:	9b05      	ldr	r3, [sp, #20]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d19a      	bne.n	800a24c <_strtod_l+0x814>
 800a316:	e5d9      	b.n	8009ecc <_strtod_l+0x494>
 800a318:	f04f 33ff 	mov.w	r3, #4294967295
 800a31c:	e7e8      	b.n	800a2f0 <_strtod_l+0x8b8>
 800a31e:	4613      	mov	r3, r2
 800a320:	e7e6      	b.n	800a2f0 <_strtod_l+0x8b8>
 800a322:	ea53 0308 	orrs.w	r3, r3, r8
 800a326:	d081      	beq.n	800a22c <_strtod_l+0x7f4>
 800a328:	b1e5      	cbz	r5, 800a364 <_strtod_l+0x92c>
 800a32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32c:	421d      	tst	r5, r3
 800a32e:	d0ef      	beq.n	800a310 <_strtod_l+0x8d8>
 800a330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	b1c3      	cbz	r3, 800a36c <_strtod_l+0x934>
 800a33a:	f7ff fb59 	bl	80099f0 <sulp>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a346:	f7f6 f83b 	bl	80003c0 <__adddf3>
 800a34a:	4680      	mov	r8, r0
 800a34c:	4689      	mov	r9, r1
 800a34e:	e7df      	b.n	800a310 <_strtod_l+0x8d8>
 800a350:	4013      	ands	r3, r2
 800a352:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a356:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a35a:	f04f 38ff 	mov.w	r8, #4294967295
 800a35e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a362:	e7d5      	b.n	800a310 <_strtod_l+0x8d8>
 800a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a366:	ea13 0f08 	tst.w	r3, r8
 800a36a:	e7e0      	b.n	800a32e <_strtod_l+0x8f6>
 800a36c:	f7ff fb40 	bl	80099f0 <sulp>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a378:	f7f6 f820 	bl	80003bc <__aeabi_dsub>
 800a37c:	2200      	movs	r2, #0
 800a37e:	2300      	movs	r3, #0
 800a380:	4680      	mov	r8, r0
 800a382:	4689      	mov	r9, r1
 800a384:	f7f6 fc3a 	bl	8000bfc <__aeabi_dcmpeq>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d0c1      	beq.n	800a310 <_strtod_l+0x8d8>
 800a38c:	e608      	b.n	8009fa0 <_strtod_l+0x568>
 800a38e:	4658      	mov	r0, fp
 800a390:	9904      	ldr	r1, [sp, #16]
 800a392:	f002 fb81 	bl	800ca98 <__ratio>
 800a396:	2200      	movs	r2, #0
 800a398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a39c:	4606      	mov	r6, r0
 800a39e:	460f      	mov	r7, r1
 800a3a0:	f7f6 fc40 	bl	8000c24 <__aeabi_dcmple>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d070      	beq.n	800a48a <_strtod_l+0xa52>
 800a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d042      	beq.n	800a434 <_strtod_l+0x9fc>
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	4f62      	ldr	r7, [pc, #392]	; (800a53c <_strtod_l+0xb04>)
 800a3b2:	4d62      	ldr	r5, [pc, #392]	; (800a53c <_strtod_l+0xb04>)
 800a3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3ba:	0d1b      	lsrs	r3, r3, #20
 800a3bc:	051b      	lsls	r3, r3, #20
 800a3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3c2:	4b5f      	ldr	r3, [pc, #380]	; (800a540 <_strtod_l+0xb08>)
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	f040 80c3 	bne.w	800a550 <_strtod_l+0xb18>
 800a3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a3d2:	4649      	mov	r1, r9
 800a3d4:	f002 fa8a 	bl	800c8ec <__ulp>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 f9a4 	bl	800072c <__aeabi_dmul>
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	f7f5 ffea 	bl	80003c0 <__adddf3>
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4951      	ldr	r1, [pc, #324]	; (800a534 <_strtod_l+0xafc>)
 800a3f0:	4a54      	ldr	r2, [pc, #336]	; (800a544 <_strtod_l+0xb0c>)
 800a3f2:	4019      	ands	r1, r3
 800a3f4:	4291      	cmp	r1, r2
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	d95d      	bls.n	800a4b6 <_strtod_l+0xa7e>
 800a3fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3fc:	4b4e      	ldr	r3, [pc, #312]	; (800a538 <_strtod_l+0xb00>)
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d103      	bne.n	800a40a <_strtod_l+0x9d2>
 800a402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a404:	3301      	adds	r3, #1
 800a406:	f43f ad56 	beq.w	8009eb6 <_strtod_l+0x47e>
 800a40a:	f04f 38ff 	mov.w	r8, #4294967295
 800a40e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a538 <_strtod_l+0xb00>
 800a412:	4650      	mov	r0, sl
 800a414:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a416:	f001 ff39 	bl	800c28c <_Bfree>
 800a41a:	4650      	mov	r0, sl
 800a41c:	9906      	ldr	r1, [sp, #24]
 800a41e:	f001 ff35 	bl	800c28c <_Bfree>
 800a422:	4650      	mov	r0, sl
 800a424:	9904      	ldr	r1, [sp, #16]
 800a426:	f001 ff31 	bl	800c28c <_Bfree>
 800a42a:	4659      	mov	r1, fp
 800a42c:	4650      	mov	r0, sl
 800a42e:	f001 ff2d 	bl	800c28c <_Bfree>
 800a432:	e627      	b.n	800a084 <_strtod_l+0x64c>
 800a434:	f1b8 0f00 	cmp.w	r8, #0
 800a438:	d119      	bne.n	800a46e <_strtod_l+0xa36>
 800a43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a440:	b9e3      	cbnz	r3, 800a47c <_strtod_l+0xa44>
 800a442:	2200      	movs	r2, #0
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	4b3c      	ldr	r3, [pc, #240]	; (800a53c <_strtod_l+0xb04>)
 800a44a:	f7f6 fbe1 	bl	8000c10 <__aeabi_dcmplt>
 800a44e:	b9c8      	cbnz	r0, 800a484 <_strtod_l+0xa4c>
 800a450:	2200      	movs	r2, #0
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	4b3c      	ldr	r3, [pc, #240]	; (800a548 <_strtod_l+0xb10>)
 800a458:	f7f6 f968 	bl	800072c <__aeabi_dmul>
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a464:	9416      	str	r4, [sp, #88]	; 0x58
 800a466:	9317      	str	r3, [sp, #92]	; 0x5c
 800a468:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a46c:	e7a2      	b.n	800a3b4 <_strtod_l+0x97c>
 800a46e:	f1b8 0f01 	cmp.w	r8, #1
 800a472:	d103      	bne.n	800a47c <_strtod_l+0xa44>
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	f43f ad92 	beq.w	8009fa0 <_strtod_l+0x568>
 800a47c:	2600      	movs	r6, #0
 800a47e:	2400      	movs	r4, #0
 800a480:	4f32      	ldr	r7, [pc, #200]	; (800a54c <_strtod_l+0xb14>)
 800a482:	e796      	b.n	800a3b2 <_strtod_l+0x97a>
 800a484:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a486:	4d30      	ldr	r5, [pc, #192]	; (800a548 <_strtod_l+0xb10>)
 800a488:	e7ea      	b.n	800a460 <_strtod_l+0xa28>
 800a48a:	4b2f      	ldr	r3, [pc, #188]	; (800a548 <_strtod_l+0xb10>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	4630      	mov	r0, r6
 800a490:	4639      	mov	r1, r7
 800a492:	f7f6 f94b 	bl	800072c <__aeabi_dmul>
 800a496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a498:	4604      	mov	r4, r0
 800a49a:	460d      	mov	r5, r1
 800a49c:	b933      	cbnz	r3, 800a4ac <_strtod_l+0xa74>
 800a49e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4a2:	9010      	str	r0, [sp, #64]	; 0x40
 800a4a4:	9311      	str	r3, [sp, #68]	; 0x44
 800a4a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a4aa:	e783      	b.n	800a3b4 <_strtod_l+0x97c>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4b4:	e7f7      	b.n	800a4a6 <_strtod_l+0xa6e>
 800a4b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a4ba:	9b05      	ldr	r3, [sp, #20]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1a8      	bne.n	800a412 <_strtod_l+0x9da>
 800a4c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4c6:	0d1b      	lsrs	r3, r3, #20
 800a4c8:	051b      	lsls	r3, r3, #20
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d1a1      	bne.n	800a412 <_strtod_l+0x9da>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f6 fe1d 	bl	8001110 <__aeabi_d2lz>
 800a4d6:	f7f6 f8fb 	bl	80006d0 <__aeabi_l2d>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f7f5 ff6b 	bl	80003bc <__aeabi_dsub>
 800a4e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ec:	ea43 0308 	orr.w	r3, r3, r8
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	d066      	beq.n	800a5c6 <_strtod_l+0xb8e>
 800a4f8:	a309      	add	r3, pc, #36	; (adr r3, 800a520 <_strtod_l+0xae8>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 fb87 	bl	8000c10 <__aeabi_dcmplt>
 800a502:	2800      	cmp	r0, #0
 800a504:	f47f ace2 	bne.w	8009ecc <_strtod_l+0x494>
 800a508:	a307      	add	r3, pc, #28	; (adr r3, 800a528 <_strtod_l+0xaf0>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f6 fb9b 	bl	8000c4c <__aeabi_dcmpgt>
 800a516:	2800      	cmp	r0, #0
 800a518:	f43f af7b 	beq.w	800a412 <_strtod_l+0x9da>
 800a51c:	e4d6      	b.n	8009ecc <_strtod_l+0x494>
 800a51e:	bf00      	nop
 800a520:	94a03595 	.word	0x94a03595
 800a524:	3fdfffff 	.word	0x3fdfffff
 800a528:	35afe535 	.word	0x35afe535
 800a52c:	3fe00000 	.word	0x3fe00000
 800a530:	000fffff 	.word	0x000fffff
 800a534:	7ff00000 	.word	0x7ff00000
 800a538:	7fefffff 	.word	0x7fefffff
 800a53c:	3ff00000 	.word	0x3ff00000
 800a540:	7fe00000 	.word	0x7fe00000
 800a544:	7c9fffff 	.word	0x7c9fffff
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	bff00000 	.word	0xbff00000
 800a550:	9b05      	ldr	r3, [sp, #20]
 800a552:	b313      	cbz	r3, 800a59a <_strtod_l+0xb62>
 800a554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a55a:	d81e      	bhi.n	800a59a <_strtod_l+0xb62>
 800a55c:	a326      	add	r3, pc, #152	; (adr r3, 800a5f8 <_strtod_l+0xbc0>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	4620      	mov	r0, r4
 800a564:	4629      	mov	r1, r5
 800a566:	f7f6 fb5d 	bl	8000c24 <__aeabi_dcmple>
 800a56a:	b190      	cbz	r0, 800a592 <_strtod_l+0xb5a>
 800a56c:	4629      	mov	r1, r5
 800a56e:	4620      	mov	r0, r4
 800a570:	f7f6 fbb4 	bl	8000cdc <__aeabi_d2uiz>
 800a574:	2801      	cmp	r0, #1
 800a576:	bf38      	it	cc
 800a578:	2001      	movcc	r0, #1
 800a57a:	f7f6 f85d 	bl	8000638 <__aeabi_ui2d>
 800a57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a580:	4604      	mov	r4, r0
 800a582:	460d      	mov	r5, r1
 800a584:	b9d3      	cbnz	r3, 800a5bc <_strtod_l+0xb84>
 800a586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a58a:	9012      	str	r0, [sp, #72]	; 0x48
 800a58c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a58e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a594:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a598:	1a9f      	subs	r7, r3, r2
 800a59a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a59e:	f002 f9a5 	bl	800c8ec <__ulp>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	f7f6 f8bf 	bl	800072c <__aeabi_dmul>
 800a5ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5b2:	f7f5 ff05 	bl	80003c0 <__adddf3>
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	4689      	mov	r9, r1
 800a5ba:	e77e      	b.n	800a4ba <_strtod_l+0xa82>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a5c4:	e7e3      	b.n	800a58e <_strtod_l+0xb56>
 800a5c6:	a30e      	add	r3, pc, #56	; (adr r3, 800a600 <_strtod_l+0xbc8>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f6 fb20 	bl	8000c10 <__aeabi_dcmplt>
 800a5d0:	e7a1      	b.n	800a516 <_strtod_l+0xade>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a5d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	f7ff ba71 	b.w	8009ac2 <_strtod_l+0x8a>
 800a5e0:	2a65      	cmp	r2, #101	; 0x65
 800a5e2:	f43f ab63 	beq.w	8009cac <_strtod_l+0x274>
 800a5e6:	2a45      	cmp	r2, #69	; 0x45
 800a5e8:	f43f ab60 	beq.w	8009cac <_strtod_l+0x274>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f7ff bb95 	b.w	8009d1c <_strtod_l+0x2e4>
 800a5f2:	bf00      	nop
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	ffc00000 	.word	0xffc00000
 800a5fc:	41dfffff 	.word	0x41dfffff
 800a600:	94a03595 	.word	0x94a03595
 800a604:	3fcfffff 	.word	0x3fcfffff

0800a608 <_strtod_r>:
 800a608:	4b01      	ldr	r3, [pc, #4]	; (800a610 <_strtod_r+0x8>)
 800a60a:	f7ff ba15 	b.w	8009a38 <_strtod_l>
 800a60e:	bf00      	nop
 800a610:	20000678 	.word	0x20000678

0800a614 <strtok>:
 800a614:	4b16      	ldr	r3, [pc, #88]	; (800a670 <strtok+0x5c>)
 800a616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61a:	681f      	ldr	r7, [r3, #0]
 800a61c:	4605      	mov	r5, r0
 800a61e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a620:	460e      	mov	r6, r1
 800a622:	b9ec      	cbnz	r4, 800a660 <strtok+0x4c>
 800a624:	2050      	movs	r0, #80	; 0x50
 800a626:	f001 fdc9 	bl	800c1bc <malloc>
 800a62a:	4602      	mov	r2, r0
 800a62c:	65b8      	str	r0, [r7, #88]	; 0x58
 800a62e:	b920      	cbnz	r0, 800a63a <strtok+0x26>
 800a630:	2157      	movs	r1, #87	; 0x57
 800a632:	4b10      	ldr	r3, [pc, #64]	; (800a674 <strtok+0x60>)
 800a634:	4810      	ldr	r0, [pc, #64]	; (800a678 <strtok+0x64>)
 800a636:	f000 f991 	bl	800a95c <__assert_func>
 800a63a:	e9c0 4400 	strd	r4, r4, [r0]
 800a63e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a642:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a646:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a64a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a64e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a652:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a656:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a65a:	6184      	str	r4, [r0, #24]
 800a65c:	7704      	strb	r4, [r0, #28]
 800a65e:	6244      	str	r4, [r0, #36]	; 0x24
 800a660:	4631      	mov	r1, r6
 800a662:	4628      	mov	r0, r5
 800a664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a666:	2301      	movs	r3, #1
 800a668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a66c:	f000 b806 	b.w	800a67c <__strtok_r>
 800a670:	20000610 	.word	0x20000610
 800a674:	0800d808 	.word	0x0800d808
 800a678:	0800d81f 	.word	0x0800d81f

0800a67c <__strtok_r>:
 800a67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67e:	b908      	cbnz	r0, 800a684 <__strtok_r+0x8>
 800a680:	6810      	ldr	r0, [r2, #0]
 800a682:	b188      	cbz	r0, 800a6a8 <__strtok_r+0x2c>
 800a684:	4604      	mov	r4, r0
 800a686:	460f      	mov	r7, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a68e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a692:	b91e      	cbnz	r6, 800a69c <__strtok_r+0x20>
 800a694:	b965      	cbnz	r5, 800a6b0 <__strtok_r+0x34>
 800a696:	4628      	mov	r0, r5
 800a698:	6015      	str	r5, [r2, #0]
 800a69a:	e005      	b.n	800a6a8 <__strtok_r+0x2c>
 800a69c:	42b5      	cmp	r5, r6
 800a69e:	d1f6      	bne.n	800a68e <__strtok_r+0x12>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1f0      	bne.n	800a686 <__strtok_r+0xa>
 800a6a4:	6014      	str	r4, [r2, #0]
 800a6a6:	7003      	strb	r3, [r0, #0]
 800a6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6aa:	461c      	mov	r4, r3
 800a6ac:	e00c      	b.n	800a6c8 <__strtok_r+0x4c>
 800a6ae:	b915      	cbnz	r5, 800a6b6 <__strtok_r+0x3a>
 800a6b0:	460e      	mov	r6, r1
 800a6b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6ba:	42ab      	cmp	r3, r5
 800a6bc:	d1f7      	bne.n	800a6ae <__strtok_r+0x32>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f3      	beq.n	800a6aa <__strtok_r+0x2e>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a6c8:	6014      	str	r4, [r2, #0]
 800a6ca:	e7ed      	b.n	800a6a8 <__strtok_r+0x2c>

0800a6cc <_strtol_l.constprop.0>:
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	d001      	beq.n	800a6da <_strtol_l.constprop.0+0xe>
 800a6d6:	2b24      	cmp	r3, #36	; 0x24
 800a6d8:	d906      	bls.n	800a6e8 <_strtol_l.constprop.0+0x1c>
 800a6da:	f7fe fa15 	bl	8008b08 <__errno>
 800a6de:	2316      	movs	r3, #22
 800a6e0:	6003      	str	r3, [r0, #0]
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e8:	460d      	mov	r5, r1
 800a6ea:	4f35      	ldr	r7, [pc, #212]	; (800a7c0 <_strtol_l.constprop.0+0xf4>)
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6f2:	5de6      	ldrb	r6, [r4, r7]
 800a6f4:	f016 0608 	ands.w	r6, r6, #8
 800a6f8:	d1f8      	bne.n	800a6ec <_strtol_l.constprop.0+0x20>
 800a6fa:	2c2d      	cmp	r4, #45	; 0x2d
 800a6fc:	d12f      	bne.n	800a75e <_strtol_l.constprop.0+0x92>
 800a6fe:	2601      	movs	r6, #1
 800a700:	782c      	ldrb	r4, [r5, #0]
 800a702:	1c85      	adds	r5, r0, #2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d057      	beq.n	800a7b8 <_strtol_l.constprop.0+0xec>
 800a708:	2b10      	cmp	r3, #16
 800a70a:	d109      	bne.n	800a720 <_strtol_l.constprop.0+0x54>
 800a70c:	2c30      	cmp	r4, #48	; 0x30
 800a70e:	d107      	bne.n	800a720 <_strtol_l.constprop.0+0x54>
 800a710:	7828      	ldrb	r0, [r5, #0]
 800a712:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a716:	2858      	cmp	r0, #88	; 0x58
 800a718:	d149      	bne.n	800a7ae <_strtol_l.constprop.0+0xe2>
 800a71a:	2310      	movs	r3, #16
 800a71c:	786c      	ldrb	r4, [r5, #1]
 800a71e:	3502      	adds	r5, #2
 800a720:	2700      	movs	r7, #0
 800a722:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a726:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a72a:	fbbe f9f3 	udiv	r9, lr, r3
 800a72e:	4638      	mov	r0, r7
 800a730:	fb03 ea19 	mls	sl, r3, r9, lr
 800a734:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a738:	f1bc 0f09 	cmp.w	ip, #9
 800a73c:	d814      	bhi.n	800a768 <_strtol_l.constprop.0+0x9c>
 800a73e:	4664      	mov	r4, ip
 800a740:	42a3      	cmp	r3, r4
 800a742:	dd22      	ble.n	800a78a <_strtol_l.constprop.0+0xbe>
 800a744:	2f00      	cmp	r7, #0
 800a746:	db1d      	blt.n	800a784 <_strtol_l.constprop.0+0xb8>
 800a748:	4581      	cmp	r9, r0
 800a74a:	d31b      	bcc.n	800a784 <_strtol_l.constprop.0+0xb8>
 800a74c:	d101      	bne.n	800a752 <_strtol_l.constprop.0+0x86>
 800a74e:	45a2      	cmp	sl, r4
 800a750:	db18      	blt.n	800a784 <_strtol_l.constprop.0+0xb8>
 800a752:	2701      	movs	r7, #1
 800a754:	fb00 4003 	mla	r0, r0, r3, r4
 800a758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a75c:	e7ea      	b.n	800a734 <_strtol_l.constprop.0+0x68>
 800a75e:	2c2b      	cmp	r4, #43	; 0x2b
 800a760:	bf04      	itt	eq
 800a762:	782c      	ldrbeq	r4, [r5, #0]
 800a764:	1c85      	addeq	r5, r0, #2
 800a766:	e7cd      	b.n	800a704 <_strtol_l.constprop.0+0x38>
 800a768:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a76c:	f1bc 0f19 	cmp.w	ip, #25
 800a770:	d801      	bhi.n	800a776 <_strtol_l.constprop.0+0xaa>
 800a772:	3c37      	subs	r4, #55	; 0x37
 800a774:	e7e4      	b.n	800a740 <_strtol_l.constprop.0+0x74>
 800a776:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a77a:	f1bc 0f19 	cmp.w	ip, #25
 800a77e:	d804      	bhi.n	800a78a <_strtol_l.constprop.0+0xbe>
 800a780:	3c57      	subs	r4, #87	; 0x57
 800a782:	e7dd      	b.n	800a740 <_strtol_l.constprop.0+0x74>
 800a784:	f04f 37ff 	mov.w	r7, #4294967295
 800a788:	e7e6      	b.n	800a758 <_strtol_l.constprop.0+0x8c>
 800a78a:	2f00      	cmp	r7, #0
 800a78c:	da07      	bge.n	800a79e <_strtol_l.constprop.0+0xd2>
 800a78e:	2322      	movs	r3, #34	; 0x22
 800a790:	4670      	mov	r0, lr
 800a792:	f8c8 3000 	str.w	r3, [r8]
 800a796:	2a00      	cmp	r2, #0
 800a798:	d0a4      	beq.n	800a6e4 <_strtol_l.constprop.0+0x18>
 800a79a:	1e69      	subs	r1, r5, #1
 800a79c:	e005      	b.n	800a7aa <_strtol_l.constprop.0+0xde>
 800a79e:	b106      	cbz	r6, 800a7a2 <_strtol_l.constprop.0+0xd6>
 800a7a0:	4240      	negs	r0, r0
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	d09e      	beq.n	800a6e4 <_strtol_l.constprop.0+0x18>
 800a7a6:	2f00      	cmp	r7, #0
 800a7a8:	d1f7      	bne.n	800a79a <_strtol_l.constprop.0+0xce>
 800a7aa:	6011      	str	r1, [r2, #0]
 800a7ac:	e79a      	b.n	800a6e4 <_strtol_l.constprop.0+0x18>
 800a7ae:	2430      	movs	r4, #48	; 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1b5      	bne.n	800a720 <_strtol_l.constprop.0+0x54>
 800a7b4:	2308      	movs	r3, #8
 800a7b6:	e7b3      	b.n	800a720 <_strtol_l.constprop.0+0x54>
 800a7b8:	2c30      	cmp	r4, #48	; 0x30
 800a7ba:	d0a9      	beq.n	800a710 <_strtol_l.constprop.0+0x44>
 800a7bc:	230a      	movs	r3, #10
 800a7be:	e7af      	b.n	800a720 <_strtol_l.constprop.0+0x54>
 800a7c0:	0800d8b9 	.word	0x0800d8b9

0800a7c4 <_strtol_r>:
 800a7c4:	f7ff bf82 	b.w	800a6cc <_strtol_l.constprop.0>

0800a7c8 <strtol>:
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	460a      	mov	r2, r1
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	4802      	ldr	r0, [pc, #8]	; (800a7d8 <strtol+0x10>)
 800a7d0:	6800      	ldr	r0, [r0, #0]
 800a7d2:	f7ff bf7b 	b.w	800a6cc <_strtol_l.constprop.0>
 800a7d6:	bf00      	nop
 800a7d8:	20000610 	.word	0x20000610

0800a7dc <__swbuf_r>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	460e      	mov	r6, r1
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	b118      	cbz	r0, 800a7ee <__swbuf_r+0x12>
 800a7e6:	6983      	ldr	r3, [r0, #24]
 800a7e8:	b90b      	cbnz	r3, 800a7ee <__swbuf_r+0x12>
 800a7ea:	f001 f865 	bl	800b8b8 <__sinit>
 800a7ee:	4b21      	ldr	r3, [pc, #132]	; (800a874 <__swbuf_r+0x98>)
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	d12b      	bne.n	800a84c <__swbuf_r+0x70>
 800a7f4:	686c      	ldr	r4, [r5, #4]
 800a7f6:	69a3      	ldr	r3, [r4, #24]
 800a7f8:	60a3      	str	r3, [r4, #8]
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	071a      	lsls	r2, r3, #28
 800a7fe:	d52f      	bpl.n	800a860 <__swbuf_r+0x84>
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	b36b      	cbz	r3, 800a860 <__swbuf_r+0x84>
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	6820      	ldr	r0, [r4, #0]
 800a808:	b2f6      	uxtb	r6, r6
 800a80a:	1ac0      	subs	r0, r0, r3
 800a80c:	6963      	ldr	r3, [r4, #20]
 800a80e:	4637      	mov	r7, r6
 800a810:	4283      	cmp	r3, r0
 800a812:	dc04      	bgt.n	800a81e <__swbuf_r+0x42>
 800a814:	4621      	mov	r1, r4
 800a816:	4628      	mov	r0, r5
 800a818:	f000 ffba 	bl	800b790 <_fflush_r>
 800a81c:	bb30      	cbnz	r0, 800a86c <__swbuf_r+0x90>
 800a81e:	68a3      	ldr	r3, [r4, #8]
 800a820:	3001      	adds	r0, #1
 800a822:	3b01      	subs	r3, #1
 800a824:	60a3      	str	r3, [r4, #8]
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	6022      	str	r2, [r4, #0]
 800a82c:	701e      	strb	r6, [r3, #0]
 800a82e:	6963      	ldr	r3, [r4, #20]
 800a830:	4283      	cmp	r3, r0
 800a832:	d004      	beq.n	800a83e <__swbuf_r+0x62>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	07db      	lsls	r3, r3, #31
 800a838:	d506      	bpl.n	800a848 <__swbuf_r+0x6c>
 800a83a:	2e0a      	cmp	r6, #10
 800a83c:	d104      	bne.n	800a848 <__swbuf_r+0x6c>
 800a83e:	4621      	mov	r1, r4
 800a840:	4628      	mov	r0, r5
 800a842:	f000 ffa5 	bl	800b790 <_fflush_r>
 800a846:	b988      	cbnz	r0, 800a86c <__swbuf_r+0x90>
 800a848:	4638      	mov	r0, r7
 800a84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a84c:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <__swbuf_r+0x9c>)
 800a84e:	429c      	cmp	r4, r3
 800a850:	d101      	bne.n	800a856 <__swbuf_r+0x7a>
 800a852:	68ac      	ldr	r4, [r5, #8]
 800a854:	e7cf      	b.n	800a7f6 <__swbuf_r+0x1a>
 800a856:	4b09      	ldr	r3, [pc, #36]	; (800a87c <__swbuf_r+0xa0>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	bf08      	it	eq
 800a85c:	68ec      	ldreq	r4, [r5, #12]
 800a85e:	e7ca      	b.n	800a7f6 <__swbuf_r+0x1a>
 800a860:	4621      	mov	r1, r4
 800a862:	4628      	mov	r0, r5
 800a864:	f000 f80c 	bl	800a880 <__swsetup_r>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d0cb      	beq.n	800a804 <__swbuf_r+0x28>
 800a86c:	f04f 37ff 	mov.w	r7, #4294967295
 800a870:	e7ea      	b.n	800a848 <__swbuf_r+0x6c>
 800a872:	bf00      	nop
 800a874:	0800da54 	.word	0x0800da54
 800a878:	0800da74 	.word	0x0800da74
 800a87c:	0800da34 	.word	0x0800da34

0800a880 <__swsetup_r>:
 800a880:	4b32      	ldr	r3, [pc, #200]	; (800a94c <__swsetup_r+0xcc>)
 800a882:	b570      	push	{r4, r5, r6, lr}
 800a884:	681d      	ldr	r5, [r3, #0]
 800a886:	4606      	mov	r6, r0
 800a888:	460c      	mov	r4, r1
 800a88a:	b125      	cbz	r5, 800a896 <__swsetup_r+0x16>
 800a88c:	69ab      	ldr	r3, [r5, #24]
 800a88e:	b913      	cbnz	r3, 800a896 <__swsetup_r+0x16>
 800a890:	4628      	mov	r0, r5
 800a892:	f001 f811 	bl	800b8b8 <__sinit>
 800a896:	4b2e      	ldr	r3, [pc, #184]	; (800a950 <__swsetup_r+0xd0>)
 800a898:	429c      	cmp	r4, r3
 800a89a:	d10f      	bne.n	800a8bc <__swsetup_r+0x3c>
 800a89c:	686c      	ldr	r4, [r5, #4]
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8a4:	0719      	lsls	r1, r3, #28
 800a8a6:	d42c      	bmi.n	800a902 <__swsetup_r+0x82>
 800a8a8:	06dd      	lsls	r5, r3, #27
 800a8aa:	d411      	bmi.n	800a8d0 <__swsetup_r+0x50>
 800a8ac:	2309      	movs	r3, #9
 800a8ae:	6033      	str	r3, [r6, #0]
 800a8b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	e03e      	b.n	800a93a <__swsetup_r+0xba>
 800a8bc:	4b25      	ldr	r3, [pc, #148]	; (800a954 <__swsetup_r+0xd4>)
 800a8be:	429c      	cmp	r4, r3
 800a8c0:	d101      	bne.n	800a8c6 <__swsetup_r+0x46>
 800a8c2:	68ac      	ldr	r4, [r5, #8]
 800a8c4:	e7eb      	b.n	800a89e <__swsetup_r+0x1e>
 800a8c6:	4b24      	ldr	r3, [pc, #144]	; (800a958 <__swsetup_r+0xd8>)
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	bf08      	it	eq
 800a8cc:	68ec      	ldreq	r4, [r5, #12]
 800a8ce:	e7e6      	b.n	800a89e <__swsetup_r+0x1e>
 800a8d0:	0758      	lsls	r0, r3, #29
 800a8d2:	d512      	bpl.n	800a8fa <__swsetup_r+0x7a>
 800a8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8d6:	b141      	cbz	r1, 800a8ea <__swsetup_r+0x6a>
 800a8d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8dc:	4299      	cmp	r1, r3
 800a8de:	d002      	beq.n	800a8e6 <__swsetup_r+0x66>
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f002 f95f 	bl	800cba4 <_free_r>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6063      	str	r3, [r4, #4]
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	f043 0308 	orr.w	r3, r3, #8
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	6923      	ldr	r3, [r4, #16]
 800a904:	b94b      	cbnz	r3, 800a91a <__swsetup_r+0x9a>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a910:	d003      	beq.n	800a91a <__swsetup_r+0x9a>
 800a912:	4621      	mov	r1, r4
 800a914:	4630      	mov	r0, r6
 800a916:	f001 fc11 	bl	800c13c <__smakebuf_r>
 800a91a:	89a0      	ldrh	r0, [r4, #12]
 800a91c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a920:	f010 0301 	ands.w	r3, r0, #1
 800a924:	d00a      	beq.n	800a93c <__swsetup_r+0xbc>
 800a926:	2300      	movs	r3, #0
 800a928:	60a3      	str	r3, [r4, #8]
 800a92a:	6963      	ldr	r3, [r4, #20]
 800a92c:	425b      	negs	r3, r3
 800a92e:	61a3      	str	r3, [r4, #24]
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	b943      	cbnz	r3, 800a946 <__swsetup_r+0xc6>
 800a934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a938:	d1ba      	bne.n	800a8b0 <__swsetup_r+0x30>
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	0781      	lsls	r1, r0, #30
 800a93e:	bf58      	it	pl
 800a940:	6963      	ldrpl	r3, [r4, #20]
 800a942:	60a3      	str	r3, [r4, #8]
 800a944:	e7f4      	b.n	800a930 <__swsetup_r+0xb0>
 800a946:	2000      	movs	r0, #0
 800a948:	e7f7      	b.n	800a93a <__swsetup_r+0xba>
 800a94a:	bf00      	nop
 800a94c:	20000610 	.word	0x20000610
 800a950:	0800da54 	.word	0x0800da54
 800a954:	0800da74 	.word	0x0800da74
 800a958:	0800da34 	.word	0x0800da34

0800a95c <__assert_func>:
 800a95c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a95e:	4614      	mov	r4, r2
 800a960:	461a      	mov	r2, r3
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <__assert_func+0x2c>)
 800a964:	4605      	mov	r5, r0
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68d8      	ldr	r0, [r3, #12]
 800a96a:	b14c      	cbz	r4, 800a980 <__assert_func+0x24>
 800a96c:	4b07      	ldr	r3, [pc, #28]	; (800a98c <__assert_func+0x30>)
 800a96e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a972:	9100      	str	r1, [sp, #0]
 800a974:	462b      	mov	r3, r5
 800a976:	4906      	ldr	r1, [pc, #24]	; (800a990 <__assert_func+0x34>)
 800a978:	f001 f81c 	bl	800b9b4 <fiprintf>
 800a97c:	f002 fd76 	bl	800d46c <abort>
 800a980:	4b04      	ldr	r3, [pc, #16]	; (800a994 <__assert_func+0x38>)
 800a982:	461c      	mov	r4, r3
 800a984:	e7f3      	b.n	800a96e <__assert_func+0x12>
 800a986:	bf00      	nop
 800a988:	20000610 	.word	0x20000610
 800a98c:	0800d87c 	.word	0x0800d87c
 800a990:	0800d889 	.word	0x0800d889
 800a994:	0800d8b7 	.word	0x0800d8b7

0800a998 <quorem>:
 800a998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	6903      	ldr	r3, [r0, #16]
 800a99e:	690c      	ldr	r4, [r1, #16]
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	42a3      	cmp	r3, r4
 800a9a4:	f2c0 8082 	blt.w	800aaac <quorem+0x114>
 800a9a8:	3c01      	subs	r4, #1
 800a9aa:	f100 0514 	add.w	r5, r0, #20
 800a9ae:	f101 0814 	add.w	r8, r1, #20
 800a9b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a9cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9d0:	d331      	bcc.n	800aa36 <quorem+0x9e>
 800a9d2:	f04f 0e00 	mov.w	lr, #0
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	46ac      	mov	ip, r5
 800a9da:	46f2      	mov	sl, lr
 800a9dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9e0:	b293      	uxth	r3, r2
 800a9e2:	fb06 e303 	mla	r3, r6, r3, lr
 800a9e6:	0c12      	lsrs	r2, r2, #16
 800a9e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	fb06 e202 	mla	r2, r6, r2, lr
 800a9f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a9f6:	f8dc a000 	ldr.w	sl, [ip]
 800a9fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9fe:	fa1f fa8a 	uxth.w	sl, sl
 800aa02:	4453      	add	r3, sl
 800aa04:	f8dc a000 	ldr.w	sl, [ip]
 800aa08:	b292      	uxth	r2, r2
 800aa0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa18:	4581      	cmp	r9, r0
 800aa1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa1e:	f84c 3b04 	str.w	r3, [ip], #4
 800aa22:	d2db      	bcs.n	800a9dc <quorem+0x44>
 800aa24:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa28:	b92b      	cbnz	r3, 800aa36 <quorem+0x9e>
 800aa2a:	9b01      	ldr	r3, [sp, #4]
 800aa2c:	3b04      	subs	r3, #4
 800aa2e:	429d      	cmp	r5, r3
 800aa30:	461a      	mov	r2, r3
 800aa32:	d32f      	bcc.n	800aa94 <quorem+0xfc>
 800aa34:	613c      	str	r4, [r7, #16]
 800aa36:	4638      	mov	r0, r7
 800aa38:	f001 feb0 	bl	800c79c <__mcmp>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	db25      	blt.n	800aa8c <quorem+0xf4>
 800aa40:	4628      	mov	r0, r5
 800aa42:	f04f 0c00 	mov.w	ip, #0
 800aa46:	3601      	adds	r6, #1
 800aa48:	f858 1b04 	ldr.w	r1, [r8], #4
 800aa4c:	f8d0 e000 	ldr.w	lr, [r0]
 800aa50:	b28b      	uxth	r3, r1
 800aa52:	ebac 0303 	sub.w	r3, ip, r3
 800aa56:	fa1f f28e 	uxth.w	r2, lr
 800aa5a:	4413      	add	r3, r2
 800aa5c:	0c0a      	lsrs	r2, r1, #16
 800aa5e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa6c:	45c1      	cmp	r9, r8
 800aa6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa72:	f840 3b04 	str.w	r3, [r0], #4
 800aa76:	d2e7      	bcs.n	800aa48 <quorem+0xb0>
 800aa78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa80:	b922      	cbnz	r2, 800aa8c <quorem+0xf4>
 800aa82:	3b04      	subs	r3, #4
 800aa84:	429d      	cmp	r5, r3
 800aa86:	461a      	mov	r2, r3
 800aa88:	d30a      	bcc.n	800aaa0 <quorem+0x108>
 800aa8a:	613c      	str	r4, [r7, #16]
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	b003      	add	sp, #12
 800aa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa94:	6812      	ldr	r2, [r2, #0]
 800aa96:	3b04      	subs	r3, #4
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d1cb      	bne.n	800aa34 <quorem+0x9c>
 800aa9c:	3c01      	subs	r4, #1
 800aa9e:	e7c6      	b.n	800aa2e <quorem+0x96>
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	3b04      	subs	r3, #4
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d1f0      	bne.n	800aa8a <quorem+0xf2>
 800aaa8:	3c01      	subs	r4, #1
 800aaaa:	e7eb      	b.n	800aa84 <quorem+0xec>
 800aaac:	2000      	movs	r0, #0
 800aaae:	e7ee      	b.n	800aa8e <quorem+0xf6>

0800aab0 <_dtoa_r>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	4616      	mov	r6, r2
 800aab6:	461f      	mov	r7, r3
 800aab8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aaba:	b099      	sub	sp, #100	; 0x64
 800aabc:	4605      	mov	r5, r0
 800aabe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aac2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800aac6:	b974      	cbnz	r4, 800aae6 <_dtoa_r+0x36>
 800aac8:	2010      	movs	r0, #16
 800aaca:	f001 fb77 	bl	800c1bc <malloc>
 800aace:	4602      	mov	r2, r0
 800aad0:	6268      	str	r0, [r5, #36]	; 0x24
 800aad2:	b920      	cbnz	r0, 800aade <_dtoa_r+0x2e>
 800aad4:	21ea      	movs	r1, #234	; 0xea
 800aad6:	4ba8      	ldr	r3, [pc, #672]	; (800ad78 <_dtoa_r+0x2c8>)
 800aad8:	48a8      	ldr	r0, [pc, #672]	; (800ad7c <_dtoa_r+0x2cc>)
 800aada:	f7ff ff3f 	bl	800a95c <__assert_func>
 800aade:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae2:	6004      	str	r4, [r0, #0]
 800aae4:	60c4      	str	r4, [r0, #12]
 800aae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aae8:	6819      	ldr	r1, [r3, #0]
 800aaea:	b151      	cbz	r1, 800ab02 <_dtoa_r+0x52>
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4093      	lsls	r3, r2
 800aaf2:	604a      	str	r2, [r1, #4]
 800aaf4:	608b      	str	r3, [r1, #8]
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f001 fbc8 	bl	800c28c <_Bfree>
 800aafc:	2200      	movs	r2, #0
 800aafe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	1e3b      	subs	r3, r7, #0
 800ab04:	bfaf      	iteee	ge
 800ab06:	2300      	movge	r3, #0
 800ab08:	2201      	movlt	r2, #1
 800ab0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab0e:	9305      	strlt	r3, [sp, #20]
 800ab10:	bfa8      	it	ge
 800ab12:	f8c8 3000 	strge.w	r3, [r8]
 800ab16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ab1a:	4b99      	ldr	r3, [pc, #612]	; (800ad80 <_dtoa_r+0x2d0>)
 800ab1c:	bfb8      	it	lt
 800ab1e:	f8c8 2000 	strlt.w	r2, [r8]
 800ab22:	ea33 0309 	bics.w	r3, r3, r9
 800ab26:	d119      	bne.n	800ab5c <_dtoa_r+0xac>
 800ab28:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab34:	4333      	orrs	r3, r6
 800ab36:	f000 857f 	beq.w	800b638 <_dtoa_r+0xb88>
 800ab3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab3c:	b953      	cbnz	r3, 800ab54 <_dtoa_r+0xa4>
 800ab3e:	4b91      	ldr	r3, [pc, #580]	; (800ad84 <_dtoa_r+0x2d4>)
 800ab40:	e022      	b.n	800ab88 <_dtoa_r+0xd8>
 800ab42:	4b91      	ldr	r3, [pc, #580]	; (800ad88 <_dtoa_r+0x2d8>)
 800ab44:	9303      	str	r3, [sp, #12]
 800ab46:	3308      	adds	r3, #8
 800ab48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	9803      	ldr	r0, [sp, #12]
 800ab4e:	b019      	add	sp, #100	; 0x64
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	4b8b      	ldr	r3, [pc, #556]	; (800ad84 <_dtoa_r+0x2d4>)
 800ab56:	9303      	str	r3, [sp, #12]
 800ab58:	3303      	adds	r3, #3
 800ab5a:	e7f5      	b.n	800ab48 <_dtoa_r+0x98>
 800ab5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ab60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ab64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f7f6 f846 	bl	8000bfc <__aeabi_dcmpeq>
 800ab70:	4680      	mov	r8, r0
 800ab72:	b158      	cbz	r0, 800ab8c <_dtoa_r+0xdc>
 800ab74:	2301      	movs	r3, #1
 800ab76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 8558 	beq.w	800b632 <_dtoa_r+0xb82>
 800ab82:	4882      	ldr	r0, [pc, #520]	; (800ad8c <_dtoa_r+0x2dc>)
 800ab84:	6018      	str	r0, [r3, #0]
 800ab86:	1e43      	subs	r3, r0, #1
 800ab88:	9303      	str	r3, [sp, #12]
 800ab8a:	e7df      	b.n	800ab4c <_dtoa_r+0x9c>
 800ab8c:	ab16      	add	r3, sp, #88	; 0x58
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	ab17      	add	r3, sp, #92	; 0x5c
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	4628      	mov	r0, r5
 800ab96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ab9a:	f001 ff21 	bl	800c9e0 <__d2b>
 800ab9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aba2:	4683      	mov	fp, r0
 800aba4:	2c00      	cmp	r4, #0
 800aba6:	d07f      	beq.n	800aca8 <_dtoa_r+0x1f8>
 800aba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800abb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800abba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800abbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800abc2:	2200      	movs	r2, #0
 800abc4:	4b72      	ldr	r3, [pc, #456]	; (800ad90 <_dtoa_r+0x2e0>)
 800abc6:	f7f5 fbf9 	bl	80003bc <__aeabi_dsub>
 800abca:	a365      	add	r3, pc, #404	; (adr r3, 800ad60 <_dtoa_r+0x2b0>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fdac 	bl	800072c <__aeabi_dmul>
 800abd4:	a364      	add	r3, pc, #400	; (adr r3, 800ad68 <_dtoa_r+0x2b8>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fbf1 	bl	80003c0 <__adddf3>
 800abde:	4606      	mov	r6, r0
 800abe0:	4620      	mov	r0, r4
 800abe2:	460f      	mov	r7, r1
 800abe4:	f7f5 fd38 	bl	8000658 <__aeabi_i2d>
 800abe8:	a361      	add	r3, pc, #388	; (adr r3, 800ad70 <_dtoa_r+0x2c0>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7f5 fd9d 	bl	800072c <__aeabi_dmul>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	f7f5 fbe1 	bl	80003c0 <__adddf3>
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	f7f6 f843 	bl	8000c8c <__aeabi_d2iz>
 800ac06:	2200      	movs	r2, #0
 800ac08:	4682      	mov	sl, r0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	4639      	mov	r1, r7
 800ac10:	f7f5 fffe 	bl	8000c10 <__aeabi_dcmplt>
 800ac14:	b148      	cbz	r0, 800ac2a <_dtoa_r+0x17a>
 800ac16:	4650      	mov	r0, sl
 800ac18:	f7f5 fd1e 	bl	8000658 <__aeabi_i2d>
 800ac1c:	4632      	mov	r2, r6
 800ac1e:	463b      	mov	r3, r7
 800ac20:	f7f5 ffec 	bl	8000bfc <__aeabi_dcmpeq>
 800ac24:	b908      	cbnz	r0, 800ac2a <_dtoa_r+0x17a>
 800ac26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac2a:	f1ba 0f16 	cmp.w	sl, #22
 800ac2e:	d858      	bhi.n	800ace2 <_dtoa_r+0x232>
 800ac30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac34:	4b57      	ldr	r3, [pc, #348]	; (800ad94 <_dtoa_r+0x2e4>)
 800ac36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f7f5 ffe7 	bl	8000c10 <__aeabi_dcmplt>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d04f      	beq.n	800ace6 <_dtoa_r+0x236>
 800ac46:	2300      	movs	r3, #0
 800ac48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac50:	1b1c      	subs	r4, r3, r4
 800ac52:	1e63      	subs	r3, r4, #1
 800ac54:	9309      	str	r3, [sp, #36]	; 0x24
 800ac56:	bf49      	itett	mi
 800ac58:	f1c4 0301 	rsbmi	r3, r4, #1
 800ac5c:	2300      	movpl	r3, #0
 800ac5e:	9306      	strmi	r3, [sp, #24]
 800ac60:	2300      	movmi	r3, #0
 800ac62:	bf54      	ite	pl
 800ac64:	9306      	strpl	r3, [sp, #24]
 800ac66:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ac68:	f1ba 0f00 	cmp.w	sl, #0
 800ac6c:	db3d      	blt.n	800acea <_dtoa_r+0x23a>
 800ac6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ac74:	4453      	add	r3, sl
 800ac76:	9309      	str	r3, [sp, #36]	; 0x24
 800ac78:	2300      	movs	r3, #0
 800ac7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac7e:	2b09      	cmp	r3, #9
 800ac80:	f200 808c 	bhi.w	800ad9c <_dtoa_r+0x2ec>
 800ac84:	2b05      	cmp	r3, #5
 800ac86:	bfc4      	itt	gt
 800ac88:	3b04      	subgt	r3, #4
 800ac8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ac8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac8e:	bfc8      	it	gt
 800ac90:	2400      	movgt	r4, #0
 800ac92:	f1a3 0302 	sub.w	r3, r3, #2
 800ac96:	bfd8      	it	le
 800ac98:	2401      	movle	r4, #1
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	f200 808a 	bhi.w	800adb4 <_dtoa_r+0x304>
 800aca0:	e8df f003 	tbb	[pc, r3]
 800aca4:	5b4d4f2d 	.word	0x5b4d4f2d
 800aca8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800acac:	441c      	add	r4, r3
 800acae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800acb2:	2b20      	cmp	r3, #32
 800acb4:	bfc3      	ittte	gt
 800acb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800acba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800acbe:	fa09 f303 	lslgt.w	r3, r9, r3
 800acc2:	f1c3 0320 	rsble	r3, r3, #32
 800acc6:	bfc6      	itte	gt
 800acc8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800accc:	4318      	orrgt	r0, r3
 800acce:	fa06 f003 	lslle.w	r0, r6, r3
 800acd2:	f7f5 fcb1 	bl	8000638 <__aeabi_ui2d>
 800acd6:	2301      	movs	r3, #1
 800acd8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800acdc:	3c01      	subs	r4, #1
 800acde:	9313      	str	r3, [sp, #76]	; 0x4c
 800ace0:	e76f      	b.n	800abc2 <_dtoa_r+0x112>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7b2      	b.n	800ac4c <_dtoa_r+0x19c>
 800ace6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ace8:	e7b1      	b.n	800ac4e <_dtoa_r+0x19e>
 800acea:	9b06      	ldr	r3, [sp, #24]
 800acec:	eba3 030a 	sub.w	r3, r3, sl
 800acf0:	9306      	str	r3, [sp, #24]
 800acf2:	f1ca 0300 	rsb	r3, sl, #0
 800acf6:	930a      	str	r3, [sp, #40]	; 0x28
 800acf8:	2300      	movs	r3, #0
 800acfa:	930e      	str	r3, [sp, #56]	; 0x38
 800acfc:	e7be      	b.n	800ac7c <_dtoa_r+0x1cc>
 800acfe:	2300      	movs	r3, #0
 800ad00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	dc58      	bgt.n	800adba <_dtoa_r+0x30a>
 800ad08:	f04f 0901 	mov.w	r9, #1
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ad12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ad16:	2200      	movs	r2, #0
 800ad18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ad1a:	6042      	str	r2, [r0, #4]
 800ad1c:	2204      	movs	r2, #4
 800ad1e:	f102 0614 	add.w	r6, r2, #20
 800ad22:	429e      	cmp	r6, r3
 800ad24:	6841      	ldr	r1, [r0, #4]
 800ad26:	d94e      	bls.n	800adc6 <_dtoa_r+0x316>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f001 fa6f 	bl	800c20c <_Balloc>
 800ad2e:	9003      	str	r0, [sp, #12]
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d14c      	bne.n	800adce <_dtoa_r+0x31e>
 800ad34:	4602      	mov	r2, r0
 800ad36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad3a:	4b17      	ldr	r3, [pc, #92]	; (800ad98 <_dtoa_r+0x2e8>)
 800ad3c:	e6cc      	b.n	800aad8 <_dtoa_r+0x28>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7de      	b.n	800ad00 <_dtoa_r+0x250>
 800ad42:	2300      	movs	r3, #0
 800ad44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad48:	eb0a 0903 	add.w	r9, sl, r3
 800ad4c:	f109 0301 	add.w	r3, r9, #1
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	9308      	str	r3, [sp, #32]
 800ad54:	bfb8      	it	lt
 800ad56:	2301      	movlt	r3, #1
 800ad58:	e7dd      	b.n	800ad16 <_dtoa_r+0x266>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e7f2      	b.n	800ad44 <_dtoa_r+0x294>
 800ad5e:	bf00      	nop
 800ad60:	636f4361 	.word	0x636f4361
 800ad64:	3fd287a7 	.word	0x3fd287a7
 800ad68:	8b60c8b3 	.word	0x8b60c8b3
 800ad6c:	3fc68a28 	.word	0x3fc68a28
 800ad70:	509f79fb 	.word	0x509f79fb
 800ad74:	3fd34413 	.word	0x3fd34413
 800ad78:	0800d808 	.word	0x0800d808
 800ad7c:	0800d9c6 	.word	0x0800d9c6
 800ad80:	7ff00000 	.word	0x7ff00000
 800ad84:	0800d9c2 	.word	0x0800d9c2
 800ad88:	0800d9b9 	.word	0x0800d9b9
 800ad8c:	0800d789 	.word	0x0800d789
 800ad90:	3ff80000 	.word	0x3ff80000
 800ad94:	0800db98 	.word	0x0800db98
 800ad98:	0800da21 	.word	0x0800da21
 800ad9c:	2401      	movs	r4, #1
 800ad9e:	2300      	movs	r3, #0
 800ada0:	940b      	str	r4, [sp, #44]	; 0x2c
 800ada2:	9322      	str	r3, [sp, #136]	; 0x88
 800ada4:	f04f 39ff 	mov.w	r9, #4294967295
 800ada8:	2200      	movs	r2, #0
 800adaa:	2312      	movs	r3, #18
 800adac:	f8cd 9020 	str.w	r9, [sp, #32]
 800adb0:	9223      	str	r2, [sp, #140]	; 0x8c
 800adb2:	e7b0      	b.n	800ad16 <_dtoa_r+0x266>
 800adb4:	2301      	movs	r3, #1
 800adb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800adb8:	e7f4      	b.n	800ada4 <_dtoa_r+0x2f4>
 800adba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800adbe:	464b      	mov	r3, r9
 800adc0:	f8cd 9020 	str.w	r9, [sp, #32]
 800adc4:	e7a7      	b.n	800ad16 <_dtoa_r+0x266>
 800adc6:	3101      	adds	r1, #1
 800adc8:	6041      	str	r1, [r0, #4]
 800adca:	0052      	lsls	r2, r2, #1
 800adcc:	e7a7      	b.n	800ad1e <_dtoa_r+0x26e>
 800adce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800add0:	9a03      	ldr	r2, [sp, #12]
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	9b08      	ldr	r3, [sp, #32]
 800add6:	2b0e      	cmp	r3, #14
 800add8:	f200 80a8 	bhi.w	800af2c <_dtoa_r+0x47c>
 800addc:	2c00      	cmp	r4, #0
 800adde:	f000 80a5 	beq.w	800af2c <_dtoa_r+0x47c>
 800ade2:	f1ba 0f00 	cmp.w	sl, #0
 800ade6:	dd34      	ble.n	800ae52 <_dtoa_r+0x3a2>
 800ade8:	4a9a      	ldr	r2, [pc, #616]	; (800b054 <_dtoa_r+0x5a4>)
 800adea:	f00a 030f 	and.w	r3, sl, #15
 800adee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800adf2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800adf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800adfe:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ae02:	d016      	beq.n	800ae32 <_dtoa_r+0x382>
 800ae04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae08:	4b93      	ldr	r3, [pc, #588]	; (800b058 <_dtoa_r+0x5a8>)
 800ae0a:	2703      	movs	r7, #3
 800ae0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae10:	f7f5 fdb6 	bl	8000980 <__aeabi_ddiv>
 800ae14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae18:	f004 040f 	and.w	r4, r4, #15
 800ae1c:	4e8e      	ldr	r6, [pc, #568]	; (800b058 <_dtoa_r+0x5a8>)
 800ae1e:	b954      	cbnz	r4, 800ae36 <_dtoa_r+0x386>
 800ae20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae28:	f7f5 fdaa 	bl	8000980 <__aeabi_ddiv>
 800ae2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae30:	e029      	b.n	800ae86 <_dtoa_r+0x3d6>
 800ae32:	2702      	movs	r7, #2
 800ae34:	e7f2      	b.n	800ae1c <_dtoa_r+0x36c>
 800ae36:	07e1      	lsls	r1, r4, #31
 800ae38:	d508      	bpl.n	800ae4c <_dtoa_r+0x39c>
 800ae3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae42:	f7f5 fc73 	bl	800072c <__aeabi_dmul>
 800ae46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae4a:	3701      	adds	r7, #1
 800ae4c:	1064      	asrs	r4, r4, #1
 800ae4e:	3608      	adds	r6, #8
 800ae50:	e7e5      	b.n	800ae1e <_dtoa_r+0x36e>
 800ae52:	f000 80a5 	beq.w	800afa0 <_dtoa_r+0x4f0>
 800ae56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae5a:	f1ca 0400 	rsb	r4, sl, #0
 800ae5e:	4b7d      	ldr	r3, [pc, #500]	; (800b054 <_dtoa_r+0x5a4>)
 800ae60:	f004 020f 	and.w	r2, r4, #15
 800ae64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f7f5 fc5e 	bl	800072c <__aeabi_dmul>
 800ae70:	2702      	movs	r7, #2
 800ae72:	2300      	movs	r3, #0
 800ae74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae78:	4e77      	ldr	r6, [pc, #476]	; (800b058 <_dtoa_r+0x5a8>)
 800ae7a:	1124      	asrs	r4, r4, #4
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	f040 8084 	bne.w	800af8a <_dtoa_r+0x4da>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1d2      	bne.n	800ae2c <_dtoa_r+0x37c>
 800ae86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 808b 	beq.w	800afa4 <_dtoa_r+0x4f4>
 800ae8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ae92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ae96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4b6f      	ldr	r3, [pc, #444]	; (800b05c <_dtoa_r+0x5ac>)
 800ae9e:	f7f5 feb7 	bl	8000c10 <__aeabi_dcmplt>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d07e      	beq.n	800afa4 <_dtoa_r+0x4f4>
 800aea6:	9b08      	ldr	r3, [sp, #32]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d07b      	beq.n	800afa4 <_dtoa_r+0x4f4>
 800aeac:	f1b9 0f00 	cmp.w	r9, #0
 800aeb0:	dd38      	ble.n	800af24 <_dtoa_r+0x474>
 800aeb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	4b69      	ldr	r3, [pc, #420]	; (800b060 <_dtoa_r+0x5b0>)
 800aeba:	f7f5 fc37 	bl	800072c <__aeabi_dmul>
 800aebe:	464c      	mov	r4, r9
 800aec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aec4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800aec8:	3701      	adds	r7, #1
 800aeca:	4638      	mov	r0, r7
 800aecc:	f7f5 fbc4 	bl	8000658 <__aeabi_i2d>
 800aed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aed4:	f7f5 fc2a 	bl	800072c <__aeabi_dmul>
 800aed8:	2200      	movs	r2, #0
 800aeda:	4b62      	ldr	r3, [pc, #392]	; (800b064 <_dtoa_r+0x5b4>)
 800aedc:	f7f5 fa70 	bl	80003c0 <__adddf3>
 800aee0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aee4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aee8:	9611      	str	r6, [sp, #68]	; 0x44
 800aeea:	2c00      	cmp	r4, #0
 800aeec:	d15d      	bne.n	800afaa <_dtoa_r+0x4fa>
 800aeee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef2:	2200      	movs	r2, #0
 800aef4:	4b5c      	ldr	r3, [pc, #368]	; (800b068 <_dtoa_r+0x5b8>)
 800aef6:	f7f5 fa61 	bl	80003bc <__aeabi_dsub>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af02:	4633      	mov	r3, r6
 800af04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af06:	f7f5 fea1 	bl	8000c4c <__aeabi_dcmpgt>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f040 829c 	bne.w	800b448 <_dtoa_r+0x998>
 800af10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800af1a:	f7f5 fe79 	bl	8000c10 <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f040 8290 	bne.w	800b444 <_dtoa_r+0x994>
 800af24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800af28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f2c0 8152 	blt.w	800b1d8 <_dtoa_r+0x728>
 800af34:	f1ba 0f0e 	cmp.w	sl, #14
 800af38:	f300 814e 	bgt.w	800b1d8 <_dtoa_r+0x728>
 800af3c:	4b45      	ldr	r3, [pc, #276]	; (800b054 <_dtoa_r+0x5a4>)
 800af3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800af42:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800af4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f280 80db 	bge.w	800b108 <_dtoa_r+0x658>
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	2b00      	cmp	r3, #0
 800af56:	f300 80d7 	bgt.w	800b108 <_dtoa_r+0x658>
 800af5a:	f040 8272 	bne.w	800b442 <_dtoa_r+0x992>
 800af5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af62:	2200      	movs	r2, #0
 800af64:	4b40      	ldr	r3, [pc, #256]	; (800b068 <_dtoa_r+0x5b8>)
 800af66:	f7f5 fbe1 	bl	800072c <__aeabi_dmul>
 800af6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af6e:	f7f5 fe63 	bl	8000c38 <__aeabi_dcmpge>
 800af72:	9c08      	ldr	r4, [sp, #32]
 800af74:	4626      	mov	r6, r4
 800af76:	2800      	cmp	r0, #0
 800af78:	f040 8248 	bne.w	800b40c <_dtoa_r+0x95c>
 800af7c:	2331      	movs	r3, #49	; 0x31
 800af7e:	9f03      	ldr	r7, [sp, #12]
 800af80:	f10a 0a01 	add.w	sl, sl, #1
 800af84:	f807 3b01 	strb.w	r3, [r7], #1
 800af88:	e244      	b.n	800b414 <_dtoa_r+0x964>
 800af8a:	07e2      	lsls	r2, r4, #31
 800af8c:	d505      	bpl.n	800af9a <_dtoa_r+0x4ea>
 800af8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af92:	f7f5 fbcb 	bl	800072c <__aeabi_dmul>
 800af96:	2301      	movs	r3, #1
 800af98:	3701      	adds	r7, #1
 800af9a:	1064      	asrs	r4, r4, #1
 800af9c:	3608      	adds	r6, #8
 800af9e:	e76d      	b.n	800ae7c <_dtoa_r+0x3cc>
 800afa0:	2702      	movs	r7, #2
 800afa2:	e770      	b.n	800ae86 <_dtoa_r+0x3d6>
 800afa4:	46d0      	mov	r8, sl
 800afa6:	9c08      	ldr	r4, [sp, #32]
 800afa8:	e78f      	b.n	800aeca <_dtoa_r+0x41a>
 800afaa:	9903      	ldr	r1, [sp, #12]
 800afac:	4b29      	ldr	r3, [pc, #164]	; (800b054 <_dtoa_r+0x5a4>)
 800afae:	4421      	add	r1, r4
 800afb0:	9112      	str	r1, [sp, #72]	; 0x48
 800afb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800afbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afc0:	2900      	cmp	r1, #0
 800afc2:	d055      	beq.n	800b070 <_dtoa_r+0x5c0>
 800afc4:	2000      	movs	r0, #0
 800afc6:	4929      	ldr	r1, [pc, #164]	; (800b06c <_dtoa_r+0x5bc>)
 800afc8:	f7f5 fcda 	bl	8000980 <__aeabi_ddiv>
 800afcc:	463b      	mov	r3, r7
 800afce:	4632      	mov	r2, r6
 800afd0:	f7f5 f9f4 	bl	80003bc <__aeabi_dsub>
 800afd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afd8:	9f03      	ldr	r7, [sp, #12]
 800afda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afde:	f7f5 fe55 	bl	8000c8c <__aeabi_d2iz>
 800afe2:	4604      	mov	r4, r0
 800afe4:	f7f5 fb38 	bl	8000658 <__aeabi_i2d>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff0:	f7f5 f9e4 	bl	80003bc <__aeabi_dsub>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	3430      	adds	r4, #48	; 0x30
 800affa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800affe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b002:	f807 4b01 	strb.w	r4, [r7], #1
 800b006:	f7f5 fe03 	bl	8000c10 <__aeabi_dcmplt>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d174      	bne.n	800b0f8 <_dtoa_r+0x648>
 800b00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b012:	2000      	movs	r0, #0
 800b014:	4911      	ldr	r1, [pc, #68]	; (800b05c <_dtoa_r+0x5ac>)
 800b016:	f7f5 f9d1 	bl	80003bc <__aeabi_dsub>
 800b01a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b01e:	f7f5 fdf7 	bl	8000c10 <__aeabi_dcmplt>
 800b022:	2800      	cmp	r0, #0
 800b024:	f040 80b7 	bne.w	800b196 <_dtoa_r+0x6e6>
 800b028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b02a:	429f      	cmp	r7, r3
 800b02c:	f43f af7a 	beq.w	800af24 <_dtoa_r+0x474>
 800b030:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b034:	2200      	movs	r2, #0
 800b036:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <_dtoa_r+0x5b0>)
 800b038:	f7f5 fb78 	bl	800072c <__aeabi_dmul>
 800b03c:	2200      	movs	r2, #0
 800b03e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b046:	4b06      	ldr	r3, [pc, #24]	; (800b060 <_dtoa_r+0x5b0>)
 800b048:	f7f5 fb70 	bl	800072c <__aeabi_dmul>
 800b04c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b050:	e7c3      	b.n	800afda <_dtoa_r+0x52a>
 800b052:	bf00      	nop
 800b054:	0800db98 	.word	0x0800db98
 800b058:	0800db70 	.word	0x0800db70
 800b05c:	3ff00000 	.word	0x3ff00000
 800b060:	40240000 	.word	0x40240000
 800b064:	401c0000 	.word	0x401c0000
 800b068:	40140000 	.word	0x40140000
 800b06c:	3fe00000 	.word	0x3fe00000
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fb5a 	bl	800072c <__aeabi_dmul>
 800b078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b07a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b07e:	9c03      	ldr	r4, [sp, #12]
 800b080:	9314      	str	r3, [sp, #80]	; 0x50
 800b082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b086:	f7f5 fe01 	bl	8000c8c <__aeabi_d2iz>
 800b08a:	9015      	str	r0, [sp, #84]	; 0x54
 800b08c:	f7f5 fae4 	bl	8000658 <__aeabi_i2d>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b098:	f7f5 f990 	bl	80003bc <__aeabi_dsub>
 800b09c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b09e:	4606      	mov	r6, r0
 800b0a0:	3330      	adds	r3, #48	; 0x30
 800b0a2:	f804 3b01 	strb.w	r3, [r4], #1
 800b0a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0a8:	460f      	mov	r7, r1
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	d124      	bne.n	800b0fc <_dtoa_r+0x64c>
 800b0b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0b6:	4bb0      	ldr	r3, [pc, #704]	; (800b378 <_dtoa_r+0x8c8>)
 800b0b8:	f7f5 f982 	bl	80003c0 <__adddf3>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	f7f5 fdc2 	bl	8000c4c <__aeabi_dcmpgt>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d163      	bne.n	800b194 <_dtoa_r+0x6e4>
 800b0cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	49a9      	ldr	r1, [pc, #676]	; (800b378 <_dtoa_r+0x8c8>)
 800b0d4:	f7f5 f972 	bl	80003bc <__aeabi_dsub>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4630      	mov	r0, r6
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f7f5 fd96 	bl	8000c10 <__aeabi_dcmplt>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	f43f af1d 	beq.w	800af24 <_dtoa_r+0x474>
 800b0ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b0ec:	1e7b      	subs	r3, r7, #1
 800b0ee:	9314      	str	r3, [sp, #80]	; 0x50
 800b0f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b0f4:	2b30      	cmp	r3, #48	; 0x30
 800b0f6:	d0f8      	beq.n	800b0ea <_dtoa_r+0x63a>
 800b0f8:	46c2      	mov	sl, r8
 800b0fa:	e03b      	b.n	800b174 <_dtoa_r+0x6c4>
 800b0fc:	4b9f      	ldr	r3, [pc, #636]	; (800b37c <_dtoa_r+0x8cc>)
 800b0fe:	f7f5 fb15 	bl	800072c <__aeabi_dmul>
 800b102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b106:	e7bc      	b.n	800b082 <_dtoa_r+0x5d2>
 800b108:	9f03      	ldr	r7, [sp, #12]
 800b10a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b10e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b112:	4640      	mov	r0, r8
 800b114:	4649      	mov	r1, r9
 800b116:	f7f5 fc33 	bl	8000980 <__aeabi_ddiv>
 800b11a:	f7f5 fdb7 	bl	8000c8c <__aeabi_d2iz>
 800b11e:	4604      	mov	r4, r0
 800b120:	f7f5 fa9a 	bl	8000658 <__aeabi_i2d>
 800b124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b128:	f7f5 fb00 	bl	800072c <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4640      	mov	r0, r8
 800b132:	4649      	mov	r1, r9
 800b134:	f7f5 f942 	bl	80003bc <__aeabi_dsub>
 800b138:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b13c:	f807 6b01 	strb.w	r6, [r7], #1
 800b140:	9e03      	ldr	r6, [sp, #12]
 800b142:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b146:	1bbe      	subs	r6, r7, r6
 800b148:	45b4      	cmp	ip, r6
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	d136      	bne.n	800b1be <_dtoa_r+0x70e>
 800b150:	f7f5 f936 	bl	80003c0 <__adddf3>
 800b154:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b158:	4680      	mov	r8, r0
 800b15a:	4689      	mov	r9, r1
 800b15c:	f7f5 fd76 	bl	8000c4c <__aeabi_dcmpgt>
 800b160:	bb58      	cbnz	r0, 800b1ba <_dtoa_r+0x70a>
 800b162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	f7f5 fd47 	bl	8000bfc <__aeabi_dcmpeq>
 800b16e:	b108      	cbz	r0, 800b174 <_dtoa_r+0x6c4>
 800b170:	07e1      	lsls	r1, r4, #31
 800b172:	d422      	bmi.n	800b1ba <_dtoa_r+0x70a>
 800b174:	4628      	mov	r0, r5
 800b176:	4659      	mov	r1, fp
 800b178:	f001 f888 	bl	800c28c <_Bfree>
 800b17c:	2300      	movs	r3, #0
 800b17e:	703b      	strb	r3, [r7, #0]
 800b180:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b182:	f10a 0001 	add.w	r0, sl, #1
 800b186:	6018      	str	r0, [r3, #0]
 800b188:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f43f acde 	beq.w	800ab4c <_dtoa_r+0x9c>
 800b190:	601f      	str	r7, [r3, #0]
 800b192:	e4db      	b.n	800ab4c <_dtoa_r+0x9c>
 800b194:	4627      	mov	r7, r4
 800b196:	463b      	mov	r3, r7
 800b198:	461f      	mov	r7, r3
 800b19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b19e:	2a39      	cmp	r2, #57	; 0x39
 800b1a0:	d107      	bne.n	800b1b2 <_dtoa_r+0x702>
 800b1a2:	9a03      	ldr	r2, [sp, #12]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d1f7      	bne.n	800b198 <_dtoa_r+0x6e8>
 800b1a8:	2230      	movs	r2, #48	; 0x30
 800b1aa:	9903      	ldr	r1, [sp, #12]
 800b1ac:	f108 0801 	add.w	r8, r8, #1
 800b1b0:	700a      	strb	r2, [r1, #0]
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	3201      	adds	r2, #1
 800b1b6:	701a      	strb	r2, [r3, #0]
 800b1b8:	e79e      	b.n	800b0f8 <_dtoa_r+0x648>
 800b1ba:	46d0      	mov	r8, sl
 800b1bc:	e7eb      	b.n	800b196 <_dtoa_r+0x6e6>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4b6e      	ldr	r3, [pc, #440]	; (800b37c <_dtoa_r+0x8cc>)
 800b1c2:	f7f5 fab3 	bl	800072c <__aeabi_dmul>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4680      	mov	r8, r0
 800b1cc:	4689      	mov	r9, r1
 800b1ce:	f7f5 fd15 	bl	8000bfc <__aeabi_dcmpeq>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d09b      	beq.n	800b10e <_dtoa_r+0x65e>
 800b1d6:	e7cd      	b.n	800b174 <_dtoa_r+0x6c4>
 800b1d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	f000 80d0 	beq.w	800b380 <_dtoa_r+0x8d0>
 800b1e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b1e2:	2a01      	cmp	r2, #1
 800b1e4:	f300 80ae 	bgt.w	800b344 <_dtoa_r+0x894>
 800b1e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	f000 80a6 	beq.w	800b33c <_dtoa_r+0x88c>
 800b1f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1f6:	9f06      	ldr	r7, [sp, #24]
 800b1f8:	9a06      	ldr	r2, [sp, #24]
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	441a      	add	r2, r3
 800b1fe:	9206      	str	r2, [sp, #24]
 800b200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b202:	4628      	mov	r0, r5
 800b204:	441a      	add	r2, r3
 800b206:	9209      	str	r2, [sp, #36]	; 0x24
 800b208:	f001 f940 	bl	800c48c <__i2b>
 800b20c:	4606      	mov	r6, r0
 800b20e:	2f00      	cmp	r7, #0
 800b210:	dd0c      	ble.n	800b22c <_dtoa_r+0x77c>
 800b212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	dd09      	ble.n	800b22c <_dtoa_r+0x77c>
 800b218:	42bb      	cmp	r3, r7
 800b21a:	bfa8      	it	ge
 800b21c:	463b      	movge	r3, r7
 800b21e:	9a06      	ldr	r2, [sp, #24]
 800b220:	1aff      	subs	r7, r7, r3
 800b222:	1ad2      	subs	r2, r2, r3
 800b224:	9206      	str	r2, [sp, #24]
 800b226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	9309      	str	r3, [sp, #36]	; 0x24
 800b22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b22e:	b1f3      	cbz	r3, 800b26e <_dtoa_r+0x7be>
 800b230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 80a8 	beq.w	800b388 <_dtoa_r+0x8d8>
 800b238:	2c00      	cmp	r4, #0
 800b23a:	dd10      	ble.n	800b25e <_dtoa_r+0x7ae>
 800b23c:	4631      	mov	r1, r6
 800b23e:	4622      	mov	r2, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f001 f9e1 	bl	800c608 <__pow5mult>
 800b246:	465a      	mov	r2, fp
 800b248:	4601      	mov	r1, r0
 800b24a:	4606      	mov	r6, r0
 800b24c:	4628      	mov	r0, r5
 800b24e:	f001 f933 	bl	800c4b8 <__multiply>
 800b252:	4680      	mov	r8, r0
 800b254:	4659      	mov	r1, fp
 800b256:	4628      	mov	r0, r5
 800b258:	f001 f818 	bl	800c28c <_Bfree>
 800b25c:	46c3      	mov	fp, r8
 800b25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b260:	1b1a      	subs	r2, r3, r4
 800b262:	d004      	beq.n	800b26e <_dtoa_r+0x7be>
 800b264:	4659      	mov	r1, fp
 800b266:	4628      	mov	r0, r5
 800b268:	f001 f9ce 	bl	800c608 <__pow5mult>
 800b26c:	4683      	mov	fp, r0
 800b26e:	2101      	movs	r1, #1
 800b270:	4628      	mov	r0, r5
 800b272:	f001 f90b 	bl	800c48c <__i2b>
 800b276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b278:	4604      	mov	r4, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f340 8086 	ble.w	800b38c <_dtoa_r+0x8dc>
 800b280:	461a      	mov	r2, r3
 800b282:	4601      	mov	r1, r0
 800b284:	4628      	mov	r0, r5
 800b286:	f001 f9bf 	bl	800c608 <__pow5mult>
 800b28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b28c:	4604      	mov	r4, r0
 800b28e:	2b01      	cmp	r3, #1
 800b290:	dd7f      	ble.n	800b392 <_dtoa_r+0x8e2>
 800b292:	f04f 0800 	mov.w	r8, #0
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b29c:	6918      	ldr	r0, [r3, #16]
 800b29e:	f001 f8a7 	bl	800c3f0 <__hi0bits>
 800b2a2:	f1c0 0020 	rsb	r0, r0, #32
 800b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a8:	4418      	add	r0, r3
 800b2aa:	f010 001f 	ands.w	r0, r0, #31
 800b2ae:	f000 8092 	beq.w	800b3d6 <_dtoa_r+0x926>
 800b2b2:	f1c0 0320 	rsb	r3, r0, #32
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	f340 808a 	ble.w	800b3d0 <_dtoa_r+0x920>
 800b2bc:	f1c0 001c 	rsb	r0, r0, #28
 800b2c0:	9b06      	ldr	r3, [sp, #24]
 800b2c2:	4407      	add	r7, r0
 800b2c4:	4403      	add	r3, r0
 800b2c6:	9306      	str	r3, [sp, #24]
 800b2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ca:	4403      	add	r3, r0
 800b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ce:	9b06      	ldr	r3, [sp, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dd05      	ble.n	800b2e0 <_dtoa_r+0x830>
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f001 f9ef 	bl	800c6bc <__lshift>
 800b2de:	4683      	mov	fp, r0
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dd05      	ble.n	800b2f2 <_dtoa_r+0x842>
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f001 f9e6 	bl	800c6bc <__lshift>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d070      	beq.n	800b3da <_dtoa_r+0x92a>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f001 fa4e 	bl	800c79c <__mcmp>
 800b300:	2800      	cmp	r0, #0
 800b302:	da6a      	bge.n	800b3da <_dtoa_r+0x92a>
 800b304:	2300      	movs	r3, #0
 800b306:	4659      	mov	r1, fp
 800b308:	220a      	movs	r2, #10
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 ffe0 	bl	800c2d0 <__multadd>
 800b310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b312:	4683      	mov	fp, r0
 800b314:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 8194 	beq.w	800b646 <_dtoa_r+0xb96>
 800b31e:	4631      	mov	r1, r6
 800b320:	2300      	movs	r3, #0
 800b322:	220a      	movs	r2, #10
 800b324:	4628      	mov	r0, r5
 800b326:	f000 ffd3 	bl	800c2d0 <__multadd>
 800b32a:	f1b9 0f00 	cmp.w	r9, #0
 800b32e:	4606      	mov	r6, r0
 800b330:	f300 8093 	bgt.w	800b45a <_dtoa_r+0x9aa>
 800b334:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b336:	2b02      	cmp	r3, #2
 800b338:	dc57      	bgt.n	800b3ea <_dtoa_r+0x93a>
 800b33a:	e08e      	b.n	800b45a <_dtoa_r+0x9aa>
 800b33c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b33e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b342:	e757      	b.n	800b1f4 <_dtoa_r+0x744>
 800b344:	9b08      	ldr	r3, [sp, #32]
 800b346:	1e5c      	subs	r4, r3, #1
 800b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	bfb7      	itett	lt
 800b34e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b350:	1b1c      	subge	r4, r3, r4
 800b352:	1ae2      	sublt	r2, r4, r3
 800b354:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b356:	bfbe      	ittt	lt
 800b358:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b35a:	189b      	addlt	r3, r3, r2
 800b35c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b35e:	9b08      	ldr	r3, [sp, #32]
 800b360:	bfb8      	it	lt
 800b362:	2400      	movlt	r4, #0
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfbb      	ittet	lt
 800b368:	9b06      	ldrlt	r3, [sp, #24]
 800b36a:	9a08      	ldrlt	r2, [sp, #32]
 800b36c:	9f06      	ldrge	r7, [sp, #24]
 800b36e:	1a9f      	sublt	r7, r3, r2
 800b370:	bfac      	ite	ge
 800b372:	9b08      	ldrge	r3, [sp, #32]
 800b374:	2300      	movlt	r3, #0
 800b376:	e73f      	b.n	800b1f8 <_dtoa_r+0x748>
 800b378:	3fe00000 	.word	0x3fe00000
 800b37c:	40240000 	.word	0x40240000
 800b380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b382:	9f06      	ldr	r7, [sp, #24]
 800b384:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b386:	e742      	b.n	800b20e <_dtoa_r+0x75e>
 800b388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b38a:	e76b      	b.n	800b264 <_dtoa_r+0x7b4>
 800b38c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b38e:	2b01      	cmp	r3, #1
 800b390:	dc19      	bgt.n	800b3c6 <_dtoa_r+0x916>
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	b9bb      	cbnz	r3, 800b3c6 <_dtoa_r+0x916>
 800b396:	9b05      	ldr	r3, [sp, #20]
 800b398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b39c:	b99b      	cbnz	r3, 800b3c6 <_dtoa_r+0x916>
 800b39e:	9b05      	ldr	r3, [sp, #20]
 800b3a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3a4:	0d1b      	lsrs	r3, r3, #20
 800b3a6:	051b      	lsls	r3, r3, #20
 800b3a8:	b183      	cbz	r3, 800b3cc <_dtoa_r+0x91c>
 800b3aa:	f04f 0801 	mov.w	r8, #1
 800b3ae:	9b06      	ldr	r3, [sp, #24]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	9306      	str	r3, [sp, #24]
 800b3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f47f af6a 	bne.w	800b296 <_dtoa_r+0x7e6>
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	e76f      	b.n	800b2a6 <_dtoa_r+0x7f6>
 800b3c6:	f04f 0800 	mov.w	r8, #0
 800b3ca:	e7f6      	b.n	800b3ba <_dtoa_r+0x90a>
 800b3cc:	4698      	mov	r8, r3
 800b3ce:	e7f4      	b.n	800b3ba <_dtoa_r+0x90a>
 800b3d0:	f43f af7d 	beq.w	800b2ce <_dtoa_r+0x81e>
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	301c      	adds	r0, #28
 800b3d8:	e772      	b.n	800b2c0 <_dtoa_r+0x810>
 800b3da:	9b08      	ldr	r3, [sp, #32]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	dc36      	bgt.n	800b44e <_dtoa_r+0x99e>
 800b3e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	dd33      	ble.n	800b44e <_dtoa_r+0x99e>
 800b3e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3ea:	f1b9 0f00 	cmp.w	r9, #0
 800b3ee:	d10d      	bne.n	800b40c <_dtoa_r+0x95c>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	2205      	movs	r2, #5
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 ff6a 	bl	800c2d0 <__multadd>
 800b3fc:	4601      	mov	r1, r0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4658      	mov	r0, fp
 800b402:	f001 f9cb 	bl	800c79c <__mcmp>
 800b406:	2800      	cmp	r0, #0
 800b408:	f73f adb8 	bgt.w	800af7c <_dtoa_r+0x4cc>
 800b40c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b40e:	9f03      	ldr	r7, [sp, #12]
 800b410:	ea6f 0a03 	mvn.w	sl, r3
 800b414:	f04f 0800 	mov.w	r8, #0
 800b418:	4621      	mov	r1, r4
 800b41a:	4628      	mov	r0, r5
 800b41c:	f000 ff36 	bl	800c28c <_Bfree>
 800b420:	2e00      	cmp	r6, #0
 800b422:	f43f aea7 	beq.w	800b174 <_dtoa_r+0x6c4>
 800b426:	f1b8 0f00 	cmp.w	r8, #0
 800b42a:	d005      	beq.n	800b438 <_dtoa_r+0x988>
 800b42c:	45b0      	cmp	r8, r6
 800b42e:	d003      	beq.n	800b438 <_dtoa_r+0x988>
 800b430:	4641      	mov	r1, r8
 800b432:	4628      	mov	r0, r5
 800b434:	f000 ff2a 	bl	800c28c <_Bfree>
 800b438:	4631      	mov	r1, r6
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 ff26 	bl	800c28c <_Bfree>
 800b440:	e698      	b.n	800b174 <_dtoa_r+0x6c4>
 800b442:	2400      	movs	r4, #0
 800b444:	4626      	mov	r6, r4
 800b446:	e7e1      	b.n	800b40c <_dtoa_r+0x95c>
 800b448:	46c2      	mov	sl, r8
 800b44a:	4626      	mov	r6, r4
 800b44c:	e596      	b.n	800af7c <_dtoa_r+0x4cc>
 800b44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 80fd 	beq.w	800b654 <_dtoa_r+0xba4>
 800b45a:	2f00      	cmp	r7, #0
 800b45c:	dd05      	ble.n	800b46a <_dtoa_r+0x9ba>
 800b45e:	4631      	mov	r1, r6
 800b460:	463a      	mov	r2, r7
 800b462:	4628      	mov	r0, r5
 800b464:	f001 f92a 	bl	800c6bc <__lshift>
 800b468:	4606      	mov	r6, r0
 800b46a:	f1b8 0f00 	cmp.w	r8, #0
 800b46e:	d05c      	beq.n	800b52a <_dtoa_r+0xa7a>
 800b470:	4628      	mov	r0, r5
 800b472:	6871      	ldr	r1, [r6, #4]
 800b474:	f000 feca 	bl	800c20c <_Balloc>
 800b478:	4607      	mov	r7, r0
 800b47a:	b928      	cbnz	r0, 800b488 <_dtoa_r+0x9d8>
 800b47c:	4602      	mov	r2, r0
 800b47e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b482:	4b7f      	ldr	r3, [pc, #508]	; (800b680 <_dtoa_r+0xbd0>)
 800b484:	f7ff bb28 	b.w	800aad8 <_dtoa_r+0x28>
 800b488:	6932      	ldr	r2, [r6, #16]
 800b48a:	f106 010c 	add.w	r1, r6, #12
 800b48e:	3202      	adds	r2, #2
 800b490:	0092      	lsls	r2, r2, #2
 800b492:	300c      	adds	r0, #12
 800b494:	f7fd fb62 	bl	8008b5c <memcpy>
 800b498:	2201      	movs	r2, #1
 800b49a:	4639      	mov	r1, r7
 800b49c:	4628      	mov	r0, r5
 800b49e:	f001 f90d 	bl	800c6bc <__lshift>
 800b4a2:	46b0      	mov	r8, r6
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	9b03      	ldr	r3, [sp, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	9308      	str	r3, [sp, #32]
 800b4ac:	9b03      	ldr	r3, [sp, #12]
 800b4ae:	444b      	add	r3, r9
 800b4b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b2:	9b04      	ldr	r3, [sp, #16]
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ba:	9b08      	ldr	r3, [sp, #32]
 800b4bc:	4621      	mov	r1, r4
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	4658      	mov	r0, fp
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	f7ff fa68 	bl	800a998 <quorem>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	4641      	mov	r1, r8
 800b4cc:	3330      	adds	r3, #48	; 0x30
 800b4ce:	9006      	str	r0, [sp, #24]
 800b4d0:	4658      	mov	r0, fp
 800b4d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4d4:	f001 f962 	bl	800c79c <__mcmp>
 800b4d8:	4632      	mov	r2, r6
 800b4da:	4681      	mov	r9, r0
 800b4dc:	4621      	mov	r1, r4
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f001 f978 	bl	800c7d4 <__mdiff>
 800b4e4:	68c2      	ldr	r2, [r0, #12]
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ea:	bb02      	cbnz	r2, 800b52e <_dtoa_r+0xa7e>
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	4658      	mov	r0, fp
 800b4f0:	f001 f954 	bl	800c79c <__mcmp>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b500:	f000 fec4 	bl	800c28c <_Bfree>
 800b504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b508:	9f08      	ldr	r7, [sp, #32]
 800b50a:	ea43 0102 	orr.w	r1, r3, r2
 800b50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b510:	430b      	orrs	r3, r1
 800b512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b514:	d10d      	bne.n	800b532 <_dtoa_r+0xa82>
 800b516:	2b39      	cmp	r3, #57	; 0x39
 800b518:	d029      	beq.n	800b56e <_dtoa_r+0xabe>
 800b51a:	f1b9 0f00 	cmp.w	r9, #0
 800b51e:	dd01      	ble.n	800b524 <_dtoa_r+0xa74>
 800b520:	9b06      	ldr	r3, [sp, #24]
 800b522:	3331      	adds	r3, #49	; 0x31
 800b524:	9a04      	ldr	r2, [sp, #16]
 800b526:	7013      	strb	r3, [r2, #0]
 800b528:	e776      	b.n	800b418 <_dtoa_r+0x968>
 800b52a:	4630      	mov	r0, r6
 800b52c:	e7b9      	b.n	800b4a2 <_dtoa_r+0x9f2>
 800b52e:	2201      	movs	r2, #1
 800b530:	e7e2      	b.n	800b4f8 <_dtoa_r+0xa48>
 800b532:	f1b9 0f00 	cmp.w	r9, #0
 800b536:	db06      	blt.n	800b546 <_dtoa_r+0xa96>
 800b538:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b53a:	ea41 0909 	orr.w	r9, r1, r9
 800b53e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b540:	ea59 0101 	orrs.w	r1, r9, r1
 800b544:	d120      	bne.n	800b588 <_dtoa_r+0xad8>
 800b546:	2a00      	cmp	r2, #0
 800b548:	ddec      	ble.n	800b524 <_dtoa_r+0xa74>
 800b54a:	4659      	mov	r1, fp
 800b54c:	2201      	movs	r2, #1
 800b54e:	4628      	mov	r0, r5
 800b550:	9308      	str	r3, [sp, #32]
 800b552:	f001 f8b3 	bl	800c6bc <__lshift>
 800b556:	4621      	mov	r1, r4
 800b558:	4683      	mov	fp, r0
 800b55a:	f001 f91f 	bl	800c79c <__mcmp>
 800b55e:	2800      	cmp	r0, #0
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	dc02      	bgt.n	800b56a <_dtoa_r+0xaba>
 800b564:	d1de      	bne.n	800b524 <_dtoa_r+0xa74>
 800b566:	07da      	lsls	r2, r3, #31
 800b568:	d5dc      	bpl.n	800b524 <_dtoa_r+0xa74>
 800b56a:	2b39      	cmp	r3, #57	; 0x39
 800b56c:	d1d8      	bne.n	800b520 <_dtoa_r+0xa70>
 800b56e:	2339      	movs	r3, #57	; 0x39
 800b570:	9a04      	ldr	r2, [sp, #16]
 800b572:	7013      	strb	r3, [r2, #0]
 800b574:	463b      	mov	r3, r7
 800b576:	461f      	mov	r7, r3
 800b578:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	2a39      	cmp	r2, #57	; 0x39
 800b580:	d050      	beq.n	800b624 <_dtoa_r+0xb74>
 800b582:	3201      	adds	r2, #1
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e747      	b.n	800b418 <_dtoa_r+0x968>
 800b588:	2a00      	cmp	r2, #0
 800b58a:	dd03      	ble.n	800b594 <_dtoa_r+0xae4>
 800b58c:	2b39      	cmp	r3, #57	; 0x39
 800b58e:	d0ee      	beq.n	800b56e <_dtoa_r+0xabe>
 800b590:	3301      	adds	r3, #1
 800b592:	e7c7      	b.n	800b524 <_dtoa_r+0xa74>
 800b594:	9a08      	ldr	r2, [sp, #32]
 800b596:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b598:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b59c:	428a      	cmp	r2, r1
 800b59e:	d02a      	beq.n	800b5f6 <_dtoa_r+0xb46>
 800b5a0:	4659      	mov	r1, fp
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	220a      	movs	r2, #10
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f000 fe92 	bl	800c2d0 <__multadd>
 800b5ac:	45b0      	cmp	r8, r6
 800b5ae:	4683      	mov	fp, r0
 800b5b0:	f04f 0300 	mov.w	r3, #0
 800b5b4:	f04f 020a 	mov.w	r2, #10
 800b5b8:	4641      	mov	r1, r8
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	d107      	bne.n	800b5ce <_dtoa_r+0xb1e>
 800b5be:	f000 fe87 	bl	800c2d0 <__multadd>
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	9b08      	ldr	r3, [sp, #32]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	9308      	str	r3, [sp, #32]
 800b5cc:	e775      	b.n	800b4ba <_dtoa_r+0xa0a>
 800b5ce:	f000 fe7f 	bl	800c2d0 <__multadd>
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4680      	mov	r8, r0
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	220a      	movs	r2, #10
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 fe78 	bl	800c2d0 <__multadd>
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	e7f0      	b.n	800b5c6 <_dtoa_r+0xb16>
 800b5e4:	f1b9 0f00 	cmp.w	r9, #0
 800b5e8:	bfcc      	ite	gt
 800b5ea:	464f      	movgt	r7, r9
 800b5ec:	2701      	movle	r7, #1
 800b5ee:	f04f 0800 	mov.w	r8, #0
 800b5f2:	9a03      	ldr	r2, [sp, #12]
 800b5f4:	4417      	add	r7, r2
 800b5f6:	4659      	mov	r1, fp
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	9308      	str	r3, [sp, #32]
 800b5fe:	f001 f85d 	bl	800c6bc <__lshift>
 800b602:	4621      	mov	r1, r4
 800b604:	4683      	mov	fp, r0
 800b606:	f001 f8c9 	bl	800c79c <__mcmp>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	dcb2      	bgt.n	800b574 <_dtoa_r+0xac4>
 800b60e:	d102      	bne.n	800b616 <_dtoa_r+0xb66>
 800b610:	9b08      	ldr	r3, [sp, #32]
 800b612:	07db      	lsls	r3, r3, #31
 800b614:	d4ae      	bmi.n	800b574 <_dtoa_r+0xac4>
 800b616:	463b      	mov	r3, r7
 800b618:	461f      	mov	r7, r3
 800b61a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b61e:	2a30      	cmp	r2, #48	; 0x30
 800b620:	d0fa      	beq.n	800b618 <_dtoa_r+0xb68>
 800b622:	e6f9      	b.n	800b418 <_dtoa_r+0x968>
 800b624:	9a03      	ldr	r2, [sp, #12]
 800b626:	429a      	cmp	r2, r3
 800b628:	d1a5      	bne.n	800b576 <_dtoa_r+0xac6>
 800b62a:	2331      	movs	r3, #49	; 0x31
 800b62c:	f10a 0a01 	add.w	sl, sl, #1
 800b630:	e779      	b.n	800b526 <_dtoa_r+0xa76>
 800b632:	4b14      	ldr	r3, [pc, #80]	; (800b684 <_dtoa_r+0xbd4>)
 800b634:	f7ff baa8 	b.w	800ab88 <_dtoa_r+0xd8>
 800b638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f47f aa81 	bne.w	800ab42 <_dtoa_r+0x92>
 800b640:	4b11      	ldr	r3, [pc, #68]	; (800b688 <_dtoa_r+0xbd8>)
 800b642:	f7ff baa1 	b.w	800ab88 <_dtoa_r+0xd8>
 800b646:	f1b9 0f00 	cmp.w	r9, #0
 800b64a:	dc03      	bgt.n	800b654 <_dtoa_r+0xba4>
 800b64c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b64e:	2b02      	cmp	r3, #2
 800b650:	f73f aecb 	bgt.w	800b3ea <_dtoa_r+0x93a>
 800b654:	9f03      	ldr	r7, [sp, #12]
 800b656:	4621      	mov	r1, r4
 800b658:	4658      	mov	r0, fp
 800b65a:	f7ff f99d 	bl	800a998 <quorem>
 800b65e:	9a03      	ldr	r2, [sp, #12]
 800b660:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b664:	f807 3b01 	strb.w	r3, [r7], #1
 800b668:	1aba      	subs	r2, r7, r2
 800b66a:	4591      	cmp	r9, r2
 800b66c:	ddba      	ble.n	800b5e4 <_dtoa_r+0xb34>
 800b66e:	4659      	mov	r1, fp
 800b670:	2300      	movs	r3, #0
 800b672:	220a      	movs	r2, #10
 800b674:	4628      	mov	r0, r5
 800b676:	f000 fe2b 	bl	800c2d0 <__multadd>
 800b67a:	4683      	mov	fp, r0
 800b67c:	e7eb      	b.n	800b656 <_dtoa_r+0xba6>
 800b67e:	bf00      	nop
 800b680:	0800da21 	.word	0x0800da21
 800b684:	0800d788 	.word	0x0800d788
 800b688:	0800d9b9 	.word	0x0800d9b9

0800b68c <__sflush_r>:
 800b68c:	898a      	ldrh	r2, [r1, #12]
 800b68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b690:	4605      	mov	r5, r0
 800b692:	0710      	lsls	r0, r2, #28
 800b694:	460c      	mov	r4, r1
 800b696:	d457      	bmi.n	800b748 <__sflush_r+0xbc>
 800b698:	684b      	ldr	r3, [r1, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dc04      	bgt.n	800b6a8 <__sflush_r+0x1c>
 800b69e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	dc01      	bgt.n	800b6a8 <__sflush_r+0x1c>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d0fa      	beq.n	800b6a4 <__sflush_r+0x18>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6b4:	682f      	ldr	r7, [r5, #0]
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	d032      	beq.n	800b720 <__sflush_r+0x94>
 800b6ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	075a      	lsls	r2, r3, #29
 800b6c0:	d505      	bpl.n	800b6ce <__sflush_r+0x42>
 800b6c2:	6863      	ldr	r3, [r4, #4]
 800b6c4:	1ac0      	subs	r0, r0, r3
 800b6c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6c8:	b10b      	cbz	r3, 800b6ce <__sflush_r+0x42>
 800b6ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6cc:	1ac0      	subs	r0, r0, r3
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	6a21      	ldr	r1, [r4, #32]
 800b6d8:	47b0      	blx	r6
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	d106      	bne.n	800b6ee <__sflush_r+0x62>
 800b6e0:	6829      	ldr	r1, [r5, #0]
 800b6e2:	291d      	cmp	r1, #29
 800b6e4:	d82c      	bhi.n	800b740 <__sflush_r+0xb4>
 800b6e6:	4a29      	ldr	r2, [pc, #164]	; (800b78c <__sflush_r+0x100>)
 800b6e8:	40ca      	lsrs	r2, r1
 800b6ea:	07d6      	lsls	r6, r2, #31
 800b6ec:	d528      	bpl.n	800b740 <__sflush_r+0xb4>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	6062      	str	r2, [r4, #4]
 800b6f2:	6922      	ldr	r2, [r4, #16]
 800b6f4:	04d9      	lsls	r1, r3, #19
 800b6f6:	6022      	str	r2, [r4, #0]
 800b6f8:	d504      	bpl.n	800b704 <__sflush_r+0x78>
 800b6fa:	1c42      	adds	r2, r0, #1
 800b6fc:	d101      	bne.n	800b702 <__sflush_r+0x76>
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	b903      	cbnz	r3, 800b704 <__sflush_r+0x78>
 800b702:	6560      	str	r0, [r4, #84]	; 0x54
 800b704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b706:	602f      	str	r7, [r5, #0]
 800b708:	2900      	cmp	r1, #0
 800b70a:	d0cb      	beq.n	800b6a4 <__sflush_r+0x18>
 800b70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b710:	4299      	cmp	r1, r3
 800b712:	d002      	beq.n	800b71a <__sflush_r+0x8e>
 800b714:	4628      	mov	r0, r5
 800b716:	f001 fa45 	bl	800cba4 <_free_r>
 800b71a:	2000      	movs	r0, #0
 800b71c:	6360      	str	r0, [r4, #52]	; 0x34
 800b71e:	e7c2      	b.n	800b6a6 <__sflush_r+0x1a>
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	2301      	movs	r3, #1
 800b724:	4628      	mov	r0, r5
 800b726:	47b0      	blx	r6
 800b728:	1c41      	adds	r1, r0, #1
 800b72a:	d1c7      	bne.n	800b6bc <__sflush_r+0x30>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0c4      	beq.n	800b6bc <__sflush_r+0x30>
 800b732:	2b1d      	cmp	r3, #29
 800b734:	d001      	beq.n	800b73a <__sflush_r+0xae>
 800b736:	2b16      	cmp	r3, #22
 800b738:	d101      	bne.n	800b73e <__sflush_r+0xb2>
 800b73a:	602f      	str	r7, [r5, #0]
 800b73c:	e7b2      	b.n	800b6a4 <__sflush_r+0x18>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	e7ae      	b.n	800b6a6 <__sflush_r+0x1a>
 800b748:	690f      	ldr	r7, [r1, #16]
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	d0aa      	beq.n	800b6a4 <__sflush_r+0x18>
 800b74e:	0793      	lsls	r3, r2, #30
 800b750:	bf18      	it	ne
 800b752:	2300      	movne	r3, #0
 800b754:	680e      	ldr	r6, [r1, #0]
 800b756:	bf08      	it	eq
 800b758:	694b      	ldreq	r3, [r1, #20]
 800b75a:	1bf6      	subs	r6, r6, r7
 800b75c:	600f      	str	r7, [r1, #0]
 800b75e:	608b      	str	r3, [r1, #8]
 800b760:	2e00      	cmp	r6, #0
 800b762:	dd9f      	ble.n	800b6a4 <__sflush_r+0x18>
 800b764:	4633      	mov	r3, r6
 800b766:	463a      	mov	r2, r7
 800b768:	4628      	mov	r0, r5
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b770:	47e0      	blx	ip
 800b772:	2800      	cmp	r0, #0
 800b774:	dc06      	bgt.n	800b784 <__sflush_r+0xf8>
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f04f 30ff 	mov.w	r0, #4294967295
 800b77c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	e790      	b.n	800b6a6 <__sflush_r+0x1a>
 800b784:	4407      	add	r7, r0
 800b786:	1a36      	subs	r6, r6, r0
 800b788:	e7ea      	b.n	800b760 <__sflush_r+0xd4>
 800b78a:	bf00      	nop
 800b78c:	20400001 	.word	0x20400001

0800b790 <_fflush_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	690b      	ldr	r3, [r1, #16]
 800b794:	4605      	mov	r5, r0
 800b796:	460c      	mov	r4, r1
 800b798:	b913      	cbnz	r3, 800b7a0 <_fflush_r+0x10>
 800b79a:	2500      	movs	r5, #0
 800b79c:	4628      	mov	r0, r5
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	b118      	cbz	r0, 800b7aa <_fflush_r+0x1a>
 800b7a2:	6983      	ldr	r3, [r0, #24]
 800b7a4:	b90b      	cbnz	r3, 800b7aa <_fflush_r+0x1a>
 800b7a6:	f000 f887 	bl	800b8b8 <__sinit>
 800b7aa:	4b14      	ldr	r3, [pc, #80]	; (800b7fc <_fflush_r+0x6c>)
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	d11b      	bne.n	800b7e8 <_fflush_r+0x58>
 800b7b0:	686c      	ldr	r4, [r5, #4]
 800b7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0ef      	beq.n	800b79a <_fflush_r+0xa>
 800b7ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7bc:	07d0      	lsls	r0, r2, #31
 800b7be:	d404      	bmi.n	800b7ca <_fflush_r+0x3a>
 800b7c0:	0599      	lsls	r1, r3, #22
 800b7c2:	d402      	bmi.n	800b7ca <_fflush_r+0x3a>
 800b7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c6:	f000 fc92 	bl	800c0ee <__retarget_lock_acquire_recursive>
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	f7ff ff5d 	bl	800b68c <__sflush_r>
 800b7d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	07da      	lsls	r2, r3, #31
 800b7d8:	d4e0      	bmi.n	800b79c <_fflush_r+0xc>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	059b      	lsls	r3, r3, #22
 800b7de:	d4dd      	bmi.n	800b79c <_fflush_r+0xc>
 800b7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7e2:	f000 fc85 	bl	800c0f0 <__retarget_lock_release_recursive>
 800b7e6:	e7d9      	b.n	800b79c <_fflush_r+0xc>
 800b7e8:	4b05      	ldr	r3, [pc, #20]	; (800b800 <_fflush_r+0x70>)
 800b7ea:	429c      	cmp	r4, r3
 800b7ec:	d101      	bne.n	800b7f2 <_fflush_r+0x62>
 800b7ee:	68ac      	ldr	r4, [r5, #8]
 800b7f0:	e7df      	b.n	800b7b2 <_fflush_r+0x22>
 800b7f2:	4b04      	ldr	r3, [pc, #16]	; (800b804 <_fflush_r+0x74>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	bf08      	it	eq
 800b7f8:	68ec      	ldreq	r4, [r5, #12]
 800b7fa:	e7da      	b.n	800b7b2 <_fflush_r+0x22>
 800b7fc:	0800da54 	.word	0x0800da54
 800b800:	0800da74 	.word	0x0800da74
 800b804:	0800da34 	.word	0x0800da34

0800b808 <std>:
 800b808:	2300      	movs	r3, #0
 800b80a:	b510      	push	{r4, lr}
 800b80c:	4604      	mov	r4, r0
 800b80e:	e9c0 3300 	strd	r3, r3, [r0]
 800b812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b816:	6083      	str	r3, [r0, #8]
 800b818:	8181      	strh	r1, [r0, #12]
 800b81a:	6643      	str	r3, [r0, #100]	; 0x64
 800b81c:	81c2      	strh	r2, [r0, #14]
 800b81e:	6183      	str	r3, [r0, #24]
 800b820:	4619      	mov	r1, r3
 800b822:	2208      	movs	r2, #8
 800b824:	305c      	adds	r0, #92	; 0x5c
 800b826:	f7fd f9a7 	bl	8008b78 <memset>
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <std+0x38>)
 800b82c:	6224      	str	r4, [r4, #32]
 800b82e:	6263      	str	r3, [r4, #36]	; 0x24
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <std+0x3c>)
 800b832:	62a3      	str	r3, [r4, #40]	; 0x28
 800b834:	4b04      	ldr	r3, [pc, #16]	; (800b848 <std+0x40>)
 800b836:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b838:	4b04      	ldr	r3, [pc, #16]	; (800b84c <std+0x44>)
 800b83a:	6323      	str	r3, [r4, #48]	; 0x30
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	bf00      	nop
 800b840:	0800d381 	.word	0x0800d381
 800b844:	0800d3a3 	.word	0x0800d3a3
 800b848:	0800d3db 	.word	0x0800d3db
 800b84c:	0800d3ff 	.word	0x0800d3ff

0800b850 <_cleanup_r>:
 800b850:	4901      	ldr	r1, [pc, #4]	; (800b858 <_cleanup_r+0x8>)
 800b852:	f000 b8c1 	b.w	800b9d8 <_fwalk_reent>
 800b856:	bf00      	nop
 800b858:	0800b791 	.word	0x0800b791

0800b85c <__sfmoreglue>:
 800b85c:	2268      	movs	r2, #104	; 0x68
 800b85e:	b570      	push	{r4, r5, r6, lr}
 800b860:	1e4d      	subs	r5, r1, #1
 800b862:	4355      	muls	r5, r2
 800b864:	460e      	mov	r6, r1
 800b866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b86a:	f001 fa03 	bl	800cc74 <_malloc_r>
 800b86e:	4604      	mov	r4, r0
 800b870:	b140      	cbz	r0, 800b884 <__sfmoreglue+0x28>
 800b872:	2100      	movs	r1, #0
 800b874:	e9c0 1600 	strd	r1, r6, [r0]
 800b878:	300c      	adds	r0, #12
 800b87a:	60a0      	str	r0, [r4, #8]
 800b87c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b880:	f7fd f97a 	bl	8008b78 <memset>
 800b884:	4620      	mov	r0, r4
 800b886:	bd70      	pop	{r4, r5, r6, pc}

0800b888 <__sfp_lock_acquire>:
 800b888:	4801      	ldr	r0, [pc, #4]	; (800b890 <__sfp_lock_acquire+0x8>)
 800b88a:	f000 bc30 	b.w	800c0ee <__retarget_lock_acquire_recursive>
 800b88e:	bf00      	nop
 800b890:	20000c71 	.word	0x20000c71

0800b894 <__sfp_lock_release>:
 800b894:	4801      	ldr	r0, [pc, #4]	; (800b89c <__sfp_lock_release+0x8>)
 800b896:	f000 bc2b 	b.w	800c0f0 <__retarget_lock_release_recursive>
 800b89a:	bf00      	nop
 800b89c:	20000c71 	.word	0x20000c71

0800b8a0 <__sinit_lock_acquire>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	; (800b8a8 <__sinit_lock_acquire+0x8>)
 800b8a2:	f000 bc24 	b.w	800c0ee <__retarget_lock_acquire_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	20000c72 	.word	0x20000c72

0800b8ac <__sinit_lock_release>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	; (800b8b4 <__sinit_lock_release+0x8>)
 800b8ae:	f000 bc1f 	b.w	800c0f0 <__retarget_lock_release_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	20000c72 	.word	0x20000c72

0800b8b8 <__sinit>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7ff fff0 	bl	800b8a0 <__sinit_lock_acquire>
 800b8c0:	69a3      	ldr	r3, [r4, #24]
 800b8c2:	b11b      	cbz	r3, 800b8cc <__sinit+0x14>
 800b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c8:	f7ff bff0 	b.w	800b8ac <__sinit_lock_release>
 800b8cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <__sinit+0x68>)
 800b8d4:	4a13      	ldr	r2, [pc, #76]	; (800b924 <__sinit+0x6c>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	bf08      	it	eq
 800b8de:	2301      	moveq	r3, #1
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	bf08      	it	eq
 800b8e4:	61a3      	streq	r3, [r4, #24]
 800b8e6:	f000 f81f 	bl	800b928 <__sfp>
 800b8ea:	6060      	str	r0, [r4, #4]
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f81b 	bl	800b928 <__sfp>
 800b8f2:	60a0      	str	r0, [r4, #8]
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 f817 	bl	800b928 <__sfp>
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2104      	movs	r1, #4
 800b8fe:	60e0      	str	r0, [r4, #12]
 800b900:	6860      	ldr	r0, [r4, #4]
 800b902:	f7ff ff81 	bl	800b808 <std>
 800b906:	2201      	movs	r2, #1
 800b908:	2109      	movs	r1, #9
 800b90a:	68a0      	ldr	r0, [r4, #8]
 800b90c:	f7ff ff7c 	bl	800b808 <std>
 800b910:	2202      	movs	r2, #2
 800b912:	2112      	movs	r1, #18
 800b914:	68e0      	ldr	r0, [r4, #12]
 800b916:	f7ff ff77 	bl	800b808 <std>
 800b91a:	2301      	movs	r3, #1
 800b91c:	61a3      	str	r3, [r4, #24]
 800b91e:	e7d1      	b.n	800b8c4 <__sinit+0xc>
 800b920:	0800d774 	.word	0x0800d774
 800b924:	0800b851 	.word	0x0800b851

0800b928 <__sfp>:
 800b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92a:	4607      	mov	r7, r0
 800b92c:	f7ff ffac 	bl	800b888 <__sfp_lock_acquire>
 800b930:	4b1e      	ldr	r3, [pc, #120]	; (800b9ac <__sfp+0x84>)
 800b932:	681e      	ldr	r6, [r3, #0]
 800b934:	69b3      	ldr	r3, [r6, #24]
 800b936:	b913      	cbnz	r3, 800b93e <__sfp+0x16>
 800b938:	4630      	mov	r0, r6
 800b93a:	f7ff ffbd 	bl	800b8b8 <__sinit>
 800b93e:	3648      	adds	r6, #72	; 0x48
 800b940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b944:	3b01      	subs	r3, #1
 800b946:	d503      	bpl.n	800b950 <__sfp+0x28>
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	b30b      	cbz	r3, 800b990 <__sfp+0x68>
 800b94c:	6836      	ldr	r6, [r6, #0]
 800b94e:	e7f7      	b.n	800b940 <__sfp+0x18>
 800b950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b954:	b9d5      	cbnz	r5, 800b98c <__sfp+0x64>
 800b956:	4b16      	ldr	r3, [pc, #88]	; (800b9b0 <__sfp+0x88>)
 800b958:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b95c:	60e3      	str	r3, [r4, #12]
 800b95e:	6665      	str	r5, [r4, #100]	; 0x64
 800b960:	f000 fbc4 	bl	800c0ec <__retarget_lock_init_recursive>
 800b964:	f7ff ff96 	bl	800b894 <__sfp_lock_release>
 800b968:	2208      	movs	r2, #8
 800b96a:	4629      	mov	r1, r5
 800b96c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b974:	6025      	str	r5, [r4, #0]
 800b976:	61a5      	str	r5, [r4, #24]
 800b978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b97c:	f7fd f8fc 	bl	8008b78 <memset>
 800b980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b988:	4620      	mov	r0, r4
 800b98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b98c:	3468      	adds	r4, #104	; 0x68
 800b98e:	e7d9      	b.n	800b944 <__sfp+0x1c>
 800b990:	2104      	movs	r1, #4
 800b992:	4638      	mov	r0, r7
 800b994:	f7ff ff62 	bl	800b85c <__sfmoreglue>
 800b998:	4604      	mov	r4, r0
 800b99a:	6030      	str	r0, [r6, #0]
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d1d5      	bne.n	800b94c <__sfp+0x24>
 800b9a0:	f7ff ff78 	bl	800b894 <__sfp_lock_release>
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	e7ee      	b.n	800b988 <__sfp+0x60>
 800b9aa:	bf00      	nop
 800b9ac:	0800d774 	.word	0x0800d774
 800b9b0:	ffff0001 	.word	0xffff0001

0800b9b4 <fiprintf>:
 800b9b4:	b40e      	push	{r1, r2, r3}
 800b9b6:	b503      	push	{r0, r1, lr}
 800b9b8:	4601      	mov	r1, r0
 800b9ba:	ab03      	add	r3, sp, #12
 800b9bc:	4805      	ldr	r0, [pc, #20]	; (800b9d4 <fiprintf+0x20>)
 800b9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c2:	6800      	ldr	r0, [r0, #0]
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	f001 fb4d 	bl	800d064 <_vfiprintf_r>
 800b9ca:	b002      	add	sp, #8
 800b9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9d0:	b003      	add	sp, #12
 800b9d2:	4770      	bx	lr
 800b9d4:	20000610 	.word	0x20000610

0800b9d8 <_fwalk_reent>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	4606      	mov	r6, r0
 800b9de:	4688      	mov	r8, r1
 800b9e0:	2700      	movs	r7, #0
 800b9e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b9ee:	d505      	bpl.n	800b9fc <_fwalk_reent+0x24>
 800b9f0:	6824      	ldr	r4, [r4, #0]
 800b9f2:	2c00      	cmp	r4, #0
 800b9f4:	d1f7      	bne.n	800b9e6 <_fwalk_reent+0xe>
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fc:	89ab      	ldrh	r3, [r5, #12]
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d907      	bls.n	800ba12 <_fwalk_reent+0x3a>
 800ba02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba06:	3301      	adds	r3, #1
 800ba08:	d003      	beq.n	800ba12 <_fwalk_reent+0x3a>
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	47c0      	blx	r8
 800ba10:	4307      	orrs	r7, r0
 800ba12:	3568      	adds	r5, #104	; 0x68
 800ba14:	e7e9      	b.n	800b9ea <_fwalk_reent+0x12>

0800ba16 <rshift>:
 800ba16:	6903      	ldr	r3, [r0, #16]
 800ba18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba20:	f100 0414 	add.w	r4, r0, #20
 800ba24:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba28:	dd46      	ble.n	800bab8 <rshift+0xa2>
 800ba2a:	f011 011f 	ands.w	r1, r1, #31
 800ba2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba36:	d10c      	bne.n	800ba52 <rshift+0x3c>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f100 0710 	add.w	r7, r0, #16
 800ba3e:	42b1      	cmp	r1, r6
 800ba40:	d335      	bcc.n	800baae <rshift+0x98>
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	1eea      	subs	r2, r5, #3
 800ba48:	4296      	cmp	r6, r2
 800ba4a:	bf38      	it	cc
 800ba4c:	2300      	movcc	r3, #0
 800ba4e:	4423      	add	r3, r4
 800ba50:	e015      	b.n	800ba7e <rshift+0x68>
 800ba52:	46a1      	mov	r9, r4
 800ba54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba58:	f1c1 0820 	rsb	r8, r1, #32
 800ba5c:	40cf      	lsrs	r7, r1
 800ba5e:	f105 0e04 	add.w	lr, r5, #4
 800ba62:	4576      	cmp	r6, lr
 800ba64:	46f4      	mov	ip, lr
 800ba66:	d816      	bhi.n	800ba96 <rshift+0x80>
 800ba68:	1a9a      	subs	r2, r3, r2
 800ba6a:	0092      	lsls	r2, r2, #2
 800ba6c:	3a04      	subs	r2, #4
 800ba6e:	3501      	adds	r5, #1
 800ba70:	42ae      	cmp	r6, r5
 800ba72:	bf38      	it	cc
 800ba74:	2200      	movcc	r2, #0
 800ba76:	18a3      	adds	r3, r4, r2
 800ba78:	50a7      	str	r7, [r4, r2]
 800ba7a:	b107      	cbz	r7, 800ba7e <rshift+0x68>
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	42a3      	cmp	r3, r4
 800ba80:	eba3 0204 	sub.w	r2, r3, r4
 800ba84:	bf08      	it	eq
 800ba86:	2300      	moveq	r3, #0
 800ba88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba8c:	6102      	str	r2, [r0, #16]
 800ba8e:	bf08      	it	eq
 800ba90:	6143      	streq	r3, [r0, #20]
 800ba92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba96:	f8dc c000 	ldr.w	ip, [ip]
 800ba9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba9e:	ea4c 0707 	orr.w	r7, ip, r7
 800baa2:	f849 7b04 	str.w	r7, [r9], #4
 800baa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800baaa:	40cf      	lsrs	r7, r1
 800baac:	e7d9      	b.n	800ba62 <rshift+0x4c>
 800baae:	f851 cb04 	ldr.w	ip, [r1], #4
 800bab2:	f847 cf04 	str.w	ip, [r7, #4]!
 800bab6:	e7c2      	b.n	800ba3e <rshift+0x28>
 800bab8:	4623      	mov	r3, r4
 800baba:	e7e0      	b.n	800ba7e <rshift+0x68>

0800babc <__hexdig_fun>:
 800babc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bac0:	2b09      	cmp	r3, #9
 800bac2:	d802      	bhi.n	800baca <__hexdig_fun+0xe>
 800bac4:	3820      	subs	r0, #32
 800bac6:	b2c0      	uxtb	r0, r0
 800bac8:	4770      	bx	lr
 800baca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d801      	bhi.n	800bad6 <__hexdig_fun+0x1a>
 800bad2:	3847      	subs	r0, #71	; 0x47
 800bad4:	e7f7      	b.n	800bac6 <__hexdig_fun+0xa>
 800bad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bada:	2b05      	cmp	r3, #5
 800badc:	d801      	bhi.n	800bae2 <__hexdig_fun+0x26>
 800bade:	3827      	subs	r0, #39	; 0x27
 800bae0:	e7f1      	b.n	800bac6 <__hexdig_fun+0xa>
 800bae2:	2000      	movs	r0, #0
 800bae4:	4770      	bx	lr
	...

0800bae8 <__gethex>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	b08b      	sub	sp, #44	; 0x2c
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	4bb2      	ldr	r3, [pc, #712]	; (800bdbc <__gethex+0x2d4>)
 800baf2:	9002      	str	r0, [sp, #8]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	468b      	mov	fp, r1
 800baf8:	4618      	mov	r0, r3
 800bafa:	4690      	mov	r8, r2
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	f7f4 fb9d 	bl	800023c <strlen>
 800bb02:	4682      	mov	sl, r0
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	f8db 2000 	ldr.w	r2, [fp]
 800bb0a:	4403      	add	r3, r0
 800bb0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb10:	9306      	str	r3, [sp, #24]
 800bb12:	1c93      	adds	r3, r2, #2
 800bb14:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb18:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb1c:	32fe      	adds	r2, #254	; 0xfe
 800bb1e:	18d1      	adds	r1, r2, r3
 800bb20:	461f      	mov	r7, r3
 800bb22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb26:	9101      	str	r1, [sp, #4]
 800bb28:	2830      	cmp	r0, #48	; 0x30
 800bb2a:	d0f8      	beq.n	800bb1e <__gethex+0x36>
 800bb2c:	f7ff ffc6 	bl	800babc <__hexdig_fun>
 800bb30:	4604      	mov	r4, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d13a      	bne.n	800bbac <__gethex+0xc4>
 800bb36:	4652      	mov	r2, sl
 800bb38:	4638      	mov	r0, r7
 800bb3a:	9903      	ldr	r1, [sp, #12]
 800bb3c:	f001 fc63 	bl	800d406 <strncmp>
 800bb40:	4605      	mov	r5, r0
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d166      	bne.n	800bc14 <__gethex+0x12c>
 800bb46:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bb4a:	eb07 060a 	add.w	r6, r7, sl
 800bb4e:	f7ff ffb5 	bl	800babc <__hexdig_fun>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d060      	beq.n	800bc18 <__gethex+0x130>
 800bb56:	4633      	mov	r3, r6
 800bb58:	7818      	ldrb	r0, [r3, #0]
 800bb5a:	461f      	mov	r7, r3
 800bb5c:	2830      	cmp	r0, #48	; 0x30
 800bb5e:	f103 0301 	add.w	r3, r3, #1
 800bb62:	d0f9      	beq.n	800bb58 <__gethex+0x70>
 800bb64:	f7ff ffaa 	bl	800babc <__hexdig_fun>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	fab0 f480 	clz	r4, r0
 800bb6e:	4635      	mov	r5, r6
 800bb70:	0964      	lsrs	r4, r4, #5
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	463a      	mov	r2, r7
 800bb76:	4616      	mov	r6, r2
 800bb78:	7830      	ldrb	r0, [r6, #0]
 800bb7a:	3201      	adds	r2, #1
 800bb7c:	f7ff ff9e 	bl	800babc <__hexdig_fun>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d1f8      	bne.n	800bb76 <__gethex+0x8e>
 800bb84:	4652      	mov	r2, sl
 800bb86:	4630      	mov	r0, r6
 800bb88:	9903      	ldr	r1, [sp, #12]
 800bb8a:	f001 fc3c 	bl	800d406 <strncmp>
 800bb8e:	b980      	cbnz	r0, 800bbb2 <__gethex+0xca>
 800bb90:	b94d      	cbnz	r5, 800bba6 <__gethex+0xbe>
 800bb92:	eb06 050a 	add.w	r5, r6, sl
 800bb96:	462a      	mov	r2, r5
 800bb98:	4616      	mov	r6, r2
 800bb9a:	7830      	ldrb	r0, [r6, #0]
 800bb9c:	3201      	adds	r2, #1
 800bb9e:	f7ff ff8d 	bl	800babc <__hexdig_fun>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d1f8      	bne.n	800bb98 <__gethex+0xb0>
 800bba6:	1bad      	subs	r5, r5, r6
 800bba8:	00ad      	lsls	r5, r5, #2
 800bbaa:	e004      	b.n	800bbb6 <__gethex+0xce>
 800bbac:	2400      	movs	r4, #0
 800bbae:	4625      	mov	r5, r4
 800bbb0:	e7e0      	b.n	800bb74 <__gethex+0x8c>
 800bbb2:	2d00      	cmp	r5, #0
 800bbb4:	d1f7      	bne.n	800bba6 <__gethex+0xbe>
 800bbb6:	7833      	ldrb	r3, [r6, #0]
 800bbb8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbbc:	2b50      	cmp	r3, #80	; 0x50
 800bbbe:	d139      	bne.n	800bc34 <__gethex+0x14c>
 800bbc0:	7873      	ldrb	r3, [r6, #1]
 800bbc2:	2b2b      	cmp	r3, #43	; 0x2b
 800bbc4:	d02a      	beq.n	800bc1c <__gethex+0x134>
 800bbc6:	2b2d      	cmp	r3, #45	; 0x2d
 800bbc8:	d02c      	beq.n	800bc24 <__gethex+0x13c>
 800bbca:	f04f 0900 	mov.w	r9, #0
 800bbce:	1c71      	adds	r1, r6, #1
 800bbd0:	7808      	ldrb	r0, [r1, #0]
 800bbd2:	f7ff ff73 	bl	800babc <__hexdig_fun>
 800bbd6:	1e43      	subs	r3, r0, #1
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b18      	cmp	r3, #24
 800bbdc:	d82a      	bhi.n	800bc34 <__gethex+0x14c>
 800bbde:	f1a0 0210 	sub.w	r2, r0, #16
 800bbe2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbe6:	f7ff ff69 	bl	800babc <__hexdig_fun>
 800bbea:	1e43      	subs	r3, r0, #1
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b18      	cmp	r3, #24
 800bbf0:	d91b      	bls.n	800bc2a <__gethex+0x142>
 800bbf2:	f1b9 0f00 	cmp.w	r9, #0
 800bbf6:	d000      	beq.n	800bbfa <__gethex+0x112>
 800bbf8:	4252      	negs	r2, r2
 800bbfa:	4415      	add	r5, r2
 800bbfc:	f8cb 1000 	str.w	r1, [fp]
 800bc00:	b1d4      	cbz	r4, 800bc38 <__gethex+0x150>
 800bc02:	9b01      	ldr	r3, [sp, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bf14      	ite	ne
 800bc08:	2700      	movne	r7, #0
 800bc0a:	2706      	moveq	r7, #6
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	b00b      	add	sp, #44	; 0x2c
 800bc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	463e      	mov	r6, r7
 800bc16:	4625      	mov	r5, r4
 800bc18:	2401      	movs	r4, #1
 800bc1a:	e7cc      	b.n	800bbb6 <__gethex+0xce>
 800bc1c:	f04f 0900 	mov.w	r9, #0
 800bc20:	1cb1      	adds	r1, r6, #2
 800bc22:	e7d5      	b.n	800bbd0 <__gethex+0xe8>
 800bc24:	f04f 0901 	mov.w	r9, #1
 800bc28:	e7fa      	b.n	800bc20 <__gethex+0x138>
 800bc2a:	230a      	movs	r3, #10
 800bc2c:	fb03 0202 	mla	r2, r3, r2, r0
 800bc30:	3a10      	subs	r2, #16
 800bc32:	e7d6      	b.n	800bbe2 <__gethex+0xfa>
 800bc34:	4631      	mov	r1, r6
 800bc36:	e7e1      	b.n	800bbfc <__gethex+0x114>
 800bc38:	4621      	mov	r1, r4
 800bc3a:	1bf3      	subs	r3, r6, r7
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	2b07      	cmp	r3, #7
 800bc40:	dc0a      	bgt.n	800bc58 <__gethex+0x170>
 800bc42:	9802      	ldr	r0, [sp, #8]
 800bc44:	f000 fae2 	bl	800c20c <_Balloc>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	b940      	cbnz	r0, 800bc5e <__gethex+0x176>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	21de      	movs	r1, #222	; 0xde
 800bc50:	4b5b      	ldr	r3, [pc, #364]	; (800bdc0 <__gethex+0x2d8>)
 800bc52:	485c      	ldr	r0, [pc, #368]	; (800bdc4 <__gethex+0x2dc>)
 800bc54:	f7fe fe82 	bl	800a95c <__assert_func>
 800bc58:	3101      	adds	r1, #1
 800bc5a:	105b      	asrs	r3, r3, #1
 800bc5c:	e7ef      	b.n	800bc3e <__gethex+0x156>
 800bc5e:	f04f 0b00 	mov.w	fp, #0
 800bc62:	f100 0914 	add.w	r9, r0, #20
 800bc66:	f1ca 0301 	rsb	r3, sl, #1
 800bc6a:	f8cd 9010 	str.w	r9, [sp, #16]
 800bc6e:	f8cd b004 	str.w	fp, [sp, #4]
 800bc72:	9308      	str	r3, [sp, #32]
 800bc74:	42b7      	cmp	r7, r6
 800bc76:	d33f      	bcc.n	800bcf8 <__gethex+0x210>
 800bc78:	9f04      	ldr	r7, [sp, #16]
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	f847 3b04 	str.w	r3, [r7], #4
 800bc80:	eba7 0709 	sub.w	r7, r7, r9
 800bc84:	10bf      	asrs	r7, r7, #2
 800bc86:	6127      	str	r7, [r4, #16]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f000 fbb1 	bl	800c3f0 <__hi0bits>
 800bc8e:	017f      	lsls	r7, r7, #5
 800bc90:	f8d8 6000 	ldr.w	r6, [r8]
 800bc94:	1a3f      	subs	r7, r7, r0
 800bc96:	42b7      	cmp	r7, r6
 800bc98:	dd62      	ble.n	800bd60 <__gethex+0x278>
 800bc9a:	1bbf      	subs	r7, r7, r6
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 ff4b 	bl	800cb3a <__any_on>
 800bca4:	4682      	mov	sl, r0
 800bca6:	b1a8      	cbz	r0, 800bcd4 <__gethex+0x1ec>
 800bca8:	f04f 0a01 	mov.w	sl, #1
 800bcac:	1e7b      	subs	r3, r7, #1
 800bcae:	1159      	asrs	r1, r3, #5
 800bcb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bcb4:	f003 021f 	and.w	r2, r3, #31
 800bcb8:	fa0a f202 	lsl.w	r2, sl, r2
 800bcbc:	420a      	tst	r2, r1
 800bcbe:	d009      	beq.n	800bcd4 <__gethex+0x1ec>
 800bcc0:	4553      	cmp	r3, sl
 800bcc2:	dd05      	ble.n	800bcd0 <__gethex+0x1e8>
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	1eb9      	subs	r1, r7, #2
 800bcc8:	f000 ff37 	bl	800cb3a <__any_on>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d144      	bne.n	800bd5a <__gethex+0x272>
 800bcd0:	f04f 0a02 	mov.w	sl, #2
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7ff fe9d 	bl	800ba16 <rshift>
 800bcdc:	443d      	add	r5, r7
 800bcde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	da4a      	bge.n	800bd7c <__gethex+0x294>
 800bce6:	4621      	mov	r1, r4
 800bce8:	9802      	ldr	r0, [sp, #8]
 800bcea:	f000 facf 	bl	800c28c <_Bfree>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcf2:	27a3      	movs	r7, #163	; 0xa3
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	e789      	b.n	800bc0c <__gethex+0x124>
 800bcf8:	1e73      	subs	r3, r6, #1
 800bcfa:	9a06      	ldr	r2, [sp, #24]
 800bcfc:	9307      	str	r3, [sp, #28]
 800bcfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d019      	beq.n	800bd3a <__gethex+0x252>
 800bd06:	f1bb 0f20 	cmp.w	fp, #32
 800bd0a:	d107      	bne.n	800bd1c <__gethex+0x234>
 800bd0c:	9b04      	ldr	r3, [sp, #16]
 800bd0e:	9a01      	ldr	r2, [sp, #4]
 800bd10:	f843 2b04 	str.w	r2, [r3], #4
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	2300      	movs	r3, #0
 800bd18:	469b      	mov	fp, r3
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd20:	f7ff fecc 	bl	800babc <__hexdig_fun>
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	f000 000f 	and.w	r0, r0, #15
 800bd2a:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd2e:	4303      	orrs	r3, r0
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	f10b 0b04 	add.w	fp, fp, #4
 800bd36:	9b07      	ldr	r3, [sp, #28]
 800bd38:	e00d      	b.n	800bd56 <__gethex+0x26e>
 800bd3a:	9a08      	ldr	r2, [sp, #32]
 800bd3c:	1e73      	subs	r3, r6, #1
 800bd3e:	4413      	add	r3, r2
 800bd40:	42bb      	cmp	r3, r7
 800bd42:	d3e0      	bcc.n	800bd06 <__gethex+0x21e>
 800bd44:	4618      	mov	r0, r3
 800bd46:	4652      	mov	r2, sl
 800bd48:	9903      	ldr	r1, [sp, #12]
 800bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4c:	f001 fb5b 	bl	800d406 <strncmp>
 800bd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d1d7      	bne.n	800bd06 <__gethex+0x21e>
 800bd56:	461e      	mov	r6, r3
 800bd58:	e78c      	b.n	800bc74 <__gethex+0x18c>
 800bd5a:	f04f 0a03 	mov.w	sl, #3
 800bd5e:	e7b9      	b.n	800bcd4 <__gethex+0x1ec>
 800bd60:	da09      	bge.n	800bd76 <__gethex+0x28e>
 800bd62:	1bf7      	subs	r7, r6, r7
 800bd64:	4621      	mov	r1, r4
 800bd66:	463a      	mov	r2, r7
 800bd68:	9802      	ldr	r0, [sp, #8]
 800bd6a:	f000 fca7 	bl	800c6bc <__lshift>
 800bd6e:	4604      	mov	r4, r0
 800bd70:	1bed      	subs	r5, r5, r7
 800bd72:	f100 0914 	add.w	r9, r0, #20
 800bd76:	f04f 0a00 	mov.w	sl, #0
 800bd7a:	e7b0      	b.n	800bcde <__gethex+0x1f6>
 800bd7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd80:	42a8      	cmp	r0, r5
 800bd82:	dd72      	ble.n	800be6a <__gethex+0x382>
 800bd84:	1b45      	subs	r5, r0, r5
 800bd86:	42ae      	cmp	r6, r5
 800bd88:	dc35      	bgt.n	800bdf6 <__gethex+0x30e>
 800bd8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d029      	beq.n	800bde6 <__gethex+0x2fe>
 800bd92:	2b03      	cmp	r3, #3
 800bd94:	d02b      	beq.n	800bdee <__gethex+0x306>
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d11c      	bne.n	800bdd4 <__gethex+0x2ec>
 800bd9a:	42ae      	cmp	r6, r5
 800bd9c:	d11a      	bne.n	800bdd4 <__gethex+0x2ec>
 800bd9e:	2e01      	cmp	r6, #1
 800bda0:	d112      	bne.n	800bdc8 <__gethex+0x2e0>
 800bda2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bda6:	9a05      	ldr	r2, [sp, #20]
 800bda8:	2762      	movs	r7, #98	; 0x62
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	2301      	movs	r3, #1
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	f8c9 3000 	str.w	r3, [r9]
 800bdb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdb6:	601c      	str	r4, [r3, #0]
 800bdb8:	e728      	b.n	800bc0c <__gethex+0x124>
 800bdba:	bf00      	nop
 800bdbc:	0800dafc 	.word	0x0800dafc
 800bdc0:	0800da21 	.word	0x0800da21
 800bdc4:	0800da94 	.word	0x0800da94
 800bdc8:	4620      	mov	r0, r4
 800bdca:	1e71      	subs	r1, r6, #1
 800bdcc:	f000 feb5 	bl	800cb3a <__any_on>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d1e6      	bne.n	800bda2 <__gethex+0x2ba>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	9802      	ldr	r0, [sp, #8]
 800bdd8:	f000 fa58 	bl	800c28c <_Bfree>
 800bddc:	2300      	movs	r3, #0
 800bdde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bde0:	2750      	movs	r7, #80	; 0x50
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e712      	b.n	800bc0c <__gethex+0x124>
 800bde6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1f3      	bne.n	800bdd4 <__gethex+0x2ec>
 800bdec:	e7d9      	b.n	800bda2 <__gethex+0x2ba>
 800bdee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1d6      	bne.n	800bda2 <__gethex+0x2ba>
 800bdf4:	e7ee      	b.n	800bdd4 <__gethex+0x2ec>
 800bdf6:	1e6f      	subs	r7, r5, #1
 800bdf8:	f1ba 0f00 	cmp.w	sl, #0
 800bdfc:	d132      	bne.n	800be64 <__gethex+0x37c>
 800bdfe:	b127      	cbz	r7, 800be0a <__gethex+0x322>
 800be00:	4639      	mov	r1, r7
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fe99 	bl	800cb3a <__any_on>
 800be08:	4682      	mov	sl, r0
 800be0a:	2101      	movs	r1, #1
 800be0c:	117b      	asrs	r3, r7, #5
 800be0e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be12:	f007 071f 	and.w	r7, r7, #31
 800be16:	fa01 f707 	lsl.w	r7, r1, r7
 800be1a:	421f      	tst	r7, r3
 800be1c:	f04f 0702 	mov.w	r7, #2
 800be20:	4629      	mov	r1, r5
 800be22:	4620      	mov	r0, r4
 800be24:	bf18      	it	ne
 800be26:	f04a 0a02 	orrne.w	sl, sl, #2
 800be2a:	1b76      	subs	r6, r6, r5
 800be2c:	f7ff fdf3 	bl	800ba16 <rshift>
 800be30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be34:	f1ba 0f00 	cmp.w	sl, #0
 800be38:	d048      	beq.n	800becc <__gethex+0x3e4>
 800be3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d015      	beq.n	800be6e <__gethex+0x386>
 800be42:	2b03      	cmp	r3, #3
 800be44:	d017      	beq.n	800be76 <__gethex+0x38e>
 800be46:	2b01      	cmp	r3, #1
 800be48:	d109      	bne.n	800be5e <__gethex+0x376>
 800be4a:	f01a 0f02 	tst.w	sl, #2
 800be4e:	d006      	beq.n	800be5e <__gethex+0x376>
 800be50:	f8d9 0000 	ldr.w	r0, [r9]
 800be54:	ea4a 0a00 	orr.w	sl, sl, r0
 800be58:	f01a 0f01 	tst.w	sl, #1
 800be5c:	d10e      	bne.n	800be7c <__gethex+0x394>
 800be5e:	f047 0710 	orr.w	r7, r7, #16
 800be62:	e033      	b.n	800becc <__gethex+0x3e4>
 800be64:	f04f 0a01 	mov.w	sl, #1
 800be68:	e7cf      	b.n	800be0a <__gethex+0x322>
 800be6a:	2701      	movs	r7, #1
 800be6c:	e7e2      	b.n	800be34 <__gethex+0x34c>
 800be6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be70:	f1c3 0301 	rsb	r3, r3, #1
 800be74:	9315      	str	r3, [sp, #84]	; 0x54
 800be76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d0f0      	beq.n	800be5e <__gethex+0x376>
 800be7c:	f04f 0c00 	mov.w	ip, #0
 800be80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be84:	f104 0314 	add.w	r3, r4, #20
 800be88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be90:	4618      	mov	r0, r3
 800be92:	f853 2b04 	ldr.w	r2, [r3], #4
 800be96:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be9a:	d01c      	beq.n	800bed6 <__gethex+0x3ee>
 800be9c:	3201      	adds	r2, #1
 800be9e:	6002      	str	r2, [r0, #0]
 800bea0:	2f02      	cmp	r7, #2
 800bea2:	f104 0314 	add.w	r3, r4, #20
 800bea6:	d13d      	bne.n	800bf24 <__gethex+0x43c>
 800bea8:	f8d8 2000 	ldr.w	r2, [r8]
 800beac:	3a01      	subs	r2, #1
 800beae:	42b2      	cmp	r2, r6
 800beb0:	d10a      	bne.n	800bec8 <__gethex+0x3e0>
 800beb2:	2201      	movs	r2, #1
 800beb4:	1171      	asrs	r1, r6, #5
 800beb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beba:	f006 061f 	and.w	r6, r6, #31
 800bebe:	fa02 f606 	lsl.w	r6, r2, r6
 800bec2:	421e      	tst	r6, r3
 800bec4:	bf18      	it	ne
 800bec6:	4617      	movne	r7, r2
 800bec8:	f047 0720 	orr.w	r7, r7, #32
 800becc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bece:	601c      	str	r4, [r3, #0]
 800bed0:	9b05      	ldr	r3, [sp, #20]
 800bed2:	601d      	str	r5, [r3, #0]
 800bed4:	e69a      	b.n	800bc0c <__gethex+0x124>
 800bed6:	4299      	cmp	r1, r3
 800bed8:	f843 cc04 	str.w	ip, [r3, #-4]
 800bedc:	d8d8      	bhi.n	800be90 <__gethex+0x3a8>
 800bede:	68a3      	ldr	r3, [r4, #8]
 800bee0:	459b      	cmp	fp, r3
 800bee2:	db17      	blt.n	800bf14 <__gethex+0x42c>
 800bee4:	6861      	ldr	r1, [r4, #4]
 800bee6:	9802      	ldr	r0, [sp, #8]
 800bee8:	3101      	adds	r1, #1
 800beea:	f000 f98f 	bl	800c20c <_Balloc>
 800beee:	4681      	mov	r9, r0
 800bef0:	b918      	cbnz	r0, 800befa <__gethex+0x412>
 800bef2:	4602      	mov	r2, r0
 800bef4:	2184      	movs	r1, #132	; 0x84
 800bef6:	4b19      	ldr	r3, [pc, #100]	; (800bf5c <__gethex+0x474>)
 800bef8:	e6ab      	b.n	800bc52 <__gethex+0x16a>
 800befa:	6922      	ldr	r2, [r4, #16]
 800befc:	f104 010c 	add.w	r1, r4, #12
 800bf00:	3202      	adds	r2, #2
 800bf02:	0092      	lsls	r2, r2, #2
 800bf04:	300c      	adds	r0, #12
 800bf06:	f7fc fe29 	bl	8008b5c <memcpy>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	9802      	ldr	r0, [sp, #8]
 800bf0e:	f000 f9bd 	bl	800c28c <_Bfree>
 800bf12:	464c      	mov	r4, r9
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	6122      	str	r2, [r4, #16]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf20:	615a      	str	r2, [r3, #20]
 800bf22:	e7bd      	b.n	800bea0 <__gethex+0x3b8>
 800bf24:	6922      	ldr	r2, [r4, #16]
 800bf26:	455a      	cmp	r2, fp
 800bf28:	dd0b      	ble.n	800bf42 <__gethex+0x45a>
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7ff fd72 	bl	800ba16 <rshift>
 800bf32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf36:	3501      	adds	r5, #1
 800bf38:	42ab      	cmp	r3, r5
 800bf3a:	f6ff aed4 	blt.w	800bce6 <__gethex+0x1fe>
 800bf3e:	2701      	movs	r7, #1
 800bf40:	e7c2      	b.n	800bec8 <__gethex+0x3e0>
 800bf42:	f016 061f 	ands.w	r6, r6, #31
 800bf46:	d0fa      	beq.n	800bf3e <__gethex+0x456>
 800bf48:	4453      	add	r3, sl
 800bf4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf4e:	f000 fa4f 	bl	800c3f0 <__hi0bits>
 800bf52:	f1c6 0620 	rsb	r6, r6, #32
 800bf56:	42b0      	cmp	r0, r6
 800bf58:	dbe7      	blt.n	800bf2a <__gethex+0x442>
 800bf5a:	e7f0      	b.n	800bf3e <__gethex+0x456>
 800bf5c:	0800da21 	.word	0x0800da21

0800bf60 <L_shift>:
 800bf60:	f1c2 0208 	rsb	r2, r2, #8
 800bf64:	0092      	lsls	r2, r2, #2
 800bf66:	b570      	push	{r4, r5, r6, lr}
 800bf68:	f1c2 0620 	rsb	r6, r2, #32
 800bf6c:	6843      	ldr	r3, [r0, #4]
 800bf6e:	6804      	ldr	r4, [r0, #0]
 800bf70:	fa03 f506 	lsl.w	r5, r3, r6
 800bf74:	432c      	orrs	r4, r5
 800bf76:	40d3      	lsrs	r3, r2
 800bf78:	6004      	str	r4, [r0, #0]
 800bf7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf7e:	4288      	cmp	r0, r1
 800bf80:	d3f4      	bcc.n	800bf6c <L_shift+0xc>
 800bf82:	bd70      	pop	{r4, r5, r6, pc}

0800bf84 <__match>:
 800bf84:	b530      	push	{r4, r5, lr}
 800bf86:	6803      	ldr	r3, [r0, #0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf8e:	b914      	cbnz	r4, 800bf96 <__match+0x12>
 800bf90:	6003      	str	r3, [r0, #0]
 800bf92:	2001      	movs	r0, #1
 800bf94:	bd30      	pop	{r4, r5, pc}
 800bf96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf9e:	2d19      	cmp	r5, #25
 800bfa0:	bf98      	it	ls
 800bfa2:	3220      	addls	r2, #32
 800bfa4:	42a2      	cmp	r2, r4
 800bfa6:	d0f0      	beq.n	800bf8a <__match+0x6>
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e7f3      	b.n	800bf94 <__match+0x10>

0800bfac <__hexnan>:
 800bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	680b      	ldr	r3, [r1, #0]
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	115e      	asrs	r6, r3, #5
 800bfb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfbc:	f013 031f 	ands.w	r3, r3, #31
 800bfc0:	bf18      	it	ne
 800bfc2:	3604      	addne	r6, #4
 800bfc4:	1f37      	subs	r7, r6, #4
 800bfc6:	46b9      	mov	r9, r7
 800bfc8:	463c      	mov	r4, r7
 800bfca:	46ab      	mov	fp, r5
 800bfcc:	b087      	sub	sp, #28
 800bfce:	4690      	mov	r8, r2
 800bfd0:	6802      	ldr	r2, [r0, #0]
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfd8:	9502      	str	r5, [sp, #8]
 800bfda:	7851      	ldrb	r1, [r2, #1]
 800bfdc:	1c53      	adds	r3, r2, #1
 800bfde:	9303      	str	r3, [sp, #12]
 800bfe0:	b341      	cbz	r1, 800c034 <__hexnan+0x88>
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	9205      	str	r2, [sp, #20]
 800bfe6:	9104      	str	r1, [sp, #16]
 800bfe8:	f7ff fd68 	bl	800babc <__hexdig_fun>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d14f      	bne.n	800c090 <__hexnan+0xe4>
 800bff0:	9904      	ldr	r1, [sp, #16]
 800bff2:	9a05      	ldr	r2, [sp, #20]
 800bff4:	2920      	cmp	r1, #32
 800bff6:	d818      	bhi.n	800c02a <__hexnan+0x7e>
 800bff8:	9b02      	ldr	r3, [sp, #8]
 800bffa:	459b      	cmp	fp, r3
 800bffc:	dd13      	ble.n	800c026 <__hexnan+0x7a>
 800bffe:	454c      	cmp	r4, r9
 800c000:	d206      	bcs.n	800c010 <__hexnan+0x64>
 800c002:	2d07      	cmp	r5, #7
 800c004:	dc04      	bgt.n	800c010 <__hexnan+0x64>
 800c006:	462a      	mov	r2, r5
 800c008:	4649      	mov	r1, r9
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff ffa8 	bl	800bf60 <L_shift>
 800c010:	4544      	cmp	r4, r8
 800c012:	d950      	bls.n	800c0b6 <__hexnan+0x10a>
 800c014:	2300      	movs	r3, #0
 800c016:	f1a4 0904 	sub.w	r9, r4, #4
 800c01a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c01e:	461d      	mov	r5, r3
 800c020:	464c      	mov	r4, r9
 800c022:	f8cd b008 	str.w	fp, [sp, #8]
 800c026:	9a03      	ldr	r2, [sp, #12]
 800c028:	e7d7      	b.n	800bfda <__hexnan+0x2e>
 800c02a:	2929      	cmp	r1, #41	; 0x29
 800c02c:	d156      	bne.n	800c0dc <__hexnan+0x130>
 800c02e:	3202      	adds	r2, #2
 800c030:	f8ca 2000 	str.w	r2, [sl]
 800c034:	f1bb 0f00 	cmp.w	fp, #0
 800c038:	d050      	beq.n	800c0dc <__hexnan+0x130>
 800c03a:	454c      	cmp	r4, r9
 800c03c:	d206      	bcs.n	800c04c <__hexnan+0xa0>
 800c03e:	2d07      	cmp	r5, #7
 800c040:	dc04      	bgt.n	800c04c <__hexnan+0xa0>
 800c042:	462a      	mov	r2, r5
 800c044:	4649      	mov	r1, r9
 800c046:	4620      	mov	r0, r4
 800c048:	f7ff ff8a 	bl	800bf60 <L_shift>
 800c04c:	4544      	cmp	r4, r8
 800c04e:	d934      	bls.n	800c0ba <__hexnan+0x10e>
 800c050:	4623      	mov	r3, r4
 800c052:	f1a8 0204 	sub.w	r2, r8, #4
 800c056:	f853 1b04 	ldr.w	r1, [r3], #4
 800c05a:	429f      	cmp	r7, r3
 800c05c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c060:	d2f9      	bcs.n	800c056 <__hexnan+0xaa>
 800c062:	1b3b      	subs	r3, r7, r4
 800c064:	f023 0303 	bic.w	r3, r3, #3
 800c068:	3304      	adds	r3, #4
 800c06a:	3401      	adds	r4, #1
 800c06c:	3e03      	subs	r6, #3
 800c06e:	42b4      	cmp	r4, r6
 800c070:	bf88      	it	hi
 800c072:	2304      	movhi	r3, #4
 800c074:	2200      	movs	r2, #0
 800c076:	4443      	add	r3, r8
 800c078:	f843 2b04 	str.w	r2, [r3], #4
 800c07c:	429f      	cmp	r7, r3
 800c07e:	d2fb      	bcs.n	800c078 <__hexnan+0xcc>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	b91b      	cbnz	r3, 800c08c <__hexnan+0xe0>
 800c084:	4547      	cmp	r7, r8
 800c086:	d127      	bne.n	800c0d8 <__hexnan+0x12c>
 800c088:	2301      	movs	r3, #1
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	2005      	movs	r0, #5
 800c08e:	e026      	b.n	800c0de <__hexnan+0x132>
 800c090:	3501      	adds	r5, #1
 800c092:	2d08      	cmp	r5, #8
 800c094:	f10b 0b01 	add.w	fp, fp, #1
 800c098:	dd06      	ble.n	800c0a8 <__hexnan+0xfc>
 800c09a:	4544      	cmp	r4, r8
 800c09c:	d9c3      	bls.n	800c026 <__hexnan+0x7a>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2501      	movs	r5, #1
 800c0a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0a6:	3c04      	subs	r4, #4
 800c0a8:	6822      	ldr	r2, [r4, #0]
 800c0aa:	f000 000f 	and.w	r0, r0, #15
 800c0ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c0b2:	6022      	str	r2, [r4, #0]
 800c0b4:	e7b7      	b.n	800c026 <__hexnan+0x7a>
 800c0b6:	2508      	movs	r5, #8
 800c0b8:	e7b5      	b.n	800c026 <__hexnan+0x7a>
 800c0ba:	9b01      	ldr	r3, [sp, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0df      	beq.n	800c080 <__hexnan+0xd4>
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c4:	f1c3 0320 	rsb	r3, r3, #32
 800c0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c0d0:	401a      	ands	r2, r3
 800c0d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800c0d6:	e7d3      	b.n	800c080 <__hexnan+0xd4>
 800c0d8:	3f04      	subs	r7, #4
 800c0da:	e7d1      	b.n	800c080 <__hexnan+0xd4>
 800c0dc:	2004      	movs	r0, #4
 800c0de:	b007      	add	sp, #28
 800c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0e4 <_localeconv_r>:
 800c0e4:	4800      	ldr	r0, [pc, #0]	; (800c0e8 <_localeconv_r+0x4>)
 800c0e6:	4770      	bx	lr
 800c0e8:	20000768 	.word	0x20000768

0800c0ec <__retarget_lock_init_recursive>:
 800c0ec:	4770      	bx	lr

0800c0ee <__retarget_lock_acquire_recursive>:
 800c0ee:	4770      	bx	lr

0800c0f0 <__retarget_lock_release_recursive>:
 800c0f0:	4770      	bx	lr

0800c0f2 <__swhatbuf_r>:
 800c0f2:	b570      	push	{r4, r5, r6, lr}
 800c0f4:	460e      	mov	r6, r1
 800c0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fa:	4614      	mov	r4, r2
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	461d      	mov	r5, r3
 800c100:	b096      	sub	sp, #88	; 0x58
 800c102:	da08      	bge.n	800c116 <__swhatbuf_r+0x24>
 800c104:	2200      	movs	r2, #0
 800c106:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c10a:	602a      	str	r2, [r5, #0]
 800c10c:	061a      	lsls	r2, r3, #24
 800c10e:	d410      	bmi.n	800c132 <__swhatbuf_r+0x40>
 800c110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c114:	e00e      	b.n	800c134 <__swhatbuf_r+0x42>
 800c116:	466a      	mov	r2, sp
 800c118:	f001 f9c0 	bl	800d49c <_fstat_r>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	dbf1      	blt.n	800c104 <__swhatbuf_r+0x12>
 800c120:	9a01      	ldr	r2, [sp, #4]
 800c122:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c126:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c12a:	425a      	negs	r2, r3
 800c12c:	415a      	adcs	r2, r3
 800c12e:	602a      	str	r2, [r5, #0]
 800c130:	e7ee      	b.n	800c110 <__swhatbuf_r+0x1e>
 800c132:	2340      	movs	r3, #64	; 0x40
 800c134:	2000      	movs	r0, #0
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	b016      	add	sp, #88	; 0x58
 800c13a:	bd70      	pop	{r4, r5, r6, pc}

0800c13c <__smakebuf_r>:
 800c13c:	898b      	ldrh	r3, [r1, #12]
 800c13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c140:	079d      	lsls	r5, r3, #30
 800c142:	4606      	mov	r6, r0
 800c144:	460c      	mov	r4, r1
 800c146:	d507      	bpl.n	800c158 <__smakebuf_r+0x1c>
 800c148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	2301      	movs	r3, #1
 800c152:	6163      	str	r3, [r4, #20]
 800c154:	b002      	add	sp, #8
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	466a      	mov	r2, sp
 800c15a:	ab01      	add	r3, sp, #4
 800c15c:	f7ff ffc9 	bl	800c0f2 <__swhatbuf_r>
 800c160:	9900      	ldr	r1, [sp, #0]
 800c162:	4605      	mov	r5, r0
 800c164:	4630      	mov	r0, r6
 800c166:	f000 fd85 	bl	800cc74 <_malloc_r>
 800c16a:	b948      	cbnz	r0, 800c180 <__smakebuf_r+0x44>
 800c16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c170:	059a      	lsls	r2, r3, #22
 800c172:	d4ef      	bmi.n	800c154 <__smakebuf_r+0x18>
 800c174:	f023 0303 	bic.w	r3, r3, #3
 800c178:	f043 0302 	orr.w	r3, r3, #2
 800c17c:	81a3      	strh	r3, [r4, #12]
 800c17e:	e7e3      	b.n	800c148 <__smakebuf_r+0xc>
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <__smakebuf_r+0x7c>)
 800c182:	62b3      	str	r3, [r6, #40]	; 0x28
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	6020      	str	r0, [r4, #0]
 800c188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	9b00      	ldr	r3, [sp, #0]
 800c190:	6120      	str	r0, [r4, #16]
 800c192:	6163      	str	r3, [r4, #20]
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	b15b      	cbz	r3, 800c1b0 <__smakebuf_r+0x74>
 800c198:	4630      	mov	r0, r6
 800c19a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c19e:	f001 f98f 	bl	800d4c0 <_isatty_r>
 800c1a2:	b128      	cbz	r0, 800c1b0 <__smakebuf_r+0x74>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f023 0303 	bic.w	r3, r3, #3
 800c1aa:	f043 0301 	orr.w	r3, r3, #1
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	89a0      	ldrh	r0, [r4, #12]
 800c1b2:	4305      	orrs	r5, r0
 800c1b4:	81a5      	strh	r5, [r4, #12]
 800c1b6:	e7cd      	b.n	800c154 <__smakebuf_r+0x18>
 800c1b8:	0800b851 	.word	0x0800b851

0800c1bc <malloc>:
 800c1bc:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <malloc+0xc>)
 800c1be:	4601      	mov	r1, r0
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	f000 bd57 	b.w	800cc74 <_malloc_r>
 800c1c6:	bf00      	nop
 800c1c8:	20000610 	.word	0x20000610

0800c1cc <__ascii_mbtowc>:
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	b901      	cbnz	r1, 800c1d2 <__ascii_mbtowc+0x6>
 800c1d0:	a901      	add	r1, sp, #4
 800c1d2:	b142      	cbz	r2, 800c1e6 <__ascii_mbtowc+0x1a>
 800c1d4:	b14b      	cbz	r3, 800c1ea <__ascii_mbtowc+0x1e>
 800c1d6:	7813      	ldrb	r3, [r2, #0]
 800c1d8:	600b      	str	r3, [r1, #0]
 800c1da:	7812      	ldrb	r2, [r2, #0]
 800c1dc:	1e10      	subs	r0, r2, #0
 800c1de:	bf18      	it	ne
 800c1e0:	2001      	movne	r0, #1
 800c1e2:	b002      	add	sp, #8
 800c1e4:	4770      	bx	lr
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	e7fb      	b.n	800c1e2 <__ascii_mbtowc+0x16>
 800c1ea:	f06f 0001 	mvn.w	r0, #1
 800c1ee:	e7f8      	b.n	800c1e2 <__ascii_mbtowc+0x16>

0800c1f0 <memchr>:
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	b2c9      	uxtb	r1, r1
 800c1f6:	4402      	add	r2, r0
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	d101      	bne.n	800c202 <memchr+0x12>
 800c1fe:	2000      	movs	r0, #0
 800c200:	e003      	b.n	800c20a <memchr+0x1a>
 800c202:	7804      	ldrb	r4, [r0, #0]
 800c204:	3301      	adds	r3, #1
 800c206:	428c      	cmp	r4, r1
 800c208:	d1f6      	bne.n	800c1f8 <memchr+0x8>
 800c20a:	bd10      	pop	{r4, pc}

0800c20c <_Balloc>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c210:	4604      	mov	r4, r0
 800c212:	460d      	mov	r5, r1
 800c214:	b976      	cbnz	r6, 800c234 <_Balloc+0x28>
 800c216:	2010      	movs	r0, #16
 800c218:	f7ff ffd0 	bl	800c1bc <malloc>
 800c21c:	4602      	mov	r2, r0
 800c21e:	6260      	str	r0, [r4, #36]	; 0x24
 800c220:	b920      	cbnz	r0, 800c22c <_Balloc+0x20>
 800c222:	2166      	movs	r1, #102	; 0x66
 800c224:	4b17      	ldr	r3, [pc, #92]	; (800c284 <_Balloc+0x78>)
 800c226:	4818      	ldr	r0, [pc, #96]	; (800c288 <_Balloc+0x7c>)
 800c228:	f7fe fb98 	bl	800a95c <__assert_func>
 800c22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c230:	6006      	str	r6, [r0, #0]
 800c232:	60c6      	str	r6, [r0, #12]
 800c234:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c236:	68f3      	ldr	r3, [r6, #12]
 800c238:	b183      	cbz	r3, 800c25c <_Balloc+0x50>
 800c23a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c242:	b9b8      	cbnz	r0, 800c274 <_Balloc+0x68>
 800c244:	2101      	movs	r1, #1
 800c246:	fa01 f605 	lsl.w	r6, r1, r5
 800c24a:	1d72      	adds	r2, r6, #5
 800c24c:	4620      	mov	r0, r4
 800c24e:	0092      	lsls	r2, r2, #2
 800c250:	f000 fc94 	bl	800cb7c <_calloc_r>
 800c254:	b160      	cbz	r0, 800c270 <_Balloc+0x64>
 800c256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c25a:	e00e      	b.n	800c27a <_Balloc+0x6e>
 800c25c:	2221      	movs	r2, #33	; 0x21
 800c25e:	2104      	movs	r1, #4
 800c260:	4620      	mov	r0, r4
 800c262:	f000 fc8b 	bl	800cb7c <_calloc_r>
 800c266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c268:	60f0      	str	r0, [r6, #12]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e4      	bne.n	800c23a <_Balloc+0x2e>
 800c270:	2000      	movs	r0, #0
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	6802      	ldr	r2, [r0, #0]
 800c276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c27a:	2300      	movs	r3, #0
 800c27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c280:	e7f7      	b.n	800c272 <_Balloc+0x66>
 800c282:	bf00      	nop
 800c284:	0800d808 	.word	0x0800d808
 800c288:	0800db10 	.word	0x0800db10

0800c28c <_Bfree>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c290:	4605      	mov	r5, r0
 800c292:	460c      	mov	r4, r1
 800c294:	b976      	cbnz	r6, 800c2b4 <_Bfree+0x28>
 800c296:	2010      	movs	r0, #16
 800c298:	f7ff ff90 	bl	800c1bc <malloc>
 800c29c:	4602      	mov	r2, r0
 800c29e:	6268      	str	r0, [r5, #36]	; 0x24
 800c2a0:	b920      	cbnz	r0, 800c2ac <_Bfree+0x20>
 800c2a2:	218a      	movs	r1, #138	; 0x8a
 800c2a4:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <_Bfree+0x3c>)
 800c2a6:	4809      	ldr	r0, [pc, #36]	; (800c2cc <_Bfree+0x40>)
 800c2a8:	f7fe fb58 	bl	800a95c <__assert_func>
 800c2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2b0:	6006      	str	r6, [r0, #0]
 800c2b2:	60c6      	str	r6, [r0, #12]
 800c2b4:	b13c      	cbz	r4, 800c2c6 <_Bfree+0x3a>
 800c2b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c2b8:	6862      	ldr	r2, [r4, #4]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2c0:	6021      	str	r1, [r4, #0]
 800c2c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	0800d808 	.word	0x0800d808
 800c2cc:	0800db10 	.word	0x0800db10

0800c2d0 <__multadd>:
 800c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	461e      	mov	r6, r3
 800c2da:	2000      	movs	r0, #0
 800c2dc:	690d      	ldr	r5, [r1, #16]
 800c2de:	f101 0c14 	add.w	ip, r1, #20
 800c2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	b299      	uxth	r1, r3
 800c2ea:	fb02 6101 	mla	r1, r2, r1, r6
 800c2ee:	0c1e      	lsrs	r6, r3, #16
 800c2f0:	0c0b      	lsrs	r3, r1, #16
 800c2f2:	fb02 3306 	mla	r3, r2, r6, r3
 800c2f6:	b289      	uxth	r1, r1
 800c2f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2fc:	4285      	cmp	r5, r0
 800c2fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c302:	f84c 1b04 	str.w	r1, [ip], #4
 800c306:	dcec      	bgt.n	800c2e2 <__multadd+0x12>
 800c308:	b30e      	cbz	r6, 800c34e <__multadd+0x7e>
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	dc19      	bgt.n	800c344 <__multadd+0x74>
 800c310:	6861      	ldr	r1, [r4, #4]
 800c312:	4638      	mov	r0, r7
 800c314:	3101      	adds	r1, #1
 800c316:	f7ff ff79 	bl	800c20c <_Balloc>
 800c31a:	4680      	mov	r8, r0
 800c31c:	b928      	cbnz	r0, 800c32a <__multadd+0x5a>
 800c31e:	4602      	mov	r2, r0
 800c320:	21b5      	movs	r1, #181	; 0xb5
 800c322:	4b0c      	ldr	r3, [pc, #48]	; (800c354 <__multadd+0x84>)
 800c324:	480c      	ldr	r0, [pc, #48]	; (800c358 <__multadd+0x88>)
 800c326:	f7fe fb19 	bl	800a95c <__assert_func>
 800c32a:	6922      	ldr	r2, [r4, #16]
 800c32c:	f104 010c 	add.w	r1, r4, #12
 800c330:	3202      	adds	r2, #2
 800c332:	0092      	lsls	r2, r2, #2
 800c334:	300c      	adds	r0, #12
 800c336:	f7fc fc11 	bl	8008b5c <memcpy>
 800c33a:	4621      	mov	r1, r4
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7ff ffa5 	bl	800c28c <_Bfree>
 800c342:	4644      	mov	r4, r8
 800c344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c348:	3501      	adds	r5, #1
 800c34a:	615e      	str	r6, [r3, #20]
 800c34c:	6125      	str	r5, [r4, #16]
 800c34e:	4620      	mov	r0, r4
 800c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c354:	0800da21 	.word	0x0800da21
 800c358:	0800db10 	.word	0x0800db10

0800c35c <__s2b>:
 800c35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c360:	4615      	mov	r5, r2
 800c362:	2209      	movs	r2, #9
 800c364:	461f      	mov	r7, r3
 800c366:	3308      	adds	r3, #8
 800c368:	460c      	mov	r4, r1
 800c36a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c36e:	4606      	mov	r6, r0
 800c370:	2201      	movs	r2, #1
 800c372:	2100      	movs	r1, #0
 800c374:	429a      	cmp	r2, r3
 800c376:	db09      	blt.n	800c38c <__s2b+0x30>
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff ff47 	bl	800c20c <_Balloc>
 800c37e:	b940      	cbnz	r0, 800c392 <__s2b+0x36>
 800c380:	4602      	mov	r2, r0
 800c382:	21ce      	movs	r1, #206	; 0xce
 800c384:	4b18      	ldr	r3, [pc, #96]	; (800c3e8 <__s2b+0x8c>)
 800c386:	4819      	ldr	r0, [pc, #100]	; (800c3ec <__s2b+0x90>)
 800c388:	f7fe fae8 	bl	800a95c <__assert_func>
 800c38c:	0052      	lsls	r2, r2, #1
 800c38e:	3101      	adds	r1, #1
 800c390:	e7f0      	b.n	800c374 <__s2b+0x18>
 800c392:	9b08      	ldr	r3, [sp, #32]
 800c394:	2d09      	cmp	r5, #9
 800c396:	6143      	str	r3, [r0, #20]
 800c398:	f04f 0301 	mov.w	r3, #1
 800c39c:	6103      	str	r3, [r0, #16]
 800c39e:	dd16      	ble.n	800c3ce <__s2b+0x72>
 800c3a0:	f104 0909 	add.w	r9, r4, #9
 800c3a4:	46c8      	mov	r8, r9
 800c3a6:	442c      	add	r4, r5
 800c3a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3ac:	4601      	mov	r1, r0
 800c3ae:	220a      	movs	r2, #10
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	3b30      	subs	r3, #48	; 0x30
 800c3b4:	f7ff ff8c 	bl	800c2d0 <__multadd>
 800c3b8:	45a0      	cmp	r8, r4
 800c3ba:	d1f5      	bne.n	800c3a8 <__s2b+0x4c>
 800c3bc:	f1a5 0408 	sub.w	r4, r5, #8
 800c3c0:	444c      	add	r4, r9
 800c3c2:	1b2d      	subs	r5, r5, r4
 800c3c4:	1963      	adds	r3, r4, r5
 800c3c6:	42bb      	cmp	r3, r7
 800c3c8:	db04      	blt.n	800c3d4 <__s2b+0x78>
 800c3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ce:	2509      	movs	r5, #9
 800c3d0:	340a      	adds	r4, #10
 800c3d2:	e7f6      	b.n	800c3c2 <__s2b+0x66>
 800c3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3d8:	4601      	mov	r1, r0
 800c3da:	220a      	movs	r2, #10
 800c3dc:	4630      	mov	r0, r6
 800c3de:	3b30      	subs	r3, #48	; 0x30
 800c3e0:	f7ff ff76 	bl	800c2d0 <__multadd>
 800c3e4:	e7ee      	b.n	800c3c4 <__s2b+0x68>
 800c3e6:	bf00      	nop
 800c3e8:	0800da21 	.word	0x0800da21
 800c3ec:	0800db10 	.word	0x0800db10

0800c3f0 <__hi0bits>:
 800c3f0:	0c02      	lsrs	r2, r0, #16
 800c3f2:	0412      	lsls	r2, r2, #16
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	b9ca      	cbnz	r2, 800c42c <__hi0bits+0x3c>
 800c3f8:	0403      	lsls	r3, r0, #16
 800c3fa:	2010      	movs	r0, #16
 800c3fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c400:	bf04      	itt	eq
 800c402:	021b      	lsleq	r3, r3, #8
 800c404:	3008      	addeq	r0, #8
 800c406:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c40a:	bf04      	itt	eq
 800c40c:	011b      	lsleq	r3, r3, #4
 800c40e:	3004      	addeq	r0, #4
 800c410:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c414:	bf04      	itt	eq
 800c416:	009b      	lsleq	r3, r3, #2
 800c418:	3002      	addeq	r0, #2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	db05      	blt.n	800c42a <__hi0bits+0x3a>
 800c41e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c422:	f100 0001 	add.w	r0, r0, #1
 800c426:	bf08      	it	eq
 800c428:	2020      	moveq	r0, #32
 800c42a:	4770      	bx	lr
 800c42c:	2000      	movs	r0, #0
 800c42e:	e7e5      	b.n	800c3fc <__hi0bits+0xc>

0800c430 <__lo0bits>:
 800c430:	6803      	ldr	r3, [r0, #0]
 800c432:	4602      	mov	r2, r0
 800c434:	f013 0007 	ands.w	r0, r3, #7
 800c438:	d00b      	beq.n	800c452 <__lo0bits+0x22>
 800c43a:	07d9      	lsls	r1, r3, #31
 800c43c:	d421      	bmi.n	800c482 <__lo0bits+0x52>
 800c43e:	0798      	lsls	r0, r3, #30
 800c440:	bf49      	itett	mi
 800c442:	085b      	lsrmi	r3, r3, #1
 800c444:	089b      	lsrpl	r3, r3, #2
 800c446:	2001      	movmi	r0, #1
 800c448:	6013      	strmi	r3, [r2, #0]
 800c44a:	bf5c      	itt	pl
 800c44c:	2002      	movpl	r0, #2
 800c44e:	6013      	strpl	r3, [r2, #0]
 800c450:	4770      	bx	lr
 800c452:	b299      	uxth	r1, r3
 800c454:	b909      	cbnz	r1, 800c45a <__lo0bits+0x2a>
 800c456:	2010      	movs	r0, #16
 800c458:	0c1b      	lsrs	r3, r3, #16
 800c45a:	b2d9      	uxtb	r1, r3
 800c45c:	b909      	cbnz	r1, 800c462 <__lo0bits+0x32>
 800c45e:	3008      	adds	r0, #8
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	0719      	lsls	r1, r3, #28
 800c464:	bf04      	itt	eq
 800c466:	091b      	lsreq	r3, r3, #4
 800c468:	3004      	addeq	r0, #4
 800c46a:	0799      	lsls	r1, r3, #30
 800c46c:	bf04      	itt	eq
 800c46e:	089b      	lsreq	r3, r3, #2
 800c470:	3002      	addeq	r0, #2
 800c472:	07d9      	lsls	r1, r3, #31
 800c474:	d403      	bmi.n	800c47e <__lo0bits+0x4e>
 800c476:	085b      	lsrs	r3, r3, #1
 800c478:	f100 0001 	add.w	r0, r0, #1
 800c47c:	d003      	beq.n	800c486 <__lo0bits+0x56>
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	4770      	bx	lr
 800c482:	2000      	movs	r0, #0
 800c484:	4770      	bx	lr
 800c486:	2020      	movs	r0, #32
 800c488:	4770      	bx	lr
	...

0800c48c <__i2b>:
 800c48c:	b510      	push	{r4, lr}
 800c48e:	460c      	mov	r4, r1
 800c490:	2101      	movs	r1, #1
 800c492:	f7ff febb 	bl	800c20c <_Balloc>
 800c496:	4602      	mov	r2, r0
 800c498:	b928      	cbnz	r0, 800c4a6 <__i2b+0x1a>
 800c49a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c49e:	4b04      	ldr	r3, [pc, #16]	; (800c4b0 <__i2b+0x24>)
 800c4a0:	4804      	ldr	r0, [pc, #16]	; (800c4b4 <__i2b+0x28>)
 800c4a2:	f7fe fa5b 	bl	800a95c <__assert_func>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	6144      	str	r4, [r0, #20]
 800c4aa:	6103      	str	r3, [r0, #16]
 800c4ac:	bd10      	pop	{r4, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800da21 	.word	0x0800da21
 800c4b4:	0800db10 	.word	0x0800db10

0800c4b8 <__multiply>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	4691      	mov	r9, r2
 800c4be:	690a      	ldr	r2, [r1, #16]
 800c4c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	bfbe      	ittt	lt
 800c4ca:	460b      	movlt	r3, r1
 800c4cc:	464c      	movlt	r4, r9
 800c4ce:	4699      	movlt	r9, r3
 800c4d0:	6927      	ldr	r7, [r4, #16]
 800c4d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	6861      	ldr	r1, [r4, #4]
 800c4da:	eb07 060a 	add.w	r6, r7, sl
 800c4de:	42b3      	cmp	r3, r6
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	bfb8      	it	lt
 800c4e4:	3101      	addlt	r1, #1
 800c4e6:	f7ff fe91 	bl	800c20c <_Balloc>
 800c4ea:	b930      	cbnz	r0, 800c4fa <__multiply+0x42>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	f240 115d 	movw	r1, #349	; 0x15d
 800c4f2:	4b43      	ldr	r3, [pc, #268]	; (800c600 <__multiply+0x148>)
 800c4f4:	4843      	ldr	r0, [pc, #268]	; (800c604 <__multiply+0x14c>)
 800c4f6:	f7fe fa31 	bl	800a95c <__assert_func>
 800c4fa:	f100 0514 	add.w	r5, r0, #20
 800c4fe:	462b      	mov	r3, r5
 800c500:	2200      	movs	r2, #0
 800c502:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c506:	4543      	cmp	r3, r8
 800c508:	d321      	bcc.n	800c54e <__multiply+0x96>
 800c50a:	f104 0314 	add.w	r3, r4, #20
 800c50e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c512:	f109 0314 	add.w	r3, r9, #20
 800c516:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c51a:	9202      	str	r2, [sp, #8]
 800c51c:	1b3a      	subs	r2, r7, r4
 800c51e:	3a15      	subs	r2, #21
 800c520:	f022 0203 	bic.w	r2, r2, #3
 800c524:	3204      	adds	r2, #4
 800c526:	f104 0115 	add.w	r1, r4, #21
 800c52a:	428f      	cmp	r7, r1
 800c52c:	bf38      	it	cc
 800c52e:	2204      	movcc	r2, #4
 800c530:	9201      	str	r2, [sp, #4]
 800c532:	9a02      	ldr	r2, [sp, #8]
 800c534:	9303      	str	r3, [sp, #12]
 800c536:	429a      	cmp	r2, r3
 800c538:	d80c      	bhi.n	800c554 <__multiply+0x9c>
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	dd03      	ble.n	800c546 <__multiply+0x8e>
 800c53e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c542:	2b00      	cmp	r3, #0
 800c544:	d059      	beq.n	800c5fa <__multiply+0x142>
 800c546:	6106      	str	r6, [r0, #16]
 800c548:	b005      	add	sp, #20
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54e:	f843 2b04 	str.w	r2, [r3], #4
 800c552:	e7d8      	b.n	800c506 <__multiply+0x4e>
 800c554:	f8b3 a000 	ldrh.w	sl, [r3]
 800c558:	f1ba 0f00 	cmp.w	sl, #0
 800c55c:	d023      	beq.n	800c5a6 <__multiply+0xee>
 800c55e:	46a9      	mov	r9, r5
 800c560:	f04f 0c00 	mov.w	ip, #0
 800c564:	f104 0e14 	add.w	lr, r4, #20
 800c568:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c56c:	f8d9 1000 	ldr.w	r1, [r9]
 800c570:	fa1f fb82 	uxth.w	fp, r2
 800c574:	b289      	uxth	r1, r1
 800c576:	fb0a 110b 	mla	r1, sl, fp, r1
 800c57a:	4461      	add	r1, ip
 800c57c:	f8d9 c000 	ldr.w	ip, [r9]
 800c580:	0c12      	lsrs	r2, r2, #16
 800c582:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c586:	fb0a c202 	mla	r2, sl, r2, ip
 800c58a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c58e:	b289      	uxth	r1, r1
 800c590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c594:	4577      	cmp	r7, lr
 800c596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c59a:	f849 1b04 	str.w	r1, [r9], #4
 800c59e:	d8e3      	bhi.n	800c568 <__multiply+0xb0>
 800c5a0:	9a01      	ldr	r2, [sp, #4]
 800c5a2:	f845 c002 	str.w	ip, [r5, r2]
 800c5a6:	9a03      	ldr	r2, [sp, #12]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5ae:	f1b9 0f00 	cmp.w	r9, #0
 800c5b2:	d020      	beq.n	800c5f6 <__multiply+0x13e>
 800c5b4:	46ae      	mov	lr, r5
 800c5b6:	f04f 0a00 	mov.w	sl, #0
 800c5ba:	6829      	ldr	r1, [r5, #0]
 800c5bc:	f104 0c14 	add.w	ip, r4, #20
 800c5c0:	f8bc b000 	ldrh.w	fp, [ip]
 800c5c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5c8:	b289      	uxth	r1, r1
 800c5ca:	fb09 220b 	mla	r2, r9, fp, r2
 800c5ce:	4492      	add	sl, r2
 800c5d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5d4:	f84e 1b04 	str.w	r1, [lr], #4
 800c5d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5dc:	f8be 1000 	ldrh.w	r1, [lr]
 800c5e0:	0c12      	lsrs	r2, r2, #16
 800c5e2:	fb09 1102 	mla	r1, r9, r2, r1
 800c5e6:	4567      	cmp	r7, ip
 800c5e8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5f0:	d8e6      	bhi.n	800c5c0 <__multiply+0x108>
 800c5f2:	9a01      	ldr	r2, [sp, #4]
 800c5f4:	50a9      	str	r1, [r5, r2]
 800c5f6:	3504      	adds	r5, #4
 800c5f8:	e79b      	b.n	800c532 <__multiply+0x7a>
 800c5fa:	3e01      	subs	r6, #1
 800c5fc:	e79d      	b.n	800c53a <__multiply+0x82>
 800c5fe:	bf00      	nop
 800c600:	0800da21 	.word	0x0800da21
 800c604:	0800db10 	.word	0x0800db10

0800c608 <__pow5mult>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	4615      	mov	r5, r2
 800c60e:	f012 0203 	ands.w	r2, r2, #3
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	d007      	beq.n	800c628 <__pow5mult+0x20>
 800c618:	4c25      	ldr	r4, [pc, #148]	; (800c6b0 <__pow5mult+0xa8>)
 800c61a:	3a01      	subs	r2, #1
 800c61c:	2300      	movs	r3, #0
 800c61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c622:	f7ff fe55 	bl	800c2d0 <__multadd>
 800c626:	4607      	mov	r7, r0
 800c628:	10ad      	asrs	r5, r5, #2
 800c62a:	d03d      	beq.n	800c6a8 <__pow5mult+0xa0>
 800c62c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c62e:	b97c      	cbnz	r4, 800c650 <__pow5mult+0x48>
 800c630:	2010      	movs	r0, #16
 800c632:	f7ff fdc3 	bl	800c1bc <malloc>
 800c636:	4602      	mov	r2, r0
 800c638:	6270      	str	r0, [r6, #36]	; 0x24
 800c63a:	b928      	cbnz	r0, 800c648 <__pow5mult+0x40>
 800c63c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c640:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <__pow5mult+0xac>)
 800c642:	481d      	ldr	r0, [pc, #116]	; (800c6b8 <__pow5mult+0xb0>)
 800c644:	f7fe f98a 	bl	800a95c <__assert_func>
 800c648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c64c:	6004      	str	r4, [r0, #0]
 800c64e:	60c4      	str	r4, [r0, #12]
 800c650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c658:	b94c      	cbnz	r4, 800c66e <__pow5mult+0x66>
 800c65a:	f240 2171 	movw	r1, #625	; 0x271
 800c65e:	4630      	mov	r0, r6
 800c660:	f7ff ff14 	bl	800c48c <__i2b>
 800c664:	2300      	movs	r3, #0
 800c666:	4604      	mov	r4, r0
 800c668:	f8c8 0008 	str.w	r0, [r8, #8]
 800c66c:	6003      	str	r3, [r0, #0]
 800c66e:	f04f 0900 	mov.w	r9, #0
 800c672:	07eb      	lsls	r3, r5, #31
 800c674:	d50a      	bpl.n	800c68c <__pow5mult+0x84>
 800c676:	4639      	mov	r1, r7
 800c678:	4622      	mov	r2, r4
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ff1c 	bl	800c4b8 <__multiply>
 800c680:	4680      	mov	r8, r0
 800c682:	4639      	mov	r1, r7
 800c684:	4630      	mov	r0, r6
 800c686:	f7ff fe01 	bl	800c28c <_Bfree>
 800c68a:	4647      	mov	r7, r8
 800c68c:	106d      	asrs	r5, r5, #1
 800c68e:	d00b      	beq.n	800c6a8 <__pow5mult+0xa0>
 800c690:	6820      	ldr	r0, [r4, #0]
 800c692:	b938      	cbnz	r0, 800c6a4 <__pow5mult+0x9c>
 800c694:	4622      	mov	r2, r4
 800c696:	4621      	mov	r1, r4
 800c698:	4630      	mov	r0, r6
 800c69a:	f7ff ff0d 	bl	800c4b8 <__multiply>
 800c69e:	6020      	str	r0, [r4, #0]
 800c6a0:	f8c0 9000 	str.w	r9, [r0]
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	e7e4      	b.n	800c672 <__pow5mult+0x6a>
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ae:	bf00      	nop
 800c6b0:	0800dc60 	.word	0x0800dc60
 800c6b4:	0800d808 	.word	0x0800d808
 800c6b8:	0800db10 	.word	0x0800db10

0800c6bc <__lshift>:
 800c6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	4607      	mov	r7, r0
 800c6c4:	4691      	mov	r9, r2
 800c6c6:	6923      	ldr	r3, [r4, #16]
 800c6c8:	6849      	ldr	r1, [r1, #4]
 800c6ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6ce:	68a3      	ldr	r3, [r4, #8]
 800c6d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6d4:	f108 0601 	add.w	r6, r8, #1
 800c6d8:	42b3      	cmp	r3, r6
 800c6da:	db0b      	blt.n	800c6f4 <__lshift+0x38>
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff fd95 	bl	800c20c <_Balloc>
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	b948      	cbnz	r0, 800c6fa <__lshift+0x3e>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6ec:	4b29      	ldr	r3, [pc, #164]	; (800c794 <__lshift+0xd8>)
 800c6ee:	482a      	ldr	r0, [pc, #168]	; (800c798 <__lshift+0xdc>)
 800c6f0:	f7fe f934 	bl	800a95c <__assert_func>
 800c6f4:	3101      	adds	r1, #1
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	e7ee      	b.n	800c6d8 <__lshift+0x1c>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f100 0114 	add.w	r1, r0, #20
 800c700:	f100 0210 	add.w	r2, r0, #16
 800c704:	4618      	mov	r0, r3
 800c706:	4553      	cmp	r3, sl
 800c708:	db37      	blt.n	800c77a <__lshift+0xbe>
 800c70a:	6920      	ldr	r0, [r4, #16]
 800c70c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c710:	f104 0314 	add.w	r3, r4, #20
 800c714:	f019 091f 	ands.w	r9, r9, #31
 800c718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c71c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c720:	d02f      	beq.n	800c782 <__lshift+0xc6>
 800c722:	468a      	mov	sl, r1
 800c724:	f04f 0c00 	mov.w	ip, #0
 800c728:	f1c9 0e20 	rsb	lr, r9, #32
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	fa02 f209 	lsl.w	r2, r2, r9
 800c732:	ea42 020c 	orr.w	r2, r2, ip
 800c736:	f84a 2b04 	str.w	r2, [sl], #4
 800c73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c73e:	4298      	cmp	r0, r3
 800c740:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c744:	d8f2      	bhi.n	800c72c <__lshift+0x70>
 800c746:	1b03      	subs	r3, r0, r4
 800c748:	3b15      	subs	r3, #21
 800c74a:	f023 0303 	bic.w	r3, r3, #3
 800c74e:	3304      	adds	r3, #4
 800c750:	f104 0215 	add.w	r2, r4, #21
 800c754:	4290      	cmp	r0, r2
 800c756:	bf38      	it	cc
 800c758:	2304      	movcc	r3, #4
 800c75a:	f841 c003 	str.w	ip, [r1, r3]
 800c75e:	f1bc 0f00 	cmp.w	ip, #0
 800c762:	d001      	beq.n	800c768 <__lshift+0xac>
 800c764:	f108 0602 	add.w	r6, r8, #2
 800c768:	3e01      	subs	r6, #1
 800c76a:	4638      	mov	r0, r7
 800c76c:	4621      	mov	r1, r4
 800c76e:	612e      	str	r6, [r5, #16]
 800c770:	f7ff fd8c 	bl	800c28c <_Bfree>
 800c774:	4628      	mov	r0, r5
 800c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c77a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c77e:	3301      	adds	r3, #1
 800c780:	e7c1      	b.n	800c706 <__lshift+0x4a>
 800c782:	3904      	subs	r1, #4
 800c784:	f853 2b04 	ldr.w	r2, [r3], #4
 800c788:	4298      	cmp	r0, r3
 800c78a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c78e:	d8f9      	bhi.n	800c784 <__lshift+0xc8>
 800c790:	e7ea      	b.n	800c768 <__lshift+0xac>
 800c792:	bf00      	nop
 800c794:	0800da21 	.word	0x0800da21
 800c798:	0800db10 	.word	0x0800db10

0800c79c <__mcmp>:
 800c79c:	4603      	mov	r3, r0
 800c79e:	690a      	ldr	r2, [r1, #16]
 800c7a0:	6900      	ldr	r0, [r0, #16]
 800c7a2:	b530      	push	{r4, r5, lr}
 800c7a4:	1a80      	subs	r0, r0, r2
 800c7a6:	d10d      	bne.n	800c7c4 <__mcmp+0x28>
 800c7a8:	3314      	adds	r3, #20
 800c7aa:	3114      	adds	r1, #20
 800c7ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7bc:	4295      	cmp	r5, r2
 800c7be:	d002      	beq.n	800c7c6 <__mcmp+0x2a>
 800c7c0:	d304      	bcc.n	800c7cc <__mcmp+0x30>
 800c7c2:	2001      	movs	r0, #1
 800c7c4:	bd30      	pop	{r4, r5, pc}
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	d3f4      	bcc.n	800c7b4 <__mcmp+0x18>
 800c7ca:	e7fb      	b.n	800c7c4 <__mcmp+0x28>
 800c7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d0:	e7f8      	b.n	800c7c4 <__mcmp+0x28>
	...

0800c7d4 <__mdiff>:
 800c7d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	460d      	mov	r5, r1
 800c7da:	4607      	mov	r7, r0
 800c7dc:	4611      	mov	r1, r2
 800c7de:	4628      	mov	r0, r5
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	f7ff ffdb 	bl	800c79c <__mcmp>
 800c7e6:	1e06      	subs	r6, r0, #0
 800c7e8:	d111      	bne.n	800c80e <__mdiff+0x3a>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	f7ff fd0d 	bl	800c20c <_Balloc>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	b928      	cbnz	r0, 800c802 <__mdiff+0x2e>
 800c7f6:	f240 2132 	movw	r1, #562	; 0x232
 800c7fa:	4b3a      	ldr	r3, [pc, #232]	; (800c8e4 <__mdiff+0x110>)
 800c7fc:	483a      	ldr	r0, [pc, #232]	; (800c8e8 <__mdiff+0x114>)
 800c7fe:	f7fe f8ad 	bl	800a95c <__assert_func>
 800c802:	2301      	movs	r3, #1
 800c804:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c808:	4610      	mov	r0, r2
 800c80a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80e:	bfa4      	itt	ge
 800c810:	4623      	movge	r3, r4
 800c812:	462c      	movge	r4, r5
 800c814:	4638      	mov	r0, r7
 800c816:	6861      	ldr	r1, [r4, #4]
 800c818:	bfa6      	itte	ge
 800c81a:	461d      	movge	r5, r3
 800c81c:	2600      	movge	r6, #0
 800c81e:	2601      	movlt	r6, #1
 800c820:	f7ff fcf4 	bl	800c20c <_Balloc>
 800c824:	4602      	mov	r2, r0
 800c826:	b918      	cbnz	r0, 800c830 <__mdiff+0x5c>
 800c828:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c82c:	4b2d      	ldr	r3, [pc, #180]	; (800c8e4 <__mdiff+0x110>)
 800c82e:	e7e5      	b.n	800c7fc <__mdiff+0x28>
 800c830:	f102 0814 	add.w	r8, r2, #20
 800c834:	46c2      	mov	sl, r8
 800c836:	f04f 0c00 	mov.w	ip, #0
 800c83a:	6927      	ldr	r7, [r4, #16]
 800c83c:	60c6      	str	r6, [r0, #12]
 800c83e:	692e      	ldr	r6, [r5, #16]
 800c840:	f104 0014 	add.w	r0, r4, #20
 800c844:	f105 0914 	add.w	r9, r5, #20
 800c848:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c84c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c850:	3410      	adds	r4, #16
 800c852:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c856:	f859 3b04 	ldr.w	r3, [r9], #4
 800c85a:	fa1f f18b 	uxth.w	r1, fp
 800c85e:	448c      	add	ip, r1
 800c860:	b299      	uxth	r1, r3
 800c862:	0c1b      	lsrs	r3, r3, #16
 800c864:	ebac 0101 	sub.w	r1, ip, r1
 800c868:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c86c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c870:	b289      	uxth	r1, r1
 800c872:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c876:	454e      	cmp	r6, r9
 800c878:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c87c:	f84a 3b04 	str.w	r3, [sl], #4
 800c880:	d8e7      	bhi.n	800c852 <__mdiff+0x7e>
 800c882:	1b73      	subs	r3, r6, r5
 800c884:	3b15      	subs	r3, #21
 800c886:	f023 0303 	bic.w	r3, r3, #3
 800c88a:	3515      	adds	r5, #21
 800c88c:	3304      	adds	r3, #4
 800c88e:	42ae      	cmp	r6, r5
 800c890:	bf38      	it	cc
 800c892:	2304      	movcc	r3, #4
 800c894:	4418      	add	r0, r3
 800c896:	4443      	add	r3, r8
 800c898:	461e      	mov	r6, r3
 800c89a:	4605      	mov	r5, r0
 800c89c:	4575      	cmp	r5, lr
 800c89e:	d30e      	bcc.n	800c8be <__mdiff+0xea>
 800c8a0:	f10e 0103 	add.w	r1, lr, #3
 800c8a4:	1a09      	subs	r1, r1, r0
 800c8a6:	f021 0103 	bic.w	r1, r1, #3
 800c8aa:	3803      	subs	r0, #3
 800c8ac:	4586      	cmp	lr, r0
 800c8ae:	bf38      	it	cc
 800c8b0:	2100      	movcc	r1, #0
 800c8b2:	4419      	add	r1, r3
 800c8b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c8b8:	b18b      	cbz	r3, 800c8de <__mdiff+0x10a>
 800c8ba:	6117      	str	r7, [r2, #16]
 800c8bc:	e7a4      	b.n	800c808 <__mdiff+0x34>
 800c8be:	f855 8b04 	ldr.w	r8, [r5], #4
 800c8c2:	fa1f f188 	uxth.w	r1, r8
 800c8c6:	4461      	add	r1, ip
 800c8c8:	140c      	asrs	r4, r1, #16
 800c8ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8ce:	b289      	uxth	r1, r1
 800c8d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c8d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c8d8:	f846 1b04 	str.w	r1, [r6], #4
 800c8dc:	e7de      	b.n	800c89c <__mdiff+0xc8>
 800c8de:	3f01      	subs	r7, #1
 800c8e0:	e7e8      	b.n	800c8b4 <__mdiff+0xe0>
 800c8e2:	bf00      	nop
 800c8e4:	0800da21 	.word	0x0800da21
 800c8e8:	0800db10 	.word	0x0800db10

0800c8ec <__ulp>:
 800c8ec:	4b11      	ldr	r3, [pc, #68]	; (800c934 <__ulp+0x48>)
 800c8ee:	400b      	ands	r3, r1
 800c8f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dd02      	ble.n	800c8fe <__ulp+0x12>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4770      	bx	lr
 800c8fe:	425b      	negs	r3, r3
 800c900:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c904:	f04f 0000 	mov.w	r0, #0
 800c908:	f04f 0100 	mov.w	r1, #0
 800c90c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c910:	da04      	bge.n	800c91c <__ulp+0x30>
 800c912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c916:	fa43 f102 	asr.w	r1, r3, r2
 800c91a:	4770      	bx	lr
 800c91c:	f1a2 0314 	sub.w	r3, r2, #20
 800c920:	2b1e      	cmp	r3, #30
 800c922:	bfd6      	itet	le
 800c924:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c928:	2301      	movgt	r3, #1
 800c92a:	fa22 f303 	lsrle.w	r3, r2, r3
 800c92e:	4618      	mov	r0, r3
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	7ff00000 	.word	0x7ff00000

0800c938 <__b2d>:
 800c938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c93c:	6907      	ldr	r7, [r0, #16]
 800c93e:	f100 0914 	add.w	r9, r0, #20
 800c942:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c946:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c94a:	f1a7 0804 	sub.w	r8, r7, #4
 800c94e:	4630      	mov	r0, r6
 800c950:	f7ff fd4e 	bl	800c3f0 <__hi0bits>
 800c954:	f1c0 0320 	rsb	r3, r0, #32
 800c958:	280a      	cmp	r0, #10
 800c95a:	600b      	str	r3, [r1, #0]
 800c95c:	491f      	ldr	r1, [pc, #124]	; (800c9dc <__b2d+0xa4>)
 800c95e:	dc17      	bgt.n	800c990 <__b2d+0x58>
 800c960:	45c1      	cmp	r9, r8
 800c962:	bf28      	it	cs
 800c964:	2200      	movcs	r2, #0
 800c966:	f1c0 0c0b 	rsb	ip, r0, #11
 800c96a:	fa26 f30c 	lsr.w	r3, r6, ip
 800c96e:	bf38      	it	cc
 800c970:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c974:	ea43 0501 	orr.w	r5, r3, r1
 800c978:	f100 0315 	add.w	r3, r0, #21
 800c97c:	fa06 f303 	lsl.w	r3, r6, r3
 800c980:	fa22 f20c 	lsr.w	r2, r2, ip
 800c984:	ea43 0402 	orr.w	r4, r3, r2
 800c988:	4620      	mov	r0, r4
 800c98a:	4629      	mov	r1, r5
 800c98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c990:	45c1      	cmp	r9, r8
 800c992:	bf2e      	itee	cs
 800c994:	2200      	movcs	r2, #0
 800c996:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c99a:	f1a7 0808 	subcc.w	r8, r7, #8
 800c99e:	f1b0 030b 	subs.w	r3, r0, #11
 800c9a2:	d016      	beq.n	800c9d2 <__b2d+0x9a>
 800c9a4:	f1c3 0720 	rsb	r7, r3, #32
 800c9a8:	fa22 f107 	lsr.w	r1, r2, r7
 800c9ac:	45c8      	cmp	r8, r9
 800c9ae:	fa06 f603 	lsl.w	r6, r6, r3
 800c9b2:	ea46 0601 	orr.w	r6, r6, r1
 800c9b6:	bf94      	ite	ls
 800c9b8:	2100      	movls	r1, #0
 800c9ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c9be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c9c2:	fa02 f003 	lsl.w	r0, r2, r3
 800c9c6:	40f9      	lsrs	r1, r7
 800c9c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9cc:	ea40 0401 	orr.w	r4, r0, r1
 800c9d0:	e7da      	b.n	800c988 <__b2d+0x50>
 800c9d2:	4614      	mov	r4, r2
 800c9d4:	ea46 0501 	orr.w	r5, r6, r1
 800c9d8:	e7d6      	b.n	800c988 <__b2d+0x50>
 800c9da:	bf00      	nop
 800c9dc:	3ff00000 	.word	0x3ff00000

0800c9e0 <__d2b>:
 800c9e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c9ea:	4690      	mov	r8, r2
 800c9ec:	461d      	mov	r5, r3
 800c9ee:	f7ff fc0d 	bl	800c20c <_Balloc>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	b930      	cbnz	r0, 800ca04 <__d2b+0x24>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	f240 310a 	movw	r1, #778	; 0x30a
 800c9fc:	4b24      	ldr	r3, [pc, #144]	; (800ca90 <__d2b+0xb0>)
 800c9fe:	4825      	ldr	r0, [pc, #148]	; (800ca94 <__d2b+0xb4>)
 800ca00:	f7fd ffac 	bl	800a95c <__assert_func>
 800ca04:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ca08:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ca0c:	bb2d      	cbnz	r5, 800ca5a <__d2b+0x7a>
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	f1b8 0300 	subs.w	r3, r8, #0
 800ca14:	d026      	beq.n	800ca64 <__d2b+0x84>
 800ca16:	4668      	mov	r0, sp
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	f7ff fd09 	bl	800c430 <__lo0bits>
 800ca1e:	9900      	ldr	r1, [sp, #0]
 800ca20:	b1f0      	cbz	r0, 800ca60 <__d2b+0x80>
 800ca22:	9a01      	ldr	r2, [sp, #4]
 800ca24:	f1c0 0320 	rsb	r3, r0, #32
 800ca28:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2c:	430b      	orrs	r3, r1
 800ca2e:	40c2      	lsrs	r2, r0
 800ca30:	6163      	str	r3, [r4, #20]
 800ca32:	9201      	str	r2, [sp, #4]
 800ca34:	9b01      	ldr	r3, [sp, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bf14      	ite	ne
 800ca3a:	2102      	movne	r1, #2
 800ca3c:	2101      	moveq	r1, #1
 800ca3e:	61a3      	str	r3, [r4, #24]
 800ca40:	6121      	str	r1, [r4, #16]
 800ca42:	b1c5      	cbz	r5, 800ca76 <__d2b+0x96>
 800ca44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca48:	4405      	add	r5, r0
 800ca4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca4e:	603d      	str	r5, [r7, #0]
 800ca50:	6030      	str	r0, [r6, #0]
 800ca52:	4620      	mov	r0, r4
 800ca54:	b002      	add	sp, #8
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca5e:	e7d6      	b.n	800ca0e <__d2b+0x2e>
 800ca60:	6161      	str	r1, [r4, #20]
 800ca62:	e7e7      	b.n	800ca34 <__d2b+0x54>
 800ca64:	a801      	add	r0, sp, #4
 800ca66:	f7ff fce3 	bl	800c430 <__lo0bits>
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	6121      	str	r1, [r4, #16]
 800ca70:	6163      	str	r3, [r4, #20]
 800ca72:	3020      	adds	r0, #32
 800ca74:	e7e5      	b.n	800ca42 <__d2b+0x62>
 800ca76:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ca7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca7e:	6038      	str	r0, [r7, #0]
 800ca80:	6918      	ldr	r0, [r3, #16]
 800ca82:	f7ff fcb5 	bl	800c3f0 <__hi0bits>
 800ca86:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ca8a:	6031      	str	r1, [r6, #0]
 800ca8c:	e7e1      	b.n	800ca52 <__d2b+0x72>
 800ca8e:	bf00      	nop
 800ca90:	0800da21 	.word	0x0800da21
 800ca94:	0800db10 	.word	0x0800db10

0800ca98 <__ratio>:
 800ca98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	4688      	mov	r8, r1
 800ca9e:	4669      	mov	r1, sp
 800caa0:	4681      	mov	r9, r0
 800caa2:	f7ff ff49 	bl	800c938 <__b2d>
 800caa6:	460f      	mov	r7, r1
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	4640      	mov	r0, r8
 800caae:	a901      	add	r1, sp, #4
 800cab0:	f7ff ff42 	bl	800c938 <__b2d>
 800cab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cab8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cabc:	468b      	mov	fp, r1
 800cabe:	eba3 0c02 	sub.w	ip, r3, r2
 800cac2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cac6:	1a9b      	subs	r3, r3, r2
 800cac8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cacc:	2b00      	cmp	r3, #0
 800cace:	bfd5      	itete	le
 800cad0:	460a      	movle	r2, r1
 800cad2:	462a      	movgt	r2, r5
 800cad4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cad8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cadc:	bfd8      	it	le
 800cade:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cae2:	465b      	mov	r3, fp
 800cae4:	4602      	mov	r2, r0
 800cae6:	4639      	mov	r1, r7
 800cae8:	4620      	mov	r0, r4
 800caea:	f7f3 ff49 	bl	8000980 <__aeabi_ddiv>
 800caee:	b003      	add	sp, #12
 800caf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caf4 <__copybits>:
 800caf4:	3901      	subs	r1, #1
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	1149      	asrs	r1, r1, #5
 800cafa:	6914      	ldr	r4, [r2, #16]
 800cafc:	3101      	adds	r1, #1
 800cafe:	f102 0314 	add.w	r3, r2, #20
 800cb02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb0a:	1f05      	subs	r5, r0, #4
 800cb0c:	42a3      	cmp	r3, r4
 800cb0e:	d30c      	bcc.n	800cb2a <__copybits+0x36>
 800cb10:	1aa3      	subs	r3, r4, r2
 800cb12:	3b11      	subs	r3, #17
 800cb14:	f023 0303 	bic.w	r3, r3, #3
 800cb18:	3211      	adds	r2, #17
 800cb1a:	42a2      	cmp	r2, r4
 800cb1c:	bf88      	it	hi
 800cb1e:	2300      	movhi	r3, #0
 800cb20:	4418      	add	r0, r3
 800cb22:	2300      	movs	r3, #0
 800cb24:	4288      	cmp	r0, r1
 800cb26:	d305      	bcc.n	800cb34 <__copybits+0x40>
 800cb28:	bd70      	pop	{r4, r5, r6, pc}
 800cb2a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb2e:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb32:	e7eb      	b.n	800cb0c <__copybits+0x18>
 800cb34:	f840 3b04 	str.w	r3, [r0], #4
 800cb38:	e7f4      	b.n	800cb24 <__copybits+0x30>

0800cb3a <__any_on>:
 800cb3a:	f100 0214 	add.w	r2, r0, #20
 800cb3e:	6900      	ldr	r0, [r0, #16]
 800cb40:	114b      	asrs	r3, r1, #5
 800cb42:	4298      	cmp	r0, r3
 800cb44:	b510      	push	{r4, lr}
 800cb46:	db11      	blt.n	800cb6c <__any_on+0x32>
 800cb48:	dd0a      	ble.n	800cb60 <__any_on+0x26>
 800cb4a:	f011 011f 	ands.w	r1, r1, #31
 800cb4e:	d007      	beq.n	800cb60 <__any_on+0x26>
 800cb50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb54:	fa24 f001 	lsr.w	r0, r4, r1
 800cb58:	fa00 f101 	lsl.w	r1, r0, r1
 800cb5c:	428c      	cmp	r4, r1
 800cb5e:	d10b      	bne.n	800cb78 <__any_on+0x3e>
 800cb60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d803      	bhi.n	800cb70 <__any_on+0x36>
 800cb68:	2000      	movs	r0, #0
 800cb6a:	bd10      	pop	{r4, pc}
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	e7f7      	b.n	800cb60 <__any_on+0x26>
 800cb70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb74:	2900      	cmp	r1, #0
 800cb76:	d0f5      	beq.n	800cb64 <__any_on+0x2a>
 800cb78:	2001      	movs	r0, #1
 800cb7a:	e7f6      	b.n	800cb6a <__any_on+0x30>

0800cb7c <_calloc_r>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	fba1 5402 	umull	r5, r4, r1, r2
 800cb82:	b934      	cbnz	r4, 800cb92 <_calloc_r+0x16>
 800cb84:	4629      	mov	r1, r5
 800cb86:	f000 f875 	bl	800cc74 <_malloc_r>
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	b928      	cbnz	r0, 800cb9a <_calloc_r+0x1e>
 800cb8e:	4630      	mov	r0, r6
 800cb90:	bd70      	pop	{r4, r5, r6, pc}
 800cb92:	220c      	movs	r2, #12
 800cb94:	2600      	movs	r6, #0
 800cb96:	6002      	str	r2, [r0, #0]
 800cb98:	e7f9      	b.n	800cb8e <_calloc_r+0x12>
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	f7fb ffeb 	bl	8008b78 <memset>
 800cba2:	e7f4      	b.n	800cb8e <_calloc_r+0x12>

0800cba4 <_free_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4605      	mov	r5, r0
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	d040      	beq.n	800cc2e <_free_r+0x8a>
 800cbac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb0:	1f0c      	subs	r4, r1, #4
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	bfb8      	it	lt
 800cbb6:	18e4      	addlt	r4, r4, r3
 800cbb8:	f000 fcbe 	bl	800d538 <__malloc_lock>
 800cbbc:	4a1c      	ldr	r2, [pc, #112]	; (800cc30 <_free_r+0x8c>)
 800cbbe:	6813      	ldr	r3, [r2, #0]
 800cbc0:	b933      	cbnz	r3, 800cbd0 <_free_r+0x2c>
 800cbc2:	6063      	str	r3, [r4, #4]
 800cbc4:	6014      	str	r4, [r2, #0]
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbcc:	f000 bcba 	b.w	800d544 <__malloc_unlock>
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	d908      	bls.n	800cbe6 <_free_r+0x42>
 800cbd4:	6820      	ldr	r0, [r4, #0]
 800cbd6:	1821      	adds	r1, r4, r0
 800cbd8:	428b      	cmp	r3, r1
 800cbda:	bf01      	itttt	eq
 800cbdc:	6819      	ldreq	r1, [r3, #0]
 800cbde:	685b      	ldreq	r3, [r3, #4]
 800cbe0:	1809      	addeq	r1, r1, r0
 800cbe2:	6021      	streq	r1, [r4, #0]
 800cbe4:	e7ed      	b.n	800cbc2 <_free_r+0x1e>
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	b10b      	cbz	r3, 800cbf0 <_free_r+0x4c>
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	d9fa      	bls.n	800cbe6 <_free_r+0x42>
 800cbf0:	6811      	ldr	r1, [r2, #0]
 800cbf2:	1850      	adds	r0, r2, r1
 800cbf4:	42a0      	cmp	r0, r4
 800cbf6:	d10b      	bne.n	800cc10 <_free_r+0x6c>
 800cbf8:	6820      	ldr	r0, [r4, #0]
 800cbfa:	4401      	add	r1, r0
 800cbfc:	1850      	adds	r0, r2, r1
 800cbfe:	4283      	cmp	r3, r0
 800cc00:	6011      	str	r1, [r2, #0]
 800cc02:	d1e0      	bne.n	800cbc6 <_free_r+0x22>
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	4401      	add	r1, r0
 800cc0a:	6011      	str	r1, [r2, #0]
 800cc0c:	6053      	str	r3, [r2, #4]
 800cc0e:	e7da      	b.n	800cbc6 <_free_r+0x22>
 800cc10:	d902      	bls.n	800cc18 <_free_r+0x74>
 800cc12:	230c      	movs	r3, #12
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	e7d6      	b.n	800cbc6 <_free_r+0x22>
 800cc18:	6820      	ldr	r0, [r4, #0]
 800cc1a:	1821      	adds	r1, r4, r0
 800cc1c:	428b      	cmp	r3, r1
 800cc1e:	bf01      	itttt	eq
 800cc20:	6819      	ldreq	r1, [r3, #0]
 800cc22:	685b      	ldreq	r3, [r3, #4]
 800cc24:	1809      	addeq	r1, r1, r0
 800cc26:	6021      	streq	r1, [r4, #0]
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6054      	str	r4, [r2, #4]
 800cc2c:	e7cb      	b.n	800cbc6 <_free_r+0x22>
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	20000c74 	.word	0x20000c74

0800cc34 <sbrk_aligned>:
 800cc34:	b570      	push	{r4, r5, r6, lr}
 800cc36:	4e0e      	ldr	r6, [pc, #56]	; (800cc70 <sbrk_aligned+0x3c>)
 800cc38:	460c      	mov	r4, r1
 800cc3a:	6831      	ldr	r1, [r6, #0]
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	b911      	cbnz	r1, 800cc46 <sbrk_aligned+0x12>
 800cc40:	f000 fb8e 	bl	800d360 <_sbrk_r>
 800cc44:	6030      	str	r0, [r6, #0]
 800cc46:	4621      	mov	r1, r4
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f000 fb89 	bl	800d360 <_sbrk_r>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	d00a      	beq.n	800cc68 <sbrk_aligned+0x34>
 800cc52:	1cc4      	adds	r4, r0, #3
 800cc54:	f024 0403 	bic.w	r4, r4, #3
 800cc58:	42a0      	cmp	r0, r4
 800cc5a:	d007      	beq.n	800cc6c <sbrk_aligned+0x38>
 800cc5c:	1a21      	subs	r1, r4, r0
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f000 fb7e 	bl	800d360 <_sbrk_r>
 800cc64:	3001      	adds	r0, #1
 800cc66:	d101      	bne.n	800cc6c <sbrk_aligned+0x38>
 800cc68:	f04f 34ff 	mov.w	r4, #4294967295
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	20000c78 	.word	0x20000c78

0800cc74 <_malloc_r>:
 800cc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc78:	1ccd      	adds	r5, r1, #3
 800cc7a:	f025 0503 	bic.w	r5, r5, #3
 800cc7e:	3508      	adds	r5, #8
 800cc80:	2d0c      	cmp	r5, #12
 800cc82:	bf38      	it	cc
 800cc84:	250c      	movcc	r5, #12
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	4607      	mov	r7, r0
 800cc8a:	db01      	blt.n	800cc90 <_malloc_r+0x1c>
 800cc8c:	42a9      	cmp	r1, r5
 800cc8e:	d905      	bls.n	800cc9c <_malloc_r+0x28>
 800cc90:	230c      	movs	r3, #12
 800cc92:	2600      	movs	r6, #0
 800cc94:	603b      	str	r3, [r7, #0]
 800cc96:	4630      	mov	r0, r6
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	4e2e      	ldr	r6, [pc, #184]	; (800cd58 <_malloc_r+0xe4>)
 800cc9e:	f000 fc4b 	bl	800d538 <__malloc_lock>
 800cca2:	6833      	ldr	r3, [r6, #0]
 800cca4:	461c      	mov	r4, r3
 800cca6:	bb34      	cbnz	r4, 800ccf6 <_malloc_r+0x82>
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f7ff ffc2 	bl	800cc34 <sbrk_aligned>
 800ccb0:	1c43      	adds	r3, r0, #1
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	d14d      	bne.n	800cd52 <_malloc_r+0xde>
 800ccb6:	6834      	ldr	r4, [r6, #0]
 800ccb8:	4626      	mov	r6, r4
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	d140      	bne.n	800cd40 <_malloc_r+0xcc>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	4631      	mov	r1, r6
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	eb04 0803 	add.w	r8, r4, r3
 800ccc8:	f000 fb4a 	bl	800d360 <_sbrk_r>
 800cccc:	4580      	cmp	r8, r0
 800ccce:	d13a      	bne.n	800cd46 <_malloc_r+0xd2>
 800ccd0:	6821      	ldr	r1, [r4, #0]
 800ccd2:	3503      	adds	r5, #3
 800ccd4:	1a6d      	subs	r5, r5, r1
 800ccd6:	f025 0503 	bic.w	r5, r5, #3
 800ccda:	3508      	adds	r5, #8
 800ccdc:	2d0c      	cmp	r5, #12
 800ccde:	bf38      	it	cc
 800cce0:	250c      	movcc	r5, #12
 800cce2:	4638      	mov	r0, r7
 800cce4:	4629      	mov	r1, r5
 800cce6:	f7ff ffa5 	bl	800cc34 <sbrk_aligned>
 800ccea:	3001      	adds	r0, #1
 800ccec:	d02b      	beq.n	800cd46 <_malloc_r+0xd2>
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	442b      	add	r3, r5
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	e00e      	b.n	800cd14 <_malloc_r+0xa0>
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	1b52      	subs	r2, r2, r5
 800ccfa:	d41e      	bmi.n	800cd3a <_malloc_r+0xc6>
 800ccfc:	2a0b      	cmp	r2, #11
 800ccfe:	d916      	bls.n	800cd2e <_malloc_r+0xba>
 800cd00:	1961      	adds	r1, r4, r5
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	6025      	str	r5, [r4, #0]
 800cd06:	bf18      	it	ne
 800cd08:	6059      	strne	r1, [r3, #4]
 800cd0a:	6863      	ldr	r3, [r4, #4]
 800cd0c:	bf08      	it	eq
 800cd0e:	6031      	streq	r1, [r6, #0]
 800cd10:	5162      	str	r2, [r4, r5]
 800cd12:	604b      	str	r3, [r1, #4]
 800cd14:	4638      	mov	r0, r7
 800cd16:	f104 060b 	add.w	r6, r4, #11
 800cd1a:	f000 fc13 	bl	800d544 <__malloc_unlock>
 800cd1e:	f026 0607 	bic.w	r6, r6, #7
 800cd22:	1d23      	adds	r3, r4, #4
 800cd24:	1af2      	subs	r2, r6, r3
 800cd26:	d0b6      	beq.n	800cc96 <_malloc_r+0x22>
 800cd28:	1b9b      	subs	r3, r3, r6
 800cd2a:	50a3      	str	r3, [r4, r2]
 800cd2c:	e7b3      	b.n	800cc96 <_malloc_r+0x22>
 800cd2e:	6862      	ldr	r2, [r4, #4]
 800cd30:	42a3      	cmp	r3, r4
 800cd32:	bf0c      	ite	eq
 800cd34:	6032      	streq	r2, [r6, #0]
 800cd36:	605a      	strne	r2, [r3, #4]
 800cd38:	e7ec      	b.n	800cd14 <_malloc_r+0xa0>
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	6864      	ldr	r4, [r4, #4]
 800cd3e:	e7b2      	b.n	800cca6 <_malloc_r+0x32>
 800cd40:	4634      	mov	r4, r6
 800cd42:	6876      	ldr	r6, [r6, #4]
 800cd44:	e7b9      	b.n	800ccba <_malloc_r+0x46>
 800cd46:	230c      	movs	r3, #12
 800cd48:	4638      	mov	r0, r7
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	f000 fbfa 	bl	800d544 <__malloc_unlock>
 800cd50:	e7a1      	b.n	800cc96 <_malloc_r+0x22>
 800cd52:	6025      	str	r5, [r4, #0]
 800cd54:	e7de      	b.n	800cd14 <_malloc_r+0xa0>
 800cd56:	bf00      	nop
 800cd58:	20000c74 	.word	0x20000c74

0800cd5c <__ssputs_r>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	688e      	ldr	r6, [r1, #8]
 800cd62:	4682      	mov	sl, r0
 800cd64:	429e      	cmp	r6, r3
 800cd66:	460c      	mov	r4, r1
 800cd68:	4690      	mov	r8, r2
 800cd6a:	461f      	mov	r7, r3
 800cd6c:	d838      	bhi.n	800cde0 <__ssputs_r+0x84>
 800cd6e:	898a      	ldrh	r2, [r1, #12]
 800cd70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd74:	d032      	beq.n	800cddc <__ssputs_r+0x80>
 800cd76:	6825      	ldr	r5, [r4, #0]
 800cd78:	6909      	ldr	r1, [r1, #16]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	eba5 0901 	sub.w	r9, r5, r1
 800cd80:	6965      	ldr	r5, [r4, #20]
 800cd82:	444b      	add	r3, r9
 800cd84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd8c:	106d      	asrs	r5, r5, #1
 800cd8e:	429d      	cmp	r5, r3
 800cd90:	bf38      	it	cc
 800cd92:	461d      	movcc	r5, r3
 800cd94:	0553      	lsls	r3, r2, #21
 800cd96:	d531      	bpl.n	800cdfc <__ssputs_r+0xa0>
 800cd98:	4629      	mov	r1, r5
 800cd9a:	f7ff ff6b 	bl	800cc74 <_malloc_r>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	b950      	cbnz	r0, 800cdb8 <__ssputs_r+0x5c>
 800cda2:	230c      	movs	r3, #12
 800cda4:	f04f 30ff 	mov.w	r0, #4294967295
 800cda8:	f8ca 3000 	str.w	r3, [sl]
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb8:	464a      	mov	r2, r9
 800cdba:	6921      	ldr	r1, [r4, #16]
 800cdbc:	f7fb fece 	bl	8008b5c <memcpy>
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdca:	81a3      	strh	r3, [r4, #12]
 800cdcc:	6126      	str	r6, [r4, #16]
 800cdce:	444e      	add	r6, r9
 800cdd0:	6026      	str	r6, [r4, #0]
 800cdd2:	463e      	mov	r6, r7
 800cdd4:	6165      	str	r5, [r4, #20]
 800cdd6:	eba5 0509 	sub.w	r5, r5, r9
 800cdda:	60a5      	str	r5, [r4, #8]
 800cddc:	42be      	cmp	r6, r7
 800cdde:	d900      	bls.n	800cde2 <__ssputs_r+0x86>
 800cde0:	463e      	mov	r6, r7
 800cde2:	4632      	mov	r2, r6
 800cde4:	4641      	mov	r1, r8
 800cde6:	6820      	ldr	r0, [r4, #0]
 800cde8:	f000 fb8c 	bl	800d504 <memmove>
 800cdec:	68a3      	ldr	r3, [r4, #8]
 800cdee:	2000      	movs	r0, #0
 800cdf0:	1b9b      	subs	r3, r3, r6
 800cdf2:	60a3      	str	r3, [r4, #8]
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	4433      	add	r3, r6
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	e7db      	b.n	800cdb4 <__ssputs_r+0x58>
 800cdfc:	462a      	mov	r2, r5
 800cdfe:	f000 fba7 	bl	800d550 <_realloc_r>
 800ce02:	4606      	mov	r6, r0
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d1e1      	bne.n	800cdcc <__ssputs_r+0x70>
 800ce08:	4650      	mov	r0, sl
 800ce0a:	6921      	ldr	r1, [r4, #16]
 800ce0c:	f7ff feca 	bl	800cba4 <_free_r>
 800ce10:	e7c7      	b.n	800cda2 <__ssputs_r+0x46>
	...

0800ce14 <_svfiprintf_r>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	4698      	mov	r8, r3
 800ce1a:	898b      	ldrh	r3, [r1, #12]
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	061b      	lsls	r3, r3, #24
 800ce20:	460d      	mov	r5, r1
 800ce22:	4614      	mov	r4, r2
 800ce24:	b09d      	sub	sp, #116	; 0x74
 800ce26:	d50e      	bpl.n	800ce46 <_svfiprintf_r+0x32>
 800ce28:	690b      	ldr	r3, [r1, #16]
 800ce2a:	b963      	cbnz	r3, 800ce46 <_svfiprintf_r+0x32>
 800ce2c:	2140      	movs	r1, #64	; 0x40
 800ce2e:	f7ff ff21 	bl	800cc74 <_malloc_r>
 800ce32:	6028      	str	r0, [r5, #0]
 800ce34:	6128      	str	r0, [r5, #16]
 800ce36:	b920      	cbnz	r0, 800ce42 <_svfiprintf_r+0x2e>
 800ce38:	230c      	movs	r3, #12
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce40:	e0d1      	b.n	800cfe6 <_svfiprintf_r+0x1d2>
 800ce42:	2340      	movs	r3, #64	; 0x40
 800ce44:	616b      	str	r3, [r5, #20]
 800ce46:	2300      	movs	r3, #0
 800ce48:	9309      	str	r3, [sp, #36]	; 0x24
 800ce4a:	2320      	movs	r3, #32
 800ce4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce50:	2330      	movs	r3, #48	; 0x30
 800ce52:	f04f 0901 	mov.w	r9, #1
 800ce56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d000 <_svfiprintf_r+0x1ec>
 800ce5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce62:	4623      	mov	r3, r4
 800ce64:	469a      	mov	sl, r3
 800ce66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce6a:	b10a      	cbz	r2, 800ce70 <_svfiprintf_r+0x5c>
 800ce6c:	2a25      	cmp	r2, #37	; 0x25
 800ce6e:	d1f9      	bne.n	800ce64 <_svfiprintf_r+0x50>
 800ce70:	ebba 0b04 	subs.w	fp, sl, r4
 800ce74:	d00b      	beq.n	800ce8e <_svfiprintf_r+0x7a>
 800ce76:	465b      	mov	r3, fp
 800ce78:	4622      	mov	r2, r4
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	f7ff ff6d 	bl	800cd5c <__ssputs_r>
 800ce82:	3001      	adds	r0, #1
 800ce84:	f000 80aa 	beq.w	800cfdc <_svfiprintf_r+0x1c8>
 800ce88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce8a:	445a      	add	r2, fp
 800ce8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f000 80a2 	beq.w	800cfdc <_svfiprintf_r+0x1c8>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cea2:	f10a 0a01 	add.w	sl, sl, #1
 800cea6:	9304      	str	r3, [sp, #16]
 800cea8:	9307      	str	r3, [sp, #28]
 800ceaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceae:	931a      	str	r3, [sp, #104]	; 0x68
 800ceb0:	4654      	mov	r4, sl
 800ceb2:	2205      	movs	r2, #5
 800ceb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb8:	4851      	ldr	r0, [pc, #324]	; (800d000 <_svfiprintf_r+0x1ec>)
 800ceba:	f7ff f999 	bl	800c1f0 <memchr>
 800cebe:	9a04      	ldr	r2, [sp, #16]
 800cec0:	b9d8      	cbnz	r0, 800cefa <_svfiprintf_r+0xe6>
 800cec2:	06d0      	lsls	r0, r2, #27
 800cec4:	bf44      	itt	mi
 800cec6:	2320      	movmi	r3, #32
 800cec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cecc:	0711      	lsls	r1, r2, #28
 800cece:	bf44      	itt	mi
 800ced0:	232b      	movmi	r3, #43	; 0x2b
 800ced2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ced6:	f89a 3000 	ldrb.w	r3, [sl]
 800ceda:	2b2a      	cmp	r3, #42	; 0x2a
 800cedc:	d015      	beq.n	800cf0a <_svfiprintf_r+0xf6>
 800cede:	4654      	mov	r4, sl
 800cee0:	2000      	movs	r0, #0
 800cee2:	f04f 0c0a 	mov.w	ip, #10
 800cee6:	9a07      	ldr	r2, [sp, #28]
 800cee8:	4621      	mov	r1, r4
 800ceea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceee:	3b30      	subs	r3, #48	; 0x30
 800cef0:	2b09      	cmp	r3, #9
 800cef2:	d94e      	bls.n	800cf92 <_svfiprintf_r+0x17e>
 800cef4:	b1b0      	cbz	r0, 800cf24 <_svfiprintf_r+0x110>
 800cef6:	9207      	str	r2, [sp, #28]
 800cef8:	e014      	b.n	800cf24 <_svfiprintf_r+0x110>
 800cefa:	eba0 0308 	sub.w	r3, r0, r8
 800cefe:	fa09 f303 	lsl.w	r3, r9, r3
 800cf02:	4313      	orrs	r3, r2
 800cf04:	46a2      	mov	sl, r4
 800cf06:	9304      	str	r3, [sp, #16]
 800cf08:	e7d2      	b.n	800ceb0 <_svfiprintf_r+0x9c>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	1d19      	adds	r1, r3, #4
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	9103      	str	r1, [sp, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bfbb      	ittet	lt
 800cf16:	425b      	neglt	r3, r3
 800cf18:	f042 0202 	orrlt.w	r2, r2, #2
 800cf1c:	9307      	strge	r3, [sp, #28]
 800cf1e:	9307      	strlt	r3, [sp, #28]
 800cf20:	bfb8      	it	lt
 800cf22:	9204      	strlt	r2, [sp, #16]
 800cf24:	7823      	ldrb	r3, [r4, #0]
 800cf26:	2b2e      	cmp	r3, #46	; 0x2e
 800cf28:	d10c      	bne.n	800cf44 <_svfiprintf_r+0x130>
 800cf2a:	7863      	ldrb	r3, [r4, #1]
 800cf2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf2e:	d135      	bne.n	800cf9c <_svfiprintf_r+0x188>
 800cf30:	9b03      	ldr	r3, [sp, #12]
 800cf32:	3402      	adds	r4, #2
 800cf34:	1d1a      	adds	r2, r3, #4
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	9203      	str	r2, [sp, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	bfb8      	it	lt
 800cf3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d004 <_svfiprintf_r+0x1f0>
 800cf48:	2203      	movs	r2, #3
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	7821      	ldrb	r1, [r4, #0]
 800cf4e:	f7ff f94f 	bl	800c1f0 <memchr>
 800cf52:	b140      	cbz	r0, 800cf66 <_svfiprintf_r+0x152>
 800cf54:	2340      	movs	r3, #64	; 0x40
 800cf56:	eba0 000a 	sub.w	r0, r0, sl
 800cf5a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf5e:	9b04      	ldr	r3, [sp, #16]
 800cf60:	3401      	adds	r4, #1
 800cf62:	4303      	orrs	r3, r0
 800cf64:	9304      	str	r3, [sp, #16]
 800cf66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6a:	2206      	movs	r2, #6
 800cf6c:	4826      	ldr	r0, [pc, #152]	; (800d008 <_svfiprintf_r+0x1f4>)
 800cf6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf72:	f7ff f93d 	bl	800c1f0 <memchr>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d038      	beq.n	800cfec <_svfiprintf_r+0x1d8>
 800cf7a:	4b24      	ldr	r3, [pc, #144]	; (800d00c <_svfiprintf_r+0x1f8>)
 800cf7c:	bb1b      	cbnz	r3, 800cfc6 <_svfiprintf_r+0x1b2>
 800cf7e:	9b03      	ldr	r3, [sp, #12]
 800cf80:	3307      	adds	r3, #7
 800cf82:	f023 0307 	bic.w	r3, r3, #7
 800cf86:	3308      	adds	r3, #8
 800cf88:	9303      	str	r3, [sp, #12]
 800cf8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf8c:	4433      	add	r3, r6
 800cf8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf90:	e767      	b.n	800ce62 <_svfiprintf_r+0x4e>
 800cf92:	460c      	mov	r4, r1
 800cf94:	2001      	movs	r0, #1
 800cf96:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf9a:	e7a5      	b.n	800cee8 <_svfiprintf_r+0xd4>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f04f 0c0a 	mov.w	ip, #10
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	3401      	adds	r4, #1
 800cfa6:	9305      	str	r3, [sp, #20]
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfae:	3a30      	subs	r2, #48	; 0x30
 800cfb0:	2a09      	cmp	r2, #9
 800cfb2:	d903      	bls.n	800cfbc <_svfiprintf_r+0x1a8>
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d0c5      	beq.n	800cf44 <_svfiprintf_r+0x130>
 800cfb8:	9105      	str	r1, [sp, #20]
 800cfba:	e7c3      	b.n	800cf44 <_svfiprintf_r+0x130>
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfc4:	e7f0      	b.n	800cfa8 <_svfiprintf_r+0x194>
 800cfc6:	ab03      	add	r3, sp, #12
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	462a      	mov	r2, r5
 800cfcc:	4638      	mov	r0, r7
 800cfce:	4b10      	ldr	r3, [pc, #64]	; (800d010 <_svfiprintf_r+0x1fc>)
 800cfd0:	a904      	add	r1, sp, #16
 800cfd2:	f7fb fe77 	bl	8008cc4 <_printf_float>
 800cfd6:	1c42      	adds	r2, r0, #1
 800cfd8:	4606      	mov	r6, r0
 800cfda:	d1d6      	bne.n	800cf8a <_svfiprintf_r+0x176>
 800cfdc:	89ab      	ldrh	r3, [r5, #12]
 800cfde:	065b      	lsls	r3, r3, #25
 800cfe0:	f53f af2c 	bmi.w	800ce3c <_svfiprintf_r+0x28>
 800cfe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe6:	b01d      	add	sp, #116	; 0x74
 800cfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfec:	ab03      	add	r3, sp, #12
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	462a      	mov	r2, r5
 800cff2:	4638      	mov	r0, r7
 800cff4:	4b06      	ldr	r3, [pc, #24]	; (800d010 <_svfiprintf_r+0x1fc>)
 800cff6:	a904      	add	r1, sp, #16
 800cff8:	f7fc f900 	bl	80091fc <_printf_i>
 800cffc:	e7eb      	b.n	800cfd6 <_svfiprintf_r+0x1c2>
 800cffe:	bf00      	nop
 800d000:	0800dc6c 	.word	0x0800dc6c
 800d004:	0800dc72 	.word	0x0800dc72
 800d008:	0800dc76 	.word	0x0800dc76
 800d00c:	08008cc5 	.word	0x08008cc5
 800d010:	0800cd5d 	.word	0x0800cd5d

0800d014 <__sfputc_r>:
 800d014:	6893      	ldr	r3, [r2, #8]
 800d016:	b410      	push	{r4}
 800d018:	3b01      	subs	r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	6093      	str	r3, [r2, #8]
 800d01e:	da07      	bge.n	800d030 <__sfputc_r+0x1c>
 800d020:	6994      	ldr	r4, [r2, #24]
 800d022:	42a3      	cmp	r3, r4
 800d024:	db01      	blt.n	800d02a <__sfputc_r+0x16>
 800d026:	290a      	cmp	r1, #10
 800d028:	d102      	bne.n	800d030 <__sfputc_r+0x1c>
 800d02a:	bc10      	pop	{r4}
 800d02c:	f7fd bbd6 	b.w	800a7dc <__swbuf_r>
 800d030:	6813      	ldr	r3, [r2, #0]
 800d032:	1c58      	adds	r0, r3, #1
 800d034:	6010      	str	r0, [r2, #0]
 800d036:	7019      	strb	r1, [r3, #0]
 800d038:	4608      	mov	r0, r1
 800d03a:	bc10      	pop	{r4}
 800d03c:	4770      	bx	lr

0800d03e <__sfputs_r>:
 800d03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d040:	4606      	mov	r6, r0
 800d042:	460f      	mov	r7, r1
 800d044:	4614      	mov	r4, r2
 800d046:	18d5      	adds	r5, r2, r3
 800d048:	42ac      	cmp	r4, r5
 800d04a:	d101      	bne.n	800d050 <__sfputs_r+0x12>
 800d04c:	2000      	movs	r0, #0
 800d04e:	e007      	b.n	800d060 <__sfputs_r+0x22>
 800d050:	463a      	mov	r2, r7
 800d052:	4630      	mov	r0, r6
 800d054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d058:	f7ff ffdc 	bl	800d014 <__sfputc_r>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d1f3      	bne.n	800d048 <__sfputs_r+0xa>
 800d060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d064 <_vfiprintf_r>:
 800d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d068:	460d      	mov	r5, r1
 800d06a:	4614      	mov	r4, r2
 800d06c:	4698      	mov	r8, r3
 800d06e:	4606      	mov	r6, r0
 800d070:	b09d      	sub	sp, #116	; 0x74
 800d072:	b118      	cbz	r0, 800d07c <_vfiprintf_r+0x18>
 800d074:	6983      	ldr	r3, [r0, #24]
 800d076:	b90b      	cbnz	r3, 800d07c <_vfiprintf_r+0x18>
 800d078:	f7fe fc1e 	bl	800b8b8 <__sinit>
 800d07c:	4b89      	ldr	r3, [pc, #548]	; (800d2a4 <_vfiprintf_r+0x240>)
 800d07e:	429d      	cmp	r5, r3
 800d080:	d11b      	bne.n	800d0ba <_vfiprintf_r+0x56>
 800d082:	6875      	ldr	r5, [r6, #4]
 800d084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d086:	07d9      	lsls	r1, r3, #31
 800d088:	d405      	bmi.n	800d096 <_vfiprintf_r+0x32>
 800d08a:	89ab      	ldrh	r3, [r5, #12]
 800d08c:	059a      	lsls	r2, r3, #22
 800d08e:	d402      	bmi.n	800d096 <_vfiprintf_r+0x32>
 800d090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d092:	f7ff f82c 	bl	800c0ee <__retarget_lock_acquire_recursive>
 800d096:	89ab      	ldrh	r3, [r5, #12]
 800d098:	071b      	lsls	r3, r3, #28
 800d09a:	d501      	bpl.n	800d0a0 <_vfiprintf_r+0x3c>
 800d09c:	692b      	ldr	r3, [r5, #16]
 800d09e:	b9eb      	cbnz	r3, 800d0dc <_vfiprintf_r+0x78>
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f7fd fbec 	bl	800a880 <__swsetup_r>
 800d0a8:	b1c0      	cbz	r0, 800d0dc <_vfiprintf_r+0x78>
 800d0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ac:	07dc      	lsls	r4, r3, #31
 800d0ae:	d50e      	bpl.n	800d0ce <_vfiprintf_r+0x6a>
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	b01d      	add	sp, #116	; 0x74
 800d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ba:	4b7b      	ldr	r3, [pc, #492]	; (800d2a8 <_vfiprintf_r+0x244>)
 800d0bc:	429d      	cmp	r5, r3
 800d0be:	d101      	bne.n	800d0c4 <_vfiprintf_r+0x60>
 800d0c0:	68b5      	ldr	r5, [r6, #8]
 800d0c2:	e7df      	b.n	800d084 <_vfiprintf_r+0x20>
 800d0c4:	4b79      	ldr	r3, [pc, #484]	; (800d2ac <_vfiprintf_r+0x248>)
 800d0c6:	429d      	cmp	r5, r3
 800d0c8:	bf08      	it	eq
 800d0ca:	68f5      	ldreq	r5, [r6, #12]
 800d0cc:	e7da      	b.n	800d084 <_vfiprintf_r+0x20>
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	0598      	lsls	r0, r3, #22
 800d0d2:	d4ed      	bmi.n	800d0b0 <_vfiprintf_r+0x4c>
 800d0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0d6:	f7ff f80b 	bl	800c0f0 <__retarget_lock_release_recursive>
 800d0da:	e7e9      	b.n	800d0b0 <_vfiprintf_r+0x4c>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e0:	2320      	movs	r3, #32
 800d0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0e6:	2330      	movs	r3, #48	; 0x30
 800d0e8:	f04f 0901 	mov.w	r9, #1
 800d0ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d2b0 <_vfiprintf_r+0x24c>
 800d0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0f8:	4623      	mov	r3, r4
 800d0fa:	469a      	mov	sl, r3
 800d0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d100:	b10a      	cbz	r2, 800d106 <_vfiprintf_r+0xa2>
 800d102:	2a25      	cmp	r2, #37	; 0x25
 800d104:	d1f9      	bne.n	800d0fa <_vfiprintf_r+0x96>
 800d106:	ebba 0b04 	subs.w	fp, sl, r4
 800d10a:	d00b      	beq.n	800d124 <_vfiprintf_r+0xc0>
 800d10c:	465b      	mov	r3, fp
 800d10e:	4622      	mov	r2, r4
 800d110:	4629      	mov	r1, r5
 800d112:	4630      	mov	r0, r6
 800d114:	f7ff ff93 	bl	800d03e <__sfputs_r>
 800d118:	3001      	adds	r0, #1
 800d11a:	f000 80aa 	beq.w	800d272 <_vfiprintf_r+0x20e>
 800d11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d120:	445a      	add	r2, fp
 800d122:	9209      	str	r2, [sp, #36]	; 0x24
 800d124:	f89a 3000 	ldrb.w	r3, [sl]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 80a2 	beq.w	800d272 <_vfiprintf_r+0x20e>
 800d12e:	2300      	movs	r3, #0
 800d130:	f04f 32ff 	mov.w	r2, #4294967295
 800d134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d138:	f10a 0a01 	add.w	sl, sl, #1
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	9307      	str	r3, [sp, #28]
 800d140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d144:	931a      	str	r3, [sp, #104]	; 0x68
 800d146:	4654      	mov	r4, sl
 800d148:	2205      	movs	r2, #5
 800d14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d14e:	4858      	ldr	r0, [pc, #352]	; (800d2b0 <_vfiprintf_r+0x24c>)
 800d150:	f7ff f84e 	bl	800c1f0 <memchr>
 800d154:	9a04      	ldr	r2, [sp, #16]
 800d156:	b9d8      	cbnz	r0, 800d190 <_vfiprintf_r+0x12c>
 800d158:	06d1      	lsls	r1, r2, #27
 800d15a:	bf44      	itt	mi
 800d15c:	2320      	movmi	r3, #32
 800d15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d162:	0713      	lsls	r3, r2, #28
 800d164:	bf44      	itt	mi
 800d166:	232b      	movmi	r3, #43	; 0x2b
 800d168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d16c:	f89a 3000 	ldrb.w	r3, [sl]
 800d170:	2b2a      	cmp	r3, #42	; 0x2a
 800d172:	d015      	beq.n	800d1a0 <_vfiprintf_r+0x13c>
 800d174:	4654      	mov	r4, sl
 800d176:	2000      	movs	r0, #0
 800d178:	f04f 0c0a 	mov.w	ip, #10
 800d17c:	9a07      	ldr	r2, [sp, #28]
 800d17e:	4621      	mov	r1, r4
 800d180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d184:	3b30      	subs	r3, #48	; 0x30
 800d186:	2b09      	cmp	r3, #9
 800d188:	d94e      	bls.n	800d228 <_vfiprintf_r+0x1c4>
 800d18a:	b1b0      	cbz	r0, 800d1ba <_vfiprintf_r+0x156>
 800d18c:	9207      	str	r2, [sp, #28]
 800d18e:	e014      	b.n	800d1ba <_vfiprintf_r+0x156>
 800d190:	eba0 0308 	sub.w	r3, r0, r8
 800d194:	fa09 f303 	lsl.w	r3, r9, r3
 800d198:	4313      	orrs	r3, r2
 800d19a:	46a2      	mov	sl, r4
 800d19c:	9304      	str	r3, [sp, #16]
 800d19e:	e7d2      	b.n	800d146 <_vfiprintf_r+0xe2>
 800d1a0:	9b03      	ldr	r3, [sp, #12]
 800d1a2:	1d19      	adds	r1, r3, #4
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	9103      	str	r1, [sp, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	bfbb      	ittet	lt
 800d1ac:	425b      	neglt	r3, r3
 800d1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d1b2:	9307      	strge	r3, [sp, #28]
 800d1b4:	9307      	strlt	r3, [sp, #28]
 800d1b6:	bfb8      	it	lt
 800d1b8:	9204      	strlt	r2, [sp, #16]
 800d1ba:	7823      	ldrb	r3, [r4, #0]
 800d1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d1be:	d10c      	bne.n	800d1da <_vfiprintf_r+0x176>
 800d1c0:	7863      	ldrb	r3, [r4, #1]
 800d1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1c4:	d135      	bne.n	800d232 <_vfiprintf_r+0x1ce>
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	3402      	adds	r4, #2
 800d1ca:	1d1a      	adds	r2, r3, #4
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	9203      	str	r2, [sp, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bfb8      	it	lt
 800d1d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1d8:	9305      	str	r3, [sp, #20]
 800d1da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d2b4 <_vfiprintf_r+0x250>
 800d1de:	2203      	movs	r2, #3
 800d1e0:	4650      	mov	r0, sl
 800d1e2:	7821      	ldrb	r1, [r4, #0]
 800d1e4:	f7ff f804 	bl	800c1f0 <memchr>
 800d1e8:	b140      	cbz	r0, 800d1fc <_vfiprintf_r+0x198>
 800d1ea:	2340      	movs	r3, #64	; 0x40
 800d1ec:	eba0 000a 	sub.w	r0, r0, sl
 800d1f0:	fa03 f000 	lsl.w	r0, r3, r0
 800d1f4:	9b04      	ldr	r3, [sp, #16]
 800d1f6:	3401      	adds	r4, #1
 800d1f8:	4303      	orrs	r3, r0
 800d1fa:	9304      	str	r3, [sp, #16]
 800d1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d200:	2206      	movs	r2, #6
 800d202:	482d      	ldr	r0, [pc, #180]	; (800d2b8 <_vfiprintf_r+0x254>)
 800d204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d208:	f7fe fff2 	bl	800c1f0 <memchr>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d03f      	beq.n	800d290 <_vfiprintf_r+0x22c>
 800d210:	4b2a      	ldr	r3, [pc, #168]	; (800d2bc <_vfiprintf_r+0x258>)
 800d212:	bb1b      	cbnz	r3, 800d25c <_vfiprintf_r+0x1f8>
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	3307      	adds	r3, #7
 800d218:	f023 0307 	bic.w	r3, r3, #7
 800d21c:	3308      	adds	r3, #8
 800d21e:	9303      	str	r3, [sp, #12]
 800d220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d222:	443b      	add	r3, r7
 800d224:	9309      	str	r3, [sp, #36]	; 0x24
 800d226:	e767      	b.n	800d0f8 <_vfiprintf_r+0x94>
 800d228:	460c      	mov	r4, r1
 800d22a:	2001      	movs	r0, #1
 800d22c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d230:	e7a5      	b.n	800d17e <_vfiprintf_r+0x11a>
 800d232:	2300      	movs	r3, #0
 800d234:	f04f 0c0a 	mov.w	ip, #10
 800d238:	4619      	mov	r1, r3
 800d23a:	3401      	adds	r4, #1
 800d23c:	9305      	str	r3, [sp, #20]
 800d23e:	4620      	mov	r0, r4
 800d240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d244:	3a30      	subs	r2, #48	; 0x30
 800d246:	2a09      	cmp	r2, #9
 800d248:	d903      	bls.n	800d252 <_vfiprintf_r+0x1ee>
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0c5      	beq.n	800d1da <_vfiprintf_r+0x176>
 800d24e:	9105      	str	r1, [sp, #20]
 800d250:	e7c3      	b.n	800d1da <_vfiprintf_r+0x176>
 800d252:	4604      	mov	r4, r0
 800d254:	2301      	movs	r3, #1
 800d256:	fb0c 2101 	mla	r1, ip, r1, r2
 800d25a:	e7f0      	b.n	800d23e <_vfiprintf_r+0x1da>
 800d25c:	ab03      	add	r3, sp, #12
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	462a      	mov	r2, r5
 800d262:	4630      	mov	r0, r6
 800d264:	4b16      	ldr	r3, [pc, #88]	; (800d2c0 <_vfiprintf_r+0x25c>)
 800d266:	a904      	add	r1, sp, #16
 800d268:	f7fb fd2c 	bl	8008cc4 <_printf_float>
 800d26c:	4607      	mov	r7, r0
 800d26e:	1c78      	adds	r0, r7, #1
 800d270:	d1d6      	bne.n	800d220 <_vfiprintf_r+0x1bc>
 800d272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d274:	07d9      	lsls	r1, r3, #31
 800d276:	d405      	bmi.n	800d284 <_vfiprintf_r+0x220>
 800d278:	89ab      	ldrh	r3, [r5, #12]
 800d27a:	059a      	lsls	r2, r3, #22
 800d27c:	d402      	bmi.n	800d284 <_vfiprintf_r+0x220>
 800d27e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d280:	f7fe ff36 	bl	800c0f0 <__retarget_lock_release_recursive>
 800d284:	89ab      	ldrh	r3, [r5, #12]
 800d286:	065b      	lsls	r3, r3, #25
 800d288:	f53f af12 	bmi.w	800d0b0 <_vfiprintf_r+0x4c>
 800d28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d28e:	e711      	b.n	800d0b4 <_vfiprintf_r+0x50>
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	462a      	mov	r2, r5
 800d296:	4630      	mov	r0, r6
 800d298:	4b09      	ldr	r3, [pc, #36]	; (800d2c0 <_vfiprintf_r+0x25c>)
 800d29a:	a904      	add	r1, sp, #16
 800d29c:	f7fb ffae 	bl	80091fc <_printf_i>
 800d2a0:	e7e4      	b.n	800d26c <_vfiprintf_r+0x208>
 800d2a2:	bf00      	nop
 800d2a4:	0800da54 	.word	0x0800da54
 800d2a8:	0800da74 	.word	0x0800da74
 800d2ac:	0800da34 	.word	0x0800da34
 800d2b0:	0800dc6c 	.word	0x0800dc6c
 800d2b4:	0800dc72 	.word	0x0800dc72
 800d2b8:	0800dc76 	.word	0x0800dc76
 800d2bc:	08008cc5 	.word	0x08008cc5
 800d2c0:	0800d03f 	.word	0x0800d03f

0800d2c4 <_putc_r>:
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	b118      	cbz	r0, 800d2d6 <_putc_r+0x12>
 800d2ce:	6983      	ldr	r3, [r0, #24]
 800d2d0:	b90b      	cbnz	r3, 800d2d6 <_putc_r+0x12>
 800d2d2:	f7fe faf1 	bl	800b8b8 <__sinit>
 800d2d6:	4b1c      	ldr	r3, [pc, #112]	; (800d348 <_putc_r+0x84>)
 800d2d8:	429c      	cmp	r4, r3
 800d2da:	d124      	bne.n	800d326 <_putc_r+0x62>
 800d2dc:	6874      	ldr	r4, [r6, #4]
 800d2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2e0:	07d8      	lsls	r0, r3, #31
 800d2e2:	d405      	bmi.n	800d2f0 <_putc_r+0x2c>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	0599      	lsls	r1, r3, #22
 800d2e8:	d402      	bmi.n	800d2f0 <_putc_r+0x2c>
 800d2ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ec:	f7fe feff 	bl	800c0ee <__retarget_lock_acquire_recursive>
 800d2f0:	68a3      	ldr	r3, [r4, #8]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	60a3      	str	r3, [r4, #8]
 800d2f8:	da05      	bge.n	800d306 <_putc_r+0x42>
 800d2fa:	69a2      	ldr	r2, [r4, #24]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	db1c      	blt.n	800d33a <_putc_r+0x76>
 800d300:	b2eb      	uxtb	r3, r5
 800d302:	2b0a      	cmp	r3, #10
 800d304:	d019      	beq.n	800d33a <_putc_r+0x76>
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	6022      	str	r2, [r4, #0]
 800d30c:	701d      	strb	r5, [r3, #0]
 800d30e:	b2ed      	uxtb	r5, r5
 800d310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d312:	07da      	lsls	r2, r3, #31
 800d314:	d405      	bmi.n	800d322 <_putc_r+0x5e>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	059b      	lsls	r3, r3, #22
 800d31a:	d402      	bmi.n	800d322 <_putc_r+0x5e>
 800d31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d31e:	f7fe fee7 	bl	800c0f0 <__retarget_lock_release_recursive>
 800d322:	4628      	mov	r0, r5
 800d324:	bd70      	pop	{r4, r5, r6, pc}
 800d326:	4b09      	ldr	r3, [pc, #36]	; (800d34c <_putc_r+0x88>)
 800d328:	429c      	cmp	r4, r3
 800d32a:	d101      	bne.n	800d330 <_putc_r+0x6c>
 800d32c:	68b4      	ldr	r4, [r6, #8]
 800d32e:	e7d6      	b.n	800d2de <_putc_r+0x1a>
 800d330:	4b07      	ldr	r3, [pc, #28]	; (800d350 <_putc_r+0x8c>)
 800d332:	429c      	cmp	r4, r3
 800d334:	bf08      	it	eq
 800d336:	68f4      	ldreq	r4, [r6, #12]
 800d338:	e7d1      	b.n	800d2de <_putc_r+0x1a>
 800d33a:	4629      	mov	r1, r5
 800d33c:	4622      	mov	r2, r4
 800d33e:	4630      	mov	r0, r6
 800d340:	f7fd fa4c 	bl	800a7dc <__swbuf_r>
 800d344:	4605      	mov	r5, r0
 800d346:	e7e3      	b.n	800d310 <_putc_r+0x4c>
 800d348:	0800da54 	.word	0x0800da54
 800d34c:	0800da74 	.word	0x0800da74
 800d350:	0800da34 	.word	0x0800da34

0800d354 <nan>:
 800d354:	2000      	movs	r0, #0
 800d356:	4901      	ldr	r1, [pc, #4]	; (800d35c <nan+0x8>)
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	7ff80000 	.word	0x7ff80000

0800d360 <_sbrk_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	2300      	movs	r3, #0
 800d364:	4d05      	ldr	r5, [pc, #20]	; (800d37c <_sbrk_r+0x1c>)
 800d366:	4604      	mov	r4, r0
 800d368:	4608      	mov	r0, r1
 800d36a:	602b      	str	r3, [r5, #0]
 800d36c:	f7f6 f918 	bl	80035a0 <_sbrk>
 800d370:	1c43      	adds	r3, r0, #1
 800d372:	d102      	bne.n	800d37a <_sbrk_r+0x1a>
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	b103      	cbz	r3, 800d37a <_sbrk_r+0x1a>
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	bd38      	pop	{r3, r4, r5, pc}
 800d37c:	20000c7c 	.word	0x20000c7c

0800d380 <__sread>:
 800d380:	b510      	push	{r4, lr}
 800d382:	460c      	mov	r4, r1
 800d384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d388:	f000 f912 	bl	800d5b0 <_read_r>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	bfab      	itete	ge
 800d390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d392:	89a3      	ldrhlt	r3, [r4, #12]
 800d394:	181b      	addge	r3, r3, r0
 800d396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d39a:	bfac      	ite	ge
 800d39c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d39e:	81a3      	strhlt	r3, [r4, #12]
 800d3a0:	bd10      	pop	{r4, pc}

0800d3a2 <__swrite>:
 800d3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a6:	461f      	mov	r7, r3
 800d3a8:	898b      	ldrh	r3, [r1, #12]
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	05db      	lsls	r3, r3, #23
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	d505      	bpl.n	800d3c0 <__swrite+0x1e>
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3bc:	f000 f890 	bl	800d4e0 <_lseek_r>
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3c8:	81a3      	strh	r3, [r4, #12]
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	463b      	mov	r3, r7
 800d3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d6:	f000 b837 	b.w	800d448 <_write_r>

0800d3da <__sseek>:
 800d3da:	b510      	push	{r4, lr}
 800d3dc:	460c      	mov	r4, r1
 800d3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e2:	f000 f87d 	bl	800d4e0 <_lseek_r>
 800d3e6:	1c43      	adds	r3, r0, #1
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	bf15      	itete	ne
 800d3ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3f6:	81a3      	strheq	r3, [r4, #12]
 800d3f8:	bf18      	it	ne
 800d3fa:	81a3      	strhne	r3, [r4, #12]
 800d3fc:	bd10      	pop	{r4, pc}

0800d3fe <__sclose>:
 800d3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d402:	f000 b83b 	b.w	800d47c <_close_r>

0800d406 <strncmp>:
 800d406:	4603      	mov	r3, r0
 800d408:	b510      	push	{r4, lr}
 800d40a:	b172      	cbz	r2, 800d42a <strncmp+0x24>
 800d40c:	3901      	subs	r1, #1
 800d40e:	1884      	adds	r4, r0, r2
 800d410:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d414:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d418:	4290      	cmp	r0, r2
 800d41a:	d101      	bne.n	800d420 <strncmp+0x1a>
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	d101      	bne.n	800d424 <strncmp+0x1e>
 800d420:	1a80      	subs	r0, r0, r2
 800d422:	bd10      	pop	{r4, pc}
 800d424:	2800      	cmp	r0, #0
 800d426:	d1f3      	bne.n	800d410 <strncmp+0xa>
 800d428:	e7fa      	b.n	800d420 <strncmp+0x1a>
 800d42a:	4610      	mov	r0, r2
 800d42c:	e7f9      	b.n	800d422 <strncmp+0x1c>

0800d42e <__ascii_wctomb>:
 800d42e:	4603      	mov	r3, r0
 800d430:	4608      	mov	r0, r1
 800d432:	b141      	cbz	r1, 800d446 <__ascii_wctomb+0x18>
 800d434:	2aff      	cmp	r2, #255	; 0xff
 800d436:	d904      	bls.n	800d442 <__ascii_wctomb+0x14>
 800d438:	228a      	movs	r2, #138	; 0x8a
 800d43a:	f04f 30ff 	mov.w	r0, #4294967295
 800d43e:	601a      	str	r2, [r3, #0]
 800d440:	4770      	bx	lr
 800d442:	2001      	movs	r0, #1
 800d444:	700a      	strb	r2, [r1, #0]
 800d446:	4770      	bx	lr

0800d448 <_write_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	4611      	mov	r1, r2
 800d450:	2200      	movs	r2, #0
 800d452:	4d05      	ldr	r5, [pc, #20]	; (800d468 <_write_r+0x20>)
 800d454:	602a      	str	r2, [r5, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	f7f6 f856 	bl	8003508 <_write>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_write_r+0x1e>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_write_r+0x1e>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	20000c7c 	.word	0x20000c7c

0800d46c <abort>:
 800d46c:	2006      	movs	r0, #6
 800d46e:	b508      	push	{r3, lr}
 800d470:	f000 f8d8 	bl	800d624 <raise>
 800d474:	2001      	movs	r0, #1
 800d476:	f7f6 f820 	bl	80034ba <_exit>
	...

0800d47c <_close_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	2300      	movs	r3, #0
 800d480:	4d05      	ldr	r5, [pc, #20]	; (800d498 <_close_r+0x1c>)
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f6 f85a 	bl	8003540 <_close>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_close_r+0x1a>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_close_r+0x1a>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	20000c7c 	.word	0x20000c7c

0800d49c <_fstat_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4d06      	ldr	r5, [pc, #24]	; (800d4bc <_fstat_r+0x20>)
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	602b      	str	r3, [r5, #0]
 800d4aa:	f7f6 f854 	bl	8003556 <_fstat>
 800d4ae:	1c43      	adds	r3, r0, #1
 800d4b0:	d102      	bne.n	800d4b8 <_fstat_r+0x1c>
 800d4b2:	682b      	ldr	r3, [r5, #0]
 800d4b4:	b103      	cbz	r3, 800d4b8 <_fstat_r+0x1c>
 800d4b6:	6023      	str	r3, [r4, #0]
 800d4b8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20000c7c 	.word	0x20000c7c

0800d4c0 <_isatty_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	4d05      	ldr	r5, [pc, #20]	; (800d4dc <_isatty_r+0x1c>)
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	4608      	mov	r0, r1
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	f7f6 f852 	bl	8003574 <_isatty>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	d102      	bne.n	800d4da <_isatty_r+0x1a>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	b103      	cbz	r3, 800d4da <_isatty_r+0x1a>
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	bd38      	pop	{r3, r4, r5, pc}
 800d4dc:	20000c7c 	.word	0x20000c7c

0800d4e0 <_lseek_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4d05      	ldr	r5, [pc, #20]	; (800d500 <_lseek_r+0x20>)
 800d4ec:	602a      	str	r2, [r5, #0]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	f7f6 f84a 	bl	8003588 <_lseek>
 800d4f4:	1c43      	adds	r3, r0, #1
 800d4f6:	d102      	bne.n	800d4fe <_lseek_r+0x1e>
 800d4f8:	682b      	ldr	r3, [r5, #0]
 800d4fa:	b103      	cbz	r3, 800d4fe <_lseek_r+0x1e>
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	bd38      	pop	{r3, r4, r5, pc}
 800d500:	20000c7c 	.word	0x20000c7c

0800d504 <memmove>:
 800d504:	4288      	cmp	r0, r1
 800d506:	b510      	push	{r4, lr}
 800d508:	eb01 0402 	add.w	r4, r1, r2
 800d50c:	d902      	bls.n	800d514 <memmove+0x10>
 800d50e:	4284      	cmp	r4, r0
 800d510:	4623      	mov	r3, r4
 800d512:	d807      	bhi.n	800d524 <memmove+0x20>
 800d514:	1e43      	subs	r3, r0, #1
 800d516:	42a1      	cmp	r1, r4
 800d518:	d008      	beq.n	800d52c <memmove+0x28>
 800d51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d522:	e7f8      	b.n	800d516 <memmove+0x12>
 800d524:	4601      	mov	r1, r0
 800d526:	4402      	add	r2, r0
 800d528:	428a      	cmp	r2, r1
 800d52a:	d100      	bne.n	800d52e <memmove+0x2a>
 800d52c:	bd10      	pop	{r4, pc}
 800d52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d536:	e7f7      	b.n	800d528 <memmove+0x24>

0800d538 <__malloc_lock>:
 800d538:	4801      	ldr	r0, [pc, #4]	; (800d540 <__malloc_lock+0x8>)
 800d53a:	f7fe bdd8 	b.w	800c0ee <__retarget_lock_acquire_recursive>
 800d53e:	bf00      	nop
 800d540:	20000c70 	.word	0x20000c70

0800d544 <__malloc_unlock>:
 800d544:	4801      	ldr	r0, [pc, #4]	; (800d54c <__malloc_unlock+0x8>)
 800d546:	f7fe bdd3 	b.w	800c0f0 <__retarget_lock_release_recursive>
 800d54a:	bf00      	nop
 800d54c:	20000c70 	.word	0x20000c70

0800d550 <_realloc_r>:
 800d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d554:	4680      	mov	r8, r0
 800d556:	4614      	mov	r4, r2
 800d558:	460e      	mov	r6, r1
 800d55a:	b921      	cbnz	r1, 800d566 <_realloc_r+0x16>
 800d55c:	4611      	mov	r1, r2
 800d55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d562:	f7ff bb87 	b.w	800cc74 <_malloc_r>
 800d566:	b92a      	cbnz	r2, 800d574 <_realloc_r+0x24>
 800d568:	f7ff fb1c 	bl	800cba4 <_free_r>
 800d56c:	4625      	mov	r5, r4
 800d56e:	4628      	mov	r0, r5
 800d570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d574:	f000 f872 	bl	800d65c <_malloc_usable_size_r>
 800d578:	4284      	cmp	r4, r0
 800d57a:	4607      	mov	r7, r0
 800d57c:	d802      	bhi.n	800d584 <_realloc_r+0x34>
 800d57e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d582:	d812      	bhi.n	800d5aa <_realloc_r+0x5a>
 800d584:	4621      	mov	r1, r4
 800d586:	4640      	mov	r0, r8
 800d588:	f7ff fb74 	bl	800cc74 <_malloc_r>
 800d58c:	4605      	mov	r5, r0
 800d58e:	2800      	cmp	r0, #0
 800d590:	d0ed      	beq.n	800d56e <_realloc_r+0x1e>
 800d592:	42bc      	cmp	r4, r7
 800d594:	4622      	mov	r2, r4
 800d596:	4631      	mov	r1, r6
 800d598:	bf28      	it	cs
 800d59a:	463a      	movcs	r2, r7
 800d59c:	f7fb fade 	bl	8008b5c <memcpy>
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	f7ff fafe 	bl	800cba4 <_free_r>
 800d5a8:	e7e1      	b.n	800d56e <_realloc_r+0x1e>
 800d5aa:	4635      	mov	r5, r6
 800d5ac:	e7df      	b.n	800d56e <_realloc_r+0x1e>
	...

0800d5b0 <_read_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	4608      	mov	r0, r1
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4d05      	ldr	r5, [pc, #20]	; (800d5d0 <_read_r+0x20>)
 800d5bc:	602a      	str	r2, [r5, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f7f5 ff85 	bl	80034ce <_read>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_read_r+0x1e>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_read_r+0x1e>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	20000c7c 	.word	0x20000c7c

0800d5d4 <_raise_r>:
 800d5d4:	291f      	cmp	r1, #31
 800d5d6:	b538      	push	{r3, r4, r5, lr}
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	d904      	bls.n	800d5e8 <_raise_r+0x14>
 800d5de:	2316      	movs	r3, #22
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5ea:	b112      	cbz	r2, 800d5f2 <_raise_r+0x1e>
 800d5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5f0:	b94b      	cbnz	r3, 800d606 <_raise_r+0x32>
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 f830 	bl	800d658 <_getpid_r>
 800d5f8:	462a      	mov	r2, r5
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d602:	f000 b817 	b.w	800d634 <_kill_r>
 800d606:	2b01      	cmp	r3, #1
 800d608:	d00a      	beq.n	800d620 <_raise_r+0x4c>
 800d60a:	1c59      	adds	r1, r3, #1
 800d60c:	d103      	bne.n	800d616 <_raise_r+0x42>
 800d60e:	2316      	movs	r3, #22
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	2001      	movs	r0, #1
 800d614:	e7e7      	b.n	800d5e6 <_raise_r+0x12>
 800d616:	2400      	movs	r4, #0
 800d618:	4628      	mov	r0, r5
 800d61a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d61e:	4798      	blx	r3
 800d620:	2000      	movs	r0, #0
 800d622:	e7e0      	b.n	800d5e6 <_raise_r+0x12>

0800d624 <raise>:
 800d624:	4b02      	ldr	r3, [pc, #8]	; (800d630 <raise+0xc>)
 800d626:	4601      	mov	r1, r0
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	f7ff bfd3 	b.w	800d5d4 <_raise_r>
 800d62e:	bf00      	nop
 800d630:	20000610 	.word	0x20000610

0800d634 <_kill_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	2300      	movs	r3, #0
 800d638:	4d06      	ldr	r5, [pc, #24]	; (800d654 <_kill_r+0x20>)
 800d63a:	4604      	mov	r4, r0
 800d63c:	4608      	mov	r0, r1
 800d63e:	4611      	mov	r1, r2
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	f7f5 ff2a 	bl	800349a <_kill>
 800d646:	1c43      	adds	r3, r0, #1
 800d648:	d102      	bne.n	800d650 <_kill_r+0x1c>
 800d64a:	682b      	ldr	r3, [r5, #0]
 800d64c:	b103      	cbz	r3, 800d650 <_kill_r+0x1c>
 800d64e:	6023      	str	r3, [r4, #0]
 800d650:	bd38      	pop	{r3, r4, r5, pc}
 800d652:	bf00      	nop
 800d654:	20000c7c 	.word	0x20000c7c

0800d658 <_getpid_r>:
 800d658:	f7f5 bf18 	b.w	800348c <_getpid>

0800d65c <_malloc_usable_size_r>:
 800d65c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d660:	1f18      	subs	r0, r3, #4
 800d662:	2b00      	cmp	r3, #0
 800d664:	bfbc      	itt	lt
 800d666:	580b      	ldrlt	r3, [r1, r0]
 800d668:	18c0      	addlt	r0, r0, r3
 800d66a:	4770      	bx	lr

0800d66c <_init>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	bf00      	nop
 800d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d672:	bc08      	pop	{r3}
 800d674:	469e      	mov	lr, r3
 800d676:	4770      	bx	lr

0800d678 <_fini>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	bf00      	nop
 800d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67e:	bc08      	pop	{r3}
 800d680:	469e      	mov	lr, r3
 800d682:	4770      	bx	lr
