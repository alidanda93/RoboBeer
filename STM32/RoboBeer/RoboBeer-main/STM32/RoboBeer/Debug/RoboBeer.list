
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800521c  0800521c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800521c  0800521c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800521c  0800521c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000070  08005294  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08005294  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012330  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  000323c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000353f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00036768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b92  00000000  00000000  00037998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d02  00000000  00000000  0003b52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9b7b  00000000  00000000  0005222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbda7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000581c  00000000  00000000  000fbdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000070 	.word	0x20000070
 800020c:	00000000 	.word	0x00000000
 8000210:	080050a8 	.word	0x080050a8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000074 	.word	0x20000074
 800022c:	080050a8 	.word	0x080050a8

08000230 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f001 f8a7 	bl	80013c0 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 fb0a 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800027c:	2304      	movs	r3, #4
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f001 f981 	bl	8001594 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 fafa 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	40012400 	.word	0x40012400

080002ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a1f      	ldr	r2, [pc, #124]	; (8000344 <HAL_ADC_MspInit+0x98>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d137      	bne.n	800033c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	613b      	str	r3, [r7, #16]
 80002fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_ADC_MspInit+0x9c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8000314:	23f0      	movs	r3, #240	; 0xf0
 8000316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000318:	2303      	movs	r3, #3
 800031a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4619      	mov	r1, r3
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <HAL_ADC_MspInit+0xa0>)
 8000324:	f001 fb7e 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 8000328:	2303      	movs	r3, #3
 800032a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032c:	2303      	movs	r3, #3
 800032e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4619      	mov	r1, r3
 8000336:	4806      	ldr	r0, [pc, #24]	; (8000350 <HAL_ADC_MspInit+0xa4>)
 8000338:	f001 fb74 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800033c:	bf00      	nop
 800033e:	3728      	adds	r7, #40	; 0x28
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40012400 	.word	0x40012400
 8000348:	40021000 	.word	0x40021000
 800034c:	40010800 	.word	0x40010800
 8000350:	40010c00 	.word	0x40010c00

08000354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b34      	ldr	r3, [pc, #208]	; (800043c <MX_GPIO_Init+0xe8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a33      	ldr	r2, [pc, #204]	; (800043c <MX_GPIO_Init+0xe8>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b31      	ldr	r3, [pc, #196]	; (800043c <MX_GPIO_Init+0xe8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000380:	4b2e      	ldr	r3, [pc, #184]	; (800043c <MX_GPIO_Init+0xe8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a2d      	ldr	r2, [pc, #180]	; (800043c <MX_GPIO_Init+0xe8>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_GPIO_Init+0xe8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_GPIO_Init+0xe8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a27      	ldr	r2, [pc, #156]	; (800043c <MX_GPIO_Init+0xe8>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_GPIO_Init+0xe8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	4b22      	ldr	r3, [pc, #136]	; (800043c <MX_GPIO_Init+0xe8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a21      	ldr	r2, [pc, #132]	; (800043c <MX_GPIO_Init+0xe8>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <MX_GPIO_Init+0xe8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0308 	and.w	r3, r3, #8
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80003c8:	2200      	movs	r2, #0
 80003ca:	f24f 0120 	movw	r1, #61472	; 0xf020
 80003ce:	481c      	ldr	r0, [pc, #112]	; (8000440 <MX_GPIO_Init+0xec>)
 80003d0:	f001 fcbc 	bl	8001d4c <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80003d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_GPIO_Init+0xf0>)
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <MX_GPIO_Init+0xf4>)
 80003ea:	f001 fb1b 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80003ee:	f24f 0320 	movw	r3, #61472	; 0xf020
 80003f2:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480e      	ldr	r0, [pc, #56]	; (8000440 <MX_GPIO_Init+0xec>)
 8000408:	f001 fb0c 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 800040c:	2310      	movs	r3, #16
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_GPIO_Init+0xf0>)
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	4808      	ldr	r0, [pc, #32]	; (8000440 <MX_GPIO_Init+0xec>)
 8000420:	f001 fb00 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2105      	movs	r1, #5
 8000428:	2028      	movs	r0, #40	; 0x28
 800042a:	f001 fac4 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800042e:	2028      	movs	r0, #40	; 0x28
 8000430:	f001 fadd 	bl	80019ee <HAL_NVIC_EnableIRQ>

}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	40010c00 	.word	0x40010c00
 8000444:	10110000 	.word	0x10110000
 8000448:	40011000 	.word	0x40011000

0800044c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_I2C1_Init+0x50>)
 8000452:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <MX_I2C1_Init+0x54>)
 8000454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_I2C1_Init+0x50>)
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_I2C1_Init+0x58>)
 800045a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_I2C1_Init+0x50>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_I2C1_Init+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_I2C1_Init+0x50>)
 800046a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800046e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <MX_I2C1_Init+0x50>)
 8000472:	2200      	movs	r2, #0
 8000474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_I2C1_Init+0x50>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <MX_I2C1_Init+0x50>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_I2C1_Init+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_I2C1_Init+0x50>)
 800048a:	f001 fca9 	bl	8001de0 <HAL_I2C_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000494:	f000 f9fc 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000bc 	.word	0x200000bc
 80004a0:	40005400 	.word	0x40005400
 80004a4:	000186a0 	.word	0x000186a0

080004a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004ae:	4a13      	ldr	r2, [pc, #76]	; (80004fc <MX_I2C2_Init+0x54>)
 80004b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004b4:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_I2C2_Init+0x58>)
 80004b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_I2C2_Init+0x50>)
 80004e6:	f001 fc7b 	bl	8001de0 <HAL_I2C_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004f0:	f000 f9ce 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000110 	.word	0x20000110
 80004fc:	40005800 	.word	0x40005800
 8000500:	000186a0 	.word	0x000186a0

08000504 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a32      	ldr	r2, [pc, #200]	; (80005e8 <HAL_I2C_MspInit+0xe4>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d133      	bne.n	800058c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a30      	ldr	r2, [pc, #192]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0308 	and.w	r3, r3, #8
 8000538:	61bb      	str	r3, [r7, #24]
 800053a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 800053c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000542:	2312      	movs	r3, #18
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000546:	2303      	movs	r3, #3
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	4619      	mov	r1, r3
 8000550:	4827      	ldr	r0, [pc, #156]	; (80005f0 <HAL_I2C_MspInit+0xec>)
 8000552:	f001 fa67 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000556:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <HAL_I2C_MspInit+0xf0>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <HAL_I2C_MspInit+0xf0>)
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 8000578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800058a:	e029      	b.n	80005e0 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <HAL_I2C_MspInit+0xf4>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d124      	bne.n	80005e0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 80005ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b4:	2312      	movs	r3, #18
 80005b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4619      	mov	r1, r3
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <HAL_I2C_MspInit+0xec>)
 80005c4:	f001 fa2e 	bl	8001a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 80005ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d2:	61d3      	str	r3, [r2, #28]
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_I2C_MspInit+0xe8>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3730      	adds	r7, #48	; 0x30
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	40010000 	.word	0x40010000
 80005f8:	40005800 	.word	0x40005800

080005fc <TurnOffLed>:
}



void TurnOffLed(int i)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	switch (i)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	2b03      	cmp	r3, #3
 800060a:	d827      	bhi.n	800065c <TurnOffLed+0x60>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <TurnOffLed+0x18>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000625 	.word	0x08000625
 8000618:	08000633 	.word	0x08000633
 800061c:	08000641 	.word	0x08000641
 8000620:	0800064f 	.word	0x0800064f
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <TurnOffLed+0x68>)
 800062c:	f001 fb8e 	bl	8001d4c <HAL_GPIO_WritePin>
		    break;
 8000630:	e014      	b.n	800065c <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <TurnOffLed+0x68>)
 800063a:	f001 fb87 	bl	8001d4c <HAL_GPIO_WritePin>
			break;
 800063e:	e00d      	b.n	800065c <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <TurnOffLed+0x68>)
 8000648:	f001 fb80 	bl	8001d4c <HAL_GPIO_WritePin>
			break;
 800064c:	e006      	b.n	800065c <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <TurnOffLed+0x68>)
 8000656:	f001 fb79 	bl	8001d4c <HAL_GPIO_WritePin>
			break;
 800065a:	bf00      	nop
	}

}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40010c00 	.word	0x40010c00

08000668 <SwitchLed>:



void SwitchLed(int i)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	switch (i)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3b01      	subs	r3, #1
 8000674:	2b03      	cmp	r3, #3
 8000676:	d823      	bhi.n	80006c0 <SwitchLed+0x58>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <SwitchLed+0x18>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	08000691 	.word	0x08000691
 8000684:	0800069d 	.word	0x0800069d
 8000688:	080006a9 	.word	0x080006a9
 800068c:	080006b5 	.word	0x080006b5
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <SwitchLed+0x60>)
 8000696:	f001 fb71 	bl	8001d7c <HAL_GPIO_TogglePin>
			break;
 800069a:	e011      	b.n	80006c0 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <SwitchLed+0x60>)
 80006a2:	f001 fb6b 	bl	8001d7c <HAL_GPIO_TogglePin>
			break;
 80006a6:	e00b      	b.n	80006c0 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80006a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <SwitchLed+0x60>)
 80006ae:	f001 fb65 	bl	8001d7c <HAL_GPIO_TogglePin>
			break;
 80006b2:	e005      	b.n	80006c0 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 80006b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <SwitchLed+0x60>)
 80006ba:	f001 fb5f 	bl	8001d7c <HAL_GPIO_TogglePin>
			break;
 80006be:	bf00      	nop
	}

}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010c00 	.word	0x40010c00

080006cc <LedError>:



void LedError()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <LedError+0x38>)
 80006d8:	f001 fb38 	bl	8001d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <LedError+0x38>)
 80006e4:	f001 fb32 	bl	8001d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <LedError+0x38>)
 80006f0:	f001 fb2c 	bl	8001d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <LedError+0x38>)
 80006fc:	f001 fb26 	bl	8001d4c <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40010c00 	.word	0x40010c00

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fdf6 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f83e 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f7ff fe1e 	bl	8000354 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000718:	f7ff fe98 	bl	800044c <MX_I2C1_Init>
  MX_I2C2_Init();
 800071c:	f7ff fec4 	bl	80004a8 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000720:	f000 fade 	bl	8000ce0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000724:	f000 fcdc 	bl	80010e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000728:	f000 fd04 	bl	8001134 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800072c:	f000 f9c0 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000730:	f000 fa82 	bl	8000c38 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000734:	f000 fb4c 	bl	8000dd0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000738:	f7ff fd7a 	bl	8000230 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  TurnOffLed(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff5d 	bl	80005fc <TurnOffLed>
  TurnOffLed(2);
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff ff5a 	bl	80005fc <TurnOffLed>
  TurnOffLed(3);
 8000748:	2003      	movs	r0, #3
 800074a:	f7ff ff57 	bl	80005fc <TurnOffLed>
  TurnOffLed(4);
 800074e:	2004      	movs	r0, #4
 8000750:	f7ff ff54 	bl	80005fc <TurnOffLed>

  SwitchLed(4);
 8000754:	2004      	movs	r0, #4
 8000756:	f7ff ff87 	bl	8000668 <SwitchLed>

  HAL_TIM_Base_Start_IT(&htim3);
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <main+0x7c>)
 800075c:	f002 f9a6 	bl	8002aac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000760:	2100      	movs	r1, #0
 8000762:	4808      	ldr	r0, [pc, #32]	; (8000784 <main+0x7c>)
 8000764:	f002 fa5a 	bl	8002c1c <HAL_TIM_PWM_Start_IT>
		  	  Error_Handler();
		    }
		  HAL_Delay(500);
	  }*/

	  if(it_userButton)
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <main+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0fb      	beq.n	8000768 <main+0x60>
	  {
		  SwitchLed(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff79 	bl	8000668 <SwitchLed>
		  it_userButton = 0;
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <main+0x80>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
		  printf("userButton\n\r");
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <main+0x84>)
 800077e:	f003 fcff 	bl	8004180 <iprintf>
	  if(it_userButton)
 8000782:	e7f1      	b.n	8000768 <main+0x60>
 8000784:	200001fc 	.word	0x200001fc
 8000788:	20000164 	.word	0x20000164
 800078c:	0800514c 	.word	0x0800514c

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	; 0x58
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079a:	2228      	movs	r2, #40	; 0x28
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fce6 	bl	8004170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
 80007c2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fc3b 	bl	8002068 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007f8:	f000 f84a 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fea7 	bl	800256c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000824:	f000 f834 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000828:	2302      	movs	r3, #2
 800082a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800082c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000830:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f002 f833 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000840:	f000 f826 	bl	8000890 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3758      	adds	r7, #88	; 0x58
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000854:	1d39      	adds	r1, r7, #4
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	2201      	movs	r2, #1
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <__io_putchar+0x20>)
 800085e:	f003 f8eb 	bl	8003a38 <HAL_UART_Transmit>
	return ch;
 8000862:	687b      	ldr	r3, [r7, #4]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000028c 	.word	0x2000028c

08000870 <HAL_GPIO_EXTI_Callback>:
{
	if (htim->Instance == TIM3) it_tim3=1; // Tim 3 avce servo donc pas d'interrupt...inutile
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
	it_userButton = 1;
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <HAL_GPIO_EXTI_Callback+0x1c>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000164 	.word	0x20000164

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8000898:	f7ff ff18 	bl	80006cc <LedError>
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0xc>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_MspInit+0x68>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_MspInit+0x68>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_MspInit+0x68>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x68>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_MspInit+0x68>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x68>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f001 f86a 	bl	80019b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_MspInit+0x6c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_MspInit+0x6c>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093e:	f000 fd23 	bl	8001388 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000942:	f003 fb6b 	bl	800401c <xTaskGetSchedulerState>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d001      	beq.n	8000950 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800094c:	f003 fbc4 	bl	80040d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8000958:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800095c:	f001 fa28 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
	}

return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e009      	b.n	80009c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff47 	bl	800084c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf1      	blt.n	80009b0 <_write+0x12>
	}
	return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_close>:

int _close(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	return -1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fc:	605a      	str	r2, [r3, #4]
	return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <_isatty>:

int _isatty(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	return 1;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
	return 0;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
	...

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f003 fb58 	bl	800411c <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000c000 	.word	0x2000c000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	20000168 	.word	0x20000168
 8000aa0:	200003e0 	.word	0x200003e0

08000aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fb41 	bl	8004170 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aee:	4b50      	ldr	r3, [pc, #320]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000af0:	4a50      	ldr	r2, [pc, #320]	; (8000c34 <MX_TIM1_Init+0x184>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af4:	4b4e      	ldr	r3, [pc, #312]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0e:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1a:	4845      	ldr	r0, [pc, #276]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b1c:	f001 ff76 	bl	8002a0c <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b26:	f7ff feb3 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b34:	4619      	mov	r1, r3
 8000b36:	483e      	ldr	r0, [pc, #248]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b38:	f002 fad0 	bl	80030dc <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b42:	f7ff fea5 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b46:	483a      	ldr	r0, [pc, #232]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b48:	f002 f810 	bl	8002b6c <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b52:	f7ff fe9d 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b62:	4619      	mov	r1, r3
 8000b64:	4832      	ldr	r0, [pc, #200]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b66:	f002 fe5d 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b70:	f7ff fe8e 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	; 0x60
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000b9a:	f002 f9e1 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ba4:	f7ff fe74 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	2204      	movs	r2, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000bb2:	f002 f9d5 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000bbc:	f7ff fe68 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4819      	ldr	r0, [pc, #100]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000bca:	f002 f9c9 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000bd4:	f7ff fe5c 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	220c      	movs	r2, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000be2:	f002 f9bd 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bec:	f7ff fe50 	bl	8000890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000c14:	f002 fe72 	bl	80038fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000c1e:	f7ff fe37 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c22:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM1_Init+0x180>)
 8000c24:	f000 f9f2 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3758      	adds	r7, #88	; 0x58
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000016c 	.word	0x2000016c
 8000c34:	40012c00 	.word	0x40012c00

08000c38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fa92 	bl	8004170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000ca8:	f002 f8b8 	bl	8002e1c <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f7ff fded 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000cc4:	f002 fdae 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f7ff fddf 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001b4 	.word	0x200001b4

08000ce0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 0320 	add.w	r3, r7, #32
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d12:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <MX_TIM3_Init+0xec>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d18:	2247      	movs	r2, #71	; 0x47
 8000d1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d36:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d38:	f001 fe68 	bl	8002a0c <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d42:	f7ff fda5 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d50:	4619      	mov	r1, r3
 8000d52:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d54:	f002 f9c2 	bl	80030dc <HAL_TIM_ConfigClockSource>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d5e:	f7ff fd97 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d62:	4819      	ldr	r0, [pc, #100]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d64:	f001 ff02 	bl	8002b6c <HAL_TIM_PWM_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f7ff fd8f 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d82:	f002 fd4f 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d8c:	f7ff fd80 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d90:	2360      	movs	r3, #96	; 0x60
 8000d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000daa:	f002 f8d9 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000db4:	f7ff fd6c 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dba:	f000 f927 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001fc 	.word	0x200001fc
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2224      	movs	r2, #36	; 0x24
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 f9c6 	bl	8004170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000dee:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <MX_TIM5_Init+0xa4>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000e3e:	f001 ffed 	bl	8002e1c <HAL_TIM_Encoder_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000e48:	f7ff fd22 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM5_Init+0xa0>)
 8000e5a:	f002 fce3 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000e64:	f7ff fd14 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000244 	.word	0x20000244
 8000e74:	40000c00 	.word	0x40000c00

08000e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_TIM_Base_MspInit+0x58>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10c      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ea2:	e010      	b.n	8000ec6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_TIM_Base_MspInit+0x60>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10b      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40000400 	.word	0x40000400

08000edc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efa:	d14f      	bne.n	8000f9c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efc:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	61d3      	str	r3, [r2, #28]
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a31      	ldr	r2, [pc, #196]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8000f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4828      	ldr	r0, [pc, #160]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x120>)
 8000f5a:	f000 fd63 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4823      	ldr	r0, [pc, #140]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f72:	f000 fd57 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000f9a:	e028      	b.n	8000fee <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d123      	bne.n	8000fee <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x120>)
 8000fea:	f000 fd1b 	bl	8001a24 <HAL_GPIO_Init>
}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	; 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40010000 	.word	0x40010000
 8001008:	40000c00 	.word	0x40000c00

0800100c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <HAL_TIM_MspPostInit+0xbc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d119      	bne.n	8001060 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_TIM_MspPostInit+0xc0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <HAL_TIM_MspPostInit+0xc0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_TIM_MspPostInit+0xc0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8001044:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	481d      	ldr	r0, [pc, #116]	; (80010d0 <HAL_TIM_MspPostInit+0xc4>)
 800105a:	f000 fce3 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800105e:	e02e      	b.n	80010be <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_TIM_MspPostInit+0xc8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d129      	bne.n	80010be <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_TIM_MspPostInit+0xc0>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_TIM_MspPostInit+0xc0>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_TIM_MspPostInit+0xc0>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8001082:	2340      	movs	r3, #64	; 0x40
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <HAL_TIM_MspPostInit+0xcc>)
 8001096:	f000 fcc5 	bl	8001a24 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0xd0>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_TIM_MspPostInit+0xd0>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	6053      	str	r3, [r2, #4]
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40012c00 	.word	0x40012c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40000400 	.word	0x40000400
 80010d8:	40011000 	.word	0x40011000
 80010dc:	40010000 	.word	0x40010000

080010e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART1_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001118:	f002 fc41 	bl	800399e <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f7ff fbb5 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000028c 	.word	0x2000028c
 8001130:	40013800 	.word	0x40013800

08001134 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART2_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800116c:	f002 fc17 	bl	800399e <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f7ff fb8b 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002d0 	.word	0x200002d0
 8001184:	40004400 	.word	0x40004400

08001188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a3d      	ldr	r2, [pc, #244]	; (8001298 <HAL_UART_MspInit+0x110>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13e      	bne.n	8001226 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_UART_MspInit+0x114>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a3b      	ldr	r2, [pc, #236]	; (800129c <HAL_UART_MspInit+0x114>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b39      	ldr	r3, [pc, #228]	; (800129c <HAL_UART_MspInit+0x114>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_UART_MspInit+0x114>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a35      	ldr	r2, [pc, #212]	; (800129c <HAL_UART_MspInit+0x114>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <HAL_UART_MspInit+0x114>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 80011d8:	2340      	movs	r3, #64	; 0x40
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	482d      	ldr	r0, [pc, #180]	; (80012a0 <HAL_UART_MspInit+0x118>)
 80011ec:	f000 fc1a 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4827      	ldr	r0, [pc, #156]	; (80012a0 <HAL_UART_MspInit+0x118>)
 8001204:	f000 fc0e 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_UART_MspInit+0x11c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800121e:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <HAL_UART_MspInit+0x11c>)
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001224:	e034      	b.n	8001290 <HAL_UART_MspInit+0x108>
  else if(uartHandle->Instance==USART2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_UART_MspInit+0x120>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d12f      	bne.n	8001290 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_UART_MspInit+0x114>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0x114>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123a:	61d3      	str	r3, [r2, #28]
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_UART_MspInit+0x114>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_UART_MspInit+0x114>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_UART_MspInit+0x114>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_MspInit+0x114>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8001260:	2304      	movs	r3, #4
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <HAL_UART_MspInit+0x124>)
 8001274:	f000 fbd6 	bl	8001a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 8001278:	2308      	movs	r3, #8
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <HAL_UART_MspInit+0x124>)
 800128c:	f000 fbca 	bl	8001a24 <HAL_GPIO_Init>
}
 8001290:	bf00      	nop
 8001292:	3730      	adds	r7, #48	; 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40013800 	.word	0x40013800
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40010800 	.word	0x40010800

080012b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b2:	490d      	ldr	r1, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012d6:	f7ff fbe5 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f002 ff25 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012de:	f7ff fa13 	bl	8000708 <main>
  bx lr
 80012e2:	4770      	bx	lr
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012ec:	08005224 	.word	0x08005224
  ldr r2, =_sbss
 80012f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f4:	200003e0 	.word	0x200003e0

080012f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x28>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 fb47 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fac2 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fb5f 	bl	8001a0a <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 fb27 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x1c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_IncTick+0x20>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_IncTick+0x20>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000314 	.word	0x20000314

080013ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_GetTick+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000314 	.word	0x20000314

080013c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0ce      	b.n	8001580 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7fe ff54 	bl	80002ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f9bd 	bl	8001784 <ADC_ConversionStop_Disable>
 800140a:	4603      	mov	r3, r0
 800140c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 80a9 	bne.w	800156e <HAL_ADC_Init+0x1ae>
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 80a5 	bne.w	800156e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800142c:	f023 0302 	bic.w	r3, r3, #2
 8001430:	f043 0202 	orr.w	r2, r3, #2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4951      	ldr	r1, [pc, #324]	; (8001588 <HAL_ADC_Init+0x1c8>)
 8001442:	428b      	cmp	r3, r1
 8001444:	d10a      	bne.n	800145c <HAL_ADC_Init+0x9c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800144e:	d002      	beq.n	8001456 <HAL_ADC_Init+0x96>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	e004      	b.n	8001460 <HAL_ADC_Init+0xa0>
 8001456:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800145a:	e001      	b.n	8001460 <HAL_ADC_Init+0xa0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001460:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7b1b      	ldrb	r3, [r3, #12]
 8001466:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001468:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4313      	orrs	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001478:	d003      	beq.n	8001482 <HAL_ADC_Init+0xc2>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <HAL_ADC_Init+0xc8>
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	e000      	b.n	800148a <HAL_ADC_Init+0xca>
 8001488:	2300      	movs	r3, #0
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7d1b      	ldrb	r3, [r3, #20]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d119      	bne.n	80014cc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d109      	bne.n	80014b4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	035a      	lsls	r2, r3, #13
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	e00b      	b.n	80014cc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f043 0220 	orr.w	r2, r3, #32
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_ADC_Init+0x1cc>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014fc:	d003      	beq.n	8001506 <HAL_ADC_Init+0x146>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d104      	bne.n	8001510 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	3b01      	subs	r3, #1
 800150c:	051b      	lsls	r3, r3, #20
 800150e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	430a      	orrs	r2, r1
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_ADC_Init+0x1d0>)
 800152c:	4013      	ands	r3, r2
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	429a      	cmp	r2, r3
 8001532:	d10b      	bne.n	800154c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800154a:	e018      	b.n	800157e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f023 0312 	bic.w	r3, r3, #18
 8001554:	f043 0210 	orr.w	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800156c:	e007      	b.n	800157e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	f043 0210 	orr.w	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40013c00 	.word	0x40013c00
 800158c:	ffe1f7fd 	.word	0xffe1f7fd
 8001590:	ff1f0efe 	.word	0xff1f0efe

08001594 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x20>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e0dc      	b.n	800176e <HAL_ADC_ConfigChannel+0x1da>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b06      	cmp	r3, #6
 80015c2:	d81c      	bhi.n	80015fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b05      	subs	r3, #5
 80015d6:	221f      	movs	r2, #31
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	4019      	ands	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b05      	subs	r3, #5
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
 80015fc:	e03c      	b.n	8001678 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d81c      	bhi.n	8001640 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	3b23      	subs	r3, #35	; 0x23
 8001618:	221f      	movs	r2, #31
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	4019      	ands	r1, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b23      	subs	r3, #35	; 0x23
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
 800163e:	e01b      	b.n	8001678 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b41      	subs	r3, #65	; 0x41
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b41      	subs	r3, #65	; 0x41
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d91c      	bls.n	80016ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68d9      	ldr	r1, [r3, #12]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	3b1e      	subs	r3, #30
 8001692:	2207      	movs	r2, #7
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	4019      	ands	r1, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6898      	ldr	r0, [r3, #8]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	3b1e      	subs	r3, #30
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	e019      	b.n	80016ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6919      	ldr	r1, [r3, #16]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	2207      	movs	r2, #7
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4019      	ands	r1, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d003      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016fa:	2b11      	cmp	r3, #17
 80016fc:	d132      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_ADC_ConfigChannel+0x1e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d125      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d126      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001724:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b10      	cmp	r3, #16
 800172c:	d11a      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_ADC_ConfigChannel+0x1e8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_ADC_ConfigChannel+0x1ec>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9a      	lsrs	r2, r3, #18
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x1b2>
 8001752:	e007      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	f043 0220 	orr.w	r2, r3, #32
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40012400 	.word	0x40012400
 800177c:	20000000 	.word	0x20000000
 8001780:	431bde83 	.word	0x431bde83

08001784 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d12e      	bne.n	80017fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ae:	f7ff fdfd 	bl	80013ac <HAL_GetTick>
 80017b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017b4:	e01b      	b.n	80017ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017b6:	f7ff fdf9 	bl	80013ac <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d914      	bls.n	80017ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10d      	bne.n	80017ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f043 0210 	orr.w	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e007      	b.n	80017fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d0dc      	beq.n	80017b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4906      	ldr	r1, [pc, #24]	; (80018a0 <__NVIC_EnableIRQ+0x34>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff90 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff2d 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff42 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff90 	bl	80018f8 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5f 	bl	80018a4 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff35 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b08b      	sub	sp, #44	; 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e179      	b.n	8001d2c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8168 	bne.w	8001d26 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a96      	ldr	r2, [pc, #600]	; (8001cb4 <HAL_GPIO_Init+0x290>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05e      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a60:	4a94      	ldr	r2, [pc, #592]	; (8001cb4 <HAL_GPIO_Init+0x290>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d875      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a66:	4a94      	ldr	r2, [pc, #592]	; (8001cb8 <HAL_GPIO_Init+0x294>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d058      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a6c:	4a92      	ldr	r2, [pc, #584]	; (8001cb8 <HAL_GPIO_Init+0x294>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d86f      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a72:	4a92      	ldr	r2, [pc, #584]	; (8001cbc <HAL_GPIO_Init+0x298>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d052      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a78:	4a90      	ldr	r2, [pc, #576]	; (8001cbc <HAL_GPIO_Init+0x298>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d869      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a90      	ldr	r2, [pc, #576]	; (8001cc0 <HAL_GPIO_Init+0x29c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d04c      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a84:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <HAL_GPIO_Init+0x29c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d863      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a8e      	ldr	r2, [pc, #568]	; (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d046      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a90:	4a8c      	ldr	r2, [pc, #560]	; (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d85d      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d82a      	bhi.n	8001af0 <HAL_GPIO_Init+0xcc>
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d859      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a9e:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <HAL_GPIO_Init+0x80>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001af9 	.word	0x08001af9
 8001aac:	08001b0b 	.word	0x08001b0b
 8001ab0:	08001b4d 	.word	0x08001b4d
 8001ab4:	08001b53 	.word	0x08001b53
 8001ab8:	08001b53 	.word	0x08001b53
 8001abc:	08001b53 	.word	0x08001b53
 8001ac0:	08001b53 	.word	0x08001b53
 8001ac4:	08001b53 	.word	0x08001b53
 8001ac8:	08001b53 	.word	0x08001b53
 8001acc:	08001b53 	.word	0x08001b53
 8001ad0:	08001b53 	.word	0x08001b53
 8001ad4:	08001b53 	.word	0x08001b53
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b53 	.word	0x08001b53
 8001ae0:	08001b53 	.word	0x08001b53
 8001ae4:	08001b53 	.word	0x08001b53
 8001ae8:	08001b01 	.word	0x08001b01
 8001aec:	08001b15 	.word	0x08001b15
 8001af0:	4a75      	ldr	r2, [pc, #468]	; (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af6:	e02c      	b.n	8001b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e029      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e024      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e01f      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e01a      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b26:	2304      	movs	r3, #4
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e013      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	611a      	str	r2, [r3, #16]
          break;
 8001b3e:	e009      	b.n	8001b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	615a      	str	r2, [r3, #20]
          break;
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          break;
 8001b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2bff      	cmp	r3, #255	; 0xff
 8001b58:	d801      	bhi.n	8001b5e <HAL_GPIO_Init+0x13a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_Init+0x13e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2bff      	cmp	r3, #255	; 0xff
 8001b68:	d802      	bhi.n	8001b70 <HAL_GPIO_Init+0x14c>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x152>
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	3b08      	subs	r3, #8
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	6a39      	ldr	r1, [r7, #32]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80c1 	beq.w	8001d26 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba4:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bbc:	4a44      	ldr	r2, [pc, #272]	; (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_Init+0x204>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_GPIO_Init+0x2b4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_Init+0x200>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1fc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1f8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a38      	ldr	r2, [pc, #224]	; (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1f4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a37      	ldr	r2, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e00a      	b.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3a:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4924      	ldr	r1, [pc, #144]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4920      	ldr	r1, [pc, #128]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	491a      	ldr	r1, [pc, #104]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d025      	beq.n	8001cf0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4910      	ldr	r1, [pc, #64]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
 8001cb0:	e025      	b.n	8001cfe <HAL_GPIO_Init+0x2da>
 8001cb2:	bf00      	nop
 8001cb4:	10320000 	.word	0x10320000
 8001cb8:	10310000 	.word	0x10310000
 8001cbc:	10220000 	.word	0x10220000
 8001cc0:	10210000 	.word	0x10210000
 8001cc4:	10120000 	.word	0x10120000
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40010800 	.word	0x40010800
 8001cd8:	40010c00 	.word	0x40010c00
 8001cdc:	40011000 	.word	0x40011000
 8001ce0:	40011400 	.word	0x40011400
 8001ce4:	40011800 	.word	0x40011800
 8001ce8:	40011c00 	.word	0x40011c00
 8001cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4913      	ldr	r1, [pc, #76]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60cb      	str	r3, [r1, #12]
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4909      	ldr	r1, [pc, #36]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	3301      	adds	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f47f ae7e 	bne.w	8001a38 <HAL_GPIO_Init+0x14>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	372c      	adds	r7, #44	; 0x2c
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43d9      	mvns	r1, r3
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fd4e 	bl	8000870 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e12b      	b.n	800204a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe fb7c 	bl	8000504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2224      	movs	r2, #36	; 0x24
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e44:	f000 fce6 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8001e48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a81      	ldr	r2, [pc, #516]	; (8002054 <HAL_I2C_Init+0x274>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d807      	bhi.n	8001e64 <HAL_I2C_Init+0x84>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_I2C_Init+0x278>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	bf94      	ite	ls
 8001e5c:	2301      	movls	r3, #1
 8001e5e:	2300      	movhi	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e006      	b.n	8001e72 <HAL_I2C_Init+0x92>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a7d      	ldr	r2, [pc, #500]	; (800205c <HAL_I2C_Init+0x27c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf94      	ite	ls
 8001e6c:	2301      	movls	r3, #1
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0e7      	b.n	800204a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a78      	ldr	r2, [pc, #480]	; (8002060 <HAL_I2C_Init+0x280>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9b      	lsrs	r3, r3, #18
 8001e84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a6a      	ldr	r2, [pc, #424]	; (8002054 <HAL_I2C_Init+0x274>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d802      	bhi.n	8001eb4 <HAL_I2C_Init+0xd4>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	e009      	b.n	8001ec8 <HAL_I2C_Init+0xe8>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_I2C_Init+0x284>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	495c      	ldr	r1, [pc, #368]	; (8002054 <HAL_I2C_Init+0x274>)
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d819      	bhi.n	8001f1c <HAL_I2C_Init+0x13c>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e59      	subs	r1, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef6:	1c59      	adds	r1, r3, #1
 8001ef8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001efc:	400b      	ands	r3, r1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_I2C_Init+0x138>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e59      	subs	r1, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	e051      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e04f      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d111      	bne.n	8001f48 <HAL_I2C_Init+0x168>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e58      	subs	r0, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e012      	b.n	8001f6e <HAL_I2C_Init+0x18e>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	0099      	lsls	r1, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Init+0x196>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e022      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10e      	bne.n	8001f9c <HAL_I2C_Init+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e58      	subs	r0, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	440b      	add	r3, r1
 8001f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	e00f      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e58      	subs	r0, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	0099      	lsls	r1, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	6809      	ldr	r1, [r1, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6911      	ldr	r1, [r2, #16]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	000186a0 	.word	0x000186a0
 8002058:	001e847f 	.word	0x001e847f
 800205c:	003d08ff 	.word	0x003d08ff
 8002060:	431bde83 	.word	0x431bde83
 8002064:	10624dd3 	.word	0x10624dd3

08002068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e272      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8087 	beq.w	8002196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002088:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00c      	beq.n	80020ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002094:	4b8f      	ldr	r3, [pc, #572]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d112      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
 80020a0:	4b8c      	ldr	r3, [pc, #560]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d10b      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d06c      	beq.n	8002194 <HAL_RCC_OscConfig+0x12c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d168      	bne.n	8002194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e24c      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x76>
 80020d0:	4b80      	ldr	r3, [pc, #512]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a7f      	ldr	r2, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e02e      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a77      	ldr	r2, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0xbc>
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a71      	ldr	r2, [pc, #452]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002124:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff f932 	bl	80013ac <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff f92e 	bl	80013ac <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e200      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xe4>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f91e 	bl	80013ac <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f91a 	bl	80013ac <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1ec      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x10c>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a2:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
 80021ba:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c0      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4939      	ldr	r1, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x270>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff f8d3 	bl	80013ac <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff f8cf 	bl	80013ac <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a1      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x270>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff f8b2 	bl	80013ac <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff f8ae 	bl	80013ac <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e180      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff f892 	bl	80013ac <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff f88e 	bl	80013ac <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e160      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f000 fada 	bl	8002864 <RCC_Delay>
 80022b0:	e01c      	b.n	80022ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7ff f878 	bl	80013ac <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022be:	e00f      	b.n	80022e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff f874 	bl	80013ac <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d908      	bls.n	80022e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e146      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	42420000 	.word	0x42420000
 80022dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e9      	bne.n	80022c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a6 	beq.w	8002446 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b8b      	ldr	r3, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a87      	ldr	r2, [pc, #540]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b82      	ldr	r3, [pc, #520]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7e      	ldr	r2, [pc, #504]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7ff f835 	bl	80013ac <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7ff f831 	bl	80013ac <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e103      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x312>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x334>
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x356>
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a5d      	ldr	r2, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a5a      	ldr	r2, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7fe ffe5 	bl	80013ac <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe ffe1 	bl	80013ac <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0b1      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x37e>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe ffcf 	bl	80013ac <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe ffcb 	bl	80013ac <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e09b      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d061      	beq.n	8002520 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d146      	bne.n	80024f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe ff9f 	bl	80013ac <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe ff9b 	bl	80013ac <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e06d      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d108      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4921      	ldr	r1, [pc, #132]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a19      	ldr	r1, [r3, #32]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	430b      	orrs	r3, r1
 80024be:	491b      	ldr	r1, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe ff6f 	bl	80013ac <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe ff6b 	bl	80013ac <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46a>
 80024f0:	e035      	b.n	800255e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe ff58 	bl	80013ac <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe ff54 	bl	80013ac <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e026      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x498>
 800251e:	e01e      	b.n	800255e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e019      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_OscConfig+0x500>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	429a      	cmp	r2, r3
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d0      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4965      	ldr	r1, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e073      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4936      	ldr	r1, [pc, #216]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7fe fea6 	bl	80013ac <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe fea2 	bl	80013ac <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e053      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1cc>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fe04 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	0800516c 	.word	0x0800516c
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b490      	push	{r4, r7}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002748:	1d3c      	adds	r4, r7, #4
 800274a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002750:	f240 2301 	movw	r3, #513	; 0x201
 8002754:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b04      	cmp	r3, #4
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x40>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x46>
 800277e:	e02b      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002782:	623b      	str	r3, [r7, #32]
      break;
 8002784:	e02b      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	0c9b      	lsrs	r3, r3, #18
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3328      	adds	r3, #40	; 0x28
 8002790:	443b      	add	r3, r7
 8002792:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002796:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	3328      	adds	r3, #40	; 0x28
 80027ae:	443b      	add	r3, r7
 80027b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ba:	fb03 f202 	mul.w	r2, r3, r2
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	e004      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	623b      	str	r3, [r7, #32]
      break;
 80027d6:	e002      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027de:	6a3b      	ldr	r3, [r7, #32]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc90      	pop	{r4, r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	0800515c 	.word	0x0800515c
 80027f0:	40021000 	.word	0x40021000
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	003d0900 	.word	0x003d0900
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <HAL_RCC_GetHCLKFreq+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	0800517c 	.word	0x0800517c

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffde 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	0800517c 	.word	0x0800517c

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000000 	.word	0x20000000
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	61d3      	str	r3, [r2, #28]
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d118      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a42      	ldr	r2, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002900:	f7fe fd54 	bl	80013ac <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fe fd50 	bl	80013ac <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e06d      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02e      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d027      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002944:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295a:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d014      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fd1f 	bl	80013ac <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fd1b 	bl	80013ac <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e036      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4917      	ldr	r1, [pc, #92]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	490b      	ldr	r1, [pc, #44]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4904      	ldr	r1, [pc, #16]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42420440 	.word	0x42420440

08002a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e041      	b.n	8002aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fa20 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f000 fc0a 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e044      	b.n	8002b4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_TIM_Base_Start_IT+0xac>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_TIM_Base_Start_IT+0xb0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x6c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d00e      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x6c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x6c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x6c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d010      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	e007      	b.n	8002b4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40013400 	.word	0x40013400
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40000800 	.word	0x40000800
 8002b68:	40000c00 	.word	0x40000c00

08002b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f839 	bl	8002c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f000 fb5a 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_TIM_PWM_Start_IT+0x24>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e022      	b.n	8002c86 <HAL_TIM_PWM_Start_IT+0x6a>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d109      	bne.n	8002c5a <HAL_TIM_PWM_Start_IT+0x3e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e015      	b.n	8002c86 <HAL_TIM_PWM_Start_IT+0x6a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d109      	bne.n	8002c74 <HAL_TIM_PWM_Start_IT+0x58>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e008      	b.n	8002c86 <HAL_TIM_PWM_Start_IT+0x6a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0b8      	b.n	8002e00 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start_IT+0x82>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c9c:	e013      	b.n	8002cc6 <HAL_TIM_PWM_Start_IT+0xaa>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start_IT+0x92>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_PWM_Start_IT+0xaa>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Start_IT+0xa2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	e003      	b.n	8002cc6 <HAL_TIM_PWM_Start_IT+0xaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d841      	bhi.n	8002d50 <HAL_TIM_PWM_Start_IT+0x134>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <HAL_TIM_PWM_Start_IT+0xb8>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002d09 	.word	0x08002d09
 8002cd8:	08002d51 	.word	0x08002d51
 8002cdc:	08002d51 	.word	0x08002d51
 8002ce0:	08002d51 	.word	0x08002d51
 8002ce4:	08002d1b 	.word	0x08002d1b
 8002ce8:	08002d51 	.word	0x08002d51
 8002cec:	08002d51 	.word	0x08002d51
 8002cf0:	08002d51 	.word	0x08002d51
 8002cf4:	08002d2d 	.word	0x08002d2d
 8002cf8:	08002d51 	.word	0x08002d51
 8002cfc:	08002d51 	.word	0x08002d51
 8002d00:	08002d51 	.word	0x08002d51
 8002d04:	08002d3f 	.word	0x08002d3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0202 	orr.w	r2, r2, #2
 8002d16:	60da      	str	r2, [r3, #12]
      break;
 8002d18:	e01b      	b.n	8002d52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0204 	orr.w	r2, r2, #4
 8002d28:	60da      	str	r2, [r3, #12]
      break;
 8002d2a:	e012      	b.n	8002d52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0208 	orr.w	r2, r2, #8
 8002d3a:	60da      	str	r2, [r3, #12]
      break;
 8002d3c:	e009      	b.n	8002d52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0210 	orr.w	r2, r2, #16
 8002d4c:	60da      	str	r2, [r3, #12]
      break;
 8002d4e:	e000      	b.n	8002d52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8002d50:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fd3e 	bl	80037dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIM_PWM_Start_IT+0x158>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_TIM_PWM_Start_IT+0x15c>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_TIM_PWM_Start_IT+0x15e>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d018      	beq.n	8002dca <HAL_TIM_PWM_Start_IT+0x1ae>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_TIM_PWM_Start_IT+0x1ae>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d00e      	beq.n	8002dca <HAL_TIM_PWM_Start_IT+0x1ae>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_TIM_PWM_Start_IT+0x1ae>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_PWM_Start_IT+0x1ae>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d010      	beq.n	8002dfe <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	e007      	b.n	8002dfe <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00

08002e1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e093      	b.n	8002f58 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe f849 	bl	8000edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e60:	f023 0307 	bic.w	r3, r3, #7
 8002e64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f000 f9f7 	bl	8003264 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ebc:	f023 030c 	bic.w	r3, r3, #12
 8002ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	011a      	lsls	r2, r3, #4
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	4313      	orrs	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4313      	orrs	r3, r2
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e0ac      	b.n	80030d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	f200 809f 	bhi.w	80030c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f8a:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	080030c9 	.word	0x080030c9
 8002f98:	080030c9 	.word	0x080030c9
 8002f9c:	080030c9 	.word	0x080030c9
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	080030c9 	.word	0x080030c9
 8002fa8:	080030c9 	.word	0x080030c9
 8002fac:	080030c9 	.word	0x080030c9
 8002fb0:	08003047 	.word	0x08003047
 8002fb4:	080030c9 	.word	0x080030c9
 8002fb8:	080030c9 	.word	0x080030c9
 8002fbc:	080030c9 	.word	0x080030c9
 8002fc0:	08003087 	.word	0x08003087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f9c4 	bl	8003358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0208 	orr.w	r2, r2, #8
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	619a      	str	r2, [r3, #24]
      break;
 8003002:	e062      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fa14 	bl	8003438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]
      break;
 8003044:	e041      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa67 	bl	8003520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0208 	orr.w	r2, r2, #8
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0204 	bic.w	r2, r2, #4
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
      break;
 8003084:	e021      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fabb 	bl	8003608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	021a      	lsls	r2, r3, #8
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	61da      	str	r2, [r3, #28]
      break;
 80030c6:	e000      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80030c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_ConfigClockSource+0x18>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0b3      	b.n	800325c <HAL_TIM_ConfigClockSource+0x180>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312c:	d03e      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0xd0>
 800312e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003132:	f200 8087 	bhi.w	8003244 <HAL_TIM_ConfigClockSource+0x168>
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313a:	f000 8085 	beq.w	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	d87f      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 8003144:	2b70      	cmp	r3, #112	; 0x70
 8003146:	d01a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xa2>
 8003148:	2b70      	cmp	r3, #112	; 0x70
 800314a:	d87b      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 800314c:	2b60      	cmp	r3, #96	; 0x60
 800314e:	d050      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x116>
 8003150:	2b60      	cmp	r3, #96	; 0x60
 8003152:	d877      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 8003154:	2b50      	cmp	r3, #80	; 0x50
 8003156:	d03c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xf6>
 8003158:	2b50      	cmp	r3, #80	; 0x50
 800315a:	d873      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d058      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x136>
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d86f      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 8003164:	2b30      	cmp	r3, #48	; 0x30
 8003166:	d064      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x156>
 8003168:	2b30      	cmp	r3, #48	; 0x30
 800316a:	d86b      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d060      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x156>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d867      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05c      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x156>
 8003178:	2b10      	cmp	r3, #16
 800317a:	d05a      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800317c:	e062      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f000 fb06 	bl	800379e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	609a      	str	r2, [r3, #8]
      break;
 80031aa:	e04e      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f000 faef 	bl	800379e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ce:	609a      	str	r2, [r3, #8]
      break;
 80031d0:	e03b      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 fa66 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2150      	movs	r1, #80	; 0x50
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fabd 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 80031f0:	e02b      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 fa84 	bl	800370c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2160      	movs	r1, #96	; 0x60
 800320a:	4618      	mov	r0, r3
 800320c:	f000 faad 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 8003210:	e01b      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	461a      	mov	r2, r3
 8003220:	f000 fa46 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fa9d 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 8003230:	e00b      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f000 fa94 	bl	800376a <TIM_ITRx_SetConfig>
        break;
 8003242:	e002      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003248:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a33      	ldr	r2, [pc, #204]	; (8003344 <TIM_Base_SetConfig+0xe0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <TIM_Base_SetConfig+0xe4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00f      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d00b      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2f      	ldr	r2, [pc, #188]	; (800334c <TIM_Base_SetConfig+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <TIM_Base_SetConfig+0xec>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <TIM_Base_SetConfig+0xf0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a22      	ldr	r2, [pc, #136]	; (8003344 <TIM_Base_SetConfig+0xe0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <TIM_Base_SetConfig+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <TIM_Base_SetConfig+0xe4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_Base_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	; (800334c <TIM_Base_SetConfig+0xe8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0x82>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <TIM_Base_SetConfig+0xec>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0x82>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <TIM_Base_SetConfig+0xf0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <TIM_Base_SetConfig+0xe0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <TIM_Base_SetConfig+0xe4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40013400 	.word	0x40013400
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00

08003358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a20      	ldr	r2, [pc, #128]	; (8003430 <TIM_OC1_SetConfig+0xd8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC1_SetConfig+0x64>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <TIM_OC1_SetConfig+0xdc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10c      	bne.n	80033d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0308 	bic.w	r3, r3, #8
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 0304 	bic.w	r3, r3, #4
 80033d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <TIM_OC1_SetConfig+0xd8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_OC1_SetConfig+0x8e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <TIM_OC1_SetConfig+0xdc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d111      	bne.n	800340a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	621a      	str	r2, [r3, #32]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40013400 	.word	0x40013400

08003438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f023 0210 	bic.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0320 	bic.w	r3, r3, #32
 8003482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <TIM_OC2_SetConfig+0xe0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_OC2_SetConfig+0x68>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a20      	ldr	r2, [pc, #128]	; (800351c <TIM_OC2_SetConfig+0xe4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10d      	bne.n	80034bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <TIM_OC2_SetConfig+0xe0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_OC2_SetConfig+0x94>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <TIM_OC2_SetConfig+0xe4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d113      	bne.n	80034f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40013400 	.word	0x40013400

08003520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0303 	bic.w	r3, r3, #3
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a21      	ldr	r2, [pc, #132]	; (8003600 <TIM_OC3_SetConfig+0xe0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x66>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <TIM_OC3_SetConfig+0xe4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10d      	bne.n	80035a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a16      	ldr	r2, [pc, #88]	; (8003600 <TIM_OC3_SetConfig+0xe0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC3_SetConfig+0x92>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <TIM_OC3_SetConfig+0xe4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d113      	bne.n	80035da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40012c00 	.word	0x40012c00
 8003604:	40013400 	.word	0x40013400

08003608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <TIM_OC4_SetConfig+0xa0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC4_SetConfig+0x68>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <TIM_OC4_SetConfig+0xa4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d109      	bne.n	8003684 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40013400 	.word	0x40013400

080036b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 030a 	bic.w	r3, r3, #10
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 0210 	bic.w	r2, r3, #16
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	031b      	lsls	r3, r3, #12
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	621a      	str	r2, [r3, #32]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	f043 0307 	orr.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379e:	b480      	push	{r7}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	609a      	str	r2, [r3, #8]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2201      	movs	r2, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e050      	b.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d00e      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10c      	bne.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40013400 	.word	0x40013400
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00

080038fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003914:	2302      	movs	r3, #2
 8003916:	e03d      	b.n	8003994 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e03f      	b.n	8003a30 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd fbdf 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2224      	movs	r2, #36	; 0x24
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f904 	bl	8003bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d17c      	bne.n	8003b52 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Transmit+0x2c>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e075      	b.n	8003b54 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Transmit+0x3e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e06e      	b.n	8003b54 <HAL_UART_Transmit+0x11c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2221      	movs	r2, #33	; 0x21
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fc8e 	bl	80013ac <HAL_GetTick>
 8003a90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	d108      	bne.n	8003aba <HAL_UART_Transmit+0x82>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e003      	b.n	8003ac2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003aca:	e02a      	b.n	8003b22 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f840 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e036      	b.n	8003b54 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	3302      	adds	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e007      	b.n	8003b14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1cf      	bne.n	8003acc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f810 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e006      	b.n	8003b54 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	e02c      	b.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d028      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7c:	f7fd fc16 	bl	80013ac <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d21d      	bcs.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e00f      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d0c3      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c2a:	f023 030c 	bic.w	r3, r3, #12
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <UART_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7fe fdf0 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7fe fdd8 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	0119      	lsls	r1, r3, #4
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009a      	lsls	r2, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <UART_SetConfig+0x118>)
 8003c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2064      	movs	r0, #100	; 0x64
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	3332      	adds	r3, #50	; 0x32
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <UART_SetConfig+0x118>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cbc:	4419      	add	r1, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <UART_SetConfig+0x118>)
 8003cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2064      	movs	r0, #100	; 0x64
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <UART_SetConfig+0x118>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6892      	ldr	r2, [r2, #8]
 8003d68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6852      	ldr	r2, [r2, #4]
 8003d72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d103      	bne.n	8003d86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <xTaskIncrementTick+0x150>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 808d 	bne.w	8003ed2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003db8:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <xTaskIncrementTick+0x154>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dc0:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <xTaskIncrementTick+0x154>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d120      	bne.n	8003e0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <xTaskIncrementTick+0x158>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xTaskIncrementTick+0x46>
 8003dec:	4b43      	ldr	r3, [pc, #268]	; (8003efc <xTaskIncrementTick+0x158>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <xTaskIncrementTick+0x15c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a41      	ldr	r2, [pc, #260]	; (8003efc <xTaskIncrementTick+0x158>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4a41      	ldr	r2, [pc, #260]	; (8003f00 <xTaskIncrementTick+0x15c>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <xTaskIncrementTick+0x160>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <xTaskIncrementTick+0x160>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	f000 f8e3 	bl	8003fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <xTaskIncrementTick+0x164>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d34d      	bcc.n	8003eb4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e18:	4b38      	ldr	r3, [pc, #224]	; (8003efc <xTaskIncrementTick+0x158>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <xTaskIncrementTick+0x82>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xTaskIncrementTick+0x84>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <xTaskIncrementTick+0x164>)
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e32:	601a      	str	r2, [r3, #0]
					break;
 8003e34:	e03e      	b.n	8003eb4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e36:	4b31      	ldr	r3, [pc, #196]	; (8003efc <xTaskIncrementTick+0x158>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d203      	bcs.n	8003e56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	; (8003f08 <xTaskIncrementTick+0x164>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6013      	str	r3, [r2, #0]
						break;
 8003e54:	e02e      	b.n	8003eb4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff79 	bl	8003d52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff70 	bl	8003d52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <xTaskIncrementTick+0x168>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <xTaskIncrementTick+0x168>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <xTaskIncrementTick+0x16c>)
 8003e92:	441a      	add	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7ff ff36 	bl	8003d0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <xTaskIncrementTick+0x170>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3b4      	bcc.n	8003e18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb2:	e7b1      	b.n	8003e18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <xTaskIncrementTick+0x170>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4915      	ldr	r1, [pc, #84]	; (8003f10 <xTaskIncrementTick+0x16c>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d907      	bls.n	8003edc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e004      	b.n	8003edc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <xTaskIncrementTick+0x174>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	4a0f      	ldr	r2, [pc, #60]	; (8003f18 <xTaskIncrementTick+0x174>)
 8003eda:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <xTaskIncrementTick+0x178>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200003cc 	.word	0x200003cc
 8003ef8:	200003b0 	.word	0x200003b0
 8003efc:	200003a8 	.word	0x200003a8
 8003f00:	200003ac 	.word	0x200003ac
 8003f04:	200003c4 	.word	0x200003c4
 8003f08:	200003c8 	.word	0x200003c8
 8003f0c:	200003b4 	.word	0x200003b4
 8003f10:	2000031c 	.word	0x2000031c
 8003f14:	20000318 	.word	0x20000318
 8003f18:	200003bc 	.word	0x200003bc
 8003f1c:	200003c0 	.word	0x200003c0

08003f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <vTaskSwitchContext+0xa0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <vTaskSwitchContext+0xa4>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f34:	e03f      	b.n	8003fb6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <vTaskSwitchContext+0xa4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <vTaskSwitchContext+0xa8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	fab3 f383 	clz	r3, r3
 8003f48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
 8003f4c:	f1c3 031f 	rsb	r3, r3, #31
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	491e      	ldr	r1, [pc, #120]	; (8003fcc <vTaskSwitchContext+0xac>)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	607b      	str	r3, [r7, #4]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <vTaskSwitchContext+0x5a>
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <vTaskSwitchContext+0xac>)
 8003f88:	4413      	add	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d104      	bne.n	8003fac <vTaskSwitchContext+0x8c>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <vTaskSwitchContext+0xb0>)
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	200003cc 	.word	0x200003cc
 8003fc4:	200003c0 	.word	0x200003c0
 8003fc8:	200003b4 	.word	0x200003b4
 8003fcc:	2000031c 	.word	0x2000031c
 8003fd0:	20000318 	.word	0x20000318

08003fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <prvResetNextTaskUnblockTime+0x40>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <prvResetNextTaskUnblockTime+0x14>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <prvResetNextTaskUnblockTime+0x16>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <prvResetNextTaskUnblockTime+0x44>)
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ff6:	e008      	b.n	800400a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <prvResetNextTaskUnblockTime+0x40>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a04      	ldr	r2, [pc, #16]	; (8004018 <prvResetNextTaskUnblockTime+0x44>)
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	200003a8 	.word	0x200003a8
 8004018:	200003c8 	.word	0x200003c8

0800401c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <xTaskGetSchedulerState+0x34>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800402a:	2301      	movs	r3, #1
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	e008      	b.n	8004042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <xTaskGetSchedulerState+0x38>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004038:	2302      	movs	r3, #2
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	e001      	b.n	8004042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004042:	687b      	ldr	r3, [r7, #4]
	}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	200003b8 	.word	0x200003b8
 8004054:	200003cc 	.word	0x200003cc
	...

08004060 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <pxCurrentTCBConst2>)
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	6808      	ldr	r0, [r1, #0]
 8004066:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800406a:	f380 8809 	msr	PSP, r0
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f380 8811 	msr	BASEPRI, r0
 800407a:	f04e 0e0d 	orr.w	lr, lr, #13
 800407e:	4770      	bx	lr

08004080 <pxCurrentTCBConst2>:
 8004080:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
	...

08004090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004090:	f3ef 8009 	mrs	r0, PSP
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <pxCurrentTCBConst>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040a0:	6010      	str	r0, [r2, #0]
 80040a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80040a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040aa:	f380 8811 	msr	BASEPRI, r0
 80040ae:	f7ff ff37 	bl	8003f20 <vTaskSwitchContext>
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040c6:	f380 8809 	msr	PSP, r0
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	4770      	bx	lr

080040d0 <pxCurrentTCBConst>:
 80040d0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040f2:	f7ff fe57 	bl	8003da4 <xTaskIncrementTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <xPortSysTickHandler+0x40>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800410e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <__errno>:
 800411c:	4b01      	ldr	r3, [pc, #4]	; (8004124 <__errno+0x8>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	2000000c 	.word	0x2000000c

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	2600      	movs	r6, #0
 800412c:	4d0c      	ldr	r5, [pc, #48]	; (8004160 <__libc_init_array+0x38>)
 800412e:	4c0d      	ldr	r4, [pc, #52]	; (8004164 <__libc_init_array+0x3c>)
 8004130:	1b64      	subs	r4, r4, r5
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	f000 ffb6 	bl	80050a8 <_init>
 800413c:	2600      	movs	r6, #0
 800413e:	4d0a      	ldr	r5, [pc, #40]	; (8004168 <__libc_init_array+0x40>)
 8004140:	4c0a      	ldr	r4, [pc, #40]	; (800416c <__libc_init_array+0x44>)
 8004142:	1b64      	subs	r4, r4, r5
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	f855 3b04 	ldr.w	r3, [r5], #4
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	0800521c 	.word	0x0800521c
 8004164:	0800521c 	.word	0x0800521c
 8004168:	0800521c 	.word	0x0800521c
 800416c:	08005220 	.word	0x08005220

08004170 <memset>:
 8004170:	4603      	mov	r3, r0
 8004172:	4402      	add	r2, r0
 8004174:	4293      	cmp	r3, r2
 8004176:	d100      	bne.n	800417a <memset+0xa>
 8004178:	4770      	bx	lr
 800417a:	f803 1b01 	strb.w	r1, [r3], #1
 800417e:	e7f9      	b.n	8004174 <memset+0x4>

08004180 <iprintf>:
 8004180:	b40f      	push	{r0, r1, r2, r3}
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <iprintf+0x2c>)
 8004184:	b513      	push	{r0, r1, r4, lr}
 8004186:	681c      	ldr	r4, [r3, #0]
 8004188:	b124      	cbz	r4, 8004194 <iprintf+0x14>
 800418a:	69a3      	ldr	r3, [r4, #24]
 800418c:	b913      	cbnz	r3, 8004194 <iprintf+0x14>
 800418e:	4620      	mov	r0, r4
 8004190:	f000 f9e4 	bl	800455c <__sinit>
 8004194:	ab05      	add	r3, sp, #20
 8004196:	4620      	mov	r0, r4
 8004198:	9a04      	ldr	r2, [sp, #16]
 800419a:	68a1      	ldr	r1, [r4, #8]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	f000 fbe7 	bl	8004970 <_vfiprintf_r>
 80041a2:	b002      	add	sp, #8
 80041a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a8:	b004      	add	sp, #16
 80041aa:	4770      	bx	lr
 80041ac:	2000000c 	.word	0x2000000c

080041b0 <__swbuf_r>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	460e      	mov	r6, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	4605      	mov	r5, r0
 80041b8:	b118      	cbz	r0, 80041c2 <__swbuf_r+0x12>
 80041ba:	6983      	ldr	r3, [r0, #24]
 80041bc:	b90b      	cbnz	r3, 80041c2 <__swbuf_r+0x12>
 80041be:	f000 f9cd 	bl	800455c <__sinit>
 80041c2:	4b21      	ldr	r3, [pc, #132]	; (8004248 <__swbuf_r+0x98>)
 80041c4:	429c      	cmp	r4, r3
 80041c6:	d12b      	bne.n	8004220 <__swbuf_r+0x70>
 80041c8:	686c      	ldr	r4, [r5, #4]
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	071a      	lsls	r2, r3, #28
 80041d2:	d52f      	bpl.n	8004234 <__swbuf_r+0x84>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	b36b      	cbz	r3, 8004234 <__swbuf_r+0x84>
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	6820      	ldr	r0, [r4, #0]
 80041dc:	b2f6      	uxtb	r6, r6
 80041de:	1ac0      	subs	r0, r0, r3
 80041e0:	6963      	ldr	r3, [r4, #20]
 80041e2:	4637      	mov	r7, r6
 80041e4:	4283      	cmp	r3, r0
 80041e6:	dc04      	bgt.n	80041f2 <__swbuf_r+0x42>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f922 	bl	8004434 <_fflush_r>
 80041f0:	bb30      	cbnz	r0, 8004240 <__swbuf_r+0x90>
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	3001      	adds	r0, #1
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60a3      	str	r3, [r4, #8]
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	701e      	strb	r6, [r3, #0]
 8004202:	6963      	ldr	r3, [r4, #20]
 8004204:	4283      	cmp	r3, r0
 8004206:	d004      	beq.n	8004212 <__swbuf_r+0x62>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	07db      	lsls	r3, r3, #31
 800420c:	d506      	bpl.n	800421c <__swbuf_r+0x6c>
 800420e:	2e0a      	cmp	r6, #10
 8004210:	d104      	bne.n	800421c <__swbuf_r+0x6c>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f000 f90d 	bl	8004434 <_fflush_r>
 800421a:	b988      	cbnz	r0, 8004240 <__swbuf_r+0x90>
 800421c:	4638      	mov	r0, r7
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <__swbuf_r+0x9c>)
 8004222:	429c      	cmp	r4, r3
 8004224:	d101      	bne.n	800422a <__swbuf_r+0x7a>
 8004226:	68ac      	ldr	r4, [r5, #8]
 8004228:	e7cf      	b.n	80041ca <__swbuf_r+0x1a>
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <__swbuf_r+0xa0>)
 800422c:	429c      	cmp	r4, r3
 800422e:	bf08      	it	eq
 8004230:	68ec      	ldreq	r4, [r5, #12]
 8004232:	e7ca      	b.n	80041ca <__swbuf_r+0x1a>
 8004234:	4621      	mov	r1, r4
 8004236:	4628      	mov	r0, r5
 8004238:	f000 f80c 	bl	8004254 <__swsetup_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	d0cb      	beq.n	80041d8 <__swbuf_r+0x28>
 8004240:	f04f 37ff 	mov.w	r7, #4294967295
 8004244:	e7ea      	b.n	800421c <__swbuf_r+0x6c>
 8004246:	bf00      	nop
 8004248:	080051a8 	.word	0x080051a8
 800424c:	080051c8 	.word	0x080051c8
 8004250:	08005188 	.word	0x08005188

08004254 <__swsetup_r>:
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <__swsetup_r+0xcc>)
 8004256:	b570      	push	{r4, r5, r6, lr}
 8004258:	681d      	ldr	r5, [r3, #0]
 800425a:	4606      	mov	r6, r0
 800425c:	460c      	mov	r4, r1
 800425e:	b125      	cbz	r5, 800426a <__swsetup_r+0x16>
 8004260:	69ab      	ldr	r3, [r5, #24]
 8004262:	b913      	cbnz	r3, 800426a <__swsetup_r+0x16>
 8004264:	4628      	mov	r0, r5
 8004266:	f000 f979 	bl	800455c <__sinit>
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <__swsetup_r+0xd0>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d10f      	bne.n	8004290 <__swsetup_r+0x3c>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004278:	0719      	lsls	r1, r3, #28
 800427a:	d42c      	bmi.n	80042d6 <__swsetup_r+0x82>
 800427c:	06dd      	lsls	r5, r3, #27
 800427e:	d411      	bmi.n	80042a4 <__swsetup_r+0x50>
 8004280:	2309      	movs	r3, #9
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	e03e      	b.n	800430e <__swsetup_r+0xba>
 8004290:	4b25      	ldr	r3, [pc, #148]	; (8004328 <__swsetup_r+0xd4>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d101      	bne.n	800429a <__swsetup_r+0x46>
 8004296:	68ac      	ldr	r4, [r5, #8]
 8004298:	e7eb      	b.n	8004272 <__swsetup_r+0x1e>
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <__swsetup_r+0xd8>)
 800429c:	429c      	cmp	r4, r3
 800429e:	bf08      	it	eq
 80042a0:	68ec      	ldreq	r4, [r5, #12]
 80042a2:	e7e6      	b.n	8004272 <__swsetup_r+0x1e>
 80042a4:	0758      	lsls	r0, r3, #29
 80042a6:	d512      	bpl.n	80042ce <__swsetup_r+0x7a>
 80042a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042aa:	b141      	cbz	r1, 80042be <__swsetup_r+0x6a>
 80042ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042b0:	4299      	cmp	r1, r3
 80042b2:	d002      	beq.n	80042ba <__swsetup_r+0x66>
 80042b4:	4630      	mov	r0, r6
 80042b6:	f000 fa57 	bl	8004768 <_free_r>
 80042ba:	2300      	movs	r3, #0
 80042bc:	6363      	str	r3, [r4, #52]	; 0x34
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042c4:	81a3      	strh	r3, [r4, #12]
 80042c6:	2300      	movs	r3, #0
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	f043 0308 	orr.w	r3, r3, #8
 80042d4:	81a3      	strh	r3, [r4, #12]
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	b94b      	cbnz	r3, 80042ee <__swsetup_r+0x9a>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d003      	beq.n	80042ee <__swsetup_r+0x9a>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 f9fd 	bl	80046e8 <__smakebuf_r>
 80042ee:	89a0      	ldrh	r0, [r4, #12]
 80042f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042f4:	f010 0301 	ands.w	r3, r0, #1
 80042f8:	d00a      	beq.n	8004310 <__swsetup_r+0xbc>
 80042fa:	2300      	movs	r3, #0
 80042fc:	60a3      	str	r3, [r4, #8]
 80042fe:	6963      	ldr	r3, [r4, #20]
 8004300:	425b      	negs	r3, r3
 8004302:	61a3      	str	r3, [r4, #24]
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	b943      	cbnz	r3, 800431a <__swsetup_r+0xc6>
 8004308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800430c:	d1ba      	bne.n	8004284 <__swsetup_r+0x30>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	0781      	lsls	r1, r0, #30
 8004312:	bf58      	it	pl
 8004314:	6963      	ldrpl	r3, [r4, #20]
 8004316:	60a3      	str	r3, [r4, #8]
 8004318:	e7f4      	b.n	8004304 <__swsetup_r+0xb0>
 800431a:	2000      	movs	r0, #0
 800431c:	e7f7      	b.n	800430e <__swsetup_r+0xba>
 800431e:	bf00      	nop
 8004320:	2000000c 	.word	0x2000000c
 8004324:	080051a8 	.word	0x080051a8
 8004328:	080051c8 	.word	0x080051c8
 800432c:	08005188 	.word	0x08005188

08004330 <__sflush_r>:
 8004330:	898a      	ldrh	r2, [r1, #12]
 8004332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004334:	4605      	mov	r5, r0
 8004336:	0710      	lsls	r0, r2, #28
 8004338:	460c      	mov	r4, r1
 800433a:	d457      	bmi.n	80043ec <__sflush_r+0xbc>
 800433c:	684b      	ldr	r3, [r1, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	dc04      	bgt.n	800434c <__sflush_r+0x1c>
 8004342:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	dc01      	bgt.n	800434c <__sflush_r+0x1c>
 8004348:	2000      	movs	r0, #0
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800434e:	2e00      	cmp	r6, #0
 8004350:	d0fa      	beq.n	8004348 <__sflush_r+0x18>
 8004352:	2300      	movs	r3, #0
 8004354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004358:	682f      	ldr	r7, [r5, #0]
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	d032      	beq.n	80043c4 <__sflush_r+0x94>
 800435e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	075a      	lsls	r2, r3, #29
 8004364:	d505      	bpl.n	8004372 <__sflush_r+0x42>
 8004366:	6863      	ldr	r3, [r4, #4]
 8004368:	1ac0      	subs	r0, r0, r3
 800436a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800436c:	b10b      	cbz	r3, 8004372 <__sflush_r+0x42>
 800436e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004370:	1ac0      	subs	r0, r0, r3
 8004372:	2300      	movs	r3, #0
 8004374:	4602      	mov	r2, r0
 8004376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004378:	4628      	mov	r0, r5
 800437a:	6a21      	ldr	r1, [r4, #32]
 800437c:	47b0      	blx	r6
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	d106      	bne.n	8004392 <__sflush_r+0x62>
 8004384:	6829      	ldr	r1, [r5, #0]
 8004386:	291d      	cmp	r1, #29
 8004388:	d82c      	bhi.n	80043e4 <__sflush_r+0xb4>
 800438a:	4a29      	ldr	r2, [pc, #164]	; (8004430 <__sflush_r+0x100>)
 800438c:	40ca      	lsrs	r2, r1
 800438e:	07d6      	lsls	r6, r2, #31
 8004390:	d528      	bpl.n	80043e4 <__sflush_r+0xb4>
 8004392:	2200      	movs	r2, #0
 8004394:	6062      	str	r2, [r4, #4]
 8004396:	6922      	ldr	r2, [r4, #16]
 8004398:	04d9      	lsls	r1, r3, #19
 800439a:	6022      	str	r2, [r4, #0]
 800439c:	d504      	bpl.n	80043a8 <__sflush_r+0x78>
 800439e:	1c42      	adds	r2, r0, #1
 80043a0:	d101      	bne.n	80043a6 <__sflush_r+0x76>
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	b903      	cbnz	r3, 80043a8 <__sflush_r+0x78>
 80043a6:	6560      	str	r0, [r4, #84]	; 0x54
 80043a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043aa:	602f      	str	r7, [r5, #0]
 80043ac:	2900      	cmp	r1, #0
 80043ae:	d0cb      	beq.n	8004348 <__sflush_r+0x18>
 80043b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d002      	beq.n	80043be <__sflush_r+0x8e>
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 f9d5 	bl	8004768 <_free_r>
 80043be:	2000      	movs	r0, #0
 80043c0:	6360      	str	r0, [r4, #52]	; 0x34
 80043c2:	e7c2      	b.n	800434a <__sflush_r+0x1a>
 80043c4:	6a21      	ldr	r1, [r4, #32]
 80043c6:	2301      	movs	r3, #1
 80043c8:	4628      	mov	r0, r5
 80043ca:	47b0      	blx	r6
 80043cc:	1c41      	adds	r1, r0, #1
 80043ce:	d1c7      	bne.n	8004360 <__sflush_r+0x30>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0c4      	beq.n	8004360 <__sflush_r+0x30>
 80043d6:	2b1d      	cmp	r3, #29
 80043d8:	d001      	beq.n	80043de <__sflush_r+0xae>
 80043da:	2b16      	cmp	r3, #22
 80043dc:	d101      	bne.n	80043e2 <__sflush_r+0xb2>
 80043de:	602f      	str	r7, [r5, #0]
 80043e0:	e7b2      	b.n	8004348 <__sflush_r+0x18>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	e7ae      	b.n	800434a <__sflush_r+0x1a>
 80043ec:	690f      	ldr	r7, [r1, #16]
 80043ee:	2f00      	cmp	r7, #0
 80043f0:	d0aa      	beq.n	8004348 <__sflush_r+0x18>
 80043f2:	0793      	lsls	r3, r2, #30
 80043f4:	bf18      	it	ne
 80043f6:	2300      	movne	r3, #0
 80043f8:	680e      	ldr	r6, [r1, #0]
 80043fa:	bf08      	it	eq
 80043fc:	694b      	ldreq	r3, [r1, #20]
 80043fe:	1bf6      	subs	r6, r6, r7
 8004400:	600f      	str	r7, [r1, #0]
 8004402:	608b      	str	r3, [r1, #8]
 8004404:	2e00      	cmp	r6, #0
 8004406:	dd9f      	ble.n	8004348 <__sflush_r+0x18>
 8004408:	4633      	mov	r3, r6
 800440a:	463a      	mov	r2, r7
 800440c:	4628      	mov	r0, r5
 800440e:	6a21      	ldr	r1, [r4, #32]
 8004410:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004414:	47e0      	blx	ip
 8004416:	2800      	cmp	r0, #0
 8004418:	dc06      	bgt.n	8004428 <__sflush_r+0xf8>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	e790      	b.n	800434a <__sflush_r+0x1a>
 8004428:	4407      	add	r7, r0
 800442a:	1a36      	subs	r6, r6, r0
 800442c:	e7ea      	b.n	8004404 <__sflush_r+0xd4>
 800442e:	bf00      	nop
 8004430:	20400001 	.word	0x20400001

08004434 <_fflush_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	4605      	mov	r5, r0
 800443a:	460c      	mov	r4, r1
 800443c:	b913      	cbnz	r3, 8004444 <_fflush_r+0x10>
 800443e:	2500      	movs	r5, #0
 8004440:	4628      	mov	r0, r5
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	b118      	cbz	r0, 800444e <_fflush_r+0x1a>
 8004446:	6983      	ldr	r3, [r0, #24]
 8004448:	b90b      	cbnz	r3, 800444e <_fflush_r+0x1a>
 800444a:	f000 f887 	bl	800455c <__sinit>
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <_fflush_r+0x6c>)
 8004450:	429c      	cmp	r4, r3
 8004452:	d11b      	bne.n	800448c <_fflush_r+0x58>
 8004454:	686c      	ldr	r4, [r5, #4]
 8004456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ef      	beq.n	800443e <_fflush_r+0xa>
 800445e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004460:	07d0      	lsls	r0, r2, #31
 8004462:	d404      	bmi.n	800446e <_fflush_r+0x3a>
 8004464:	0599      	lsls	r1, r3, #22
 8004466:	d402      	bmi.n	800446e <_fflush_r+0x3a>
 8004468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800446a:	f000 f915 	bl	8004698 <__retarget_lock_acquire_recursive>
 800446e:	4628      	mov	r0, r5
 8004470:	4621      	mov	r1, r4
 8004472:	f7ff ff5d 	bl	8004330 <__sflush_r>
 8004476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004478:	4605      	mov	r5, r0
 800447a:	07da      	lsls	r2, r3, #31
 800447c:	d4e0      	bmi.n	8004440 <_fflush_r+0xc>
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	059b      	lsls	r3, r3, #22
 8004482:	d4dd      	bmi.n	8004440 <_fflush_r+0xc>
 8004484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004486:	f000 f908 	bl	800469a <__retarget_lock_release_recursive>
 800448a:	e7d9      	b.n	8004440 <_fflush_r+0xc>
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <_fflush_r+0x70>)
 800448e:	429c      	cmp	r4, r3
 8004490:	d101      	bne.n	8004496 <_fflush_r+0x62>
 8004492:	68ac      	ldr	r4, [r5, #8]
 8004494:	e7df      	b.n	8004456 <_fflush_r+0x22>
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <_fflush_r+0x74>)
 8004498:	429c      	cmp	r4, r3
 800449a:	bf08      	it	eq
 800449c:	68ec      	ldreq	r4, [r5, #12]
 800449e:	e7da      	b.n	8004456 <_fflush_r+0x22>
 80044a0:	080051a8 	.word	0x080051a8
 80044a4:	080051c8 	.word	0x080051c8
 80044a8:	08005188 	.word	0x08005188

080044ac <std>:
 80044ac:	2300      	movs	r3, #0
 80044ae:	b510      	push	{r4, lr}
 80044b0:	4604      	mov	r4, r0
 80044b2:	e9c0 3300 	strd	r3, r3, [r0]
 80044b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ba:	6083      	str	r3, [r0, #8]
 80044bc:	8181      	strh	r1, [r0, #12]
 80044be:	6643      	str	r3, [r0, #100]	; 0x64
 80044c0:	81c2      	strh	r2, [r0, #14]
 80044c2:	6183      	str	r3, [r0, #24]
 80044c4:	4619      	mov	r1, r3
 80044c6:	2208      	movs	r2, #8
 80044c8:	305c      	adds	r0, #92	; 0x5c
 80044ca:	f7ff fe51 	bl	8004170 <memset>
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std+0x38>)
 80044d0:	6224      	str	r4, [r4, #32]
 80044d2:	6263      	str	r3, [r4, #36]	; 0x24
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <std+0x3c>)
 80044d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <std+0x40>)
 80044da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <std+0x44>)
 80044de:	6323      	str	r3, [r4, #48]	; 0x30
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	bf00      	nop
 80044e4:	08004f1d 	.word	0x08004f1d
 80044e8:	08004f3f 	.word	0x08004f3f
 80044ec:	08004f77 	.word	0x08004f77
 80044f0:	08004f9b 	.word	0x08004f9b

080044f4 <_cleanup_r>:
 80044f4:	4901      	ldr	r1, [pc, #4]	; (80044fc <_cleanup_r+0x8>)
 80044f6:	f000 b8af 	b.w	8004658 <_fwalk_reent>
 80044fa:	bf00      	nop
 80044fc:	08004435 	.word	0x08004435

08004500 <__sfmoreglue>:
 8004500:	2268      	movs	r2, #104	; 0x68
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	1e4d      	subs	r5, r1, #1
 8004506:	4355      	muls	r5, r2
 8004508:	460e      	mov	r6, r1
 800450a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800450e:	f000 f993 	bl	8004838 <_malloc_r>
 8004512:	4604      	mov	r4, r0
 8004514:	b140      	cbz	r0, 8004528 <__sfmoreglue+0x28>
 8004516:	2100      	movs	r1, #0
 8004518:	e9c0 1600 	strd	r1, r6, [r0]
 800451c:	300c      	adds	r0, #12
 800451e:	60a0      	str	r0, [r4, #8]
 8004520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004524:	f7ff fe24 	bl	8004170 <memset>
 8004528:	4620      	mov	r0, r4
 800452a:	bd70      	pop	{r4, r5, r6, pc}

0800452c <__sfp_lock_acquire>:
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <__sfp_lock_acquire+0x8>)
 800452e:	f000 b8b3 	b.w	8004698 <__retarget_lock_acquire_recursive>
 8004532:	bf00      	nop
 8004534:	200003d1 	.word	0x200003d1

08004538 <__sfp_lock_release>:
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <__sfp_lock_release+0x8>)
 800453a:	f000 b8ae 	b.w	800469a <__retarget_lock_release_recursive>
 800453e:	bf00      	nop
 8004540:	200003d1 	.word	0x200003d1

08004544 <__sinit_lock_acquire>:
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <__sinit_lock_acquire+0x8>)
 8004546:	f000 b8a7 	b.w	8004698 <__retarget_lock_acquire_recursive>
 800454a:	bf00      	nop
 800454c:	200003d2 	.word	0x200003d2

08004550 <__sinit_lock_release>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__sinit_lock_release+0x8>)
 8004552:	f000 b8a2 	b.w	800469a <__retarget_lock_release_recursive>
 8004556:	bf00      	nop
 8004558:	200003d2 	.word	0x200003d2

0800455c <__sinit>:
 800455c:	b510      	push	{r4, lr}
 800455e:	4604      	mov	r4, r0
 8004560:	f7ff fff0 	bl	8004544 <__sinit_lock_acquire>
 8004564:	69a3      	ldr	r3, [r4, #24]
 8004566:	b11b      	cbz	r3, 8004570 <__sinit+0x14>
 8004568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456c:	f7ff bff0 	b.w	8004550 <__sinit_lock_release>
 8004570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004574:	6523      	str	r3, [r4, #80]	; 0x50
 8004576:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <__sinit+0x68>)
 8004578:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <__sinit+0x6c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	62a2      	str	r2, [r4, #40]	; 0x28
 800457e:	42a3      	cmp	r3, r4
 8004580:	bf08      	it	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	4620      	mov	r0, r4
 8004586:	bf08      	it	eq
 8004588:	61a3      	streq	r3, [r4, #24]
 800458a:	f000 f81f 	bl	80045cc <__sfp>
 800458e:	6060      	str	r0, [r4, #4]
 8004590:	4620      	mov	r0, r4
 8004592:	f000 f81b 	bl	80045cc <__sfp>
 8004596:	60a0      	str	r0, [r4, #8]
 8004598:	4620      	mov	r0, r4
 800459a:	f000 f817 	bl	80045cc <__sfp>
 800459e:	2200      	movs	r2, #0
 80045a0:	2104      	movs	r1, #4
 80045a2:	60e0      	str	r0, [r4, #12]
 80045a4:	6860      	ldr	r0, [r4, #4]
 80045a6:	f7ff ff81 	bl	80044ac <std>
 80045aa:	2201      	movs	r2, #1
 80045ac:	2109      	movs	r1, #9
 80045ae:	68a0      	ldr	r0, [r4, #8]
 80045b0:	f7ff ff7c 	bl	80044ac <std>
 80045b4:	2202      	movs	r2, #2
 80045b6:	2112      	movs	r1, #18
 80045b8:	68e0      	ldr	r0, [r4, #12]
 80045ba:	f7ff ff77 	bl	80044ac <std>
 80045be:	2301      	movs	r3, #1
 80045c0:	61a3      	str	r3, [r4, #24]
 80045c2:	e7d1      	b.n	8004568 <__sinit+0xc>
 80045c4:	08005184 	.word	0x08005184
 80045c8:	080044f5 	.word	0x080044f5

080045cc <__sfp>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	4607      	mov	r7, r0
 80045d0:	f7ff ffac 	bl	800452c <__sfp_lock_acquire>
 80045d4:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <__sfp+0x84>)
 80045d6:	681e      	ldr	r6, [r3, #0]
 80045d8:	69b3      	ldr	r3, [r6, #24]
 80045da:	b913      	cbnz	r3, 80045e2 <__sfp+0x16>
 80045dc:	4630      	mov	r0, r6
 80045de:	f7ff ffbd 	bl	800455c <__sinit>
 80045e2:	3648      	adds	r6, #72	; 0x48
 80045e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	d503      	bpl.n	80045f4 <__sfp+0x28>
 80045ec:	6833      	ldr	r3, [r6, #0]
 80045ee:	b30b      	cbz	r3, 8004634 <__sfp+0x68>
 80045f0:	6836      	ldr	r6, [r6, #0]
 80045f2:	e7f7      	b.n	80045e4 <__sfp+0x18>
 80045f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045f8:	b9d5      	cbnz	r5, 8004630 <__sfp+0x64>
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <__sfp+0x88>)
 80045fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004600:	60e3      	str	r3, [r4, #12]
 8004602:	6665      	str	r5, [r4, #100]	; 0x64
 8004604:	f000 f847 	bl	8004696 <__retarget_lock_init_recursive>
 8004608:	f7ff ff96 	bl	8004538 <__sfp_lock_release>
 800460c:	2208      	movs	r2, #8
 800460e:	4629      	mov	r1, r5
 8004610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004618:	6025      	str	r5, [r4, #0]
 800461a:	61a5      	str	r5, [r4, #24]
 800461c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004620:	f7ff fda6 	bl	8004170 <memset>
 8004624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800462c:	4620      	mov	r0, r4
 800462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004630:	3468      	adds	r4, #104	; 0x68
 8004632:	e7d9      	b.n	80045e8 <__sfp+0x1c>
 8004634:	2104      	movs	r1, #4
 8004636:	4638      	mov	r0, r7
 8004638:	f7ff ff62 	bl	8004500 <__sfmoreglue>
 800463c:	4604      	mov	r4, r0
 800463e:	6030      	str	r0, [r6, #0]
 8004640:	2800      	cmp	r0, #0
 8004642:	d1d5      	bne.n	80045f0 <__sfp+0x24>
 8004644:	f7ff ff78 	bl	8004538 <__sfp_lock_release>
 8004648:	230c      	movs	r3, #12
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	e7ee      	b.n	800462c <__sfp+0x60>
 800464e:	bf00      	nop
 8004650:	08005184 	.word	0x08005184
 8004654:	ffff0001 	.word	0xffff0001

08004658 <_fwalk_reent>:
 8004658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800465c:	4606      	mov	r6, r0
 800465e:	4688      	mov	r8, r1
 8004660:	2700      	movs	r7, #0
 8004662:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800466a:	f1b9 0901 	subs.w	r9, r9, #1
 800466e:	d505      	bpl.n	800467c <_fwalk_reent+0x24>
 8004670:	6824      	ldr	r4, [r4, #0]
 8004672:	2c00      	cmp	r4, #0
 8004674:	d1f7      	bne.n	8004666 <_fwalk_reent+0xe>
 8004676:	4638      	mov	r0, r7
 8004678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800467c:	89ab      	ldrh	r3, [r5, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d907      	bls.n	8004692 <_fwalk_reent+0x3a>
 8004682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004686:	3301      	adds	r3, #1
 8004688:	d003      	beq.n	8004692 <_fwalk_reent+0x3a>
 800468a:	4629      	mov	r1, r5
 800468c:	4630      	mov	r0, r6
 800468e:	47c0      	blx	r8
 8004690:	4307      	orrs	r7, r0
 8004692:	3568      	adds	r5, #104	; 0x68
 8004694:	e7e9      	b.n	800466a <_fwalk_reent+0x12>

08004696 <__retarget_lock_init_recursive>:
 8004696:	4770      	bx	lr

08004698 <__retarget_lock_acquire_recursive>:
 8004698:	4770      	bx	lr

0800469a <__retarget_lock_release_recursive>:
 800469a:	4770      	bx	lr

0800469c <__swhatbuf_r>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	460e      	mov	r6, r1
 80046a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a4:	4614      	mov	r4, r2
 80046a6:	2900      	cmp	r1, #0
 80046a8:	461d      	mov	r5, r3
 80046aa:	b096      	sub	sp, #88	; 0x58
 80046ac:	da08      	bge.n	80046c0 <__swhatbuf_r+0x24>
 80046ae:	2200      	movs	r2, #0
 80046b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	061a      	lsls	r2, r3, #24
 80046b8:	d410      	bmi.n	80046dc <__swhatbuf_r+0x40>
 80046ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046be:	e00e      	b.n	80046de <__swhatbuf_r+0x42>
 80046c0:	466a      	mov	r2, sp
 80046c2:	f000 fc91 	bl	8004fe8 <_fstat_r>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	dbf1      	blt.n	80046ae <__swhatbuf_r+0x12>
 80046ca:	9a01      	ldr	r2, [sp, #4]
 80046cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046d4:	425a      	negs	r2, r3
 80046d6:	415a      	adcs	r2, r3
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	e7ee      	b.n	80046ba <__swhatbuf_r+0x1e>
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	2000      	movs	r0, #0
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	b016      	add	sp, #88	; 0x58
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046e8 <__smakebuf_r>:
 80046e8:	898b      	ldrh	r3, [r1, #12]
 80046ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046ec:	079d      	lsls	r5, r3, #30
 80046ee:	4606      	mov	r6, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	d507      	bpl.n	8004704 <__smakebuf_r+0x1c>
 80046f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	2301      	movs	r3, #1
 80046fe:	6163      	str	r3, [r4, #20]
 8004700:	b002      	add	sp, #8
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	466a      	mov	r2, sp
 8004706:	ab01      	add	r3, sp, #4
 8004708:	f7ff ffc8 	bl	800469c <__swhatbuf_r>
 800470c:	9900      	ldr	r1, [sp, #0]
 800470e:	4605      	mov	r5, r0
 8004710:	4630      	mov	r0, r6
 8004712:	f000 f891 	bl	8004838 <_malloc_r>
 8004716:	b948      	cbnz	r0, 800472c <__smakebuf_r+0x44>
 8004718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800471c:	059a      	lsls	r2, r3, #22
 800471e:	d4ef      	bmi.n	8004700 <__smakebuf_r+0x18>
 8004720:	f023 0303 	bic.w	r3, r3, #3
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	81a3      	strh	r3, [r4, #12]
 800472a:	e7e3      	b.n	80046f4 <__smakebuf_r+0xc>
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <__smakebuf_r+0x7c>)
 800472e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	6020      	str	r0, [r4, #0]
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	81a3      	strh	r3, [r4, #12]
 800473a:	9b00      	ldr	r3, [sp, #0]
 800473c:	6120      	str	r0, [r4, #16]
 800473e:	6163      	str	r3, [r4, #20]
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	b15b      	cbz	r3, 800475c <__smakebuf_r+0x74>
 8004744:	4630      	mov	r0, r6
 8004746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800474a:	f000 fc5f 	bl	800500c <_isatty_r>
 800474e:	b128      	cbz	r0, 800475c <__smakebuf_r+0x74>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	89a0      	ldrh	r0, [r4, #12]
 800475e:	4305      	orrs	r5, r0
 8004760:	81a5      	strh	r5, [r4, #12]
 8004762:	e7cd      	b.n	8004700 <__smakebuf_r+0x18>
 8004764:	080044f5 	.word	0x080044f5

08004768 <_free_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4605      	mov	r5, r0
 800476c:	2900      	cmp	r1, #0
 800476e:	d040      	beq.n	80047f2 <_free_r+0x8a>
 8004770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004774:	1f0c      	subs	r4, r1, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfb8      	it	lt
 800477a:	18e4      	addlt	r4, r4, r3
 800477c:	f000 fc76 	bl	800506c <__malloc_lock>
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <_free_r+0x8c>)
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	b933      	cbnz	r3, 8004794 <_free_r+0x2c>
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	6014      	str	r4, [r2, #0]
 800478a:	4628      	mov	r0, r5
 800478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004790:	f000 bc72 	b.w	8005078 <__malloc_unlock>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d908      	bls.n	80047aa <_free_r+0x42>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428b      	cmp	r3, r1
 800479e:	bf01      	itttt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	1809      	addeq	r1, r1, r0
 80047a6:	6021      	streq	r1, [r4, #0]
 80047a8:	e7ed      	b.n	8004786 <_free_r+0x1e>
 80047aa:	461a      	mov	r2, r3
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b10b      	cbz	r3, 80047b4 <_free_r+0x4c>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d9fa      	bls.n	80047aa <_free_r+0x42>
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	1850      	adds	r0, r2, r1
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d10b      	bne.n	80047d4 <_free_r+0x6c>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	4401      	add	r1, r0
 80047c0:	1850      	adds	r0, r2, r1
 80047c2:	4283      	cmp	r3, r0
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	d1e0      	bne.n	800478a <_free_r+0x22>
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4401      	add	r1, r0
 80047ce:	6011      	str	r1, [r2, #0]
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	e7da      	b.n	800478a <_free_r+0x22>
 80047d4:	d902      	bls.n	80047dc <_free_r+0x74>
 80047d6:	230c      	movs	r3, #12
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	e7d6      	b.n	800478a <_free_r+0x22>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	1821      	adds	r1, r4, r0
 80047e0:	428b      	cmp	r3, r1
 80047e2:	bf01      	itttt	eq
 80047e4:	6819      	ldreq	r1, [r3, #0]
 80047e6:	685b      	ldreq	r3, [r3, #4]
 80047e8:	1809      	addeq	r1, r1, r0
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6054      	str	r4, [r2, #4]
 80047f0:	e7cb      	b.n	800478a <_free_r+0x22>
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	200003d4 	.word	0x200003d4

080047f8 <sbrk_aligned>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4e0e      	ldr	r6, [pc, #56]	; (8004834 <sbrk_aligned+0x3c>)
 80047fc:	460c      	mov	r4, r1
 80047fe:	6831      	ldr	r1, [r6, #0]
 8004800:	4605      	mov	r5, r0
 8004802:	b911      	cbnz	r1, 800480a <sbrk_aligned+0x12>
 8004804:	f000 fb7a 	bl	8004efc <_sbrk_r>
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 fb75 	bl	8004efc <_sbrk_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d00a      	beq.n	800482c <sbrk_aligned+0x34>
 8004816:	1cc4      	adds	r4, r0, #3
 8004818:	f024 0403 	bic.w	r4, r4, #3
 800481c:	42a0      	cmp	r0, r4
 800481e:	d007      	beq.n	8004830 <sbrk_aligned+0x38>
 8004820:	1a21      	subs	r1, r4, r0
 8004822:	4628      	mov	r0, r5
 8004824:	f000 fb6a 	bl	8004efc <_sbrk_r>
 8004828:	3001      	adds	r0, #1
 800482a:	d101      	bne.n	8004830 <sbrk_aligned+0x38>
 800482c:	f04f 34ff 	mov.w	r4, #4294967295
 8004830:	4620      	mov	r0, r4
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	200003d8 	.word	0x200003d8

08004838 <_malloc_r>:
 8004838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483c:	1ccd      	adds	r5, r1, #3
 800483e:	f025 0503 	bic.w	r5, r5, #3
 8004842:	3508      	adds	r5, #8
 8004844:	2d0c      	cmp	r5, #12
 8004846:	bf38      	it	cc
 8004848:	250c      	movcc	r5, #12
 800484a:	2d00      	cmp	r5, #0
 800484c:	4607      	mov	r7, r0
 800484e:	db01      	blt.n	8004854 <_malloc_r+0x1c>
 8004850:	42a9      	cmp	r1, r5
 8004852:	d905      	bls.n	8004860 <_malloc_r+0x28>
 8004854:	230c      	movs	r3, #12
 8004856:	2600      	movs	r6, #0
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4630      	mov	r0, r6
 800485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004860:	4e2e      	ldr	r6, [pc, #184]	; (800491c <_malloc_r+0xe4>)
 8004862:	f000 fc03 	bl	800506c <__malloc_lock>
 8004866:	6833      	ldr	r3, [r6, #0]
 8004868:	461c      	mov	r4, r3
 800486a:	bb34      	cbnz	r4, 80048ba <_malloc_r+0x82>
 800486c:	4629      	mov	r1, r5
 800486e:	4638      	mov	r0, r7
 8004870:	f7ff ffc2 	bl	80047f8 <sbrk_aligned>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	4604      	mov	r4, r0
 8004878:	d14d      	bne.n	8004916 <_malloc_r+0xde>
 800487a:	6834      	ldr	r4, [r6, #0]
 800487c:	4626      	mov	r6, r4
 800487e:	2e00      	cmp	r6, #0
 8004880:	d140      	bne.n	8004904 <_malloc_r+0xcc>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	4631      	mov	r1, r6
 8004886:	4638      	mov	r0, r7
 8004888:	eb04 0803 	add.w	r8, r4, r3
 800488c:	f000 fb36 	bl	8004efc <_sbrk_r>
 8004890:	4580      	cmp	r8, r0
 8004892:	d13a      	bne.n	800490a <_malloc_r+0xd2>
 8004894:	6821      	ldr	r1, [r4, #0]
 8004896:	3503      	adds	r5, #3
 8004898:	1a6d      	subs	r5, r5, r1
 800489a:	f025 0503 	bic.w	r5, r5, #3
 800489e:	3508      	adds	r5, #8
 80048a0:	2d0c      	cmp	r5, #12
 80048a2:	bf38      	it	cc
 80048a4:	250c      	movcc	r5, #12
 80048a6:	4638      	mov	r0, r7
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7ff ffa5 	bl	80047f8 <sbrk_aligned>
 80048ae:	3001      	adds	r0, #1
 80048b0:	d02b      	beq.n	800490a <_malloc_r+0xd2>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	442b      	add	r3, r5
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	e00e      	b.n	80048d8 <_malloc_r+0xa0>
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	1b52      	subs	r2, r2, r5
 80048be:	d41e      	bmi.n	80048fe <_malloc_r+0xc6>
 80048c0:	2a0b      	cmp	r2, #11
 80048c2:	d916      	bls.n	80048f2 <_malloc_r+0xba>
 80048c4:	1961      	adds	r1, r4, r5
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	bf18      	it	ne
 80048cc:	6059      	strne	r1, [r3, #4]
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	bf08      	it	eq
 80048d2:	6031      	streq	r1, [r6, #0]
 80048d4:	5162      	str	r2, [r4, r5]
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	4638      	mov	r0, r7
 80048da:	f104 060b 	add.w	r6, r4, #11
 80048de:	f000 fbcb 	bl	8005078 <__malloc_unlock>
 80048e2:	f026 0607 	bic.w	r6, r6, #7
 80048e6:	1d23      	adds	r3, r4, #4
 80048e8:	1af2      	subs	r2, r6, r3
 80048ea:	d0b6      	beq.n	800485a <_malloc_r+0x22>
 80048ec:	1b9b      	subs	r3, r3, r6
 80048ee:	50a3      	str	r3, [r4, r2]
 80048f0:	e7b3      	b.n	800485a <_malloc_r+0x22>
 80048f2:	6862      	ldr	r2, [r4, #4]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	bf0c      	ite	eq
 80048f8:	6032      	streq	r2, [r6, #0]
 80048fa:	605a      	strne	r2, [r3, #4]
 80048fc:	e7ec      	b.n	80048d8 <_malloc_r+0xa0>
 80048fe:	4623      	mov	r3, r4
 8004900:	6864      	ldr	r4, [r4, #4]
 8004902:	e7b2      	b.n	800486a <_malloc_r+0x32>
 8004904:	4634      	mov	r4, r6
 8004906:	6876      	ldr	r6, [r6, #4]
 8004908:	e7b9      	b.n	800487e <_malloc_r+0x46>
 800490a:	230c      	movs	r3, #12
 800490c:	4638      	mov	r0, r7
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	f000 fbb2 	bl	8005078 <__malloc_unlock>
 8004914:	e7a1      	b.n	800485a <_malloc_r+0x22>
 8004916:	6025      	str	r5, [r4, #0]
 8004918:	e7de      	b.n	80048d8 <_malloc_r+0xa0>
 800491a:	bf00      	nop
 800491c:	200003d4 	.word	0x200003d4

08004920 <__sfputc_r>:
 8004920:	6893      	ldr	r3, [r2, #8]
 8004922:	b410      	push	{r4}
 8004924:	3b01      	subs	r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	6093      	str	r3, [r2, #8]
 800492a:	da07      	bge.n	800493c <__sfputc_r+0x1c>
 800492c:	6994      	ldr	r4, [r2, #24]
 800492e:	42a3      	cmp	r3, r4
 8004930:	db01      	blt.n	8004936 <__sfputc_r+0x16>
 8004932:	290a      	cmp	r1, #10
 8004934:	d102      	bne.n	800493c <__sfputc_r+0x1c>
 8004936:	bc10      	pop	{r4}
 8004938:	f7ff bc3a 	b.w	80041b0 <__swbuf_r>
 800493c:	6813      	ldr	r3, [r2, #0]
 800493e:	1c58      	adds	r0, r3, #1
 8004940:	6010      	str	r0, [r2, #0]
 8004942:	7019      	strb	r1, [r3, #0]
 8004944:	4608      	mov	r0, r1
 8004946:	bc10      	pop	{r4}
 8004948:	4770      	bx	lr

0800494a <__sfputs_r>:
 800494a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494c:	4606      	mov	r6, r0
 800494e:	460f      	mov	r7, r1
 8004950:	4614      	mov	r4, r2
 8004952:	18d5      	adds	r5, r2, r3
 8004954:	42ac      	cmp	r4, r5
 8004956:	d101      	bne.n	800495c <__sfputs_r+0x12>
 8004958:	2000      	movs	r0, #0
 800495a:	e007      	b.n	800496c <__sfputs_r+0x22>
 800495c:	463a      	mov	r2, r7
 800495e:	4630      	mov	r0, r6
 8004960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004964:	f7ff ffdc 	bl	8004920 <__sfputc_r>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d1f3      	bne.n	8004954 <__sfputs_r+0xa>
 800496c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004970 <_vfiprintf_r>:
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	460d      	mov	r5, r1
 8004976:	4614      	mov	r4, r2
 8004978:	4698      	mov	r8, r3
 800497a:	4606      	mov	r6, r0
 800497c:	b09d      	sub	sp, #116	; 0x74
 800497e:	b118      	cbz	r0, 8004988 <_vfiprintf_r+0x18>
 8004980:	6983      	ldr	r3, [r0, #24]
 8004982:	b90b      	cbnz	r3, 8004988 <_vfiprintf_r+0x18>
 8004984:	f7ff fdea 	bl	800455c <__sinit>
 8004988:	4b89      	ldr	r3, [pc, #548]	; (8004bb0 <_vfiprintf_r+0x240>)
 800498a:	429d      	cmp	r5, r3
 800498c:	d11b      	bne.n	80049c6 <_vfiprintf_r+0x56>
 800498e:	6875      	ldr	r5, [r6, #4]
 8004990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004992:	07d9      	lsls	r1, r3, #31
 8004994:	d405      	bmi.n	80049a2 <_vfiprintf_r+0x32>
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	059a      	lsls	r2, r3, #22
 800499a:	d402      	bmi.n	80049a2 <_vfiprintf_r+0x32>
 800499c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800499e:	f7ff fe7b 	bl	8004698 <__retarget_lock_acquire_recursive>
 80049a2:	89ab      	ldrh	r3, [r5, #12]
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	d501      	bpl.n	80049ac <_vfiprintf_r+0x3c>
 80049a8:	692b      	ldr	r3, [r5, #16]
 80049aa:	b9eb      	cbnz	r3, 80049e8 <_vfiprintf_r+0x78>
 80049ac:	4629      	mov	r1, r5
 80049ae:	4630      	mov	r0, r6
 80049b0:	f7ff fc50 	bl	8004254 <__swsetup_r>
 80049b4:	b1c0      	cbz	r0, 80049e8 <_vfiprintf_r+0x78>
 80049b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049b8:	07dc      	lsls	r4, r3, #31
 80049ba:	d50e      	bpl.n	80049da <_vfiprintf_r+0x6a>
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	b01d      	add	sp, #116	; 0x74
 80049c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c6:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <_vfiprintf_r+0x244>)
 80049c8:	429d      	cmp	r5, r3
 80049ca:	d101      	bne.n	80049d0 <_vfiprintf_r+0x60>
 80049cc:	68b5      	ldr	r5, [r6, #8]
 80049ce:	e7df      	b.n	8004990 <_vfiprintf_r+0x20>
 80049d0:	4b79      	ldr	r3, [pc, #484]	; (8004bb8 <_vfiprintf_r+0x248>)
 80049d2:	429d      	cmp	r5, r3
 80049d4:	bf08      	it	eq
 80049d6:	68f5      	ldreq	r5, [r6, #12]
 80049d8:	e7da      	b.n	8004990 <_vfiprintf_r+0x20>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	0598      	lsls	r0, r3, #22
 80049de:	d4ed      	bmi.n	80049bc <_vfiprintf_r+0x4c>
 80049e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e2:	f7ff fe5a 	bl	800469a <__retarget_lock_release_recursive>
 80049e6:	e7e9      	b.n	80049bc <_vfiprintf_r+0x4c>
 80049e8:	2300      	movs	r3, #0
 80049ea:	9309      	str	r3, [sp, #36]	; 0x24
 80049ec:	2320      	movs	r3, #32
 80049ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049f2:	2330      	movs	r3, #48	; 0x30
 80049f4:	f04f 0901 	mov.w	r9, #1
 80049f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004bbc <_vfiprintf_r+0x24c>
 8004a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a04:	4623      	mov	r3, r4
 8004a06:	469a      	mov	sl, r3
 8004a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a0c:	b10a      	cbz	r2, 8004a12 <_vfiprintf_r+0xa2>
 8004a0e:	2a25      	cmp	r2, #37	; 0x25
 8004a10:	d1f9      	bne.n	8004a06 <_vfiprintf_r+0x96>
 8004a12:	ebba 0b04 	subs.w	fp, sl, r4
 8004a16:	d00b      	beq.n	8004a30 <_vfiprintf_r+0xc0>
 8004a18:	465b      	mov	r3, fp
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f7ff ff93 	bl	800494a <__sfputs_r>
 8004a24:	3001      	adds	r0, #1
 8004a26:	f000 80aa 	beq.w	8004b7e <_vfiprintf_r+0x20e>
 8004a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a2c:	445a      	add	r2, fp
 8004a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a30:	f89a 3000 	ldrb.w	r3, [sl]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a2 	beq.w	8004b7e <_vfiprintf_r+0x20e>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a44:	f10a 0a01 	add.w	sl, sl, #1
 8004a48:	9304      	str	r3, [sp, #16]
 8004a4a:	9307      	str	r3, [sp, #28]
 8004a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a50:	931a      	str	r3, [sp, #104]	; 0x68
 8004a52:	4654      	mov	r4, sl
 8004a54:	2205      	movs	r2, #5
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	4858      	ldr	r0, [pc, #352]	; (8004bbc <_vfiprintf_r+0x24c>)
 8004a5c:	f000 faf8 	bl	8005050 <memchr>
 8004a60:	9a04      	ldr	r2, [sp, #16]
 8004a62:	b9d8      	cbnz	r0, 8004a9c <_vfiprintf_r+0x12c>
 8004a64:	06d1      	lsls	r1, r2, #27
 8004a66:	bf44      	itt	mi
 8004a68:	2320      	movmi	r3, #32
 8004a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a6e:	0713      	lsls	r3, r2, #28
 8004a70:	bf44      	itt	mi
 8004a72:	232b      	movmi	r3, #43	; 0x2b
 8004a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a78:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7e:	d015      	beq.n	8004aac <_vfiprintf_r+0x13c>
 8004a80:	4654      	mov	r4, sl
 8004a82:	2000      	movs	r0, #0
 8004a84:	f04f 0c0a 	mov.w	ip, #10
 8004a88:	9a07      	ldr	r2, [sp, #28]
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a90:	3b30      	subs	r3, #48	; 0x30
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d94e      	bls.n	8004b34 <_vfiprintf_r+0x1c4>
 8004a96:	b1b0      	cbz	r0, 8004ac6 <_vfiprintf_r+0x156>
 8004a98:	9207      	str	r2, [sp, #28]
 8004a9a:	e014      	b.n	8004ac6 <_vfiprintf_r+0x156>
 8004a9c:	eba0 0308 	sub.w	r3, r0, r8
 8004aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	46a2      	mov	sl, r4
 8004aa8:	9304      	str	r3, [sp, #16]
 8004aaa:	e7d2      	b.n	8004a52 <_vfiprintf_r+0xe2>
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	1d19      	adds	r1, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	9103      	str	r1, [sp, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfbb      	ittet	lt
 8004ab8:	425b      	neglt	r3, r3
 8004aba:	f042 0202 	orrlt.w	r2, r2, #2
 8004abe:	9307      	strge	r3, [sp, #28]
 8004ac0:	9307      	strlt	r3, [sp, #28]
 8004ac2:	bfb8      	it	lt
 8004ac4:	9204      	strlt	r2, [sp, #16]
 8004ac6:	7823      	ldrb	r3, [r4, #0]
 8004ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aca:	d10c      	bne.n	8004ae6 <_vfiprintf_r+0x176>
 8004acc:	7863      	ldrb	r3, [r4, #1]
 8004ace:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad0:	d135      	bne.n	8004b3e <_vfiprintf_r+0x1ce>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	3402      	adds	r4, #2
 8004ad6:	1d1a      	adds	r2, r3, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	9203      	str	r2, [sp, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bfb8      	it	lt
 8004ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ae4:	9305      	str	r3, [sp, #20]
 8004ae6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004bc0 <_vfiprintf_r+0x250>
 8004aea:	2203      	movs	r2, #3
 8004aec:	4650      	mov	r0, sl
 8004aee:	7821      	ldrb	r1, [r4, #0]
 8004af0:	f000 faae 	bl	8005050 <memchr>
 8004af4:	b140      	cbz	r0, 8004b08 <_vfiprintf_r+0x198>
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	eba0 000a 	sub.w	r0, r0, sl
 8004afc:	fa03 f000 	lsl.w	r0, r3, r0
 8004b00:	9b04      	ldr	r3, [sp, #16]
 8004b02:	3401      	adds	r4, #1
 8004b04:	4303      	orrs	r3, r0
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0c:	2206      	movs	r2, #6
 8004b0e:	482d      	ldr	r0, [pc, #180]	; (8004bc4 <_vfiprintf_r+0x254>)
 8004b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b14:	f000 fa9c 	bl	8005050 <memchr>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d03f      	beq.n	8004b9c <_vfiprintf_r+0x22c>
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <_vfiprintf_r+0x258>)
 8004b1e:	bb1b      	cbnz	r3, 8004b68 <_vfiprintf_r+0x1f8>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	3307      	adds	r3, #7
 8004b24:	f023 0307 	bic.w	r3, r3, #7
 8004b28:	3308      	adds	r3, #8
 8004b2a:	9303      	str	r3, [sp, #12]
 8004b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2e:	443b      	add	r3, r7
 8004b30:	9309      	str	r3, [sp, #36]	; 0x24
 8004b32:	e767      	b.n	8004a04 <_vfiprintf_r+0x94>
 8004b34:	460c      	mov	r4, r1
 8004b36:	2001      	movs	r0, #1
 8004b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b3c:	e7a5      	b.n	8004a8a <_vfiprintf_r+0x11a>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f04f 0c0a 	mov.w	ip, #10
 8004b44:	4619      	mov	r1, r3
 8004b46:	3401      	adds	r4, #1
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b50:	3a30      	subs	r2, #48	; 0x30
 8004b52:	2a09      	cmp	r2, #9
 8004b54:	d903      	bls.n	8004b5e <_vfiprintf_r+0x1ee>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c5      	beq.n	8004ae6 <_vfiprintf_r+0x176>
 8004b5a:	9105      	str	r1, [sp, #20]
 8004b5c:	e7c3      	b.n	8004ae6 <_vfiprintf_r+0x176>
 8004b5e:	4604      	mov	r4, r0
 8004b60:	2301      	movs	r3, #1
 8004b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b66:	e7f0      	b.n	8004b4a <_vfiprintf_r+0x1da>
 8004b68:	ab03      	add	r3, sp, #12
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <_vfiprintf_r+0x25c>)
 8004b72:	a904      	add	r1, sp, #16
 8004b74:	f3af 8000 	nop.w
 8004b78:	4607      	mov	r7, r0
 8004b7a:	1c78      	adds	r0, r7, #1
 8004b7c:	d1d6      	bne.n	8004b2c <_vfiprintf_r+0x1bc>
 8004b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b80:	07d9      	lsls	r1, r3, #31
 8004b82:	d405      	bmi.n	8004b90 <_vfiprintf_r+0x220>
 8004b84:	89ab      	ldrh	r3, [r5, #12]
 8004b86:	059a      	lsls	r2, r3, #22
 8004b88:	d402      	bmi.n	8004b90 <_vfiprintf_r+0x220>
 8004b8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b8c:	f7ff fd85 	bl	800469a <__retarget_lock_release_recursive>
 8004b90:	89ab      	ldrh	r3, [r5, #12]
 8004b92:	065b      	lsls	r3, r3, #25
 8004b94:	f53f af12 	bmi.w	80049bc <_vfiprintf_r+0x4c>
 8004b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9a:	e711      	b.n	80049c0 <_vfiprintf_r+0x50>
 8004b9c:	ab03      	add	r3, sp, #12
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <_vfiprintf_r+0x25c>)
 8004ba6:	a904      	add	r1, sp, #16
 8004ba8:	f000 f882 	bl	8004cb0 <_printf_i>
 8004bac:	e7e4      	b.n	8004b78 <_vfiprintf_r+0x208>
 8004bae:	bf00      	nop
 8004bb0:	080051a8 	.word	0x080051a8
 8004bb4:	080051c8 	.word	0x080051c8
 8004bb8:	08005188 	.word	0x08005188
 8004bbc:	080051e8 	.word	0x080051e8
 8004bc0:	080051ee 	.word	0x080051ee
 8004bc4:	080051f2 	.word	0x080051f2
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	0800494b 	.word	0x0800494b

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	4607      	mov	r7, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	bfb8      	it	lt
 8004be2:	4613      	movlt	r3, r2
 8004be4:	6033      	str	r3, [r6, #0]
 8004be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bea:	460c      	mov	r4, r1
 8004bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc28      	bgt.n	8004c6a <_printf_common+0x9a>
 8004c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c1c:	1e13      	subs	r3, r2, #0
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d42d      	bmi.n	8004c84 <_printf_common+0xb4>
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d020      	beq.n	8004c78 <_printf_common+0xa8>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	68e5      	ldr	r5, [r4, #12]
 8004c3a:	f003 0306 	and.w	r3, r3, #6
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf18      	it	ne
 8004c42:	2500      	movne	r5, #0
 8004c44:	6832      	ldr	r2, [r6, #0]
 8004c46:	f04f 0600 	mov.w	r6, #0
 8004c4a:	68a3      	ldr	r3, [r4, #8]
 8004c4c:	bf08      	it	eq
 8004c4e:	1aad      	subeq	r5, r5, r2
 8004c50:	6922      	ldr	r2, [r4, #16]
 8004c52:	bf08      	it	eq
 8004c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bfc4      	itt	gt
 8004c5c:	1a9b      	subgt	r3, r3, r2
 8004c5e:	18ed      	addgt	r5, r5, r3
 8004c60:	341a      	adds	r4, #26
 8004c62:	42b5      	cmp	r5, r6
 8004c64:	d11a      	bne.n	8004c9c <_printf_common+0xcc>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e008      	b.n	8004c7c <_printf_common+0xac>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4638      	mov	r0, r7
 8004c72:	47c0      	blx	r8
 8004c74:	3001      	adds	r0, #1
 8004c76:	d103      	bne.n	8004c80 <_printf_common+0xb0>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7c4      	b.n	8004c0e <_printf_common+0x3e>
 8004c84:	2030      	movs	r0, #48	; 0x30
 8004c86:	18e1      	adds	r1, r4, r3
 8004c88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c92:	4422      	add	r2, r4
 8004c94:	3302      	adds	r3, #2
 8004c96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c9a:	e7c5      	b.n	8004c28 <_printf_common+0x58>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0e6      	beq.n	8004c78 <_printf_common+0xa8>
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7d9      	b.n	8004c62 <_printf_common+0x92>
	...

08004cb0 <_printf_i>:
 8004cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	7e0f      	ldrb	r7, [r1, #24]
 8004cb6:	4691      	mov	r9, r2
 8004cb8:	2f78      	cmp	r7, #120	; 0x78
 8004cba:	4680      	mov	r8, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	469a      	mov	sl, r3
 8004cc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cc6:	d807      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cc8:	2f62      	cmp	r7, #98	; 0x62
 8004cca:	d80a      	bhi.n	8004ce2 <_printf_i+0x32>
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	f000 80d9 	beq.w	8004e84 <_printf_i+0x1d4>
 8004cd2:	2f58      	cmp	r7, #88	; 0x58
 8004cd4:	f000 80a4 	beq.w	8004e20 <_printf_i+0x170>
 8004cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ce0:	e03a      	b.n	8004d58 <_printf_i+0xa8>
 8004ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce6:	2b15      	cmp	r3, #21
 8004ce8:	d8f6      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cea:	a101      	add	r1, pc, #4	; (adr r1, 8004cf0 <_printf_i+0x40>)
 8004cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004cd9 	.word	0x08004cd9
 8004cfc:	08004cd9 	.word	0x08004cd9
 8004d00:	08004cd9 	.word	0x08004cd9
 8004d04:	08004cd9 	.word	0x08004cd9
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004cd9 	.word	0x08004cd9
 8004d10:	08004cd9 	.word	0x08004cd9
 8004d14:	08004cd9 	.word	0x08004cd9
 8004d18:	08004cd9 	.word	0x08004cd9
 8004d1c:	08004e6b 	.word	0x08004e6b
 8004d20:	08004d8d 	.word	0x08004d8d
 8004d24:	08004e4d 	.word	0x08004e4d
 8004d28:	08004cd9 	.word	0x08004cd9
 8004d2c:	08004cd9 	.word	0x08004cd9
 8004d30:	08004e8d 	.word	0x08004e8d
 8004d34:	08004cd9 	.word	0x08004cd9
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004cd9 	.word	0x08004cd9
 8004d40:	08004cd9 	.word	0x08004cd9
 8004d44:	08004e55 	.word	0x08004e55
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	602a      	str	r2, [r5, #0]
 8004d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0a4      	b.n	8004ea6 <_printf_i+0x1f6>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	6829      	ldr	r1, [r5, #0]
 8004d60:	0606      	lsls	r6, r0, #24
 8004d62:	f101 0304 	add.w	r3, r1, #4
 8004d66:	d50a      	bpl.n	8004d7e <_printf_i+0xce>
 8004d68:	680e      	ldr	r6, [r1, #0]
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	2e00      	cmp	r6, #0
 8004d6e:	da03      	bge.n	8004d78 <_printf_i+0xc8>
 8004d70:	232d      	movs	r3, #45	; 0x2d
 8004d72:	4276      	negs	r6, r6
 8004d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d78:	230a      	movs	r3, #10
 8004d7a:	485e      	ldr	r0, [pc, #376]	; (8004ef4 <_printf_i+0x244>)
 8004d7c:	e019      	b.n	8004db2 <_printf_i+0x102>
 8004d7e:	680e      	ldr	r6, [r1, #0]
 8004d80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d84:	602b      	str	r3, [r5, #0]
 8004d86:	bf18      	it	ne
 8004d88:	b236      	sxthne	r6, r6
 8004d8a:	e7ef      	b.n	8004d6c <_printf_i+0xbc>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	6820      	ldr	r0, [r4, #0]
 8004d90:	1d19      	adds	r1, r3, #4
 8004d92:	6029      	str	r1, [r5, #0]
 8004d94:	0601      	lsls	r1, r0, #24
 8004d96:	d501      	bpl.n	8004d9c <_printf_i+0xec>
 8004d98:	681e      	ldr	r6, [r3, #0]
 8004d9a:	e002      	b.n	8004da2 <_printf_i+0xf2>
 8004d9c:	0646      	lsls	r6, r0, #25
 8004d9e:	d5fb      	bpl.n	8004d98 <_printf_i+0xe8>
 8004da0:	881e      	ldrh	r6, [r3, #0]
 8004da2:	2f6f      	cmp	r7, #111	; 0x6f
 8004da4:	bf0c      	ite	eq
 8004da6:	2308      	moveq	r3, #8
 8004da8:	230a      	movne	r3, #10
 8004daa:	4852      	ldr	r0, [pc, #328]	; (8004ef4 <_printf_i+0x244>)
 8004dac:	2100      	movs	r1, #0
 8004dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004db2:	6865      	ldr	r5, [r4, #4]
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	bfa8      	it	ge
 8004db8:	6821      	ldrge	r1, [r4, #0]
 8004dba:	60a5      	str	r5, [r4, #8]
 8004dbc:	bfa4      	itt	ge
 8004dbe:	f021 0104 	bicge.w	r1, r1, #4
 8004dc2:	6021      	strge	r1, [r4, #0]
 8004dc4:	b90e      	cbnz	r6, 8004dca <_printf_i+0x11a>
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	d04d      	beq.n	8004e66 <_printf_i+0x1b6>
 8004dca:	4615      	mov	r5, r2
 8004dcc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dd0:	fb03 6711 	mls	r7, r3, r1, r6
 8004dd4:	5dc7      	ldrb	r7, [r0, r7]
 8004dd6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dda:	4637      	mov	r7, r6
 8004ddc:	42bb      	cmp	r3, r7
 8004dde:	460e      	mov	r6, r1
 8004de0:	d9f4      	bls.n	8004dcc <_printf_i+0x11c>
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d10b      	bne.n	8004dfe <_printf_i+0x14e>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	07de      	lsls	r6, r3, #31
 8004dea:	d508      	bpl.n	8004dfe <_printf_i+0x14e>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	6861      	ldr	r1, [r4, #4]
 8004df0:	4299      	cmp	r1, r3
 8004df2:	bfde      	ittt	le
 8004df4:	2330      	movle	r3, #48	; 0x30
 8004df6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dfe:	1b52      	subs	r2, r2, r5
 8004e00:	6122      	str	r2, [r4, #16]
 8004e02:	464b      	mov	r3, r9
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f8cd a000 	str.w	sl, [sp]
 8004e0c:	aa03      	add	r2, sp, #12
 8004e0e:	f7ff fedf 	bl	8004bd0 <_printf_common>
 8004e12:	3001      	adds	r0, #1
 8004e14:	d14c      	bne.n	8004eb0 <_printf_i+0x200>
 8004e16:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1a:	b004      	add	sp, #16
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	4834      	ldr	r0, [pc, #208]	; (8004ef4 <_printf_i+0x244>)
 8004e22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e26:	6829      	ldr	r1, [r5, #0]
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e2e:	6029      	str	r1, [r5, #0]
 8004e30:	061d      	lsls	r5, r3, #24
 8004e32:	d514      	bpl.n	8004e5e <_printf_i+0x1ae>
 8004e34:	07df      	lsls	r7, r3, #31
 8004e36:	bf44      	itt	mi
 8004e38:	f043 0320 	orrmi.w	r3, r3, #32
 8004e3c:	6023      	strmi	r3, [r4, #0]
 8004e3e:	b91e      	cbnz	r6, 8004e48 <_printf_i+0x198>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	f023 0320 	bic.w	r3, r3, #32
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	2310      	movs	r3, #16
 8004e4a:	e7af      	b.n	8004dac <_printf_i+0xfc>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f043 0320 	orr.w	r3, r3, #32
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	2378      	movs	r3, #120	; 0x78
 8004e56:	4828      	ldr	r0, [pc, #160]	; (8004ef8 <_printf_i+0x248>)
 8004e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e5c:	e7e3      	b.n	8004e26 <_printf_i+0x176>
 8004e5e:	0659      	lsls	r1, r3, #25
 8004e60:	bf48      	it	mi
 8004e62:	b2b6      	uxthmi	r6, r6
 8004e64:	e7e6      	b.n	8004e34 <_printf_i+0x184>
 8004e66:	4615      	mov	r5, r2
 8004e68:	e7bb      	b.n	8004de2 <_printf_i+0x132>
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	6826      	ldr	r6, [r4, #0]
 8004e6e:	1d18      	adds	r0, r3, #4
 8004e70:	6961      	ldr	r1, [r4, #20]
 8004e72:	6028      	str	r0, [r5, #0]
 8004e74:	0635      	lsls	r5, r6, #24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	d501      	bpl.n	8004e7e <_printf_i+0x1ce>
 8004e7a:	6019      	str	r1, [r3, #0]
 8004e7c:	e002      	b.n	8004e84 <_printf_i+0x1d4>
 8004e7e:	0670      	lsls	r0, r6, #25
 8004e80:	d5fb      	bpl.n	8004e7a <_printf_i+0x1ca>
 8004e82:	8019      	strh	r1, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	4615      	mov	r5, r2
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	e7ba      	b.n	8004e02 <_printf_i+0x152>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	1d1a      	adds	r2, r3, #4
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	681d      	ldr	r5, [r3, #0]
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f8d9 	bl	8005050 <memchr>
 8004e9e:	b108      	cbz	r0, 8004ea4 <_printf_i+0x1f4>
 8004ea0:	1b40      	subs	r0, r0, r5
 8004ea2:	6060      	str	r0, [r4, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eae:	e7a8      	b.n	8004e02 <_printf_i+0x152>
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	47d0      	blx	sl
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d0ab      	beq.n	8004e16 <_printf_i+0x166>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	079b      	lsls	r3, r3, #30
 8004ec2:	d413      	bmi.n	8004eec <_printf_i+0x23c>
 8004ec4:	68e0      	ldr	r0, [r4, #12]
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	bfb8      	it	lt
 8004ecc:	4618      	movlt	r0, r3
 8004ece:	e7a4      	b.n	8004e1a <_printf_i+0x16a>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	47d0      	blx	sl
 8004eda:	3001      	adds	r0, #1
 8004edc:	d09b      	beq.n	8004e16 <_printf_i+0x166>
 8004ede:	3501      	adds	r5, #1
 8004ee0:	68e3      	ldr	r3, [r4, #12]
 8004ee2:	9903      	ldr	r1, [sp, #12]
 8004ee4:	1a5b      	subs	r3, r3, r1
 8004ee6:	42ab      	cmp	r3, r5
 8004ee8:	dcf2      	bgt.n	8004ed0 <_printf_i+0x220>
 8004eea:	e7eb      	b.n	8004ec4 <_printf_i+0x214>
 8004eec:	2500      	movs	r5, #0
 8004eee:	f104 0619 	add.w	r6, r4, #25
 8004ef2:	e7f5      	b.n	8004ee0 <_printf_i+0x230>
 8004ef4:	080051f9 	.word	0x080051f9
 8004ef8:	0800520a 	.word	0x0800520a

08004efc <_sbrk_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	2300      	movs	r3, #0
 8004f00:	4d05      	ldr	r5, [pc, #20]	; (8004f18 <_sbrk_r+0x1c>)
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fb fd96 	bl	8000a38 <_sbrk>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_sbrk_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_sbrk_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200003dc 	.word	0x200003dc

08004f1c <__sread>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	460c      	mov	r4, r1
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	f000 f8ae 	bl	8005084 <_read_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	bfab      	itete	ge
 8004f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f30:	181b      	addge	r3, r3, r0
 8004f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f36:	bfac      	ite	ge
 8004f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f3a:	81a3      	strhlt	r3, [r4, #12]
 8004f3c:	bd10      	pop	{r4, pc}

08004f3e <__swrite>:
 8004f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f42:	461f      	mov	r7, r3
 8004f44:	898b      	ldrh	r3, [r1, #12]
 8004f46:	4605      	mov	r5, r0
 8004f48:	05db      	lsls	r3, r3, #23
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	d505      	bpl.n	8004f5c <__swrite+0x1e>
 8004f50:	2302      	movs	r3, #2
 8004f52:	2200      	movs	r2, #0
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	f000 f868 	bl	800502c <_lseek_r>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	4632      	mov	r2, r6
 8004f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	4628      	mov	r0, r5
 8004f68:	463b      	mov	r3, r7
 8004f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	f000 b817 	b.w	8004fa4 <_write_r>

08004f76 <__sseek>:
 8004f76:	b510      	push	{r4, lr}
 8004f78:	460c      	mov	r4, r1
 8004f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7e:	f000 f855 	bl	800502c <_lseek_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	bf15      	itete	ne
 8004f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f92:	81a3      	strheq	r3, [r4, #12]
 8004f94:	bf18      	it	ne
 8004f96:	81a3      	strhne	r3, [r4, #12]
 8004f98:	bd10      	pop	{r4, pc}

08004f9a <__sclose>:
 8004f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9e:	f000 b813 	b.w	8004fc8 <_close_r>
	...

08004fa4 <_write_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	2200      	movs	r2, #0
 8004fae:	4d05      	ldr	r5, [pc, #20]	; (8004fc4 <_write_r+0x20>)
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fb fcf3 	bl	800099e <_write>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_write_r+0x1e>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_write_r+0x1e>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200003dc 	.word	0x200003dc

08004fc8 <_close_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4d05      	ldr	r5, [pc, #20]	; (8004fe4 <_close_r+0x1c>)
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fb fcff 	bl	80009d6 <_close>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_close_r+0x1a>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_close_r+0x1a>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	200003dc 	.word	0x200003dc

08004fe8 <_fstat_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	2300      	movs	r3, #0
 8004fec:	4d06      	ldr	r5, [pc, #24]	; (8005008 <_fstat_r+0x20>)
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	f7fb fcf9 	bl	80009ec <_fstat>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d102      	bne.n	8005004 <_fstat_r+0x1c>
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	b103      	cbz	r3, 8005004 <_fstat_r+0x1c>
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	200003dc 	.word	0x200003dc

0800500c <_isatty_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	2300      	movs	r3, #0
 8005010:	4d05      	ldr	r5, [pc, #20]	; (8005028 <_isatty_r+0x1c>)
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	f7fb fcf7 	bl	8000a0a <_isatty>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_isatty_r+0x1a>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_isatty_r+0x1a>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	200003dc 	.word	0x200003dc

0800502c <_lseek_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	2200      	movs	r2, #0
 8005036:	4d05      	ldr	r5, [pc, #20]	; (800504c <_lseek_r+0x20>)
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fb fcef 	bl	8000a1e <_lseek>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_lseek_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_lseek_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	200003dc 	.word	0x200003dc

08005050 <memchr>:
 8005050:	4603      	mov	r3, r0
 8005052:	b510      	push	{r4, lr}
 8005054:	b2c9      	uxtb	r1, r1
 8005056:	4402      	add	r2, r0
 8005058:	4293      	cmp	r3, r2
 800505a:	4618      	mov	r0, r3
 800505c:	d101      	bne.n	8005062 <memchr+0x12>
 800505e:	2000      	movs	r0, #0
 8005060:	e003      	b.n	800506a <memchr+0x1a>
 8005062:	7804      	ldrb	r4, [r0, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	428c      	cmp	r4, r1
 8005068:	d1f6      	bne.n	8005058 <memchr+0x8>
 800506a:	bd10      	pop	{r4, pc}

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f7ff bb13 	b.w	8004698 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	200003d0 	.word	0x200003d0

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f7ff bb0e 	b.w	800469a <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	200003d0 	.word	0x200003d0

08005084 <_read_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	2200      	movs	r2, #0
 800508e:	4d05      	ldr	r5, [pc, #20]	; (80050a4 <_read_r+0x20>)
 8005090:	602a      	str	r2, [r5, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f7fb fc66 	bl	8000964 <_read>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_read_r+0x1e>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_read_r+0x1e>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	200003dc 	.word	0x200003dc

080050a8 <_init>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr

080050b4 <_fini>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr
