
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ec  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800abe0  0800abe0  0001abe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b218  0800b218  000206d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b218  0800b218  000206d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b218  0800b218  000206d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d4  20000000  0800b220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200006d4  0800b8f4  000206d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  0800b8f4  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000206d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014be3  00000000  00000000  000206fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037eb  00000000  00000000  000352e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00038ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00039f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d588  00000000  00000000  0003b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e8b  00000000  00000000  00058868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa02e  00000000  00000000  000726f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad0  00000000  00000000  0011c774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200006d4 	.word	0x200006d4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800abc4 	.word	0x0800abc4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200006d8 	.word	0x200006d8
 800022c:	0800abc4 	.word	0x0800abc4

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4605      	mov	r5, r0
 8000c60:	460c      	mov	r4, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	2300      	movs	r3, #0
 8000c66:	4628      	mov	r0, r5
 8000c68:	4621      	mov	r1, r4
 8000c6a:	f7ff ff21 	bl	8000ab0 <__aeabi_dcmplt>
 8000c6e:	b928      	cbnz	r0, 8000c7c <__aeabi_d2lz+0x20>
 8000c70:	4628      	mov	r0, r5
 8000c72:	4621      	mov	r1, r4
 8000c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c78:	f000 b80a 	b.w	8000c90 <__aeabi_d2ulz>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c82:	f000 f805 	bl	8000c90 <__aeabi_d2ulz>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	bd38      	pop	{r3, r4, r5, pc}
 8000c8e:	bf00      	nop

08000c90 <__aeabi_d2ulz>:
 8000c90:	b5d0      	push	{r4, r6, r7, lr}
 8000c92:	2200      	movs	r2, #0
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <__aeabi_d2ulz+0x34>)
 8000c96:	4606      	mov	r6, r0
 8000c98:	460f      	mov	r7, r1
 8000c9a:	f7ff fc97 	bl	80005cc <__aeabi_dmul>
 8000c9e:	f7ff ff6d 	bl	8000b7c <__aeabi_d2uiz>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	f7ff fc18 	bl	80004d8 <__aeabi_ui2d>
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <__aeabi_d2ulz+0x38>)
 8000cac:	f7ff fc8e 	bl	80005cc <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	4639      	mov	r1, r7
 8000cb8:	f7ff fad0 	bl	800025c <__aeabi_dsub>
 8000cbc:	f7ff ff5e 	bl	8000b7c <__aeabi_d2uiz>
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc4:	3df00000 	.word	0x3df00000
 8000cc8:	41f00000 	.word	0x41f00000

08000ccc <InitMCC>:
extern int tickG;
extern int speedD;
extern int speedG;

void InitMCC()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <InitMCC+0x2c>)
 8000cd4:	f003 fa26 	bl	8004124 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cd8:	2104      	movs	r1, #4
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <InitMCC+0x2c>)
 8000cdc:	f003 fa22 	bl	8004124 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <InitMCC+0x2c>)
 8000ce4:	f003 fa1e 	bl	8004124 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ce8:	210c      	movs	r1, #12
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <InitMCC+0x2c>)
 8000cec:	f003 fa1a 	bl	8004124 <HAL_TIM_PWM_Start>
	Stop();
 8000cf0:	f000 f840 	bl	8000d74 <Stop>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000850 	.word	0x20000850

08000cfc <Avancer>:

void Avancer(int vitesse)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2bc8      	cmp	r3, #200	; 0xc8
 8000d08:	dc02      	bgt.n	8000d10 <Avancer+0x14>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da01      	bge.n	8000d14 <Avancer+0x18>
 8000d10:	f000 fc90 	bl	8001634 <Error_Handler>
	TIM1->CCR1=vitesse;
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <Avancer+0x38>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <Avancer+0x38>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <Avancer+0x38>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <Avancer+0x38>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40012c00 	.word	0x40012c00

08000d38 <Reculer>:

void Reculer(int vitesse)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2bc8      	cmp	r3, #200	; 0xc8
 8000d44:	dc02      	bgt.n	8000d4c <Reculer+0x14>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da01      	bge.n	8000d50 <Reculer+0x18>
 8000d4c:	f000 fc72 	bl	8001634 <Error_Handler>
	TIM1->CCR1=0;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <Reculer+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <Reculer+0x38>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <Reculer+0x38>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <Reculer+0x38>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40012c00 	.word	0x40012c00

08000d74 <Stop>:

void Stop(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <Stop+0x24>)
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <Stop+0x24>)
 8000d80:	22c8      	movs	r2, #200	; 0xc8
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <Stop+0x24>)
 8000d86:	22c8      	movs	r2, #200	; 0xc8
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <Stop+0x24>)
 8000d8c:	22c8      	movs	r2, #200	; 0xc8
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2bc8      	cmp	r3, #200	; 0xc8
 8000daa:	dc02      	bgt.n	8000db2 <Tourner+0x16>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da01      	bge.n	8000db6 <Tourner+0x1a>
 8000db2:	f000 fc3f 	bl	8001634 <Error_Handler>
	if(sens)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00c      	beq.n	8000dd6 <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8000dbc:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <Tourner+0x68>)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <Tourner+0x68>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <Tourner+0x68>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8000dce:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <Tourner+0x68>)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8000dd4:	e011      	b.n	8000dfa <Tourner+0x5e>
	else if(!sens)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10c      	bne.n	8000df6 <Tourner+0x5a>
		    TIM1->CCR1=0;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <Tourner+0x68>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <Tourner+0x68>)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <Tourner+0x68>)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <Tourner+0x68>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000df4:	e001      	b.n	8000dfa <Tourner+0x5e>
	else Error_Handler();
 8000df6:	f000 fc1d 	bl	8001634 <Error_Handler>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40012c00 	.word	0x40012c00

08000e08 <ReadEncodeur>:

void ReadEncodeur()
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	tickD = (TIM2->CNT);
 8000e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <ReadEncodeur+0x24>)
 8000e16:	601a      	str	r2, [r3, #0]
	tickG = (TIM5->CNT);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <ReadEncodeur+0x28>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <ReadEncodeur+0x2c>)
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200007d4 	.word	0x200007d4
 8000e30:	40000c00 	.word	0x40000c00
 8000e34:	200007d8 	.word	0x200007d8

08000e38 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f640 0298 	movw	r2, #2200	; 0x898
 8000e46:	4293      	cmp	r3, r2
 8000e48:	dc08      	bgt.n	8000e5c <ControlServo+0x24>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e50:	db04      	blt.n	8000e5c <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <ControlServo+0x30>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e000      	b.n	8000e5e <ControlServo+0x26>
	}
	else
	{
		return 1;
 8000e5c:	2301      	movs	r3, #1
	}
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40000400 	.word	0x40000400

08000e6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <MX_ADC1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000eaa:	f001 fbcb 	bl	8002644 <HAL_ADC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000eb4:	f000 fbbe 	bl	8001634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000eca:	f001 fca5 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ed4:	f000 fbae 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200006f0 	.word	0x200006f0
 8000ee4:	40012400 	.word	0x40012400

08000ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_ADC_MspInit+0x98>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d137      	bne.n	8000f78 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_ADC_MspInit+0x9c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8000f50:	23f0      	movs	r3, #240	; 0xf0
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f54:	2303      	movs	r3, #3
 8000f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <HAL_ADC_MspInit+0xa0>)
 8000f60:	f001 ffe4 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f74:	f001 ffda 	bl	8002f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40012400 	.word	0x40012400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a33      	ldr	r2, [pc, #204]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	f24f 0120 	movw	r1, #61472	; 0xf020
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <MX_GPIO_Init+0xec>)
 800100c:	f002 f922 	bl	8003254 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_GPIO_Init+0xf0>)
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4619      	mov	r1, r3
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <MX_GPIO_Init+0xf4>)
 8001026:	f001 ff81 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800102a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800102e:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_GPIO_Init+0xec>)
 8001044:	f001 ff72 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8001048:	2310      	movs	r3, #16
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_GPIO_Init+0xf0>)
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <MX_GPIO_Init+0xec>)
 800105c:	f001 ff66 	bl	8002f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2105      	movs	r1, #5
 8001064:	2028      	movs	r0, #40	; 0x28
 8001066:	f001 fde8 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106a:	2028      	movs	r0, #40	; 0x28
 800106c:	f001 fe01 	bl	8002c72 <HAL_NVIC_EnableIRQ>

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	40010c00 	.word	0x40010c00
 8001080:	10110000 	.word	0x10110000
 8001084:	40011000 	.word	0x40011000

08001088 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x50>)
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <MX_I2C1_Init+0x54>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_I2C1_Init+0x50>)
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x58>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010c6:	f002 f90f 	bl	80032e8 <HAL_I2C_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d0:	f000 fab0 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000720 	.word	0x20000720
 80010dc:	40005400 	.word	0x40005400
 80010e0:	000186a0 	.word	0x000186a0

080010e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C2_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <MX_I2C2_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C2_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_I2C2_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C2_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C2_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_I2C2_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C2_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2C2_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2C2_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2C2_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2C2_Init+0x50>)
 8001122:	f002 f8e1 	bl	80032e8 <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 fa82 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000774 	.word	0x20000774
 8001138:	40005800 	.word	0x40005800
 800113c:	000186a0 	.word	0x000186a0

08001140 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <HAL_I2C_MspInit+0xe4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d133      	bne.n	80011c8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b31      	ldr	r3, [pc, #196]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a30      	ldr	r2, [pc, #192]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 8001178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <HAL_I2C_MspInit+0xec>)
 800118e:	f001 fecd 	bl	8002f2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_I2C_MspInit+0xf0>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <HAL_I2C_MspInit+0xf0>)
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 80011b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011c6:	e029      	b.n	800121c <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_I2C_MspInit+0xf4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d124      	bne.n	800121c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 80011ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_I2C_MspInit+0xec>)
 8001200:	f001 fe94 	bl	8002f2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 800120a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_I2C_MspInit+0xe8>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	bf00      	nop
 800121e:	3730      	adds	r7, #48	; 0x30
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40010000 	.word	0x40010000
 8001234:	40005800 	.word	0x40005800

08001238 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	switch (i)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	2b03      	cmp	r3, #3
 8001246:	d827      	bhi.n	8001298 <TurnOffLed+0x60>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <TurnOffLed+0x18>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001261 	.word	0x08001261
 8001254:	0800126f 	.word	0x0800126f
 8001258:	0800127d 	.word	0x0800127d
 800125c:	0800128b 	.word	0x0800128b
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001266:	480e      	ldr	r0, [pc, #56]	; (80012a0 <TurnOffLed+0x68>)
 8001268:	f001 fff4 	bl	8003254 <HAL_GPIO_WritePin>
		    break;
 800126c:	e014      	b.n	8001298 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <TurnOffLed+0x68>)
 8001276:	f001 ffed 	bl	8003254 <HAL_GPIO_WritePin>
			break;
 800127a:	e00d      	b.n	8001298 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <TurnOffLed+0x68>)
 8001284:	f001 ffe6 	bl	8003254 <HAL_GPIO_WritePin>
			break;
 8001288:	e006      	b.n	8001298 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <TurnOffLed+0x68>)
 8001292:	f001 ffdf 	bl	8003254 <HAL_GPIO_WritePin>
			break;
 8001296:	bf00      	nop
	}

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <SwitchLed>:



void SwitchLed(int i)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	switch (i)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d823      	bhi.n	80012fc <SwitchLed+0x58>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <SwitchLed+0x18>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012d9 	.word	0x080012d9
 80012c4:	080012e5 	.word	0x080012e5
 80012c8:	080012f1 	.word	0x080012f1
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80012cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <SwitchLed+0x60>)
 80012d2:	f001 ffd7 	bl	8003284 <HAL_GPIO_TogglePin>
			break;
 80012d6:	e011      	b.n	80012fc <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <SwitchLed+0x60>)
 80012de:	f001 ffd1 	bl	8003284 <HAL_GPIO_TogglePin>
			break;
 80012e2:	e00b      	b.n	80012fc <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80012e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <SwitchLed+0x60>)
 80012ea:	f001 ffcb 	bl	8003284 <HAL_GPIO_TogglePin>
			break;
 80012ee:	e005      	b.n	80012fc <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 80012f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <SwitchLed+0x60>)
 80012f6:	f001 ffc5 	bl	8003284 <HAL_GPIO_TogglePin>
			break;
 80012fa:	bf00      	nop
	}

}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010c00 	.word	0x40010c00

08001308 <LedError>:



void LedError()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <LedError+0x38>)
 8001314:	f001 ff9e 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131e:	4808      	ldr	r0, [pc, #32]	; (8001340 <LedError+0x38>)
 8001320:	f001 ff98 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <LedError+0x38>)
 800132c:	f001 ff92 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4802      	ldr	r0, [pc, #8]	; (8001340 <LedError+0x38>)
 8001338:	f001 ff8c 	bl	8003254 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010c00 	.word	0x40010c00

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f001 f8f5 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f8b1 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f7ff fe1d 	bl	8000f90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001356:	f7ff fe97 	bl	8001088 <MX_I2C1_Init>
  MX_I2C2_Init();
 800135a:	f7ff fec3 	bl	80010e4 <MX_I2C2_Init>
  MX_TIM3_Init();
 800135e:	f000 fd7b 	bl	8001e58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001362:	f000 ffcb 	bl	80022fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001366:	f000 fff3 	bl	8002350 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800136a:	f000 fc5d 	bl	8001c28 <MX_TIM1_Init>
  MX_TIM2_Init();
 800136e:	f000 fd1f 	bl	8001db0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001372:	f000 fde9 	bl	8001f48 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001376:	f7ff fd79 	bl	8000e6c <MX_ADC1_Init>
  MX_TIM7_Init();
 800137a:	f000 fe39 	bl	8001ff0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800137e:	2201      	movs	r2, #1
 8001380:	493e      	ldr	r1, [pc, #248]	; (800147c <main+0x138>)
 8001382:	483f      	ldr	r0, [pc, #252]	; (8001480 <main+0x13c>)
 8001384:	f004 f8f4 	bl	8005570 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f001 f937 	bl	80025fc <HAL_Delay>
  shellInit();
 800138e:	f000 f959 	bl	8001644 <shellInit>

  TurnOffLed(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff ff50 	bl	8001238 <TurnOffLed>
  TurnOffLed(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f7ff ff4d 	bl	8001238 <TurnOffLed>
  TurnOffLed(3);
 800139e:	2003      	movs	r0, #3
 80013a0:	f7ff ff4a 	bl	8001238 <TurnOffLed>
  TurnOffLed(4);
 80013a4:	2004      	movs	r0, #4
 80013a6:	f7ff ff47 	bl	8001238 <TurnOffLed>

  SwitchLed(4);
 80013aa:	2004      	movs	r0, #4
 80013ac:	f7ff ff7a 	bl	80012a4 <SwitchLed>

  HAL_TIM_Base_Start_IT(&htim3);
 80013b0:	4834      	ldr	r0, [pc, #208]	; (8001484 <main+0x140>)
 80013b2:	f002 fdff 	bl	8003fb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4832      	ldr	r0, [pc, #200]	; (8001484 <main+0x140>)
 80013ba:	f002 ff6d 	bl	8004298 <HAL_TIM_PWM_Start_IT>

  InitMCC();
 80013be:	f7ff fc85 	bl	8000ccc <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013c2:	213c      	movs	r1, #60	; 0x3c
 80013c4:	4830      	ldr	r0, [pc, #192]	; (8001488 <main+0x144>)
 80013c6:	f003 f909 	bl	80045dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80013ca:	213c      	movs	r1, #60	; 0x3c
 80013cc:	482f      	ldr	r0, [pc, #188]	; (800148c <main+0x148>)
 80013ce:	f003 f905 	bl	80045dc <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 80013d2:	482f      	ldr	r0, [pc, #188]	; (8001490 <main+0x14c>)
 80013d4:	f002 fdee 	bl	8003fb4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(uartRxReceived){
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <main+0x150>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <main+0xb4>
		  if(shellGetChar())
 80013e0:	f000 f968 	bl	80016b4 <shellGetChar>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <main+0xae>
		  {
			  shellExec();
 80013ea:	f000 f9d7 	bl	800179c <shellExec>
			  shellPrompt();
 80013ee:	f000 f941 	bl	8001674 <shellPrompt>
		  }
		  uartRxReceived = 0;
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <main+0x150>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
		  	  Error_Handler();
		    }
		  HAL_Delay(500);
	  }*/

	  if(it_userButton)
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <main+0x154>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00c      	beq.n	800141a <main+0xd6>
	  {
		  enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <main+0x158>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	bfb8      	it	lt
 800140e:	425b      	neglt	r3, r3
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <main+0x158>)
 8001412:	6013      	str	r3, [r2, #0]


		  //sprintf((char *)MSG, "Speed = %f tick/periode\n\r", -TICK2SPEED_TIM4 * speed);
		  //HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);

		  it_userButton = 0;
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <main+0x154>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
	  }

	  if(it_tim7)
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <main+0x15c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0da      	beq.n	80013d8 <main+0x94>
	  {
		  ReadEncodeur();
 8001422:	f7ff fcf1 	bl	8000e08 <ReadEncodeur>
		  //ReadSpeed();
		  if(enableUserButton)
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <main+0x158>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d021      	beq.n	8001472 <main+0x12e>
		  {
			  uint8_t MSG[CMD_BUFFER_SIZE] = {'\0'};
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	223c      	movs	r2, #60	; 0x3c
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f004 ff33 	bl	80062a4 <memset>

			  sprintf((char *)MSG, "Encoder Ticks D = %d\n\r", tickD);
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <main+0x160>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	463b      	mov	r3, r7
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <main+0x164>)
 8001446:	4618      	mov	r0, r3
 8001448:	f005 fda6 	bl	8006f98 <siprintf>
			  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 800144c:	4639      	mov	r1, r7
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <main+0x13c>)
 8001454:	f003 fffa 	bl	800544c <HAL_UART_Transmit>
			  sprintf((char *)MSG, "Encoder Ticks G = %d\n\r", tickG);
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <main+0x168>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	463b      	mov	r3, r7
 800145e:	4914      	ldr	r1, [pc, #80]	; (80014b0 <main+0x16c>)
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fd99 	bl	8006f98 <siprintf>
			  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8001466:	4639      	mov	r1, r7
 8001468:	2364      	movs	r3, #100	; 0x64
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <main+0x13c>)
 800146e:	f003 ffed 	bl	800544c <HAL_UART_Transmit>
		  }
		  it_tim7 = 0;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <main+0x15c>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
	  if(uartRxReceived){
 8001478:	e7ae      	b.n	80013d8 <main+0x94>
 800147a:	bf00      	nop
 800147c:	200009bc 	.word	0x200009bc
 8001480:	200009c0 	.word	0x200009c0
 8001484:	200008e0 	.word	0x200008e0
 8001488:	20000898 	.word	0x20000898
 800148c:	20000928 	.word	0x20000928
 8001490:	20000970 	.word	0x20000970
 8001494:	200009b8 	.word	0x200009b8
 8001498:	200007c8 	.word	0x200007c8
 800149c:	200007dc 	.word	0x200007dc
 80014a0:	200007d0 	.word	0x200007d0
 80014a4:	200007d4 	.word	0x200007d4
 80014a8:	0800ac6c 	.word	0x0800ac6c
 80014ac:	200007d8 	.word	0x200007d8
 80014b0:	0800ac84 	.word	0x0800ac84

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b096      	sub	sp, #88	; 0x58
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014be:	2228      	movs	r2, #40	; 0x28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 feee 	bl	80062a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80014f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	2302      	movs	r3, #2
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001506:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800150a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f82d 	bl	8003570 <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800151c:	f000 f88a 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2102      	movs	r1, #2
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fa99 	bl	8003a74 <HAL_RCC_ClockConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001548:	f000 f874 	bl	8001634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800154c:	2302      	movs	r3, #2
 800154e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001554:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fc25 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001564:	f000 f866 	bl	8001634 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3758      	adds	r7, #88	; 0x58
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001578:	1d39      	adds	r1, r7, #4
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	2201      	movs	r2, #1
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <__io_putchar+0x20>)
 8001582:	f003 ff63 	bl	800544c <HAL_UART_Transmit>
	return ch;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200009c0 	.word	0x200009c0

08001594 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) it_tim3=1; // Tim 3 avce servo donc pas d'interrupt...inutile
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d103      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x1a>
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
	else if (htim->Instance == TIM7) it_tim7=1;
}
 80015ac:	e007      	b.n	80015be <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if (htim->Instance == TIM7) it_tim7=1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d102      	bne.n	80015be <HAL_TIM_PeriodElapsedCallback+0x2a>
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40000400 	.word	0x40000400
 80015cc:	200007cc 	.word	0x200007cc
 80015d0:	40001400 	.word	0x40001400
 80015d4:	200007d0 	.word	0x200007d0

080015d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	it_userButton = 1;
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200007c8 	.word	0x200007c8

080015f8 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_UART_RxCpltCallback+0x2c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d107      	bne.n	800161a <HAL_UART_RxCpltCallback+0x22>
	{
		uartRxReceived = 1;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_UART_RxCpltCallback+0x30>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001610:	2201      	movs	r2, #1
 8001612:	4906      	ldr	r1, [pc, #24]	; (800162c <HAL_UART_RxCpltCallback+0x34>)
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <HAL_UART_RxCpltCallback+0x38>)
 8001616:	f003 ffab 	bl	8005570 <HAL_UART_Receive_IT>
	}
	else if(huart->Instance == USART2)
	{
		//interruption Raspberry
	}
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40013800 	.word	0x40013800
 8001628:	200009b8 	.word	0x200009b8
 800162c:	200009bc 	.word	0x200009bc
 8001630:	200009c0 	.word	0x200009c0

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 800163c:	f7ff fe64 	bl	8001308 <LedError>
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0xc>
	...

08001644 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	226c      	movs	r2, #108	; 0x6c
 800164e:	4906      	ldr	r1, [pc, #24]	; (8001668 <shellInit+0x24>)
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <shellInit+0x28>)
 8001652:	f003 fefb 	bl	800544c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	220a      	movs	r2, #10
 800165c:	4904      	ldr	r1, [pc, #16]	; (8001670 <shellInit+0x2c>)
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <shellInit+0x28>)
 8001660:	f003 fef4 	bl	800544c <HAL_UART_Transmit>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000000c 	.word	0x2000000c
 800166c:	200009c0 	.word	0x200009c0
 8001670:	20000000 	.word	0x20000000

08001674 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	220a      	movs	r2, #10
 800167e:	4903      	ldr	r1, [pc, #12]	; (800168c <shellPrompt+0x18>)
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <shellPrompt+0x1c>)
 8001682:	f003 fee3 	bl	800544c <HAL_UART_Transmit>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000
 8001690:	200009c0 	.word	0x200009c0

08001694 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2214      	movs	r2, #20
 800169e:	4903      	ldr	r1, [pc, #12]	; (80016ac <shellCmdNotFound+0x18>)
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <shellCmdNotFound+0x1c>)
 80016a2:	f003 fed3 	bl	800544c <HAL_UART_Transmit>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200004e0 	.word	0x200004e0
 80016b0:	200009c0 	.word	0x200009c0

080016b4 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <shellGetChar+0xc8>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d030      	beq.n	8001728 <shellGetChar+0x74>
 80016c6:	2b0d      	cmp	r3, #13
 80016c8:	d140      	bne.n	800174c <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	2203      	movs	r2, #3
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <shellGetChar+0xcc>)
 80016d2:	482c      	ldr	r0, [pc, #176]	; (8001784 <shellGetChar+0xd0>)
 80016d4:	f003 feba 	bl	800544c <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <shellGetChar+0xd4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <shellGetChar+0xd8>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]
		argc = 0;
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <shellGetChar+0xdc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 80016ea:	492a      	ldr	r1, [pc, #168]	; (8001794 <shellGetChar+0xe0>)
 80016ec:	4827      	ldr	r0, [pc, #156]	; (800178c <shellGetChar+0xd8>)
 80016ee:	f006 fa85 	bl	8007bfc <strtok>
 80016f2:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80016f4:	e00f      	b.n	8001716 <shellGetChar+0x62>
			argv[argc++] = token;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <shellGetChar+0xdc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	b2d1      	uxtb	r1, r2
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <shellGetChar+0xdc>)
 8001700:	7011      	strb	r1, [r2, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <shellGetChar+0xe4>)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 800170c:	4921      	ldr	r1, [pc, #132]	; (8001794 <shellGetChar+0xe0>)
 800170e:	2000      	movs	r0, #0
 8001710:	f006 fa74 	bl	8007bfc <strtok>
 8001714:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ec      	bne.n	80016f6 <shellGetChar+0x42>
		}

		idxCmd = 0;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <shellGetChar+0xd4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
		break;
 8001726:	e023      	b.n	8001770 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <shellGetChar+0xd4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	b2d1      	uxtb	r1, r2
 8001730:	4a15      	ldr	r2, [pc, #84]	; (8001788 <shellGetChar+0xd4>)
 8001732:	7011      	strb	r1, [r2, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <shellGetChar+0xd8>)
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	2201      	movs	r2, #1
 8001742:	490e      	ldr	r1, [pc, #56]	; (800177c <shellGetChar+0xc8>)
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <shellGetChar+0xd0>)
 8001746:	f003 fe81 	bl	800544c <HAL_UART_Transmit>
		break;
 800174a:	e011      	b.n	8001770 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <shellGetChar+0xd4>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	b2d1      	uxtb	r1, r2
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <shellGetChar+0xd4>)
 8001756:	7011      	strb	r1, [r2, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <shellGetChar+0xc8>)
 800175c:	7819      	ldrb	r1, [r3, #0]
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <shellGetChar+0xd8>)
 8001760:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	2201      	movs	r2, #1
 8001768:	4904      	ldr	r1, [pc, #16]	; (800177c <shellGetChar+0xc8>)
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <shellGetChar+0xd0>)
 800176c:	f003 fe6e 	bl	800544c <HAL_UART_Transmit>
	}

	return newCmdReady;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200009bc 	.word	0x200009bc
 8001780:	20000078 	.word	0x20000078
 8001784:	200009c0 	.word	0x200009c0
 8001788:	20000820 	.word	0x20000820
 800178c:	200007e0 	.word	0x200007e0
 8001790:	20000848 	.word	0x20000848
 8001794:	0800ac9c 	.word	0x0800ac9c
 8001798:	20000824 	.word	0x20000824

0800179c <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 800179c:	b598      	push	{r3, r4, r7, lr}
 800179e:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 80017a0:	4b6a      	ldr	r3, [pc, #424]	; (800194c <shellExec+0x1b0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	496a      	ldr	r1, [pc, #424]	; (8001950 <shellExec+0x1b4>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd42 	bl	8000230 <strcmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	f240 2231 	movw	r2, #561	; 0x231
 80017ba:	4966      	ldr	r1, [pc, #408]	; (8001954 <shellExec+0x1b8>)
 80017bc:	4866      	ldr	r0, [pc, #408]	; (8001958 <shellExec+0x1bc>)
 80017be:	f003 fe45 	bl	800544c <HAL_UART_Transmit>
	}
	else{
		shellCmdNotFound();
	}

}
 80017c2:	e0c1      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"RTFM")==0)
 80017c4:	4b61      	ldr	r3, [pc, #388]	; (800194c <shellExec+0x1b0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4964      	ldr	r1, [pc, #400]	; (800195c <shellExec+0x1c0>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fd30 	bl	8000230 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d108      	bne.n	80017e8 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80017de:	4960      	ldr	r1, [pc, #384]	; (8001960 <shellExec+0x1c4>)
 80017e0:	485d      	ldr	r0, [pc, #372]	; (8001958 <shellExec+0x1bc>)
 80017e2:	f003 fe33 	bl	800544c <HAL_UART_Transmit>
}
 80017e6:	e0af      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"led")==0)
 80017e8:	4b58      	ldr	r3, [pc, #352]	; (800194c <shellExec+0x1b0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	495d      	ldr	r1, [pc, #372]	; (8001964 <shellExec+0x1c8>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fd1e 	bl	8000230 <strcmp>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d110      	bne.n	800181c <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	2222      	movs	r2, #34	; 0x22
 8001800:	4959      	ldr	r1, [pc, #356]	; (8001968 <shellExec+0x1cc>)
 8001802:	4855      	ldr	r0, [pc, #340]	; (8001958 <shellExec+0x1bc>)
 8001804:	f003 fe22 	bl	800544c <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <shellExec+0x1b0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fd0d 	bl	800622c <atoi>
 8001812:	4603      	mov	r3, r0
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fd45 	bl	80012a4 <SwitchLed>
}
 800181a:	e095      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"avancer")==0)
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <shellExec+0x1b0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4952      	ldr	r1, [pc, #328]	; (800196c <shellExec+0x1d0>)
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fd04 	bl	8000230 <strcmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d110      	bne.n	8001850 <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	2225      	movs	r2, #37	; 0x25
 8001834:	494e      	ldr	r1, [pc, #312]	; (8001970 <shellExec+0x1d4>)
 8001836:	4848      	ldr	r0, [pc, #288]	; (8001958 <shellExec+0x1bc>)
 8001838:	f003 fe08 	bl	800544c <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <shellExec+0x1b0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fcf3 	bl	800622c <atoi>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa57 	bl	8000cfc <Avancer>
}
 800184e:	e07b      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"reculer")==0)
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <shellExec+0x1b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4947      	ldr	r1, [pc, #284]	; (8001974 <shellExec+0x1d8>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fcea 	bl	8000230 <strcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d110      	bne.n	8001884 <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2227      	movs	r2, #39	; 0x27
 8001868:	4943      	ldr	r1, [pc, #268]	; (8001978 <shellExec+0x1dc>)
 800186a:	483b      	ldr	r0, [pc, #236]	; (8001958 <shellExec+0x1bc>)
 800186c:	f003 fdee 	bl	800544c <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <shellExec+0x1b0>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fcd9 	bl	800622c <atoi>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fa5b 	bl	8000d38 <Reculer>
}
 8001882:	e061      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"stop")==0)
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <shellExec+0x1b0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	493c      	ldr	r1, [pc, #240]	; (800197c <shellExec+0x1e0>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fcd0 	bl	8000230 <strcmp>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	2216      	movs	r2, #22
 800189c:	4938      	ldr	r1, [pc, #224]	; (8001980 <shellExec+0x1e4>)
 800189e:	482e      	ldr	r0, [pc, #184]	; (8001958 <shellExec+0x1bc>)
 80018a0:	f003 fdd4 	bl	800544c <HAL_UART_Transmit>
		Stop();
 80018a4:	f7ff fa66 	bl	8000d74 <Stop>
}
 80018a8:	e04e      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"tourner")==0)
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <shellExec+0x1b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4935      	ldr	r1, [pc, #212]	; (8001984 <shellExec+0x1e8>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fcbd 	bl	8000230 <strcmp>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d129      	bne.n	8001910 <shellExec+0x174>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <shellExec+0x1b0>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4931      	ldr	r1, [pc, #196]	; (8001988 <shellExec+0x1ec>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fcb4 	bl	8000230 <strcmp>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <shellExec+0x144>
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <shellExec+0x1b0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	492e      	ldr	r1, [pc, #184]	; (800198c <shellExec+0x1f0>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fcab 	bl	8000230 <strcmp>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d033      	beq.n	8001948 <shellExec+0x1ac>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	2230      	movs	r2, #48	; 0x30
 80018e6:	492a      	ldr	r1, [pc, #168]	; (8001990 <shellExec+0x1f4>)
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <shellExec+0x1bc>)
 80018ea:	f003 fdaf 	bl	800544c <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <shellExec+0x1b0>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 fc9a 	bl	800622c <atoi>
 80018f8:	4604      	mov	r4, r0
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <shellExec+0x1b0>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fc94 	bl	800622c <atoi>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff fa47 	bl	8000d9c <Tourner>
}
 800190e:	e01b      	b.n	8001948 <shellExec+0x1ac>
	else if(strcmp(argv[0],"servo")==0)
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <shellExec+0x1b0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	491f      	ldr	r1, [pc, #124]	; (8001994 <shellExec+0x1f8>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fc8a 	bl	8000230 <strcmp>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d110      	bne.n	8001944 <shellExec+0x1a8>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	2217      	movs	r2, #23
 8001928:	491b      	ldr	r1, [pc, #108]	; (8001998 <shellExec+0x1fc>)
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <shellExec+0x1bc>)
 800192c:	f003 fd8e 	bl	800544c <HAL_UART_Transmit>
		ControlServo(atoi(argv[1]));
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <shellExec+0x1b0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fc79 	bl	800622c <atoi>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa7b 	bl	8000e38 <ControlServo>
}
 8001942:	e001      	b.n	8001948 <shellExec+0x1ac>
		shellCmdNotFound();
 8001944:	f7ff fea6 	bl	8001694 <shellCmdNotFound>
}
 8001948:	bf00      	nop
 800194a:	bd98      	pop	{r3, r4, r7, pc}
 800194c:	20000824 	.word	0x20000824
 8001950:	0800aca0 	.word	0x0800aca0
 8001954:	2000007c 	.word	0x2000007c
 8001958:	200009c0 	.word	0x200009c0
 800195c:	0800aca8 	.word	0x0800aca8
 8001960:	200002b0 	.word	0x200002b0
 8001964:	0800acb0 	.word	0x0800acb0
 8001968:	2000040c 	.word	0x2000040c
 800196c:	0800acb4 	.word	0x0800acb4
 8001970:	20000430 	.word	0x20000430
 8001974:	0800acbc 	.word	0x0800acbc
 8001978:	20000458 	.word	0x20000458
 800197c:	0800acc4 	.word	0x0800acc4
 8001980:	20000480 	.word	0x20000480
 8001984:	0800accc 	.word	0x0800accc
 8001988:	0800acd4 	.word	0x0800acd4
 800198c:	0800acd8 	.word	0x0800acd8
 8001990:	20000498 	.word	0x20000498
 8001994:	0800acdc 	.word	0x0800acdc
 8001998:	200004c8 	.word	0x200004c8

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_MspInit+0x68>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <HAL_MspInit+0x68>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_MspInit+0x68>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_MspInit+0x68>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <HAL_MspInit+0x68>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_MspInit+0x68>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	210f      	movs	r1, #15
 80019d6:	f06f 0001 	mvn.w	r0, #1
 80019da:	f001 f92e 	bl	8002c3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_MspInit+0x6c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_MspInit+0x6c>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3a:	f000 fdc3 	bl	80025c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a3e:	f004 fb77 	bl	8006130 <xTaskGetSchedulerState>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a48:	f004 fbce 	bl	80061e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <USART1_IRQHandler+0x10>)
 8001a56:	f003 fdbb 	bl	80055d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200009c0 	.word	0x200009c0

08001a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <USART2_IRQHandler+0x10>)
 8001a6a:	f003 fdb1 	bl	80055d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000a04 	.word	0x20000a04

08001a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a80:	f001 fc1a 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM7_IRQHandler+0x10>)
 8001a8e:	f002 fe33 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000970 	.word	0x20000970

08001a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <_kill>:

int _kill(int pid, int sig)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ab4:	f004 fbbe 	bl	8006234 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2216      	movs	r2, #22
 8001abc:	601a      	str	r2, [r3, #0]
	return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_exit>:

void _exit (int status)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffe7 	bl	8001aaa <_kill>
	while (1) {}		/* Make sure we hang here */
 8001adc:	e7fe      	b.n	8001adc <_exit+0x12>

08001ade <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e00a      	b.n	8001b06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af0:	f3af 8000 	nop.w
 8001af4:	4601      	mov	r1, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	60ba      	str	r2, [r7, #8]
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dbf0      	blt.n	8001af0 <_read+0x12>
	}

return len;
 8001b0e:	687b      	ldr	r3, [r7, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e009      	b.n	8001b3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	60ba      	str	r2, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fd1c 	bl	8001570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbf1      	blt.n	8001b2a <_write+0x12>
	}
	return len;
 8001b46:	687b      	ldr	r3, [r7, #4]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_close>:

int _close(int file)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b76:	605a      	str	r2, [r3, #4]
	return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <_isatty>:

int _isatty(int file)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f004 fb28 	bl	8006234 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000c000 	.word	0x2000c000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	2000084c 	.word	0x2000084c
 8001c18:	20000b18 	.word	0x20000b18

08001c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b096      	sub	sp, #88	; 0x58
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb1f 	bl	80062a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c68:	4a50      	ldr	r2, [pc, #320]	; (8001dac <MX_TIM1_Init+0x184>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8001c6c:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c6e:	2211      	movs	r2, #17
 8001c70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c7a:	22c7      	movs	r2, #199	; 0xc7
 8001c7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c84:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c90:	4845      	ldr	r0, [pc, #276]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c92:	f002 f93f 	bl	8003f14 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c9c:	f7ff fcca 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001caa:	4619      	mov	r1, r3
 8001cac:	483e      	ldr	r0, [pc, #248]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001cae:	f002 fee9 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f7ff fcbc 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cbc:	483a      	ldr	r0, [pc, #232]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001cbe:	f002 f9d9 	bl	8004074 <HAL_TIM_PWM_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001cc8:	f7ff fcb4 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4833      	ldr	r0, [pc, #204]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001cdc:	f003 fa9a 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001ce6:	f7ff fca5 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	2360      	movs	r3, #96	; 0x60
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4826      	ldr	r0, [pc, #152]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d10:	f002 fdfa 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d1a:	f7ff fc8b 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	2204      	movs	r2, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4820      	ldr	r0, [pc, #128]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d28:	f002 fdee 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001d32:	f7ff fc7f 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481a      	ldr	r0, [pc, #104]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d40:	f002 fde2 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d4a:	f7ff fc73 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	220c      	movs	r2, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d58:	f002 fdd6 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001d62:	f7ff fc67 	bl	8001634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d8a:	f003 faaf 	bl	80052ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001d94:	f7ff fc4e 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d9a:	f000 fa45 	bl	8002228 <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3758      	adds	r7, #88	; 0x58
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000850 	.word	0x20000850
 8001dac:	40012c00 	.word	0x40012c00

08001db0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2224      	movs	r2, #36	; 0x24
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fa70 	bl	80062a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001e20:	f002 fb3a 	bl	8004498 <HAL_TIM_Encoder_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e2a:	f7ff fc03 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_TIM2_Init+0xa4>)
 8001e3c:	f003 f9ea 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e46:	f7ff fbf5 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3730      	adds	r7, #48	; 0x30
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000898 	.word	0x20000898

08001e58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e8a:	4a2e      	ldr	r2, [pc, #184]	; (8001f44 <MX_TIM3_Init+0xec>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e90:	2247      	movs	r2, #71	; 0x47
 8001e92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ea0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eae:	4824      	ldr	r0, [pc, #144]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001eb0:	f002 f830 	bl	8003f14 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001eba:	f7ff fbbb 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481d      	ldr	r0, [pc, #116]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001ecc:	f002 fdda 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ed6:	f7ff fbad 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eda:	4819      	ldr	r0, [pc, #100]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001edc:	f002 f8ca 	bl	8004074 <HAL_TIM_PWM_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ee6:	f7ff fba5 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4811      	ldr	r0, [pc, #68]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001efa:	f003 f98b 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f04:	f7ff fb96 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 8001f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001f22:	f002 fcf1 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f2c:	f7ff fb82 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001f32:	f000 f979 	bl	8002228 <HAL_TIM_MspPostInit>

}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200008e0 	.word	0x200008e0
 8001f44:	40000400 	.word	0x40000400

08001f48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 f9a4 	bl	80062a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001f66:	4a21      	ldr	r2, [pc, #132]	; (8001fec <MX_TIM5_Init+0xa4>)
 8001f68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f92:	2301      	movs	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001fb6:	f002 fa6f 	bl	8004498 <HAL_TIM_Encoder_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001fc0:	f7ff fb38 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_TIM5_Init+0xa0>)
 8001fd2:	f003 f91f 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001fdc:	f7ff fb2a 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	3730      	adds	r7, #48	; 0x30
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000928 	.word	0x20000928
 8001fec:	40000c00 	.word	0x40000c00

08001ff0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_TIM7_Init+0x64>)
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <MX_TIM7_Init+0x68>)
 8002002:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <MX_TIM7_Init+0x64>)
 8002006:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800200a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_TIM7_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_TIM7_Init+0x64>)
 8002014:	f242 7210 	movw	r2, #10000	; 0x2710
 8002018:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_TIM7_Init+0x64>)
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <MX_TIM7_Init+0x64>)
 8002022:	f001 ff77 	bl	8003f14 <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800202c:	f7ff fb02 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_TIM7_Init+0x64>)
 800203e:	f003 f8e9 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002048:	f7ff faf4 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000970 	.word	0x20000970
 8002058:	40001400 	.word	0x40001400

0800205c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_TIM_Base_MspInit+0x8c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10c      	bne.n	8002088 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 8002074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002078:	6193      	str	r3, [r2, #24]
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002086:	e02a      	b.n	80020de <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_Base_MspInit+0x94>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10c      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a15      	ldr	r2, [pc, #84]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
}
 80020aa:	e018      	b.n	80020de <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_TIM_Base_MspInit+0x98>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_TIM_Base_MspInit+0x90>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2105      	movs	r1, #5
 80020d2:	2037      	movs	r0, #55	; 0x37
 80020d4:	f000 fdb1 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020d8:	2037      	movs	r0, #55	; 0x37
 80020da:	f000 fdca 	bl	8002c72 <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40001400 	.word	0x40001400

080020f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d14f      	bne.n	80021b8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a3d      	ldr	r2, [pc, #244]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a37      	ldr	r2, [pc, #220]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8002160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	4828      	ldr	r0, [pc, #160]	; (8002218 <HAL_TIM_Encoder_MspInit+0x120>)
 8002176:	f000 fed9 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 800217a:	2308      	movs	r3, #8
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4823      	ldr	r0, [pc, #140]	; (800221c <HAL_TIM_Encoder_MspInit+0x124>)
 800218e:	f000 fecd 	bl	8002f2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_TIM_Encoder_MspInit+0x128>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b0:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_TIM_Encoder_MspInit+0x128>)
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021b6:	e028      	b.n	800220a <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_Encoder_MspInit+0x12c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d123      	bne.n	800220a <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6193      	str	r3, [r2, #24]
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_TIM_Encoder_MspInit+0x11c>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 80021f2:	2303      	movs	r3, #3
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <HAL_TIM_Encoder_MspInit+0x120>)
 8002206:	f000 fe91 	bl	8002f2c <HAL_GPIO_Init>
}
 800220a:	bf00      	nop
 800220c:	3730      	adds	r7, #48	; 0x30
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40010800 	.word	0x40010800
 800221c:	40010c00 	.word	0x40010c00
 8002220:	40010000 	.word	0x40010000
 8002224:	40000c00 	.word	0x40000c00

08002228 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_TIM_MspPostInit+0xbc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d119      	bne.n	800227c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_TIM_MspPostInit+0xc0>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <HAL_TIM_MspPostInit+0xc0>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_TIM_MspPostInit+0xc0>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8002260:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	481d      	ldr	r0, [pc, #116]	; (80022ec <HAL_TIM_MspPostInit+0xc4>)
 8002276:	f000 fe59 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800227a:	e02e      	b.n	80022da <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_TIM_MspPostInit+0xc8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d129      	bne.n	80022da <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_TIM_MspPostInit+0xc0>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_TIM_MspPostInit+0xc0>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6193      	str	r3, [r2, #24]
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_TIM_MspPostInit+0xc0>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 800229e:	2340      	movs	r3, #64	; 0x40
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2302      	movs	r3, #2
 80022a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4810      	ldr	r0, [pc, #64]	; (80022f4 <HAL_TIM_MspPostInit+0xcc>)
 80022b2:	f000 fe3b 	bl	8002f2c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_TIM_MspPostInit+0xd0>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_TIM_MspPostInit+0xd0>)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	6053      	str	r3, [r2, #4]
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010800 	.word	0x40010800
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40010000 	.word	0x40010000

080022fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_USART1_UART_Init+0x50>)
 8002304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART1_UART_Init+0x4c>)
 8002334:	f003 f83d 	bl	80053b2 <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800233e:	f7ff f979 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200009c0 	.word	0x200009c0
 800234c:	40013800 	.word	0x40013800

08002350 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_USART2_UART_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_USART2_UART_Init+0x4c>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USART2_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USART2_UART_Init+0x4c>)
 8002388:	f003 f813 	bl	80053b2 <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002392:	f7ff f94f 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000a04 	.word	0x20000a04
 80023a0:	40004400 	.word	0x40004400

080023a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <HAL_UART_MspInit+0x130>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d146      	bne.n	8002452 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c4:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <HAL_UART_MspInit+0x134>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <HAL_UART_MspInit+0x134>)
 80023ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ce:	6193      	str	r3, [r2, #24]
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_UART_MspInit+0x134>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023dc:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <HAL_UART_MspInit+0x134>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <HAL_UART_MspInit+0x134>)
 80023e2:	f043 0308 	orr.w	r3, r3, #8
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_UART_MspInit+0x134>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 80023f4:	2340      	movs	r3, #64	; 0x40
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	4835      	ldr	r0, [pc, #212]	; (80024dc <HAL_UART_MspInit+0x138>)
 8002408:	f000 fd90 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	482f      	ldr	r0, [pc, #188]	; (80024dc <HAL_UART_MspInit+0x138>)
 8002420:	f000 fd84 	bl	8002f2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_UART_MspInit+0x13c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_UART_MspInit+0x13c>)
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2105      	movs	r1, #5
 8002444:	2025      	movs	r0, #37	; 0x25
 8002446:	f000 fbf8 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800244a:	2025      	movs	r0, #37	; 0x25
 800244c:	f000 fc11 	bl	8002c72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002450:	e03c      	b.n	80024cc <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <HAL_UART_MspInit+0x140>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d137      	bne.n	80024cc <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_UART_MspInit+0x134>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_UART_MspInit+0x134>)
 8002462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002466:	61d3      	str	r3, [r2, #28]
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_UART_MspInit+0x134>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x134>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_UART_MspInit+0x134>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x134>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 800248c:	2304      	movs	r3, #4
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <HAL_UART_MspInit+0x144>)
 80024a0:	f000 fd44 	bl	8002f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 80024a4:	2308      	movs	r3, #8
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <HAL_UART_MspInit+0x144>)
 80024b8:	f000 fd38 	bl	8002f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2105      	movs	r1, #5
 80024c0:	2026      	movs	r0, #38	; 0x26
 80024c2:	f000 fbba 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024c6:	2026      	movs	r0, #38	; 0x26
 80024c8:	f000 fbd3 	bl	8002c72 <HAL_NVIC_EnableIRQ>
}
 80024cc:	bf00      	nop
 80024ce:	3730      	adds	r7, #48	; 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013800 	.word	0x40013800
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010c00 	.word	0x40010c00
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40004400 	.word	0x40004400
 80024e8:	40010800 	.word	0x40010800

080024ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002512:	f7ff fb83 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002516:	f003 fe93 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800251a:	f7fe ff13 	bl	8001344 <main>
  bx lr
 800251e:	4770      	bx	lr
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	200006d4 	.word	0x200006d4
  ldr r2, =_sidata
 8002528:	0800b220 	.word	0x0800b220
  ldr r2, =_sbss
 800252c:	200006d4 	.word	0x200006d4
  ldr r4, =_ebss
 8002530:	20000b14 	.word	0x20000b14

08002534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_2_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_Init+0x28>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_Init+0x28>)
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002548:	2003      	movs	r0, #3
 800254a:	f000 fb6b 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254e:	200f      	movs	r0, #15
 8002550:	f000 f808 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002554:	f7ff fa22 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x54>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x58>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	fbb3 f3f1 	udiv	r3, r3, r1
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fb83 	bl	8002c8e <HAL_SYSTICK_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00e      	b.n	80025b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d80a      	bhi.n	80025ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002598:	2200      	movs	r2, #0
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f000 fb4b 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <HAL_InitTick+0x5c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200004f4 	.word	0x200004f4
 80025bc:	200004fc 	.word	0x200004fc
 80025c0:	200004f8 	.word	0x200004f8

080025c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_IncTick+0x1c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_IncTick+0x20>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <HAL_IncTick+0x20>)
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	200004fc 	.word	0x200004fc
 80025e4:	20000a48 	.word	0x20000a48

080025e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <HAL_GetTick+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20000a48 	.word	0x20000a48

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fff0 	bl	80025e8 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffe0 	bl	80025e8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200004fc 	.word	0x200004fc

08002644 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0ce      	b.n	8002804 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fc30 	bl	8000ee8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f9bd 	bl	8002a08 <ADC_ConversionStop_Disable>
 800268e:	4603      	mov	r3, r0
 8002690:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 80a9 	bne.w	80027f2 <HAL_ADC_Init+0x1ae>
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80a5 	bne.w	80027f2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b0:	f023 0302 	bic.w	r3, r3, #2
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4951      	ldr	r1, [pc, #324]	; (800280c <HAL_ADC_Init+0x1c8>)
 80026c6:	428b      	cmp	r3, r1
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_Init+0x9c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80026d2:	d002      	beq.n	80026da <HAL_ADC_Init+0x96>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_Init+0xa0>
 80026da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80026de:	e001      	b.n	80026e4 <HAL_ADC_Init+0xa0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7b1b      	ldrb	r3, [r3, #12]
 80026ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fc:	d003      	beq.n	8002706 <HAL_ADC_Init+0xc2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_ADC_Init+0xc8>
 8002706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270a:	e000      	b.n	800270e <HAL_ADC_Init+0xca>
 800270c:	2300      	movs	r3, #0
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7d1b      	ldrb	r3, [r3, #20]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d119      	bne.n	8002750 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7b1b      	ldrb	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	3b01      	subs	r3, #1
 800272a:	035a      	lsls	r2, r3, #13
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e00b      	b.n	8002750 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_ADC_Init+0x1cc>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002780:	d003      	beq.n	800278a <HAL_ADC_Init+0x146>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d104      	bne.n	8002794 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	3b01      	subs	r3, #1
 8002790:	051b      	lsls	r3, r3, #20
 8002792:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_ADC_Init+0x1d0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10b      	bne.n	80027d0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027ce:	e018      	b.n	8002802 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f023 0312 	bic.w	r3, r3, #18
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027f0:	e007      	b.n	8002802 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f043 0210 	orr.w	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40013c00 	.word	0x40013c00
 8002810:	ffe1f7fd 	.word	0xffe1f7fd
 8002814:	ff1f0efe 	.word	0xff1f0efe

08002818 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x20>
 8002834:	2302      	movs	r3, #2
 8002836:	e0dc      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x1da>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b06      	cmp	r3, #6
 8002846:	d81c      	bhi.n	8002882 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	3b05      	subs	r3, #5
 800285a:	221f      	movs	r2, #31
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	4019      	ands	r1, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3b05      	subs	r3, #5
 8002874:	fa00 f203 	lsl.w	r2, r0, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
 8002880:	e03c      	b.n	80028fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d81c      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b23      	subs	r3, #35	; 0x23
 800289c:	221f      	movs	r2, #31
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	4019      	ands	r1, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b23      	subs	r3, #35	; 0x23
 80028b6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
 80028c2:	e01b      	b.n	80028fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b41      	subs	r3, #65	; 0x41
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b41      	subs	r3, #65	; 0x41
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b09      	cmp	r3, #9
 8002902:	d91c      	bls.n	800293e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68d9      	ldr	r1, [r3, #12]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	3b1e      	subs	r3, #30
 8002916:	2207      	movs	r2, #7
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	4019      	ands	r1, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6898      	ldr	r0, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	3b1e      	subs	r3, #30
 8002930:	fa00 f203 	lsl.w	r2, r0, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	e019      	b.n	8002972 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6919      	ldr	r1, [r3, #16]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	2207      	movs	r2, #7
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	4019      	ands	r1, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6898      	ldr	r0, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	fa00 f203 	lsl.w	r2, r0, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b10      	cmp	r3, #16
 8002978:	d003      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800297e:	2b11      	cmp	r3, #17
 8002980:	d132      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d125      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d126      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d11a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_ADC_ConfigChannel+0x1e8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_ADC_ConfigChannel+0x1ec>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	0c9a      	lsrs	r2, r3, #18
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c8:	e002      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f9      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x1b2>
 80029d6:	e007      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012400 	.word	0x40012400
 8002a00:	200004f4 	.word	0x200004f4
 8002a04:	431bde83 	.word	0x431bde83

08002a08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d12e      	bne.n	8002a80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a32:	f7ff fdd9 	bl	80025e8 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a38:	e01b      	b.n	8002a72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a3a:	f7ff fdd5 	bl	80025e8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d914      	bls.n	8002a72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10d      	bne.n	8002a72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d0dc      	beq.n	8002a3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4906      	ldr	r1, [pc, #24]	; (8002b24 <__NVIC_EnableIRQ+0x34>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff90 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff2d 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4c:	f7ff ff42 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff90 	bl	8002b7c <NVIC_EncodePriority>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff5f 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff35 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffa2 	bl	8002be0 <SysTick_Config>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d008      	beq.n	8002cce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e020      	b.n	8002d10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020e 	bic.w	r2, r2, #14
 8002cdc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d005      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2204      	movs	r2, #4
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e0d6      	b.n	8002eec <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <HAL_DMA_Abort_IT+0x1dc>)
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d958      	bls.n	8002e1c <HAL_DMA_Abort_IT+0x100>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a63      	ldr	r2, [pc, #396]	; (8002efc <HAL_DMA_Abort_IT+0x1e0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04f      	beq.n	8002e14 <HAL_DMA_Abort_IT+0xf8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a61      	ldr	r2, [pc, #388]	; (8002f00 <HAL_DMA_Abort_IT+0x1e4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d048      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xf4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a60      	ldr	r2, [pc, #384]	; (8002f04 <HAL_DMA_Abort_IT+0x1e8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <HAL_DMA_Abort_IT+0xee>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5e      	ldr	r2, [pc, #376]	; (8002f08 <HAL_DMA_Abort_IT+0x1ec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d038      	beq.n	8002e04 <HAL_DMA_Abort_IT+0xe8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5d      	ldr	r2, [pc, #372]	; (8002f0c <HAL_DMA_Abort_IT+0x1f0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d030      	beq.n	8002dfe <HAL_DMA_Abort_IT+0xe2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5b      	ldr	r2, [pc, #364]	; (8002f10 <HAL_DMA_Abort_IT+0x1f4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d028      	beq.n	8002df8 <HAL_DMA_Abort_IT+0xdc>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a53      	ldr	r2, [pc, #332]	; (8002ef8 <HAL_DMA_Abort_IT+0x1dc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d020      	beq.n	8002df2 <HAL_DMA_Abort_IT+0xd6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <HAL_DMA_Abort_IT+0x1f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d019      	beq.n	8002dee <HAL_DMA_Abort_IT+0xd2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_DMA_Abort_IT+0x1fc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d012      	beq.n	8002dea <HAL_DMA_Abort_IT+0xce>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_DMA_Abort_IT+0x200>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00a      	beq.n	8002de4 <HAL_DMA_Abort_IT+0xc8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_DMA_Abort_IT+0x204>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d102      	bne.n	8002dde <HAL_DMA_Abort_IT+0xc2>
 8002dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ddc:	e01b      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de2:	e018      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de8:	e015      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002dea:	2310      	movs	r3, #16
 8002dec:	e013      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e011      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df6:	e00e      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002df8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dfc:	e00b      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e02:	e008      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e08:	e005      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e0e:	e002      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002e10:	2310      	movs	r3, #16
 8002e12:	e000      	b.n	8002e16 <HAL_DMA_Abort_IT+0xfa>
 8002e14:	2301      	movs	r3, #1
 8002e16:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_DMA_Abort_IT+0x208>)
 8002e18:	6053      	str	r3, [r2, #4]
 8002e1a:	e057      	b.n	8002ecc <HAL_DMA_Abort_IT+0x1b0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a36      	ldr	r2, [pc, #216]	; (8002efc <HAL_DMA_Abort_IT+0x1e0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d04f      	beq.n	8002ec6 <HAL_DMA_Abort_IT+0x1aa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <HAL_DMA_Abort_IT+0x1e4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d048      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x1a6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a33      	ldr	r2, [pc, #204]	; (8002f04 <HAL_DMA_Abort_IT+0x1e8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d040      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x1a0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <HAL_DMA_Abort_IT+0x1ec>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d038      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x19a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a30      	ldr	r2, [pc, #192]	; (8002f0c <HAL_DMA_Abort_IT+0x1f0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d030      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x194>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <HAL_DMA_Abort_IT+0x1f4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d028      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x18e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_DMA_Abort_IT+0x1dc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d020      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x188>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <HAL_DMA_Abort_IT+0x1f8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d019      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x184>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <HAL_DMA_Abort_IT+0x1fc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d012      	beq.n	8002e9c <HAL_DMA_Abort_IT+0x180>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <HAL_DMA_Abort_IT+0x200>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00a      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x17a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_DMA_Abort_IT+0x204>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d102      	bne.n	8002e90 <HAL_DMA_Abort_IT+0x174>
 8002e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8e:	e01b      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e94:	e018      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9a:	e015      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	e013      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e011      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea8:	e00e      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002eaa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eae:	e00b      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb4:	e008      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eba:	e005      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec0:	e002      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x1ac>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_DMA_Abort_IT+0x20c>)
 8002eca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    } 
  }
  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40020080 	.word	0x40020080
 8002efc:	40020008 	.word	0x40020008
 8002f00:	4002001c 	.word	0x4002001c
 8002f04:	40020030 	.word	0x40020030
 8002f08:	40020044 	.word	0x40020044
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	4002006c 	.word	0x4002006c
 8002f14:	40020408 	.word	0x40020408
 8002f18:	4002041c 	.word	0x4002041c
 8002f1c:	40020430 	.word	0x40020430
 8002f20:	40020444 	.word	0x40020444
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020000 	.word	0x40020000

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b08b      	sub	sp, #44	; 0x2c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3e:	e179      	b.n	8003234 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f40:	2201      	movs	r2, #1
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f040 8168 	bne.w	800322e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a96      	ldr	r2, [pc, #600]	; (80031bc <HAL_GPIO_Init+0x290>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d05e      	beq.n	8003026 <HAL_GPIO_Init+0xfa>
 8002f68:	4a94      	ldr	r2, [pc, #592]	; (80031bc <HAL_GPIO_Init+0x290>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d875      	bhi.n	800305a <HAL_GPIO_Init+0x12e>
 8002f6e:	4a94      	ldr	r2, [pc, #592]	; (80031c0 <HAL_GPIO_Init+0x294>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d058      	beq.n	8003026 <HAL_GPIO_Init+0xfa>
 8002f74:	4a92      	ldr	r2, [pc, #584]	; (80031c0 <HAL_GPIO_Init+0x294>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d86f      	bhi.n	800305a <HAL_GPIO_Init+0x12e>
 8002f7a:	4a92      	ldr	r2, [pc, #584]	; (80031c4 <HAL_GPIO_Init+0x298>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d052      	beq.n	8003026 <HAL_GPIO_Init+0xfa>
 8002f80:	4a90      	ldr	r2, [pc, #576]	; (80031c4 <HAL_GPIO_Init+0x298>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d869      	bhi.n	800305a <HAL_GPIO_Init+0x12e>
 8002f86:	4a90      	ldr	r2, [pc, #576]	; (80031c8 <HAL_GPIO_Init+0x29c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04c      	beq.n	8003026 <HAL_GPIO_Init+0xfa>
 8002f8c:	4a8e      	ldr	r2, [pc, #568]	; (80031c8 <HAL_GPIO_Init+0x29c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d863      	bhi.n	800305a <HAL_GPIO_Init+0x12e>
 8002f92:	4a8e      	ldr	r2, [pc, #568]	; (80031cc <HAL_GPIO_Init+0x2a0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d046      	beq.n	8003026 <HAL_GPIO_Init+0xfa>
 8002f98:	4a8c      	ldr	r2, [pc, #560]	; (80031cc <HAL_GPIO_Init+0x2a0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d85d      	bhi.n	800305a <HAL_GPIO_Init+0x12e>
 8002f9e:	2b12      	cmp	r3, #18
 8002fa0:	d82a      	bhi.n	8002ff8 <HAL_GPIO_Init+0xcc>
 8002fa2:	2b12      	cmp	r3, #18
 8002fa4:	d859      	bhi.n	800305a <HAL_GPIO_Init+0x12e>
 8002fa6:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <HAL_GPIO_Init+0x80>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08003027 	.word	0x08003027
 8002fb0:	08003001 	.word	0x08003001
 8002fb4:	08003013 	.word	0x08003013
 8002fb8:	08003055 	.word	0x08003055
 8002fbc:	0800305b 	.word	0x0800305b
 8002fc0:	0800305b 	.word	0x0800305b
 8002fc4:	0800305b 	.word	0x0800305b
 8002fc8:	0800305b 	.word	0x0800305b
 8002fcc:	0800305b 	.word	0x0800305b
 8002fd0:	0800305b 	.word	0x0800305b
 8002fd4:	0800305b 	.word	0x0800305b
 8002fd8:	0800305b 	.word	0x0800305b
 8002fdc:	0800305b 	.word	0x0800305b
 8002fe0:	0800305b 	.word	0x0800305b
 8002fe4:	0800305b 	.word	0x0800305b
 8002fe8:	0800305b 	.word	0x0800305b
 8002fec:	0800305b 	.word	0x0800305b
 8002ff0:	08003009 	.word	0x08003009
 8002ff4:	0800301d 	.word	0x0800301d
 8002ff8:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <HAL_GPIO_Init+0x2a4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ffe:	e02c      	b.n	800305a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	623b      	str	r3, [r7, #32]
          break;
 8003006:	e029      	b.n	800305c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	3304      	adds	r3, #4
 800300e:	623b      	str	r3, [r7, #32]
          break;
 8003010:	e024      	b.n	800305c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	3308      	adds	r3, #8
 8003018:	623b      	str	r3, [r7, #32]
          break;
 800301a:	e01f      	b.n	800305c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	330c      	adds	r3, #12
 8003022:	623b      	str	r3, [r7, #32]
          break;
 8003024:	e01a      	b.n	800305c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800302e:	2304      	movs	r3, #4
 8003030:	623b      	str	r3, [r7, #32]
          break;
 8003032:	e013      	b.n	800305c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800303c:	2308      	movs	r3, #8
 800303e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	611a      	str	r2, [r3, #16]
          break;
 8003046:	e009      	b.n	800305c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003048:	2308      	movs	r3, #8
 800304a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	615a      	str	r2, [r3, #20]
          break;
 8003052:	e003      	b.n	800305c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
          break;
 8003058:	e000      	b.n	800305c <HAL_GPIO_Init+0x130>
          break;
 800305a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d801      	bhi.n	8003066 <HAL_GPIO_Init+0x13a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	e001      	b.n	800306a <HAL_GPIO_Init+0x13e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2bff      	cmp	r3, #255	; 0xff
 8003070:	d802      	bhi.n	8003078 <HAL_GPIO_Init+0x14c>
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	e002      	b.n	800307e <HAL_GPIO_Init+0x152>
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	3b08      	subs	r3, #8
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	210f      	movs	r1, #15
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	6a39      	ldr	r1, [r7, #32]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	431a      	orrs	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80c1 	beq.w	800322e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_GPIO_Init+0x2a8>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_GPIO_Init+0x2a8>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b46      	ldr	r3, [pc, #280]	; (80031d4 <HAL_GPIO_Init+0x2a8>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030c4:	4a44      	ldr	r2, [pc, #272]	; (80031d8 <HAL_GPIO_Init+0x2ac>)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01f      	beq.n	8003130 <HAL_GPIO_Init+0x204>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3b      	ldr	r2, [pc, #236]	; (80031e0 <HAL_GPIO_Init+0x2b4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d019      	beq.n	800312c <HAL_GPIO_Init+0x200>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_GPIO_Init+0x2b8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_GPIO_Init+0x1fc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <HAL_GPIO_Init+0x2bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00d      	beq.n	8003124 <HAL_GPIO_Init+0x1f8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a38      	ldr	r2, [pc, #224]	; (80031ec <HAL_GPIO_Init+0x2c0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x1f4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a37      	ldr	r2, [pc, #220]	; (80031f0 <HAL_GPIO_Init+0x2c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_GPIO_Init+0x1f0>
 8003118:	2305      	movs	r3, #5
 800311a:	e00a      	b.n	8003132 <HAL_GPIO_Init+0x206>
 800311c:	2306      	movs	r3, #6
 800311e:	e008      	b.n	8003132 <HAL_GPIO_Init+0x206>
 8003120:	2304      	movs	r3, #4
 8003122:	e006      	b.n	8003132 <HAL_GPIO_Init+0x206>
 8003124:	2303      	movs	r3, #3
 8003126:	e004      	b.n	8003132 <HAL_GPIO_Init+0x206>
 8003128:	2302      	movs	r3, #2
 800312a:	e002      	b.n	8003132 <HAL_GPIO_Init+0x206>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_GPIO_Init+0x206>
 8003130:	2300      	movs	r3, #0
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	f002 0203 	and.w	r2, r2, #3
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	4093      	lsls	r3, r2
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003142:	4925      	ldr	r1, [pc, #148]	; (80031d8 <HAL_GPIO_Init+0x2ac>)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4924      	ldr	r1, [pc, #144]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	600b      	str	r3, [r1, #0]
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	43db      	mvns	r3, r3
 8003172:	4920      	ldr	r1, [pc, #128]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 8003174:	4013      	ands	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	491a      	ldr	r1, [pc, #104]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	43db      	mvns	r3, r3
 800319a:	4916      	ldr	r1, [pc, #88]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 800319c:	4013      	ands	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d025      	beq.n	80031f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4910      	ldr	r1, [pc, #64]	; (80031f4 <HAL_GPIO_Init+0x2c8>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
 80031b8:	e025      	b.n	8003206 <HAL_GPIO_Init+0x2da>
 80031ba:	bf00      	nop
 80031bc:	10320000 	.word	0x10320000
 80031c0:	10310000 	.word	0x10310000
 80031c4:	10220000 	.word	0x10220000
 80031c8:	10210000 	.word	0x10210000
 80031cc:	10120000 	.word	0x10120000
 80031d0:	10110000 	.word	0x10110000
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	40011800 	.word	0x40011800
 80031f0:	40011c00 	.word	0x40011c00
 80031f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_GPIO_Init+0x324>)
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	43db      	mvns	r3, r3
 8003200:	4913      	ldr	r1, [pc, #76]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003202:	4013      	ands	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d006      	beq.n	8003220 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]
 800321e:	e006      	b.n	800322e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	43db      	mvns	r3, r3
 8003228:	4909      	ldr	r1, [pc, #36]	; (8003250 <HAL_GPIO_Init+0x324>)
 800322a:	4013      	ands	r3, r2
 800322c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	3301      	adds	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	f47f ae7e 	bne.w	8002f40 <HAL_GPIO_Init+0x14>
  }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	372c      	adds	r7, #44	; 0x2c
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43d9      	mvns	r1, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	400b      	ands	r3, r1
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	611a      	str	r2, [r3, #16]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d006      	beq.n	80032dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe f97e 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e12b      	b.n	8003552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd ff16 	bl	8001140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800334c:	f000 fce6 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8003350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4a81      	ldr	r2, [pc, #516]	; (800355c <HAL_I2C_Init+0x274>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d807      	bhi.n	800336c <HAL_I2C_Init+0x84>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a80      	ldr	r2, [pc, #512]	; (8003560 <HAL_I2C_Init+0x278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e006      	b.n	800337a <HAL_I2C_Init+0x92>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_I2C_Init+0x27c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0e7      	b.n	8003552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_I2C_Init+0x280>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a6a      	ldr	r2, [pc, #424]	; (800355c <HAL_I2C_Init+0x274>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d802      	bhi.n	80033bc <HAL_I2C_Init+0xd4>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	e009      	b.n	80033d0 <HAL_I2C_Init+0xe8>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a69      	ldr	r2, [pc, #420]	; (800356c <HAL_I2C_Init+0x284>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	3301      	adds	r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	495c      	ldr	r1, [pc, #368]	; (800355c <HAL_I2C_Init+0x274>)
 80033ec:	428b      	cmp	r3, r1
 80033ee:	d819      	bhi.n	8003424 <HAL_I2C_Init+0x13c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e59      	subs	r1, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003404:	400b      	ands	r3, r1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_I2C_Init+0x138>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1e59      	subs	r1, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fbb1 f3f3 	udiv	r3, r1, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	e051      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003420:	2304      	movs	r3, #4
 8003422:	e04f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d111      	bne.n	8003450 <HAL_I2C_Init+0x168>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e58      	subs	r0, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e012      	b.n	8003476 <HAL_I2C_Init+0x18e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Init+0x196>
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10e      	bne.n	80034a4 <HAL_I2C_Init+0x1bc>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e58      	subs	r0, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	440b      	add	r3, r1
 8003494:	fbb0 f3f3 	udiv	r3, r0, r3
 8003498:	3301      	adds	r3, #1
 800349a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a2:	e00f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e58      	subs	r0, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	0099      	lsls	r1, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	6809      	ldr	r1, [r1, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6911      	ldr	r1, [r2, #16]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	000186a0 	.word	0x000186a0
 8003560:	001e847f 	.word	0x001e847f
 8003564:	003d08ff 	.word	0x003d08ff
 8003568:	431bde83 	.word	0x431bde83
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e272      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8087 	beq.w	800369e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003590:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800359c:	4b8f      	ldr	r3, [pc, #572]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d112      	bne.n	80035ce <HAL_RCC_OscConfig+0x5e>
 80035a8:	4b8c      	ldr	r3, [pc, #560]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d10b      	bne.n	80035ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b6:	4b89      	ldr	r3, [pc, #548]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d06c      	beq.n	800369c <HAL_RCC_OscConfig+0x12c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d168      	bne.n	800369c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e24c      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x76>
 80035d8:	4b80      	ldr	r3, [pc, #512]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7f      	ldr	r2, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	e02e      	b.n	8003644 <HAL_RCC_OscConfig+0xd4>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b7b      	ldr	r3, [pc, #492]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a7a      	ldr	r2, [pc, #488]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b78      	ldr	r3, [pc, #480]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a77      	ldr	r2, [pc, #476]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e01d      	b.n	8003644 <HAL_RCC_OscConfig+0xd4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0xbc>
 8003612:	4b72      	ldr	r3, [pc, #456]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a71      	ldr	r2, [pc, #452]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e00b      	b.n	8003644 <HAL_RCC_OscConfig+0xd4>
 800362c:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6a      	ldr	r2, [pc, #424]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a67      	ldr	r2, [pc, #412]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 800363e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003642:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe ffcc 	bl	80025e8 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003654:	f7fe ffc8 	bl	80025e8 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e200      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0xe4>
 8003672:	e014      	b.n	800369e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe ffb8 	bl	80025e8 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367c:	f7fe ffb4 	bl	80025e8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e1ec      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x10c>
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d063      	beq.n	8003772 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d11c      	bne.n	80036fc <HAL_RCC_OscConfig+0x18c>
 80036c2:	4b46      	ldr	r3, [pc, #280]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d116      	bne.n	80036fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	4b43      	ldr	r3, [pc, #268]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x176>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e1c0      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4939      	ldr	r1, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	e03a      	b.n	8003772 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe ff6d 	bl	80025e8 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003712:	f7fe ff69 	bl	80025e8 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1a1      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4927      	ldr	r1, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
 8003744:	e015      	b.n	8003772 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe ff4c 	bl	80025e8 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003754:	f7fe ff48 	bl	80025e8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e180      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03a      	beq.n	80037f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d019      	beq.n	80037ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_RCC_OscConfig+0x274>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378c:	f7fe ff2c 	bl	80025e8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fe ff28 	bl	80025e8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e160      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037b2:	2001      	movs	r0, #1
 80037b4:	f000 fada 	bl	8003d6c <RCC_Delay>
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_RCC_OscConfig+0x274>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fe ff12 	bl	80025e8 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c6:	e00f      	b.n	80037e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c8:	f7fe ff0e 	bl	80025e8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d908      	bls.n	80037e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e146      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	42420000 	.word	0x42420000
 80037e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b92      	ldr	r3, [pc, #584]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e9      	bne.n	80037c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a6 	beq.w	800394e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b8b      	ldr	r3, [pc, #556]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	4b88      	ldr	r3, [pc, #544]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4a87      	ldr	r2, [pc, #540]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381c:	61d3      	str	r3, [r2, #28]
 800381e:	4b85      	ldr	r3, [pc, #532]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b7f      	ldr	r3, [pc, #508]	; (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7e      	ldr	r2, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe fecf 	bl	80025e8 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe fecb 	bl	80025e8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e103      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x312>
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a6e      	ldr	r2, [pc, #440]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	e02d      	b.n	80038de <HAL_RCC_OscConfig+0x36e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x334>
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a69      	ldr	r2, [pc, #420]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6213      	str	r3, [r2, #32]
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a66      	ldr	r2, [pc, #408]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	e01c      	b.n	80038de <HAL_RCC_OscConfig+0x36e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x356>
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a60      	ldr	r2, [pc, #384]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	e00b      	b.n	80038de <HAL_RCC_OscConfig+0x36e>
 80038c6:	4b5b      	ldr	r3, [pc, #364]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6213      	str	r3, [r2, #32]
 80038d2:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a57      	ldr	r2, [pc, #348]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d015      	beq.n	8003912 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fe7f 	bl	80025e8 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe fe7b 	bl	80025e8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0b1      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ee      	beq.n	80038ee <HAL_RCC_OscConfig+0x37e>
 8003910:	e014      	b.n	800393c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003912:	f7fe fe69 	bl	80025e8 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe fe65 	bl	80025e8 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e09b      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8087 	beq.w	8003a66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d061      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d146      	bne.n	80039fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_RCC_OscConfig+0x4cc>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fe39 	bl	80025e8 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fe35 	bl	80025e8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e06d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d108      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4921      	ldr	r1, [pc, #132]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a19      	ldr	r1, [r3, #32]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	430b      	orrs	r3, r1
 80039c6:	491b      	ldr	r1, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x4cc>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fe09 	bl	80025e8 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fe05 	bl	80025e8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x46a>
 80039f8:	e035      	b.n	8003a66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe fdf2 	bl	80025e8 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fdee 	bl	80025e8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e026      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x498>
 8003a26:	e01e      	b.n	8003a66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e019      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x500>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0d0      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d910      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0207 	bic.w	r2, r3, #7
 8003a9e:	4965      	ldr	r1, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ada:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003af2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d040      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d115      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e073      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4936      	ldr	r1, [pc, #216]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fe fd40 	bl	80025e8 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe fd3c 	bl	80025e8 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e053      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d210      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	4922      	ldr	r1, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1cc>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fc9e 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	0800acf4 	.word	0x0800acf4
 8003c40:	200004f4 	.word	0x200004f4
 8003c44:	200004f8 	.word	0x200004f8

08003c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b490      	push	{r4, r7}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c50:	1d3c      	adds	r4, r7, #4
 8003c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c58:	f240 2301 	movw	r3, #513	; 0x201
 8003c5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c72:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x40>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x46>
 8003c86:	e02b      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c8a:	623b      	str	r3, [r7, #32]
      break;
 8003c8c:	e02b      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	0c9b      	lsrs	r3, r3, #18
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3328      	adds	r3, #40	; 0x28
 8003c98:	443b      	add	r3, r7
 8003c9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	0c5b      	lsrs	r3, r3, #17
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	3328      	adds	r3, #40	; 0x28
 8003cb6:	443b      	add	r3, r7
 8003cb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e004      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	; (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	623b      	str	r3, [r7, #32]
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ce2:	623b      	str	r3, [r7, #32]
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3728      	adds	r7, #40	; 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc90      	pop	{r4, r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	0800ace4 	.word	0x0800ace4
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	003d0900 	.word	0x003d0900
 8003d04:	007a1200 	.word	0x007a1200

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	200004f4 	.word	0x200004f4

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d20:	f7ff fff2 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	0800ad04 	.word	0x0800ad04

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800ad04 	.word	0x0800ad04

08003d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <RCC_Delay+0x34>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <RCC_Delay+0x38>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0a5b      	lsrs	r3, r3, #9
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d88:	bf00      	nop
  }
  while (Delay --);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	60fa      	str	r2, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f9      	bne.n	8003d88 <RCC_Delay+0x1c>
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	200004f4 	.word	0x200004f4
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d07d      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10d      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dde:	61d3      	str	r3, [r2, #28]
 8003de0:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b46      	ldr	r3, [pc, #280]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d118      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfc:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e08:	f7fe fbee 	bl	80025e8 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	e008      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe fbea 	bl	80025e8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e06d      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d027      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d014      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe fbb9 	bl	80025e8 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe fbb5 	bl	80025e8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e036      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4917      	ldr	r1, [pc, #92]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4904      	ldr	r1, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42420440 	.word	0x42420440

08003f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e041      	b.n	8003faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe f88e 	bl	800205c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 fe7e 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d001      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e044      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <HAL_TIM_Base_Start_IT+0xac>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x6c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x6c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d00e      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x6c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_TIM_Base_Start_IT+0xb4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x6c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_TIM_Base_Start_IT+0xb8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x6c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a15      	ldr	r2, [pc, #84]	; (8004070 <HAL_TIM_Base_Start_IT+0xbc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d111      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b06      	cmp	r3, #6
 8004030:	d010      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	e007      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40013400 	.word	0x40013400
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00

08004074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e041      	b.n	800410a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f839 	bl	8004112 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 fdce 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_TIM_PWM_Start+0x24>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e022      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b04      	cmp	r3, #4
 800414c:	d109      	bne.n	8004162 <HAL_TIM_PWM_Start+0x3e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e015      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d109      	bne.n	800417c <HAL_TIM_PWM_Start+0x58>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e008      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e072      	b.n	800427c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0x82>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	e013      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0x92>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	e003      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fff8 	bl	80051cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a28      	ldr	r2, [pc, #160]	; (8004284 <HAL_TIM_PWM_Start+0x160>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_PWM_Start+0xcc>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a27      	ldr	r2, [pc, #156]	; (8004288 <HAL_TIM_PWM_Start+0x164>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_PWM_Start+0xd0>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_TIM_PWM_Start+0xd2>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_TIM_PWM_Start+0x160>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <HAL_TIM_PWM_Start+0x122>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_TIM_PWM_Start+0x164>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_TIM_PWM_Start+0x122>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d00e      	beq.n	8004246 <HAL_TIM_PWM_Start+0x122>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a17      	ldr	r2, [pc, #92]	; (800428c <HAL_TIM_PWM_Start+0x168>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_TIM_PWM_Start+0x122>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_TIM_PWM_Start+0x16c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIM_PWM_Start+0x122>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <HAL_TIM_PWM_Start+0x170>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b06      	cmp	r3, #6
 8004256:	d010      	beq.n	800427a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	e007      	b.n	800427a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40013400 	.word	0x40013400
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00

08004298 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <HAL_TIM_PWM_Start_IT+0x24>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e022      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0x6a>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d109      	bne.n	80042d6 <HAL_TIM_PWM_Start_IT+0x3e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e015      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0x6a>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d109      	bne.n	80042f0 <HAL_TIM_PWM_Start_IT+0x58>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e008      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0x6a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0b8      	b.n	800447c <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start_IT+0x82>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004318:	e013      	b.n	8004342 <HAL_TIM_PWM_Start_IT+0xaa>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d104      	bne.n	800432a <HAL_TIM_PWM_Start_IT+0x92>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004328:	e00b      	b.n	8004342 <HAL_TIM_PWM_Start_IT+0xaa>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d104      	bne.n	800433a <HAL_TIM_PWM_Start_IT+0xa2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	e003      	b.n	8004342 <HAL_TIM_PWM_Start_IT+0xaa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d841      	bhi.n	80043cc <HAL_TIM_PWM_Start_IT+0x134>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_TIM_PWM_Start_IT+0xb8>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004385 	.word	0x08004385
 8004354:	080043cd 	.word	0x080043cd
 8004358:	080043cd 	.word	0x080043cd
 800435c:	080043cd 	.word	0x080043cd
 8004360:	08004397 	.word	0x08004397
 8004364:	080043cd 	.word	0x080043cd
 8004368:	080043cd 	.word	0x080043cd
 800436c:	080043cd 	.word	0x080043cd
 8004370:	080043a9 	.word	0x080043a9
 8004374:	080043cd 	.word	0x080043cd
 8004378:	080043cd 	.word	0x080043cd
 800437c:	080043cd 	.word	0x080043cd
 8004380:	080043bb 	.word	0x080043bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0202 	orr.w	r2, r2, #2
 8004392:	60da      	str	r2, [r3, #12]
      break;
 8004394:	e01b      	b.n	80043ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0204 	orr.w	r2, r2, #4
 80043a4:	60da      	str	r2, [r3, #12]
      break;
 80043a6:	e012      	b.n	80043ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0208 	orr.w	r2, r2, #8
 80043b6:	60da      	str	r2, [r3, #12]
      break;
 80043b8:	e009      	b.n	80043ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0210 	orr.w	r2, r2, #16
 80043c8:	60da      	str	r2, [r3, #12]
      break;
 80043ca:	e000      	b.n	80043ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80043cc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fef8 	bl	80051cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIM_PWM_Start_IT+0x158>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_TIM_PWM_Start_IT+0x15c>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_TIM_PWM_Start_IT+0x15e>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_TIM_PWM_Start_IT+0x1ae>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d00e      	beq.n	8004446 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a17      	ldr	r2, [pc, #92]	; (800448c <HAL_TIM_PWM_Start_IT+0x1f4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_TIM_PWM_Start_IT+0x1ae>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_TIM_PWM_Start_IT+0x1ae>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a14      	ldr	r2, [pc, #80]	; (8004494 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d111      	bne.n	800446a <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b06      	cmp	r3, #6
 8004456:	d010      	beq.n	800447a <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	e007      	b.n	800447a <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00

08004498 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e093      	b.n	80045d4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd fe19 	bl	80020f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f000 fbb1 	bl	8004c54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	4313      	orrs	r3, r2
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004538:	f023 030c 	bic.w	r3, r3, #12
 800453c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	4313      	orrs	r3, r2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	011a      	lsls	r2, r3, #4
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	031b      	lsls	r3, r3, #12
 8004568:	4313      	orrs	r3, r2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	4313      	orrs	r3, r2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004604:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d102      	bne.n	8004618 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004612:	7b7b      	ldrb	r3, [r7, #13]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e069      	b.n	80046f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462c:	e031      	b.n	8004692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d110      	bne.n	8004656 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d102      	bne.n	8004640 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800463a:	7b3b      	ldrb	r3, [r7, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e055      	b.n	80046f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004654:	e01d      	b.n	8004692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d108      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800465c:	7bbb      	ldrb	r3, [r7, #14]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004662:	7b7b      	ldrb	r3, [r7, #13]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004668:	7b3b      	ldrb	r3, [r7, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e03e      	b.n	80046f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_TIM_Encoder_Start+0xc4>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d008      	beq.n	80046b0 <HAL_TIM_Encoder_Start+0xd4>
 800469e:	e00f      	b.n	80046c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fd8f 	bl	80051cc <TIM_CCxChannelCmd>
      break;
 80046ae:	e016      	b.n	80046de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	2104      	movs	r1, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd87 	bl	80051cc <TIM_CCxChannelCmd>
      break;
 80046be:	e00e      	b.n	80046de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fd7f 	bl	80051cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	2104      	movs	r1, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fd78 	bl	80051cc <TIM_CCxChannelCmd>
      break;
 80046dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa6f 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa62 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa71 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa45 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa38 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fa47 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa1b 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa0e 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa1d 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0210 	mvn.w	r2, #16
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2208      	movs	r2, #8
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9f1 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f9e4 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f9f3 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fe8c 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fd7c 	bl	80053a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9b7 	bl	8004c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0220 	mvn.w	r2, #32
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fd47 	bl	800538e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800491e:	2302      	movs	r3, #2
 8004920:	e0ac      	b.n	8004a7c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b0c      	cmp	r3, #12
 800492e:	f200 809f 	bhi.w	8004a70 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800496d 	.word	0x0800496d
 800493c:	08004a71 	.word	0x08004a71
 8004940:	08004a71 	.word	0x08004a71
 8004944:	08004a71 	.word	0x08004a71
 8004948:	080049ad 	.word	0x080049ad
 800494c:	08004a71 	.word	0x08004a71
 8004950:	08004a71 	.word	0x08004a71
 8004954:	08004a71 	.word	0x08004a71
 8004958:	080049ef 	.word	0x080049ef
 800495c:	08004a71 	.word	0x08004a71
 8004960:	08004a71 	.word	0x08004a71
 8004964:	08004a71 	.word	0x08004a71
 8004968:	08004a2f 	.word	0x08004a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f9e8 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0208 	orr.w	r2, r2, #8
 8004986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0204 	bic.w	r2, r2, #4
 8004996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6999      	ldr	r1, [r3, #24]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	619a      	str	r2, [r3, #24]
      break;
 80049aa:	e062      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa38 	bl	8004e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	021a      	lsls	r2, r3, #8
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	619a      	str	r2, [r3, #24]
      break;
 80049ec:	e041      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fa8b 	bl	8004f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0208 	orr.w	r2, r2, #8
 8004a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0204 	bic.w	r2, r2, #4
 8004a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69d9      	ldr	r1, [r3, #28]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	61da      	str	r2, [r3, #28]
      break;
 8004a2c:	e021      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fadf 	bl	8004ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69d9      	ldr	r1, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	021a      	lsls	r2, r3, #8
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	61da      	str	r2, [r3, #28]
      break;
 8004a6e:	e000      	b.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004a70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_ConfigClockSource+0x18>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0b3      	b.n	8004c04 <HAL_TIM_ConfigClockSource+0x180>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad4:	d03e      	beq.n	8004b54 <HAL_TIM_ConfigClockSource+0xd0>
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ada:	f200 8087 	bhi.w	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	f000 8085 	beq.w	8004bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	d87f      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004aec:	2b70      	cmp	r3, #112	; 0x70
 8004aee:	d01a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0xa2>
 8004af0:	2b70      	cmp	r3, #112	; 0x70
 8004af2:	d87b      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d050      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x116>
 8004af8:	2b60      	cmp	r3, #96	; 0x60
 8004afa:	d877      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004afc:	2b50      	cmp	r3, #80	; 0x50
 8004afe:	d03c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xf6>
 8004b00:	2b50      	cmp	r3, #80	; 0x50
 8004b02:	d873      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d058      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x136>
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d86f      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004b0c:	2b30      	cmp	r3, #48	; 0x30
 8004b0e:	d064      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x156>
 8004b10:	2b30      	cmp	r3, #48	; 0x30
 8004b12:	d86b      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d060      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x156>
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d867      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d05c      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x156>
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d05a      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b24:	e062      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f000 fb2a 	bl	800518e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	609a      	str	r2, [r3, #8]
      break;
 8004b52:	e04e      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6899      	ldr	r1, [r3, #8]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f000 fb13 	bl	800518e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b76:	609a      	str	r2, [r3, #8]
      break;
 8004b78:	e03b      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f000 fa8a 	bl	80050a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2150      	movs	r1, #80	; 0x50
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fae1 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004b98:	e02b      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 faa8 	bl	80050fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2160      	movs	r1, #96	; 0x60
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fad1 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e01b      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 fa6a 	bl	80050a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fac1 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e00b      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f000 fab8 	bl	800515a <TIM_ITRx_SetConfig>
        break;
 8004bea:	e002      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a33      	ldr	r2, [pc, #204]	; (8004d34 <TIM_Base_SetConfig+0xe0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a32      	ldr	r2, [pc, #200]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00f      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d00b      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <TIM_Base_SetConfig+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <TIM_Base_SetConfig+0xe0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <TIM_Base_SetConfig+0x82>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00f      	beq.n	8004cd6 <TIM_Base_SetConfig+0x82>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d00b      	beq.n	8004cd6 <TIM_Base_SetConfig+0x82>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <TIM_Base_SetConfig+0x82>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_Base_SetConfig+0x82>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <TIM_Base_SetConfig+0xf0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <TIM_Base_SetConfig+0xe0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0xc8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d103      	bne.n	8004d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	615a      	str	r2, [r3, #20]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <TIM_OC1_SetConfig+0xd8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC1_SetConfig+0x64>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <TIM_OC1_SetConfig+0xdc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10c      	bne.n	8004dc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0308 	bic.w	r3, r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC1_SetConfig+0xd8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_OC1_SetConfig+0x8e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC1_SetConfig+0xdc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d111      	bne.n	8004dfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40013400 	.word	0x40013400

08004e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0210 	bic.w	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <TIM_OC2_SetConfig+0xe0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC2_SetConfig+0x68>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <TIM_OC2_SetConfig+0xe4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10d      	bne.n	8004eac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <TIM_OC2_SetConfig+0xe0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC2_SetConfig+0x94>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <TIM_OC2_SetConfig+0xe4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d113      	bne.n	8004ee4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40013400 	.word	0x40013400

08004f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC3_SetConfig+0x66>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC3_SetConfig+0x92>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40013400 	.word	0x40013400

08004ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	031b      	lsls	r3, r3, #12
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a11      	ldr	r2, [pc, #68]	; (8005098 <TIM_OC4_SetConfig+0xa0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC4_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a10      	ldr	r2, [pc, #64]	; (800509c <TIM_OC4_SetConfig+0xa4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d109      	bne.n	8005074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40013400 	.word	0x40013400

080050a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 030a 	bic.w	r3, r3, #10
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 0210 	bic.w	r2, r3, #16
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	031b      	lsls	r3, r3, #12
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	f043 0307 	orr.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	021a      	lsls	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	609a      	str	r2, [r3, #8]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	2201      	movs	r2, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	401a      	ands	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005228:	2302      	movs	r3, #2
 800522a:	e050      	b.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d00e      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00

080052ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e03d      	b.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e03f      	b.n	8005444 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc ffe3 	bl	80023a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2224      	movs	r2, #36	; 0x24
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fc84 	bl	8005d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800542a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b20      	cmp	r3, #32
 800546a:	d17c      	bne.n	8005566 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_Transmit+0x2c>
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e075      	b.n	8005568 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit+0x3e>
 8005486:	2302      	movs	r3, #2
 8005488:	e06e      	b.n	8005568 <HAL_UART_Transmit+0x11c>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2221      	movs	r2, #33	; 0x21
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a0:	f7fd f8a2 	bl	80025e8 <HAL_GetTick>
 80054a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	d108      	bne.n	80054ce <HAL_UART_Transmit+0x82>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e003      	b.n	80054d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054de:	e02a      	b.n	8005536 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fa37 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e036      	b.n	8005568 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800550e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	3302      	adds	r3, #2
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e007      	b.n	8005528 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1cf      	bne.n	80054e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2200      	movs	r2, #0
 8005548:	2140      	movs	r1, #64	; 0x40
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fa07 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b20      	cmp	r3, #32
 8005588:	d11d      	bne.n	80055c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_UART_Receive_IT+0x26>
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e016      	b.n	80055c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Receive_IT+0x38>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e00f      	b.n	80055c8 <HAL_UART_Receive_IT+0x58>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	461a      	mov	r2, r3
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fa18 	bl	80059f2 <UART_Start_Receive_IT>
 80055c2:	4603      	mov	r3, r0
 80055c4:	e000      	b.n	80055c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
  }
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_UART_IRQHandler+0x52>
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fac9 	bl	8005bb2 <UART_Receive_IT>
      return;
 8005620:	e17b      	b.n	800591a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80b1 	beq.w	800578c <HAL_UART_IRQHandler+0x1bc>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_UART_IRQHandler+0x70>
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80a6 	beq.w	800578c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_UART_IRQHandler+0x90>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	f043 0201 	orr.w	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_UART_IRQHandler+0xb0>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f043 0202 	orr.w	r2, r3, #2
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_UART_IRQHandler+0xd0>
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	f043 0204 	orr.w	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00f      	beq.n	80056ca <HAL_UART_IRQHandler+0xfa>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_UART_IRQHandler+0xee>
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f043 0208 	orr.w	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 811e 	beq.w	8005910 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_UART_IRQHandler+0x11e>
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fa62 	bl	8005bb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <HAL_UART_IRQHandler+0x146>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d031      	beq.n	800577a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9a4 	bl	8005a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d023      	beq.n	8005772 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d013      	beq.n	800576a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4a76      	ldr	r2, [pc, #472]	; (8005920 <HAL_UART_IRQHandler+0x350>)
 8005748:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd fae4 	bl	8002d1c <HAL_DMA_Abort_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	e00e      	b.n	8005788 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8e3 	bl	8005936 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	e00a      	b.n	8005788 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8df 	bl	8005936 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	e006      	b.n	8005788 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f8db 	bl	8005936 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005786:	e0c3      	b.n	8005910 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	bf00      	nop
    return;
 800578a:	e0c1      	b.n	8005910 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 80a1 	bne.w	80058d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 809b 	beq.w	80058d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8095 	beq.w	80058d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04e      	beq.n	8005870 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80057dc:	8a3b      	ldrh	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8098 	beq.w	8005914 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057e8:	8a3a      	ldrh	r2, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	f080 8092 	bcs.w	8005914 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8a3a      	ldrh	r2, [r7, #16]
 80057f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d02b      	beq.n	8005858 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800580e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0210 	bic.w	r2, r2, #16
 800584c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fa27 	bl	8002ca6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005860:	b29b      	uxth	r3, r3
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	b29b      	uxth	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f86d 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800586e:	e051      	b.n	8005914 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005878:	b29b      	uxth	r3, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d047      	beq.n	8005918 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005888:	8a7b      	ldrh	r3, [r7, #18]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d044      	beq.n	8005918 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800589c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0210 	bic.w	r2, r2, #16
 80058ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058cc:	8a7b      	ldrh	r3, [r7, #18]
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f839 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058d6:	e01f      	b.n	8005918 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_UART_IRQHandler+0x324>
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8f9 	bl	8005ae4 <UART_Transmit_IT>
    return;
 80058f2:	e012      	b.n	800591a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00d      	beq.n	800591a <HAL_UART_IRQHandler+0x34a>
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f93a 	bl	8005b82 <UART_EndTransmit_IT>
    return;
 800590e:	e004      	b.n	800591a <HAL_UART_IRQHandler+0x34a>
    return;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <HAL_UART_IRQHandler+0x34a>
      return;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <HAL_UART_IRQHandler+0x34a>
      return;
 8005918:	bf00      	nop
  }
}
 800591a:	3728      	adds	r7, #40	; 0x28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	08005abd 	.word	0x08005abd

08005924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	e02c      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d028      	beq.n	80059ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x30>
 800597e:	f7fc fe33 	bl	80025e8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	429a      	cmp	r2, r3
 800598c:	d21d      	bcs.n	80059ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800599c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e00f      	b.n	80059ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d0c3      	beq.n	8005970 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	4613      	mov	r3, r2
 80059fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2222      	movs	r2, #34	; 0x22
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a36:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0220 	orr.w	r2, r2, #32
 8005a56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d107      	bne.n	8005aa4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0210 	bic.w	r2, r2, #16
 8005aa2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7ff ff2d 	bl	8005936 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b21      	cmp	r3, #33	; 0x21
 8005af6:	d13e      	bne.n	8005b76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b00:	d114      	bne.n	8005b2c <UART_Transmit_IT+0x48>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d110      	bne.n	8005b2c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	1c9a      	adds	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]
 8005b2a:	e008      	b.n	8005b3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6211      	str	r1, [r2, #32]
 8005b36:	781a      	ldrb	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e000      	b.n	8005b78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
  }
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff febe 	bl	8005924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	f040 8099 	bne.w	8005cfa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d117      	bne.n	8005c02 <UART_Receive_IT+0x50>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d113      	bne.n	8005c02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005c00:	e026      	b.n	8005c50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c14:	d007      	beq.n	8005c26 <UART_Receive_IT+0x74>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <UART_Receive_IT+0x82>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	e008      	b.n	8005c46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d148      	bne.n	8005cf6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0220 	bic.w	r2, r2, #32
 8005c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d123      	bne.n	8005cec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0210 	bic.w	r2, r2, #16
 8005cb8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d10a      	bne.n	8005cde <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fe2f 	bl	8005948 <HAL_UARTEx_RxEventCallback>
 8005cea:	e002      	b.n	8005cf2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7fb fc83 	bl	80015f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e002      	b.n	8005cfc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d3e:	f023 030c 	bic.w	r3, r3, #12
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	; (8005e18 <UART_SetConfig+0x114>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d103      	bne.n	8005d74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fd ffea 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	e002      	b.n	8005d7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d74:	f7fd ffd2 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005d78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009a      	lsls	r2, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <UART_SetConfig+0x118>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	0119      	lsls	r1, r3, #4
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009a      	lsls	r2, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005db0:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <UART_SetConfig+0x118>)
 8005db2:	fba3 0302 	umull	r0, r3, r3, r2
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	2064      	movs	r0, #100	; 0x64
 8005dba:	fb00 f303 	mul.w	r3, r0, r3
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	3332      	adds	r3, #50	; 0x32
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <UART_SetConfig+0x118>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd0:	4419      	add	r1, r3
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009a      	lsls	r2, r3, #2
 8005ddc:	441a      	add	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <UART_SetConfig+0x118>)
 8005dea:	fba3 0302 	umull	r0, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	2064      	movs	r0, #100	; 0x64
 8005df2:	fb00 f303 	mul.w	r3, r0, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	3332      	adds	r3, #50	; 0x32
 8005dfc:	4a07      	ldr	r2, [pc, #28]	; (8005e1c <UART_SetConfig+0x118>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f003 020f 	and.w	r2, r3, #15
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40013800 	.word	0x40013800
 8005e1c:	51eb851f 	.word	0x51eb851f

08005e20 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6892      	ldr	r2, [r2, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d103      	bne.n	8005e9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1e5a      	subs	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec2:	4b51      	ldr	r3, [pc, #324]	; (8006008 <xTaskIncrementTick+0x150>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 808d 	bne.w	8005fe6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ecc:	4b4f      	ldr	r3, [pc, #316]	; (800600c <xTaskIncrementTick+0x154>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ed4:	4a4d      	ldr	r2, [pc, #308]	; (800600c <xTaskIncrementTick+0x154>)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d120      	bne.n	8005f22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ee0:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <xTaskIncrementTick+0x158>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <xTaskIncrementTick+0x46>
 8005f00:	4b43      	ldr	r3, [pc, #268]	; (8006010 <xTaskIncrementTick+0x158>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	4b43      	ldr	r3, [pc, #268]	; (8006014 <xTaskIncrementTick+0x15c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a41      	ldr	r2, [pc, #260]	; (8006010 <xTaskIncrementTick+0x158>)
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4a41      	ldr	r2, [pc, #260]	; (8006014 <xTaskIncrementTick+0x15c>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	4b40      	ldr	r3, [pc, #256]	; (8006018 <xTaskIncrementTick+0x160>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4a3f      	ldr	r2, [pc, #252]	; (8006018 <xTaskIncrementTick+0x160>)
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	f000 f8e3 	bl	80060e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f22:	4b3e      	ldr	r3, [pc, #248]	; (800601c <xTaskIncrementTick+0x164>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d34d      	bcc.n	8005fc8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f2c:	4b38      	ldr	r3, [pc, #224]	; (8006010 <xTaskIncrementTick+0x158>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <xTaskIncrementTick+0x82>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xTaskIncrementTick+0x84>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f40:	4b36      	ldr	r3, [pc, #216]	; (800601c <xTaskIncrementTick+0x164>)
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295
 8005f46:	601a      	str	r2, [r3, #0]
					break;
 8005f48:	e03e      	b.n	8005fc8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <xTaskIncrementTick+0x158>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d203      	bcs.n	8005f6a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f62:	4a2e      	ldr	r2, [pc, #184]	; (800601c <xTaskIncrementTick+0x164>)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6013      	str	r3, [r2, #0]
						break;
 8005f68:	e02e      	b.n	8005fc8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff ff79 	bl	8005e66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff ff70 	bl	8005e66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <xTaskIncrementTick+0x168>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	4a22      	ldr	r2, [pc, #136]	; (8006020 <xTaskIncrementTick+0x168>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	; (8006024 <xTaskIncrementTick+0x16c>)
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7ff ff36 	bl	8005e20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <xTaskIncrementTick+0x170>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3b4      	bcc.n	8005f2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc6:	e7b1      	b.n	8005f2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fc8:	4b17      	ldr	r3, [pc, #92]	; (8006028 <xTaskIncrementTick+0x170>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	4915      	ldr	r1, [pc, #84]	; (8006024 <xTaskIncrementTick+0x16c>)
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d907      	bls.n	8005ff0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e004      	b.n	8005ff0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <xTaskIncrementTick+0x174>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	4a0f      	ldr	r2, [pc, #60]	; (800602c <xTaskIncrementTick+0x174>)
 8005fee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <xTaskIncrementTick+0x178>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ffc:	697b      	ldr	r3, [r7, #20]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000b00 	.word	0x20000b00
 800600c:	20000ae4 	.word	0x20000ae4
 8006010:	20000adc 	.word	0x20000adc
 8006014:	20000ae0 	.word	0x20000ae0
 8006018:	20000af8 	.word	0x20000af8
 800601c:	20000afc 	.word	0x20000afc
 8006020:	20000ae8 	.word	0x20000ae8
 8006024:	20000a50 	.word	0x20000a50
 8006028:	20000a4c 	.word	0x20000a4c
 800602c:	20000af0 	.word	0x20000af0
 8006030:	20000af4 	.word	0x20000af4

08006034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800603a:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <vTaskSwitchContext+0xa0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006042:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <vTaskSwitchContext+0xa4>)
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006048:	e03f      	b.n	80060ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800604a:	4b23      	ldr	r3, [pc, #140]	; (80060d8 <vTaskSwitchContext+0xa4>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006050:	4b22      	ldr	r3, [pc, #136]	; (80060dc <vTaskSwitchContext+0xa8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	fab3 f383 	clz	r3, r3
 800605c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	f1c3 031f 	rsb	r3, r3, #31
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	491e      	ldr	r1, [pc, #120]	; (80060e0 <vTaskSwitchContext+0xac>)
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <vTaskSwitchContext+0x5c>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	607b      	str	r3, [r7, #4]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <vTaskSwitchContext+0x5a>
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <vTaskSwitchContext+0xac>)
 800609c:	4413      	add	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3308      	adds	r3, #8
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d104      	bne.n	80060c0 <vTaskSwitchContext+0x8c>
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <vTaskSwitchContext+0xb0>)
 80060c8:	6013      	str	r3, [r2, #0]
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr
 80060d4:	20000b00 	.word	0x20000b00
 80060d8:	20000af4 	.word	0x20000af4
 80060dc:	20000ae8 	.word	0x20000ae8
 80060e0:	20000a50 	.word	0x20000a50
 80060e4:	20000a4c 	.word	0x20000a4c

080060e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <prvResetNextTaskUnblockTime+0x40>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <prvResetNextTaskUnblockTime+0x14>
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <prvResetNextTaskUnblockTime+0x16>
 80060fc:	2300      	movs	r3, #0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvResetNextTaskUnblockTime+0x44>)
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800610a:	e008      	b.n	800611e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <prvResetNextTaskUnblockTime+0x40>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvResetNextTaskUnblockTime+0x44>)
 800611c:	6013      	str	r3, [r2, #0]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	20000adc 	.word	0x20000adc
 800612c:	20000afc 	.word	0x20000afc

08006130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <xTaskGetSchedulerState+0x34>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800613e:	2301      	movs	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	e008      	b.n	8006156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <xTaskGetSchedulerState+0x38>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800614c:	2302      	movs	r3, #2
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	e001      	b.n	8006156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006156:	687b      	ldr	r3, [r7, #4]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000aec 	.word	0x20000aec
 8006168:	20000b00 	.word	0x20000b00
 800616c:	00000000 	.word	0x00000000

08006170 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	f04e 0e0d 	orr.w	lr, lr, #13
 800618e:	4770      	bx	lr

08006190 <pxCurrentTCBConst2>:
 8006190:	20000a4c 	.word	0x20000a4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
	...

080061a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061a0:	f3ef 8009 	mrs	r0, PSP
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <pxCurrentTCBConst>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061b0:	6010      	str	r0, [r2, #0]
 80061b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061ba:	f380 8811 	msr	BASEPRI, r0
 80061be:	f7ff ff39 	bl	8006034 <vTaskSwitchContext>
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8811 	msr	BASEPRI, r0
 80061ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	6808      	ldr	r0, [r1, #0]
 80061d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061d6:	f380 8809 	msr	PSP, r0
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	4770      	bx	lr

080061e0 <pxCurrentTCBConst>:
 80061e0:	20000a4c 	.word	0x20000a4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	607b      	str	r3, [r7, #4]
}
 8006200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006202:	f7ff fe59 	bl	8005eb8 <xTaskIncrementTick>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <xPortSysTickHandler+0x40>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800621e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <atoi>:
 800622c:	220a      	movs	r2, #10
 800622e:	2100      	movs	r1, #0
 8006230:	f001 bdbe 	b.w	8007db0 <strtol>

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	; (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000500 	.word	0x20000500

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	2600      	movs	r6, #0
 8006244:	4d0c      	ldr	r5, [pc, #48]	; (8006278 <__libc_init_array+0x38>)
 8006246:	4c0d      	ldr	r4, [pc, #52]	; (800627c <__libc_init_array+0x3c>)
 8006248:	1b64      	subs	r4, r4, r5
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	42a6      	cmp	r6, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	f004 fcb8 	bl	800abc4 <_init>
 8006254:	2600      	movs	r6, #0
 8006256:	4d0a      	ldr	r5, [pc, #40]	; (8006280 <__libc_init_array+0x40>)
 8006258:	4c0a      	ldr	r4, [pc, #40]	; (8006284 <__libc_init_array+0x44>)
 800625a:	1b64      	subs	r4, r4, r5
 800625c:	10a4      	asrs	r4, r4, #2
 800625e:	42a6      	cmp	r6, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f855 3b04 	ldr.w	r3, [r5], #4
 8006268:	4798      	blx	r3
 800626a:	3601      	adds	r6, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006272:	4798      	blx	r3
 8006274:	3601      	adds	r6, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	0800b218 	.word	0x0800b218
 800627c:	0800b218 	.word	0x0800b218
 8006280:	0800b218 	.word	0x0800b218
 8006284:	0800b21c 	.word	0x0800b21c

08006288 <memcpy>:
 8006288:	440a      	add	r2, r1
 800628a:	4291      	cmp	r1, r2
 800628c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006290:	d100      	bne.n	8006294 <memcpy+0xc>
 8006292:	4770      	bx	lr
 8006294:	b510      	push	{r4, lr}
 8006296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800629a:	4291      	cmp	r1, r2
 800629c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a0:	d1f9      	bne.n	8006296 <memcpy+0xe>
 80062a2:	bd10      	pop	{r4, pc}

080062a4 <memset>:
 80062a4:	4603      	mov	r3, r0
 80062a6:	4402      	add	r2, r0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	f803 1b01 	strb.w	r1, [r3], #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <__cvt>:
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ba:	461f      	mov	r7, r3
 80062bc:	bfbb      	ittet	lt
 80062be:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80062c2:	461f      	movlt	r7, r3
 80062c4:	2300      	movge	r3, #0
 80062c6:	232d      	movlt	r3, #45	; 0x2d
 80062c8:	b088      	sub	sp, #32
 80062ca:	4614      	mov	r4, r2
 80062cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80062d0:	7013      	strb	r3, [r2, #0]
 80062d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80062d8:	f023 0820 	bic.w	r8, r3, #32
 80062dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062e0:	d005      	beq.n	80062ee <__cvt+0x3a>
 80062e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062e6:	d100      	bne.n	80062ea <__cvt+0x36>
 80062e8:	3501      	adds	r5, #1
 80062ea:	2302      	movs	r3, #2
 80062ec:	e000      	b.n	80062f0 <__cvt+0x3c>
 80062ee:	2303      	movs	r3, #3
 80062f0:	aa07      	add	r2, sp, #28
 80062f2:	9204      	str	r2, [sp, #16]
 80062f4:	aa06      	add	r2, sp, #24
 80062f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062fa:	e9cd 3500 	strd	r3, r5, [sp]
 80062fe:	4622      	mov	r2, r4
 8006300:	463b      	mov	r3, r7
 8006302:	f001 fec9 	bl	8008098 <_dtoa_r>
 8006306:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800630a:	4606      	mov	r6, r0
 800630c:	d102      	bne.n	8006314 <__cvt+0x60>
 800630e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006310:	07db      	lsls	r3, r3, #31
 8006312:	d522      	bpl.n	800635a <__cvt+0xa6>
 8006314:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006318:	eb06 0905 	add.w	r9, r6, r5
 800631c:	d110      	bne.n	8006340 <__cvt+0x8c>
 800631e:	7833      	ldrb	r3, [r6, #0]
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d10a      	bne.n	800633a <__cvt+0x86>
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	4620      	mov	r0, r4
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa fbb6 	bl	8000a9c <__aeabi_dcmpeq>
 8006330:	b918      	cbnz	r0, 800633a <__cvt+0x86>
 8006332:	f1c5 0501 	rsb	r5, r5, #1
 8006336:	f8ca 5000 	str.w	r5, [sl]
 800633a:	f8da 3000 	ldr.w	r3, [sl]
 800633e:	4499      	add	r9, r3
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	4620      	mov	r0, r4
 8006346:	4639      	mov	r1, r7
 8006348:	f7fa fba8 	bl	8000a9c <__aeabi_dcmpeq>
 800634c:	b108      	cbz	r0, 8006352 <__cvt+0x9e>
 800634e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006352:	2230      	movs	r2, #48	; 0x30
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	454b      	cmp	r3, r9
 8006358:	d307      	bcc.n	800636a <__cvt+0xb6>
 800635a:	4630      	mov	r0, r6
 800635c:	9b07      	ldr	r3, [sp, #28]
 800635e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006360:	1b9b      	subs	r3, r3, r6
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	b008      	add	sp, #32
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	9107      	str	r1, [sp, #28]
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e7f0      	b.n	8006354 <__cvt+0xa0>

08006372 <__exponent>:
 8006372:	4603      	mov	r3, r0
 8006374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006376:	2900      	cmp	r1, #0
 8006378:	f803 2b02 	strb.w	r2, [r3], #2
 800637c:	bfb6      	itet	lt
 800637e:	222d      	movlt	r2, #45	; 0x2d
 8006380:	222b      	movge	r2, #43	; 0x2b
 8006382:	4249      	neglt	r1, r1
 8006384:	2909      	cmp	r1, #9
 8006386:	7042      	strb	r2, [r0, #1]
 8006388:	dd2b      	ble.n	80063e2 <__exponent+0x70>
 800638a:	f10d 0407 	add.w	r4, sp, #7
 800638e:	46a4      	mov	ip, r4
 8006390:	270a      	movs	r7, #10
 8006392:	fb91 f6f7 	sdiv	r6, r1, r7
 8006396:	460a      	mov	r2, r1
 8006398:	46a6      	mov	lr, r4
 800639a:	fb07 1516 	mls	r5, r7, r6, r1
 800639e:	2a63      	cmp	r2, #99	; 0x63
 80063a0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80063a4:	4631      	mov	r1, r6
 80063a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80063aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063ae:	dcf0      	bgt.n	8006392 <__exponent+0x20>
 80063b0:	3130      	adds	r1, #48	; 0x30
 80063b2:	f1ae 0502 	sub.w	r5, lr, #2
 80063b6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063ba:	4629      	mov	r1, r5
 80063bc:	1c44      	adds	r4, r0, #1
 80063be:	4561      	cmp	r1, ip
 80063c0:	d30a      	bcc.n	80063d8 <__exponent+0x66>
 80063c2:	f10d 0209 	add.w	r2, sp, #9
 80063c6:	eba2 020e 	sub.w	r2, r2, lr
 80063ca:	4565      	cmp	r5, ip
 80063cc:	bf88      	it	hi
 80063ce:	2200      	movhi	r2, #0
 80063d0:	4413      	add	r3, r2
 80063d2:	1a18      	subs	r0, r3, r0
 80063d4:	b003      	add	sp, #12
 80063d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063dc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063e0:	e7ed      	b.n	80063be <__exponent+0x4c>
 80063e2:	2330      	movs	r3, #48	; 0x30
 80063e4:	3130      	adds	r1, #48	; 0x30
 80063e6:	7083      	strb	r3, [r0, #2]
 80063e8:	70c1      	strb	r1, [r0, #3]
 80063ea:	1d03      	adds	r3, r0, #4
 80063ec:	e7f1      	b.n	80063d2 <__exponent+0x60>
	...

080063f0 <_printf_float>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	b091      	sub	sp, #68	; 0x44
 80063f6:	460c      	mov	r4, r1
 80063f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063fc:	4616      	mov	r6, r2
 80063fe:	461f      	mov	r7, r3
 8006400:	4605      	mov	r5, r0
 8006402:	f003 f963 	bl	80096cc <_localeconv_r>
 8006406:	6803      	ldr	r3, [r0, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	9309      	str	r3, [sp, #36]	; 0x24
 800640c:	f7f9 ff1a 	bl	8000244 <strlen>
 8006410:	2300      	movs	r3, #0
 8006412:	930e      	str	r3, [sp, #56]	; 0x38
 8006414:	f8d8 3000 	ldr.w	r3, [r8]
 8006418:	900a      	str	r0, [sp, #40]	; 0x28
 800641a:	3307      	adds	r3, #7
 800641c:	f023 0307 	bic.w	r3, r3, #7
 8006420:	f103 0208 	add.w	r2, r3, #8
 8006424:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006428:	f8d4 b000 	ldr.w	fp, [r4]
 800642c:	f8c8 2000 	str.w	r2, [r8]
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006438:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800643c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006440:	930b      	str	r3, [sp, #44]	; 0x2c
 8006442:	f04f 32ff 	mov.w	r2, #4294967295
 8006446:	4640      	mov	r0, r8
 8006448:	4b9c      	ldr	r3, [pc, #624]	; (80066bc <_printf_float+0x2cc>)
 800644a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800644c:	f7fa fb58 	bl	8000b00 <__aeabi_dcmpun>
 8006450:	bb70      	cbnz	r0, 80064b0 <_printf_float+0xc0>
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	4640      	mov	r0, r8
 8006458:	4b98      	ldr	r3, [pc, #608]	; (80066bc <_printf_float+0x2cc>)
 800645a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800645c:	f7fa fb32 	bl	8000ac4 <__aeabi_dcmple>
 8006460:	bb30      	cbnz	r0, 80064b0 <_printf_float+0xc0>
 8006462:	2200      	movs	r2, #0
 8006464:	2300      	movs	r3, #0
 8006466:	4640      	mov	r0, r8
 8006468:	4651      	mov	r1, sl
 800646a:	f7fa fb21 	bl	8000ab0 <__aeabi_dcmplt>
 800646e:	b110      	cbz	r0, 8006476 <_printf_float+0x86>
 8006470:	232d      	movs	r3, #45	; 0x2d
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006476:	4b92      	ldr	r3, [pc, #584]	; (80066c0 <_printf_float+0x2d0>)
 8006478:	4892      	ldr	r0, [pc, #584]	; (80066c4 <_printf_float+0x2d4>)
 800647a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800647e:	bf94      	ite	ls
 8006480:	4698      	movls	r8, r3
 8006482:	4680      	movhi	r8, r0
 8006484:	2303      	movs	r3, #3
 8006486:	f04f 0a00 	mov.w	sl, #0
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	f02b 0304 	bic.w	r3, fp, #4
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	4633      	mov	r3, r6
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	9700      	str	r7, [sp, #0]
 800649a:	aa0f      	add	r2, sp, #60	; 0x3c
 800649c:	f000 f9d4 	bl	8006848 <_printf_common>
 80064a0:	3001      	adds	r0, #1
 80064a2:	f040 8090 	bne.w	80065c6 <_printf_float+0x1d6>
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	b011      	add	sp, #68	; 0x44
 80064ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b0:	4642      	mov	r2, r8
 80064b2:	4653      	mov	r3, sl
 80064b4:	4640      	mov	r0, r8
 80064b6:	4651      	mov	r1, sl
 80064b8:	f7fa fb22 	bl	8000b00 <__aeabi_dcmpun>
 80064bc:	b148      	cbz	r0, 80064d2 <_printf_float+0xe2>
 80064be:	f1ba 0f00 	cmp.w	sl, #0
 80064c2:	bfb8      	it	lt
 80064c4:	232d      	movlt	r3, #45	; 0x2d
 80064c6:	4880      	ldr	r0, [pc, #512]	; (80066c8 <_printf_float+0x2d8>)
 80064c8:	bfb8      	it	lt
 80064ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ce:	4b7f      	ldr	r3, [pc, #508]	; (80066cc <_printf_float+0x2dc>)
 80064d0:	e7d3      	b.n	800647a <_printf_float+0x8a>
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	d142      	bne.n	8006562 <_printf_float+0x172>
 80064dc:	2306      	movs	r3, #6
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	9206      	str	r2, [sp, #24]
 80064e4:	aa0e      	add	r2, sp, #56	; 0x38
 80064e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80064ea:	aa0d      	add	r2, sp, #52	; 0x34
 80064ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80064f0:	9203      	str	r2, [sp, #12]
 80064f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80064f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	4642      	mov	r2, r8
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	4628      	mov	r0, r5
 8006504:	4653      	mov	r3, sl
 8006506:	910b      	str	r1, [sp, #44]	; 0x2c
 8006508:	f7ff fed4 	bl	80062b4 <__cvt>
 800650c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800650e:	4680      	mov	r8, r0
 8006510:	2947      	cmp	r1, #71	; 0x47
 8006512:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006514:	d108      	bne.n	8006528 <_printf_float+0x138>
 8006516:	1cc8      	adds	r0, r1, #3
 8006518:	db02      	blt.n	8006520 <_printf_float+0x130>
 800651a:	6863      	ldr	r3, [r4, #4]
 800651c:	4299      	cmp	r1, r3
 800651e:	dd40      	ble.n	80065a2 <_printf_float+0x1b2>
 8006520:	f1a9 0902 	sub.w	r9, r9, #2
 8006524:	fa5f f989 	uxtb.w	r9, r9
 8006528:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800652c:	d81f      	bhi.n	800656e <_printf_float+0x17e>
 800652e:	464a      	mov	r2, r9
 8006530:	3901      	subs	r1, #1
 8006532:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006536:	910d      	str	r1, [sp, #52]	; 0x34
 8006538:	f7ff ff1b 	bl	8006372 <__exponent>
 800653c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800653e:	4682      	mov	sl, r0
 8006540:	1813      	adds	r3, r2, r0
 8006542:	2a01      	cmp	r2, #1
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	dc02      	bgt.n	800654e <_printf_float+0x15e>
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	07d2      	lsls	r2, r2, #31
 800654c:	d501      	bpl.n	8006552 <_printf_float+0x162>
 800654e:	3301      	adds	r3, #1
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006556:	2b00      	cmp	r3, #0
 8006558:	d09b      	beq.n	8006492 <_printf_float+0xa2>
 800655a:	232d      	movs	r3, #45	; 0x2d
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006560:	e797      	b.n	8006492 <_printf_float+0xa2>
 8006562:	2947      	cmp	r1, #71	; 0x47
 8006564:	d1bc      	bne.n	80064e0 <_printf_float+0xf0>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ba      	bne.n	80064e0 <_printf_float+0xf0>
 800656a:	2301      	movs	r3, #1
 800656c:	e7b7      	b.n	80064de <_printf_float+0xee>
 800656e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006572:	d118      	bne.n	80065a6 <_printf_float+0x1b6>
 8006574:	2900      	cmp	r1, #0
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	dd0b      	ble.n	8006592 <_printf_float+0x1a2>
 800657a:	6121      	str	r1, [r4, #16]
 800657c:	b913      	cbnz	r3, 8006584 <_printf_float+0x194>
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	07d0      	lsls	r0, r2, #31
 8006582:	d502      	bpl.n	800658a <_printf_float+0x19a>
 8006584:	3301      	adds	r3, #1
 8006586:	440b      	add	r3, r1
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	f04f 0a00 	mov.w	sl, #0
 800658e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006590:	e7df      	b.n	8006552 <_printf_float+0x162>
 8006592:	b913      	cbnz	r3, 800659a <_printf_float+0x1aa>
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	07d2      	lsls	r2, r2, #31
 8006598:	d501      	bpl.n	800659e <_printf_float+0x1ae>
 800659a:	3302      	adds	r3, #2
 800659c:	e7f4      	b.n	8006588 <_printf_float+0x198>
 800659e:	2301      	movs	r3, #1
 80065a0:	e7f2      	b.n	8006588 <_printf_float+0x198>
 80065a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80065a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a8:	4299      	cmp	r1, r3
 80065aa:	db05      	blt.n	80065b8 <_printf_float+0x1c8>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	6121      	str	r1, [r4, #16]
 80065b0:	07d8      	lsls	r0, r3, #31
 80065b2:	d5ea      	bpl.n	800658a <_printf_float+0x19a>
 80065b4:	1c4b      	adds	r3, r1, #1
 80065b6:	e7e7      	b.n	8006588 <_printf_float+0x198>
 80065b8:	2900      	cmp	r1, #0
 80065ba:	bfcc      	ite	gt
 80065bc:	2201      	movgt	r2, #1
 80065be:	f1c1 0202 	rsble	r2, r1, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	e7e0      	b.n	8006588 <_printf_float+0x198>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	055a      	lsls	r2, r3, #21
 80065ca:	d407      	bmi.n	80065dc <_printf_float+0x1ec>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	4642      	mov	r2, r8
 80065d0:	4631      	mov	r1, r6
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	d12b      	bne.n	8006632 <_printf_float+0x242>
 80065da:	e764      	b.n	80064a6 <_printf_float+0xb6>
 80065dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065e0:	f240 80dd 	bls.w	800679e <_printf_float+0x3ae>
 80065e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065e8:	2200      	movs	r2, #0
 80065ea:	2300      	movs	r3, #0
 80065ec:	f7fa fa56 	bl	8000a9c <__aeabi_dcmpeq>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d033      	beq.n	800665c <_printf_float+0x26c>
 80065f4:	2301      	movs	r3, #1
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	4a35      	ldr	r2, [pc, #212]	; (80066d0 <_printf_float+0x2e0>)
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	f43f af51 	beq.w	80064a6 <_printf_float+0xb6>
 8006604:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006608:	429a      	cmp	r2, r3
 800660a:	db02      	blt.n	8006612 <_printf_float+0x222>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	07d8      	lsls	r0, r3, #31
 8006610:	d50f      	bpl.n	8006632 <_printf_float+0x242>
 8006612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	f43f af42 	beq.w	80064a6 <_printf_float+0xb6>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	f104 091a 	add.w	r9, r4, #26
 800662a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662c:	3b01      	subs	r3, #1
 800662e:	4543      	cmp	r3, r8
 8006630:	dc09      	bgt.n	8006646 <_printf_float+0x256>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	079b      	lsls	r3, r3, #30
 8006636:	f100 8102 	bmi.w	800683e <_printf_float+0x44e>
 800663a:	68e0      	ldr	r0, [r4, #12]
 800663c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800663e:	4298      	cmp	r0, r3
 8006640:	bfb8      	it	lt
 8006642:	4618      	movlt	r0, r3
 8006644:	e731      	b.n	80064aa <_printf_float+0xba>
 8006646:	2301      	movs	r3, #1
 8006648:	464a      	mov	r2, r9
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f af28 	beq.w	80064a6 <_printf_float+0xb6>
 8006656:	f108 0801 	add.w	r8, r8, #1
 800665a:	e7e6      	b.n	800662a <_printf_float+0x23a>
 800665c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	dc38      	bgt.n	80066d4 <_printf_float+0x2e4>
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <_printf_float+0x2e0>)
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f af1a 	beq.w	80064a6 <_printf_float+0xb6>
 8006672:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006676:	4313      	orrs	r3, r2
 8006678:	d102      	bne.n	8006680 <_printf_float+0x290>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	07d9      	lsls	r1, r3, #31
 800667e:	d5d8      	bpl.n	8006632 <_printf_float+0x242>
 8006680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af0b 	beq.w	80064a6 <_printf_float+0xb6>
 8006690:	f04f 0900 	mov.w	r9, #0
 8006694:	f104 0a1a 	add.w	sl, r4, #26
 8006698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800669a:	425b      	negs	r3, r3
 800669c:	454b      	cmp	r3, r9
 800669e:	dc01      	bgt.n	80066a4 <_printf_float+0x2b4>
 80066a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a2:	e794      	b.n	80065ce <_printf_float+0x1de>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f aef9 	beq.w	80064a6 <_printf_float+0xb6>
 80066b4:	f109 0901 	add.w	r9, r9, #1
 80066b8:	e7ee      	b.n	8006698 <_printf_float+0x2a8>
 80066ba:	bf00      	nop
 80066bc:	7fefffff 	.word	0x7fefffff
 80066c0:	0800ad10 	.word	0x0800ad10
 80066c4:	0800ad14 	.word	0x0800ad14
 80066c8:	0800ad1c 	.word	0x0800ad1c
 80066cc:	0800ad18 	.word	0x0800ad18
 80066d0:	0800ad20 	.word	0x0800ad20
 80066d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d8:	429a      	cmp	r2, r3
 80066da:	bfa8      	it	ge
 80066dc:	461a      	movge	r2, r3
 80066de:	2a00      	cmp	r2, #0
 80066e0:	4691      	mov	r9, r2
 80066e2:	dc37      	bgt.n	8006754 <_printf_float+0x364>
 80066e4:	f04f 0b00 	mov.w	fp, #0
 80066e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ec:	f104 021a 	add.w	r2, r4, #26
 80066f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066f4:	ebaa 0309 	sub.w	r3, sl, r9
 80066f8:	455b      	cmp	r3, fp
 80066fa:	dc33      	bgt.n	8006764 <_printf_float+0x374>
 80066fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006700:	429a      	cmp	r2, r3
 8006702:	db3b      	blt.n	800677c <_printf_float+0x38c>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	07da      	lsls	r2, r3, #31
 8006708:	d438      	bmi.n	800677c <_printf_float+0x38c>
 800670a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800670e:	eba3 020a 	sub.w	r2, r3, sl
 8006712:	eba3 0901 	sub.w	r9, r3, r1
 8006716:	4591      	cmp	r9, r2
 8006718:	bfa8      	it	ge
 800671a:	4691      	movge	r9, r2
 800671c:	f1b9 0f00 	cmp.w	r9, #0
 8006720:	dc34      	bgt.n	800678c <_printf_float+0x39c>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800672a:	f104 0a1a 	add.w	sl, r4, #26
 800672e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	eba3 0309 	sub.w	r3, r3, r9
 8006738:	4543      	cmp	r3, r8
 800673a:	f77f af7a 	ble.w	8006632 <_printf_float+0x242>
 800673e:	2301      	movs	r3, #1
 8006740:	4652      	mov	r2, sl
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f aeac 	beq.w	80064a6 <_printf_float+0xb6>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	e7ec      	b.n	800672e <_printf_float+0x33e>
 8006754:	4613      	mov	r3, r2
 8006756:	4631      	mov	r1, r6
 8006758:	4642      	mov	r2, r8
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	d1c0      	bne.n	80066e4 <_printf_float+0x2f4>
 8006762:	e6a0      	b.n	80064a6 <_printf_float+0xb6>
 8006764:	2301      	movs	r3, #1
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	920b      	str	r2, [sp, #44]	; 0x2c
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f ae99 	beq.w	80064a6 <_printf_float+0xb6>
 8006774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006776:	f10b 0b01 	add.w	fp, fp, #1
 800677a:	e7b9      	b.n	80066f0 <_printf_float+0x300>
 800677c:	4631      	mov	r1, r6
 800677e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	d1bf      	bne.n	800670a <_printf_float+0x31a>
 800678a:	e68c      	b.n	80064a6 <_printf_float+0xb6>
 800678c:	464b      	mov	r3, r9
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	eb08 020a 	add.w	r2, r8, sl
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	d1c2      	bne.n	8006722 <_printf_float+0x332>
 800679c:	e683      	b.n	80064a6 <_printf_float+0xb6>
 800679e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067a0:	2a01      	cmp	r2, #1
 80067a2:	dc01      	bgt.n	80067a8 <_printf_float+0x3b8>
 80067a4:	07db      	lsls	r3, r3, #31
 80067a6:	d537      	bpl.n	8006818 <_printf_float+0x428>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4642      	mov	r2, r8
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f ae77 	beq.w	80064a6 <_printf_float+0xb6>
 80067b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f ae6f 	beq.w	80064a6 <_printf_float+0xb6>
 80067c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067cc:	2200      	movs	r2, #0
 80067ce:	2300      	movs	r3, #0
 80067d0:	f7fa f964 	bl	8000a9c <__aeabi_dcmpeq>
 80067d4:	b9d8      	cbnz	r0, 800680e <_printf_float+0x41e>
 80067d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067d8:	f108 0201 	add.w	r2, r8, #1
 80067dc:	3b01      	subs	r3, #1
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	d10e      	bne.n	8006806 <_printf_float+0x416>
 80067e8:	e65d      	b.n	80064a6 <_printf_float+0xb6>
 80067ea:	2301      	movs	r3, #1
 80067ec:	464a      	mov	r2, r9
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	f43f ae56 	beq.w	80064a6 <_printf_float+0xb6>
 80067fa:	f108 0801 	add.w	r8, r8, #1
 80067fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006800:	3b01      	subs	r3, #1
 8006802:	4543      	cmp	r3, r8
 8006804:	dcf1      	bgt.n	80067ea <_printf_float+0x3fa>
 8006806:	4653      	mov	r3, sl
 8006808:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800680c:	e6e0      	b.n	80065d0 <_printf_float+0x1e0>
 800680e:	f04f 0800 	mov.w	r8, #0
 8006812:	f104 091a 	add.w	r9, r4, #26
 8006816:	e7f2      	b.n	80067fe <_printf_float+0x40e>
 8006818:	2301      	movs	r3, #1
 800681a:	4642      	mov	r2, r8
 800681c:	e7df      	b.n	80067de <_printf_float+0x3ee>
 800681e:	2301      	movs	r3, #1
 8006820:	464a      	mov	r2, r9
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f ae3c 	beq.w	80064a6 <_printf_float+0xb6>
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006836:	1a5b      	subs	r3, r3, r1
 8006838:	4543      	cmp	r3, r8
 800683a:	dcf0      	bgt.n	800681e <_printf_float+0x42e>
 800683c:	e6fd      	b.n	800663a <_printf_float+0x24a>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0919 	add.w	r9, r4, #25
 8006846:	e7f4      	b.n	8006832 <_printf_float+0x442>

08006848 <_printf_common>:
 8006848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	4616      	mov	r6, r2
 800684e:	4699      	mov	r9, r3
 8006850:	688a      	ldr	r2, [r1, #8]
 8006852:	690b      	ldr	r3, [r1, #16]
 8006854:	4607      	mov	r7, r0
 8006856:	4293      	cmp	r3, r2
 8006858:	bfb8      	it	lt
 800685a:	4613      	movlt	r3, r2
 800685c:	6033      	str	r3, [r6, #0]
 800685e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006862:	460c      	mov	r4, r1
 8006864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006868:	b10a      	cbz	r2, 800686e <_printf_common+0x26>
 800686a:	3301      	adds	r3, #1
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	0699      	lsls	r1, r3, #26
 8006872:	bf42      	ittt	mi
 8006874:	6833      	ldrmi	r3, [r6, #0]
 8006876:	3302      	addmi	r3, #2
 8006878:	6033      	strmi	r3, [r6, #0]
 800687a:	6825      	ldr	r5, [r4, #0]
 800687c:	f015 0506 	ands.w	r5, r5, #6
 8006880:	d106      	bne.n	8006890 <_printf_common+0x48>
 8006882:	f104 0a19 	add.w	sl, r4, #25
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	6832      	ldr	r2, [r6, #0]
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	42ab      	cmp	r3, r5
 800688e:	dc28      	bgt.n	80068e2 <_printf_common+0x9a>
 8006890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006894:	1e13      	subs	r3, r2, #0
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	bf18      	it	ne
 800689a:	2301      	movne	r3, #1
 800689c:	0692      	lsls	r2, r2, #26
 800689e:	d42d      	bmi.n	80068fc <_printf_common+0xb4>
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a8:	47c0      	blx	r8
 80068aa:	3001      	adds	r0, #1
 80068ac:	d020      	beq.n	80068f0 <_printf_common+0xa8>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	68e5      	ldr	r5, [r4, #12]
 80068b2:	f003 0306 	and.w	r3, r3, #6
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	bf18      	it	ne
 80068ba:	2500      	movne	r5, #0
 80068bc:	6832      	ldr	r2, [r6, #0]
 80068be:	f04f 0600 	mov.w	r6, #0
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	bf08      	it	eq
 80068c6:	1aad      	subeq	r5, r5, r2
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	bf08      	it	eq
 80068cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bfc4      	itt	gt
 80068d4:	1a9b      	subgt	r3, r3, r2
 80068d6:	18ed      	addgt	r5, r5, r3
 80068d8:	341a      	adds	r4, #26
 80068da:	42b5      	cmp	r5, r6
 80068dc:	d11a      	bne.n	8006914 <_printf_common+0xcc>
 80068de:	2000      	movs	r0, #0
 80068e0:	e008      	b.n	80068f4 <_printf_common+0xac>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4652      	mov	r2, sl
 80068e6:	4649      	mov	r1, r9
 80068e8:	4638      	mov	r0, r7
 80068ea:	47c0      	blx	r8
 80068ec:	3001      	adds	r0, #1
 80068ee:	d103      	bne.n	80068f8 <_printf_common+0xb0>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	3501      	adds	r5, #1
 80068fa:	e7c4      	b.n	8006886 <_printf_common+0x3e>
 80068fc:	2030      	movs	r0, #48	; 0x30
 80068fe:	18e1      	adds	r1, r4, r3
 8006900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800690a:	4422      	add	r2, r4
 800690c:	3302      	adds	r3, #2
 800690e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006912:	e7c5      	b.n	80068a0 <_printf_common+0x58>
 8006914:	2301      	movs	r3, #1
 8006916:	4622      	mov	r2, r4
 8006918:	4649      	mov	r1, r9
 800691a:	4638      	mov	r0, r7
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d0e6      	beq.n	80068f0 <_printf_common+0xa8>
 8006922:	3601      	adds	r6, #1
 8006924:	e7d9      	b.n	80068da <_printf_common+0x92>
	...

08006928 <_printf_i>:
 8006928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	7e0f      	ldrb	r7, [r1, #24]
 800692e:	4691      	mov	r9, r2
 8006930:	2f78      	cmp	r7, #120	; 0x78
 8006932:	4680      	mov	r8, r0
 8006934:	460c      	mov	r4, r1
 8006936:	469a      	mov	sl, r3
 8006938:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800693a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800693e:	d807      	bhi.n	8006950 <_printf_i+0x28>
 8006940:	2f62      	cmp	r7, #98	; 0x62
 8006942:	d80a      	bhi.n	800695a <_printf_i+0x32>
 8006944:	2f00      	cmp	r7, #0
 8006946:	f000 80d9 	beq.w	8006afc <_printf_i+0x1d4>
 800694a:	2f58      	cmp	r7, #88	; 0x58
 800694c:	f000 80a4 	beq.w	8006a98 <_printf_i+0x170>
 8006950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006958:	e03a      	b.n	80069d0 <_printf_i+0xa8>
 800695a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800695e:	2b15      	cmp	r3, #21
 8006960:	d8f6      	bhi.n	8006950 <_printf_i+0x28>
 8006962:	a101      	add	r1, pc, #4	; (adr r1, 8006968 <_printf_i+0x40>)
 8006964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069d5 	.word	0x080069d5
 8006970:	08006951 	.word	0x08006951
 8006974:	08006951 	.word	0x08006951
 8006978:	08006951 	.word	0x08006951
 800697c:	08006951 	.word	0x08006951
 8006980:	080069d5 	.word	0x080069d5
 8006984:	08006951 	.word	0x08006951
 8006988:	08006951 	.word	0x08006951
 800698c:	08006951 	.word	0x08006951
 8006990:	08006951 	.word	0x08006951
 8006994:	08006ae3 	.word	0x08006ae3
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006ac5 	.word	0x08006ac5
 80069a0:	08006951 	.word	0x08006951
 80069a4:	08006951 	.word	0x08006951
 80069a8:	08006b05 	.word	0x08006b05
 80069ac:	08006951 	.word	0x08006951
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006951 	.word	0x08006951
 80069b8:	08006951 	.word	0x08006951
 80069bc:	08006acd 	.word	0x08006acd
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	602a      	str	r2, [r5, #0]
 80069c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0a4      	b.n	8006b1e <_printf_i+0x1f6>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	6829      	ldr	r1, [r5, #0]
 80069d8:	0606      	lsls	r6, r0, #24
 80069da:	f101 0304 	add.w	r3, r1, #4
 80069de:	d50a      	bpl.n	80069f6 <_printf_i+0xce>
 80069e0:	680e      	ldr	r6, [r1, #0]
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	da03      	bge.n	80069f0 <_printf_i+0xc8>
 80069e8:	232d      	movs	r3, #45	; 0x2d
 80069ea:	4276      	negs	r6, r6
 80069ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f0:	230a      	movs	r3, #10
 80069f2:	485e      	ldr	r0, [pc, #376]	; (8006b6c <_printf_i+0x244>)
 80069f4:	e019      	b.n	8006a2a <_printf_i+0x102>
 80069f6:	680e      	ldr	r6, [r1, #0]
 80069f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069fc:	602b      	str	r3, [r5, #0]
 80069fe:	bf18      	it	ne
 8006a00:	b236      	sxthne	r6, r6
 8006a02:	e7ef      	b.n	80069e4 <_printf_i+0xbc>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	6820      	ldr	r0, [r4, #0]
 8006a08:	1d19      	adds	r1, r3, #4
 8006a0a:	6029      	str	r1, [r5, #0]
 8006a0c:	0601      	lsls	r1, r0, #24
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0xec>
 8006a10:	681e      	ldr	r6, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <_printf_i+0xf2>
 8006a14:	0646      	lsls	r6, r0, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0xe8>
 8006a18:	881e      	ldrh	r6, [r3, #0]
 8006a1a:	2f6f      	cmp	r7, #111	; 0x6f
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2308      	moveq	r3, #8
 8006a20:	230a      	movne	r3, #10
 8006a22:	4852      	ldr	r0, [pc, #328]	; (8006b6c <_printf_i+0x244>)
 8006a24:	2100      	movs	r1, #0
 8006a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a2a:	6865      	ldr	r5, [r4, #4]
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	bfa8      	it	ge
 8006a30:	6821      	ldrge	r1, [r4, #0]
 8006a32:	60a5      	str	r5, [r4, #8]
 8006a34:	bfa4      	itt	ge
 8006a36:	f021 0104 	bicge.w	r1, r1, #4
 8006a3a:	6021      	strge	r1, [r4, #0]
 8006a3c:	b90e      	cbnz	r6, 8006a42 <_printf_i+0x11a>
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	d04d      	beq.n	8006ade <_printf_i+0x1b6>
 8006a42:	4615      	mov	r5, r2
 8006a44:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a48:	fb03 6711 	mls	r7, r3, r1, r6
 8006a4c:	5dc7      	ldrb	r7, [r0, r7]
 8006a4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a52:	4637      	mov	r7, r6
 8006a54:	42bb      	cmp	r3, r7
 8006a56:	460e      	mov	r6, r1
 8006a58:	d9f4      	bls.n	8006a44 <_printf_i+0x11c>
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d10b      	bne.n	8006a76 <_printf_i+0x14e>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	07de      	lsls	r6, r3, #31
 8006a62:	d508      	bpl.n	8006a76 <_printf_i+0x14e>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	6861      	ldr	r1, [r4, #4]
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	bfde      	ittt	le
 8006a6c:	2330      	movle	r3, #48	; 0x30
 8006a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a76:	1b52      	subs	r2, r2, r5
 8006a78:	6122      	str	r2, [r4, #16]
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4640      	mov	r0, r8
 8006a80:	f8cd a000 	str.w	sl, [sp]
 8006a84:	aa03      	add	r2, sp, #12
 8006a86:	f7ff fedf 	bl	8006848 <_printf_common>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d14c      	bne.n	8006b28 <_printf_i+0x200>
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	b004      	add	sp, #16
 8006a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a98:	4834      	ldr	r0, [pc, #208]	; (8006b6c <_printf_i+0x244>)
 8006a9a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a9e:	6829      	ldr	r1, [r5, #0]
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aa6:	6029      	str	r1, [r5, #0]
 8006aa8:	061d      	lsls	r5, r3, #24
 8006aaa:	d514      	bpl.n	8006ad6 <_printf_i+0x1ae>
 8006aac:	07df      	lsls	r7, r3, #31
 8006aae:	bf44      	itt	mi
 8006ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab4:	6023      	strmi	r3, [r4, #0]
 8006ab6:	b91e      	cbnz	r6, 8006ac0 <_printf_i+0x198>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	f023 0320 	bic.w	r3, r3, #32
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	e7af      	b.n	8006a24 <_printf_i+0xfc>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	f043 0320 	orr.w	r3, r3, #32
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	2378      	movs	r3, #120	; 0x78
 8006ace:	4828      	ldr	r0, [pc, #160]	; (8006b70 <_printf_i+0x248>)
 8006ad0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ad4:	e7e3      	b.n	8006a9e <_printf_i+0x176>
 8006ad6:	0659      	lsls	r1, r3, #25
 8006ad8:	bf48      	it	mi
 8006ada:	b2b6      	uxthmi	r6, r6
 8006adc:	e7e6      	b.n	8006aac <_printf_i+0x184>
 8006ade:	4615      	mov	r5, r2
 8006ae0:	e7bb      	b.n	8006a5a <_printf_i+0x132>
 8006ae2:	682b      	ldr	r3, [r5, #0]
 8006ae4:	6826      	ldr	r6, [r4, #0]
 8006ae6:	1d18      	adds	r0, r3, #4
 8006ae8:	6961      	ldr	r1, [r4, #20]
 8006aea:	6028      	str	r0, [r5, #0]
 8006aec:	0635      	lsls	r5, r6, #24
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	d501      	bpl.n	8006af6 <_printf_i+0x1ce>
 8006af2:	6019      	str	r1, [r3, #0]
 8006af4:	e002      	b.n	8006afc <_printf_i+0x1d4>
 8006af6:	0670      	lsls	r0, r6, #25
 8006af8:	d5fb      	bpl.n	8006af2 <_printf_i+0x1ca>
 8006afa:	8019      	strh	r1, [r3, #0]
 8006afc:	2300      	movs	r3, #0
 8006afe:	4615      	mov	r5, r2
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	e7ba      	b.n	8006a7a <_printf_i+0x152>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	2100      	movs	r1, #0
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	602a      	str	r2, [r5, #0]
 8006b0c:	681d      	ldr	r5, [r3, #0]
 8006b0e:	6862      	ldr	r2, [r4, #4]
 8006b10:	4628      	mov	r0, r5
 8006b12:	f002 fe61 	bl	80097d8 <memchr>
 8006b16:	b108      	cbz	r0, 8006b1c <_printf_i+0x1f4>
 8006b18:	1b40      	subs	r0, r0, r5
 8006b1a:	6060      	str	r0, [r4, #4]
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	6123      	str	r3, [r4, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b26:	e7a8      	b.n	8006a7a <_printf_i+0x152>
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	47d0      	blx	sl
 8006b32:	3001      	adds	r0, #1
 8006b34:	d0ab      	beq.n	8006a8e <_printf_i+0x166>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	079b      	lsls	r3, r3, #30
 8006b3a:	d413      	bmi.n	8006b64 <_printf_i+0x23c>
 8006b3c:	68e0      	ldr	r0, [r4, #12]
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	4298      	cmp	r0, r3
 8006b42:	bfb8      	it	lt
 8006b44:	4618      	movlt	r0, r3
 8006b46:	e7a4      	b.n	8006a92 <_printf_i+0x16a>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	4640      	mov	r0, r8
 8006b50:	47d0      	blx	sl
 8006b52:	3001      	adds	r0, #1
 8006b54:	d09b      	beq.n	8006a8e <_printf_i+0x166>
 8006b56:	3501      	adds	r5, #1
 8006b58:	68e3      	ldr	r3, [r4, #12]
 8006b5a:	9903      	ldr	r1, [sp, #12]
 8006b5c:	1a5b      	subs	r3, r3, r1
 8006b5e:	42ab      	cmp	r3, r5
 8006b60:	dcf2      	bgt.n	8006b48 <_printf_i+0x220>
 8006b62:	e7eb      	b.n	8006b3c <_printf_i+0x214>
 8006b64:	2500      	movs	r5, #0
 8006b66:	f104 0619 	add.w	r6, r4, #25
 8006b6a:	e7f5      	b.n	8006b58 <_printf_i+0x230>
 8006b6c:	0800ad22 	.word	0x0800ad22
 8006b70:	0800ad33 	.word	0x0800ad33

08006b74 <_scanf_float>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	b087      	sub	sp, #28
 8006b7a:	9303      	str	r3, [sp, #12]
 8006b7c:	688b      	ldr	r3, [r1, #8]
 8006b7e:	4617      	mov	r7, r2
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b86:	bf85      	ittet	hi
 8006b88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b8c:	195b      	addhi	r3, r3, r5
 8006b8e:	2300      	movls	r3, #0
 8006b90:	9302      	strhi	r3, [sp, #8]
 8006b92:	bf88      	it	hi
 8006b94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b98:	468b      	mov	fp, r1
 8006b9a:	f04f 0500 	mov.w	r5, #0
 8006b9e:	bf8c      	ite	hi
 8006ba0:	608b      	strhi	r3, [r1, #8]
 8006ba2:	9302      	strls	r3, [sp, #8]
 8006ba4:	680b      	ldr	r3, [r1, #0]
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006bac:	f84b 3b1c 	str.w	r3, [fp], #28
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	465e      	mov	r6, fp
 8006bb4:	46aa      	mov	sl, r5
 8006bb6:	46a9      	mov	r9, r5
 8006bb8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006bbc:	9501      	str	r5, [sp, #4]
 8006bbe:	68a2      	ldr	r2, [r4, #8]
 8006bc0:	b152      	cbz	r2, 8006bd8 <_scanf_float+0x64>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b4e      	cmp	r3, #78	; 0x4e
 8006bc8:	d864      	bhi.n	8006c94 <_scanf_float+0x120>
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d83c      	bhi.n	8006c48 <_scanf_float+0xd4>
 8006bce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bd2:	b2c8      	uxtb	r0, r1
 8006bd4:	280e      	cmp	r0, #14
 8006bd6:	d93a      	bls.n	8006c4e <_scanf_float+0xda>
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	d003      	beq.n	8006be6 <_scanf_float+0x72>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bea:	f1ba 0f01 	cmp.w	sl, #1
 8006bee:	f200 8113 	bhi.w	8006e18 <_scanf_float+0x2a4>
 8006bf2:	455e      	cmp	r6, fp
 8006bf4:	f200 8105 	bhi.w	8006e02 <_scanf_float+0x28e>
 8006bf8:	2501      	movs	r5, #1
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	b007      	add	sp, #28
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006c06:	2a0d      	cmp	r2, #13
 8006c08:	d8e6      	bhi.n	8006bd8 <_scanf_float+0x64>
 8006c0a:	a101      	add	r1, pc, #4	; (adr r1, 8006c10 <_scanf_float+0x9c>)
 8006c0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c10:	08006d4f 	.word	0x08006d4f
 8006c14:	08006bd9 	.word	0x08006bd9
 8006c18:	08006bd9 	.word	0x08006bd9
 8006c1c:	08006bd9 	.word	0x08006bd9
 8006c20:	08006daf 	.word	0x08006daf
 8006c24:	08006d87 	.word	0x08006d87
 8006c28:	08006bd9 	.word	0x08006bd9
 8006c2c:	08006bd9 	.word	0x08006bd9
 8006c30:	08006d5d 	.word	0x08006d5d
 8006c34:	08006bd9 	.word	0x08006bd9
 8006c38:	08006bd9 	.word	0x08006bd9
 8006c3c:	08006bd9 	.word	0x08006bd9
 8006c40:	08006bd9 	.word	0x08006bd9
 8006c44:	08006d15 	.word	0x08006d15
 8006c48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c4c:	e7db      	b.n	8006c06 <_scanf_float+0x92>
 8006c4e:	290e      	cmp	r1, #14
 8006c50:	d8c2      	bhi.n	8006bd8 <_scanf_float+0x64>
 8006c52:	a001      	add	r0, pc, #4	; (adr r0, 8006c58 <_scanf_float+0xe4>)
 8006c54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c58:	08006d07 	.word	0x08006d07
 8006c5c:	08006bd9 	.word	0x08006bd9
 8006c60:	08006d07 	.word	0x08006d07
 8006c64:	08006d9b 	.word	0x08006d9b
 8006c68:	08006bd9 	.word	0x08006bd9
 8006c6c:	08006cb5 	.word	0x08006cb5
 8006c70:	08006cf1 	.word	0x08006cf1
 8006c74:	08006cf1 	.word	0x08006cf1
 8006c78:	08006cf1 	.word	0x08006cf1
 8006c7c:	08006cf1 	.word	0x08006cf1
 8006c80:	08006cf1 	.word	0x08006cf1
 8006c84:	08006cf1 	.word	0x08006cf1
 8006c88:	08006cf1 	.word	0x08006cf1
 8006c8c:	08006cf1 	.word	0x08006cf1
 8006c90:	08006cf1 	.word	0x08006cf1
 8006c94:	2b6e      	cmp	r3, #110	; 0x6e
 8006c96:	d809      	bhi.n	8006cac <_scanf_float+0x138>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d8b2      	bhi.n	8006c02 <_scanf_float+0x8e>
 8006c9c:	2b54      	cmp	r3, #84	; 0x54
 8006c9e:	d077      	beq.n	8006d90 <_scanf_float+0x21c>
 8006ca0:	2b59      	cmp	r3, #89	; 0x59
 8006ca2:	d199      	bne.n	8006bd8 <_scanf_float+0x64>
 8006ca4:	2d07      	cmp	r5, #7
 8006ca6:	d197      	bne.n	8006bd8 <_scanf_float+0x64>
 8006ca8:	2508      	movs	r5, #8
 8006caa:	e029      	b.n	8006d00 <_scanf_float+0x18c>
 8006cac:	2b74      	cmp	r3, #116	; 0x74
 8006cae:	d06f      	beq.n	8006d90 <_scanf_float+0x21c>
 8006cb0:	2b79      	cmp	r3, #121	; 0x79
 8006cb2:	e7f6      	b.n	8006ca2 <_scanf_float+0x12e>
 8006cb4:	6821      	ldr	r1, [r4, #0]
 8006cb6:	05c8      	lsls	r0, r1, #23
 8006cb8:	d51a      	bpl.n	8006cf0 <_scanf_float+0x17c>
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cc0:	6021      	str	r1, [r4, #0]
 8006cc2:	f109 0901 	add.w	r9, r9, #1
 8006cc6:	b11b      	cbz	r3, 8006cd0 <_scanf_float+0x15c>
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	3201      	adds	r2, #1
 8006ccc:	9302      	str	r3, [sp, #8]
 8006cce:	60a2      	str	r2, [r4, #8]
 8006cd0:	68a3      	ldr	r3, [r4, #8]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	60a3      	str	r3, [r4, #8]
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	607b      	str	r3, [r7, #4]
 8006ce4:	f340 8084 	ble.w	8006df0 <_scanf_float+0x27c>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	e766      	b.n	8006bbe <_scanf_float+0x4a>
 8006cf0:	eb1a 0f05 	cmn.w	sl, r5
 8006cf4:	f47f af70 	bne.w	8006bd8 <_scanf_float+0x64>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	f806 3b01 	strb.w	r3, [r6], #1
 8006d04:	e7e4      	b.n	8006cd0 <_scanf_float+0x15c>
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	0610      	lsls	r0, r2, #24
 8006d0a:	f57f af65 	bpl.w	8006bd8 <_scanf_float+0x64>
 8006d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d12:	e7f4      	b.n	8006cfe <_scanf_float+0x18a>
 8006d14:	f1ba 0f00 	cmp.w	sl, #0
 8006d18:	d10e      	bne.n	8006d38 <_scanf_float+0x1c4>
 8006d1a:	f1b9 0f00 	cmp.w	r9, #0
 8006d1e:	d10e      	bne.n	8006d3e <_scanf_float+0x1ca>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d2a:	d108      	bne.n	8006d3e <_scanf_float+0x1ca>
 8006d2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d30:	f04f 0a01 	mov.w	sl, #1
 8006d34:	6022      	str	r2, [r4, #0]
 8006d36:	e7e3      	b.n	8006d00 <_scanf_float+0x18c>
 8006d38:	f1ba 0f02 	cmp.w	sl, #2
 8006d3c:	d055      	beq.n	8006dea <_scanf_float+0x276>
 8006d3e:	2d01      	cmp	r5, #1
 8006d40:	d002      	beq.n	8006d48 <_scanf_float+0x1d4>
 8006d42:	2d04      	cmp	r5, #4
 8006d44:	f47f af48 	bne.w	8006bd8 <_scanf_float+0x64>
 8006d48:	3501      	adds	r5, #1
 8006d4a:	b2ed      	uxtb	r5, r5
 8006d4c:	e7d8      	b.n	8006d00 <_scanf_float+0x18c>
 8006d4e:	f1ba 0f01 	cmp.w	sl, #1
 8006d52:	f47f af41 	bne.w	8006bd8 <_scanf_float+0x64>
 8006d56:	f04f 0a02 	mov.w	sl, #2
 8006d5a:	e7d1      	b.n	8006d00 <_scanf_float+0x18c>
 8006d5c:	b97d      	cbnz	r5, 8006d7e <_scanf_float+0x20a>
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	f47f af3c 	bne.w	8006bde <_scanf_float+0x6a>
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d70:	f47f af39 	bne.w	8006be6 <_scanf_float+0x72>
 8006d74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d78:	2501      	movs	r5, #1
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	e7c0      	b.n	8006d00 <_scanf_float+0x18c>
 8006d7e:	2d03      	cmp	r5, #3
 8006d80:	d0e2      	beq.n	8006d48 <_scanf_float+0x1d4>
 8006d82:	2d05      	cmp	r5, #5
 8006d84:	e7de      	b.n	8006d44 <_scanf_float+0x1d0>
 8006d86:	2d02      	cmp	r5, #2
 8006d88:	f47f af26 	bne.w	8006bd8 <_scanf_float+0x64>
 8006d8c:	2503      	movs	r5, #3
 8006d8e:	e7b7      	b.n	8006d00 <_scanf_float+0x18c>
 8006d90:	2d06      	cmp	r5, #6
 8006d92:	f47f af21 	bne.w	8006bd8 <_scanf_float+0x64>
 8006d96:	2507      	movs	r5, #7
 8006d98:	e7b2      	b.n	8006d00 <_scanf_float+0x18c>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	0591      	lsls	r1, r2, #22
 8006d9e:	f57f af1b 	bpl.w	8006bd8 <_scanf_float+0x64>
 8006da2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006da6:	6022      	str	r2, [r4, #0]
 8006da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006dac:	e7a8      	b.n	8006d00 <_scanf_float+0x18c>
 8006dae:	6822      	ldr	r2, [r4, #0]
 8006db0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006db4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006db8:	d006      	beq.n	8006dc8 <_scanf_float+0x254>
 8006dba:	0550      	lsls	r0, r2, #21
 8006dbc:	f57f af0c 	bpl.w	8006bd8 <_scanf_float+0x64>
 8006dc0:	f1b9 0f00 	cmp.w	r9, #0
 8006dc4:	f43f af0f 	beq.w	8006be6 <_scanf_float+0x72>
 8006dc8:	0591      	lsls	r1, r2, #22
 8006dca:	bf58      	it	pl
 8006dcc:	9901      	ldrpl	r1, [sp, #4]
 8006dce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dd2:	bf58      	it	pl
 8006dd4:	eba9 0101 	subpl.w	r1, r9, r1
 8006dd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ddc:	f04f 0900 	mov.w	r9, #0
 8006de0:	bf58      	it	pl
 8006de2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006de6:	6022      	str	r2, [r4, #0]
 8006de8:	e78a      	b.n	8006d00 <_scanf_float+0x18c>
 8006dea:	f04f 0a03 	mov.w	sl, #3
 8006dee:	e787      	b.n	8006d00 <_scanf_float+0x18c>
 8006df0:	4639      	mov	r1, r7
 8006df2:	4640      	mov	r0, r8
 8006df4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006df8:	4798      	blx	r3
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f43f aedf 	beq.w	8006bbe <_scanf_float+0x4a>
 8006e00:	e6ea      	b.n	8006bd8 <_scanf_float+0x64>
 8006e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e06:	463a      	mov	r2, r7
 8006e08:	4640      	mov	r0, r8
 8006e0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e0e:	4798      	blx	r3
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	e6ec      	b.n	8006bf2 <_scanf_float+0x7e>
 8006e18:	1e6b      	subs	r3, r5, #1
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d825      	bhi.n	8006e6a <_scanf_float+0x2f6>
 8006e1e:	2d02      	cmp	r5, #2
 8006e20:	d836      	bhi.n	8006e90 <_scanf_float+0x31c>
 8006e22:	455e      	cmp	r6, fp
 8006e24:	f67f aee8 	bls.w	8006bf8 <_scanf_float+0x84>
 8006e28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e2c:	463a      	mov	r2, r7
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e34:	4798      	blx	r3
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	e7f1      	b.n	8006e22 <_scanf_float+0x2ae>
 8006e3e:	9802      	ldr	r0, [sp, #8]
 8006e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e48:	463a      	mov	r2, r7
 8006e4a:	9002      	str	r0, [sp, #8]
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4798      	blx	r3
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e5a:	fa5f fa8a 	uxtb.w	sl, sl
 8006e5e:	f1ba 0f02 	cmp.w	sl, #2
 8006e62:	d1ec      	bne.n	8006e3e <_scanf_float+0x2ca>
 8006e64:	3d03      	subs	r5, #3
 8006e66:	b2ed      	uxtb	r5, r5
 8006e68:	1b76      	subs	r6, r6, r5
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	05da      	lsls	r2, r3, #23
 8006e6e:	d52f      	bpl.n	8006ed0 <_scanf_float+0x35c>
 8006e70:	055b      	lsls	r3, r3, #21
 8006e72:	d510      	bpl.n	8006e96 <_scanf_float+0x322>
 8006e74:	455e      	cmp	r6, fp
 8006e76:	f67f aebf 	bls.w	8006bf8 <_scanf_float+0x84>
 8006e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e7e:	463a      	mov	r2, r7
 8006e80:	4640      	mov	r0, r8
 8006e82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e86:	4798      	blx	r3
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	e7f1      	b.n	8006e74 <_scanf_float+0x300>
 8006e90:	46aa      	mov	sl, r5
 8006e92:	9602      	str	r6, [sp, #8]
 8006e94:	e7df      	b.n	8006e56 <_scanf_float+0x2e2>
 8006e96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	2965      	cmp	r1, #101	; 0x65
 8006e9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ea2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	d00c      	beq.n	8006ec4 <_scanf_float+0x350>
 8006eaa:	2945      	cmp	r1, #69	; 0x45
 8006eac:	d00a      	beq.n	8006ec4 <_scanf_float+0x350>
 8006eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4798      	blx	r3
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	1eb5      	subs	r5, r6, #2
 8006ec2:	6123      	str	r3, [r4, #16]
 8006ec4:	463a      	mov	r2, r7
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ecc:	4798      	blx	r3
 8006ece:	462e      	mov	r6, r5
 8006ed0:	6825      	ldr	r5, [r4, #0]
 8006ed2:	f015 0510 	ands.w	r5, r5, #16
 8006ed6:	d155      	bne.n	8006f84 <_scanf_float+0x410>
 8006ed8:	7035      	strb	r5, [r6, #0]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee4:	d11b      	bne.n	8006f1e <_scanf_float+0x3aa>
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	454b      	cmp	r3, r9
 8006eea:	eba3 0209 	sub.w	r2, r3, r9
 8006eee:	d123      	bne.n	8006f38 <_scanf_float+0x3c4>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4659      	mov	r1, fp
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	f000 fe7b 	bl	8007bf0 <_strtod_r>
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	f012 0f02 	tst.w	r2, #2
 8006f02:	4606      	mov	r6, r0
 8006f04:	460f      	mov	r7, r1
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	d021      	beq.n	8006f4e <_scanf_float+0x3da>
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	600a      	str	r2, [r1, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	e9c3 6700 	strd	r6, r7, [r3]
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60e3      	str	r3, [r4, #12]
 8006f1c:	e66d      	b.n	8006bfa <_scanf_float+0x86>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0e5      	beq.n	8006ef0 <_scanf_float+0x37c>
 8006f24:	9905      	ldr	r1, [sp, #20]
 8006f26:	230a      	movs	r3, #10
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	3101      	adds	r1, #1
 8006f2e:	f000 ff3d 	bl	8007dac <_strtol_r>
 8006f32:	9b04      	ldr	r3, [sp, #16]
 8006f34:	9e05      	ldr	r6, [sp, #20]
 8006f36:	1ac2      	subs	r2, r0, r3
 8006f38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	bf28      	it	cs
 8006f40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f44:	4630      	mov	r0, r6
 8006f46:	4910      	ldr	r1, [pc, #64]	; (8006f88 <_scanf_float+0x414>)
 8006f48:	f000 f826 	bl	8006f98 <siprintf>
 8006f4c:	e7d0      	b.n	8006ef0 <_scanf_float+0x37c>
 8006f4e:	f012 0f04 	tst.w	r2, #4
 8006f52:	f103 0204 	add.w	r2, r3, #4
 8006f56:	d1d9      	bne.n	8006f0c <_scanf_float+0x398>
 8006f58:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006f5c:	f8cc 2000 	str.w	r2, [ip]
 8006f60:	f8d3 8000 	ldr.w	r8, [r3]
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	f7f9 fdca 	bl	8000b00 <__aeabi_dcmpun>
 8006f6c:	b128      	cbz	r0, 8006f7a <_scanf_float+0x406>
 8006f6e:	4807      	ldr	r0, [pc, #28]	; (8006f8c <_scanf_float+0x418>)
 8006f70:	f000 f80e 	bl	8006f90 <nanf>
 8006f74:	f8c8 0000 	str.w	r0, [r8]
 8006f78:	e7cd      	b.n	8006f16 <_scanf_float+0x3a2>
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 fe1d 	bl	8000bbc <__aeabi_d2f>
 8006f82:	e7f7      	b.n	8006f74 <_scanf_float+0x400>
 8006f84:	2500      	movs	r5, #0
 8006f86:	e638      	b.n	8006bfa <_scanf_float+0x86>
 8006f88:	0800ad44 	.word	0x0800ad44
 8006f8c:	0800ae4f 	.word	0x0800ae4f

08006f90 <nanf>:
 8006f90:	4800      	ldr	r0, [pc, #0]	; (8006f94 <nanf+0x4>)
 8006f92:	4770      	bx	lr
 8006f94:	7fc00000 	.word	0x7fc00000

08006f98 <siprintf>:
 8006f98:	b40e      	push	{r1, r2, r3}
 8006f9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f9e:	b500      	push	{lr}
 8006fa0:	b09c      	sub	sp, #112	; 0x70
 8006fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	9006      	str	r0, [sp, #24]
 8006fa8:	9107      	str	r1, [sp, #28]
 8006faa:	9104      	str	r1, [sp, #16]
 8006fac:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <siprintf+0x38>)
 8006fae:	4909      	ldr	r1, [pc, #36]	; (8006fd4 <siprintf+0x3c>)
 8006fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb4:	9105      	str	r1, [sp, #20]
 8006fb6:	6800      	ldr	r0, [r0, #0]
 8006fb8:	a902      	add	r1, sp, #8
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	f003 fa1e 	bl	800a3fc <_svfiprintf_r>
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	9b02      	ldr	r3, [sp, #8]
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	b01c      	add	sp, #112	; 0x70
 8006fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fcc:	b003      	add	sp, #12
 8006fce:	4770      	bx	lr
 8006fd0:	20000500 	.word	0x20000500
 8006fd4:	ffff0208 	.word	0xffff0208

08006fd8 <sulp>:
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	460f      	mov	r7, r1
 8006fde:	4690      	mov	r8, r2
 8006fe0:	f002 ff78 	bl	8009ed4 <__ulp>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f1b8 0f00 	cmp.w	r8, #0
 8006fec:	d011      	beq.n	8007012 <sulp+0x3a>
 8006fee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dd0b      	ble.n	8007012 <sulp+0x3a>
 8006ffa:	2400      	movs	r4, #0
 8006ffc:	051b      	lsls	r3, r3, #20
 8006ffe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	f7f9 fadf 	bl	80005cc <__aeabi_dmul>
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701a:	0000      	movs	r0, r0
 800701c:	0000      	movs	r0, r0
	...

08007020 <_strtod_l>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	469b      	mov	fp, r3
 8007026:	2300      	movs	r3, #0
 8007028:	b09f      	sub	sp, #124	; 0x7c
 800702a:	931a      	str	r3, [sp, #104]	; 0x68
 800702c:	4b9e      	ldr	r3, [pc, #632]	; (80072a8 <_strtod_l+0x288>)
 800702e:	4682      	mov	sl, r0
 8007030:	681f      	ldr	r7, [r3, #0]
 8007032:	460e      	mov	r6, r1
 8007034:	4638      	mov	r0, r7
 8007036:	9215      	str	r2, [sp, #84]	; 0x54
 8007038:	f7f9 f904 	bl	8000244 <strlen>
 800703c:	f04f 0800 	mov.w	r8, #0
 8007040:	4604      	mov	r4, r0
 8007042:	f04f 0900 	mov.w	r9, #0
 8007046:	9619      	str	r6, [sp, #100]	; 0x64
 8007048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	2a2b      	cmp	r2, #43	; 0x2b
 800704e:	d04c      	beq.n	80070ea <_strtod_l+0xca>
 8007050:	d83a      	bhi.n	80070c8 <_strtod_l+0xa8>
 8007052:	2a0d      	cmp	r2, #13
 8007054:	d833      	bhi.n	80070be <_strtod_l+0x9e>
 8007056:	2a08      	cmp	r2, #8
 8007058:	d833      	bhi.n	80070c2 <_strtod_l+0xa2>
 800705a:	2a00      	cmp	r2, #0
 800705c:	d03d      	beq.n	80070da <_strtod_l+0xba>
 800705e:	2300      	movs	r3, #0
 8007060:	930a      	str	r3, [sp, #40]	; 0x28
 8007062:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007064:	782b      	ldrb	r3, [r5, #0]
 8007066:	2b30      	cmp	r3, #48	; 0x30
 8007068:	f040 80aa 	bne.w	80071c0 <_strtod_l+0x1a0>
 800706c:	786b      	ldrb	r3, [r5, #1]
 800706e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007072:	2b58      	cmp	r3, #88	; 0x58
 8007074:	d166      	bne.n	8007144 <_strtod_l+0x124>
 8007076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007078:	4650      	mov	r0, sl
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	ab1a      	add	r3, sp, #104	; 0x68
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4a8a      	ldr	r2, [pc, #552]	; (80072ac <_strtod_l+0x28c>)
 8007082:	f8cd b008 	str.w	fp, [sp, #8]
 8007086:	ab1b      	add	r3, sp, #108	; 0x6c
 8007088:	a919      	add	r1, sp, #100	; 0x64
 800708a:	f002 f821 	bl	80090d0 <__gethex>
 800708e:	f010 0607 	ands.w	r6, r0, #7
 8007092:	4604      	mov	r4, r0
 8007094:	d005      	beq.n	80070a2 <_strtod_l+0x82>
 8007096:	2e06      	cmp	r6, #6
 8007098:	d129      	bne.n	80070ee <_strtod_l+0xce>
 800709a:	2300      	movs	r3, #0
 800709c:	3501      	adds	r5, #1
 800709e:	9519      	str	r5, [sp, #100]	; 0x64
 80070a0:	930a      	str	r3, [sp, #40]	; 0x28
 80070a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 858a 	bne.w	8007bbe <_strtod_l+0xb9e>
 80070aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ac:	b1d3      	cbz	r3, 80070e4 <_strtod_l+0xc4>
 80070ae:	4642      	mov	r2, r8
 80070b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	b01f      	add	sp, #124	; 0x7c
 80070ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070be:	2a20      	cmp	r2, #32
 80070c0:	d1cd      	bne.n	800705e <_strtod_l+0x3e>
 80070c2:	3301      	adds	r3, #1
 80070c4:	9319      	str	r3, [sp, #100]	; 0x64
 80070c6:	e7bf      	b.n	8007048 <_strtod_l+0x28>
 80070c8:	2a2d      	cmp	r2, #45	; 0x2d
 80070ca:	d1c8      	bne.n	800705e <_strtod_l+0x3e>
 80070cc:	2201      	movs	r2, #1
 80070ce:	920a      	str	r2, [sp, #40]	; 0x28
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	9219      	str	r2, [sp, #100]	; 0x64
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1c3      	bne.n	8007062 <_strtod_l+0x42>
 80070da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070dc:	9619      	str	r6, [sp, #100]	; 0x64
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 856b 	bne.w	8007bba <_strtod_l+0xb9a>
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	e7e4      	b.n	80070b4 <_strtod_l+0x94>
 80070ea:	2200      	movs	r2, #0
 80070ec:	e7ef      	b.n	80070ce <_strtod_l+0xae>
 80070ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80070f0:	b13a      	cbz	r2, 8007102 <_strtod_l+0xe2>
 80070f2:	2135      	movs	r1, #53	; 0x35
 80070f4:	a81c      	add	r0, sp, #112	; 0x70
 80070f6:	f002 fff1 	bl	800a0dc <__copybits>
 80070fa:	4650      	mov	r0, sl
 80070fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070fe:	f002 fbb9 	bl	8009874 <_Bfree>
 8007102:	3e01      	subs	r6, #1
 8007104:	2e04      	cmp	r6, #4
 8007106:	d806      	bhi.n	8007116 <_strtod_l+0xf6>
 8007108:	e8df f006 	tbb	[pc, r6]
 800710c:	1714030a 	.word	0x1714030a
 8007110:	0a          	.byte	0x0a
 8007111:	00          	.byte	0x00
 8007112:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007116:	0721      	lsls	r1, r4, #28
 8007118:	d5c3      	bpl.n	80070a2 <_strtod_l+0x82>
 800711a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800711e:	e7c0      	b.n	80070a2 <_strtod_l+0x82>
 8007120:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007122:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007126:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800712a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800712e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007132:	e7f0      	b.n	8007116 <_strtod_l+0xf6>
 8007134:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80072b0 <_strtod_l+0x290>
 8007138:	e7ed      	b.n	8007116 <_strtod_l+0xf6>
 800713a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800713e:	f04f 38ff 	mov.w	r8, #4294967295
 8007142:	e7e8      	b.n	8007116 <_strtod_l+0xf6>
 8007144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	9219      	str	r2, [sp, #100]	; 0x64
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d0f9      	beq.n	8007144 <_strtod_l+0x124>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0a6      	beq.n	80070a2 <_strtod_l+0x82>
 8007154:	2301      	movs	r3, #1
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800715a:	220a      	movs	r2, #10
 800715c:	9308      	str	r3, [sp, #32]
 800715e:	2300      	movs	r3, #0
 8007160:	469b      	mov	fp, r3
 8007162:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007166:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007168:	7805      	ldrb	r5, [r0, #0]
 800716a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800716e:	b2d9      	uxtb	r1, r3
 8007170:	2909      	cmp	r1, #9
 8007172:	d927      	bls.n	80071c4 <_strtod_l+0x1a4>
 8007174:	4622      	mov	r2, r4
 8007176:	4639      	mov	r1, r7
 8007178:	f003 fbf1 	bl	800a95e <strncmp>
 800717c:	2800      	cmp	r0, #0
 800717e:	d033      	beq.n	80071e8 <_strtod_l+0x1c8>
 8007180:	2000      	movs	r0, #0
 8007182:	462a      	mov	r2, r5
 8007184:	465c      	mov	r4, fp
 8007186:	4603      	mov	r3, r0
 8007188:	9004      	str	r0, [sp, #16]
 800718a:	2a65      	cmp	r2, #101	; 0x65
 800718c:	d001      	beq.n	8007192 <_strtod_l+0x172>
 800718e:	2a45      	cmp	r2, #69	; 0x45
 8007190:	d114      	bne.n	80071bc <_strtod_l+0x19c>
 8007192:	b91c      	cbnz	r4, 800719c <_strtod_l+0x17c>
 8007194:	9a07      	ldr	r2, [sp, #28]
 8007196:	4302      	orrs	r2, r0
 8007198:	d09f      	beq.n	80070da <_strtod_l+0xba>
 800719a:	2400      	movs	r4, #0
 800719c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800719e:	1c72      	adds	r2, r6, #1
 80071a0:	9219      	str	r2, [sp, #100]	; 0x64
 80071a2:	7872      	ldrb	r2, [r6, #1]
 80071a4:	2a2b      	cmp	r2, #43	; 0x2b
 80071a6:	d079      	beq.n	800729c <_strtod_l+0x27c>
 80071a8:	2a2d      	cmp	r2, #45	; 0x2d
 80071aa:	f000 8083 	beq.w	80072b4 <_strtod_l+0x294>
 80071ae:	2700      	movs	r7, #0
 80071b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071b4:	2909      	cmp	r1, #9
 80071b6:	f240 8083 	bls.w	80072c0 <_strtod_l+0x2a0>
 80071ba:	9619      	str	r6, [sp, #100]	; 0x64
 80071bc:	2500      	movs	r5, #0
 80071be:	e09f      	b.n	8007300 <_strtod_l+0x2e0>
 80071c0:	2300      	movs	r3, #0
 80071c2:	e7c8      	b.n	8007156 <_strtod_l+0x136>
 80071c4:	f1bb 0f08 	cmp.w	fp, #8
 80071c8:	bfd5      	itete	le
 80071ca:	9906      	ldrle	r1, [sp, #24]
 80071cc:	9905      	ldrgt	r1, [sp, #20]
 80071ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80071d2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071d6:	f100 0001 	add.w	r0, r0, #1
 80071da:	bfd4      	ite	le
 80071dc:	9306      	strle	r3, [sp, #24]
 80071de:	9305      	strgt	r3, [sp, #20]
 80071e0:	f10b 0b01 	add.w	fp, fp, #1
 80071e4:	9019      	str	r0, [sp, #100]	; 0x64
 80071e6:	e7be      	b.n	8007166 <_strtod_l+0x146>
 80071e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071ea:	191a      	adds	r2, r3, r4
 80071ec:	9219      	str	r2, [sp, #100]	; 0x64
 80071ee:	5d1a      	ldrb	r2, [r3, r4]
 80071f0:	f1bb 0f00 	cmp.w	fp, #0
 80071f4:	d036      	beq.n	8007264 <_strtod_l+0x244>
 80071f6:	465c      	mov	r4, fp
 80071f8:	9004      	str	r0, [sp, #16]
 80071fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071fe:	2b09      	cmp	r3, #9
 8007200:	d912      	bls.n	8007228 <_strtod_l+0x208>
 8007202:	2301      	movs	r3, #1
 8007204:	e7c1      	b.n	800718a <_strtod_l+0x16a>
 8007206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007208:	3001      	adds	r0, #1
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	9219      	str	r2, [sp, #100]	; 0x64
 800720e:	785a      	ldrb	r2, [r3, #1]
 8007210:	2a30      	cmp	r2, #48	; 0x30
 8007212:	d0f8      	beq.n	8007206 <_strtod_l+0x1e6>
 8007214:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007218:	2b08      	cmp	r3, #8
 800721a:	f200 84d5 	bhi.w	8007bc8 <_strtod_l+0xba8>
 800721e:	9004      	str	r0, [sp, #16]
 8007220:	2000      	movs	r0, #0
 8007222:	4604      	mov	r4, r0
 8007224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007226:	9308      	str	r3, [sp, #32]
 8007228:	3a30      	subs	r2, #48	; 0x30
 800722a:	f100 0301 	add.w	r3, r0, #1
 800722e:	d013      	beq.n	8007258 <_strtod_l+0x238>
 8007230:	9904      	ldr	r1, [sp, #16]
 8007232:	1905      	adds	r5, r0, r4
 8007234:	4419      	add	r1, r3
 8007236:	9104      	str	r1, [sp, #16]
 8007238:	4623      	mov	r3, r4
 800723a:	210a      	movs	r1, #10
 800723c:	42ab      	cmp	r3, r5
 800723e:	d113      	bne.n	8007268 <_strtod_l+0x248>
 8007240:	1823      	adds	r3, r4, r0
 8007242:	2b08      	cmp	r3, #8
 8007244:	f104 0401 	add.w	r4, r4, #1
 8007248:	4404      	add	r4, r0
 800724a:	dc1b      	bgt.n	8007284 <_strtod_l+0x264>
 800724c:	230a      	movs	r3, #10
 800724e:	9906      	ldr	r1, [sp, #24]
 8007250:	fb03 2301 	mla	r3, r3, r1, r2
 8007254:	9306      	str	r3, [sp, #24]
 8007256:	2300      	movs	r3, #0
 8007258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800725a:	4618      	mov	r0, r3
 800725c:	1c51      	adds	r1, r2, #1
 800725e:	9119      	str	r1, [sp, #100]	; 0x64
 8007260:	7852      	ldrb	r2, [r2, #1]
 8007262:	e7ca      	b.n	80071fa <_strtod_l+0x1da>
 8007264:	4658      	mov	r0, fp
 8007266:	e7d3      	b.n	8007210 <_strtod_l+0x1f0>
 8007268:	2b08      	cmp	r3, #8
 800726a:	dc04      	bgt.n	8007276 <_strtod_l+0x256>
 800726c:	9f06      	ldr	r7, [sp, #24]
 800726e:	434f      	muls	r7, r1
 8007270:	9706      	str	r7, [sp, #24]
 8007272:	3301      	adds	r3, #1
 8007274:	e7e2      	b.n	800723c <_strtod_l+0x21c>
 8007276:	1c5f      	adds	r7, r3, #1
 8007278:	2f10      	cmp	r7, #16
 800727a:	bfde      	ittt	le
 800727c:	9f05      	ldrle	r7, [sp, #20]
 800727e:	434f      	mulle	r7, r1
 8007280:	9705      	strle	r7, [sp, #20]
 8007282:	e7f6      	b.n	8007272 <_strtod_l+0x252>
 8007284:	2c10      	cmp	r4, #16
 8007286:	bfdf      	itttt	le
 8007288:	230a      	movle	r3, #10
 800728a:	9905      	ldrle	r1, [sp, #20]
 800728c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007290:	9305      	strle	r3, [sp, #20]
 8007292:	e7e0      	b.n	8007256 <_strtod_l+0x236>
 8007294:	2300      	movs	r3, #0
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	2301      	movs	r3, #1
 800729a:	e77b      	b.n	8007194 <_strtod_l+0x174>
 800729c:	2700      	movs	r7, #0
 800729e:	1cb2      	adds	r2, r6, #2
 80072a0:	9219      	str	r2, [sp, #100]	; 0x64
 80072a2:	78b2      	ldrb	r2, [r6, #2]
 80072a4:	e784      	b.n	80071b0 <_strtod_l+0x190>
 80072a6:	bf00      	nop
 80072a8:	0800b094 	.word	0x0800b094
 80072ac:	0800ad4c 	.word	0x0800ad4c
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	2701      	movs	r7, #1
 80072b6:	e7f2      	b.n	800729e <_strtod_l+0x27e>
 80072b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072ba:	1c51      	adds	r1, r2, #1
 80072bc:	9119      	str	r1, [sp, #100]	; 0x64
 80072be:	7852      	ldrb	r2, [r2, #1]
 80072c0:	2a30      	cmp	r2, #48	; 0x30
 80072c2:	d0f9      	beq.n	80072b8 <_strtod_l+0x298>
 80072c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072c8:	2908      	cmp	r1, #8
 80072ca:	f63f af77 	bhi.w	80071bc <_strtod_l+0x19c>
 80072ce:	f04f 0e0a 	mov.w	lr, #10
 80072d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80072d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072d8:	9209      	str	r2, [sp, #36]	; 0x24
 80072da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072dc:	1c51      	adds	r1, r2, #1
 80072de:	9119      	str	r1, [sp, #100]	; 0x64
 80072e0:	7852      	ldrb	r2, [r2, #1]
 80072e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80072e6:	2d09      	cmp	r5, #9
 80072e8:	d935      	bls.n	8007356 <_strtod_l+0x336>
 80072ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072ec:	1b49      	subs	r1, r1, r5
 80072ee:	2908      	cmp	r1, #8
 80072f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80072f4:	dc02      	bgt.n	80072fc <_strtod_l+0x2dc>
 80072f6:	4565      	cmp	r5, ip
 80072f8:	bfa8      	it	ge
 80072fa:	4665      	movge	r5, ip
 80072fc:	b107      	cbz	r7, 8007300 <_strtod_l+0x2e0>
 80072fe:	426d      	negs	r5, r5
 8007300:	2c00      	cmp	r4, #0
 8007302:	d14c      	bne.n	800739e <_strtod_l+0x37e>
 8007304:	9907      	ldr	r1, [sp, #28]
 8007306:	4301      	orrs	r1, r0
 8007308:	f47f aecb 	bne.w	80070a2 <_strtod_l+0x82>
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f aee4 	bne.w	80070da <_strtod_l+0xba>
 8007312:	2a69      	cmp	r2, #105	; 0x69
 8007314:	d026      	beq.n	8007364 <_strtod_l+0x344>
 8007316:	dc23      	bgt.n	8007360 <_strtod_l+0x340>
 8007318:	2a49      	cmp	r2, #73	; 0x49
 800731a:	d023      	beq.n	8007364 <_strtod_l+0x344>
 800731c:	2a4e      	cmp	r2, #78	; 0x4e
 800731e:	f47f aedc 	bne.w	80070da <_strtod_l+0xba>
 8007322:	499d      	ldr	r1, [pc, #628]	; (8007598 <_strtod_l+0x578>)
 8007324:	a819      	add	r0, sp, #100	; 0x64
 8007326:	f002 f921 	bl	800956c <__match>
 800732a:	2800      	cmp	r0, #0
 800732c:	f43f aed5 	beq.w	80070da <_strtod_l+0xba>
 8007330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b28      	cmp	r3, #40	; 0x28
 8007336:	d12c      	bne.n	8007392 <_strtod_l+0x372>
 8007338:	4998      	ldr	r1, [pc, #608]	; (800759c <_strtod_l+0x57c>)
 800733a:	aa1c      	add	r2, sp, #112	; 0x70
 800733c:	a819      	add	r0, sp, #100	; 0x64
 800733e:	f002 f929 	bl	8009594 <__hexnan>
 8007342:	2805      	cmp	r0, #5
 8007344:	d125      	bne.n	8007392 <_strtod_l+0x372>
 8007346:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007348:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800734c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007350:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007354:	e6a5      	b.n	80070a2 <_strtod_l+0x82>
 8007356:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800735a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800735e:	e7bc      	b.n	80072da <_strtod_l+0x2ba>
 8007360:	2a6e      	cmp	r2, #110	; 0x6e
 8007362:	e7dc      	b.n	800731e <_strtod_l+0x2fe>
 8007364:	498e      	ldr	r1, [pc, #568]	; (80075a0 <_strtod_l+0x580>)
 8007366:	a819      	add	r0, sp, #100	; 0x64
 8007368:	f002 f900 	bl	800956c <__match>
 800736c:	2800      	cmp	r0, #0
 800736e:	f43f aeb4 	beq.w	80070da <_strtod_l+0xba>
 8007372:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007374:	498b      	ldr	r1, [pc, #556]	; (80075a4 <_strtod_l+0x584>)
 8007376:	3b01      	subs	r3, #1
 8007378:	a819      	add	r0, sp, #100	; 0x64
 800737a:	9319      	str	r3, [sp, #100]	; 0x64
 800737c:	f002 f8f6 	bl	800956c <__match>
 8007380:	b910      	cbnz	r0, 8007388 <_strtod_l+0x368>
 8007382:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007384:	3301      	adds	r3, #1
 8007386:	9319      	str	r3, [sp, #100]	; 0x64
 8007388:	f04f 0800 	mov.w	r8, #0
 800738c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80075a8 <_strtod_l+0x588>
 8007390:	e687      	b.n	80070a2 <_strtod_l+0x82>
 8007392:	4886      	ldr	r0, [pc, #536]	; (80075ac <_strtod_l+0x58c>)
 8007394:	f003 fa8a 	bl	800a8ac <nan>
 8007398:	4680      	mov	r8, r0
 800739a:	4689      	mov	r9, r1
 800739c:	e681      	b.n	80070a2 <_strtod_l+0x82>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	f1bb 0f00 	cmp.w	fp, #0
 80073a4:	bf08      	it	eq
 80073a6:	46a3      	moveq	fp, r4
 80073a8:	1aeb      	subs	r3, r5, r3
 80073aa:	2c10      	cmp	r4, #16
 80073ac:	9806      	ldr	r0, [sp, #24]
 80073ae:	4626      	mov	r6, r4
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	bfa8      	it	ge
 80073b4:	2610      	movge	r6, #16
 80073b6:	f7f9 f88f 	bl	80004d8 <__aeabi_ui2d>
 80073ba:	2c09      	cmp	r4, #9
 80073bc:	4680      	mov	r8, r0
 80073be:	4689      	mov	r9, r1
 80073c0:	dd13      	ble.n	80073ea <_strtod_l+0x3ca>
 80073c2:	4b7b      	ldr	r3, [pc, #492]	; (80075b0 <_strtod_l+0x590>)
 80073c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073cc:	f7f9 f8fe 	bl	80005cc <__aeabi_dmul>
 80073d0:	4680      	mov	r8, r0
 80073d2:	9805      	ldr	r0, [sp, #20]
 80073d4:	4689      	mov	r9, r1
 80073d6:	f7f9 f87f 	bl	80004d8 <__aeabi_ui2d>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f8 ff3d 	bl	8000260 <__adddf3>
 80073e6:	4680      	mov	r8, r0
 80073e8:	4689      	mov	r9, r1
 80073ea:	2c0f      	cmp	r4, #15
 80073ec:	dc36      	bgt.n	800745c <_strtod_l+0x43c>
 80073ee:	9b07      	ldr	r3, [sp, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f43f ae56 	beq.w	80070a2 <_strtod_l+0x82>
 80073f6:	dd22      	ble.n	800743e <_strtod_l+0x41e>
 80073f8:	2b16      	cmp	r3, #22
 80073fa:	dc09      	bgt.n	8007410 <_strtod_l+0x3f0>
 80073fc:	496c      	ldr	r1, [pc, #432]	; (80075b0 <_strtod_l+0x590>)
 80073fe:	4642      	mov	r2, r8
 8007400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007404:	464b      	mov	r3, r9
 8007406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740a:	f7f9 f8df 	bl	80005cc <__aeabi_dmul>
 800740e:	e7c3      	b.n	8007398 <_strtod_l+0x378>
 8007410:	9a07      	ldr	r2, [sp, #28]
 8007412:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007416:	4293      	cmp	r3, r2
 8007418:	db20      	blt.n	800745c <_strtod_l+0x43c>
 800741a:	4d65      	ldr	r5, [pc, #404]	; (80075b0 <_strtod_l+0x590>)
 800741c:	f1c4 040f 	rsb	r4, r4, #15
 8007420:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007424:	4642      	mov	r2, r8
 8007426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742a:	464b      	mov	r3, r9
 800742c:	f7f9 f8ce 	bl	80005cc <__aeabi_dmul>
 8007430:	9b07      	ldr	r3, [sp, #28]
 8007432:	1b1c      	subs	r4, r3, r4
 8007434:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800743c:	e7e5      	b.n	800740a <_strtod_l+0x3ea>
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	3316      	adds	r3, #22
 8007442:	db0b      	blt.n	800745c <_strtod_l+0x43c>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	4640      	mov	r0, r8
 8007448:	1b5d      	subs	r5, r3, r5
 800744a:	4b59      	ldr	r3, [pc, #356]	; (80075b0 <_strtod_l+0x590>)
 800744c:	4649      	mov	r1, r9
 800744e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007452:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007456:	f7f9 f9e3 	bl	8000820 <__aeabi_ddiv>
 800745a:	e79d      	b.n	8007398 <_strtod_l+0x378>
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	1ba6      	subs	r6, r4, r6
 8007460:	441e      	add	r6, r3
 8007462:	2e00      	cmp	r6, #0
 8007464:	dd74      	ble.n	8007550 <_strtod_l+0x530>
 8007466:	f016 030f 	ands.w	r3, r6, #15
 800746a:	d00a      	beq.n	8007482 <_strtod_l+0x462>
 800746c:	4950      	ldr	r1, [pc, #320]	; (80075b0 <_strtod_l+0x590>)
 800746e:	4642      	mov	r2, r8
 8007470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007478:	464b      	mov	r3, r9
 800747a:	f7f9 f8a7 	bl	80005cc <__aeabi_dmul>
 800747e:	4680      	mov	r8, r0
 8007480:	4689      	mov	r9, r1
 8007482:	f036 060f 	bics.w	r6, r6, #15
 8007486:	d052      	beq.n	800752e <_strtod_l+0x50e>
 8007488:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800748c:	dd27      	ble.n	80074de <_strtod_l+0x4be>
 800748e:	f04f 0b00 	mov.w	fp, #0
 8007492:	f8cd b010 	str.w	fp, [sp, #16]
 8007496:	f8cd b020 	str.w	fp, [sp, #32]
 800749a:	f8cd b018 	str.w	fp, [sp, #24]
 800749e:	2322      	movs	r3, #34	; 0x22
 80074a0:	f04f 0800 	mov.w	r8, #0
 80074a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80075a8 <_strtod_l+0x588>
 80074a8:	f8ca 3000 	str.w	r3, [sl]
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f adf7 	beq.w	80070a2 <_strtod_l+0x82>
 80074b4:	4650      	mov	r0, sl
 80074b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074b8:	f002 f9dc 	bl	8009874 <_Bfree>
 80074bc:	4650      	mov	r0, sl
 80074be:	9906      	ldr	r1, [sp, #24]
 80074c0:	f002 f9d8 	bl	8009874 <_Bfree>
 80074c4:	4650      	mov	r0, sl
 80074c6:	9904      	ldr	r1, [sp, #16]
 80074c8:	f002 f9d4 	bl	8009874 <_Bfree>
 80074cc:	4650      	mov	r0, sl
 80074ce:	9908      	ldr	r1, [sp, #32]
 80074d0:	f002 f9d0 	bl	8009874 <_Bfree>
 80074d4:	4659      	mov	r1, fp
 80074d6:	4650      	mov	r0, sl
 80074d8:	f002 f9cc 	bl	8009874 <_Bfree>
 80074dc:	e5e1      	b.n	80070a2 <_strtod_l+0x82>
 80074de:	4b35      	ldr	r3, [pc, #212]	; (80075b4 <_strtod_l+0x594>)
 80074e0:	4640      	mov	r0, r8
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	2300      	movs	r3, #0
 80074e6:	4649      	mov	r1, r9
 80074e8:	461f      	mov	r7, r3
 80074ea:	1136      	asrs	r6, r6, #4
 80074ec:	2e01      	cmp	r6, #1
 80074ee:	dc21      	bgt.n	8007534 <_strtod_l+0x514>
 80074f0:	b10b      	cbz	r3, 80074f6 <_strtod_l+0x4d6>
 80074f2:	4680      	mov	r8, r0
 80074f4:	4689      	mov	r9, r1
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <_strtod_l+0x594>)
 80074f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007500:	4642      	mov	r2, r8
 8007502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007506:	464b      	mov	r3, r9
 8007508:	f7f9 f860 	bl	80005cc <__aeabi_dmul>
 800750c:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <_strtod_l+0x588>)
 800750e:	460a      	mov	r2, r1
 8007510:	400b      	ands	r3, r1
 8007512:	4929      	ldr	r1, [pc, #164]	; (80075b8 <_strtod_l+0x598>)
 8007514:	4680      	mov	r8, r0
 8007516:	428b      	cmp	r3, r1
 8007518:	d8b9      	bhi.n	800748e <_strtod_l+0x46e>
 800751a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800751e:	428b      	cmp	r3, r1
 8007520:	bf86      	itte	hi
 8007522:	f04f 38ff 	movhi.w	r8, #4294967295
 8007526:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80075bc <_strtod_l+0x59c>
 800752a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800752e:	2300      	movs	r3, #0
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	e07f      	b.n	8007634 <_strtod_l+0x614>
 8007534:	07f2      	lsls	r2, r6, #31
 8007536:	d505      	bpl.n	8007544 <_strtod_l+0x524>
 8007538:	9b05      	ldr	r3, [sp, #20]
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f845 	bl	80005cc <__aeabi_dmul>
 8007542:	2301      	movs	r3, #1
 8007544:	9a05      	ldr	r2, [sp, #20]
 8007546:	3701      	adds	r7, #1
 8007548:	3208      	adds	r2, #8
 800754a:	1076      	asrs	r6, r6, #1
 800754c:	9205      	str	r2, [sp, #20]
 800754e:	e7cd      	b.n	80074ec <_strtod_l+0x4cc>
 8007550:	d0ed      	beq.n	800752e <_strtod_l+0x50e>
 8007552:	4276      	negs	r6, r6
 8007554:	f016 020f 	ands.w	r2, r6, #15
 8007558:	d00a      	beq.n	8007570 <_strtod_l+0x550>
 800755a:	4b15      	ldr	r3, [pc, #84]	; (80075b0 <_strtod_l+0x590>)
 800755c:	4640      	mov	r0, r8
 800755e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007562:	4649      	mov	r1, r9
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f9 f95a 	bl	8000820 <__aeabi_ddiv>
 800756c:	4680      	mov	r8, r0
 800756e:	4689      	mov	r9, r1
 8007570:	1136      	asrs	r6, r6, #4
 8007572:	d0dc      	beq.n	800752e <_strtod_l+0x50e>
 8007574:	2e1f      	cmp	r6, #31
 8007576:	dd23      	ble.n	80075c0 <_strtod_l+0x5a0>
 8007578:	f04f 0b00 	mov.w	fp, #0
 800757c:	f8cd b010 	str.w	fp, [sp, #16]
 8007580:	f8cd b020 	str.w	fp, [sp, #32]
 8007584:	f8cd b018 	str.w	fp, [sp, #24]
 8007588:	2322      	movs	r3, #34	; 0x22
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f04f 0900 	mov.w	r9, #0
 8007592:	f8ca 3000 	str.w	r3, [sl]
 8007596:	e789      	b.n	80074ac <_strtod_l+0x48c>
 8007598:	0800ad1d 	.word	0x0800ad1d
 800759c:	0800ad60 	.word	0x0800ad60
 80075a0:	0800ad15 	.word	0x0800ad15
 80075a4:	0800af54 	.word	0x0800af54
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	0800ae4f 	.word	0x0800ae4f
 80075b0:	0800b130 	.word	0x0800b130
 80075b4:	0800b108 	.word	0x0800b108
 80075b8:	7ca00000 	.word	0x7ca00000
 80075bc:	7fefffff 	.word	0x7fefffff
 80075c0:	f016 0310 	ands.w	r3, r6, #16
 80075c4:	bf18      	it	ne
 80075c6:	236a      	movne	r3, #106	; 0x6a
 80075c8:	4640      	mov	r0, r8
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	4649      	mov	r1, r9
 80075ce:	2300      	movs	r3, #0
 80075d0:	4fb0      	ldr	r7, [pc, #704]	; (8007894 <_strtod_l+0x874>)
 80075d2:	07f2      	lsls	r2, r6, #31
 80075d4:	d504      	bpl.n	80075e0 <_strtod_l+0x5c0>
 80075d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075da:	f7f8 fff7 	bl	80005cc <__aeabi_dmul>
 80075de:	2301      	movs	r3, #1
 80075e0:	1076      	asrs	r6, r6, #1
 80075e2:	f107 0708 	add.w	r7, r7, #8
 80075e6:	d1f4      	bne.n	80075d2 <_strtod_l+0x5b2>
 80075e8:	b10b      	cbz	r3, 80075ee <_strtod_l+0x5ce>
 80075ea:	4680      	mov	r8, r0
 80075ec:	4689      	mov	r9, r1
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	b1c3      	cbz	r3, 8007624 <_strtod_l+0x604>
 80075f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	4649      	mov	r1, r9
 80075fe:	dd11      	ble.n	8007624 <_strtod_l+0x604>
 8007600:	2b1f      	cmp	r3, #31
 8007602:	f340 8127 	ble.w	8007854 <_strtod_l+0x834>
 8007606:	2b34      	cmp	r3, #52	; 0x34
 8007608:	bfd8      	it	le
 800760a:	f04f 33ff 	movle.w	r3, #4294967295
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	bfcf      	iteee	gt
 8007614:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007618:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800761c:	fa03 f202 	lslle.w	r2, r3, r2
 8007620:	ea02 0901 	andle.w	r9, r2, r1
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f9 fa36 	bl	8000a9c <__aeabi_dcmpeq>
 8007630:	2800      	cmp	r0, #0
 8007632:	d1a1      	bne.n	8007578 <_strtod_l+0x558>
 8007634:	9b06      	ldr	r3, [sp, #24]
 8007636:	465a      	mov	r2, fp
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	4650      	mov	r0, sl
 800763c:	4623      	mov	r3, r4
 800763e:	9908      	ldr	r1, [sp, #32]
 8007640:	f002 f980 	bl	8009944 <__s2b>
 8007644:	9008      	str	r0, [sp, #32]
 8007646:	2800      	cmp	r0, #0
 8007648:	f43f af21 	beq.w	800748e <_strtod_l+0x46e>
 800764c:	9b04      	ldr	r3, [sp, #16]
 800764e:	f04f 0b00 	mov.w	fp, #0
 8007652:	1b5d      	subs	r5, r3, r5
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	f8cd b010 	str.w	fp, [sp, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bfb4      	ite	lt
 800765e:	462b      	movlt	r3, r5
 8007660:	2300      	movge	r3, #0
 8007662:	930e      	str	r3, [sp, #56]	; 0x38
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800766a:	9314      	str	r3, [sp, #80]	; 0x50
 800766c:	9b08      	ldr	r3, [sp, #32]
 800766e:	4650      	mov	r0, sl
 8007670:	6859      	ldr	r1, [r3, #4]
 8007672:	f002 f8bf 	bl	80097f4 <_Balloc>
 8007676:	9006      	str	r0, [sp, #24]
 8007678:	2800      	cmp	r0, #0
 800767a:	f43f af10 	beq.w	800749e <_strtod_l+0x47e>
 800767e:	9b08      	ldr	r3, [sp, #32]
 8007680:	300c      	adds	r0, #12
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	f103 010c 	add.w	r1, r3, #12
 8007688:	3202      	adds	r2, #2
 800768a:	0092      	lsls	r2, r2, #2
 800768c:	f7fe fdfc 	bl	8006288 <memcpy>
 8007690:	ab1c      	add	r3, sp, #112	; 0x70
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	ab1b      	add	r3, sp, #108	; 0x6c
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	4650      	mov	r0, sl
 800769e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80076a2:	f002 fc91 	bl	8009fc8 <__d2b>
 80076a6:	901a      	str	r0, [sp, #104]	; 0x68
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f43f aef8 	beq.w	800749e <_strtod_l+0x47e>
 80076ae:	2101      	movs	r1, #1
 80076b0:	4650      	mov	r0, sl
 80076b2:	f002 f9df 	bl	8009a74 <__i2b>
 80076b6:	4603      	mov	r3, r0
 80076b8:	9004      	str	r0, [sp, #16]
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f43f aeef 	beq.w	800749e <_strtod_l+0x47e>
 80076c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80076c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	bfab      	itete	ge
 80076c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80076ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80076cc:	18ee      	addge	r6, r5, r3
 80076ce:	1b5c      	sublt	r4, r3, r5
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	bfa8      	it	ge
 80076d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80076d6:	eba5 0503 	sub.w	r5, r5, r3
 80076da:	4415      	add	r5, r2
 80076dc:	4b6e      	ldr	r3, [pc, #440]	; (8007898 <_strtod_l+0x878>)
 80076de:	f105 35ff 	add.w	r5, r5, #4294967295
 80076e2:	bfb8      	it	lt
 80076e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80076e6:	429d      	cmp	r5, r3
 80076e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076ec:	f280 80c4 	bge.w	8007878 <_strtod_l+0x858>
 80076f0:	1b5b      	subs	r3, r3, r5
 80076f2:	2b1f      	cmp	r3, #31
 80076f4:	f04f 0701 	mov.w	r7, #1
 80076f8:	eba2 0203 	sub.w	r2, r2, r3
 80076fc:	f300 80b1 	bgt.w	8007862 <_strtod_l+0x842>
 8007700:	2500      	movs	r5, #0
 8007702:	fa07 f303 	lsl.w	r3, r7, r3
 8007706:	930f      	str	r3, [sp, #60]	; 0x3c
 8007708:	18b7      	adds	r7, r6, r2
 800770a:	9b05      	ldr	r3, [sp, #20]
 800770c:	42be      	cmp	r6, r7
 800770e:	4414      	add	r4, r2
 8007710:	441c      	add	r4, r3
 8007712:	4633      	mov	r3, r6
 8007714:	bfa8      	it	ge
 8007716:	463b      	movge	r3, r7
 8007718:	42a3      	cmp	r3, r4
 800771a:	bfa8      	it	ge
 800771c:	4623      	movge	r3, r4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfc2      	ittt	gt
 8007722:	1aff      	subgt	r7, r7, r3
 8007724:	1ae4      	subgt	r4, r4, r3
 8007726:	1af6      	subgt	r6, r6, r3
 8007728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800772a:	2b00      	cmp	r3, #0
 800772c:	dd17      	ble.n	800775e <_strtod_l+0x73e>
 800772e:	461a      	mov	r2, r3
 8007730:	4650      	mov	r0, sl
 8007732:	9904      	ldr	r1, [sp, #16]
 8007734:	f002 fa5c 	bl	8009bf0 <__pow5mult>
 8007738:	9004      	str	r0, [sp, #16]
 800773a:	2800      	cmp	r0, #0
 800773c:	f43f aeaf 	beq.w	800749e <_strtod_l+0x47e>
 8007740:	4601      	mov	r1, r0
 8007742:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007744:	4650      	mov	r0, sl
 8007746:	f002 f9ab 	bl	8009aa0 <__multiply>
 800774a:	9009      	str	r0, [sp, #36]	; 0x24
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f aea6 	beq.w	800749e <_strtod_l+0x47e>
 8007752:	4650      	mov	r0, sl
 8007754:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007756:	f002 f88d 	bl	8009874 <_Bfree>
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	931a      	str	r3, [sp, #104]	; 0x68
 800775e:	2f00      	cmp	r7, #0
 8007760:	f300 808e 	bgt.w	8007880 <_strtod_l+0x860>
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd08      	ble.n	800777c <_strtod_l+0x75c>
 800776a:	4650      	mov	r0, sl
 800776c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800776e:	9906      	ldr	r1, [sp, #24]
 8007770:	f002 fa3e 	bl	8009bf0 <__pow5mult>
 8007774:	9006      	str	r0, [sp, #24]
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f ae91 	beq.w	800749e <_strtod_l+0x47e>
 800777c:	2c00      	cmp	r4, #0
 800777e:	dd08      	ble.n	8007792 <_strtod_l+0x772>
 8007780:	4622      	mov	r2, r4
 8007782:	4650      	mov	r0, sl
 8007784:	9906      	ldr	r1, [sp, #24]
 8007786:	f002 fa8d 	bl	8009ca4 <__lshift>
 800778a:	9006      	str	r0, [sp, #24]
 800778c:	2800      	cmp	r0, #0
 800778e:	f43f ae86 	beq.w	800749e <_strtod_l+0x47e>
 8007792:	2e00      	cmp	r6, #0
 8007794:	dd08      	ble.n	80077a8 <_strtod_l+0x788>
 8007796:	4632      	mov	r2, r6
 8007798:	4650      	mov	r0, sl
 800779a:	9904      	ldr	r1, [sp, #16]
 800779c:	f002 fa82 	bl	8009ca4 <__lshift>
 80077a0:	9004      	str	r0, [sp, #16]
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f43f ae7b 	beq.w	800749e <_strtod_l+0x47e>
 80077a8:	4650      	mov	r0, sl
 80077aa:	9a06      	ldr	r2, [sp, #24]
 80077ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077ae:	f002 fb05 	bl	8009dbc <__mdiff>
 80077b2:	4683      	mov	fp, r0
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f43f ae72 	beq.w	800749e <_strtod_l+0x47e>
 80077ba:	2400      	movs	r4, #0
 80077bc:	68c3      	ldr	r3, [r0, #12]
 80077be:	9904      	ldr	r1, [sp, #16]
 80077c0:	60c4      	str	r4, [r0, #12]
 80077c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c4:	f002 fade 	bl	8009d84 <__mcmp>
 80077c8:	42a0      	cmp	r0, r4
 80077ca:	da6b      	bge.n	80078a4 <_strtod_l+0x884>
 80077cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ce:	ea53 0308 	orrs.w	r3, r3, r8
 80077d2:	f040 8091 	bne.w	80078f8 <_strtod_l+0x8d8>
 80077d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 808c 	bne.w	80078f8 <_strtod_l+0x8d8>
 80077e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077e4:	0d1b      	lsrs	r3, r3, #20
 80077e6:	051b      	lsls	r3, r3, #20
 80077e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077ec:	f240 8084 	bls.w	80078f8 <_strtod_l+0x8d8>
 80077f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80077f4:	b91b      	cbnz	r3, 80077fe <_strtod_l+0x7de>
 80077f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	dd7c      	ble.n	80078f8 <_strtod_l+0x8d8>
 80077fe:	4659      	mov	r1, fp
 8007800:	2201      	movs	r2, #1
 8007802:	4650      	mov	r0, sl
 8007804:	f002 fa4e 	bl	8009ca4 <__lshift>
 8007808:	9904      	ldr	r1, [sp, #16]
 800780a:	4683      	mov	fp, r0
 800780c:	f002 faba 	bl	8009d84 <__mcmp>
 8007810:	2800      	cmp	r0, #0
 8007812:	dd71      	ble.n	80078f8 <_strtod_l+0x8d8>
 8007814:	9905      	ldr	r1, [sp, #20]
 8007816:	464b      	mov	r3, r9
 8007818:	4a20      	ldr	r2, [pc, #128]	; (800789c <_strtod_l+0x87c>)
 800781a:	2900      	cmp	r1, #0
 800781c:	f000 808c 	beq.w	8007938 <_strtod_l+0x918>
 8007820:	ea02 0109 	and.w	r1, r2, r9
 8007824:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007828:	f300 8086 	bgt.w	8007938 <_strtod_l+0x918>
 800782c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007830:	f77f aeaa 	ble.w	8007588 <_strtod_l+0x568>
 8007834:	4640      	mov	r0, r8
 8007836:	4649      	mov	r1, r9
 8007838:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <_strtod_l+0x880>)
 800783a:	2200      	movs	r2, #0
 800783c:	f7f8 fec6 	bl	80005cc <__aeabi_dmul>
 8007840:	460b      	mov	r3, r1
 8007842:	4303      	orrs	r3, r0
 8007844:	bf08      	it	eq
 8007846:	2322      	moveq	r3, #34	; 0x22
 8007848:	4680      	mov	r8, r0
 800784a:	4689      	mov	r9, r1
 800784c:	bf08      	it	eq
 800784e:	f8ca 3000 	streq.w	r3, [sl]
 8007852:	e62f      	b.n	80074b4 <_strtod_l+0x494>
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	ea03 0808 	and.w	r8, r3, r8
 8007860:	e6e0      	b.n	8007624 <_strtod_l+0x604>
 8007862:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007866:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800786a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800786e:	35e2      	adds	r5, #226	; 0xe2
 8007870:	fa07 f505 	lsl.w	r5, r7, r5
 8007874:	970f      	str	r7, [sp, #60]	; 0x3c
 8007876:	e747      	b.n	8007708 <_strtod_l+0x6e8>
 8007878:	2301      	movs	r3, #1
 800787a:	2500      	movs	r5, #0
 800787c:	930f      	str	r3, [sp, #60]	; 0x3c
 800787e:	e743      	b.n	8007708 <_strtod_l+0x6e8>
 8007880:	463a      	mov	r2, r7
 8007882:	4650      	mov	r0, sl
 8007884:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007886:	f002 fa0d 	bl	8009ca4 <__lshift>
 800788a:	901a      	str	r0, [sp, #104]	; 0x68
 800788c:	2800      	cmp	r0, #0
 800788e:	f47f af69 	bne.w	8007764 <_strtod_l+0x744>
 8007892:	e604      	b.n	800749e <_strtod_l+0x47e>
 8007894:	0800ad78 	.word	0x0800ad78
 8007898:	fffffc02 	.word	0xfffffc02
 800789c:	7ff00000 	.word	0x7ff00000
 80078a0:	39500000 	.word	0x39500000
 80078a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80078a8:	d165      	bne.n	8007976 <_strtod_l+0x956>
 80078aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078b0:	b35a      	cbz	r2, 800790a <_strtod_l+0x8ea>
 80078b2:	4a99      	ldr	r2, [pc, #612]	; (8007b18 <_strtod_l+0xaf8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d12b      	bne.n	8007910 <_strtod_l+0x8f0>
 80078b8:	9b05      	ldr	r3, [sp, #20]
 80078ba:	4641      	mov	r1, r8
 80078bc:	b303      	cbz	r3, 8007900 <_strtod_l+0x8e0>
 80078be:	464a      	mov	r2, r9
 80078c0:	4b96      	ldr	r3, [pc, #600]	; (8007b1c <_strtod_l+0xafc>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078c8:	f04f 32ff 	mov.w	r2, #4294967295
 80078cc:	d81b      	bhi.n	8007906 <_strtod_l+0x8e6>
 80078ce:	0d1b      	lsrs	r3, r3, #20
 80078d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	4299      	cmp	r1, r3
 80078da:	d119      	bne.n	8007910 <_strtod_l+0x8f0>
 80078dc:	4b90      	ldr	r3, [pc, #576]	; (8007b20 <_strtod_l+0xb00>)
 80078de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d102      	bne.n	80078ea <_strtod_l+0x8ca>
 80078e4:	3101      	adds	r1, #1
 80078e6:	f43f adda 	beq.w	800749e <_strtod_l+0x47e>
 80078ea:	f04f 0800 	mov.w	r8, #0
 80078ee:	4b8b      	ldr	r3, [pc, #556]	; (8007b1c <_strtod_l+0xafc>)
 80078f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f2:	401a      	ands	r2, r3
 80078f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80078f8:	9b05      	ldr	r3, [sp, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d19a      	bne.n	8007834 <_strtod_l+0x814>
 80078fe:	e5d9      	b.n	80074b4 <_strtod_l+0x494>
 8007900:	f04f 33ff 	mov.w	r3, #4294967295
 8007904:	e7e8      	b.n	80078d8 <_strtod_l+0x8b8>
 8007906:	4613      	mov	r3, r2
 8007908:	e7e6      	b.n	80078d8 <_strtod_l+0x8b8>
 800790a:	ea53 0308 	orrs.w	r3, r3, r8
 800790e:	d081      	beq.n	8007814 <_strtod_l+0x7f4>
 8007910:	b1e5      	cbz	r5, 800794c <_strtod_l+0x92c>
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	421d      	tst	r5, r3
 8007916:	d0ef      	beq.n	80078f8 <_strtod_l+0x8d8>
 8007918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	9a05      	ldr	r2, [sp, #20]
 8007920:	b1c3      	cbz	r3, 8007954 <_strtod_l+0x934>
 8007922:	f7ff fb59 	bl	8006fd8 <sulp>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800792e:	f7f8 fc97 	bl	8000260 <__adddf3>
 8007932:	4680      	mov	r8, r0
 8007934:	4689      	mov	r9, r1
 8007936:	e7df      	b.n	80078f8 <_strtod_l+0x8d8>
 8007938:	4013      	ands	r3, r2
 800793a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800793e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007942:	f04f 38ff 	mov.w	r8, #4294967295
 8007946:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800794a:	e7d5      	b.n	80078f8 <_strtod_l+0x8d8>
 800794c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800794e:	ea13 0f08 	tst.w	r3, r8
 8007952:	e7e0      	b.n	8007916 <_strtod_l+0x8f6>
 8007954:	f7ff fb40 	bl	8006fd8 <sulp>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007960:	f7f8 fc7c 	bl	800025c <__aeabi_dsub>
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4680      	mov	r8, r0
 800796a:	4689      	mov	r9, r1
 800796c:	f7f9 f896 	bl	8000a9c <__aeabi_dcmpeq>
 8007970:	2800      	cmp	r0, #0
 8007972:	d0c1      	beq.n	80078f8 <_strtod_l+0x8d8>
 8007974:	e608      	b.n	8007588 <_strtod_l+0x568>
 8007976:	4658      	mov	r0, fp
 8007978:	9904      	ldr	r1, [sp, #16]
 800797a:	f002 fb81 	bl	800a080 <__ratio>
 800797e:	2200      	movs	r2, #0
 8007980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	f7f9 f89c 	bl	8000ac4 <__aeabi_dcmple>
 800798c:	2800      	cmp	r0, #0
 800798e:	d070      	beq.n	8007a72 <_strtod_l+0xa52>
 8007990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d042      	beq.n	8007a1c <_strtod_l+0x9fc>
 8007996:	2600      	movs	r6, #0
 8007998:	4f62      	ldr	r7, [pc, #392]	; (8007b24 <_strtod_l+0xb04>)
 800799a:	4d62      	ldr	r5, [pc, #392]	; (8007b24 <_strtod_l+0xb04>)
 800799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079a2:	0d1b      	lsrs	r3, r3, #20
 80079a4:	051b      	lsls	r3, r3, #20
 80079a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079aa:	4b5f      	ldr	r3, [pc, #380]	; (8007b28 <_strtod_l+0xb08>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	f040 80c3 	bne.w	8007b38 <_strtod_l+0xb18>
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	4640      	mov	r0, r8
 80079b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80079ba:	4649      	mov	r1, r9
 80079bc:	f002 fa8a 	bl	8009ed4 <__ulp>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f8 fe00 	bl	80005cc <__aeabi_dmul>
 80079cc:	4642      	mov	r2, r8
 80079ce:	464b      	mov	r3, r9
 80079d0:	f7f8 fc46 	bl	8000260 <__adddf3>
 80079d4:	460b      	mov	r3, r1
 80079d6:	4951      	ldr	r1, [pc, #324]	; (8007b1c <_strtod_l+0xafc>)
 80079d8:	4a54      	ldr	r2, [pc, #336]	; (8007b2c <_strtod_l+0xb0c>)
 80079da:	4019      	ands	r1, r3
 80079dc:	4291      	cmp	r1, r2
 80079de:	4680      	mov	r8, r0
 80079e0:	d95d      	bls.n	8007a9e <_strtod_l+0xa7e>
 80079e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079e4:	4b4e      	ldr	r3, [pc, #312]	; (8007b20 <_strtod_l+0xb00>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d103      	bne.n	80079f2 <_strtod_l+0x9d2>
 80079ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ec:	3301      	adds	r3, #1
 80079ee:	f43f ad56 	beq.w	800749e <_strtod_l+0x47e>
 80079f2:	f04f 38ff 	mov.w	r8, #4294967295
 80079f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007b20 <_strtod_l+0xb00>
 80079fa:	4650      	mov	r0, sl
 80079fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079fe:	f001 ff39 	bl	8009874 <_Bfree>
 8007a02:	4650      	mov	r0, sl
 8007a04:	9906      	ldr	r1, [sp, #24]
 8007a06:	f001 ff35 	bl	8009874 <_Bfree>
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	9904      	ldr	r1, [sp, #16]
 8007a0e:	f001 ff31 	bl	8009874 <_Bfree>
 8007a12:	4659      	mov	r1, fp
 8007a14:	4650      	mov	r0, sl
 8007a16:	f001 ff2d 	bl	8009874 <_Bfree>
 8007a1a:	e627      	b.n	800766c <_strtod_l+0x64c>
 8007a1c:	f1b8 0f00 	cmp.w	r8, #0
 8007a20:	d119      	bne.n	8007a56 <_strtod_l+0xa36>
 8007a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	b9e3      	cbnz	r3, 8007a64 <_strtod_l+0xa44>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4b3c      	ldr	r3, [pc, #240]	; (8007b24 <_strtod_l+0xb04>)
 8007a32:	f7f9 f83d 	bl	8000ab0 <__aeabi_dcmplt>
 8007a36:	b9c8      	cbnz	r0, 8007a6c <_strtod_l+0xa4c>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	4b3c      	ldr	r3, [pc, #240]	; (8007b30 <_strtod_l+0xb10>)
 8007a40:	f7f8 fdc4 	bl	80005cc <__aeabi_dmul>
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007a4c:	9416      	str	r4, [sp, #88]	; 0x58
 8007a4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a50:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007a54:	e7a2      	b.n	800799c <_strtod_l+0x97c>
 8007a56:	f1b8 0f01 	cmp.w	r8, #1
 8007a5a:	d103      	bne.n	8007a64 <_strtod_l+0xa44>
 8007a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f43f ad92 	beq.w	8007588 <_strtod_l+0x568>
 8007a64:	2600      	movs	r6, #0
 8007a66:	2400      	movs	r4, #0
 8007a68:	4f32      	ldr	r7, [pc, #200]	; (8007b34 <_strtod_l+0xb14>)
 8007a6a:	e796      	b.n	800799a <_strtod_l+0x97a>
 8007a6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007a6e:	4d30      	ldr	r5, [pc, #192]	; (8007b30 <_strtod_l+0xb10>)
 8007a70:	e7ea      	b.n	8007a48 <_strtod_l+0xa28>
 8007a72:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <_strtod_l+0xb10>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	4630      	mov	r0, r6
 8007a78:	4639      	mov	r1, r7
 8007a7a:	f7f8 fda7 	bl	80005cc <__aeabi_dmul>
 8007a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a80:	4604      	mov	r4, r0
 8007a82:	460d      	mov	r5, r1
 8007a84:	b933      	cbnz	r3, 8007a94 <_strtod_l+0xa74>
 8007a86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a8a:	9010      	str	r0, [sp, #64]	; 0x40
 8007a8c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a92:	e783      	b.n	800799c <_strtod_l+0x97c>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a9c:	e7f7      	b.n	8007a8e <_strtod_l+0xa6e>
 8007a9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1a8      	bne.n	80079fa <_strtod_l+0x9da>
 8007aa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007aae:	0d1b      	lsrs	r3, r3, #20
 8007ab0:	051b      	lsls	r3, r3, #20
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d1a1      	bne.n	80079fa <_strtod_l+0x9da>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f9 f8cf 	bl	8000c5c <__aeabi_d2lz>
 8007abe:	f7f8 fd57 	bl	8000570 <__aeabi_l2d>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 fbc7 	bl	800025c <__aeabi_dsub>
 8007ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ad4:	ea43 0308 	orr.w	r3, r3, r8
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	4604      	mov	r4, r0
 8007adc:	460d      	mov	r5, r1
 8007ade:	d066      	beq.n	8007bae <_strtod_l+0xb8e>
 8007ae0:	a309      	add	r3, pc, #36	; (adr r3, 8007b08 <_strtod_l+0xae8>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 ffe3 	bl	8000ab0 <__aeabi_dcmplt>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f47f ace2 	bne.w	80074b4 <_strtod_l+0x494>
 8007af0:	a307      	add	r3, pc, #28	; (adr r3, 8007b10 <_strtod_l+0xaf0>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 fff7 	bl	8000aec <__aeabi_dcmpgt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f af7b 	beq.w	80079fa <_strtod_l+0x9da>
 8007b04:	e4d6      	b.n	80074b4 <_strtod_l+0x494>
 8007b06:	bf00      	nop
 8007b08:	94a03595 	.word	0x94a03595
 8007b0c:	3fdfffff 	.word	0x3fdfffff
 8007b10:	35afe535 	.word	0x35afe535
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	000fffff 	.word	0x000fffff
 8007b1c:	7ff00000 	.word	0x7ff00000
 8007b20:	7fefffff 	.word	0x7fefffff
 8007b24:	3ff00000 	.word	0x3ff00000
 8007b28:	7fe00000 	.word	0x7fe00000
 8007b2c:	7c9fffff 	.word	0x7c9fffff
 8007b30:	3fe00000 	.word	0x3fe00000
 8007b34:	bff00000 	.word	0xbff00000
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	b313      	cbz	r3, 8007b82 <_strtod_l+0xb62>
 8007b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b42:	d81e      	bhi.n	8007b82 <_strtod_l+0xb62>
 8007b44:	a326      	add	r3, pc, #152	; (adr r3, 8007be0 <_strtod_l+0xbc0>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 ffb9 	bl	8000ac4 <__aeabi_dcmple>
 8007b52:	b190      	cbz	r0, 8007b7a <_strtod_l+0xb5a>
 8007b54:	4629      	mov	r1, r5
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7f9 f810 	bl	8000b7c <__aeabi_d2uiz>
 8007b5c:	2801      	cmp	r0, #1
 8007b5e:	bf38      	it	cc
 8007b60:	2001      	movcc	r0, #1
 8007b62:	f7f8 fcb9 	bl	80004d8 <__aeabi_ui2d>
 8007b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b68:	4604      	mov	r4, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	b9d3      	cbnz	r3, 8007ba4 <_strtod_l+0xb84>
 8007b6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b72:	9012      	str	r0, [sp, #72]	; 0x48
 8007b74:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007b7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007b80:	1a9f      	subs	r7, r3, r2
 8007b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b86:	f002 f9a5 	bl	8009ed4 <__ulp>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4630      	mov	r0, r6
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 fd1b 	bl	80005cc <__aeabi_dmul>
 8007b96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b9a:	f7f8 fb61 	bl	8000260 <__adddf3>
 8007b9e:	4680      	mov	r8, r0
 8007ba0:	4689      	mov	r9, r1
 8007ba2:	e77e      	b.n	8007aa2 <_strtod_l+0xa82>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007bac:	e7e3      	b.n	8007b76 <_strtod_l+0xb56>
 8007bae:	a30e      	add	r3, pc, #56	; (adr r3, 8007be8 <_strtod_l+0xbc8>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 ff7c 	bl	8000ab0 <__aeabi_dcmplt>
 8007bb8:	e7a1      	b.n	8007afe <_strtod_l+0xade>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	f7ff ba71 	b.w	80070aa <_strtod_l+0x8a>
 8007bc8:	2a65      	cmp	r2, #101	; 0x65
 8007bca:	f43f ab63 	beq.w	8007294 <_strtod_l+0x274>
 8007bce:	2a45      	cmp	r2, #69	; 0x45
 8007bd0:	f43f ab60 	beq.w	8007294 <_strtod_l+0x274>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f7ff bb95 	b.w	8007304 <_strtod_l+0x2e4>
 8007bda:	bf00      	nop
 8007bdc:	f3af 8000 	nop.w
 8007be0:	ffc00000 	.word	0xffc00000
 8007be4:	41dfffff 	.word	0x41dfffff
 8007be8:	94a03595 	.word	0x94a03595
 8007bec:	3fcfffff 	.word	0x3fcfffff

08007bf0 <_strtod_r>:
 8007bf0:	4b01      	ldr	r3, [pc, #4]	; (8007bf8 <_strtod_r+0x8>)
 8007bf2:	f7ff ba15 	b.w	8007020 <_strtod_l>
 8007bf6:	bf00      	nop
 8007bf8:	20000568 	.word	0x20000568

08007bfc <strtok>:
 8007bfc:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <strtok+0x5c>)
 8007bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	681f      	ldr	r7, [r3, #0]
 8007c04:	4605      	mov	r5, r0
 8007c06:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007c08:	460e      	mov	r6, r1
 8007c0a:	b9ec      	cbnz	r4, 8007c48 <strtok+0x4c>
 8007c0c:	2050      	movs	r0, #80	; 0x50
 8007c0e:	f001 fdc9 	bl	80097a4 <malloc>
 8007c12:	4602      	mov	r2, r0
 8007c14:	65b8      	str	r0, [r7, #88]	; 0x58
 8007c16:	b920      	cbnz	r0, 8007c22 <strtok+0x26>
 8007c18:	2157      	movs	r1, #87	; 0x57
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <strtok+0x60>)
 8007c1c:	4810      	ldr	r0, [pc, #64]	; (8007c60 <strtok+0x64>)
 8007c1e:	f000 f991 	bl	8007f44 <__assert_func>
 8007c22:	e9c0 4400 	strd	r4, r4, [r0]
 8007c26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007c2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007c2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007c32:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007c36:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007c3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007c3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007c42:	6184      	str	r4, [r0, #24]
 8007c44:	7704      	strb	r4, [r0, #28]
 8007c46:	6244      	str	r4, [r0, #36]	; 0x24
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	f000 b806 	b.w	8007c64 <__strtok_r>
 8007c58:	20000500 	.word	0x20000500
 8007c5c:	0800ada0 	.word	0x0800ada0
 8007c60:	0800adb7 	.word	0x0800adb7

08007c64 <__strtok_r>:
 8007c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c66:	b908      	cbnz	r0, 8007c6c <__strtok_r+0x8>
 8007c68:	6810      	ldr	r0, [r2, #0]
 8007c6a:	b188      	cbz	r0, 8007c90 <__strtok_r+0x2c>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	4620      	mov	r0, r4
 8007c72:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c7a:	b91e      	cbnz	r6, 8007c84 <__strtok_r+0x20>
 8007c7c:	b965      	cbnz	r5, 8007c98 <__strtok_r+0x34>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	6015      	str	r5, [r2, #0]
 8007c82:	e005      	b.n	8007c90 <__strtok_r+0x2c>
 8007c84:	42b5      	cmp	r5, r6
 8007c86:	d1f6      	bne.n	8007c76 <__strtok_r+0x12>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1f0      	bne.n	8007c6e <__strtok_r+0xa>
 8007c8c:	6014      	str	r4, [r2, #0]
 8007c8e:	7003      	strb	r3, [r0, #0]
 8007c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c92:	461c      	mov	r4, r3
 8007c94:	e00c      	b.n	8007cb0 <__strtok_r+0x4c>
 8007c96:	b915      	cbnz	r5, 8007c9e <__strtok_r+0x3a>
 8007c98:	460e      	mov	r6, r1
 8007c9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007ca2:	42ab      	cmp	r3, r5
 8007ca4:	d1f7      	bne.n	8007c96 <__strtok_r+0x32>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f3      	beq.n	8007c92 <__strtok_r+0x2e>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007cb0:	6014      	str	r4, [r2, #0]
 8007cb2:	e7ed      	b.n	8007c90 <__strtok_r+0x2c>

08007cb4 <_strtol_l.constprop.0>:
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cba:	4680      	mov	r8, r0
 8007cbc:	d001      	beq.n	8007cc2 <_strtol_l.constprop.0+0xe>
 8007cbe:	2b24      	cmp	r3, #36	; 0x24
 8007cc0:	d906      	bls.n	8007cd0 <_strtol_l.constprop.0+0x1c>
 8007cc2:	f7fe fab7 	bl	8006234 <__errno>
 8007cc6:	2316      	movs	r3, #22
 8007cc8:	6003      	str	r3, [r0, #0]
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	4f35      	ldr	r7, [pc, #212]	; (8007da8 <_strtol_l.constprop.0+0xf4>)
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cda:	5de6      	ldrb	r6, [r4, r7]
 8007cdc:	f016 0608 	ands.w	r6, r6, #8
 8007ce0:	d1f8      	bne.n	8007cd4 <_strtol_l.constprop.0+0x20>
 8007ce2:	2c2d      	cmp	r4, #45	; 0x2d
 8007ce4:	d12f      	bne.n	8007d46 <_strtol_l.constprop.0+0x92>
 8007ce6:	2601      	movs	r6, #1
 8007ce8:	782c      	ldrb	r4, [r5, #0]
 8007cea:	1c85      	adds	r5, r0, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d057      	beq.n	8007da0 <_strtol_l.constprop.0+0xec>
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	d109      	bne.n	8007d08 <_strtol_l.constprop.0+0x54>
 8007cf4:	2c30      	cmp	r4, #48	; 0x30
 8007cf6:	d107      	bne.n	8007d08 <_strtol_l.constprop.0+0x54>
 8007cf8:	7828      	ldrb	r0, [r5, #0]
 8007cfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007cfe:	2858      	cmp	r0, #88	; 0x58
 8007d00:	d149      	bne.n	8007d96 <_strtol_l.constprop.0+0xe2>
 8007d02:	2310      	movs	r3, #16
 8007d04:	786c      	ldrb	r4, [r5, #1]
 8007d06:	3502      	adds	r5, #2
 8007d08:	2700      	movs	r7, #0
 8007d0a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007d0e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007d12:	fbbe f9f3 	udiv	r9, lr, r3
 8007d16:	4638      	mov	r0, r7
 8007d18:	fb03 ea19 	mls	sl, r3, r9, lr
 8007d1c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007d20:	f1bc 0f09 	cmp.w	ip, #9
 8007d24:	d814      	bhi.n	8007d50 <_strtol_l.constprop.0+0x9c>
 8007d26:	4664      	mov	r4, ip
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	dd22      	ble.n	8007d72 <_strtol_l.constprop.0+0xbe>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	db1d      	blt.n	8007d6c <_strtol_l.constprop.0+0xb8>
 8007d30:	4581      	cmp	r9, r0
 8007d32:	d31b      	bcc.n	8007d6c <_strtol_l.constprop.0+0xb8>
 8007d34:	d101      	bne.n	8007d3a <_strtol_l.constprop.0+0x86>
 8007d36:	45a2      	cmp	sl, r4
 8007d38:	db18      	blt.n	8007d6c <_strtol_l.constprop.0+0xb8>
 8007d3a:	2701      	movs	r7, #1
 8007d3c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d44:	e7ea      	b.n	8007d1c <_strtol_l.constprop.0+0x68>
 8007d46:	2c2b      	cmp	r4, #43	; 0x2b
 8007d48:	bf04      	itt	eq
 8007d4a:	782c      	ldrbeq	r4, [r5, #0]
 8007d4c:	1c85      	addeq	r5, r0, #2
 8007d4e:	e7cd      	b.n	8007cec <_strtol_l.constprop.0+0x38>
 8007d50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007d54:	f1bc 0f19 	cmp.w	ip, #25
 8007d58:	d801      	bhi.n	8007d5e <_strtol_l.constprop.0+0xaa>
 8007d5a:	3c37      	subs	r4, #55	; 0x37
 8007d5c:	e7e4      	b.n	8007d28 <_strtol_l.constprop.0+0x74>
 8007d5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007d62:	f1bc 0f19 	cmp.w	ip, #25
 8007d66:	d804      	bhi.n	8007d72 <_strtol_l.constprop.0+0xbe>
 8007d68:	3c57      	subs	r4, #87	; 0x57
 8007d6a:	e7dd      	b.n	8007d28 <_strtol_l.constprop.0+0x74>
 8007d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d70:	e7e6      	b.n	8007d40 <_strtol_l.constprop.0+0x8c>
 8007d72:	2f00      	cmp	r7, #0
 8007d74:	da07      	bge.n	8007d86 <_strtol_l.constprop.0+0xd2>
 8007d76:	2322      	movs	r3, #34	; 0x22
 8007d78:	4670      	mov	r0, lr
 8007d7a:	f8c8 3000 	str.w	r3, [r8]
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d0a4      	beq.n	8007ccc <_strtol_l.constprop.0+0x18>
 8007d82:	1e69      	subs	r1, r5, #1
 8007d84:	e005      	b.n	8007d92 <_strtol_l.constprop.0+0xde>
 8007d86:	b106      	cbz	r6, 8007d8a <_strtol_l.constprop.0+0xd6>
 8007d88:	4240      	negs	r0, r0
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d09e      	beq.n	8007ccc <_strtol_l.constprop.0+0x18>
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	d1f7      	bne.n	8007d82 <_strtol_l.constprop.0+0xce>
 8007d92:	6011      	str	r1, [r2, #0]
 8007d94:	e79a      	b.n	8007ccc <_strtol_l.constprop.0+0x18>
 8007d96:	2430      	movs	r4, #48	; 0x30
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1b5      	bne.n	8007d08 <_strtol_l.constprop.0+0x54>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	e7b3      	b.n	8007d08 <_strtol_l.constprop.0+0x54>
 8007da0:	2c30      	cmp	r4, #48	; 0x30
 8007da2:	d0a9      	beq.n	8007cf8 <_strtol_l.constprop.0+0x44>
 8007da4:	230a      	movs	r3, #10
 8007da6:	e7af      	b.n	8007d08 <_strtol_l.constprop.0+0x54>
 8007da8:	0800ae51 	.word	0x0800ae51

08007dac <_strtol_r>:
 8007dac:	f7ff bf82 	b.w	8007cb4 <_strtol_l.constprop.0>

08007db0 <strtol>:
 8007db0:	4613      	mov	r3, r2
 8007db2:	460a      	mov	r2, r1
 8007db4:	4601      	mov	r1, r0
 8007db6:	4802      	ldr	r0, [pc, #8]	; (8007dc0 <strtol+0x10>)
 8007db8:	6800      	ldr	r0, [r0, #0]
 8007dba:	f7ff bf7b 	b.w	8007cb4 <_strtol_l.constprop.0>
 8007dbe:	bf00      	nop
 8007dc0:	20000500 	.word	0x20000500

08007dc4 <__swbuf_r>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	4605      	mov	r5, r0
 8007dcc:	b118      	cbz	r0, 8007dd6 <__swbuf_r+0x12>
 8007dce:	6983      	ldr	r3, [r0, #24]
 8007dd0:	b90b      	cbnz	r3, 8007dd6 <__swbuf_r+0x12>
 8007dd2:	f001 f865 	bl	8008ea0 <__sinit>
 8007dd6:	4b21      	ldr	r3, [pc, #132]	; (8007e5c <__swbuf_r+0x98>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d12b      	bne.n	8007e34 <__swbuf_r+0x70>
 8007ddc:	686c      	ldr	r4, [r5, #4]
 8007dde:	69a3      	ldr	r3, [r4, #24]
 8007de0:	60a3      	str	r3, [r4, #8]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	071a      	lsls	r2, r3, #28
 8007de6:	d52f      	bpl.n	8007e48 <__swbuf_r+0x84>
 8007de8:	6923      	ldr	r3, [r4, #16]
 8007dea:	b36b      	cbz	r3, 8007e48 <__swbuf_r+0x84>
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	6820      	ldr	r0, [r4, #0]
 8007df0:	b2f6      	uxtb	r6, r6
 8007df2:	1ac0      	subs	r0, r0, r3
 8007df4:	6963      	ldr	r3, [r4, #20]
 8007df6:	4637      	mov	r7, r6
 8007df8:	4283      	cmp	r3, r0
 8007dfa:	dc04      	bgt.n	8007e06 <__swbuf_r+0x42>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 ffba 	bl	8008d78 <_fflush_r>
 8007e04:	bb30      	cbnz	r0, 8007e54 <__swbuf_r+0x90>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	3001      	adds	r0, #1
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	60a3      	str	r3, [r4, #8]
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	701e      	strb	r6, [r3, #0]
 8007e16:	6963      	ldr	r3, [r4, #20]
 8007e18:	4283      	cmp	r3, r0
 8007e1a:	d004      	beq.n	8007e26 <__swbuf_r+0x62>
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	07db      	lsls	r3, r3, #31
 8007e20:	d506      	bpl.n	8007e30 <__swbuf_r+0x6c>
 8007e22:	2e0a      	cmp	r6, #10
 8007e24:	d104      	bne.n	8007e30 <__swbuf_r+0x6c>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 ffa5 	bl	8008d78 <_fflush_r>
 8007e2e:	b988      	cbnz	r0, 8007e54 <__swbuf_r+0x90>
 8007e30:	4638      	mov	r0, r7
 8007e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <__swbuf_r+0x9c>)
 8007e36:	429c      	cmp	r4, r3
 8007e38:	d101      	bne.n	8007e3e <__swbuf_r+0x7a>
 8007e3a:	68ac      	ldr	r4, [r5, #8]
 8007e3c:	e7cf      	b.n	8007dde <__swbuf_r+0x1a>
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <__swbuf_r+0xa0>)
 8007e40:	429c      	cmp	r4, r3
 8007e42:	bf08      	it	eq
 8007e44:	68ec      	ldreq	r4, [r5, #12]
 8007e46:	e7ca      	b.n	8007dde <__swbuf_r+0x1a>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 f80c 	bl	8007e68 <__swsetup_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d0cb      	beq.n	8007dec <__swbuf_r+0x28>
 8007e54:	f04f 37ff 	mov.w	r7, #4294967295
 8007e58:	e7ea      	b.n	8007e30 <__swbuf_r+0x6c>
 8007e5a:	bf00      	nop
 8007e5c:	0800afec 	.word	0x0800afec
 8007e60:	0800b00c 	.word	0x0800b00c
 8007e64:	0800afcc 	.word	0x0800afcc

08007e68 <__swsetup_r>:
 8007e68:	4b32      	ldr	r3, [pc, #200]	; (8007f34 <__swsetup_r+0xcc>)
 8007e6a:	b570      	push	{r4, r5, r6, lr}
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460c      	mov	r4, r1
 8007e72:	b125      	cbz	r5, 8007e7e <__swsetup_r+0x16>
 8007e74:	69ab      	ldr	r3, [r5, #24]
 8007e76:	b913      	cbnz	r3, 8007e7e <__swsetup_r+0x16>
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f001 f811 	bl	8008ea0 <__sinit>
 8007e7e:	4b2e      	ldr	r3, [pc, #184]	; (8007f38 <__swsetup_r+0xd0>)
 8007e80:	429c      	cmp	r4, r3
 8007e82:	d10f      	bne.n	8007ea4 <__swsetup_r+0x3c>
 8007e84:	686c      	ldr	r4, [r5, #4]
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e8c:	0719      	lsls	r1, r3, #28
 8007e8e:	d42c      	bmi.n	8007eea <__swsetup_r+0x82>
 8007e90:	06dd      	lsls	r5, r3, #27
 8007e92:	d411      	bmi.n	8007eb8 <__swsetup_r+0x50>
 8007e94:	2309      	movs	r3, #9
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e03e      	b.n	8007f22 <__swsetup_r+0xba>
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <__swsetup_r+0xd4>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d101      	bne.n	8007eae <__swsetup_r+0x46>
 8007eaa:	68ac      	ldr	r4, [r5, #8]
 8007eac:	e7eb      	b.n	8007e86 <__swsetup_r+0x1e>
 8007eae:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <__swsetup_r+0xd8>)
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	bf08      	it	eq
 8007eb4:	68ec      	ldreq	r4, [r5, #12]
 8007eb6:	e7e6      	b.n	8007e86 <__swsetup_r+0x1e>
 8007eb8:	0758      	lsls	r0, r3, #29
 8007eba:	d512      	bpl.n	8007ee2 <__swsetup_r+0x7a>
 8007ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ebe:	b141      	cbz	r1, 8007ed2 <__swsetup_r+0x6a>
 8007ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d002      	beq.n	8007ece <__swsetup_r+0x66>
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f002 f95f 	bl	800a18c <_free_r>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ed8:	81a3      	strh	r3, [r4, #12]
 8007eda:	2300      	movs	r3, #0
 8007edc:	6063      	str	r3, [r4, #4]
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f043 0308 	orr.w	r3, r3, #8
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	b94b      	cbnz	r3, 8007f02 <__swsetup_r+0x9a>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef8:	d003      	beq.n	8007f02 <__swsetup_r+0x9a>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4630      	mov	r0, r6
 8007efe:	f001 fc11 	bl	8009724 <__smakebuf_r>
 8007f02:	89a0      	ldrh	r0, [r4, #12]
 8007f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f08:	f010 0301 	ands.w	r3, r0, #1
 8007f0c:	d00a      	beq.n	8007f24 <__swsetup_r+0xbc>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60a3      	str	r3, [r4, #8]
 8007f12:	6963      	ldr	r3, [r4, #20]
 8007f14:	425b      	negs	r3, r3
 8007f16:	61a3      	str	r3, [r4, #24]
 8007f18:	6923      	ldr	r3, [r4, #16]
 8007f1a:	b943      	cbnz	r3, 8007f2e <__swsetup_r+0xc6>
 8007f1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f20:	d1ba      	bne.n	8007e98 <__swsetup_r+0x30>
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	0781      	lsls	r1, r0, #30
 8007f26:	bf58      	it	pl
 8007f28:	6963      	ldrpl	r3, [r4, #20]
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	e7f4      	b.n	8007f18 <__swsetup_r+0xb0>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e7f7      	b.n	8007f22 <__swsetup_r+0xba>
 8007f32:	bf00      	nop
 8007f34:	20000500 	.word	0x20000500
 8007f38:	0800afec 	.word	0x0800afec
 8007f3c:	0800b00c 	.word	0x0800b00c
 8007f40:	0800afcc 	.word	0x0800afcc

08007f44 <__assert_func>:
 8007f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f46:	4614      	mov	r4, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <__assert_func+0x2c>)
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68d8      	ldr	r0, [r3, #12]
 8007f52:	b14c      	cbz	r4, 8007f68 <__assert_func+0x24>
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <__assert_func+0x30>)
 8007f56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f5a:	9100      	str	r1, [sp, #0]
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	4906      	ldr	r1, [pc, #24]	; (8007f78 <__assert_func+0x34>)
 8007f60:	f001 f81c 	bl	8008f9c <fiprintf>
 8007f64:	f002 fd2e 	bl	800a9c4 <abort>
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <__assert_func+0x38>)
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	e7f3      	b.n	8007f56 <__assert_func+0x12>
 8007f6e:	bf00      	nop
 8007f70:	20000500 	.word	0x20000500
 8007f74:	0800ae14 	.word	0x0800ae14
 8007f78:	0800ae21 	.word	0x0800ae21
 8007f7c:	0800ae4f 	.word	0x0800ae4f

08007f80 <quorem>:
 8007f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	6903      	ldr	r3, [r0, #16]
 8007f86:	690c      	ldr	r4, [r1, #16]
 8007f88:	4607      	mov	r7, r0
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	f2c0 8082 	blt.w	8008094 <quorem+0x114>
 8007f90:	3c01      	subs	r4, #1
 8007f92:	f100 0514 	add.w	r5, r0, #20
 8007f96:	f101 0814 	add.w	r8, r1, #20
 8007f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	429a      	cmp	r2, r3
 8007fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fb8:	d331      	bcc.n	800801e <quorem+0x9e>
 8007fba:	f04f 0e00 	mov.w	lr, #0
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	46ac      	mov	ip, r5
 8007fc2:	46f2      	mov	sl, lr
 8007fc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fc8:	b293      	uxth	r3, r2
 8007fca:	fb06 e303 	mla	r3, r6, r3, lr
 8007fce:	0c12      	lsrs	r2, r2, #16
 8007fd0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8007fda:	ebaa 0303 	sub.w	r3, sl, r3
 8007fde:	f8dc a000 	ldr.w	sl, [ip]
 8007fe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fe6:	fa1f fa8a 	uxth.w	sl, sl
 8007fea:	4453      	add	r3, sl
 8007fec:	f8dc a000 	ldr.w	sl, [ip]
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008000:	4581      	cmp	r9, r0
 8008002:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008006:	f84c 3b04 	str.w	r3, [ip], #4
 800800a:	d2db      	bcs.n	8007fc4 <quorem+0x44>
 800800c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008010:	b92b      	cbnz	r3, 800801e <quorem+0x9e>
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	3b04      	subs	r3, #4
 8008016:	429d      	cmp	r5, r3
 8008018:	461a      	mov	r2, r3
 800801a:	d32f      	bcc.n	800807c <quorem+0xfc>
 800801c:	613c      	str	r4, [r7, #16]
 800801e:	4638      	mov	r0, r7
 8008020:	f001 feb0 	bl	8009d84 <__mcmp>
 8008024:	2800      	cmp	r0, #0
 8008026:	db25      	blt.n	8008074 <quorem+0xf4>
 8008028:	4628      	mov	r0, r5
 800802a:	f04f 0c00 	mov.w	ip, #0
 800802e:	3601      	adds	r6, #1
 8008030:	f858 1b04 	ldr.w	r1, [r8], #4
 8008034:	f8d0 e000 	ldr.w	lr, [r0]
 8008038:	b28b      	uxth	r3, r1
 800803a:	ebac 0303 	sub.w	r3, ip, r3
 800803e:	fa1f f28e 	uxth.w	r2, lr
 8008042:	4413      	add	r3, r2
 8008044:	0c0a      	lsrs	r2, r1, #16
 8008046:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800804a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008054:	45c1      	cmp	r9, r8
 8008056:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800805a:	f840 3b04 	str.w	r3, [r0], #4
 800805e:	d2e7      	bcs.n	8008030 <quorem+0xb0>
 8008060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008068:	b922      	cbnz	r2, 8008074 <quorem+0xf4>
 800806a:	3b04      	subs	r3, #4
 800806c:	429d      	cmp	r5, r3
 800806e:	461a      	mov	r2, r3
 8008070:	d30a      	bcc.n	8008088 <quorem+0x108>
 8008072:	613c      	str	r4, [r7, #16]
 8008074:	4630      	mov	r0, r6
 8008076:	b003      	add	sp, #12
 8008078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	3b04      	subs	r3, #4
 8008080:	2a00      	cmp	r2, #0
 8008082:	d1cb      	bne.n	800801c <quorem+0x9c>
 8008084:	3c01      	subs	r4, #1
 8008086:	e7c6      	b.n	8008016 <quorem+0x96>
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	3b04      	subs	r3, #4
 800808c:	2a00      	cmp	r2, #0
 800808e:	d1f0      	bne.n	8008072 <quorem+0xf2>
 8008090:	3c01      	subs	r4, #1
 8008092:	e7eb      	b.n	800806c <quorem+0xec>
 8008094:	2000      	movs	r0, #0
 8008096:	e7ee      	b.n	8008076 <quorem+0xf6>

08008098 <_dtoa_r>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	4616      	mov	r6, r2
 800809e:	461f      	mov	r7, r3
 80080a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080a2:	b099      	sub	sp, #100	; 0x64
 80080a4:	4605      	mov	r5, r0
 80080a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80080ae:	b974      	cbnz	r4, 80080ce <_dtoa_r+0x36>
 80080b0:	2010      	movs	r0, #16
 80080b2:	f001 fb77 	bl	80097a4 <malloc>
 80080b6:	4602      	mov	r2, r0
 80080b8:	6268      	str	r0, [r5, #36]	; 0x24
 80080ba:	b920      	cbnz	r0, 80080c6 <_dtoa_r+0x2e>
 80080bc:	21ea      	movs	r1, #234	; 0xea
 80080be:	4ba8      	ldr	r3, [pc, #672]	; (8008360 <_dtoa_r+0x2c8>)
 80080c0:	48a8      	ldr	r0, [pc, #672]	; (8008364 <_dtoa_r+0x2cc>)
 80080c2:	f7ff ff3f 	bl	8007f44 <__assert_func>
 80080c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080ca:	6004      	str	r4, [r0, #0]
 80080cc:	60c4      	str	r4, [r0, #12]
 80080ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080d0:	6819      	ldr	r1, [r3, #0]
 80080d2:	b151      	cbz	r1, 80080ea <_dtoa_r+0x52>
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	2301      	movs	r3, #1
 80080d8:	4093      	lsls	r3, r2
 80080da:	604a      	str	r2, [r1, #4]
 80080dc:	608b      	str	r3, [r1, #8]
 80080de:	4628      	mov	r0, r5
 80080e0:	f001 fbc8 	bl	8009874 <_Bfree>
 80080e4:	2200      	movs	r2, #0
 80080e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	1e3b      	subs	r3, r7, #0
 80080ec:	bfaf      	iteee	ge
 80080ee:	2300      	movge	r3, #0
 80080f0:	2201      	movlt	r2, #1
 80080f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080f6:	9305      	strlt	r3, [sp, #20]
 80080f8:	bfa8      	it	ge
 80080fa:	f8c8 3000 	strge.w	r3, [r8]
 80080fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008102:	4b99      	ldr	r3, [pc, #612]	; (8008368 <_dtoa_r+0x2d0>)
 8008104:	bfb8      	it	lt
 8008106:	f8c8 2000 	strlt.w	r2, [r8]
 800810a:	ea33 0309 	bics.w	r3, r3, r9
 800810e:	d119      	bne.n	8008144 <_dtoa_r+0xac>
 8008110:	f242 730f 	movw	r3, #9999	; 0x270f
 8008114:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800811c:	4333      	orrs	r3, r6
 800811e:	f000 857f 	beq.w	8008c20 <_dtoa_r+0xb88>
 8008122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008124:	b953      	cbnz	r3, 800813c <_dtoa_r+0xa4>
 8008126:	4b91      	ldr	r3, [pc, #580]	; (800836c <_dtoa_r+0x2d4>)
 8008128:	e022      	b.n	8008170 <_dtoa_r+0xd8>
 800812a:	4b91      	ldr	r3, [pc, #580]	; (8008370 <_dtoa_r+0x2d8>)
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	3308      	adds	r3, #8
 8008130:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	9803      	ldr	r0, [sp, #12]
 8008136:	b019      	add	sp, #100	; 0x64
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	4b8b      	ldr	r3, [pc, #556]	; (800836c <_dtoa_r+0x2d4>)
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	3303      	adds	r3, #3
 8008142:	e7f5      	b.n	8008130 <_dtoa_r+0x98>
 8008144:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008148:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800814c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008150:	2200      	movs	r2, #0
 8008152:	2300      	movs	r3, #0
 8008154:	f7f8 fca2 	bl	8000a9c <__aeabi_dcmpeq>
 8008158:	4680      	mov	r8, r0
 800815a:	b158      	cbz	r0, 8008174 <_dtoa_r+0xdc>
 800815c:	2301      	movs	r3, #1
 800815e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8558 	beq.w	8008c1a <_dtoa_r+0xb82>
 800816a:	4882      	ldr	r0, [pc, #520]	; (8008374 <_dtoa_r+0x2dc>)
 800816c:	6018      	str	r0, [r3, #0]
 800816e:	1e43      	subs	r3, r0, #1
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	e7df      	b.n	8008134 <_dtoa_r+0x9c>
 8008174:	ab16      	add	r3, sp, #88	; 0x58
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	ab17      	add	r3, sp, #92	; 0x5c
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4628      	mov	r0, r5
 800817e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008182:	f001 ff21 	bl	8009fc8 <__d2b>
 8008186:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800818a:	4683      	mov	fp, r0
 800818c:	2c00      	cmp	r4, #0
 800818e:	d07f      	beq.n	8008290 <_dtoa_r+0x1f8>
 8008190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008196:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800819a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800819e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80081a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80081a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80081aa:	2200      	movs	r2, #0
 80081ac:	4b72      	ldr	r3, [pc, #456]	; (8008378 <_dtoa_r+0x2e0>)
 80081ae:	f7f8 f855 	bl	800025c <__aeabi_dsub>
 80081b2:	a365      	add	r3, pc, #404	; (adr r3, 8008348 <_dtoa_r+0x2b0>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f8 fa08 	bl	80005cc <__aeabi_dmul>
 80081bc:	a364      	add	r3, pc, #400	; (adr r3, 8008350 <_dtoa_r+0x2b8>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f84d 	bl	8000260 <__adddf3>
 80081c6:	4606      	mov	r6, r0
 80081c8:	4620      	mov	r0, r4
 80081ca:	460f      	mov	r7, r1
 80081cc:	f7f8 f994 	bl	80004f8 <__aeabi_i2d>
 80081d0:	a361      	add	r3, pc, #388	; (adr r3, 8008358 <_dtoa_r+0x2c0>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 f9f9 	bl	80005cc <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	f7f8 f83d 	bl	8000260 <__adddf3>
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	f7f8 fc9f 	bl	8000b2c <__aeabi_d2iz>
 80081ee:	2200      	movs	r2, #0
 80081f0:	4682      	mov	sl, r0
 80081f2:	2300      	movs	r3, #0
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f7f8 fc5a 	bl	8000ab0 <__aeabi_dcmplt>
 80081fc:	b148      	cbz	r0, 8008212 <_dtoa_r+0x17a>
 80081fe:	4650      	mov	r0, sl
 8008200:	f7f8 f97a 	bl	80004f8 <__aeabi_i2d>
 8008204:	4632      	mov	r2, r6
 8008206:	463b      	mov	r3, r7
 8008208:	f7f8 fc48 	bl	8000a9c <__aeabi_dcmpeq>
 800820c:	b908      	cbnz	r0, 8008212 <_dtoa_r+0x17a>
 800820e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008212:	f1ba 0f16 	cmp.w	sl, #22
 8008216:	d858      	bhi.n	80082ca <_dtoa_r+0x232>
 8008218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800821c:	4b57      	ldr	r3, [pc, #348]	; (800837c <_dtoa_r+0x2e4>)
 800821e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 fc43 	bl	8000ab0 <__aeabi_dcmplt>
 800822a:	2800      	cmp	r0, #0
 800822c:	d04f      	beq.n	80082ce <_dtoa_r+0x236>
 800822e:	2300      	movs	r3, #0
 8008230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008234:	930f      	str	r3, [sp, #60]	; 0x3c
 8008236:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008238:	1b1c      	subs	r4, r3, r4
 800823a:	1e63      	subs	r3, r4, #1
 800823c:	9309      	str	r3, [sp, #36]	; 0x24
 800823e:	bf49      	itett	mi
 8008240:	f1c4 0301 	rsbmi	r3, r4, #1
 8008244:	2300      	movpl	r3, #0
 8008246:	9306      	strmi	r3, [sp, #24]
 8008248:	2300      	movmi	r3, #0
 800824a:	bf54      	ite	pl
 800824c:	9306      	strpl	r3, [sp, #24]
 800824e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008250:	f1ba 0f00 	cmp.w	sl, #0
 8008254:	db3d      	blt.n	80082d2 <_dtoa_r+0x23a>
 8008256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008258:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800825c:	4453      	add	r3, sl
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	2300      	movs	r3, #0
 8008262:	930a      	str	r3, [sp, #40]	; 0x28
 8008264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008266:	2b09      	cmp	r3, #9
 8008268:	f200 808c 	bhi.w	8008384 <_dtoa_r+0x2ec>
 800826c:	2b05      	cmp	r3, #5
 800826e:	bfc4      	itt	gt
 8008270:	3b04      	subgt	r3, #4
 8008272:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008276:	bfc8      	it	gt
 8008278:	2400      	movgt	r4, #0
 800827a:	f1a3 0302 	sub.w	r3, r3, #2
 800827e:	bfd8      	it	le
 8008280:	2401      	movle	r4, #1
 8008282:	2b03      	cmp	r3, #3
 8008284:	f200 808a 	bhi.w	800839c <_dtoa_r+0x304>
 8008288:	e8df f003 	tbb	[pc, r3]
 800828c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008290:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008294:	441c      	add	r4, r3
 8008296:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800829a:	2b20      	cmp	r3, #32
 800829c:	bfc3      	ittte	gt
 800829e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80082a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80082aa:	f1c3 0320 	rsble	r3, r3, #32
 80082ae:	bfc6      	itte	gt
 80082b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082b4:	4318      	orrgt	r0, r3
 80082b6:	fa06 f003 	lslle.w	r0, r6, r3
 80082ba:	f7f8 f90d 	bl	80004d8 <__aeabi_ui2d>
 80082be:	2301      	movs	r3, #1
 80082c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80082c4:	3c01      	subs	r4, #1
 80082c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80082c8:	e76f      	b.n	80081aa <_dtoa_r+0x112>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e7b2      	b.n	8008234 <_dtoa_r+0x19c>
 80082ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80082d0:	e7b1      	b.n	8008236 <_dtoa_r+0x19e>
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	eba3 030a 	sub.w	r3, r3, sl
 80082d8:	9306      	str	r3, [sp, #24]
 80082da:	f1ca 0300 	rsb	r3, sl, #0
 80082de:	930a      	str	r3, [sp, #40]	; 0x28
 80082e0:	2300      	movs	r3, #0
 80082e2:	930e      	str	r3, [sp, #56]	; 0x38
 80082e4:	e7be      	b.n	8008264 <_dtoa_r+0x1cc>
 80082e6:	2300      	movs	r3, #0
 80082e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dc58      	bgt.n	80083a2 <_dtoa_r+0x30a>
 80082f0:	f04f 0901 	mov.w	r9, #1
 80082f4:	464b      	mov	r3, r9
 80082f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80082fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80082fe:	2200      	movs	r2, #0
 8008300:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008302:	6042      	str	r2, [r0, #4]
 8008304:	2204      	movs	r2, #4
 8008306:	f102 0614 	add.w	r6, r2, #20
 800830a:	429e      	cmp	r6, r3
 800830c:	6841      	ldr	r1, [r0, #4]
 800830e:	d94e      	bls.n	80083ae <_dtoa_r+0x316>
 8008310:	4628      	mov	r0, r5
 8008312:	f001 fa6f 	bl	80097f4 <_Balloc>
 8008316:	9003      	str	r0, [sp, #12]
 8008318:	2800      	cmp	r0, #0
 800831a:	d14c      	bne.n	80083b6 <_dtoa_r+0x31e>
 800831c:	4602      	mov	r2, r0
 800831e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008322:	4b17      	ldr	r3, [pc, #92]	; (8008380 <_dtoa_r+0x2e8>)
 8008324:	e6cc      	b.n	80080c0 <_dtoa_r+0x28>
 8008326:	2301      	movs	r3, #1
 8008328:	e7de      	b.n	80082e8 <_dtoa_r+0x250>
 800832a:	2300      	movs	r3, #0
 800832c:	930b      	str	r3, [sp, #44]	; 0x2c
 800832e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008330:	eb0a 0903 	add.w	r9, sl, r3
 8008334:	f109 0301 	add.w	r3, r9, #1
 8008338:	2b01      	cmp	r3, #1
 800833a:	9308      	str	r3, [sp, #32]
 800833c:	bfb8      	it	lt
 800833e:	2301      	movlt	r3, #1
 8008340:	e7dd      	b.n	80082fe <_dtoa_r+0x266>
 8008342:	2301      	movs	r3, #1
 8008344:	e7f2      	b.n	800832c <_dtoa_r+0x294>
 8008346:	bf00      	nop
 8008348:	636f4361 	.word	0x636f4361
 800834c:	3fd287a7 	.word	0x3fd287a7
 8008350:	8b60c8b3 	.word	0x8b60c8b3
 8008354:	3fc68a28 	.word	0x3fc68a28
 8008358:	509f79fb 	.word	0x509f79fb
 800835c:	3fd34413 	.word	0x3fd34413
 8008360:	0800ada0 	.word	0x0800ada0
 8008364:	0800af5e 	.word	0x0800af5e
 8008368:	7ff00000 	.word	0x7ff00000
 800836c:	0800af5a 	.word	0x0800af5a
 8008370:	0800af51 	.word	0x0800af51
 8008374:	0800ad21 	.word	0x0800ad21
 8008378:	3ff80000 	.word	0x3ff80000
 800837c:	0800b130 	.word	0x0800b130
 8008380:	0800afb9 	.word	0x0800afb9
 8008384:	2401      	movs	r4, #1
 8008386:	2300      	movs	r3, #0
 8008388:	940b      	str	r4, [sp, #44]	; 0x2c
 800838a:	9322      	str	r3, [sp, #136]	; 0x88
 800838c:	f04f 39ff 	mov.w	r9, #4294967295
 8008390:	2200      	movs	r2, #0
 8008392:	2312      	movs	r3, #18
 8008394:	f8cd 9020 	str.w	r9, [sp, #32]
 8008398:	9223      	str	r2, [sp, #140]	; 0x8c
 800839a:	e7b0      	b.n	80082fe <_dtoa_r+0x266>
 800839c:	2301      	movs	r3, #1
 800839e:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a0:	e7f4      	b.n	800838c <_dtoa_r+0x2f4>
 80083a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80083a6:	464b      	mov	r3, r9
 80083a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80083ac:	e7a7      	b.n	80082fe <_dtoa_r+0x266>
 80083ae:	3101      	adds	r1, #1
 80083b0:	6041      	str	r1, [r0, #4]
 80083b2:	0052      	lsls	r2, r2, #1
 80083b4:	e7a7      	b.n	8008306 <_dtoa_r+0x26e>
 80083b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083b8:	9a03      	ldr	r2, [sp, #12]
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	2b0e      	cmp	r3, #14
 80083c0:	f200 80a8 	bhi.w	8008514 <_dtoa_r+0x47c>
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	f000 80a5 	beq.w	8008514 <_dtoa_r+0x47c>
 80083ca:	f1ba 0f00 	cmp.w	sl, #0
 80083ce:	dd34      	ble.n	800843a <_dtoa_r+0x3a2>
 80083d0:	4a9a      	ldr	r2, [pc, #616]	; (800863c <_dtoa_r+0x5a4>)
 80083d2:	f00a 030f 	and.w	r3, sl, #15
 80083d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80083de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80083ea:	d016      	beq.n	800841a <_dtoa_r+0x382>
 80083ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083f0:	4b93      	ldr	r3, [pc, #588]	; (8008640 <_dtoa_r+0x5a8>)
 80083f2:	2703      	movs	r7, #3
 80083f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083f8:	f7f8 fa12 	bl	8000820 <__aeabi_ddiv>
 80083fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008400:	f004 040f 	and.w	r4, r4, #15
 8008404:	4e8e      	ldr	r6, [pc, #568]	; (8008640 <_dtoa_r+0x5a8>)
 8008406:	b954      	cbnz	r4, 800841e <_dtoa_r+0x386>
 8008408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800840c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008410:	f7f8 fa06 	bl	8000820 <__aeabi_ddiv>
 8008414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008418:	e029      	b.n	800846e <_dtoa_r+0x3d6>
 800841a:	2702      	movs	r7, #2
 800841c:	e7f2      	b.n	8008404 <_dtoa_r+0x36c>
 800841e:	07e1      	lsls	r1, r4, #31
 8008420:	d508      	bpl.n	8008434 <_dtoa_r+0x39c>
 8008422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800842a:	f7f8 f8cf 	bl	80005cc <__aeabi_dmul>
 800842e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008432:	3701      	adds	r7, #1
 8008434:	1064      	asrs	r4, r4, #1
 8008436:	3608      	adds	r6, #8
 8008438:	e7e5      	b.n	8008406 <_dtoa_r+0x36e>
 800843a:	f000 80a5 	beq.w	8008588 <_dtoa_r+0x4f0>
 800843e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008442:	f1ca 0400 	rsb	r4, sl, #0
 8008446:	4b7d      	ldr	r3, [pc, #500]	; (800863c <_dtoa_r+0x5a4>)
 8008448:	f004 020f 	and.w	r2, r4, #15
 800844c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f7f8 f8ba 	bl	80005cc <__aeabi_dmul>
 8008458:	2702      	movs	r7, #2
 800845a:	2300      	movs	r3, #0
 800845c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008460:	4e77      	ldr	r6, [pc, #476]	; (8008640 <_dtoa_r+0x5a8>)
 8008462:	1124      	asrs	r4, r4, #4
 8008464:	2c00      	cmp	r4, #0
 8008466:	f040 8084 	bne.w	8008572 <_dtoa_r+0x4da>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1d2      	bne.n	8008414 <_dtoa_r+0x37c>
 800846e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 808b 	beq.w	800858c <_dtoa_r+0x4f4>
 8008476:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800847a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800847e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008482:	2200      	movs	r2, #0
 8008484:	4b6f      	ldr	r3, [pc, #444]	; (8008644 <_dtoa_r+0x5ac>)
 8008486:	f7f8 fb13 	bl	8000ab0 <__aeabi_dcmplt>
 800848a:	2800      	cmp	r0, #0
 800848c:	d07e      	beq.n	800858c <_dtoa_r+0x4f4>
 800848e:	9b08      	ldr	r3, [sp, #32]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d07b      	beq.n	800858c <_dtoa_r+0x4f4>
 8008494:	f1b9 0f00 	cmp.w	r9, #0
 8008498:	dd38      	ble.n	800850c <_dtoa_r+0x474>
 800849a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800849e:	2200      	movs	r2, #0
 80084a0:	4b69      	ldr	r3, [pc, #420]	; (8008648 <_dtoa_r+0x5b0>)
 80084a2:	f7f8 f893 	bl	80005cc <__aeabi_dmul>
 80084a6:	464c      	mov	r4, r9
 80084a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 80084b0:	3701      	adds	r7, #1
 80084b2:	4638      	mov	r0, r7
 80084b4:	f7f8 f820 	bl	80004f8 <__aeabi_i2d>
 80084b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084bc:	f7f8 f886 	bl	80005cc <__aeabi_dmul>
 80084c0:	2200      	movs	r2, #0
 80084c2:	4b62      	ldr	r3, [pc, #392]	; (800864c <_dtoa_r+0x5b4>)
 80084c4:	f7f7 fecc 	bl	8000260 <__adddf3>
 80084c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084d0:	9611      	str	r6, [sp, #68]	; 0x44
 80084d2:	2c00      	cmp	r4, #0
 80084d4:	d15d      	bne.n	8008592 <_dtoa_r+0x4fa>
 80084d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084da:	2200      	movs	r2, #0
 80084dc:	4b5c      	ldr	r3, [pc, #368]	; (8008650 <_dtoa_r+0x5b8>)
 80084de:	f7f7 febd 	bl	800025c <__aeabi_dsub>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084ea:	4633      	mov	r3, r6
 80084ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084ee:	f7f8 fafd 	bl	8000aec <__aeabi_dcmpgt>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f040 829c 	bne.w	8008a30 <_dtoa_r+0x998>
 80084f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008502:	f7f8 fad5 	bl	8000ab0 <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	f040 8290 	bne.w	8008a2c <_dtoa_r+0x994>
 800850c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008510:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008516:	2b00      	cmp	r3, #0
 8008518:	f2c0 8152 	blt.w	80087c0 <_dtoa_r+0x728>
 800851c:	f1ba 0f0e 	cmp.w	sl, #14
 8008520:	f300 814e 	bgt.w	80087c0 <_dtoa_r+0x728>
 8008524:	4b45      	ldr	r3, [pc, #276]	; (800863c <_dtoa_r+0x5a4>)
 8008526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800852a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800852e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008534:	2b00      	cmp	r3, #0
 8008536:	f280 80db 	bge.w	80086f0 <_dtoa_r+0x658>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f300 80d7 	bgt.w	80086f0 <_dtoa_r+0x658>
 8008542:	f040 8272 	bne.w	8008a2a <_dtoa_r+0x992>
 8008546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800854a:	2200      	movs	r2, #0
 800854c:	4b40      	ldr	r3, [pc, #256]	; (8008650 <_dtoa_r+0x5b8>)
 800854e:	f7f8 f83d 	bl	80005cc <__aeabi_dmul>
 8008552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008556:	f7f8 fabf 	bl	8000ad8 <__aeabi_dcmpge>
 800855a:	9c08      	ldr	r4, [sp, #32]
 800855c:	4626      	mov	r6, r4
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8248 	bne.w	80089f4 <_dtoa_r+0x95c>
 8008564:	2331      	movs	r3, #49	; 0x31
 8008566:	9f03      	ldr	r7, [sp, #12]
 8008568:	f10a 0a01 	add.w	sl, sl, #1
 800856c:	f807 3b01 	strb.w	r3, [r7], #1
 8008570:	e244      	b.n	80089fc <_dtoa_r+0x964>
 8008572:	07e2      	lsls	r2, r4, #31
 8008574:	d505      	bpl.n	8008582 <_dtoa_r+0x4ea>
 8008576:	e9d6 2300 	ldrd	r2, r3, [r6]
 800857a:	f7f8 f827 	bl	80005cc <__aeabi_dmul>
 800857e:	2301      	movs	r3, #1
 8008580:	3701      	adds	r7, #1
 8008582:	1064      	asrs	r4, r4, #1
 8008584:	3608      	adds	r6, #8
 8008586:	e76d      	b.n	8008464 <_dtoa_r+0x3cc>
 8008588:	2702      	movs	r7, #2
 800858a:	e770      	b.n	800846e <_dtoa_r+0x3d6>
 800858c:	46d0      	mov	r8, sl
 800858e:	9c08      	ldr	r4, [sp, #32]
 8008590:	e78f      	b.n	80084b2 <_dtoa_r+0x41a>
 8008592:	9903      	ldr	r1, [sp, #12]
 8008594:	4b29      	ldr	r3, [pc, #164]	; (800863c <_dtoa_r+0x5a4>)
 8008596:	4421      	add	r1, r4
 8008598:	9112      	str	r1, [sp, #72]	; 0x48
 800859a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800859c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80085a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a8:	2900      	cmp	r1, #0
 80085aa:	d055      	beq.n	8008658 <_dtoa_r+0x5c0>
 80085ac:	2000      	movs	r0, #0
 80085ae:	4929      	ldr	r1, [pc, #164]	; (8008654 <_dtoa_r+0x5bc>)
 80085b0:	f7f8 f936 	bl	8000820 <__aeabi_ddiv>
 80085b4:	463b      	mov	r3, r7
 80085b6:	4632      	mov	r2, r6
 80085b8:	f7f7 fe50 	bl	800025c <__aeabi_dsub>
 80085bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085c0:	9f03      	ldr	r7, [sp, #12]
 80085c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c6:	f7f8 fab1 	bl	8000b2c <__aeabi_d2iz>
 80085ca:	4604      	mov	r4, r0
 80085cc:	f7f7 ff94 	bl	80004f8 <__aeabi_i2d>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085d8:	f7f7 fe40 	bl	800025c <__aeabi_dsub>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	3430      	adds	r4, #48	; 0x30
 80085e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085ea:	f807 4b01 	strb.w	r4, [r7], #1
 80085ee:	f7f8 fa5f 	bl	8000ab0 <__aeabi_dcmplt>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d174      	bne.n	80086e0 <_dtoa_r+0x648>
 80085f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fa:	2000      	movs	r0, #0
 80085fc:	4911      	ldr	r1, [pc, #68]	; (8008644 <_dtoa_r+0x5ac>)
 80085fe:	f7f7 fe2d 	bl	800025c <__aeabi_dsub>
 8008602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008606:	f7f8 fa53 	bl	8000ab0 <__aeabi_dcmplt>
 800860a:	2800      	cmp	r0, #0
 800860c:	f040 80b7 	bne.w	800877e <_dtoa_r+0x6e6>
 8008610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008612:	429f      	cmp	r7, r3
 8008614:	f43f af7a 	beq.w	800850c <_dtoa_r+0x474>
 8008618:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800861c:	2200      	movs	r2, #0
 800861e:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <_dtoa_r+0x5b0>)
 8008620:	f7f7 ffd4 	bl	80005cc <__aeabi_dmul>
 8008624:	2200      	movs	r2, #0
 8008626:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800862a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862e:	4b06      	ldr	r3, [pc, #24]	; (8008648 <_dtoa_r+0x5b0>)
 8008630:	f7f7 ffcc 	bl	80005cc <__aeabi_dmul>
 8008634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008638:	e7c3      	b.n	80085c2 <_dtoa_r+0x52a>
 800863a:	bf00      	nop
 800863c:	0800b130 	.word	0x0800b130
 8008640:	0800b108 	.word	0x0800b108
 8008644:	3ff00000 	.word	0x3ff00000
 8008648:	40240000 	.word	0x40240000
 800864c:	401c0000 	.word	0x401c0000
 8008650:	40140000 	.word	0x40140000
 8008654:	3fe00000 	.word	0x3fe00000
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f7 ffb6 	bl	80005cc <__aeabi_dmul>
 8008660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008662:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008666:	9c03      	ldr	r4, [sp, #12]
 8008668:	9314      	str	r3, [sp, #80]	; 0x50
 800866a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866e:	f7f8 fa5d 	bl	8000b2c <__aeabi_d2iz>
 8008672:	9015      	str	r0, [sp, #84]	; 0x54
 8008674:	f7f7 ff40 	bl	80004f8 <__aeabi_i2d>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008680:	f7f7 fdec 	bl	800025c <__aeabi_dsub>
 8008684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008686:	4606      	mov	r6, r0
 8008688:	3330      	adds	r3, #48	; 0x30
 800868a:	f804 3b01 	strb.w	r3, [r4], #1
 800868e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008690:	460f      	mov	r7, r1
 8008692:	429c      	cmp	r4, r3
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	d124      	bne.n	80086e4 <_dtoa_r+0x64c>
 800869a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800869e:	4bb0      	ldr	r3, [pc, #704]	; (8008960 <_dtoa_r+0x8c8>)
 80086a0:	f7f7 fdde 	bl	8000260 <__adddf3>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4630      	mov	r0, r6
 80086aa:	4639      	mov	r1, r7
 80086ac:	f7f8 fa1e 	bl	8000aec <__aeabi_dcmpgt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d163      	bne.n	800877c <_dtoa_r+0x6e4>
 80086b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086b8:	2000      	movs	r0, #0
 80086ba:	49a9      	ldr	r1, [pc, #676]	; (8008960 <_dtoa_r+0x8c8>)
 80086bc:	f7f7 fdce 	bl	800025c <__aeabi_dsub>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4630      	mov	r0, r6
 80086c6:	4639      	mov	r1, r7
 80086c8:	f7f8 f9f2 	bl	8000ab0 <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f af1d 	beq.w	800850c <_dtoa_r+0x474>
 80086d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086d4:	1e7b      	subs	r3, r7, #1
 80086d6:	9314      	str	r3, [sp, #80]	; 0x50
 80086d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80086dc:	2b30      	cmp	r3, #48	; 0x30
 80086de:	d0f8      	beq.n	80086d2 <_dtoa_r+0x63a>
 80086e0:	46c2      	mov	sl, r8
 80086e2:	e03b      	b.n	800875c <_dtoa_r+0x6c4>
 80086e4:	4b9f      	ldr	r3, [pc, #636]	; (8008964 <_dtoa_r+0x8cc>)
 80086e6:	f7f7 ff71 	bl	80005cc <__aeabi_dmul>
 80086ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ee:	e7bc      	b.n	800866a <_dtoa_r+0x5d2>
 80086f0:	9f03      	ldr	r7, [sp, #12]
 80086f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80086f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086fa:	4640      	mov	r0, r8
 80086fc:	4649      	mov	r1, r9
 80086fe:	f7f8 f88f 	bl	8000820 <__aeabi_ddiv>
 8008702:	f7f8 fa13 	bl	8000b2c <__aeabi_d2iz>
 8008706:	4604      	mov	r4, r0
 8008708:	f7f7 fef6 	bl	80004f8 <__aeabi_i2d>
 800870c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008710:	f7f7 ff5c 	bl	80005cc <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4640      	mov	r0, r8
 800871a:	4649      	mov	r1, r9
 800871c:	f7f7 fd9e 	bl	800025c <__aeabi_dsub>
 8008720:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008724:	f807 6b01 	strb.w	r6, [r7], #1
 8008728:	9e03      	ldr	r6, [sp, #12]
 800872a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800872e:	1bbe      	subs	r6, r7, r6
 8008730:	45b4      	cmp	ip, r6
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	d136      	bne.n	80087a6 <_dtoa_r+0x70e>
 8008738:	f7f7 fd92 	bl	8000260 <__adddf3>
 800873c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008740:	4680      	mov	r8, r0
 8008742:	4689      	mov	r9, r1
 8008744:	f7f8 f9d2 	bl	8000aec <__aeabi_dcmpgt>
 8008748:	bb58      	cbnz	r0, 80087a2 <_dtoa_r+0x70a>
 800874a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f8 f9a3 	bl	8000a9c <__aeabi_dcmpeq>
 8008756:	b108      	cbz	r0, 800875c <_dtoa_r+0x6c4>
 8008758:	07e1      	lsls	r1, r4, #31
 800875a:	d422      	bmi.n	80087a2 <_dtoa_r+0x70a>
 800875c:	4628      	mov	r0, r5
 800875e:	4659      	mov	r1, fp
 8008760:	f001 f888 	bl	8009874 <_Bfree>
 8008764:	2300      	movs	r3, #0
 8008766:	703b      	strb	r3, [r7, #0]
 8008768:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800876a:	f10a 0001 	add.w	r0, sl, #1
 800876e:	6018      	str	r0, [r3, #0]
 8008770:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008772:	2b00      	cmp	r3, #0
 8008774:	f43f acde 	beq.w	8008134 <_dtoa_r+0x9c>
 8008778:	601f      	str	r7, [r3, #0]
 800877a:	e4db      	b.n	8008134 <_dtoa_r+0x9c>
 800877c:	4627      	mov	r7, r4
 800877e:	463b      	mov	r3, r7
 8008780:	461f      	mov	r7, r3
 8008782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008786:	2a39      	cmp	r2, #57	; 0x39
 8008788:	d107      	bne.n	800879a <_dtoa_r+0x702>
 800878a:	9a03      	ldr	r2, [sp, #12]
 800878c:	429a      	cmp	r2, r3
 800878e:	d1f7      	bne.n	8008780 <_dtoa_r+0x6e8>
 8008790:	2230      	movs	r2, #48	; 0x30
 8008792:	9903      	ldr	r1, [sp, #12]
 8008794:	f108 0801 	add.w	r8, r8, #1
 8008798:	700a      	strb	r2, [r1, #0]
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	3201      	adds	r2, #1
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	e79e      	b.n	80086e0 <_dtoa_r+0x648>
 80087a2:	46d0      	mov	r8, sl
 80087a4:	e7eb      	b.n	800877e <_dtoa_r+0x6e6>
 80087a6:	2200      	movs	r2, #0
 80087a8:	4b6e      	ldr	r3, [pc, #440]	; (8008964 <_dtoa_r+0x8cc>)
 80087aa:	f7f7 ff0f 	bl	80005cc <__aeabi_dmul>
 80087ae:	2200      	movs	r2, #0
 80087b0:	2300      	movs	r3, #0
 80087b2:	4680      	mov	r8, r0
 80087b4:	4689      	mov	r9, r1
 80087b6:	f7f8 f971 	bl	8000a9c <__aeabi_dcmpeq>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d09b      	beq.n	80086f6 <_dtoa_r+0x65e>
 80087be:	e7cd      	b.n	800875c <_dtoa_r+0x6c4>
 80087c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	f000 80d0 	beq.w	8008968 <_dtoa_r+0x8d0>
 80087c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087ca:	2a01      	cmp	r2, #1
 80087cc:	f300 80ae 	bgt.w	800892c <_dtoa_r+0x894>
 80087d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087d2:	2a00      	cmp	r2, #0
 80087d4:	f000 80a6 	beq.w	8008924 <_dtoa_r+0x88c>
 80087d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087de:	9f06      	ldr	r7, [sp, #24]
 80087e0:	9a06      	ldr	r2, [sp, #24]
 80087e2:	2101      	movs	r1, #1
 80087e4:	441a      	add	r2, r3
 80087e6:	9206      	str	r2, [sp, #24]
 80087e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ea:	4628      	mov	r0, r5
 80087ec:	441a      	add	r2, r3
 80087ee:	9209      	str	r2, [sp, #36]	; 0x24
 80087f0:	f001 f940 	bl	8009a74 <__i2b>
 80087f4:	4606      	mov	r6, r0
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	dd0c      	ble.n	8008814 <_dtoa_r+0x77c>
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dd09      	ble.n	8008814 <_dtoa_r+0x77c>
 8008800:	42bb      	cmp	r3, r7
 8008802:	bfa8      	it	ge
 8008804:	463b      	movge	r3, r7
 8008806:	9a06      	ldr	r2, [sp, #24]
 8008808:	1aff      	subs	r7, r7, r3
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	9206      	str	r2, [sp, #24]
 800880e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	9309      	str	r3, [sp, #36]	; 0x24
 8008814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008816:	b1f3      	cbz	r3, 8008856 <_dtoa_r+0x7be>
 8008818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 80a8 	beq.w	8008970 <_dtoa_r+0x8d8>
 8008820:	2c00      	cmp	r4, #0
 8008822:	dd10      	ble.n	8008846 <_dtoa_r+0x7ae>
 8008824:	4631      	mov	r1, r6
 8008826:	4622      	mov	r2, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f001 f9e1 	bl	8009bf0 <__pow5mult>
 800882e:	465a      	mov	r2, fp
 8008830:	4601      	mov	r1, r0
 8008832:	4606      	mov	r6, r0
 8008834:	4628      	mov	r0, r5
 8008836:	f001 f933 	bl	8009aa0 <__multiply>
 800883a:	4680      	mov	r8, r0
 800883c:	4659      	mov	r1, fp
 800883e:	4628      	mov	r0, r5
 8008840:	f001 f818 	bl	8009874 <_Bfree>
 8008844:	46c3      	mov	fp, r8
 8008846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008848:	1b1a      	subs	r2, r3, r4
 800884a:	d004      	beq.n	8008856 <_dtoa_r+0x7be>
 800884c:	4659      	mov	r1, fp
 800884e:	4628      	mov	r0, r5
 8008850:	f001 f9ce 	bl	8009bf0 <__pow5mult>
 8008854:	4683      	mov	fp, r0
 8008856:	2101      	movs	r1, #1
 8008858:	4628      	mov	r0, r5
 800885a:	f001 f90b 	bl	8009a74 <__i2b>
 800885e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008860:	4604      	mov	r4, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	f340 8086 	ble.w	8008974 <_dtoa_r+0x8dc>
 8008868:	461a      	mov	r2, r3
 800886a:	4601      	mov	r1, r0
 800886c:	4628      	mov	r0, r5
 800886e:	f001 f9bf 	bl	8009bf0 <__pow5mult>
 8008872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008874:	4604      	mov	r4, r0
 8008876:	2b01      	cmp	r3, #1
 8008878:	dd7f      	ble.n	800897a <_dtoa_r+0x8e2>
 800887a:	f04f 0800 	mov.w	r8, #0
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008884:	6918      	ldr	r0, [r3, #16]
 8008886:	f001 f8a7 	bl	80099d8 <__hi0bits>
 800888a:	f1c0 0020 	rsb	r0, r0, #32
 800888e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008890:	4418      	add	r0, r3
 8008892:	f010 001f 	ands.w	r0, r0, #31
 8008896:	f000 8092 	beq.w	80089be <_dtoa_r+0x926>
 800889a:	f1c0 0320 	rsb	r3, r0, #32
 800889e:	2b04      	cmp	r3, #4
 80088a0:	f340 808a 	ble.w	80089b8 <_dtoa_r+0x920>
 80088a4:	f1c0 001c 	rsb	r0, r0, #28
 80088a8:	9b06      	ldr	r3, [sp, #24]
 80088aa:	4407      	add	r7, r0
 80088ac:	4403      	add	r3, r0
 80088ae:	9306      	str	r3, [sp, #24]
 80088b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b2:	4403      	add	r3, r0
 80088b4:	9309      	str	r3, [sp, #36]	; 0x24
 80088b6:	9b06      	ldr	r3, [sp, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dd05      	ble.n	80088c8 <_dtoa_r+0x830>
 80088bc:	4659      	mov	r1, fp
 80088be:	461a      	mov	r2, r3
 80088c0:	4628      	mov	r0, r5
 80088c2:	f001 f9ef 	bl	8009ca4 <__lshift>
 80088c6:	4683      	mov	fp, r0
 80088c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd05      	ble.n	80088da <_dtoa_r+0x842>
 80088ce:	4621      	mov	r1, r4
 80088d0:	461a      	mov	r2, r3
 80088d2:	4628      	mov	r0, r5
 80088d4:	f001 f9e6 	bl	8009ca4 <__lshift>
 80088d8:	4604      	mov	r4, r0
 80088da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d070      	beq.n	80089c2 <_dtoa_r+0x92a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4658      	mov	r0, fp
 80088e4:	f001 fa4e 	bl	8009d84 <__mcmp>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	da6a      	bge.n	80089c2 <_dtoa_r+0x92a>
 80088ec:	2300      	movs	r3, #0
 80088ee:	4659      	mov	r1, fp
 80088f0:	220a      	movs	r2, #10
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 ffe0 	bl	80098b8 <__multadd>
 80088f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088fa:	4683      	mov	fp, r0
 80088fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8194 	beq.w	8008c2e <_dtoa_r+0xb96>
 8008906:	4631      	mov	r1, r6
 8008908:	2300      	movs	r3, #0
 800890a:	220a      	movs	r2, #10
 800890c:	4628      	mov	r0, r5
 800890e:	f000 ffd3 	bl	80098b8 <__multadd>
 8008912:	f1b9 0f00 	cmp.w	r9, #0
 8008916:	4606      	mov	r6, r0
 8008918:	f300 8093 	bgt.w	8008a42 <_dtoa_r+0x9aa>
 800891c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800891e:	2b02      	cmp	r3, #2
 8008920:	dc57      	bgt.n	80089d2 <_dtoa_r+0x93a>
 8008922:	e08e      	b.n	8008a42 <_dtoa_r+0x9aa>
 8008924:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800892a:	e757      	b.n	80087dc <_dtoa_r+0x744>
 800892c:	9b08      	ldr	r3, [sp, #32]
 800892e:	1e5c      	subs	r4, r3, #1
 8008930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008932:	42a3      	cmp	r3, r4
 8008934:	bfb7      	itett	lt
 8008936:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008938:	1b1c      	subge	r4, r3, r4
 800893a:	1ae2      	sublt	r2, r4, r3
 800893c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800893e:	bfbe      	ittt	lt
 8008940:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008942:	189b      	addlt	r3, r3, r2
 8008944:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008946:	9b08      	ldr	r3, [sp, #32]
 8008948:	bfb8      	it	lt
 800894a:	2400      	movlt	r4, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfbb      	ittet	lt
 8008950:	9b06      	ldrlt	r3, [sp, #24]
 8008952:	9a08      	ldrlt	r2, [sp, #32]
 8008954:	9f06      	ldrge	r7, [sp, #24]
 8008956:	1a9f      	sublt	r7, r3, r2
 8008958:	bfac      	ite	ge
 800895a:	9b08      	ldrge	r3, [sp, #32]
 800895c:	2300      	movlt	r3, #0
 800895e:	e73f      	b.n	80087e0 <_dtoa_r+0x748>
 8008960:	3fe00000 	.word	0x3fe00000
 8008964:	40240000 	.word	0x40240000
 8008968:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800896a:	9f06      	ldr	r7, [sp, #24]
 800896c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800896e:	e742      	b.n	80087f6 <_dtoa_r+0x75e>
 8008970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008972:	e76b      	b.n	800884c <_dtoa_r+0x7b4>
 8008974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008976:	2b01      	cmp	r3, #1
 8008978:	dc19      	bgt.n	80089ae <_dtoa_r+0x916>
 800897a:	9b04      	ldr	r3, [sp, #16]
 800897c:	b9bb      	cbnz	r3, 80089ae <_dtoa_r+0x916>
 800897e:	9b05      	ldr	r3, [sp, #20]
 8008980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008984:	b99b      	cbnz	r3, 80089ae <_dtoa_r+0x916>
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800898c:	0d1b      	lsrs	r3, r3, #20
 800898e:	051b      	lsls	r3, r3, #20
 8008990:	b183      	cbz	r3, 80089b4 <_dtoa_r+0x91c>
 8008992:	f04f 0801 	mov.w	r8, #1
 8008996:	9b06      	ldr	r3, [sp, #24]
 8008998:	3301      	adds	r3, #1
 800899a:	9306      	str	r3, [sp, #24]
 800899c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899e:	3301      	adds	r3, #1
 80089a0:	9309      	str	r3, [sp, #36]	; 0x24
 80089a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f47f af6a 	bne.w	800887e <_dtoa_r+0x7e6>
 80089aa:	2001      	movs	r0, #1
 80089ac:	e76f      	b.n	800888e <_dtoa_r+0x7f6>
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	e7f6      	b.n	80089a2 <_dtoa_r+0x90a>
 80089b4:	4698      	mov	r8, r3
 80089b6:	e7f4      	b.n	80089a2 <_dtoa_r+0x90a>
 80089b8:	f43f af7d 	beq.w	80088b6 <_dtoa_r+0x81e>
 80089bc:	4618      	mov	r0, r3
 80089be:	301c      	adds	r0, #28
 80089c0:	e772      	b.n	80088a8 <_dtoa_r+0x810>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dc36      	bgt.n	8008a36 <_dtoa_r+0x99e>
 80089c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	dd33      	ble.n	8008a36 <_dtoa_r+0x99e>
 80089ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	d10d      	bne.n	80089f4 <_dtoa_r+0x95c>
 80089d8:	4621      	mov	r1, r4
 80089da:	464b      	mov	r3, r9
 80089dc:	2205      	movs	r2, #5
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 ff6a 	bl	80098b8 <__multadd>
 80089e4:	4601      	mov	r1, r0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4658      	mov	r0, fp
 80089ea:	f001 f9cb 	bl	8009d84 <__mcmp>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f73f adb8 	bgt.w	8008564 <_dtoa_r+0x4cc>
 80089f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089f6:	9f03      	ldr	r7, [sp, #12]
 80089f8:	ea6f 0a03 	mvn.w	sl, r3
 80089fc:	f04f 0800 	mov.w	r8, #0
 8008a00:	4621      	mov	r1, r4
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 ff36 	bl	8009874 <_Bfree>
 8008a08:	2e00      	cmp	r6, #0
 8008a0a:	f43f aea7 	beq.w	800875c <_dtoa_r+0x6c4>
 8008a0e:	f1b8 0f00 	cmp.w	r8, #0
 8008a12:	d005      	beq.n	8008a20 <_dtoa_r+0x988>
 8008a14:	45b0      	cmp	r8, r6
 8008a16:	d003      	beq.n	8008a20 <_dtoa_r+0x988>
 8008a18:	4641      	mov	r1, r8
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 ff2a 	bl	8009874 <_Bfree>
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 ff26 	bl	8009874 <_Bfree>
 8008a28:	e698      	b.n	800875c <_dtoa_r+0x6c4>
 8008a2a:	2400      	movs	r4, #0
 8008a2c:	4626      	mov	r6, r4
 8008a2e:	e7e1      	b.n	80089f4 <_dtoa_r+0x95c>
 8008a30:	46c2      	mov	sl, r8
 8008a32:	4626      	mov	r6, r4
 8008a34:	e596      	b.n	8008564 <_dtoa_r+0x4cc>
 8008a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80fd 	beq.w	8008c3c <_dtoa_r+0xba4>
 8008a42:	2f00      	cmp	r7, #0
 8008a44:	dd05      	ble.n	8008a52 <_dtoa_r+0x9ba>
 8008a46:	4631      	mov	r1, r6
 8008a48:	463a      	mov	r2, r7
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f001 f92a 	bl	8009ca4 <__lshift>
 8008a50:	4606      	mov	r6, r0
 8008a52:	f1b8 0f00 	cmp.w	r8, #0
 8008a56:	d05c      	beq.n	8008b12 <_dtoa_r+0xa7a>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	6871      	ldr	r1, [r6, #4]
 8008a5c:	f000 feca 	bl	80097f4 <_Balloc>
 8008a60:	4607      	mov	r7, r0
 8008a62:	b928      	cbnz	r0, 8008a70 <_dtoa_r+0x9d8>
 8008a64:	4602      	mov	r2, r0
 8008a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a6a:	4b7f      	ldr	r3, [pc, #508]	; (8008c68 <_dtoa_r+0xbd0>)
 8008a6c:	f7ff bb28 	b.w	80080c0 <_dtoa_r+0x28>
 8008a70:	6932      	ldr	r2, [r6, #16]
 8008a72:	f106 010c 	add.w	r1, r6, #12
 8008a76:	3202      	adds	r2, #2
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	300c      	adds	r0, #12
 8008a7c:	f7fd fc04 	bl	8006288 <memcpy>
 8008a80:	2201      	movs	r2, #1
 8008a82:	4639      	mov	r1, r7
 8008a84:	4628      	mov	r0, r5
 8008a86:	f001 f90d 	bl	8009ca4 <__lshift>
 8008a8a:	46b0      	mov	r8, r6
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	444b      	add	r3, r9
 8008a98:	930a      	str	r3, [sp, #40]	; 0x28
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa2:	9b08      	ldr	r3, [sp, #32]
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	f7ff fa68 	bl	8007f80 <quorem>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4641      	mov	r1, r8
 8008ab4:	3330      	adds	r3, #48	; 0x30
 8008ab6:	9006      	str	r0, [sp, #24]
 8008ab8:	4658      	mov	r0, fp
 8008aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008abc:	f001 f962 	bl	8009d84 <__mcmp>
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4681      	mov	r9, r0
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f001 f978 	bl	8009dbc <__mdiff>
 8008acc:	68c2      	ldr	r2, [r0, #12]
 8008ace:	4607      	mov	r7, r0
 8008ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad2:	bb02      	cbnz	r2, 8008b16 <_dtoa_r+0xa7e>
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4658      	mov	r0, fp
 8008ad8:	f001 f954 	bl	8009d84 <__mcmp>
 8008adc:	4602      	mov	r2, r0
 8008ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008ae8:	f000 fec4 	bl	8009874 <_Bfree>
 8008aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008af0:	9f08      	ldr	r7, [sp, #32]
 8008af2:	ea43 0102 	orr.w	r1, r3, r2
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	430b      	orrs	r3, r1
 8008afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afc:	d10d      	bne.n	8008b1a <_dtoa_r+0xa82>
 8008afe:	2b39      	cmp	r3, #57	; 0x39
 8008b00:	d029      	beq.n	8008b56 <_dtoa_r+0xabe>
 8008b02:	f1b9 0f00 	cmp.w	r9, #0
 8008b06:	dd01      	ble.n	8008b0c <_dtoa_r+0xa74>
 8008b08:	9b06      	ldr	r3, [sp, #24]
 8008b0a:	3331      	adds	r3, #49	; 0x31
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	7013      	strb	r3, [r2, #0]
 8008b10:	e776      	b.n	8008a00 <_dtoa_r+0x968>
 8008b12:	4630      	mov	r0, r6
 8008b14:	e7b9      	b.n	8008a8a <_dtoa_r+0x9f2>
 8008b16:	2201      	movs	r2, #1
 8008b18:	e7e2      	b.n	8008ae0 <_dtoa_r+0xa48>
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	db06      	blt.n	8008b2e <_dtoa_r+0xa96>
 8008b20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008b22:	ea41 0909 	orr.w	r9, r1, r9
 8008b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b28:	ea59 0101 	orrs.w	r1, r9, r1
 8008b2c:	d120      	bne.n	8008b70 <_dtoa_r+0xad8>
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	ddec      	ble.n	8008b0c <_dtoa_r+0xa74>
 8008b32:	4659      	mov	r1, fp
 8008b34:	2201      	movs	r2, #1
 8008b36:	4628      	mov	r0, r5
 8008b38:	9308      	str	r3, [sp, #32]
 8008b3a:	f001 f8b3 	bl	8009ca4 <__lshift>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4683      	mov	fp, r0
 8008b42:	f001 f91f 	bl	8009d84 <__mcmp>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	dc02      	bgt.n	8008b52 <_dtoa_r+0xaba>
 8008b4c:	d1de      	bne.n	8008b0c <_dtoa_r+0xa74>
 8008b4e:	07da      	lsls	r2, r3, #31
 8008b50:	d5dc      	bpl.n	8008b0c <_dtoa_r+0xa74>
 8008b52:	2b39      	cmp	r3, #57	; 0x39
 8008b54:	d1d8      	bne.n	8008b08 <_dtoa_r+0xa70>
 8008b56:	2339      	movs	r3, #57	; 0x39
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	7013      	strb	r3, [r2, #0]
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	461f      	mov	r7, r3
 8008b60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	2a39      	cmp	r2, #57	; 0x39
 8008b68:	d050      	beq.n	8008c0c <_dtoa_r+0xb74>
 8008b6a:	3201      	adds	r2, #1
 8008b6c:	701a      	strb	r2, [r3, #0]
 8008b6e:	e747      	b.n	8008a00 <_dtoa_r+0x968>
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	dd03      	ble.n	8008b7c <_dtoa_r+0xae4>
 8008b74:	2b39      	cmp	r3, #57	; 0x39
 8008b76:	d0ee      	beq.n	8008b56 <_dtoa_r+0xabe>
 8008b78:	3301      	adds	r3, #1
 8008b7a:	e7c7      	b.n	8008b0c <_dtoa_r+0xa74>
 8008b7c:	9a08      	ldr	r2, [sp, #32]
 8008b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b84:	428a      	cmp	r2, r1
 8008b86:	d02a      	beq.n	8008bde <_dtoa_r+0xb46>
 8008b88:	4659      	mov	r1, fp
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	220a      	movs	r2, #10
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fe92 	bl	80098b8 <__multadd>
 8008b94:	45b0      	cmp	r8, r6
 8008b96:	4683      	mov	fp, r0
 8008b98:	f04f 0300 	mov.w	r3, #0
 8008b9c:	f04f 020a 	mov.w	r2, #10
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	d107      	bne.n	8008bb6 <_dtoa_r+0xb1e>
 8008ba6:	f000 fe87 	bl	80098b8 <__multadd>
 8008baa:	4680      	mov	r8, r0
 8008bac:	4606      	mov	r6, r0
 8008bae:	9b08      	ldr	r3, [sp, #32]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	e775      	b.n	8008aa2 <_dtoa_r+0xa0a>
 8008bb6:	f000 fe7f 	bl	80098b8 <__multadd>
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f000 fe78 	bl	80098b8 <__multadd>
 8008bc8:	4606      	mov	r6, r0
 8008bca:	e7f0      	b.n	8008bae <_dtoa_r+0xb16>
 8008bcc:	f1b9 0f00 	cmp.w	r9, #0
 8008bd0:	bfcc      	ite	gt
 8008bd2:	464f      	movgt	r7, r9
 8008bd4:	2701      	movle	r7, #1
 8008bd6:	f04f 0800 	mov.w	r8, #0
 8008bda:	9a03      	ldr	r2, [sp, #12]
 8008bdc:	4417      	add	r7, r2
 8008bde:	4659      	mov	r1, fp
 8008be0:	2201      	movs	r2, #1
 8008be2:	4628      	mov	r0, r5
 8008be4:	9308      	str	r3, [sp, #32]
 8008be6:	f001 f85d 	bl	8009ca4 <__lshift>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4683      	mov	fp, r0
 8008bee:	f001 f8c9 	bl	8009d84 <__mcmp>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	dcb2      	bgt.n	8008b5c <_dtoa_r+0xac4>
 8008bf6:	d102      	bne.n	8008bfe <_dtoa_r+0xb66>
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	07db      	lsls	r3, r3, #31
 8008bfc:	d4ae      	bmi.n	8008b5c <_dtoa_r+0xac4>
 8008bfe:	463b      	mov	r3, r7
 8008c00:	461f      	mov	r7, r3
 8008c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c06:	2a30      	cmp	r2, #48	; 0x30
 8008c08:	d0fa      	beq.n	8008c00 <_dtoa_r+0xb68>
 8008c0a:	e6f9      	b.n	8008a00 <_dtoa_r+0x968>
 8008c0c:	9a03      	ldr	r2, [sp, #12]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d1a5      	bne.n	8008b5e <_dtoa_r+0xac6>
 8008c12:	2331      	movs	r3, #49	; 0x31
 8008c14:	f10a 0a01 	add.w	sl, sl, #1
 8008c18:	e779      	b.n	8008b0e <_dtoa_r+0xa76>
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <_dtoa_r+0xbd4>)
 8008c1c:	f7ff baa8 	b.w	8008170 <_dtoa_r+0xd8>
 8008c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f47f aa81 	bne.w	800812a <_dtoa_r+0x92>
 8008c28:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <_dtoa_r+0xbd8>)
 8008c2a:	f7ff baa1 	b.w	8008170 <_dtoa_r+0xd8>
 8008c2e:	f1b9 0f00 	cmp.w	r9, #0
 8008c32:	dc03      	bgt.n	8008c3c <_dtoa_r+0xba4>
 8008c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	f73f aecb 	bgt.w	80089d2 <_dtoa_r+0x93a>
 8008c3c:	9f03      	ldr	r7, [sp, #12]
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4658      	mov	r0, fp
 8008c42:	f7ff f99d 	bl	8007f80 <quorem>
 8008c46:	9a03      	ldr	r2, [sp, #12]
 8008c48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c4c:	f807 3b01 	strb.w	r3, [r7], #1
 8008c50:	1aba      	subs	r2, r7, r2
 8008c52:	4591      	cmp	r9, r2
 8008c54:	ddba      	ble.n	8008bcc <_dtoa_r+0xb34>
 8008c56:	4659      	mov	r1, fp
 8008c58:	2300      	movs	r3, #0
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 fe2b 	bl	80098b8 <__multadd>
 8008c62:	4683      	mov	fp, r0
 8008c64:	e7eb      	b.n	8008c3e <_dtoa_r+0xba6>
 8008c66:	bf00      	nop
 8008c68:	0800afb9 	.word	0x0800afb9
 8008c6c:	0800ad20 	.word	0x0800ad20
 8008c70:	0800af51 	.word	0x0800af51

08008c74 <__sflush_r>:
 8008c74:	898a      	ldrh	r2, [r1, #12]
 8008c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c78:	4605      	mov	r5, r0
 8008c7a:	0710      	lsls	r0, r2, #28
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	d457      	bmi.n	8008d30 <__sflush_r+0xbc>
 8008c80:	684b      	ldr	r3, [r1, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc04      	bgt.n	8008c90 <__sflush_r+0x1c>
 8008c86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc01      	bgt.n	8008c90 <__sflush_r+0x1c>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c92:	2e00      	cmp	r6, #0
 8008c94:	d0fa      	beq.n	8008c8c <__sflush_r+0x18>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c9c:	682f      	ldr	r7, [r5, #0]
 8008c9e:	602b      	str	r3, [r5, #0]
 8008ca0:	d032      	beq.n	8008d08 <__sflush_r+0x94>
 8008ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	075a      	lsls	r2, r3, #29
 8008ca8:	d505      	bpl.n	8008cb6 <__sflush_r+0x42>
 8008caa:	6863      	ldr	r3, [r4, #4]
 8008cac:	1ac0      	subs	r0, r0, r3
 8008cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb0:	b10b      	cbz	r3, 8008cb6 <__sflush_r+0x42>
 8008cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb4:	1ac0      	subs	r0, r0, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	6a21      	ldr	r1, [r4, #32]
 8008cc0:	47b0      	blx	r6
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	d106      	bne.n	8008cd6 <__sflush_r+0x62>
 8008cc8:	6829      	ldr	r1, [r5, #0]
 8008cca:	291d      	cmp	r1, #29
 8008ccc:	d82c      	bhi.n	8008d28 <__sflush_r+0xb4>
 8008cce:	4a29      	ldr	r2, [pc, #164]	; (8008d74 <__sflush_r+0x100>)
 8008cd0:	40ca      	lsrs	r2, r1
 8008cd2:	07d6      	lsls	r6, r2, #31
 8008cd4:	d528      	bpl.n	8008d28 <__sflush_r+0xb4>
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	6062      	str	r2, [r4, #4]
 8008cda:	6922      	ldr	r2, [r4, #16]
 8008cdc:	04d9      	lsls	r1, r3, #19
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	d504      	bpl.n	8008cec <__sflush_r+0x78>
 8008ce2:	1c42      	adds	r2, r0, #1
 8008ce4:	d101      	bne.n	8008cea <__sflush_r+0x76>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	b903      	cbnz	r3, 8008cec <__sflush_r+0x78>
 8008cea:	6560      	str	r0, [r4, #84]	; 0x54
 8008cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cee:	602f      	str	r7, [r5, #0]
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	d0cb      	beq.n	8008c8c <__sflush_r+0x18>
 8008cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <__sflush_r+0x8e>
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f001 fa45 	bl	800a18c <_free_r>
 8008d02:	2000      	movs	r0, #0
 8008d04:	6360      	str	r0, [r4, #52]	; 0x34
 8008d06:	e7c2      	b.n	8008c8e <__sflush_r+0x1a>
 8008d08:	6a21      	ldr	r1, [r4, #32]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b0      	blx	r6
 8008d10:	1c41      	adds	r1, r0, #1
 8008d12:	d1c7      	bne.n	8008ca4 <__sflush_r+0x30>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0c4      	beq.n	8008ca4 <__sflush_r+0x30>
 8008d1a:	2b1d      	cmp	r3, #29
 8008d1c:	d001      	beq.n	8008d22 <__sflush_r+0xae>
 8008d1e:	2b16      	cmp	r3, #22
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0xb2>
 8008d22:	602f      	str	r7, [r5, #0]
 8008d24:	e7b2      	b.n	8008c8c <__sflush_r+0x18>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2c:	81a3      	strh	r3, [r4, #12]
 8008d2e:	e7ae      	b.n	8008c8e <__sflush_r+0x1a>
 8008d30:	690f      	ldr	r7, [r1, #16]
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	d0aa      	beq.n	8008c8c <__sflush_r+0x18>
 8008d36:	0793      	lsls	r3, r2, #30
 8008d38:	bf18      	it	ne
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	680e      	ldr	r6, [r1, #0]
 8008d3e:	bf08      	it	eq
 8008d40:	694b      	ldreq	r3, [r1, #20]
 8008d42:	1bf6      	subs	r6, r6, r7
 8008d44:	600f      	str	r7, [r1, #0]
 8008d46:	608b      	str	r3, [r1, #8]
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	dd9f      	ble.n	8008c8c <__sflush_r+0x18>
 8008d4c:	4633      	mov	r3, r6
 8008d4e:	463a      	mov	r2, r7
 8008d50:	4628      	mov	r0, r5
 8008d52:	6a21      	ldr	r1, [r4, #32]
 8008d54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008d58:	47e0      	blx	ip
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	dc06      	bgt.n	8008d6c <__sflush_r+0xf8>
 8008d5e:	89a3      	ldrh	r3, [r4, #12]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	e790      	b.n	8008c8e <__sflush_r+0x1a>
 8008d6c:	4407      	add	r7, r0
 8008d6e:	1a36      	subs	r6, r6, r0
 8008d70:	e7ea      	b.n	8008d48 <__sflush_r+0xd4>
 8008d72:	bf00      	nop
 8008d74:	20400001 	.word	0x20400001

08008d78 <_fflush_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b913      	cbnz	r3, 8008d88 <_fflush_r+0x10>
 8008d82:	2500      	movs	r5, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	b118      	cbz	r0, 8008d92 <_fflush_r+0x1a>
 8008d8a:	6983      	ldr	r3, [r0, #24]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <_fflush_r+0x1a>
 8008d8e:	f000 f887 	bl	8008ea0 <__sinit>
 8008d92:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <_fflush_r+0x6c>)
 8008d94:	429c      	cmp	r4, r3
 8008d96:	d11b      	bne.n	8008dd0 <_fflush_r+0x58>
 8008d98:	686c      	ldr	r4, [r5, #4]
 8008d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0ef      	beq.n	8008d82 <_fflush_r+0xa>
 8008da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008da4:	07d0      	lsls	r0, r2, #31
 8008da6:	d404      	bmi.n	8008db2 <_fflush_r+0x3a>
 8008da8:	0599      	lsls	r1, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_fflush_r+0x3a>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f000 fc92 	bl	80096d6 <__retarget_lock_acquire_recursive>
 8008db2:	4628      	mov	r0, r5
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7ff ff5d 	bl	8008c74 <__sflush_r>
 8008dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	07da      	lsls	r2, r3, #31
 8008dc0:	d4e0      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	059b      	lsls	r3, r3, #22
 8008dc6:	d4dd      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dca:	f000 fc85 	bl	80096d8 <__retarget_lock_release_recursive>
 8008dce:	e7d9      	b.n	8008d84 <_fflush_r+0xc>
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <_fflush_r+0x70>)
 8008dd2:	429c      	cmp	r4, r3
 8008dd4:	d101      	bne.n	8008dda <_fflush_r+0x62>
 8008dd6:	68ac      	ldr	r4, [r5, #8]
 8008dd8:	e7df      	b.n	8008d9a <_fflush_r+0x22>
 8008dda:	4b04      	ldr	r3, [pc, #16]	; (8008dec <_fflush_r+0x74>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	bf08      	it	eq
 8008de0:	68ec      	ldreq	r4, [r5, #12]
 8008de2:	e7da      	b.n	8008d9a <_fflush_r+0x22>
 8008de4:	0800afec 	.word	0x0800afec
 8008de8:	0800b00c 	.word	0x0800b00c
 8008dec:	0800afcc 	.word	0x0800afcc

08008df0 <std>:
 8008df0:	2300      	movs	r3, #0
 8008df2:	b510      	push	{r4, lr}
 8008df4:	4604      	mov	r4, r0
 8008df6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dfe:	6083      	str	r3, [r0, #8]
 8008e00:	8181      	strh	r1, [r0, #12]
 8008e02:	6643      	str	r3, [r0, #100]	; 0x64
 8008e04:	81c2      	strh	r2, [r0, #14]
 8008e06:	6183      	str	r3, [r0, #24]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	305c      	adds	r0, #92	; 0x5c
 8008e0e:	f7fd fa49 	bl	80062a4 <memset>
 8008e12:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <std+0x38>)
 8008e14:	6224      	str	r4, [r4, #32]
 8008e16:	6263      	str	r3, [r4, #36]	; 0x24
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <std+0x3c>)
 8008e1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <std+0x40>)
 8008e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e20:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <std+0x44>)
 8008e22:	6323      	str	r3, [r4, #48]	; 0x30
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	bf00      	nop
 8008e28:	0800a8d9 	.word	0x0800a8d9
 8008e2c:	0800a8fb 	.word	0x0800a8fb
 8008e30:	0800a933 	.word	0x0800a933
 8008e34:	0800a957 	.word	0x0800a957

08008e38 <_cleanup_r>:
 8008e38:	4901      	ldr	r1, [pc, #4]	; (8008e40 <_cleanup_r+0x8>)
 8008e3a:	f000 b8c1 	b.w	8008fc0 <_fwalk_reent>
 8008e3e:	bf00      	nop
 8008e40:	08008d79 	.word	0x08008d79

08008e44 <__sfmoreglue>:
 8008e44:	2268      	movs	r2, #104	; 0x68
 8008e46:	b570      	push	{r4, r5, r6, lr}
 8008e48:	1e4d      	subs	r5, r1, #1
 8008e4a:	4355      	muls	r5, r2
 8008e4c:	460e      	mov	r6, r1
 8008e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e52:	f001 fa03 	bl	800a25c <_malloc_r>
 8008e56:	4604      	mov	r4, r0
 8008e58:	b140      	cbz	r0, 8008e6c <__sfmoreglue+0x28>
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e60:	300c      	adds	r0, #12
 8008e62:	60a0      	str	r0, [r4, #8]
 8008e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e68:	f7fd fa1c 	bl	80062a4 <memset>
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}

08008e70 <__sfp_lock_acquire>:
 8008e70:	4801      	ldr	r0, [pc, #4]	; (8008e78 <__sfp_lock_acquire+0x8>)
 8008e72:	f000 bc30 	b.w	80096d6 <__retarget_lock_acquire_recursive>
 8008e76:	bf00      	nop
 8008e78:	20000b05 	.word	0x20000b05

08008e7c <__sfp_lock_release>:
 8008e7c:	4801      	ldr	r0, [pc, #4]	; (8008e84 <__sfp_lock_release+0x8>)
 8008e7e:	f000 bc2b 	b.w	80096d8 <__retarget_lock_release_recursive>
 8008e82:	bf00      	nop
 8008e84:	20000b05 	.word	0x20000b05

08008e88 <__sinit_lock_acquire>:
 8008e88:	4801      	ldr	r0, [pc, #4]	; (8008e90 <__sinit_lock_acquire+0x8>)
 8008e8a:	f000 bc24 	b.w	80096d6 <__retarget_lock_acquire_recursive>
 8008e8e:	bf00      	nop
 8008e90:	20000b06 	.word	0x20000b06

08008e94 <__sinit_lock_release>:
 8008e94:	4801      	ldr	r0, [pc, #4]	; (8008e9c <__sinit_lock_release+0x8>)
 8008e96:	f000 bc1f 	b.w	80096d8 <__retarget_lock_release_recursive>
 8008e9a:	bf00      	nop
 8008e9c:	20000b06 	.word	0x20000b06

08008ea0 <__sinit>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	f7ff fff0 	bl	8008e88 <__sinit_lock_acquire>
 8008ea8:	69a3      	ldr	r3, [r4, #24]
 8008eaa:	b11b      	cbz	r3, 8008eb4 <__sinit+0x14>
 8008eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb0:	f7ff bff0 	b.w	8008e94 <__sinit_lock_release>
 8008eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8008eba:	4b13      	ldr	r3, [pc, #76]	; (8008f08 <__sinit+0x68>)
 8008ebc:	4a13      	ldr	r2, [pc, #76]	; (8008f0c <__sinit+0x6c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	bf08      	it	eq
 8008ec6:	2301      	moveq	r3, #1
 8008ec8:	4620      	mov	r0, r4
 8008eca:	bf08      	it	eq
 8008ecc:	61a3      	streq	r3, [r4, #24]
 8008ece:	f000 f81f 	bl	8008f10 <__sfp>
 8008ed2:	6060      	str	r0, [r4, #4]
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 f81b 	bl	8008f10 <__sfp>
 8008eda:	60a0      	str	r0, [r4, #8]
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 f817 	bl	8008f10 <__sfp>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	60e0      	str	r0, [r4, #12]
 8008ee8:	6860      	ldr	r0, [r4, #4]
 8008eea:	f7ff ff81 	bl	8008df0 <std>
 8008eee:	2201      	movs	r2, #1
 8008ef0:	2109      	movs	r1, #9
 8008ef2:	68a0      	ldr	r0, [r4, #8]
 8008ef4:	f7ff ff7c 	bl	8008df0 <std>
 8008ef8:	2202      	movs	r2, #2
 8008efa:	2112      	movs	r1, #18
 8008efc:	68e0      	ldr	r0, [r4, #12]
 8008efe:	f7ff ff77 	bl	8008df0 <std>
 8008f02:	2301      	movs	r3, #1
 8008f04:	61a3      	str	r3, [r4, #24]
 8008f06:	e7d1      	b.n	8008eac <__sinit+0xc>
 8008f08:	0800ad0c 	.word	0x0800ad0c
 8008f0c:	08008e39 	.word	0x08008e39

08008f10 <__sfp>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	4607      	mov	r7, r0
 8008f14:	f7ff ffac 	bl	8008e70 <__sfp_lock_acquire>
 8008f18:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <__sfp+0x84>)
 8008f1a:	681e      	ldr	r6, [r3, #0]
 8008f1c:	69b3      	ldr	r3, [r6, #24]
 8008f1e:	b913      	cbnz	r3, 8008f26 <__sfp+0x16>
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff ffbd 	bl	8008ea0 <__sinit>
 8008f26:	3648      	adds	r6, #72	; 0x48
 8008f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	d503      	bpl.n	8008f38 <__sfp+0x28>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	b30b      	cbz	r3, 8008f78 <__sfp+0x68>
 8008f34:	6836      	ldr	r6, [r6, #0]
 8008f36:	e7f7      	b.n	8008f28 <__sfp+0x18>
 8008f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f3c:	b9d5      	cbnz	r5, 8008f74 <__sfp+0x64>
 8008f3e:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <__sfp+0x88>)
 8008f40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f44:	60e3      	str	r3, [r4, #12]
 8008f46:	6665      	str	r5, [r4, #100]	; 0x64
 8008f48:	f000 fbc4 	bl	80096d4 <__retarget_lock_init_recursive>
 8008f4c:	f7ff ff96 	bl	8008e7c <__sfp_lock_release>
 8008f50:	2208      	movs	r2, #8
 8008f52:	4629      	mov	r1, r5
 8008f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f5c:	6025      	str	r5, [r4, #0]
 8008f5e:	61a5      	str	r5, [r4, #24]
 8008f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f64:	f7fd f99e 	bl	80062a4 <memset>
 8008f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f70:	4620      	mov	r0, r4
 8008f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f74:	3468      	adds	r4, #104	; 0x68
 8008f76:	e7d9      	b.n	8008f2c <__sfp+0x1c>
 8008f78:	2104      	movs	r1, #4
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	f7ff ff62 	bl	8008e44 <__sfmoreglue>
 8008f80:	4604      	mov	r4, r0
 8008f82:	6030      	str	r0, [r6, #0]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1d5      	bne.n	8008f34 <__sfp+0x24>
 8008f88:	f7ff ff78 	bl	8008e7c <__sfp_lock_release>
 8008f8c:	230c      	movs	r3, #12
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	e7ee      	b.n	8008f70 <__sfp+0x60>
 8008f92:	bf00      	nop
 8008f94:	0800ad0c 	.word	0x0800ad0c
 8008f98:	ffff0001 	.word	0xffff0001

08008f9c <fiprintf>:
 8008f9c:	b40e      	push	{r1, r2, r3}
 8008f9e:	b503      	push	{r0, r1, lr}
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	4805      	ldr	r0, [pc, #20]	; (8008fbc <fiprintf+0x20>)
 8008fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	f001 fb4d 	bl	800a64c <_vfiprintf_r>
 8008fb2:	b002      	add	sp, #8
 8008fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb8:	b003      	add	sp, #12
 8008fba:	4770      	bx	lr
 8008fbc:	20000500 	.word	0x20000500

08008fc0 <_fwalk_reent>:
 8008fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	4688      	mov	r8, r1
 8008fc8:	2700      	movs	r7, #0
 8008fca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fd2:	f1b9 0901 	subs.w	r9, r9, #1
 8008fd6:	d505      	bpl.n	8008fe4 <_fwalk_reent+0x24>
 8008fd8:	6824      	ldr	r4, [r4, #0]
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	d1f7      	bne.n	8008fce <_fwalk_reent+0xe>
 8008fde:	4638      	mov	r0, r7
 8008fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe4:	89ab      	ldrh	r3, [r5, #12]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d907      	bls.n	8008ffa <_fwalk_reent+0x3a>
 8008fea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	d003      	beq.n	8008ffa <_fwalk_reent+0x3a>
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	47c0      	blx	r8
 8008ff8:	4307      	orrs	r7, r0
 8008ffa:	3568      	adds	r5, #104	; 0x68
 8008ffc:	e7e9      	b.n	8008fd2 <_fwalk_reent+0x12>

08008ffe <rshift>:
 8008ffe:	6903      	ldr	r3, [r0, #16]
 8009000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009004:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009008:	f100 0414 	add.w	r4, r0, #20
 800900c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009010:	dd46      	ble.n	80090a0 <rshift+0xa2>
 8009012:	f011 011f 	ands.w	r1, r1, #31
 8009016:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800901a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800901e:	d10c      	bne.n	800903a <rshift+0x3c>
 8009020:	4629      	mov	r1, r5
 8009022:	f100 0710 	add.w	r7, r0, #16
 8009026:	42b1      	cmp	r1, r6
 8009028:	d335      	bcc.n	8009096 <rshift+0x98>
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	1eea      	subs	r2, r5, #3
 8009030:	4296      	cmp	r6, r2
 8009032:	bf38      	it	cc
 8009034:	2300      	movcc	r3, #0
 8009036:	4423      	add	r3, r4
 8009038:	e015      	b.n	8009066 <rshift+0x68>
 800903a:	46a1      	mov	r9, r4
 800903c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009040:	f1c1 0820 	rsb	r8, r1, #32
 8009044:	40cf      	lsrs	r7, r1
 8009046:	f105 0e04 	add.w	lr, r5, #4
 800904a:	4576      	cmp	r6, lr
 800904c:	46f4      	mov	ip, lr
 800904e:	d816      	bhi.n	800907e <rshift+0x80>
 8009050:	1a9a      	subs	r2, r3, r2
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	3a04      	subs	r2, #4
 8009056:	3501      	adds	r5, #1
 8009058:	42ae      	cmp	r6, r5
 800905a:	bf38      	it	cc
 800905c:	2200      	movcc	r2, #0
 800905e:	18a3      	adds	r3, r4, r2
 8009060:	50a7      	str	r7, [r4, r2]
 8009062:	b107      	cbz	r7, 8009066 <rshift+0x68>
 8009064:	3304      	adds	r3, #4
 8009066:	42a3      	cmp	r3, r4
 8009068:	eba3 0204 	sub.w	r2, r3, r4
 800906c:	bf08      	it	eq
 800906e:	2300      	moveq	r3, #0
 8009070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009074:	6102      	str	r2, [r0, #16]
 8009076:	bf08      	it	eq
 8009078:	6143      	streq	r3, [r0, #20]
 800907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800907e:	f8dc c000 	ldr.w	ip, [ip]
 8009082:	fa0c fc08 	lsl.w	ip, ip, r8
 8009086:	ea4c 0707 	orr.w	r7, ip, r7
 800908a:	f849 7b04 	str.w	r7, [r9], #4
 800908e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009092:	40cf      	lsrs	r7, r1
 8009094:	e7d9      	b.n	800904a <rshift+0x4c>
 8009096:	f851 cb04 	ldr.w	ip, [r1], #4
 800909a:	f847 cf04 	str.w	ip, [r7, #4]!
 800909e:	e7c2      	b.n	8009026 <rshift+0x28>
 80090a0:	4623      	mov	r3, r4
 80090a2:	e7e0      	b.n	8009066 <rshift+0x68>

080090a4 <__hexdig_fun>:
 80090a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d802      	bhi.n	80090b2 <__hexdig_fun+0xe>
 80090ac:	3820      	subs	r0, #32
 80090ae:	b2c0      	uxtb	r0, r0
 80090b0:	4770      	bx	lr
 80090b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	d801      	bhi.n	80090be <__hexdig_fun+0x1a>
 80090ba:	3847      	subs	r0, #71	; 0x47
 80090bc:	e7f7      	b.n	80090ae <__hexdig_fun+0xa>
 80090be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	d801      	bhi.n	80090ca <__hexdig_fun+0x26>
 80090c6:	3827      	subs	r0, #39	; 0x27
 80090c8:	e7f1      	b.n	80090ae <__hexdig_fun+0xa>
 80090ca:	2000      	movs	r0, #0
 80090cc:	4770      	bx	lr
	...

080090d0 <__gethex>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	b08b      	sub	sp, #44	; 0x2c
 80090d6:	9305      	str	r3, [sp, #20]
 80090d8:	4bb2      	ldr	r3, [pc, #712]	; (80093a4 <__gethex+0x2d4>)
 80090da:	9002      	str	r0, [sp, #8]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	468b      	mov	fp, r1
 80090e0:	4618      	mov	r0, r3
 80090e2:	4690      	mov	r8, r2
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	f7f7 f8ad 	bl	8000244 <strlen>
 80090ea:	4682      	mov	sl, r0
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	f8db 2000 	ldr.w	r2, [fp]
 80090f2:	4403      	add	r3, r0
 80090f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090f8:	9306      	str	r3, [sp, #24]
 80090fa:	1c93      	adds	r3, r2, #2
 80090fc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009100:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009104:	32fe      	adds	r2, #254	; 0xfe
 8009106:	18d1      	adds	r1, r2, r3
 8009108:	461f      	mov	r7, r3
 800910a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800910e:	9101      	str	r1, [sp, #4]
 8009110:	2830      	cmp	r0, #48	; 0x30
 8009112:	d0f8      	beq.n	8009106 <__gethex+0x36>
 8009114:	f7ff ffc6 	bl	80090a4 <__hexdig_fun>
 8009118:	4604      	mov	r4, r0
 800911a:	2800      	cmp	r0, #0
 800911c:	d13a      	bne.n	8009194 <__gethex+0xc4>
 800911e:	4652      	mov	r2, sl
 8009120:	4638      	mov	r0, r7
 8009122:	9903      	ldr	r1, [sp, #12]
 8009124:	f001 fc1b 	bl	800a95e <strncmp>
 8009128:	4605      	mov	r5, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	d166      	bne.n	80091fc <__gethex+0x12c>
 800912e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009132:	eb07 060a 	add.w	r6, r7, sl
 8009136:	f7ff ffb5 	bl	80090a4 <__hexdig_fun>
 800913a:	2800      	cmp	r0, #0
 800913c:	d060      	beq.n	8009200 <__gethex+0x130>
 800913e:	4633      	mov	r3, r6
 8009140:	7818      	ldrb	r0, [r3, #0]
 8009142:	461f      	mov	r7, r3
 8009144:	2830      	cmp	r0, #48	; 0x30
 8009146:	f103 0301 	add.w	r3, r3, #1
 800914a:	d0f9      	beq.n	8009140 <__gethex+0x70>
 800914c:	f7ff ffaa 	bl	80090a4 <__hexdig_fun>
 8009150:	2301      	movs	r3, #1
 8009152:	fab0 f480 	clz	r4, r0
 8009156:	4635      	mov	r5, r6
 8009158:	0964      	lsrs	r4, r4, #5
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	463a      	mov	r2, r7
 800915e:	4616      	mov	r6, r2
 8009160:	7830      	ldrb	r0, [r6, #0]
 8009162:	3201      	adds	r2, #1
 8009164:	f7ff ff9e 	bl	80090a4 <__hexdig_fun>
 8009168:	2800      	cmp	r0, #0
 800916a:	d1f8      	bne.n	800915e <__gethex+0x8e>
 800916c:	4652      	mov	r2, sl
 800916e:	4630      	mov	r0, r6
 8009170:	9903      	ldr	r1, [sp, #12]
 8009172:	f001 fbf4 	bl	800a95e <strncmp>
 8009176:	b980      	cbnz	r0, 800919a <__gethex+0xca>
 8009178:	b94d      	cbnz	r5, 800918e <__gethex+0xbe>
 800917a:	eb06 050a 	add.w	r5, r6, sl
 800917e:	462a      	mov	r2, r5
 8009180:	4616      	mov	r6, r2
 8009182:	7830      	ldrb	r0, [r6, #0]
 8009184:	3201      	adds	r2, #1
 8009186:	f7ff ff8d 	bl	80090a4 <__hexdig_fun>
 800918a:	2800      	cmp	r0, #0
 800918c:	d1f8      	bne.n	8009180 <__gethex+0xb0>
 800918e:	1bad      	subs	r5, r5, r6
 8009190:	00ad      	lsls	r5, r5, #2
 8009192:	e004      	b.n	800919e <__gethex+0xce>
 8009194:	2400      	movs	r4, #0
 8009196:	4625      	mov	r5, r4
 8009198:	e7e0      	b.n	800915c <__gethex+0x8c>
 800919a:	2d00      	cmp	r5, #0
 800919c:	d1f7      	bne.n	800918e <__gethex+0xbe>
 800919e:	7833      	ldrb	r3, [r6, #0]
 80091a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091a4:	2b50      	cmp	r3, #80	; 0x50
 80091a6:	d139      	bne.n	800921c <__gethex+0x14c>
 80091a8:	7873      	ldrb	r3, [r6, #1]
 80091aa:	2b2b      	cmp	r3, #43	; 0x2b
 80091ac:	d02a      	beq.n	8009204 <__gethex+0x134>
 80091ae:	2b2d      	cmp	r3, #45	; 0x2d
 80091b0:	d02c      	beq.n	800920c <__gethex+0x13c>
 80091b2:	f04f 0900 	mov.w	r9, #0
 80091b6:	1c71      	adds	r1, r6, #1
 80091b8:	7808      	ldrb	r0, [r1, #0]
 80091ba:	f7ff ff73 	bl	80090a4 <__hexdig_fun>
 80091be:	1e43      	subs	r3, r0, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b18      	cmp	r3, #24
 80091c4:	d82a      	bhi.n	800921c <__gethex+0x14c>
 80091c6:	f1a0 0210 	sub.w	r2, r0, #16
 80091ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091ce:	f7ff ff69 	bl	80090a4 <__hexdig_fun>
 80091d2:	1e43      	subs	r3, r0, #1
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b18      	cmp	r3, #24
 80091d8:	d91b      	bls.n	8009212 <__gethex+0x142>
 80091da:	f1b9 0f00 	cmp.w	r9, #0
 80091de:	d000      	beq.n	80091e2 <__gethex+0x112>
 80091e0:	4252      	negs	r2, r2
 80091e2:	4415      	add	r5, r2
 80091e4:	f8cb 1000 	str.w	r1, [fp]
 80091e8:	b1d4      	cbz	r4, 8009220 <__gethex+0x150>
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bf14      	ite	ne
 80091f0:	2700      	movne	r7, #0
 80091f2:	2706      	moveq	r7, #6
 80091f4:	4638      	mov	r0, r7
 80091f6:	b00b      	add	sp, #44	; 0x2c
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	463e      	mov	r6, r7
 80091fe:	4625      	mov	r5, r4
 8009200:	2401      	movs	r4, #1
 8009202:	e7cc      	b.n	800919e <__gethex+0xce>
 8009204:	f04f 0900 	mov.w	r9, #0
 8009208:	1cb1      	adds	r1, r6, #2
 800920a:	e7d5      	b.n	80091b8 <__gethex+0xe8>
 800920c:	f04f 0901 	mov.w	r9, #1
 8009210:	e7fa      	b.n	8009208 <__gethex+0x138>
 8009212:	230a      	movs	r3, #10
 8009214:	fb03 0202 	mla	r2, r3, r2, r0
 8009218:	3a10      	subs	r2, #16
 800921a:	e7d6      	b.n	80091ca <__gethex+0xfa>
 800921c:	4631      	mov	r1, r6
 800921e:	e7e1      	b.n	80091e4 <__gethex+0x114>
 8009220:	4621      	mov	r1, r4
 8009222:	1bf3      	subs	r3, r6, r7
 8009224:	3b01      	subs	r3, #1
 8009226:	2b07      	cmp	r3, #7
 8009228:	dc0a      	bgt.n	8009240 <__gethex+0x170>
 800922a:	9802      	ldr	r0, [sp, #8]
 800922c:	f000 fae2 	bl	80097f4 <_Balloc>
 8009230:	4604      	mov	r4, r0
 8009232:	b940      	cbnz	r0, 8009246 <__gethex+0x176>
 8009234:	4602      	mov	r2, r0
 8009236:	21de      	movs	r1, #222	; 0xde
 8009238:	4b5b      	ldr	r3, [pc, #364]	; (80093a8 <__gethex+0x2d8>)
 800923a:	485c      	ldr	r0, [pc, #368]	; (80093ac <__gethex+0x2dc>)
 800923c:	f7fe fe82 	bl	8007f44 <__assert_func>
 8009240:	3101      	adds	r1, #1
 8009242:	105b      	asrs	r3, r3, #1
 8009244:	e7ef      	b.n	8009226 <__gethex+0x156>
 8009246:	f04f 0b00 	mov.w	fp, #0
 800924a:	f100 0914 	add.w	r9, r0, #20
 800924e:	f1ca 0301 	rsb	r3, sl, #1
 8009252:	f8cd 9010 	str.w	r9, [sp, #16]
 8009256:	f8cd b004 	str.w	fp, [sp, #4]
 800925a:	9308      	str	r3, [sp, #32]
 800925c:	42b7      	cmp	r7, r6
 800925e:	d33f      	bcc.n	80092e0 <__gethex+0x210>
 8009260:	9f04      	ldr	r7, [sp, #16]
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	f847 3b04 	str.w	r3, [r7], #4
 8009268:	eba7 0709 	sub.w	r7, r7, r9
 800926c:	10bf      	asrs	r7, r7, #2
 800926e:	6127      	str	r7, [r4, #16]
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fbb1 	bl	80099d8 <__hi0bits>
 8009276:	017f      	lsls	r7, r7, #5
 8009278:	f8d8 6000 	ldr.w	r6, [r8]
 800927c:	1a3f      	subs	r7, r7, r0
 800927e:	42b7      	cmp	r7, r6
 8009280:	dd62      	ble.n	8009348 <__gethex+0x278>
 8009282:	1bbf      	subs	r7, r7, r6
 8009284:	4639      	mov	r1, r7
 8009286:	4620      	mov	r0, r4
 8009288:	f000 ff4b 	bl	800a122 <__any_on>
 800928c:	4682      	mov	sl, r0
 800928e:	b1a8      	cbz	r0, 80092bc <__gethex+0x1ec>
 8009290:	f04f 0a01 	mov.w	sl, #1
 8009294:	1e7b      	subs	r3, r7, #1
 8009296:	1159      	asrs	r1, r3, #5
 8009298:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800929c:	f003 021f 	and.w	r2, r3, #31
 80092a0:	fa0a f202 	lsl.w	r2, sl, r2
 80092a4:	420a      	tst	r2, r1
 80092a6:	d009      	beq.n	80092bc <__gethex+0x1ec>
 80092a8:	4553      	cmp	r3, sl
 80092aa:	dd05      	ble.n	80092b8 <__gethex+0x1e8>
 80092ac:	4620      	mov	r0, r4
 80092ae:	1eb9      	subs	r1, r7, #2
 80092b0:	f000 ff37 	bl	800a122 <__any_on>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d144      	bne.n	8009342 <__gethex+0x272>
 80092b8:	f04f 0a02 	mov.w	sl, #2
 80092bc:	4639      	mov	r1, r7
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff fe9d 	bl	8008ffe <rshift>
 80092c4:	443d      	add	r5, r7
 80092c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092ca:	42ab      	cmp	r3, r5
 80092cc:	da4a      	bge.n	8009364 <__gethex+0x294>
 80092ce:	4621      	mov	r1, r4
 80092d0:	9802      	ldr	r0, [sp, #8]
 80092d2:	f000 facf 	bl	8009874 <_Bfree>
 80092d6:	2300      	movs	r3, #0
 80092d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092da:	27a3      	movs	r7, #163	; 0xa3
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	e789      	b.n	80091f4 <__gethex+0x124>
 80092e0:	1e73      	subs	r3, r6, #1
 80092e2:	9a06      	ldr	r2, [sp, #24]
 80092e4:	9307      	str	r3, [sp, #28]
 80092e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d019      	beq.n	8009322 <__gethex+0x252>
 80092ee:	f1bb 0f20 	cmp.w	fp, #32
 80092f2:	d107      	bne.n	8009304 <__gethex+0x234>
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	9a01      	ldr	r2, [sp, #4]
 80092f8:	f843 2b04 	str.w	r2, [r3], #4
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	2300      	movs	r3, #0
 8009300:	469b      	mov	fp, r3
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009308:	f7ff fecc 	bl	80090a4 <__hexdig_fun>
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	f000 000f 	and.w	r0, r0, #15
 8009312:	fa00 f00b 	lsl.w	r0, r0, fp
 8009316:	4303      	orrs	r3, r0
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	f10b 0b04 	add.w	fp, fp, #4
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	e00d      	b.n	800933e <__gethex+0x26e>
 8009322:	9a08      	ldr	r2, [sp, #32]
 8009324:	1e73      	subs	r3, r6, #1
 8009326:	4413      	add	r3, r2
 8009328:	42bb      	cmp	r3, r7
 800932a:	d3e0      	bcc.n	80092ee <__gethex+0x21e>
 800932c:	4618      	mov	r0, r3
 800932e:	4652      	mov	r2, sl
 8009330:	9903      	ldr	r1, [sp, #12]
 8009332:	9309      	str	r3, [sp, #36]	; 0x24
 8009334:	f001 fb13 	bl	800a95e <strncmp>
 8009338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933a:	2800      	cmp	r0, #0
 800933c:	d1d7      	bne.n	80092ee <__gethex+0x21e>
 800933e:	461e      	mov	r6, r3
 8009340:	e78c      	b.n	800925c <__gethex+0x18c>
 8009342:	f04f 0a03 	mov.w	sl, #3
 8009346:	e7b9      	b.n	80092bc <__gethex+0x1ec>
 8009348:	da09      	bge.n	800935e <__gethex+0x28e>
 800934a:	1bf7      	subs	r7, r6, r7
 800934c:	4621      	mov	r1, r4
 800934e:	463a      	mov	r2, r7
 8009350:	9802      	ldr	r0, [sp, #8]
 8009352:	f000 fca7 	bl	8009ca4 <__lshift>
 8009356:	4604      	mov	r4, r0
 8009358:	1bed      	subs	r5, r5, r7
 800935a:	f100 0914 	add.w	r9, r0, #20
 800935e:	f04f 0a00 	mov.w	sl, #0
 8009362:	e7b0      	b.n	80092c6 <__gethex+0x1f6>
 8009364:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009368:	42a8      	cmp	r0, r5
 800936a:	dd72      	ble.n	8009452 <__gethex+0x382>
 800936c:	1b45      	subs	r5, r0, r5
 800936e:	42ae      	cmp	r6, r5
 8009370:	dc35      	bgt.n	80093de <__gethex+0x30e>
 8009372:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d029      	beq.n	80093ce <__gethex+0x2fe>
 800937a:	2b03      	cmp	r3, #3
 800937c:	d02b      	beq.n	80093d6 <__gethex+0x306>
 800937e:	2b01      	cmp	r3, #1
 8009380:	d11c      	bne.n	80093bc <__gethex+0x2ec>
 8009382:	42ae      	cmp	r6, r5
 8009384:	d11a      	bne.n	80093bc <__gethex+0x2ec>
 8009386:	2e01      	cmp	r6, #1
 8009388:	d112      	bne.n	80093b0 <__gethex+0x2e0>
 800938a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800938e:	9a05      	ldr	r2, [sp, #20]
 8009390:	2762      	movs	r7, #98	; 0x62
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	2301      	movs	r3, #1
 8009396:	6123      	str	r3, [r4, #16]
 8009398:	f8c9 3000 	str.w	r3, [r9]
 800939c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800939e:	601c      	str	r4, [r3, #0]
 80093a0:	e728      	b.n	80091f4 <__gethex+0x124>
 80093a2:	bf00      	nop
 80093a4:	0800b094 	.word	0x0800b094
 80093a8:	0800afb9 	.word	0x0800afb9
 80093ac:	0800b02c 	.word	0x0800b02c
 80093b0:	4620      	mov	r0, r4
 80093b2:	1e71      	subs	r1, r6, #1
 80093b4:	f000 feb5 	bl	800a122 <__any_on>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1e6      	bne.n	800938a <__gethex+0x2ba>
 80093bc:	4621      	mov	r1, r4
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	f000 fa58 	bl	8009874 <_Bfree>
 80093c4:	2300      	movs	r3, #0
 80093c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093c8:	2750      	movs	r7, #80	; 0x50
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	e712      	b.n	80091f4 <__gethex+0x124>
 80093ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1f3      	bne.n	80093bc <__gethex+0x2ec>
 80093d4:	e7d9      	b.n	800938a <__gethex+0x2ba>
 80093d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1d6      	bne.n	800938a <__gethex+0x2ba>
 80093dc:	e7ee      	b.n	80093bc <__gethex+0x2ec>
 80093de:	1e6f      	subs	r7, r5, #1
 80093e0:	f1ba 0f00 	cmp.w	sl, #0
 80093e4:	d132      	bne.n	800944c <__gethex+0x37c>
 80093e6:	b127      	cbz	r7, 80093f2 <__gethex+0x322>
 80093e8:	4639      	mov	r1, r7
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fe99 	bl	800a122 <__any_on>
 80093f0:	4682      	mov	sl, r0
 80093f2:	2101      	movs	r1, #1
 80093f4:	117b      	asrs	r3, r7, #5
 80093f6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80093fa:	f007 071f 	and.w	r7, r7, #31
 80093fe:	fa01 f707 	lsl.w	r7, r1, r7
 8009402:	421f      	tst	r7, r3
 8009404:	f04f 0702 	mov.w	r7, #2
 8009408:	4629      	mov	r1, r5
 800940a:	4620      	mov	r0, r4
 800940c:	bf18      	it	ne
 800940e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009412:	1b76      	subs	r6, r6, r5
 8009414:	f7ff fdf3 	bl	8008ffe <rshift>
 8009418:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800941c:	f1ba 0f00 	cmp.w	sl, #0
 8009420:	d048      	beq.n	80094b4 <__gethex+0x3e4>
 8009422:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009426:	2b02      	cmp	r3, #2
 8009428:	d015      	beq.n	8009456 <__gethex+0x386>
 800942a:	2b03      	cmp	r3, #3
 800942c:	d017      	beq.n	800945e <__gethex+0x38e>
 800942e:	2b01      	cmp	r3, #1
 8009430:	d109      	bne.n	8009446 <__gethex+0x376>
 8009432:	f01a 0f02 	tst.w	sl, #2
 8009436:	d006      	beq.n	8009446 <__gethex+0x376>
 8009438:	f8d9 0000 	ldr.w	r0, [r9]
 800943c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009440:	f01a 0f01 	tst.w	sl, #1
 8009444:	d10e      	bne.n	8009464 <__gethex+0x394>
 8009446:	f047 0710 	orr.w	r7, r7, #16
 800944a:	e033      	b.n	80094b4 <__gethex+0x3e4>
 800944c:	f04f 0a01 	mov.w	sl, #1
 8009450:	e7cf      	b.n	80093f2 <__gethex+0x322>
 8009452:	2701      	movs	r7, #1
 8009454:	e7e2      	b.n	800941c <__gethex+0x34c>
 8009456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009458:	f1c3 0301 	rsb	r3, r3, #1
 800945c:	9315      	str	r3, [sp, #84]	; 0x54
 800945e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0f0      	beq.n	8009446 <__gethex+0x376>
 8009464:	f04f 0c00 	mov.w	ip, #0
 8009468:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800946c:	f104 0314 	add.w	r3, r4, #20
 8009470:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009474:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009478:	4618      	mov	r0, r3
 800947a:	f853 2b04 	ldr.w	r2, [r3], #4
 800947e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009482:	d01c      	beq.n	80094be <__gethex+0x3ee>
 8009484:	3201      	adds	r2, #1
 8009486:	6002      	str	r2, [r0, #0]
 8009488:	2f02      	cmp	r7, #2
 800948a:	f104 0314 	add.w	r3, r4, #20
 800948e:	d13d      	bne.n	800950c <__gethex+0x43c>
 8009490:	f8d8 2000 	ldr.w	r2, [r8]
 8009494:	3a01      	subs	r2, #1
 8009496:	42b2      	cmp	r2, r6
 8009498:	d10a      	bne.n	80094b0 <__gethex+0x3e0>
 800949a:	2201      	movs	r2, #1
 800949c:	1171      	asrs	r1, r6, #5
 800949e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094a2:	f006 061f 	and.w	r6, r6, #31
 80094a6:	fa02 f606 	lsl.w	r6, r2, r6
 80094aa:	421e      	tst	r6, r3
 80094ac:	bf18      	it	ne
 80094ae:	4617      	movne	r7, r2
 80094b0:	f047 0720 	orr.w	r7, r7, #32
 80094b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094b6:	601c      	str	r4, [r3, #0]
 80094b8:	9b05      	ldr	r3, [sp, #20]
 80094ba:	601d      	str	r5, [r3, #0]
 80094bc:	e69a      	b.n	80091f4 <__gethex+0x124>
 80094be:	4299      	cmp	r1, r3
 80094c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80094c4:	d8d8      	bhi.n	8009478 <__gethex+0x3a8>
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	459b      	cmp	fp, r3
 80094ca:	db17      	blt.n	80094fc <__gethex+0x42c>
 80094cc:	6861      	ldr	r1, [r4, #4]
 80094ce:	9802      	ldr	r0, [sp, #8]
 80094d0:	3101      	adds	r1, #1
 80094d2:	f000 f98f 	bl	80097f4 <_Balloc>
 80094d6:	4681      	mov	r9, r0
 80094d8:	b918      	cbnz	r0, 80094e2 <__gethex+0x412>
 80094da:	4602      	mov	r2, r0
 80094dc:	2184      	movs	r1, #132	; 0x84
 80094de:	4b19      	ldr	r3, [pc, #100]	; (8009544 <__gethex+0x474>)
 80094e0:	e6ab      	b.n	800923a <__gethex+0x16a>
 80094e2:	6922      	ldr	r2, [r4, #16]
 80094e4:	f104 010c 	add.w	r1, r4, #12
 80094e8:	3202      	adds	r2, #2
 80094ea:	0092      	lsls	r2, r2, #2
 80094ec:	300c      	adds	r0, #12
 80094ee:	f7fc fecb 	bl	8006288 <memcpy>
 80094f2:	4621      	mov	r1, r4
 80094f4:	9802      	ldr	r0, [sp, #8]
 80094f6:	f000 f9bd 	bl	8009874 <_Bfree>
 80094fa:	464c      	mov	r4, r9
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	6122      	str	r2, [r4, #16]
 8009502:	2201      	movs	r2, #1
 8009504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009508:	615a      	str	r2, [r3, #20]
 800950a:	e7bd      	b.n	8009488 <__gethex+0x3b8>
 800950c:	6922      	ldr	r2, [r4, #16]
 800950e:	455a      	cmp	r2, fp
 8009510:	dd0b      	ble.n	800952a <__gethex+0x45a>
 8009512:	2101      	movs	r1, #1
 8009514:	4620      	mov	r0, r4
 8009516:	f7ff fd72 	bl	8008ffe <rshift>
 800951a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800951e:	3501      	adds	r5, #1
 8009520:	42ab      	cmp	r3, r5
 8009522:	f6ff aed4 	blt.w	80092ce <__gethex+0x1fe>
 8009526:	2701      	movs	r7, #1
 8009528:	e7c2      	b.n	80094b0 <__gethex+0x3e0>
 800952a:	f016 061f 	ands.w	r6, r6, #31
 800952e:	d0fa      	beq.n	8009526 <__gethex+0x456>
 8009530:	4453      	add	r3, sl
 8009532:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009536:	f000 fa4f 	bl	80099d8 <__hi0bits>
 800953a:	f1c6 0620 	rsb	r6, r6, #32
 800953e:	42b0      	cmp	r0, r6
 8009540:	dbe7      	blt.n	8009512 <__gethex+0x442>
 8009542:	e7f0      	b.n	8009526 <__gethex+0x456>
 8009544:	0800afb9 	.word	0x0800afb9

08009548 <L_shift>:
 8009548:	f1c2 0208 	rsb	r2, r2, #8
 800954c:	0092      	lsls	r2, r2, #2
 800954e:	b570      	push	{r4, r5, r6, lr}
 8009550:	f1c2 0620 	rsb	r6, r2, #32
 8009554:	6843      	ldr	r3, [r0, #4]
 8009556:	6804      	ldr	r4, [r0, #0]
 8009558:	fa03 f506 	lsl.w	r5, r3, r6
 800955c:	432c      	orrs	r4, r5
 800955e:	40d3      	lsrs	r3, r2
 8009560:	6004      	str	r4, [r0, #0]
 8009562:	f840 3f04 	str.w	r3, [r0, #4]!
 8009566:	4288      	cmp	r0, r1
 8009568:	d3f4      	bcc.n	8009554 <L_shift+0xc>
 800956a:	bd70      	pop	{r4, r5, r6, pc}

0800956c <__match>:
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009576:	b914      	cbnz	r4, 800957e <__match+0x12>
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	2001      	movs	r0, #1
 800957c:	bd30      	pop	{r4, r5, pc}
 800957e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009582:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009586:	2d19      	cmp	r5, #25
 8009588:	bf98      	it	ls
 800958a:	3220      	addls	r2, #32
 800958c:	42a2      	cmp	r2, r4
 800958e:	d0f0      	beq.n	8009572 <__match+0x6>
 8009590:	2000      	movs	r0, #0
 8009592:	e7f3      	b.n	800957c <__match+0x10>

08009594 <__hexnan>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	2500      	movs	r5, #0
 800959a:	680b      	ldr	r3, [r1, #0]
 800959c:	4682      	mov	sl, r0
 800959e:	115e      	asrs	r6, r3, #5
 80095a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095a4:	f013 031f 	ands.w	r3, r3, #31
 80095a8:	bf18      	it	ne
 80095aa:	3604      	addne	r6, #4
 80095ac:	1f37      	subs	r7, r6, #4
 80095ae:	46b9      	mov	r9, r7
 80095b0:	463c      	mov	r4, r7
 80095b2:	46ab      	mov	fp, r5
 80095b4:	b087      	sub	sp, #28
 80095b6:	4690      	mov	r8, r2
 80095b8:	6802      	ldr	r2, [r0, #0]
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	f846 5c04 	str.w	r5, [r6, #-4]
 80095c0:	9502      	str	r5, [sp, #8]
 80095c2:	7851      	ldrb	r1, [r2, #1]
 80095c4:	1c53      	adds	r3, r2, #1
 80095c6:	9303      	str	r3, [sp, #12]
 80095c8:	b341      	cbz	r1, 800961c <__hexnan+0x88>
 80095ca:	4608      	mov	r0, r1
 80095cc:	9205      	str	r2, [sp, #20]
 80095ce:	9104      	str	r1, [sp, #16]
 80095d0:	f7ff fd68 	bl	80090a4 <__hexdig_fun>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d14f      	bne.n	8009678 <__hexnan+0xe4>
 80095d8:	9904      	ldr	r1, [sp, #16]
 80095da:	9a05      	ldr	r2, [sp, #20]
 80095dc:	2920      	cmp	r1, #32
 80095de:	d818      	bhi.n	8009612 <__hexnan+0x7e>
 80095e0:	9b02      	ldr	r3, [sp, #8]
 80095e2:	459b      	cmp	fp, r3
 80095e4:	dd13      	ble.n	800960e <__hexnan+0x7a>
 80095e6:	454c      	cmp	r4, r9
 80095e8:	d206      	bcs.n	80095f8 <__hexnan+0x64>
 80095ea:	2d07      	cmp	r5, #7
 80095ec:	dc04      	bgt.n	80095f8 <__hexnan+0x64>
 80095ee:	462a      	mov	r2, r5
 80095f0:	4649      	mov	r1, r9
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff ffa8 	bl	8009548 <L_shift>
 80095f8:	4544      	cmp	r4, r8
 80095fa:	d950      	bls.n	800969e <__hexnan+0x10a>
 80095fc:	2300      	movs	r3, #0
 80095fe:	f1a4 0904 	sub.w	r9, r4, #4
 8009602:	f844 3c04 	str.w	r3, [r4, #-4]
 8009606:	461d      	mov	r5, r3
 8009608:	464c      	mov	r4, r9
 800960a:	f8cd b008 	str.w	fp, [sp, #8]
 800960e:	9a03      	ldr	r2, [sp, #12]
 8009610:	e7d7      	b.n	80095c2 <__hexnan+0x2e>
 8009612:	2929      	cmp	r1, #41	; 0x29
 8009614:	d156      	bne.n	80096c4 <__hexnan+0x130>
 8009616:	3202      	adds	r2, #2
 8009618:	f8ca 2000 	str.w	r2, [sl]
 800961c:	f1bb 0f00 	cmp.w	fp, #0
 8009620:	d050      	beq.n	80096c4 <__hexnan+0x130>
 8009622:	454c      	cmp	r4, r9
 8009624:	d206      	bcs.n	8009634 <__hexnan+0xa0>
 8009626:	2d07      	cmp	r5, #7
 8009628:	dc04      	bgt.n	8009634 <__hexnan+0xa0>
 800962a:	462a      	mov	r2, r5
 800962c:	4649      	mov	r1, r9
 800962e:	4620      	mov	r0, r4
 8009630:	f7ff ff8a 	bl	8009548 <L_shift>
 8009634:	4544      	cmp	r4, r8
 8009636:	d934      	bls.n	80096a2 <__hexnan+0x10e>
 8009638:	4623      	mov	r3, r4
 800963a:	f1a8 0204 	sub.w	r2, r8, #4
 800963e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009642:	429f      	cmp	r7, r3
 8009644:	f842 1f04 	str.w	r1, [r2, #4]!
 8009648:	d2f9      	bcs.n	800963e <__hexnan+0xaa>
 800964a:	1b3b      	subs	r3, r7, r4
 800964c:	f023 0303 	bic.w	r3, r3, #3
 8009650:	3304      	adds	r3, #4
 8009652:	3401      	adds	r4, #1
 8009654:	3e03      	subs	r6, #3
 8009656:	42b4      	cmp	r4, r6
 8009658:	bf88      	it	hi
 800965a:	2304      	movhi	r3, #4
 800965c:	2200      	movs	r2, #0
 800965e:	4443      	add	r3, r8
 8009660:	f843 2b04 	str.w	r2, [r3], #4
 8009664:	429f      	cmp	r7, r3
 8009666:	d2fb      	bcs.n	8009660 <__hexnan+0xcc>
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	b91b      	cbnz	r3, 8009674 <__hexnan+0xe0>
 800966c:	4547      	cmp	r7, r8
 800966e:	d127      	bne.n	80096c0 <__hexnan+0x12c>
 8009670:	2301      	movs	r3, #1
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	2005      	movs	r0, #5
 8009676:	e026      	b.n	80096c6 <__hexnan+0x132>
 8009678:	3501      	adds	r5, #1
 800967a:	2d08      	cmp	r5, #8
 800967c:	f10b 0b01 	add.w	fp, fp, #1
 8009680:	dd06      	ble.n	8009690 <__hexnan+0xfc>
 8009682:	4544      	cmp	r4, r8
 8009684:	d9c3      	bls.n	800960e <__hexnan+0x7a>
 8009686:	2300      	movs	r3, #0
 8009688:	2501      	movs	r5, #1
 800968a:	f844 3c04 	str.w	r3, [r4, #-4]
 800968e:	3c04      	subs	r4, #4
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	f000 000f 	and.w	r0, r0, #15
 8009696:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800969a:	6022      	str	r2, [r4, #0]
 800969c:	e7b7      	b.n	800960e <__hexnan+0x7a>
 800969e:	2508      	movs	r5, #8
 80096a0:	e7b5      	b.n	800960e <__hexnan+0x7a>
 80096a2:	9b01      	ldr	r3, [sp, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0df      	beq.n	8009668 <__hexnan+0xd4>
 80096a8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ac:	f1c3 0320 	rsb	r3, r3, #32
 80096b0:	fa22 f303 	lsr.w	r3, r2, r3
 80096b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096b8:	401a      	ands	r2, r3
 80096ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80096be:	e7d3      	b.n	8009668 <__hexnan+0xd4>
 80096c0:	3f04      	subs	r7, #4
 80096c2:	e7d1      	b.n	8009668 <__hexnan+0xd4>
 80096c4:	2004      	movs	r0, #4
 80096c6:	b007      	add	sp, #28
 80096c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096cc <_localeconv_r>:
 80096cc:	4800      	ldr	r0, [pc, #0]	; (80096d0 <_localeconv_r+0x4>)
 80096ce:	4770      	bx	lr
 80096d0:	20000658 	.word	0x20000658

080096d4 <__retarget_lock_init_recursive>:
 80096d4:	4770      	bx	lr

080096d6 <__retarget_lock_acquire_recursive>:
 80096d6:	4770      	bx	lr

080096d8 <__retarget_lock_release_recursive>:
 80096d8:	4770      	bx	lr

080096da <__swhatbuf_r>:
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	460e      	mov	r6, r1
 80096de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e2:	4614      	mov	r4, r2
 80096e4:	2900      	cmp	r1, #0
 80096e6:	461d      	mov	r5, r3
 80096e8:	b096      	sub	sp, #88	; 0x58
 80096ea:	da08      	bge.n	80096fe <__swhatbuf_r+0x24>
 80096ec:	2200      	movs	r2, #0
 80096ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096f2:	602a      	str	r2, [r5, #0]
 80096f4:	061a      	lsls	r2, r3, #24
 80096f6:	d410      	bmi.n	800971a <__swhatbuf_r+0x40>
 80096f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096fc:	e00e      	b.n	800971c <__swhatbuf_r+0x42>
 80096fe:	466a      	mov	r2, sp
 8009700:	f001 f978 	bl	800a9f4 <_fstat_r>
 8009704:	2800      	cmp	r0, #0
 8009706:	dbf1      	blt.n	80096ec <__swhatbuf_r+0x12>
 8009708:	9a01      	ldr	r2, [sp, #4]
 800970a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800970e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009712:	425a      	negs	r2, r3
 8009714:	415a      	adcs	r2, r3
 8009716:	602a      	str	r2, [r5, #0]
 8009718:	e7ee      	b.n	80096f8 <__swhatbuf_r+0x1e>
 800971a:	2340      	movs	r3, #64	; 0x40
 800971c:	2000      	movs	r0, #0
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	b016      	add	sp, #88	; 0x58
 8009722:	bd70      	pop	{r4, r5, r6, pc}

08009724 <__smakebuf_r>:
 8009724:	898b      	ldrh	r3, [r1, #12]
 8009726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009728:	079d      	lsls	r5, r3, #30
 800972a:	4606      	mov	r6, r0
 800972c:	460c      	mov	r4, r1
 800972e:	d507      	bpl.n	8009740 <__smakebuf_r+0x1c>
 8009730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	6123      	str	r3, [r4, #16]
 8009738:	2301      	movs	r3, #1
 800973a:	6163      	str	r3, [r4, #20]
 800973c:	b002      	add	sp, #8
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	466a      	mov	r2, sp
 8009742:	ab01      	add	r3, sp, #4
 8009744:	f7ff ffc9 	bl	80096da <__swhatbuf_r>
 8009748:	9900      	ldr	r1, [sp, #0]
 800974a:	4605      	mov	r5, r0
 800974c:	4630      	mov	r0, r6
 800974e:	f000 fd85 	bl	800a25c <_malloc_r>
 8009752:	b948      	cbnz	r0, 8009768 <__smakebuf_r+0x44>
 8009754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009758:	059a      	lsls	r2, r3, #22
 800975a:	d4ef      	bmi.n	800973c <__smakebuf_r+0x18>
 800975c:	f023 0303 	bic.w	r3, r3, #3
 8009760:	f043 0302 	orr.w	r3, r3, #2
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7e3      	b.n	8009730 <__smakebuf_r+0xc>
 8009768:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <__smakebuf_r+0x7c>)
 800976a:	62b3      	str	r3, [r6, #40]	; 0x28
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	9b00      	ldr	r3, [sp, #0]
 8009778:	6120      	str	r0, [r4, #16]
 800977a:	6163      	str	r3, [r4, #20]
 800977c:	9b01      	ldr	r3, [sp, #4]
 800977e:	b15b      	cbz	r3, 8009798 <__smakebuf_r+0x74>
 8009780:	4630      	mov	r0, r6
 8009782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009786:	f001 f947 	bl	800aa18 <_isatty_r>
 800978a:	b128      	cbz	r0, 8009798 <__smakebuf_r+0x74>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	f043 0301 	orr.w	r3, r3, #1
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	89a0      	ldrh	r0, [r4, #12]
 800979a:	4305      	orrs	r5, r0
 800979c:	81a5      	strh	r5, [r4, #12]
 800979e:	e7cd      	b.n	800973c <__smakebuf_r+0x18>
 80097a0:	08008e39 	.word	0x08008e39

080097a4 <malloc>:
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <malloc+0xc>)
 80097a6:	4601      	mov	r1, r0
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	f000 bd57 	b.w	800a25c <_malloc_r>
 80097ae:	bf00      	nop
 80097b0:	20000500 	.word	0x20000500

080097b4 <__ascii_mbtowc>:
 80097b4:	b082      	sub	sp, #8
 80097b6:	b901      	cbnz	r1, 80097ba <__ascii_mbtowc+0x6>
 80097b8:	a901      	add	r1, sp, #4
 80097ba:	b142      	cbz	r2, 80097ce <__ascii_mbtowc+0x1a>
 80097bc:	b14b      	cbz	r3, 80097d2 <__ascii_mbtowc+0x1e>
 80097be:	7813      	ldrb	r3, [r2, #0]
 80097c0:	600b      	str	r3, [r1, #0]
 80097c2:	7812      	ldrb	r2, [r2, #0]
 80097c4:	1e10      	subs	r0, r2, #0
 80097c6:	bf18      	it	ne
 80097c8:	2001      	movne	r0, #1
 80097ca:	b002      	add	sp, #8
 80097cc:	4770      	bx	lr
 80097ce:	4610      	mov	r0, r2
 80097d0:	e7fb      	b.n	80097ca <__ascii_mbtowc+0x16>
 80097d2:	f06f 0001 	mvn.w	r0, #1
 80097d6:	e7f8      	b.n	80097ca <__ascii_mbtowc+0x16>

080097d8 <memchr>:
 80097d8:	4603      	mov	r3, r0
 80097da:	b510      	push	{r4, lr}
 80097dc:	b2c9      	uxtb	r1, r1
 80097de:	4402      	add	r2, r0
 80097e0:	4293      	cmp	r3, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	d101      	bne.n	80097ea <memchr+0x12>
 80097e6:	2000      	movs	r0, #0
 80097e8:	e003      	b.n	80097f2 <memchr+0x1a>
 80097ea:	7804      	ldrb	r4, [r0, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	428c      	cmp	r4, r1
 80097f0:	d1f6      	bne.n	80097e0 <memchr+0x8>
 80097f2:	bd10      	pop	{r4, pc}

080097f4 <_Balloc>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	b976      	cbnz	r6, 800981c <_Balloc+0x28>
 80097fe:	2010      	movs	r0, #16
 8009800:	f7ff ffd0 	bl	80097a4 <malloc>
 8009804:	4602      	mov	r2, r0
 8009806:	6260      	str	r0, [r4, #36]	; 0x24
 8009808:	b920      	cbnz	r0, 8009814 <_Balloc+0x20>
 800980a:	2166      	movs	r1, #102	; 0x66
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <_Balloc+0x78>)
 800980e:	4818      	ldr	r0, [pc, #96]	; (8009870 <_Balloc+0x7c>)
 8009810:	f7fe fb98 	bl	8007f44 <__assert_func>
 8009814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009818:	6006      	str	r6, [r0, #0]
 800981a:	60c6      	str	r6, [r0, #12]
 800981c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800981e:	68f3      	ldr	r3, [r6, #12]
 8009820:	b183      	cbz	r3, 8009844 <_Balloc+0x50>
 8009822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982a:	b9b8      	cbnz	r0, 800985c <_Balloc+0x68>
 800982c:	2101      	movs	r1, #1
 800982e:	fa01 f605 	lsl.w	r6, r1, r5
 8009832:	1d72      	adds	r2, r6, #5
 8009834:	4620      	mov	r0, r4
 8009836:	0092      	lsls	r2, r2, #2
 8009838:	f000 fc94 	bl	800a164 <_calloc_r>
 800983c:	b160      	cbz	r0, 8009858 <_Balloc+0x64>
 800983e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009842:	e00e      	b.n	8009862 <_Balloc+0x6e>
 8009844:	2221      	movs	r2, #33	; 0x21
 8009846:	2104      	movs	r1, #4
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fc8b 	bl	800a164 <_calloc_r>
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	60f0      	str	r0, [r6, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e4      	bne.n	8009822 <_Balloc+0x2e>
 8009858:	2000      	movs	r0, #0
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	6802      	ldr	r2, [r0, #0]
 800985e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009862:	2300      	movs	r3, #0
 8009864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009868:	e7f7      	b.n	800985a <_Balloc+0x66>
 800986a:	bf00      	nop
 800986c:	0800ada0 	.word	0x0800ada0
 8009870:	0800b0a8 	.word	0x0800b0a8

08009874 <_Bfree>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	b976      	cbnz	r6, 800989c <_Bfree+0x28>
 800987e:	2010      	movs	r0, #16
 8009880:	f7ff ff90 	bl	80097a4 <malloc>
 8009884:	4602      	mov	r2, r0
 8009886:	6268      	str	r0, [r5, #36]	; 0x24
 8009888:	b920      	cbnz	r0, 8009894 <_Bfree+0x20>
 800988a:	218a      	movs	r1, #138	; 0x8a
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <_Bfree+0x3c>)
 800988e:	4809      	ldr	r0, [pc, #36]	; (80098b4 <_Bfree+0x40>)
 8009890:	f7fe fb58 	bl	8007f44 <__assert_func>
 8009894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009898:	6006      	str	r6, [r0, #0]
 800989a:	60c6      	str	r6, [r0, #12]
 800989c:	b13c      	cbz	r4, 80098ae <_Bfree+0x3a>
 800989e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098a0:	6862      	ldr	r2, [r4, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098a8:	6021      	str	r1, [r4, #0]
 80098aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	0800ada0 	.word	0x0800ada0
 80098b4:	0800b0a8 	.word	0x0800b0a8

080098b8 <__multadd>:
 80098b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	4607      	mov	r7, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	461e      	mov	r6, r3
 80098c2:	2000      	movs	r0, #0
 80098c4:	690d      	ldr	r5, [r1, #16]
 80098c6:	f101 0c14 	add.w	ip, r1, #20
 80098ca:	f8dc 3000 	ldr.w	r3, [ip]
 80098ce:	3001      	adds	r0, #1
 80098d0:	b299      	uxth	r1, r3
 80098d2:	fb02 6101 	mla	r1, r2, r1, r6
 80098d6:	0c1e      	lsrs	r6, r3, #16
 80098d8:	0c0b      	lsrs	r3, r1, #16
 80098da:	fb02 3306 	mla	r3, r2, r6, r3
 80098de:	b289      	uxth	r1, r1
 80098e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098e4:	4285      	cmp	r5, r0
 80098e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098ea:	f84c 1b04 	str.w	r1, [ip], #4
 80098ee:	dcec      	bgt.n	80098ca <__multadd+0x12>
 80098f0:	b30e      	cbz	r6, 8009936 <__multadd+0x7e>
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dc19      	bgt.n	800992c <__multadd+0x74>
 80098f8:	6861      	ldr	r1, [r4, #4]
 80098fa:	4638      	mov	r0, r7
 80098fc:	3101      	adds	r1, #1
 80098fe:	f7ff ff79 	bl	80097f4 <_Balloc>
 8009902:	4680      	mov	r8, r0
 8009904:	b928      	cbnz	r0, 8009912 <__multadd+0x5a>
 8009906:	4602      	mov	r2, r0
 8009908:	21b5      	movs	r1, #181	; 0xb5
 800990a:	4b0c      	ldr	r3, [pc, #48]	; (800993c <__multadd+0x84>)
 800990c:	480c      	ldr	r0, [pc, #48]	; (8009940 <__multadd+0x88>)
 800990e:	f7fe fb19 	bl	8007f44 <__assert_func>
 8009912:	6922      	ldr	r2, [r4, #16]
 8009914:	f104 010c 	add.w	r1, r4, #12
 8009918:	3202      	adds	r2, #2
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	300c      	adds	r0, #12
 800991e:	f7fc fcb3 	bl	8006288 <memcpy>
 8009922:	4621      	mov	r1, r4
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff ffa5 	bl	8009874 <_Bfree>
 800992a:	4644      	mov	r4, r8
 800992c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009930:	3501      	adds	r5, #1
 8009932:	615e      	str	r6, [r3, #20]
 8009934:	6125      	str	r5, [r4, #16]
 8009936:	4620      	mov	r0, r4
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	0800afb9 	.word	0x0800afb9
 8009940:	0800b0a8 	.word	0x0800b0a8

08009944 <__s2b>:
 8009944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009948:	4615      	mov	r5, r2
 800994a:	2209      	movs	r2, #9
 800994c:	461f      	mov	r7, r3
 800994e:	3308      	adds	r3, #8
 8009950:	460c      	mov	r4, r1
 8009952:	fb93 f3f2 	sdiv	r3, r3, r2
 8009956:	4606      	mov	r6, r0
 8009958:	2201      	movs	r2, #1
 800995a:	2100      	movs	r1, #0
 800995c:	429a      	cmp	r2, r3
 800995e:	db09      	blt.n	8009974 <__s2b+0x30>
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff ff47 	bl	80097f4 <_Balloc>
 8009966:	b940      	cbnz	r0, 800997a <__s2b+0x36>
 8009968:	4602      	mov	r2, r0
 800996a:	21ce      	movs	r1, #206	; 0xce
 800996c:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <__s2b+0x8c>)
 800996e:	4819      	ldr	r0, [pc, #100]	; (80099d4 <__s2b+0x90>)
 8009970:	f7fe fae8 	bl	8007f44 <__assert_func>
 8009974:	0052      	lsls	r2, r2, #1
 8009976:	3101      	adds	r1, #1
 8009978:	e7f0      	b.n	800995c <__s2b+0x18>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	2d09      	cmp	r5, #9
 800997e:	6143      	str	r3, [r0, #20]
 8009980:	f04f 0301 	mov.w	r3, #1
 8009984:	6103      	str	r3, [r0, #16]
 8009986:	dd16      	ble.n	80099b6 <__s2b+0x72>
 8009988:	f104 0909 	add.w	r9, r4, #9
 800998c:	46c8      	mov	r8, r9
 800998e:	442c      	add	r4, r5
 8009990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009994:	4601      	mov	r1, r0
 8009996:	220a      	movs	r2, #10
 8009998:	4630      	mov	r0, r6
 800999a:	3b30      	subs	r3, #48	; 0x30
 800999c:	f7ff ff8c 	bl	80098b8 <__multadd>
 80099a0:	45a0      	cmp	r8, r4
 80099a2:	d1f5      	bne.n	8009990 <__s2b+0x4c>
 80099a4:	f1a5 0408 	sub.w	r4, r5, #8
 80099a8:	444c      	add	r4, r9
 80099aa:	1b2d      	subs	r5, r5, r4
 80099ac:	1963      	adds	r3, r4, r5
 80099ae:	42bb      	cmp	r3, r7
 80099b0:	db04      	blt.n	80099bc <__s2b+0x78>
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	2509      	movs	r5, #9
 80099b8:	340a      	adds	r4, #10
 80099ba:	e7f6      	b.n	80099aa <__s2b+0x66>
 80099bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099c0:	4601      	mov	r1, r0
 80099c2:	220a      	movs	r2, #10
 80099c4:	4630      	mov	r0, r6
 80099c6:	3b30      	subs	r3, #48	; 0x30
 80099c8:	f7ff ff76 	bl	80098b8 <__multadd>
 80099cc:	e7ee      	b.n	80099ac <__s2b+0x68>
 80099ce:	bf00      	nop
 80099d0:	0800afb9 	.word	0x0800afb9
 80099d4:	0800b0a8 	.word	0x0800b0a8

080099d8 <__hi0bits>:
 80099d8:	0c02      	lsrs	r2, r0, #16
 80099da:	0412      	lsls	r2, r2, #16
 80099dc:	4603      	mov	r3, r0
 80099de:	b9ca      	cbnz	r2, 8009a14 <__hi0bits+0x3c>
 80099e0:	0403      	lsls	r3, r0, #16
 80099e2:	2010      	movs	r0, #16
 80099e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80099e8:	bf04      	itt	eq
 80099ea:	021b      	lsleq	r3, r3, #8
 80099ec:	3008      	addeq	r0, #8
 80099ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80099f2:	bf04      	itt	eq
 80099f4:	011b      	lsleq	r3, r3, #4
 80099f6:	3004      	addeq	r0, #4
 80099f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80099fc:	bf04      	itt	eq
 80099fe:	009b      	lsleq	r3, r3, #2
 8009a00:	3002      	addeq	r0, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	db05      	blt.n	8009a12 <__hi0bits+0x3a>
 8009a06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009a0a:	f100 0001 	add.w	r0, r0, #1
 8009a0e:	bf08      	it	eq
 8009a10:	2020      	moveq	r0, #32
 8009a12:	4770      	bx	lr
 8009a14:	2000      	movs	r0, #0
 8009a16:	e7e5      	b.n	80099e4 <__hi0bits+0xc>

08009a18 <__lo0bits>:
 8009a18:	6803      	ldr	r3, [r0, #0]
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	f013 0007 	ands.w	r0, r3, #7
 8009a20:	d00b      	beq.n	8009a3a <__lo0bits+0x22>
 8009a22:	07d9      	lsls	r1, r3, #31
 8009a24:	d421      	bmi.n	8009a6a <__lo0bits+0x52>
 8009a26:	0798      	lsls	r0, r3, #30
 8009a28:	bf49      	itett	mi
 8009a2a:	085b      	lsrmi	r3, r3, #1
 8009a2c:	089b      	lsrpl	r3, r3, #2
 8009a2e:	2001      	movmi	r0, #1
 8009a30:	6013      	strmi	r3, [r2, #0]
 8009a32:	bf5c      	itt	pl
 8009a34:	2002      	movpl	r0, #2
 8009a36:	6013      	strpl	r3, [r2, #0]
 8009a38:	4770      	bx	lr
 8009a3a:	b299      	uxth	r1, r3
 8009a3c:	b909      	cbnz	r1, 8009a42 <__lo0bits+0x2a>
 8009a3e:	2010      	movs	r0, #16
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	b2d9      	uxtb	r1, r3
 8009a44:	b909      	cbnz	r1, 8009a4a <__lo0bits+0x32>
 8009a46:	3008      	adds	r0, #8
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	0719      	lsls	r1, r3, #28
 8009a4c:	bf04      	itt	eq
 8009a4e:	091b      	lsreq	r3, r3, #4
 8009a50:	3004      	addeq	r0, #4
 8009a52:	0799      	lsls	r1, r3, #30
 8009a54:	bf04      	itt	eq
 8009a56:	089b      	lsreq	r3, r3, #2
 8009a58:	3002      	addeq	r0, #2
 8009a5a:	07d9      	lsls	r1, r3, #31
 8009a5c:	d403      	bmi.n	8009a66 <__lo0bits+0x4e>
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	f100 0001 	add.w	r0, r0, #1
 8009a64:	d003      	beq.n	8009a6e <__lo0bits+0x56>
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	4770      	bx	lr
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	4770      	bx	lr
 8009a6e:	2020      	movs	r0, #32
 8009a70:	4770      	bx	lr
	...

08009a74 <__i2b>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	460c      	mov	r4, r1
 8009a78:	2101      	movs	r1, #1
 8009a7a:	f7ff febb 	bl	80097f4 <_Balloc>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	b928      	cbnz	r0, 8009a8e <__i2b+0x1a>
 8009a82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a86:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <__i2b+0x24>)
 8009a88:	4804      	ldr	r0, [pc, #16]	; (8009a9c <__i2b+0x28>)
 8009a8a:	f7fe fa5b 	bl	8007f44 <__assert_func>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	6144      	str	r4, [r0, #20]
 8009a92:	6103      	str	r3, [r0, #16]
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	bf00      	nop
 8009a98:	0800afb9 	.word	0x0800afb9
 8009a9c:	0800b0a8 	.word	0x0800b0a8

08009aa0 <__multiply>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4691      	mov	r9, r2
 8009aa6:	690a      	ldr	r2, [r1, #16]
 8009aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009aac:	460c      	mov	r4, r1
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	bfbe      	ittt	lt
 8009ab2:	460b      	movlt	r3, r1
 8009ab4:	464c      	movlt	r4, r9
 8009ab6:	4699      	movlt	r9, r3
 8009ab8:	6927      	ldr	r7, [r4, #16]
 8009aba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	eb07 060a 	add.w	r6, r7, sl
 8009ac6:	42b3      	cmp	r3, r6
 8009ac8:	b085      	sub	sp, #20
 8009aca:	bfb8      	it	lt
 8009acc:	3101      	addlt	r1, #1
 8009ace:	f7ff fe91 	bl	80097f4 <_Balloc>
 8009ad2:	b930      	cbnz	r0, 8009ae2 <__multiply+0x42>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	f240 115d 	movw	r1, #349	; 0x15d
 8009ada:	4b43      	ldr	r3, [pc, #268]	; (8009be8 <__multiply+0x148>)
 8009adc:	4843      	ldr	r0, [pc, #268]	; (8009bec <__multiply+0x14c>)
 8009ade:	f7fe fa31 	bl	8007f44 <__assert_func>
 8009ae2:	f100 0514 	add.w	r5, r0, #20
 8009ae6:	462b      	mov	r3, r5
 8009ae8:	2200      	movs	r2, #0
 8009aea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009aee:	4543      	cmp	r3, r8
 8009af0:	d321      	bcc.n	8009b36 <__multiply+0x96>
 8009af2:	f104 0314 	add.w	r3, r4, #20
 8009af6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009afa:	f109 0314 	add.w	r3, r9, #20
 8009afe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b02:	9202      	str	r2, [sp, #8]
 8009b04:	1b3a      	subs	r2, r7, r4
 8009b06:	3a15      	subs	r2, #21
 8009b08:	f022 0203 	bic.w	r2, r2, #3
 8009b0c:	3204      	adds	r2, #4
 8009b0e:	f104 0115 	add.w	r1, r4, #21
 8009b12:	428f      	cmp	r7, r1
 8009b14:	bf38      	it	cc
 8009b16:	2204      	movcc	r2, #4
 8009b18:	9201      	str	r2, [sp, #4]
 8009b1a:	9a02      	ldr	r2, [sp, #8]
 8009b1c:	9303      	str	r3, [sp, #12]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d80c      	bhi.n	8009b3c <__multiply+0x9c>
 8009b22:	2e00      	cmp	r6, #0
 8009b24:	dd03      	ble.n	8009b2e <__multiply+0x8e>
 8009b26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d059      	beq.n	8009be2 <__multiply+0x142>
 8009b2e:	6106      	str	r6, [r0, #16]
 8009b30:	b005      	add	sp, #20
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	f843 2b04 	str.w	r2, [r3], #4
 8009b3a:	e7d8      	b.n	8009aee <__multiply+0x4e>
 8009b3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b40:	f1ba 0f00 	cmp.w	sl, #0
 8009b44:	d023      	beq.n	8009b8e <__multiply+0xee>
 8009b46:	46a9      	mov	r9, r5
 8009b48:	f04f 0c00 	mov.w	ip, #0
 8009b4c:	f104 0e14 	add.w	lr, r4, #20
 8009b50:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b54:	f8d9 1000 	ldr.w	r1, [r9]
 8009b58:	fa1f fb82 	uxth.w	fp, r2
 8009b5c:	b289      	uxth	r1, r1
 8009b5e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b62:	4461      	add	r1, ip
 8009b64:	f8d9 c000 	ldr.w	ip, [r9]
 8009b68:	0c12      	lsrs	r2, r2, #16
 8009b6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009b6e:	fb0a c202 	mla	r2, sl, r2, ip
 8009b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b76:	b289      	uxth	r1, r1
 8009b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b7c:	4577      	cmp	r7, lr
 8009b7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b82:	f849 1b04 	str.w	r1, [r9], #4
 8009b86:	d8e3      	bhi.n	8009b50 <__multiply+0xb0>
 8009b88:	9a01      	ldr	r2, [sp, #4]
 8009b8a:	f845 c002 	str.w	ip, [r5, r2]
 8009b8e:	9a03      	ldr	r2, [sp, #12]
 8009b90:	3304      	adds	r3, #4
 8009b92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b96:	f1b9 0f00 	cmp.w	r9, #0
 8009b9a:	d020      	beq.n	8009bde <__multiply+0x13e>
 8009b9c:	46ae      	mov	lr, r5
 8009b9e:	f04f 0a00 	mov.w	sl, #0
 8009ba2:	6829      	ldr	r1, [r5, #0]
 8009ba4:	f104 0c14 	add.w	ip, r4, #20
 8009ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8009bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bb0:	b289      	uxth	r1, r1
 8009bb2:	fb09 220b 	mla	r2, r9, fp, r2
 8009bb6:	4492      	add	sl, r2
 8009bb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8009bc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009bc4:	f8be 1000 	ldrh.w	r1, [lr]
 8009bc8:	0c12      	lsrs	r2, r2, #16
 8009bca:	fb09 1102 	mla	r1, r9, r2, r1
 8009bce:	4567      	cmp	r7, ip
 8009bd0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bd8:	d8e6      	bhi.n	8009ba8 <__multiply+0x108>
 8009bda:	9a01      	ldr	r2, [sp, #4]
 8009bdc:	50a9      	str	r1, [r5, r2]
 8009bde:	3504      	adds	r5, #4
 8009be0:	e79b      	b.n	8009b1a <__multiply+0x7a>
 8009be2:	3e01      	subs	r6, #1
 8009be4:	e79d      	b.n	8009b22 <__multiply+0x82>
 8009be6:	bf00      	nop
 8009be8:	0800afb9 	.word	0x0800afb9
 8009bec:	0800b0a8 	.word	0x0800b0a8

08009bf0 <__pow5mult>:
 8009bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	4615      	mov	r5, r2
 8009bf6:	f012 0203 	ands.w	r2, r2, #3
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	d007      	beq.n	8009c10 <__pow5mult+0x20>
 8009c00:	4c25      	ldr	r4, [pc, #148]	; (8009c98 <__pow5mult+0xa8>)
 8009c02:	3a01      	subs	r2, #1
 8009c04:	2300      	movs	r3, #0
 8009c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c0a:	f7ff fe55 	bl	80098b8 <__multadd>
 8009c0e:	4607      	mov	r7, r0
 8009c10:	10ad      	asrs	r5, r5, #2
 8009c12:	d03d      	beq.n	8009c90 <__pow5mult+0xa0>
 8009c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c16:	b97c      	cbnz	r4, 8009c38 <__pow5mult+0x48>
 8009c18:	2010      	movs	r0, #16
 8009c1a:	f7ff fdc3 	bl	80097a4 <malloc>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	6270      	str	r0, [r6, #36]	; 0x24
 8009c22:	b928      	cbnz	r0, 8009c30 <__pow5mult+0x40>
 8009c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c28:	4b1c      	ldr	r3, [pc, #112]	; (8009c9c <__pow5mult+0xac>)
 8009c2a:	481d      	ldr	r0, [pc, #116]	; (8009ca0 <__pow5mult+0xb0>)
 8009c2c:	f7fe f98a 	bl	8007f44 <__assert_func>
 8009c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c34:	6004      	str	r4, [r0, #0]
 8009c36:	60c4      	str	r4, [r0, #12]
 8009c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c40:	b94c      	cbnz	r4, 8009c56 <__pow5mult+0x66>
 8009c42:	f240 2171 	movw	r1, #625	; 0x271
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7ff ff14 	bl	8009a74 <__i2b>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	f04f 0900 	mov.w	r9, #0
 8009c5a:	07eb      	lsls	r3, r5, #31
 8009c5c:	d50a      	bpl.n	8009c74 <__pow5mult+0x84>
 8009c5e:	4639      	mov	r1, r7
 8009c60:	4622      	mov	r2, r4
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ff1c 	bl	8009aa0 <__multiply>
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7ff fe01 	bl	8009874 <_Bfree>
 8009c72:	4647      	mov	r7, r8
 8009c74:	106d      	asrs	r5, r5, #1
 8009c76:	d00b      	beq.n	8009c90 <__pow5mult+0xa0>
 8009c78:	6820      	ldr	r0, [r4, #0]
 8009c7a:	b938      	cbnz	r0, 8009c8c <__pow5mult+0x9c>
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7ff ff0d 	bl	8009aa0 <__multiply>
 8009c86:	6020      	str	r0, [r4, #0]
 8009c88:	f8c0 9000 	str.w	r9, [r0]
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	e7e4      	b.n	8009c5a <__pow5mult+0x6a>
 8009c90:	4638      	mov	r0, r7
 8009c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c96:	bf00      	nop
 8009c98:	0800b1f8 	.word	0x0800b1f8
 8009c9c:	0800ada0 	.word	0x0800ada0
 8009ca0:	0800b0a8 	.word	0x0800b0a8

08009ca4 <__lshift>:
 8009ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca8:	460c      	mov	r4, r1
 8009caa:	4607      	mov	r7, r0
 8009cac:	4691      	mov	r9, r2
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	6849      	ldr	r1, [r1, #4]
 8009cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cbc:	f108 0601 	add.w	r6, r8, #1
 8009cc0:	42b3      	cmp	r3, r6
 8009cc2:	db0b      	blt.n	8009cdc <__lshift+0x38>
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff fd95 	bl	80097f4 <_Balloc>
 8009cca:	4605      	mov	r5, r0
 8009ccc:	b948      	cbnz	r0, 8009ce2 <__lshift+0x3e>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009cd4:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <__lshift+0xd8>)
 8009cd6:	482a      	ldr	r0, [pc, #168]	; (8009d80 <__lshift+0xdc>)
 8009cd8:	f7fe f934 	bl	8007f44 <__assert_func>
 8009cdc:	3101      	adds	r1, #1
 8009cde:	005b      	lsls	r3, r3, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__lshift+0x1c>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f100 0114 	add.w	r1, r0, #20
 8009ce8:	f100 0210 	add.w	r2, r0, #16
 8009cec:	4618      	mov	r0, r3
 8009cee:	4553      	cmp	r3, sl
 8009cf0:	db37      	blt.n	8009d62 <__lshift+0xbe>
 8009cf2:	6920      	ldr	r0, [r4, #16]
 8009cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cf8:	f104 0314 	add.w	r3, r4, #20
 8009cfc:	f019 091f 	ands.w	r9, r9, #31
 8009d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d08:	d02f      	beq.n	8009d6a <__lshift+0xc6>
 8009d0a:	468a      	mov	sl, r1
 8009d0c:	f04f 0c00 	mov.w	ip, #0
 8009d10:	f1c9 0e20 	rsb	lr, r9, #32
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	fa02 f209 	lsl.w	r2, r2, r9
 8009d1a:	ea42 020c 	orr.w	r2, r2, ip
 8009d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	4298      	cmp	r0, r3
 8009d28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d2c:	d8f2      	bhi.n	8009d14 <__lshift+0x70>
 8009d2e:	1b03      	subs	r3, r0, r4
 8009d30:	3b15      	subs	r3, #21
 8009d32:	f023 0303 	bic.w	r3, r3, #3
 8009d36:	3304      	adds	r3, #4
 8009d38:	f104 0215 	add.w	r2, r4, #21
 8009d3c:	4290      	cmp	r0, r2
 8009d3e:	bf38      	it	cc
 8009d40:	2304      	movcc	r3, #4
 8009d42:	f841 c003 	str.w	ip, [r1, r3]
 8009d46:	f1bc 0f00 	cmp.w	ip, #0
 8009d4a:	d001      	beq.n	8009d50 <__lshift+0xac>
 8009d4c:	f108 0602 	add.w	r6, r8, #2
 8009d50:	3e01      	subs	r6, #1
 8009d52:	4638      	mov	r0, r7
 8009d54:	4621      	mov	r1, r4
 8009d56:	612e      	str	r6, [r5, #16]
 8009d58:	f7ff fd8c 	bl	8009874 <_Bfree>
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d66:	3301      	adds	r3, #1
 8009d68:	e7c1      	b.n	8009cee <__lshift+0x4a>
 8009d6a:	3904      	subs	r1, #4
 8009d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d70:	4298      	cmp	r0, r3
 8009d72:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d76:	d8f9      	bhi.n	8009d6c <__lshift+0xc8>
 8009d78:	e7ea      	b.n	8009d50 <__lshift+0xac>
 8009d7a:	bf00      	nop
 8009d7c:	0800afb9 	.word	0x0800afb9
 8009d80:	0800b0a8 	.word	0x0800b0a8

08009d84 <__mcmp>:
 8009d84:	4603      	mov	r3, r0
 8009d86:	690a      	ldr	r2, [r1, #16]
 8009d88:	6900      	ldr	r0, [r0, #16]
 8009d8a:	b530      	push	{r4, r5, lr}
 8009d8c:	1a80      	subs	r0, r0, r2
 8009d8e:	d10d      	bne.n	8009dac <__mcmp+0x28>
 8009d90:	3314      	adds	r3, #20
 8009d92:	3114      	adds	r1, #20
 8009d94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009da4:	4295      	cmp	r5, r2
 8009da6:	d002      	beq.n	8009dae <__mcmp+0x2a>
 8009da8:	d304      	bcc.n	8009db4 <__mcmp+0x30>
 8009daa:	2001      	movs	r0, #1
 8009dac:	bd30      	pop	{r4, r5, pc}
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	d3f4      	bcc.n	8009d9c <__mcmp+0x18>
 8009db2:	e7fb      	b.n	8009dac <__mcmp+0x28>
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	e7f8      	b.n	8009dac <__mcmp+0x28>
	...

08009dbc <__mdiff>:
 8009dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	4614      	mov	r4, r2
 8009dca:	f7ff ffdb 	bl	8009d84 <__mcmp>
 8009dce:	1e06      	subs	r6, r0, #0
 8009dd0:	d111      	bne.n	8009df6 <__mdiff+0x3a>
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7ff fd0d 	bl	80097f4 <_Balloc>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	b928      	cbnz	r0, 8009dea <__mdiff+0x2e>
 8009dde:	f240 2132 	movw	r1, #562	; 0x232
 8009de2:	4b3a      	ldr	r3, [pc, #232]	; (8009ecc <__mdiff+0x110>)
 8009de4:	483a      	ldr	r0, [pc, #232]	; (8009ed0 <__mdiff+0x114>)
 8009de6:	f7fe f8ad 	bl	8007f44 <__assert_func>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009df0:	4610      	mov	r0, r2
 8009df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df6:	bfa4      	itt	ge
 8009df8:	4623      	movge	r3, r4
 8009dfa:	462c      	movge	r4, r5
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	6861      	ldr	r1, [r4, #4]
 8009e00:	bfa6      	itte	ge
 8009e02:	461d      	movge	r5, r3
 8009e04:	2600      	movge	r6, #0
 8009e06:	2601      	movlt	r6, #1
 8009e08:	f7ff fcf4 	bl	80097f4 <_Balloc>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	b918      	cbnz	r0, 8009e18 <__mdiff+0x5c>
 8009e10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e14:	4b2d      	ldr	r3, [pc, #180]	; (8009ecc <__mdiff+0x110>)
 8009e16:	e7e5      	b.n	8009de4 <__mdiff+0x28>
 8009e18:	f102 0814 	add.w	r8, r2, #20
 8009e1c:	46c2      	mov	sl, r8
 8009e1e:	f04f 0c00 	mov.w	ip, #0
 8009e22:	6927      	ldr	r7, [r4, #16]
 8009e24:	60c6      	str	r6, [r0, #12]
 8009e26:	692e      	ldr	r6, [r5, #16]
 8009e28:	f104 0014 	add.w	r0, r4, #20
 8009e2c:	f105 0914 	add.w	r9, r5, #20
 8009e30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e38:	3410      	adds	r4, #16
 8009e3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009e3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e42:	fa1f f18b 	uxth.w	r1, fp
 8009e46:	448c      	add	ip, r1
 8009e48:	b299      	uxth	r1, r3
 8009e4a:	0c1b      	lsrs	r3, r3, #16
 8009e4c:	ebac 0101 	sub.w	r1, ip, r1
 8009e50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009e58:	b289      	uxth	r1, r1
 8009e5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009e5e:	454e      	cmp	r6, r9
 8009e60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009e64:	f84a 3b04 	str.w	r3, [sl], #4
 8009e68:	d8e7      	bhi.n	8009e3a <__mdiff+0x7e>
 8009e6a:	1b73      	subs	r3, r6, r5
 8009e6c:	3b15      	subs	r3, #21
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	3515      	adds	r5, #21
 8009e74:	3304      	adds	r3, #4
 8009e76:	42ae      	cmp	r6, r5
 8009e78:	bf38      	it	cc
 8009e7a:	2304      	movcc	r3, #4
 8009e7c:	4418      	add	r0, r3
 8009e7e:	4443      	add	r3, r8
 8009e80:	461e      	mov	r6, r3
 8009e82:	4605      	mov	r5, r0
 8009e84:	4575      	cmp	r5, lr
 8009e86:	d30e      	bcc.n	8009ea6 <__mdiff+0xea>
 8009e88:	f10e 0103 	add.w	r1, lr, #3
 8009e8c:	1a09      	subs	r1, r1, r0
 8009e8e:	f021 0103 	bic.w	r1, r1, #3
 8009e92:	3803      	subs	r0, #3
 8009e94:	4586      	cmp	lr, r0
 8009e96:	bf38      	it	cc
 8009e98:	2100      	movcc	r1, #0
 8009e9a:	4419      	add	r1, r3
 8009e9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ea0:	b18b      	cbz	r3, 8009ec6 <__mdiff+0x10a>
 8009ea2:	6117      	str	r7, [r2, #16]
 8009ea4:	e7a4      	b.n	8009df0 <__mdiff+0x34>
 8009ea6:	f855 8b04 	ldr.w	r8, [r5], #4
 8009eaa:	fa1f f188 	uxth.w	r1, r8
 8009eae:	4461      	add	r1, ip
 8009eb0:	140c      	asrs	r4, r1, #16
 8009eb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009eb6:	b289      	uxth	r1, r1
 8009eb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ebc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009ec0:	f846 1b04 	str.w	r1, [r6], #4
 8009ec4:	e7de      	b.n	8009e84 <__mdiff+0xc8>
 8009ec6:	3f01      	subs	r7, #1
 8009ec8:	e7e8      	b.n	8009e9c <__mdiff+0xe0>
 8009eca:	bf00      	nop
 8009ecc:	0800afb9 	.word	0x0800afb9
 8009ed0:	0800b0a8 	.word	0x0800b0a8

08009ed4 <__ulp>:
 8009ed4:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <__ulp+0x48>)
 8009ed6:	400b      	ands	r3, r1
 8009ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dd02      	ble.n	8009ee6 <__ulp+0x12>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4770      	bx	lr
 8009ee6:	425b      	negs	r3, r3
 8009ee8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009eec:	f04f 0000 	mov.w	r0, #0
 8009ef0:	f04f 0100 	mov.w	r1, #0
 8009ef4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ef8:	da04      	bge.n	8009f04 <__ulp+0x30>
 8009efa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009efe:	fa43 f102 	asr.w	r1, r3, r2
 8009f02:	4770      	bx	lr
 8009f04:	f1a2 0314 	sub.w	r3, r2, #20
 8009f08:	2b1e      	cmp	r3, #30
 8009f0a:	bfd6      	itet	le
 8009f0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009f10:	2301      	movgt	r3, #1
 8009f12:	fa22 f303 	lsrle.w	r3, r2, r3
 8009f16:	4618      	mov	r0, r3
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	7ff00000 	.word	0x7ff00000

08009f20 <__b2d>:
 8009f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f24:	6907      	ldr	r7, [r0, #16]
 8009f26:	f100 0914 	add.w	r9, r0, #20
 8009f2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009f2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009f32:	f1a7 0804 	sub.w	r8, r7, #4
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff fd4e 	bl	80099d8 <__hi0bits>
 8009f3c:	f1c0 0320 	rsb	r3, r0, #32
 8009f40:	280a      	cmp	r0, #10
 8009f42:	600b      	str	r3, [r1, #0]
 8009f44:	491f      	ldr	r1, [pc, #124]	; (8009fc4 <__b2d+0xa4>)
 8009f46:	dc17      	bgt.n	8009f78 <__b2d+0x58>
 8009f48:	45c1      	cmp	r9, r8
 8009f4a:	bf28      	it	cs
 8009f4c:	2200      	movcs	r2, #0
 8009f4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f52:	fa26 f30c 	lsr.w	r3, r6, ip
 8009f56:	bf38      	it	cc
 8009f58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009f5c:	ea43 0501 	orr.w	r5, r3, r1
 8009f60:	f100 0315 	add.w	r3, r0, #21
 8009f64:	fa06 f303 	lsl.w	r3, r6, r3
 8009f68:	fa22 f20c 	lsr.w	r2, r2, ip
 8009f6c:	ea43 0402 	orr.w	r4, r3, r2
 8009f70:	4620      	mov	r0, r4
 8009f72:	4629      	mov	r1, r5
 8009f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f78:	45c1      	cmp	r9, r8
 8009f7a:	bf2e      	itee	cs
 8009f7c:	2200      	movcs	r2, #0
 8009f7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009f82:	f1a7 0808 	subcc.w	r8, r7, #8
 8009f86:	f1b0 030b 	subs.w	r3, r0, #11
 8009f8a:	d016      	beq.n	8009fba <__b2d+0x9a>
 8009f8c:	f1c3 0720 	rsb	r7, r3, #32
 8009f90:	fa22 f107 	lsr.w	r1, r2, r7
 8009f94:	45c8      	cmp	r8, r9
 8009f96:	fa06 f603 	lsl.w	r6, r6, r3
 8009f9a:	ea46 0601 	orr.w	r6, r6, r1
 8009f9e:	bf94      	ite	ls
 8009fa0:	2100      	movls	r1, #0
 8009fa2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009fa6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009faa:	fa02 f003 	lsl.w	r0, r2, r3
 8009fae:	40f9      	lsrs	r1, r7
 8009fb0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009fb4:	ea40 0401 	orr.w	r4, r0, r1
 8009fb8:	e7da      	b.n	8009f70 <__b2d+0x50>
 8009fba:	4614      	mov	r4, r2
 8009fbc:	ea46 0501 	orr.w	r5, r6, r1
 8009fc0:	e7d6      	b.n	8009f70 <__b2d+0x50>
 8009fc2:	bf00      	nop
 8009fc4:	3ff00000 	.word	0x3ff00000

08009fc8 <__d2b>:
 8009fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009fcc:	2101      	movs	r1, #1
 8009fce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009fd2:	4690      	mov	r8, r2
 8009fd4:	461d      	mov	r5, r3
 8009fd6:	f7ff fc0d 	bl	80097f4 <_Balloc>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	b930      	cbnz	r0, 8009fec <__d2b+0x24>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	f240 310a 	movw	r1, #778	; 0x30a
 8009fe4:	4b24      	ldr	r3, [pc, #144]	; (800a078 <__d2b+0xb0>)
 8009fe6:	4825      	ldr	r0, [pc, #148]	; (800a07c <__d2b+0xb4>)
 8009fe8:	f7fd ffac 	bl	8007f44 <__assert_func>
 8009fec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009ff0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009ff4:	bb2d      	cbnz	r5, 800a042 <__d2b+0x7a>
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	f1b8 0300 	subs.w	r3, r8, #0
 8009ffc:	d026      	beq.n	800a04c <__d2b+0x84>
 8009ffe:	4668      	mov	r0, sp
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	f7ff fd09 	bl	8009a18 <__lo0bits>
 800a006:	9900      	ldr	r1, [sp, #0]
 800a008:	b1f0      	cbz	r0, 800a048 <__d2b+0x80>
 800a00a:	9a01      	ldr	r2, [sp, #4]
 800a00c:	f1c0 0320 	rsb	r3, r0, #32
 800a010:	fa02 f303 	lsl.w	r3, r2, r3
 800a014:	430b      	orrs	r3, r1
 800a016:	40c2      	lsrs	r2, r0
 800a018:	6163      	str	r3, [r4, #20]
 800a01a:	9201      	str	r2, [sp, #4]
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bf14      	ite	ne
 800a022:	2102      	movne	r1, #2
 800a024:	2101      	moveq	r1, #1
 800a026:	61a3      	str	r3, [r4, #24]
 800a028:	6121      	str	r1, [r4, #16]
 800a02a:	b1c5      	cbz	r5, 800a05e <__d2b+0x96>
 800a02c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a030:	4405      	add	r5, r0
 800a032:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a036:	603d      	str	r5, [r7, #0]
 800a038:	6030      	str	r0, [r6, #0]
 800a03a:	4620      	mov	r0, r4
 800a03c:	b002      	add	sp, #8
 800a03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a046:	e7d6      	b.n	8009ff6 <__d2b+0x2e>
 800a048:	6161      	str	r1, [r4, #20]
 800a04a:	e7e7      	b.n	800a01c <__d2b+0x54>
 800a04c:	a801      	add	r0, sp, #4
 800a04e:	f7ff fce3 	bl	8009a18 <__lo0bits>
 800a052:	2101      	movs	r1, #1
 800a054:	9b01      	ldr	r3, [sp, #4]
 800a056:	6121      	str	r1, [r4, #16]
 800a058:	6163      	str	r3, [r4, #20]
 800a05a:	3020      	adds	r0, #32
 800a05c:	e7e5      	b.n	800a02a <__d2b+0x62>
 800a05e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a062:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a066:	6038      	str	r0, [r7, #0]
 800a068:	6918      	ldr	r0, [r3, #16]
 800a06a:	f7ff fcb5 	bl	80099d8 <__hi0bits>
 800a06e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a072:	6031      	str	r1, [r6, #0]
 800a074:	e7e1      	b.n	800a03a <__d2b+0x72>
 800a076:	bf00      	nop
 800a078:	0800afb9 	.word	0x0800afb9
 800a07c:	0800b0a8 	.word	0x0800b0a8

0800a080 <__ratio>:
 800a080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	4688      	mov	r8, r1
 800a086:	4669      	mov	r1, sp
 800a088:	4681      	mov	r9, r0
 800a08a:	f7ff ff49 	bl	8009f20 <__b2d>
 800a08e:	460f      	mov	r7, r1
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4640      	mov	r0, r8
 800a096:	a901      	add	r1, sp, #4
 800a098:	f7ff ff42 	bl	8009f20 <__b2d>
 800a09c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a0a4:	468b      	mov	fp, r1
 800a0a6:	eba3 0c02 	sub.w	ip, r3, r2
 800a0aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfd5      	itete	le
 800a0b8:	460a      	movle	r2, r1
 800a0ba:	462a      	movgt	r2, r5
 800a0bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0c4:	bfd8      	it	le
 800a0c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a0ca:	465b      	mov	r3, fp
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f7f6 fba5 	bl	8000820 <__aeabi_ddiv>
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0dc <__copybits>:
 800a0dc:	3901      	subs	r1, #1
 800a0de:	b570      	push	{r4, r5, r6, lr}
 800a0e0:	1149      	asrs	r1, r1, #5
 800a0e2:	6914      	ldr	r4, [r2, #16]
 800a0e4:	3101      	adds	r1, #1
 800a0e6:	f102 0314 	add.w	r3, r2, #20
 800a0ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a0ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0f2:	1f05      	subs	r5, r0, #4
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d30c      	bcc.n	800a112 <__copybits+0x36>
 800a0f8:	1aa3      	subs	r3, r4, r2
 800a0fa:	3b11      	subs	r3, #17
 800a0fc:	f023 0303 	bic.w	r3, r3, #3
 800a100:	3211      	adds	r2, #17
 800a102:	42a2      	cmp	r2, r4
 800a104:	bf88      	it	hi
 800a106:	2300      	movhi	r3, #0
 800a108:	4418      	add	r0, r3
 800a10a:	2300      	movs	r3, #0
 800a10c:	4288      	cmp	r0, r1
 800a10e:	d305      	bcc.n	800a11c <__copybits+0x40>
 800a110:	bd70      	pop	{r4, r5, r6, pc}
 800a112:	f853 6b04 	ldr.w	r6, [r3], #4
 800a116:	f845 6f04 	str.w	r6, [r5, #4]!
 800a11a:	e7eb      	b.n	800a0f4 <__copybits+0x18>
 800a11c:	f840 3b04 	str.w	r3, [r0], #4
 800a120:	e7f4      	b.n	800a10c <__copybits+0x30>

0800a122 <__any_on>:
 800a122:	f100 0214 	add.w	r2, r0, #20
 800a126:	6900      	ldr	r0, [r0, #16]
 800a128:	114b      	asrs	r3, r1, #5
 800a12a:	4298      	cmp	r0, r3
 800a12c:	b510      	push	{r4, lr}
 800a12e:	db11      	blt.n	800a154 <__any_on+0x32>
 800a130:	dd0a      	ble.n	800a148 <__any_on+0x26>
 800a132:	f011 011f 	ands.w	r1, r1, #31
 800a136:	d007      	beq.n	800a148 <__any_on+0x26>
 800a138:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a13c:	fa24 f001 	lsr.w	r0, r4, r1
 800a140:	fa00 f101 	lsl.w	r1, r0, r1
 800a144:	428c      	cmp	r4, r1
 800a146:	d10b      	bne.n	800a160 <__any_on+0x3e>
 800a148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d803      	bhi.n	800a158 <__any_on+0x36>
 800a150:	2000      	movs	r0, #0
 800a152:	bd10      	pop	{r4, pc}
 800a154:	4603      	mov	r3, r0
 800a156:	e7f7      	b.n	800a148 <__any_on+0x26>
 800a158:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a15c:	2900      	cmp	r1, #0
 800a15e:	d0f5      	beq.n	800a14c <__any_on+0x2a>
 800a160:	2001      	movs	r0, #1
 800a162:	e7f6      	b.n	800a152 <__any_on+0x30>

0800a164 <_calloc_r>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	fba1 5402 	umull	r5, r4, r1, r2
 800a16a:	b934      	cbnz	r4, 800a17a <_calloc_r+0x16>
 800a16c:	4629      	mov	r1, r5
 800a16e:	f000 f875 	bl	800a25c <_malloc_r>
 800a172:	4606      	mov	r6, r0
 800a174:	b928      	cbnz	r0, 800a182 <_calloc_r+0x1e>
 800a176:	4630      	mov	r0, r6
 800a178:	bd70      	pop	{r4, r5, r6, pc}
 800a17a:	220c      	movs	r2, #12
 800a17c:	2600      	movs	r6, #0
 800a17e:	6002      	str	r2, [r0, #0]
 800a180:	e7f9      	b.n	800a176 <_calloc_r+0x12>
 800a182:	462a      	mov	r2, r5
 800a184:	4621      	mov	r1, r4
 800a186:	f7fc f88d 	bl	80062a4 <memset>
 800a18a:	e7f4      	b.n	800a176 <_calloc_r+0x12>

0800a18c <_free_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4605      	mov	r5, r0
 800a190:	2900      	cmp	r1, #0
 800a192:	d040      	beq.n	800a216 <_free_r+0x8a>
 800a194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a198:	1f0c      	subs	r4, r1, #4
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	bfb8      	it	lt
 800a19e:	18e4      	addlt	r4, r4, r3
 800a1a0:	f000 fc76 	bl	800aa90 <__malloc_lock>
 800a1a4:	4a1c      	ldr	r2, [pc, #112]	; (800a218 <_free_r+0x8c>)
 800a1a6:	6813      	ldr	r3, [r2, #0]
 800a1a8:	b933      	cbnz	r3, 800a1b8 <_free_r+0x2c>
 800a1aa:	6063      	str	r3, [r4, #4]
 800a1ac:	6014      	str	r4, [r2, #0]
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1b4:	f000 bc72 	b.w	800aa9c <__malloc_unlock>
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d908      	bls.n	800a1ce <_free_r+0x42>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	1821      	adds	r1, r4, r0
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf01      	itttt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	1809      	addeq	r1, r1, r0
 800a1ca:	6021      	streq	r1, [r4, #0]
 800a1cc:	e7ed      	b.n	800a1aa <_free_r+0x1e>
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	b10b      	cbz	r3, 800a1d8 <_free_r+0x4c>
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d9fa      	bls.n	800a1ce <_free_r+0x42>
 800a1d8:	6811      	ldr	r1, [r2, #0]
 800a1da:	1850      	adds	r0, r2, r1
 800a1dc:	42a0      	cmp	r0, r4
 800a1de:	d10b      	bne.n	800a1f8 <_free_r+0x6c>
 800a1e0:	6820      	ldr	r0, [r4, #0]
 800a1e2:	4401      	add	r1, r0
 800a1e4:	1850      	adds	r0, r2, r1
 800a1e6:	4283      	cmp	r3, r0
 800a1e8:	6011      	str	r1, [r2, #0]
 800a1ea:	d1e0      	bne.n	800a1ae <_free_r+0x22>
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	4401      	add	r1, r0
 800a1f2:	6011      	str	r1, [r2, #0]
 800a1f4:	6053      	str	r3, [r2, #4]
 800a1f6:	e7da      	b.n	800a1ae <_free_r+0x22>
 800a1f8:	d902      	bls.n	800a200 <_free_r+0x74>
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	e7d6      	b.n	800a1ae <_free_r+0x22>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	1821      	adds	r1, r4, r0
 800a204:	428b      	cmp	r3, r1
 800a206:	bf01      	itttt	eq
 800a208:	6819      	ldreq	r1, [r3, #0]
 800a20a:	685b      	ldreq	r3, [r3, #4]
 800a20c:	1809      	addeq	r1, r1, r0
 800a20e:	6021      	streq	r1, [r4, #0]
 800a210:	6063      	str	r3, [r4, #4]
 800a212:	6054      	str	r4, [r2, #4]
 800a214:	e7cb      	b.n	800a1ae <_free_r+0x22>
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	20000b08 	.word	0x20000b08

0800a21c <sbrk_aligned>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	4e0e      	ldr	r6, [pc, #56]	; (800a258 <sbrk_aligned+0x3c>)
 800a220:	460c      	mov	r4, r1
 800a222:	6831      	ldr	r1, [r6, #0]
 800a224:	4605      	mov	r5, r0
 800a226:	b911      	cbnz	r1, 800a22e <sbrk_aligned+0x12>
 800a228:	f000 fb46 	bl	800a8b8 <_sbrk_r>
 800a22c:	6030      	str	r0, [r6, #0]
 800a22e:	4621      	mov	r1, r4
 800a230:	4628      	mov	r0, r5
 800a232:	f000 fb41 	bl	800a8b8 <_sbrk_r>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d00a      	beq.n	800a250 <sbrk_aligned+0x34>
 800a23a:	1cc4      	adds	r4, r0, #3
 800a23c:	f024 0403 	bic.w	r4, r4, #3
 800a240:	42a0      	cmp	r0, r4
 800a242:	d007      	beq.n	800a254 <sbrk_aligned+0x38>
 800a244:	1a21      	subs	r1, r4, r0
 800a246:	4628      	mov	r0, r5
 800a248:	f000 fb36 	bl	800a8b8 <_sbrk_r>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d101      	bne.n	800a254 <sbrk_aligned+0x38>
 800a250:	f04f 34ff 	mov.w	r4, #4294967295
 800a254:	4620      	mov	r0, r4
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	20000b0c 	.word	0x20000b0c

0800a25c <_malloc_r>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	1ccd      	adds	r5, r1, #3
 800a262:	f025 0503 	bic.w	r5, r5, #3
 800a266:	3508      	adds	r5, #8
 800a268:	2d0c      	cmp	r5, #12
 800a26a:	bf38      	it	cc
 800a26c:	250c      	movcc	r5, #12
 800a26e:	2d00      	cmp	r5, #0
 800a270:	4607      	mov	r7, r0
 800a272:	db01      	blt.n	800a278 <_malloc_r+0x1c>
 800a274:	42a9      	cmp	r1, r5
 800a276:	d905      	bls.n	800a284 <_malloc_r+0x28>
 800a278:	230c      	movs	r3, #12
 800a27a:	2600      	movs	r6, #0
 800a27c:	603b      	str	r3, [r7, #0]
 800a27e:	4630      	mov	r0, r6
 800a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a284:	4e2e      	ldr	r6, [pc, #184]	; (800a340 <_malloc_r+0xe4>)
 800a286:	f000 fc03 	bl	800aa90 <__malloc_lock>
 800a28a:	6833      	ldr	r3, [r6, #0]
 800a28c:	461c      	mov	r4, r3
 800a28e:	bb34      	cbnz	r4, 800a2de <_malloc_r+0x82>
 800a290:	4629      	mov	r1, r5
 800a292:	4638      	mov	r0, r7
 800a294:	f7ff ffc2 	bl	800a21c <sbrk_aligned>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	4604      	mov	r4, r0
 800a29c:	d14d      	bne.n	800a33a <_malloc_r+0xde>
 800a29e:	6834      	ldr	r4, [r6, #0]
 800a2a0:	4626      	mov	r6, r4
 800a2a2:	2e00      	cmp	r6, #0
 800a2a4:	d140      	bne.n	800a328 <_malloc_r+0xcc>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	eb04 0803 	add.w	r8, r4, r3
 800a2b0:	f000 fb02 	bl	800a8b8 <_sbrk_r>
 800a2b4:	4580      	cmp	r8, r0
 800a2b6:	d13a      	bne.n	800a32e <_malloc_r+0xd2>
 800a2b8:	6821      	ldr	r1, [r4, #0]
 800a2ba:	3503      	adds	r5, #3
 800a2bc:	1a6d      	subs	r5, r5, r1
 800a2be:	f025 0503 	bic.w	r5, r5, #3
 800a2c2:	3508      	adds	r5, #8
 800a2c4:	2d0c      	cmp	r5, #12
 800a2c6:	bf38      	it	cc
 800a2c8:	250c      	movcc	r5, #12
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7ff ffa5 	bl	800a21c <sbrk_aligned>
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d02b      	beq.n	800a32e <_malloc_r+0xd2>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	442b      	add	r3, r5
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	e00e      	b.n	800a2fc <_malloc_r+0xa0>
 800a2de:	6822      	ldr	r2, [r4, #0]
 800a2e0:	1b52      	subs	r2, r2, r5
 800a2e2:	d41e      	bmi.n	800a322 <_malloc_r+0xc6>
 800a2e4:	2a0b      	cmp	r2, #11
 800a2e6:	d916      	bls.n	800a316 <_malloc_r+0xba>
 800a2e8:	1961      	adds	r1, r4, r5
 800a2ea:	42a3      	cmp	r3, r4
 800a2ec:	6025      	str	r5, [r4, #0]
 800a2ee:	bf18      	it	ne
 800a2f0:	6059      	strne	r1, [r3, #4]
 800a2f2:	6863      	ldr	r3, [r4, #4]
 800a2f4:	bf08      	it	eq
 800a2f6:	6031      	streq	r1, [r6, #0]
 800a2f8:	5162      	str	r2, [r4, r5]
 800a2fa:	604b      	str	r3, [r1, #4]
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f104 060b 	add.w	r6, r4, #11
 800a302:	f000 fbcb 	bl	800aa9c <__malloc_unlock>
 800a306:	f026 0607 	bic.w	r6, r6, #7
 800a30a:	1d23      	adds	r3, r4, #4
 800a30c:	1af2      	subs	r2, r6, r3
 800a30e:	d0b6      	beq.n	800a27e <_malloc_r+0x22>
 800a310:	1b9b      	subs	r3, r3, r6
 800a312:	50a3      	str	r3, [r4, r2]
 800a314:	e7b3      	b.n	800a27e <_malloc_r+0x22>
 800a316:	6862      	ldr	r2, [r4, #4]
 800a318:	42a3      	cmp	r3, r4
 800a31a:	bf0c      	ite	eq
 800a31c:	6032      	streq	r2, [r6, #0]
 800a31e:	605a      	strne	r2, [r3, #4]
 800a320:	e7ec      	b.n	800a2fc <_malloc_r+0xa0>
 800a322:	4623      	mov	r3, r4
 800a324:	6864      	ldr	r4, [r4, #4]
 800a326:	e7b2      	b.n	800a28e <_malloc_r+0x32>
 800a328:	4634      	mov	r4, r6
 800a32a:	6876      	ldr	r6, [r6, #4]
 800a32c:	e7b9      	b.n	800a2a2 <_malloc_r+0x46>
 800a32e:	230c      	movs	r3, #12
 800a330:	4638      	mov	r0, r7
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	f000 fbb2 	bl	800aa9c <__malloc_unlock>
 800a338:	e7a1      	b.n	800a27e <_malloc_r+0x22>
 800a33a:	6025      	str	r5, [r4, #0]
 800a33c:	e7de      	b.n	800a2fc <_malloc_r+0xa0>
 800a33e:	bf00      	nop
 800a340:	20000b08 	.word	0x20000b08

0800a344 <__ssputs_r>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	688e      	ldr	r6, [r1, #8]
 800a34a:	4682      	mov	sl, r0
 800a34c:	429e      	cmp	r6, r3
 800a34e:	460c      	mov	r4, r1
 800a350:	4690      	mov	r8, r2
 800a352:	461f      	mov	r7, r3
 800a354:	d838      	bhi.n	800a3c8 <__ssputs_r+0x84>
 800a356:	898a      	ldrh	r2, [r1, #12]
 800a358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a35c:	d032      	beq.n	800a3c4 <__ssputs_r+0x80>
 800a35e:	6825      	ldr	r5, [r4, #0]
 800a360:	6909      	ldr	r1, [r1, #16]
 800a362:	3301      	adds	r3, #1
 800a364:	eba5 0901 	sub.w	r9, r5, r1
 800a368:	6965      	ldr	r5, [r4, #20]
 800a36a:	444b      	add	r3, r9
 800a36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a374:	106d      	asrs	r5, r5, #1
 800a376:	429d      	cmp	r5, r3
 800a378:	bf38      	it	cc
 800a37a:	461d      	movcc	r5, r3
 800a37c:	0553      	lsls	r3, r2, #21
 800a37e:	d531      	bpl.n	800a3e4 <__ssputs_r+0xa0>
 800a380:	4629      	mov	r1, r5
 800a382:	f7ff ff6b 	bl	800a25c <_malloc_r>
 800a386:	4606      	mov	r6, r0
 800a388:	b950      	cbnz	r0, 800a3a0 <__ssputs_r+0x5c>
 800a38a:	230c      	movs	r3, #12
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	f8ca 3000 	str.w	r3, [sl]
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39a:	81a3      	strh	r3, [r4, #12]
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	464a      	mov	r2, r9
 800a3a2:	6921      	ldr	r1, [r4, #16]
 800a3a4:	f7fb ff70 	bl	8006288 <memcpy>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	6126      	str	r6, [r4, #16]
 800a3b6:	444e      	add	r6, r9
 800a3b8:	6026      	str	r6, [r4, #0]
 800a3ba:	463e      	mov	r6, r7
 800a3bc:	6165      	str	r5, [r4, #20]
 800a3be:	eba5 0509 	sub.w	r5, r5, r9
 800a3c2:	60a5      	str	r5, [r4, #8]
 800a3c4:	42be      	cmp	r6, r7
 800a3c6:	d900      	bls.n	800a3ca <__ssputs_r+0x86>
 800a3c8:	463e      	mov	r6, r7
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	4641      	mov	r1, r8
 800a3ce:	6820      	ldr	r0, [r4, #0]
 800a3d0:	f000 fb44 	bl	800aa5c <memmove>
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	1b9b      	subs	r3, r3, r6
 800a3da:	60a3      	str	r3, [r4, #8]
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	4433      	add	r3, r6
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	e7db      	b.n	800a39c <__ssputs_r+0x58>
 800a3e4:	462a      	mov	r2, r5
 800a3e6:	f000 fb5f 	bl	800aaa8 <_realloc_r>
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1e1      	bne.n	800a3b4 <__ssputs_r+0x70>
 800a3f0:	4650      	mov	r0, sl
 800a3f2:	6921      	ldr	r1, [r4, #16]
 800a3f4:	f7ff feca 	bl	800a18c <_free_r>
 800a3f8:	e7c7      	b.n	800a38a <__ssputs_r+0x46>
	...

0800a3fc <_svfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	4698      	mov	r8, r3
 800a402:	898b      	ldrh	r3, [r1, #12]
 800a404:	4607      	mov	r7, r0
 800a406:	061b      	lsls	r3, r3, #24
 800a408:	460d      	mov	r5, r1
 800a40a:	4614      	mov	r4, r2
 800a40c:	b09d      	sub	sp, #116	; 0x74
 800a40e:	d50e      	bpl.n	800a42e <_svfiprintf_r+0x32>
 800a410:	690b      	ldr	r3, [r1, #16]
 800a412:	b963      	cbnz	r3, 800a42e <_svfiprintf_r+0x32>
 800a414:	2140      	movs	r1, #64	; 0x40
 800a416:	f7ff ff21 	bl	800a25c <_malloc_r>
 800a41a:	6028      	str	r0, [r5, #0]
 800a41c:	6128      	str	r0, [r5, #16]
 800a41e:	b920      	cbnz	r0, 800a42a <_svfiprintf_r+0x2e>
 800a420:	230c      	movs	r3, #12
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	e0d1      	b.n	800a5ce <_svfiprintf_r+0x1d2>
 800a42a:	2340      	movs	r3, #64	; 0x40
 800a42c:	616b      	str	r3, [r5, #20]
 800a42e:	2300      	movs	r3, #0
 800a430:	9309      	str	r3, [sp, #36]	; 0x24
 800a432:	2320      	movs	r3, #32
 800a434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a438:	2330      	movs	r3, #48	; 0x30
 800a43a:	f04f 0901 	mov.w	r9, #1
 800a43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a442:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5e8 <_svfiprintf_r+0x1ec>
 800a446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a44a:	4623      	mov	r3, r4
 800a44c:	469a      	mov	sl, r3
 800a44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a452:	b10a      	cbz	r2, 800a458 <_svfiprintf_r+0x5c>
 800a454:	2a25      	cmp	r2, #37	; 0x25
 800a456:	d1f9      	bne.n	800a44c <_svfiprintf_r+0x50>
 800a458:	ebba 0b04 	subs.w	fp, sl, r4
 800a45c:	d00b      	beq.n	800a476 <_svfiprintf_r+0x7a>
 800a45e:	465b      	mov	r3, fp
 800a460:	4622      	mov	r2, r4
 800a462:	4629      	mov	r1, r5
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff ff6d 	bl	800a344 <__ssputs_r>
 800a46a:	3001      	adds	r0, #1
 800a46c:	f000 80aa 	beq.w	800a5c4 <_svfiprintf_r+0x1c8>
 800a470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a472:	445a      	add	r2, fp
 800a474:	9209      	str	r2, [sp, #36]	; 0x24
 800a476:	f89a 3000 	ldrb.w	r3, [sl]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80a2 	beq.w	800a5c4 <_svfiprintf_r+0x1c8>
 800a480:	2300      	movs	r3, #0
 800a482:	f04f 32ff 	mov.w	r2, #4294967295
 800a486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48a:	f10a 0a01 	add.w	sl, sl, #1
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	9307      	str	r3, [sp, #28]
 800a492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a496:	931a      	str	r3, [sp, #104]	; 0x68
 800a498:	4654      	mov	r4, sl
 800a49a:	2205      	movs	r2, #5
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	4851      	ldr	r0, [pc, #324]	; (800a5e8 <_svfiprintf_r+0x1ec>)
 800a4a2:	f7ff f999 	bl	80097d8 <memchr>
 800a4a6:	9a04      	ldr	r2, [sp, #16]
 800a4a8:	b9d8      	cbnz	r0, 800a4e2 <_svfiprintf_r+0xe6>
 800a4aa:	06d0      	lsls	r0, r2, #27
 800a4ac:	bf44      	itt	mi
 800a4ae:	2320      	movmi	r3, #32
 800a4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b4:	0711      	lsls	r1, r2, #28
 800a4b6:	bf44      	itt	mi
 800a4b8:	232b      	movmi	r3, #43	; 0x2b
 800a4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c4:	d015      	beq.n	800a4f2 <_svfiprintf_r+0xf6>
 800a4c6:	4654      	mov	r4, sl
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	f04f 0c0a 	mov.w	ip, #10
 800a4ce:	9a07      	ldr	r2, [sp, #28]
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d6:	3b30      	subs	r3, #48	; 0x30
 800a4d8:	2b09      	cmp	r3, #9
 800a4da:	d94e      	bls.n	800a57a <_svfiprintf_r+0x17e>
 800a4dc:	b1b0      	cbz	r0, 800a50c <_svfiprintf_r+0x110>
 800a4de:	9207      	str	r2, [sp, #28]
 800a4e0:	e014      	b.n	800a50c <_svfiprintf_r+0x110>
 800a4e2:	eba0 0308 	sub.w	r3, r0, r8
 800a4e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	46a2      	mov	sl, r4
 800a4ee:	9304      	str	r3, [sp, #16]
 800a4f0:	e7d2      	b.n	800a498 <_svfiprintf_r+0x9c>
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	1d19      	adds	r1, r3, #4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	9103      	str	r1, [sp, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bfbb      	ittet	lt
 800a4fe:	425b      	neglt	r3, r3
 800a500:	f042 0202 	orrlt.w	r2, r2, #2
 800a504:	9307      	strge	r3, [sp, #28]
 800a506:	9307      	strlt	r3, [sp, #28]
 800a508:	bfb8      	it	lt
 800a50a:	9204      	strlt	r2, [sp, #16]
 800a50c:	7823      	ldrb	r3, [r4, #0]
 800a50e:	2b2e      	cmp	r3, #46	; 0x2e
 800a510:	d10c      	bne.n	800a52c <_svfiprintf_r+0x130>
 800a512:	7863      	ldrb	r3, [r4, #1]
 800a514:	2b2a      	cmp	r3, #42	; 0x2a
 800a516:	d135      	bne.n	800a584 <_svfiprintf_r+0x188>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	3402      	adds	r4, #2
 800a51c:	1d1a      	adds	r2, r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	9203      	str	r2, [sp, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfb8      	it	lt
 800a526:	f04f 33ff 	movlt.w	r3, #4294967295
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a5ec <_svfiprintf_r+0x1f0>
 800a530:	2203      	movs	r2, #3
 800a532:	4650      	mov	r0, sl
 800a534:	7821      	ldrb	r1, [r4, #0]
 800a536:	f7ff f94f 	bl	80097d8 <memchr>
 800a53a:	b140      	cbz	r0, 800a54e <_svfiprintf_r+0x152>
 800a53c:	2340      	movs	r3, #64	; 0x40
 800a53e:	eba0 000a 	sub.w	r0, r0, sl
 800a542:	fa03 f000 	lsl.w	r0, r3, r0
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	3401      	adds	r4, #1
 800a54a:	4303      	orrs	r3, r0
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	2206      	movs	r2, #6
 800a554:	4826      	ldr	r0, [pc, #152]	; (800a5f0 <_svfiprintf_r+0x1f4>)
 800a556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a55a:	f7ff f93d 	bl	80097d8 <memchr>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d038      	beq.n	800a5d4 <_svfiprintf_r+0x1d8>
 800a562:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <_svfiprintf_r+0x1f8>)
 800a564:	bb1b      	cbnz	r3, 800a5ae <_svfiprintf_r+0x1b2>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	3308      	adds	r3, #8
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a574:	4433      	add	r3, r6
 800a576:	9309      	str	r3, [sp, #36]	; 0x24
 800a578:	e767      	b.n	800a44a <_svfiprintf_r+0x4e>
 800a57a:	460c      	mov	r4, r1
 800a57c:	2001      	movs	r0, #1
 800a57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a582:	e7a5      	b.n	800a4d0 <_svfiprintf_r+0xd4>
 800a584:	2300      	movs	r3, #0
 800a586:	f04f 0c0a 	mov.w	ip, #10
 800a58a:	4619      	mov	r1, r3
 800a58c:	3401      	adds	r4, #1
 800a58e:	9305      	str	r3, [sp, #20]
 800a590:	4620      	mov	r0, r4
 800a592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a596:	3a30      	subs	r2, #48	; 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d903      	bls.n	800a5a4 <_svfiprintf_r+0x1a8>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0c5      	beq.n	800a52c <_svfiprintf_r+0x130>
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	e7c3      	b.n	800a52c <_svfiprintf_r+0x130>
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ac:	e7f0      	b.n	800a590 <_svfiprintf_r+0x194>
 800a5ae:	ab03      	add	r3, sp, #12
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <_svfiprintf_r+0x1fc>)
 800a5b8:	a904      	add	r1, sp, #16
 800a5ba:	f7fb ff19 	bl	80063f0 <_printf_float>
 800a5be:	1c42      	adds	r2, r0, #1
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	d1d6      	bne.n	800a572 <_svfiprintf_r+0x176>
 800a5c4:	89ab      	ldrh	r3, [r5, #12]
 800a5c6:	065b      	lsls	r3, r3, #25
 800a5c8:	f53f af2c 	bmi.w	800a424 <_svfiprintf_r+0x28>
 800a5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ce:	b01d      	add	sp, #116	; 0x74
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4638      	mov	r0, r7
 800a5dc:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <_svfiprintf_r+0x1fc>)
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	f7fc f9a2 	bl	8006928 <_printf_i>
 800a5e4:	e7eb      	b.n	800a5be <_svfiprintf_r+0x1c2>
 800a5e6:	bf00      	nop
 800a5e8:	0800b204 	.word	0x0800b204
 800a5ec:	0800b20a 	.word	0x0800b20a
 800a5f0:	0800b20e 	.word	0x0800b20e
 800a5f4:	080063f1 	.word	0x080063f1
 800a5f8:	0800a345 	.word	0x0800a345

0800a5fc <__sfputc_r>:
 800a5fc:	6893      	ldr	r3, [r2, #8]
 800a5fe:	b410      	push	{r4}
 800a600:	3b01      	subs	r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	6093      	str	r3, [r2, #8]
 800a606:	da07      	bge.n	800a618 <__sfputc_r+0x1c>
 800a608:	6994      	ldr	r4, [r2, #24]
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	db01      	blt.n	800a612 <__sfputc_r+0x16>
 800a60e:	290a      	cmp	r1, #10
 800a610:	d102      	bne.n	800a618 <__sfputc_r+0x1c>
 800a612:	bc10      	pop	{r4}
 800a614:	f7fd bbd6 	b.w	8007dc4 <__swbuf_r>
 800a618:	6813      	ldr	r3, [r2, #0]
 800a61a:	1c58      	adds	r0, r3, #1
 800a61c:	6010      	str	r0, [r2, #0]
 800a61e:	7019      	strb	r1, [r3, #0]
 800a620:	4608      	mov	r0, r1
 800a622:	bc10      	pop	{r4}
 800a624:	4770      	bx	lr

0800a626 <__sfputs_r>:
 800a626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a628:	4606      	mov	r6, r0
 800a62a:	460f      	mov	r7, r1
 800a62c:	4614      	mov	r4, r2
 800a62e:	18d5      	adds	r5, r2, r3
 800a630:	42ac      	cmp	r4, r5
 800a632:	d101      	bne.n	800a638 <__sfputs_r+0x12>
 800a634:	2000      	movs	r0, #0
 800a636:	e007      	b.n	800a648 <__sfputs_r+0x22>
 800a638:	463a      	mov	r2, r7
 800a63a:	4630      	mov	r0, r6
 800a63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a640:	f7ff ffdc 	bl	800a5fc <__sfputc_r>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d1f3      	bne.n	800a630 <__sfputs_r+0xa>
 800a648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a64c <_vfiprintf_r>:
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	460d      	mov	r5, r1
 800a652:	4614      	mov	r4, r2
 800a654:	4698      	mov	r8, r3
 800a656:	4606      	mov	r6, r0
 800a658:	b09d      	sub	sp, #116	; 0x74
 800a65a:	b118      	cbz	r0, 800a664 <_vfiprintf_r+0x18>
 800a65c:	6983      	ldr	r3, [r0, #24]
 800a65e:	b90b      	cbnz	r3, 800a664 <_vfiprintf_r+0x18>
 800a660:	f7fe fc1e 	bl	8008ea0 <__sinit>
 800a664:	4b89      	ldr	r3, [pc, #548]	; (800a88c <_vfiprintf_r+0x240>)
 800a666:	429d      	cmp	r5, r3
 800a668:	d11b      	bne.n	800a6a2 <_vfiprintf_r+0x56>
 800a66a:	6875      	ldr	r5, [r6, #4]
 800a66c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a66e:	07d9      	lsls	r1, r3, #31
 800a670:	d405      	bmi.n	800a67e <_vfiprintf_r+0x32>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	059a      	lsls	r2, r3, #22
 800a676:	d402      	bmi.n	800a67e <_vfiprintf_r+0x32>
 800a678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a67a:	f7ff f82c 	bl	80096d6 <__retarget_lock_acquire_recursive>
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	071b      	lsls	r3, r3, #28
 800a682:	d501      	bpl.n	800a688 <_vfiprintf_r+0x3c>
 800a684:	692b      	ldr	r3, [r5, #16]
 800a686:	b9eb      	cbnz	r3, 800a6c4 <_vfiprintf_r+0x78>
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7fd fbec 	bl	8007e68 <__swsetup_r>
 800a690:	b1c0      	cbz	r0, 800a6c4 <_vfiprintf_r+0x78>
 800a692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a694:	07dc      	lsls	r4, r3, #31
 800a696:	d50e      	bpl.n	800a6b6 <_vfiprintf_r+0x6a>
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	b01d      	add	sp, #116	; 0x74
 800a69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a2:	4b7b      	ldr	r3, [pc, #492]	; (800a890 <_vfiprintf_r+0x244>)
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	d101      	bne.n	800a6ac <_vfiprintf_r+0x60>
 800a6a8:	68b5      	ldr	r5, [r6, #8]
 800a6aa:	e7df      	b.n	800a66c <_vfiprintf_r+0x20>
 800a6ac:	4b79      	ldr	r3, [pc, #484]	; (800a894 <_vfiprintf_r+0x248>)
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	bf08      	it	eq
 800a6b2:	68f5      	ldreq	r5, [r6, #12]
 800a6b4:	e7da      	b.n	800a66c <_vfiprintf_r+0x20>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	0598      	lsls	r0, r3, #22
 800a6ba:	d4ed      	bmi.n	800a698 <_vfiprintf_r+0x4c>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6be:	f7ff f80b 	bl	80096d8 <__retarget_lock_release_recursive>
 800a6c2:	e7e9      	b.n	800a698 <_vfiprintf_r+0x4c>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ce:	2330      	movs	r3, #48	; 0x30
 800a6d0:	f04f 0901 	mov.w	r9, #1
 800a6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a898 <_vfiprintf_r+0x24c>
 800a6dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e0:	4623      	mov	r3, r4
 800a6e2:	469a      	mov	sl, r3
 800a6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e8:	b10a      	cbz	r2, 800a6ee <_vfiprintf_r+0xa2>
 800a6ea:	2a25      	cmp	r2, #37	; 0x25
 800a6ec:	d1f9      	bne.n	800a6e2 <_vfiprintf_r+0x96>
 800a6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f2:	d00b      	beq.n	800a70c <_vfiprintf_r+0xc0>
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7ff ff93 	bl	800a626 <__sfputs_r>
 800a700:	3001      	adds	r0, #1
 800a702:	f000 80aa 	beq.w	800a85a <_vfiprintf_r+0x20e>
 800a706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a708:	445a      	add	r2, fp
 800a70a:	9209      	str	r2, [sp, #36]	; 0x24
 800a70c:	f89a 3000 	ldrb.w	r3, [sl]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80a2 	beq.w	800a85a <_vfiprintf_r+0x20e>
 800a716:	2300      	movs	r3, #0
 800a718:	f04f 32ff 	mov.w	r2, #4294967295
 800a71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a720:	f10a 0a01 	add.w	sl, sl, #1
 800a724:	9304      	str	r3, [sp, #16]
 800a726:	9307      	str	r3, [sp, #28]
 800a728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a72c:	931a      	str	r3, [sp, #104]	; 0x68
 800a72e:	4654      	mov	r4, sl
 800a730:	2205      	movs	r2, #5
 800a732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a736:	4858      	ldr	r0, [pc, #352]	; (800a898 <_vfiprintf_r+0x24c>)
 800a738:	f7ff f84e 	bl	80097d8 <memchr>
 800a73c:	9a04      	ldr	r2, [sp, #16]
 800a73e:	b9d8      	cbnz	r0, 800a778 <_vfiprintf_r+0x12c>
 800a740:	06d1      	lsls	r1, r2, #27
 800a742:	bf44      	itt	mi
 800a744:	2320      	movmi	r3, #32
 800a746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74a:	0713      	lsls	r3, r2, #28
 800a74c:	bf44      	itt	mi
 800a74e:	232b      	movmi	r3, #43	; 0x2b
 800a750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b2a      	cmp	r3, #42	; 0x2a
 800a75a:	d015      	beq.n	800a788 <_vfiprintf_r+0x13c>
 800a75c:	4654      	mov	r4, sl
 800a75e:	2000      	movs	r0, #0
 800a760:	f04f 0c0a 	mov.w	ip, #10
 800a764:	9a07      	ldr	r2, [sp, #28]
 800a766:	4621      	mov	r1, r4
 800a768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a76c:	3b30      	subs	r3, #48	; 0x30
 800a76e:	2b09      	cmp	r3, #9
 800a770:	d94e      	bls.n	800a810 <_vfiprintf_r+0x1c4>
 800a772:	b1b0      	cbz	r0, 800a7a2 <_vfiprintf_r+0x156>
 800a774:	9207      	str	r2, [sp, #28]
 800a776:	e014      	b.n	800a7a2 <_vfiprintf_r+0x156>
 800a778:	eba0 0308 	sub.w	r3, r0, r8
 800a77c:	fa09 f303 	lsl.w	r3, r9, r3
 800a780:	4313      	orrs	r3, r2
 800a782:	46a2      	mov	sl, r4
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	e7d2      	b.n	800a72e <_vfiprintf_r+0xe2>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	1d19      	adds	r1, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9103      	str	r1, [sp, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfbb      	ittet	lt
 800a794:	425b      	neglt	r3, r3
 800a796:	f042 0202 	orrlt.w	r2, r2, #2
 800a79a:	9307      	strge	r3, [sp, #28]
 800a79c:	9307      	strlt	r3, [sp, #28]
 800a79e:	bfb8      	it	lt
 800a7a0:	9204      	strlt	r2, [sp, #16]
 800a7a2:	7823      	ldrb	r3, [r4, #0]
 800a7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a6:	d10c      	bne.n	800a7c2 <_vfiprintf_r+0x176>
 800a7a8:	7863      	ldrb	r3, [r4, #1]
 800a7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ac:	d135      	bne.n	800a81a <_vfiprintf_r+0x1ce>
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	3402      	adds	r4, #2
 800a7b2:	1d1a      	adds	r2, r3, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	9203      	str	r2, [sp, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bfb8      	it	lt
 800a7bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7c0:	9305      	str	r3, [sp, #20]
 800a7c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a89c <_vfiprintf_r+0x250>
 800a7c6:	2203      	movs	r2, #3
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	7821      	ldrb	r1, [r4, #0]
 800a7cc:	f7ff f804 	bl	80097d8 <memchr>
 800a7d0:	b140      	cbz	r0, 800a7e4 <_vfiprintf_r+0x198>
 800a7d2:	2340      	movs	r3, #64	; 0x40
 800a7d4:	eba0 000a 	sub.w	r0, r0, sl
 800a7d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a7dc:	9b04      	ldr	r3, [sp, #16]
 800a7de:	3401      	adds	r4, #1
 800a7e0:	4303      	orrs	r3, r0
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e8:	2206      	movs	r2, #6
 800a7ea:	482d      	ldr	r0, [pc, #180]	; (800a8a0 <_vfiprintf_r+0x254>)
 800a7ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f0:	f7fe fff2 	bl	80097d8 <memchr>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d03f      	beq.n	800a878 <_vfiprintf_r+0x22c>
 800a7f8:	4b2a      	ldr	r3, [pc, #168]	; (800a8a4 <_vfiprintf_r+0x258>)
 800a7fa:	bb1b      	cbnz	r3, 800a844 <_vfiprintf_r+0x1f8>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	3307      	adds	r3, #7
 800a800:	f023 0307 	bic.w	r3, r3, #7
 800a804:	3308      	adds	r3, #8
 800a806:	9303      	str	r3, [sp, #12]
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	443b      	add	r3, r7
 800a80c:	9309      	str	r3, [sp, #36]	; 0x24
 800a80e:	e767      	b.n	800a6e0 <_vfiprintf_r+0x94>
 800a810:	460c      	mov	r4, r1
 800a812:	2001      	movs	r0, #1
 800a814:	fb0c 3202 	mla	r2, ip, r2, r3
 800a818:	e7a5      	b.n	800a766 <_vfiprintf_r+0x11a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f04f 0c0a 	mov.w	ip, #10
 800a820:	4619      	mov	r1, r3
 800a822:	3401      	adds	r4, #1
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	4620      	mov	r0, r4
 800a828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a82c:	3a30      	subs	r2, #48	; 0x30
 800a82e:	2a09      	cmp	r2, #9
 800a830:	d903      	bls.n	800a83a <_vfiprintf_r+0x1ee>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0c5      	beq.n	800a7c2 <_vfiprintf_r+0x176>
 800a836:	9105      	str	r1, [sp, #20]
 800a838:	e7c3      	b.n	800a7c2 <_vfiprintf_r+0x176>
 800a83a:	4604      	mov	r4, r0
 800a83c:	2301      	movs	r3, #1
 800a83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a842:	e7f0      	b.n	800a826 <_vfiprintf_r+0x1da>
 800a844:	ab03      	add	r3, sp, #12
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	462a      	mov	r2, r5
 800a84a:	4630      	mov	r0, r6
 800a84c:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <_vfiprintf_r+0x25c>)
 800a84e:	a904      	add	r1, sp, #16
 800a850:	f7fb fdce 	bl	80063f0 <_printf_float>
 800a854:	4607      	mov	r7, r0
 800a856:	1c78      	adds	r0, r7, #1
 800a858:	d1d6      	bne.n	800a808 <_vfiprintf_r+0x1bc>
 800a85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85c:	07d9      	lsls	r1, r3, #31
 800a85e:	d405      	bmi.n	800a86c <_vfiprintf_r+0x220>
 800a860:	89ab      	ldrh	r3, [r5, #12]
 800a862:	059a      	lsls	r2, r3, #22
 800a864:	d402      	bmi.n	800a86c <_vfiprintf_r+0x220>
 800a866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a868:	f7fe ff36 	bl	80096d8 <__retarget_lock_release_recursive>
 800a86c:	89ab      	ldrh	r3, [r5, #12]
 800a86e:	065b      	lsls	r3, r3, #25
 800a870:	f53f af12 	bmi.w	800a698 <_vfiprintf_r+0x4c>
 800a874:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a876:	e711      	b.n	800a69c <_vfiprintf_r+0x50>
 800a878:	ab03      	add	r3, sp, #12
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	462a      	mov	r2, r5
 800a87e:	4630      	mov	r0, r6
 800a880:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_vfiprintf_r+0x25c>)
 800a882:	a904      	add	r1, sp, #16
 800a884:	f7fc f850 	bl	8006928 <_printf_i>
 800a888:	e7e4      	b.n	800a854 <_vfiprintf_r+0x208>
 800a88a:	bf00      	nop
 800a88c:	0800afec 	.word	0x0800afec
 800a890:	0800b00c 	.word	0x0800b00c
 800a894:	0800afcc 	.word	0x0800afcc
 800a898:	0800b204 	.word	0x0800b204
 800a89c:	0800b20a 	.word	0x0800b20a
 800a8a0:	0800b20e 	.word	0x0800b20e
 800a8a4:	080063f1 	.word	0x080063f1
 800a8a8:	0800a627 	.word	0x0800a627

0800a8ac <nan>:
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	4901      	ldr	r1, [pc, #4]	; (800a8b4 <nan+0x8>)
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	7ff80000 	.word	0x7ff80000

0800a8b8 <_sbrk_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4d05      	ldr	r5, [pc, #20]	; (800a8d4 <_sbrk_r+0x1c>)
 800a8be:	4604      	mov	r4, r0
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	602b      	str	r3, [r5, #0]
 800a8c4:	f7f7 f974 	bl	8001bb0 <_sbrk>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	d102      	bne.n	800a8d2 <_sbrk_r+0x1a>
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	b103      	cbz	r3, 800a8d2 <_sbrk_r+0x1a>
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	20000b10 	.word	0x20000b10

0800a8d8 <__sread>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	460c      	mov	r4, r1
 800a8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e0:	f000 f912 	bl	800ab08 <_read_r>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	bfab      	itete	ge
 800a8e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a8ec:	181b      	addge	r3, r3, r0
 800a8ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8f2:	bfac      	ite	ge
 800a8f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8f6:	81a3      	strhlt	r3, [r4, #12]
 800a8f8:	bd10      	pop	{r4, pc}

0800a8fa <__swrite>:
 800a8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fe:	461f      	mov	r7, r3
 800a900:	898b      	ldrh	r3, [r1, #12]
 800a902:	4605      	mov	r5, r0
 800a904:	05db      	lsls	r3, r3, #23
 800a906:	460c      	mov	r4, r1
 800a908:	4616      	mov	r6, r2
 800a90a:	d505      	bpl.n	800a918 <__swrite+0x1e>
 800a90c:	2302      	movs	r3, #2
 800a90e:	2200      	movs	r2, #0
 800a910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a914:	f000 f890 	bl	800aa38 <_lseek_r>
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	4632      	mov	r2, r6
 800a91c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	4628      	mov	r0, r5
 800a924:	463b      	mov	r3, r7
 800a926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	f000 b837 	b.w	800a9a0 <_write_r>

0800a932 <__sseek>:
 800a932:	b510      	push	{r4, lr}
 800a934:	460c      	mov	r4, r1
 800a936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93a:	f000 f87d 	bl	800aa38 <_lseek_r>
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	bf15      	itete	ne
 800a944:	6560      	strne	r0, [r4, #84]	; 0x54
 800a946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a94a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a94e:	81a3      	strheq	r3, [r4, #12]
 800a950:	bf18      	it	ne
 800a952:	81a3      	strhne	r3, [r4, #12]
 800a954:	bd10      	pop	{r4, pc}

0800a956 <__sclose>:
 800a956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95a:	f000 b83b 	b.w	800a9d4 <_close_r>

0800a95e <strncmp>:
 800a95e:	4603      	mov	r3, r0
 800a960:	b510      	push	{r4, lr}
 800a962:	b172      	cbz	r2, 800a982 <strncmp+0x24>
 800a964:	3901      	subs	r1, #1
 800a966:	1884      	adds	r4, r0, r2
 800a968:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a96c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a970:	4290      	cmp	r0, r2
 800a972:	d101      	bne.n	800a978 <strncmp+0x1a>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d101      	bne.n	800a97c <strncmp+0x1e>
 800a978:	1a80      	subs	r0, r0, r2
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d1f3      	bne.n	800a968 <strncmp+0xa>
 800a980:	e7fa      	b.n	800a978 <strncmp+0x1a>
 800a982:	4610      	mov	r0, r2
 800a984:	e7f9      	b.n	800a97a <strncmp+0x1c>

0800a986 <__ascii_wctomb>:
 800a986:	4603      	mov	r3, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	b141      	cbz	r1, 800a99e <__ascii_wctomb+0x18>
 800a98c:	2aff      	cmp	r2, #255	; 0xff
 800a98e:	d904      	bls.n	800a99a <__ascii_wctomb+0x14>
 800a990:	228a      	movs	r2, #138	; 0x8a
 800a992:	f04f 30ff 	mov.w	r0, #4294967295
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	4770      	bx	lr
 800a99a:	2001      	movs	r0, #1
 800a99c:	700a      	strb	r2, [r1, #0]
 800a99e:	4770      	bx	lr

0800a9a0 <_write_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4d05      	ldr	r5, [pc, #20]	; (800a9c0 <_write_r+0x20>)
 800a9ac:	602a      	str	r2, [r5, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f7f7 f8b2 	bl	8001b18 <_write>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_write_r+0x1e>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_write_r+0x1e>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20000b10 	.word	0x20000b10

0800a9c4 <abort>:
 800a9c4:	2006      	movs	r0, #6
 800a9c6:	b508      	push	{r3, lr}
 800a9c8:	f000 f8d8 	bl	800ab7c <raise>
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7f7 f87c 	bl	8001aca <_exit>
	...

0800a9d4 <_close_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4d05      	ldr	r5, [pc, #20]	; (800a9f0 <_close_r+0x1c>)
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f7 f8b6 	bl	8001b50 <_close>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_close_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_close_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000b10 	.word	0x20000b10

0800a9f4 <_fstat_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4d06      	ldr	r5, [pc, #24]	; (800aa14 <_fstat_r+0x20>)
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f7 f8b0 	bl	8001b66 <_fstat>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_fstat_r+0x1c>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_fstat_r+0x1c>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	20000b10 	.word	0x20000b10

0800aa18 <_isatty_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4d05      	ldr	r5, [pc, #20]	; (800aa34 <_isatty_r+0x1c>)
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f7 f8ae 	bl	8001b84 <_isatty>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_isatty_r+0x1a>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_isatty_r+0x1a>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	20000b10 	.word	0x20000b10

0800aa38 <_lseek_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	4611      	mov	r1, r2
 800aa40:	2200      	movs	r2, #0
 800aa42:	4d05      	ldr	r5, [pc, #20]	; (800aa58 <_lseek_r+0x20>)
 800aa44:	602a      	str	r2, [r5, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	f7f7 f8a6 	bl	8001b98 <_lseek>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_lseek_r+0x1e>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_lseek_r+0x1e>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	20000b10 	.word	0x20000b10

0800aa5c <memmove>:
 800aa5c:	4288      	cmp	r0, r1
 800aa5e:	b510      	push	{r4, lr}
 800aa60:	eb01 0402 	add.w	r4, r1, r2
 800aa64:	d902      	bls.n	800aa6c <memmove+0x10>
 800aa66:	4284      	cmp	r4, r0
 800aa68:	4623      	mov	r3, r4
 800aa6a:	d807      	bhi.n	800aa7c <memmove+0x20>
 800aa6c:	1e43      	subs	r3, r0, #1
 800aa6e:	42a1      	cmp	r1, r4
 800aa70:	d008      	beq.n	800aa84 <memmove+0x28>
 800aa72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa7a:	e7f8      	b.n	800aa6e <memmove+0x12>
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	4402      	add	r2, r0
 800aa80:	428a      	cmp	r2, r1
 800aa82:	d100      	bne.n	800aa86 <memmove+0x2a>
 800aa84:	bd10      	pop	{r4, pc}
 800aa86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa8e:	e7f7      	b.n	800aa80 <memmove+0x24>

0800aa90 <__malloc_lock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__malloc_lock+0x8>)
 800aa92:	f7fe be20 	b.w	80096d6 <__retarget_lock_acquire_recursive>
 800aa96:	bf00      	nop
 800aa98:	20000b04 	.word	0x20000b04

0800aa9c <__malloc_unlock>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	; (800aaa4 <__malloc_unlock+0x8>)
 800aa9e:	f7fe be1b 	b.w	80096d8 <__retarget_lock_release_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	20000b04 	.word	0x20000b04

0800aaa8 <_realloc_r>:
 800aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	4680      	mov	r8, r0
 800aaae:	4614      	mov	r4, r2
 800aab0:	460e      	mov	r6, r1
 800aab2:	b921      	cbnz	r1, 800aabe <_realloc_r+0x16>
 800aab4:	4611      	mov	r1, r2
 800aab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaba:	f7ff bbcf 	b.w	800a25c <_malloc_r>
 800aabe:	b92a      	cbnz	r2, 800aacc <_realloc_r+0x24>
 800aac0:	f7ff fb64 	bl	800a18c <_free_r>
 800aac4:	4625      	mov	r5, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aacc:	f000 f872 	bl	800abb4 <_malloc_usable_size_r>
 800aad0:	4284      	cmp	r4, r0
 800aad2:	4607      	mov	r7, r0
 800aad4:	d802      	bhi.n	800aadc <_realloc_r+0x34>
 800aad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aada:	d812      	bhi.n	800ab02 <_realloc_r+0x5a>
 800aadc:	4621      	mov	r1, r4
 800aade:	4640      	mov	r0, r8
 800aae0:	f7ff fbbc 	bl	800a25c <_malloc_r>
 800aae4:	4605      	mov	r5, r0
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d0ed      	beq.n	800aac6 <_realloc_r+0x1e>
 800aaea:	42bc      	cmp	r4, r7
 800aaec:	4622      	mov	r2, r4
 800aaee:	4631      	mov	r1, r6
 800aaf0:	bf28      	it	cs
 800aaf2:	463a      	movcs	r2, r7
 800aaf4:	f7fb fbc8 	bl	8006288 <memcpy>
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff fb46 	bl	800a18c <_free_r>
 800ab00:	e7e1      	b.n	800aac6 <_realloc_r+0x1e>
 800ab02:	4635      	mov	r5, r6
 800ab04:	e7df      	b.n	800aac6 <_realloc_r+0x1e>
	...

0800ab08 <_read_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	4611      	mov	r1, r2
 800ab10:	2200      	movs	r2, #0
 800ab12:	4d05      	ldr	r5, [pc, #20]	; (800ab28 <_read_r+0x20>)
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f6 ffe1 	bl	8001ade <_read>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_read_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_read_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20000b10 	.word	0x20000b10

0800ab2c <_raise_r>:
 800ab2c:	291f      	cmp	r1, #31
 800ab2e:	b538      	push	{r3, r4, r5, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	d904      	bls.n	800ab40 <_raise_r+0x14>
 800ab36:	2316      	movs	r3, #22
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab42:	b112      	cbz	r2, 800ab4a <_raise_r+0x1e>
 800ab44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab48:	b94b      	cbnz	r3, 800ab5e <_raise_r+0x32>
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f830 	bl	800abb0 <_getpid_r>
 800ab50:	462a      	mov	r2, r5
 800ab52:	4601      	mov	r1, r0
 800ab54:	4620      	mov	r0, r4
 800ab56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab5a:	f000 b817 	b.w	800ab8c <_kill_r>
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d00a      	beq.n	800ab78 <_raise_r+0x4c>
 800ab62:	1c59      	adds	r1, r3, #1
 800ab64:	d103      	bne.n	800ab6e <_raise_r+0x42>
 800ab66:	2316      	movs	r3, #22
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	e7e7      	b.n	800ab3e <_raise_r+0x12>
 800ab6e:	2400      	movs	r4, #0
 800ab70:	4628      	mov	r0, r5
 800ab72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab76:	4798      	blx	r3
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e7e0      	b.n	800ab3e <_raise_r+0x12>

0800ab7c <raise>:
 800ab7c:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <raise+0xc>)
 800ab7e:	4601      	mov	r1, r0
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	f7ff bfd3 	b.w	800ab2c <_raise_r>
 800ab86:	bf00      	nop
 800ab88:	20000500 	.word	0x20000500

0800ab8c <_kill_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4d06      	ldr	r5, [pc, #24]	; (800abac <_kill_r+0x20>)
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	4611      	mov	r1, r2
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	f7f6 ff86 	bl	8001aaa <_kill>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	d102      	bne.n	800aba8 <_kill_r+0x1c>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	b103      	cbz	r3, 800aba8 <_kill_r+0x1c>
 800aba6:	6023      	str	r3, [r4, #0]
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	20000b10 	.word	0x20000b10

0800abb0 <_getpid_r>:
 800abb0:	f7f6 bf74 	b.w	8001a9c <_getpid>

0800abb4 <_malloc_usable_size_r>:
 800abb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abb8:	1f18      	subs	r0, r3, #4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bfbc      	itt	lt
 800abbe:	580b      	ldrlt	r3, [r1, r0]
 800abc0:	18c0      	addlt	r0, r0, r3
 800abc2:	4770      	bx	lr

0800abc4 <_init>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	bf00      	nop
 800abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abca:	bc08      	pop	{r3}
 800abcc:	469e      	mov	lr, r3
 800abce:	4770      	bx	lr

0800abd0 <_fini>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr
