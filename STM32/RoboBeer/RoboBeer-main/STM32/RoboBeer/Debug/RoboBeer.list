
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006074  08006074  00016074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800639c  0800639c  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800639c  0800639c  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800639c  0800639c  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  080063a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000344  080066e8  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  080066e8  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a86  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350f  00000000  00000000  00033df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00037308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00038750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000447c  00000000  00000000  00039a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bf9  00000000  00000000  0003deb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9ef5  00000000  00000000  00056aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001009a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e58  00000000  00000000  001009f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000344 	.word	0x20000344
 800020c:	00000000 	.word	0x00000000
 8000210:	0800605c 	.word	0x0800605c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000348 	.word	0x20000348
 800022c:	0800605c 	.word	0x0800605c

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <MX_ADC1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_ADC1_Init+0x74>)
 800026e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_ADC1_Init+0x74>)
 800027c:	2201      	movs	r2, #1
 800027e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000282:	f001 fa4d 	bl	8001720 <HAL_ADC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 fb48 	bl	8000920 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000290:	2304      	movs	r3, #4
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_ADC1_Init+0x74>)
 80002a2:	f001 fb27 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 fb38 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000360 	.word	0x20000360
 80002bc:	40012400 	.word	0x40012400

080002c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a1f      	ldr	r2, [pc, #124]	; (8000358 <HAL_ADC_MspInit+0x98>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d137      	bne.n	8000350 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <HAL_ADC_MspInit+0x9c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <HAL_ADC_MspInit+0x9c>)
 80002e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <HAL_ADC_MspInit+0x9c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <HAL_ADC_MspInit+0x9c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <HAL_ADC_MspInit+0x9c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <HAL_ADC_MspInit+0x9c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	613b      	str	r3, [r7, #16]
 800030e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_ADC_MspInit+0x9c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <HAL_ADC_MspInit+0x9c>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_ADC_MspInit+0x9c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8000328:	23f0      	movs	r3, #240	; 0xf0
 800032a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032c:	2303      	movs	r3, #3
 800032e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4619      	mov	r1, r3
 8000336:	480a      	ldr	r0, [pc, #40]	; (8000360 <HAL_ADC_MspInit+0xa0>)
 8000338:	f001 fe66 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 800033c:	2303      	movs	r3, #3
 800033e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000340:	2303      	movs	r3, #3
 8000342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000344:	f107 0318 	add.w	r3, r7, #24
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <HAL_ADC_MspInit+0xa4>)
 800034c:	f001 fe5c 	bl	8002008 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000350:	bf00      	nop
 8000352:	3728      	adds	r7, #40	; 0x28
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40012400 	.word	0x40012400
 800035c:	40021000 	.word	0x40021000
 8000360:	40010800 	.word	0x40010800
 8000364:	40010c00 	.word	0x40010c00

08000368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037c:	4b34      	ldr	r3, [pc, #208]	; (8000450 <MX_GPIO_Init+0xe8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a33      	ldr	r2, [pc, #204]	; (8000450 <MX_GPIO_Init+0xe8>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <MX_GPIO_Init+0xe8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0310 	and.w	r3, r3, #16
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <MX_GPIO_Init+0xe8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <MX_GPIO_Init+0xe8>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a27      	ldr	r2, [pc, #156]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b25      	ldr	r3, [pc, #148]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a21      	ldr	r2, [pc, #132]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80003dc:	2200      	movs	r2, #0
 80003de:	f24f 0120 	movw	r1, #61472	; 0xf020
 80003e2:	481c      	ldr	r0, [pc, #112]	; (8000454 <MX_GPIO_Init+0xec>)
 80003e4:	f001 ffa4 	bl	8002330 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80003e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_GPIO_Init+0xf0>)
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4817      	ldr	r0, [pc, #92]	; (800045c <MX_GPIO_Init+0xf4>)
 80003fe:	f001 fe03 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000402:	f24f 0320 	movw	r3, #61472	; 0xf020
 8000406:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <MX_GPIO_Init+0xec>)
 800041c:	f001 fdf4 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8000420:	2310      	movs	r3, #16
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_GPIO_Init+0xf0>)
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <MX_GPIO_Init+0xec>)
 8000434:	f001 fde8 	bl	8002008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2105      	movs	r1, #5
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f001 fc6a 	bl	8001d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000442:	2028      	movs	r0, #40	; 0x28
 8000444:	f001 fc83 	bl	8001d4e <HAL_NVIC_EnableIRQ>

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	10110000 	.word	0x10110000
 800045c:	40011000 	.word	0x40011000

08000460 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_I2C1_Init+0x50>)
 8000466:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <MX_I2C1_Init+0x54>)
 8000468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_I2C1_Init+0x50>)
 800046c:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x58>)
 800046e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_I2C1_Init+0x50>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_I2C1_Init+0x50>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_I2C1_Init+0x50>)
 800047e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_I2C1_Init+0x50>)
 8000486:	2200      	movs	r2, #0
 8000488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_I2C1_Init+0x50>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_I2C1_Init+0x50>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_I2C1_Init+0x50>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_I2C1_Init+0x50>)
 800049e:	f001 ff91 	bl	80023c4 <HAL_I2C_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004a8:	f000 fa3a 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000390 	.word	0x20000390
 80004b4:	40005400 	.word	0x40005400
 80004b8:	000186a0 	.word	0x000186a0

080004bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_I2C2_Init+0x50>)
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <MX_I2C2_Init+0x54>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_I2C2_Init+0x50>)
 80004c8:	4a12      	ldr	r2, [pc, #72]	; (8000514 <MX_I2C2_Init+0x58>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_I2C2_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_I2C2_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_I2C2_Init+0x50>)
 80004da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_I2C2_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_I2C2_Init+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <MX_I2C2_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_I2C2_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_I2C2_Init+0x50>)
 80004fa:	f001 ff63 	bl	80023c4 <HAL_I2C_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000504:	f000 fa0c 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200003e4 	.word	0x200003e4
 8000510:	40005800 	.word	0x40005800
 8000514:	000186a0 	.word	0x000186a0

08000518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 031c 	add.w	r3, r7, #28
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a32      	ldr	r2, [pc, #200]	; (80005fc <HAL_I2C_MspInit+0xe4>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d133      	bne.n	80005a0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000538:	4b31      	ldr	r3, [pc, #196]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	61bb      	str	r3, [r7, #24]
 800054e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C_SCL_Pin|TOF_I2C_SDA_Pin;
 8000550:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000556:	2312      	movs	r3, #18
 8000558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	4619      	mov	r1, r3
 8000564:	4827      	ldr	r0, [pc, #156]	; (8000604 <HAL_I2C_MspInit+0xec>)
 8000566:	f001 fd4f 	bl	8002008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <HAL_I2C_MspInit+0xf0>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000572:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <HAL_I2C_MspInit+0xf0>)
 8000582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000584:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 800058c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800059e:	e029      	b.n	80005f4 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <HAL_I2C_MspInit+0xf4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d124      	bne.n	80005f4 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_I2C_SCL_Pin|COLOR_I2C_SDA_Pin;
 80005c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c8:	2312      	movs	r3, #18
 80005ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <HAL_I2C_MspInit+0xec>)
 80005d8:	f001 fd16 	bl	8002008 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 80005e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_I2C_MspInit+0xe8>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3730      	adds	r7, #48	; 0x30
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40005400 	.word	0x40005400
 8000600:	40021000 	.word	0x40021000
 8000604:	40010c00 	.word	0x40010c00
 8000608:	40010000 	.word	0x40010000
 800060c:	40005800 	.word	0x40005800

08000610 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	switch (i)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	2b03      	cmp	r3, #3
 800061e:	d827      	bhi.n	8000670 <TurnOffLed+0x60>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <TurnOffLed+0x18>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	08000639 	.word	0x08000639
 800062c:	08000647 	.word	0x08000647
 8000630:	08000655 	.word	0x08000655
 8000634:	08000663 	.word	0x08000663
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <TurnOffLed+0x68>)
 8000640:	f001 fe76 	bl	8002330 <HAL_GPIO_WritePin>
		    break;
 8000644:	e014      	b.n	8000670 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <TurnOffLed+0x68>)
 800064e:	f001 fe6f 	bl	8002330 <HAL_GPIO_WritePin>
			break;
 8000652:	e00d      	b.n	8000670 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <TurnOffLed+0x68>)
 800065c:	f001 fe68 	bl	8002330 <HAL_GPIO_WritePin>
			break;
 8000660:	e006      	b.n	8000670 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <TurnOffLed+0x68>)
 800066a:	f001 fe61 	bl	8002330 <HAL_GPIO_WritePin>
			break;
 800066e:	bf00      	nop
	}

}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010c00 	.word	0x40010c00

0800067c <SwitchLed>:



void SwitchLed(int i)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	switch (i)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3b01      	subs	r3, #1
 8000688:	2b03      	cmp	r3, #3
 800068a:	d823      	bhi.n	80006d4 <SwitchLed+0x58>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <SwitchLed+0x18>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006a5 	.word	0x080006a5
 8000698:	080006b1 	.word	0x080006b1
 800069c:	080006bd 	.word	0x080006bd
 80006a0:	080006c9 	.word	0x080006c9
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <SwitchLed+0x60>)
 80006aa:	f001 fe59 	bl	8002360 <HAL_GPIO_TogglePin>
			break;
 80006ae:	e011      	b.n	80006d4 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <SwitchLed+0x60>)
 80006b6:	f001 fe53 	bl	8002360 <HAL_GPIO_TogglePin>
			break;
 80006ba:	e00b      	b.n	80006d4 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80006bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <SwitchLed+0x60>)
 80006c2:	f001 fe4d 	bl	8002360 <HAL_GPIO_TogglePin>
			break;
 80006c6:	e005      	b.n	80006d4 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 80006c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <SwitchLed+0x60>)
 80006ce:	f001 fe47 	bl	8002360 <HAL_GPIO_TogglePin>
			break;
 80006d2:	bf00      	nop
	}

}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <LedError>:



void LedError()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <LedError+0x38>)
 80006ec:	f001 fe20 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <LedError+0x38>)
 80006f8:	f001 fe1a 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <LedError+0x38>)
 8000704:	f001 fe14 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <LedError+0x38>)
 8000710:	f001 fe0e 	bl	8002330 <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010c00 	.word	0x40010c00

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 ff78 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f85e 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff fe1e 	bl	8000368 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072c:	f7ff fe98 	bl	8000460 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000730:	f7ff fec4 	bl	80004bc <MX_I2C2_Init>
  MX_TIM3_Init();
 8000734:	f000 fc50 	bl	8000fd8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000738:	f000 fe4e 	bl	80013d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800073c:	f000 fe76 	bl	800142c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000740:	f000 fb32 	bl	8000da8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000744:	f000 fbf4 	bl	8000f30 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000748:	f000 fcbe 	bl	80010c8 <MX_TIM5_Init>
  MX_ADC1_Init();
 800074c:	f7ff fd7a 	bl	8000244 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000750:	2201      	movs	r2, #1
 8000752:	491e      	ldr	r1, [pc, #120]	; (80007cc <main+0xb0>)
 8000754:	481e      	ldr	r0, [pc, #120]	; (80007d0 <main+0xb4>)
 8000756:	f003 fcf3 	bl	8004140 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f000 ffbc 	bl	80016d8 <HAL_Delay>
  shellInit();
 8000760:	f000 f8e6 	bl	8000930 <shellInit>

  TurnOffLed(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff ff53 	bl	8000610 <TurnOffLed>
  TurnOffLed(2);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff50 	bl	8000610 <TurnOffLed>
  TurnOffLed(3);
 8000770:	2003      	movs	r0, #3
 8000772:	f7ff ff4d 	bl	8000610 <TurnOffLed>
  TurnOffLed(4);
 8000776:	2004      	movs	r0, #4
 8000778:	f7ff ff4a 	bl	8000610 <TurnOffLed>

  SwitchLed(4);
 800077c:	2004      	movs	r0, #4
 800077e:	f7ff ff7d 	bl	800067c <SwitchLed>

  HAL_TIM_Base_Start_IT(&htim3);
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <main+0xb8>)
 8000784:	f002 fc84 	bl	8003090 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000788:	2100      	movs	r1, #0
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <main+0xb8>)
 800078c:	f002 fd38 	bl	8003200 <HAL_TIM_PWM_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(uartRxReceived){
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <main+0xbc>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <main+0x94>
		  if(shellGetChar())
 8000798:	f000 f902 	bl	80009a0 <shellGetChar>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <main+0x8e>
		  {
			  shellExec();
 80007a2:	f000 f971 	bl	8000a88 <shellExec>
			  shellPrompt();
 80007a6:	f000 f8db 	bl	8000960 <shellPrompt>
		  }
		  uartRxReceived = 0;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <main+0xbc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
		  	  Error_Handler();
		    }
		  HAL_Delay(500);
	  }*/

	  if(it_userButton)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <main+0xc0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0eb      	beq.n	8000790 <main+0x74>
	  {
		  SwitchLed(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff ff5f 	bl	800067c <SwitchLed>
		  it_userButton = 0;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <main+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
		  printf("userButton\n\r");
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <main+0xc4>)
 80007c6:	f004 fb4f 	bl	8004e68 <iprintf>
	  if(uartRxReceived){
 80007ca:	e7e1      	b.n	8000790 <main+0x74>
 80007cc:	200005d0 	.word	0x200005d0
 80007d0:	200005d4 	.word	0x200005d4
 80007d4:	2000053c 	.word	0x2000053c
 80007d8:	200005cc 	.word	0x200005cc
 80007dc:	20000438 	.word	0x20000438
 80007e0:	08006100 	.word	0x08006100

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fb30 	bl	8004e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000836:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000840:	4618      	mov	r0, r3
 8000842:	f001 ff03 	bl	800264c <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800084c:	f000 f868 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f002 f96f 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000878:	f000 f852 	bl	8000920 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800087c:	2302      	movs	r3, #2
 800087e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000884:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fafb 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000894:	f000 f844 	bl	8000920 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3758      	adds	r7, #88	; 0x58
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008a8:	1d39      	adds	r1, r7, #4
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2201      	movs	r2, #1
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <__io_putchar+0x20>)
 80008b2:	f003 fbb3 	bl	800401c <HAL_UART_Transmit>
	return ch;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200005d4 	.word	0x200005d4

080008c4 <HAL_GPIO_EXTI_Callback>:
{
	if (htim->Instance == TIM3) it_tim3=1; // Tim 3 avce servo donc pas d'interrupt...inutile
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	it_userButton = 1;
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000438 	.word	0x20000438

080008e4 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_UART_RxCpltCallback+0x2c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d107      	bne.n	8000906 <HAL_UART_RxCpltCallback+0x22>
	{
		uartRxReceived = 1;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_UART_RxCpltCallback+0x30>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80008fc:	2201      	movs	r2, #1
 80008fe:	4906      	ldr	r1, [pc, #24]	; (8000918 <HAL_UART_RxCpltCallback+0x34>)
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <HAL_UART_RxCpltCallback+0x38>)
 8000902:	f003 fc1d 	bl	8004140 <HAL_UART_Receive_IT>
	}
	else if(huart->Instance == USART2)
	{
		//interruption Raspberry
	}
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40013800 	.word	0x40013800
 8000914:	200005cc 	.word	0x200005cc
 8000918:	200005d0 	.word	0x200005d0
 800091c:	200005d4 	.word	0x200005d4

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8000928:	f7ff feda 	bl	80006e0 <LedError>
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0xc>
	...

08000930 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	226c      	movs	r2, #108	; 0x6c
 800093a:	4906      	ldr	r1, [pc, #24]	; (8000954 <shellInit+0x24>)
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <shellInit+0x28>)
 800093e:	f003 fb6d 	bl	800401c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	220a      	movs	r2, #10
 8000948:	4904      	ldr	r1, [pc, #16]	; (800095c <shellInit+0x2c>)
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <shellInit+0x28>)
 800094c:	f003 fb66 	bl	800401c <HAL_UART_Transmit>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000000c 	.word	0x2000000c
 8000958:	200005d4 	.word	0x200005d4
 800095c:	20000000 	.word	0x20000000

08000960 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	220a      	movs	r2, #10
 800096a:	4903      	ldr	r1, [pc, #12]	; (8000978 <shellPrompt+0x18>)
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <shellPrompt+0x1c>)
 800096e:	f003 fb55 	bl	800401c <HAL_UART_Transmit>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	200005d4 	.word	0x200005d4

08000980 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	2214      	movs	r2, #20
 800098a:	4903      	ldr	r1, [pc, #12]	; (8000998 <shellCmdNotFound+0x18>)
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <shellCmdNotFound+0x1c>)
 800098e:	f003 fb45 	bl	800401c <HAL_UART_Transmit>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200002c0 	.word	0x200002c0
 800099c:	200005d4 	.word	0x200005d4

080009a0 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <shellGetChar+0xc8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d030      	beq.n	8000a14 <shellGetChar+0x74>
 80009b2:	2b0d      	cmp	r3, #13
 80009b4:	d140      	bne.n	8000a38 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2203      	movs	r2, #3
 80009bc:	492b      	ldr	r1, [pc, #172]	; (8000a6c <shellGetChar+0xcc>)
 80009be:	482c      	ldr	r0, [pc, #176]	; (8000a70 <shellGetChar+0xd0>)
 80009c0:	f003 fb2c 	bl	800401c <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <shellGetChar+0xd4>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <shellGetChar+0xd8>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	5499      	strb	r1, [r3, r2]
		argc = 0;
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <shellGetChar+0xdc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 80009d6:	492a      	ldr	r1, [pc, #168]	; (8000a80 <shellGetChar+0xe0>)
 80009d8:	4827      	ldr	r0, [pc, #156]	; (8000a78 <shellGetChar+0xd8>)
 80009da:	f004 fa5d 	bl	8004e98 <strtok>
 80009de:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80009e0:	e00f      	b.n	8000a02 <shellGetChar+0x62>
			argv[argc++] = token;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <shellGetChar+0xdc>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	b2d1      	uxtb	r1, r2
 80009ea:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <shellGetChar+0xdc>)
 80009ec:	7011      	strb	r1, [r2, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <shellGetChar+0xe4>)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <shellGetChar+0xe0>)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f004 fa4c 	bl	8004e98 <strtok>
 8000a00:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1ec      	bne.n	80009e2 <shellGetChar+0x42>
		}

		idxCmd = 0;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <shellGetChar+0xd4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
		break;
 8000a12:	e023      	b.n	8000a5c <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <shellGetChar+0xd4>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	b2d1      	uxtb	r1, r2
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <shellGetChar+0xd4>)
 8000a1e:	7011      	strb	r1, [r2, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <shellGetChar+0xd8>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <shellGetChar+0xc8>)
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <shellGetChar+0xd0>)
 8000a32:	f003 faf3 	bl	800401c <HAL_UART_Transmit>
		break;
 8000a36:	e011      	b.n	8000a5c <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <shellGetChar+0xd4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	b2d1      	uxtb	r1, r2
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <shellGetChar+0xd4>)
 8000a42:	7011      	strb	r1, [r2, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <shellGetChar+0xc8>)
 8000a48:	7819      	ldrb	r1, [r3, #0]
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <shellGetChar+0xd8>)
 8000a4c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	2201      	movs	r2, #1
 8000a54:	4904      	ldr	r1, [pc, #16]	; (8000a68 <shellGetChar+0xc8>)
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <shellGetChar+0xd0>)
 8000a58:	f003 fae0 	bl	800401c <HAL_UART_Transmit>
	}

	return newCmdReady;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200005d0 	.word	0x200005d0
 8000a6c:	20000078 	.word	0x20000078
 8000a70:	200005d4 	.word	0x200005d4
 8000a74:	2000047c 	.word	0x2000047c
 8000a78:	2000043c 	.word	0x2000043c
 8000a7c:	200004a4 	.word	0x200004a4
 8000a80:	08006110 	.word	0x08006110
 8000a84:	20000480 	.word	0x20000480

08000a88 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <shellExec+0x88>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4920      	ldr	r1, [pc, #128]	; (8000b14 <shellExec+0x8c>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fbcc 	bl	8000230 <strcmp>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d107      	bne.n	8000aae <shellExec+0x26>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	22c3      	movs	r2, #195	; 0xc3
 8000aa4:	491c      	ldr	r1, [pc, #112]	; (8000b18 <shellExec+0x90>)
 8000aa6:	481d      	ldr	r0, [pc, #116]	; (8000b1c <shellExec+0x94>)
 8000aa8:	f003 fab8 	bl	800401c <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
	}
	else{
		shellCmdNotFound();
	}
}
 8000aac:	e02d      	b.n	8000b0a <shellExec+0x82>
	else if(strcmp(argv[0],"RTFM")==0)
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <shellExec+0x88>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	491b      	ldr	r1, [pc, #108]	; (8000b20 <shellExec+0x98>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fbbb 	bl	8000230 <strcmp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d108      	bne.n	8000ad2 <shellExec+0x4a>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8000ac8:	4916      	ldr	r1, [pc, #88]	; (8000b24 <shellExec+0x9c>)
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <shellExec+0x94>)
 8000acc:	f003 faa6 	bl	800401c <HAL_UART_Transmit>
}
 8000ad0:	e01b      	b.n	8000b0a <shellExec+0x82>
	else if(strcmp(argv[0],"led")==0)
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <shellExec+0x88>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4914      	ldr	r1, [pc, #80]	; (8000b28 <shellExec+0xa0>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fba9 	bl	8000230 <strcmp>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d110      	bne.n	8000b06 <shellExec+0x7e>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	2222      	movs	r2, #34	; 0x22
 8000aea:	4910      	ldr	r1, [pc, #64]	; (8000b2c <shellExec+0xa4>)
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <shellExec+0x94>)
 8000aee:	f003 fa95 	bl	800401c <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <shellExec+0x88>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 f980 	bl	8004dfc <atoi>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fdbc 	bl	800067c <SwitchLed>
}
 8000b04:	e001      	b.n	8000b0a <shellExec+0x82>
		shellCmdNotFound();
 8000b06:	f7ff ff3b 	bl	8000980 <shellCmdNotFound>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000480 	.word	0x20000480
 8000b14:	08006114 	.word	0x08006114
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	200005d4 	.word	0x200005d4
 8000b20:	0800611c 	.word	0x0800611c
 8000b24:	20000140 	.word	0x20000140
 8000b28:	08006124 	.word	0x08006124
 8000b2c:	2000029c 	.word	0x2000029c

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_MspInit+0x68>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_MspInit+0x68>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_MspInit+0x68>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_MspInit+0x68>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_MspInit+0x68>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x68>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f001 f8d2 	bl	8001d16 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_MspInit+0x6c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_MspInit+0x6c>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 fd67 	bl	80016a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bd2:	f004 f895 	bl	8004d00 <xTaskGetSchedulerState>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d001      	beq.n	8000be0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bdc:	f004 f8ec 	bl	8004db8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART1_IRQHandler+0x10>)
 8000bea:	f003 fad9 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200005d4 	.word	0x200005d4

08000bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART2_IRQHandler+0x10>)
 8000bfe:	f003 facf 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000618 	.word	0x20000618

08000c0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8000c10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c14:	f001 fbbe 	bl	8002394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <_kill>:

int _kill(int pid, int sig)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c34:	f004 f8e6 	bl	8004e04 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2216      	movs	r2, #22
 8000c3c:	601a      	str	r2, [r3, #0]
	return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_exit>:

void _exit (int status)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c52:	f04f 31ff 	mov.w	r1, #4294967295
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffe7 	bl	8000c2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c5c:	e7fe      	b.n	8000c5c <_exit+0x12>

08000c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e00a      	b.n	8000c86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c70:	f3af 8000 	nop.w
 8000c74:	4601      	mov	r1, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	b2ca      	uxtb	r2, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbf0      	blt.n	8000c70 <_read+0x12>
	}

return len;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e009      	b.n	8000cbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fdf4 	bl	80008a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dbf1      	blt.n	8000caa <_write+0x12>
	}
	return len;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_close>:

int _close(int file)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	return -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <_isatty>:

int _isatty(int file)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f004 f850 	bl	8004e04 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000c000 	.word	0x2000c000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200004a8 	.word	0x200004a8
 8000d98:	20000728 	.word	0x20000728

08000d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b096      	sub	sp, #88	; 0x58
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 f839 	bl	8004e58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <MX_TIM1_Init+0x184>)
 8000dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dec:	4b4e      	ldr	r3, [pc, #312]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000df8:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e06:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e12:	4845      	ldr	r0, [pc, #276]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e14:	f002 f8ec 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e1e:	f7ff fd7f 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	483e      	ldr	r0, [pc, #248]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e30:	f002 fc46 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e3a:	f7ff fd71 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3e:	483a      	ldr	r0, [pc, #232]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e40:	f002 f986 	bl	8003150 <HAL_TIM_PWM_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e4a:	f7ff fd69 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4832      	ldr	r0, [pc, #200]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e5e:	f002 ffd3 	bl	8003e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e68:	f7ff fd5a 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	2360      	movs	r3, #96	; 0x60
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4825      	ldr	r0, [pc, #148]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000e92:	f002 fb57 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e9c:	f7ff fd40 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481f      	ldr	r0, [pc, #124]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000eaa:	f002 fb4b 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000eb4:	f7ff fd34 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4819      	ldr	r0, [pc, #100]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000ec2:	f002 fb3f 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ecc:	f7ff fd28 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000eda:	f002 fb33 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ee4:	f7ff fd1c 	bl	8000920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000f0c:	f002 ffe8 	bl	8003ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000f16:	f7ff fd03 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM1_Init+0x180>)
 8000f1c:	f000 f9f2 	bl	8001304 <HAL_TIM_MspPostInit>

}
 8000f20:	bf00      	nop
 8000f22:	3758      	adds	r7, #88	; 0x58
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200004ac 	.word	0x200004ac
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 ff8a 	bl	8004e58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000fa0:	f002 fa2e 	bl	8003400 <HAL_TIM_Encoder_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000faa:	f7ff fcb9 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000fbc:	f002 ff24 	bl	8003e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fc6:	f7ff fcab 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	; 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200004f4 	.word	0x200004f4

08000fd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_TIM3_Init+0xe8>)
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <MX_TIM3_Init+0xec>)
 800100c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_TIM3_Init+0xe8>)
 8001010:	2247      	movs	r2, #71	; 0x47
 8001012:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_TIM3_Init+0xe8>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_TIM3_Init+0xe8>)
 800101c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001020:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_TIM3_Init+0xe8>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <MX_TIM3_Init+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <MX_TIM3_Init+0xe8>)
 8001030:	f001 ffde 	bl	8002ff0 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800103a:	f7ff fc71 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001048:	4619      	mov	r1, r3
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <MX_TIM3_Init+0xe8>)
 800104c:	f002 fb38 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001056:	f7ff fc63 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800105a:	4819      	ldr	r0, [pc, #100]	; (80010c0 <MX_TIM3_Init+0xe8>)
 800105c:	f002 f878 	bl	8003150 <HAL_TIM_PWM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001066:	f7ff fc5b 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4619      	mov	r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <MX_TIM3_Init+0xe8>)
 800107a:	f002 fec5 	bl	8003e08 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001084:	f7ff fc4c 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001088:	2360      	movs	r3, #96	; 0x60
 800108a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_TIM3_Init+0xe8>)
 80010a2:	f002 fa4f 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010ac:	f7ff fc38 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM3_Init+0xe8>)
 80010b2:	f000 f927 	bl	8001304 <HAL_TIM_MspPostInit>

}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	; 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000053c 	.word	0x2000053c
 80010c4:	40000400 	.word	0x40000400

080010c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 febe 	bl	8004e58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_TIM5_Init+0xa0>)
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <MX_TIM5_Init+0xa4>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_TIM5_Init+0xa0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_TIM5_Init+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_TIM5_Init+0xa0>)
 80010f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_TIM5_Init+0xa0>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_TIM5_Init+0xa0>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800110a:	2301      	movs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001122:	2301      	movs	r3, #1
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_TIM5_Init+0xa0>)
 8001136:	f002 f963 	bl	8003400 <HAL_TIM_Encoder_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001140:	f7ff fbee 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_TIM5_Init+0xa0>)
 8001152:	f002 fe59 	bl	8003e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800115c:	f7ff fbe0 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000584 	.word	0x20000584
 800116c:	40000c00 	.word	0x40000c00

08001170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <HAL_TIM_Base_MspInit+0x58>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10c      	bne.n	800119c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_TIM_Base_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_TIM_Base_MspInit+0x5c>)
 8001188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_TIM_Base_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800119a:	e010      	b.n	80011be <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_TIM_Base_MspInit+0x60>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10b      	bne.n	80011be <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_TIM_Base_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_TIM_Base_MspInit+0x5c>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_TIM_Base_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40000400 	.word	0x40000400

080011d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f2:	d14f      	bne.n	8001294 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f4:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	61d3      	str	r3, [r2, #28]
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 800123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <HAL_TIM_Encoder_MspInit+0x120>)
 8001252:	f000 fed9 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8001256:	2308      	movs	r3, #8
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4823      	ldr	r0, [pc, #140]	; (80012f8 <HAL_TIM_Encoder_MspInit+0x124>)
 800126a:	f000 fecd 	bl	8002008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_TIM_Encoder_MspInit+0x128>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_TIM_Encoder_MspInit+0x128>)
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001292:	e028      	b.n	80012e6 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_TIM_Encoder_MspInit+0x12c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d123      	bne.n	80012e6 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <HAL_TIM_Encoder_MspInit+0x120>)
 80012e2:	f000 fe91 	bl	8002008 <HAL_GPIO_Init>
}
 80012e6:	bf00      	nop
 80012e8:	3730      	adds	r7, #48	; 0x30
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40010000 	.word	0x40010000
 8001300:	40000c00 	.word	0x40000c00

08001304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <HAL_TIM_MspPostInit+0xbc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d119      	bne.n	8001358 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_TIM_MspPostInit+0xc0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_TIM_MspPostInit+0xc0>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_TIM_MspPostInit+0xc0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 800133c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2302      	movs	r3, #2
 8001348:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	481d      	ldr	r0, [pc, #116]	; (80013c8 <HAL_TIM_MspPostInit+0xc4>)
 8001352:	f000 fe59 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001356:	e02e      	b.n	80013b6 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_TIM_MspPostInit+0xc8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d129      	bne.n	80013b6 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_TIM_MspPostInit+0xc0>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_TIM_MspPostInit+0xc0>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_TIM_MspPostInit+0xc0>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 800137a:	2340      	movs	r3, #64	; 0x40
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <HAL_TIM_MspPostInit+0xcc>)
 800138e:	f000 fe3b 	bl	8002008 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_TIM_MspPostInit+0xd0>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_TIM_MspPostInit+0xd0>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	6053      	str	r3, [r2, #4]
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40012c00 	.word	0x40012c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40011000 	.word	0x40011000
 80013d4:	40010000 	.word	0x40010000

080013d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_USART1_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 8001410:	f002 fdb7 	bl	8003f82 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f7ff fa81 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200005d4 	.word	0x200005d4
 8001428:	40013800 	.word	0x40013800

0800142c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001464:	f002 fd8d 	bl	8003f82 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f7ff fa57 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000618 	.word	0x20000618
 800147c:	40004400 	.word	0x40004400

08001480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a45      	ldr	r2, [pc, #276]	; (80015b0 <HAL_UART_MspInit+0x130>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d146      	bne.n	800152e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_UART_MspInit+0x134>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <HAL_UART_MspInit+0x134>)
 80014a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_UART_MspInit+0x134>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_UART_MspInit+0x134>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <HAL_UART_MspInit+0x134>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_UART_MspInit+0x134>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 80014d0:	2340      	movs	r3, #64	; 0x40
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4835      	ldr	r0, [pc, #212]	; (80015b8 <HAL_UART_MspInit+0x138>)
 80014e4:	f000 fd90 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	482f      	ldr	r0, [pc, #188]	; (80015b8 <HAL_UART_MspInit+0x138>)
 80014fc:	f000 fd84 	bl	8002008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_UART_MspInit+0x13c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001516:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_UART_MspInit+0x13c>)
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2105      	movs	r1, #5
 8001520:	2025      	movs	r0, #37	; 0x25
 8001522:	f000 fbf8 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001526:	2025      	movs	r0, #37	; 0x25
 8001528:	f000 fc11 	bl	8001d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800152c:	e03c      	b.n	80015a8 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_UART_MspInit+0x140>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d137      	bne.n	80015a8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_UART_MspInit+0x134>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_UART_MspInit+0x134>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	61d3      	str	r3, [r2, #28]
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_UART_MspInit+0x134>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_UART_MspInit+0x134>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_UART_MspInit+0x134>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0x134>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8001568:	2304      	movs	r3, #4
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <HAL_UART_MspInit+0x144>)
 800157c:	f000 fd44 	bl	8002008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 8001580:	2308      	movs	r3, #8
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <HAL_UART_MspInit+0x144>)
 8001594:	f000 fd38 	bl	8002008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2105      	movs	r1, #5
 800159c:	2026      	movs	r0, #38	; 0x26
 800159e:	f000 fbba 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a2:	2026      	movs	r0, #38	; 0x26
 80015a4:	f000 fbd3 	bl	8001d4e <HAL_NVIC_EnableIRQ>
}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	; 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40010000 	.word	0x40010000
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40010800 	.word	0x40010800

080015c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ee:	f7ff fbd5 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f003 fc0d 	bl	8004e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff f891 	bl	800071c <main>
  bx lr
 80015fa:	4770      	bx	lr
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001604:	080063a4 	.word	0x080063a4
  ldr r2, =_sbss
 8001608:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 800160c:	20000728 	.word	0x20000728

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x28>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 fb6b 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	200f      	movs	r0, #15
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fa7e 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fb83 	bl	8001d6a <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 fb4b 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002d4 	.word	0x200002d4
 8001698:	200002dc 	.word	0x200002dc
 800169c:	200002d8 	.word	0x200002d8

080016a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x1c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_IncTick+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_IncTick+0x20>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	200002dc 	.word	0x200002dc
 80016c0:	2000065c 	.word	0x2000065c

080016c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_GetTick+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	2000065c 	.word	0x2000065c

080016d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff fff0 	bl	80016c4 <HAL_GetTick>
 80016e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d005      	beq.n	80016fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_Delay+0x44>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fe:	bf00      	nop
 8001700:	f7ff ffe0 	bl	80016c4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8f7      	bhi.n	8001700 <HAL_Delay+0x28>
  {
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002dc 	.word	0x200002dc

08001720 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0ce      	b.n	80018e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7fe fdae 	bl	80002c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f9bd 	bl	8001ae4 <ADC_ConversionStop_Disable>
 800176a:	4603      	mov	r3, r0
 800176c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 80a9 	bne.w	80018ce <HAL_ADC_Init+0x1ae>
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 80a5 	bne.w	80018ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178c:	f023 0302 	bic.w	r3, r3, #2
 8001790:	f043 0202 	orr.w	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4951      	ldr	r1, [pc, #324]	; (80018e8 <HAL_ADC_Init+0x1c8>)
 80017a2:	428b      	cmp	r3, r1
 80017a4:	d10a      	bne.n	80017bc <HAL_ADC_Init+0x9c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017ae:	d002      	beq.n	80017b6 <HAL_ADC_Init+0x96>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	e004      	b.n	80017c0 <HAL_ADC_Init+0xa0>
 80017b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Init+0xa0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7b1b      	ldrb	r3, [r3, #12]
 80017c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d8:	d003      	beq.n	80017e2 <HAL_ADC_Init+0xc2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_ADC_Init+0xc8>
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	e000      	b.n	80017ea <HAL_ADC_Init+0xca>
 80017e8:	2300      	movs	r3, #0
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7d1b      	ldrb	r3, [r3, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d119      	bne.n	800182c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7b1b      	ldrb	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	3b01      	subs	r3, #1
 8001806:	035a      	lsls	r2, r3, #13
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e00b      	b.n	800182c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_ADC_Init+0x1cc>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	430b      	orrs	r3, r1
 8001852:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800185c:	d003      	beq.n	8001866 <HAL_ADC_Init+0x146>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d104      	bne.n	8001870 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	3b01      	subs	r3, #1
 800186c:	051b      	lsls	r3, r3, #20
 800186e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	430a      	orrs	r2, r1
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_ADC_Init+0x1d0>)
 800188c:	4013      	ands	r3, r2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d10b      	bne.n	80018ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018aa:	e018      	b.n	80018de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f023 0312 	bic.w	r3, r3, #18
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018cc:	e007      	b.n	80018de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f043 0210 	orr.w	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018de:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40013c00 	.word	0x40013c00
 80018ec:	ffe1f7fd 	.word	0xffe1f7fd
 80018f0:	ff1f0efe 	.word	0xff1f0efe

080018f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x20>
 8001910:	2302      	movs	r3, #2
 8001912:	e0dc      	b.n	8001ace <HAL_ADC_ConfigChannel+0x1da>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b06      	cmp	r3, #6
 8001922:	d81c      	bhi.n	800195e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3b05      	subs	r3, #5
 8001936:	221f      	movs	r2, #31
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	4019      	ands	r1, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3b05      	subs	r3, #5
 8001950:	fa00 f203 	lsl.w	r2, r0, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	; 0x34
 800195c:	e03c      	b.n	80019d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d81c      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	3b23      	subs	r3, #35	; 0x23
 8001978:	221f      	movs	r2, #31
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	4019      	ands	r1, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b23      	subs	r3, #35	; 0x23
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
 800199e:	e01b      	b.n	80019d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b41      	subs	r3, #65	; 0x41
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b41      	subs	r3, #65	; 0x41
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	d91c      	bls.n	8001a1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68d9      	ldr	r1, [r3, #12]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	3b1e      	subs	r3, #30
 80019f2:	2207      	movs	r2, #7
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4019      	ands	r1, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6898      	ldr	r0, [r3, #8]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b1e      	subs	r3, #30
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	e019      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6919      	ldr	r1, [r3, #16]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4019      	ands	r1, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6898      	ldr	r0, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	fa00 f203 	lsl.w	r2, r0, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d003      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a5a:	2b11      	cmp	r3, #17
 8001a5c:	d132      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d125      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d126      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d11a      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_ADC_ConfigChannel+0x1e8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9a      	lsrs	r2, r3, #18
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ab2:	e007      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40012400 	.word	0x40012400
 8001adc:	200002d4 	.word	0x200002d4
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d12e      	bne.n	8001b5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0e:	f7ff fdd9 	bl	80016c4 <HAL_GetTick>
 8001b12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b14:	e01b      	b.n	8001b4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b16:	f7ff fdd5 	bl	80016c4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d914      	bls.n	8001b4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10d      	bne.n	8001b4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e007      	b.n	8001b5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d0dc      	beq.n	8001b16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4906      	ldr	r1, [pc, #24]	; (8001c00 <__NVIC_EnableIRQ+0x34>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff90 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff2d 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff42 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff90 	bl	8001c58 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5f 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff35 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffa2 	bl	8001cbc <SysTick_Config>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e020      	b.n	8001dec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 020e 	bic.w	r2, r2, #14
 8001db8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d005      	beq.n	8001e1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e0d6      	b.n	8001fc8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 020e 	bic.w	r2, r2, #14
 8001e28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d958      	bls.n	8001ef8 <HAL_DMA_Abort_IT+0x100>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a63      	ldr	r2, [pc, #396]	; (8001fd8 <HAL_DMA_Abort_IT+0x1e0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04f      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0xf8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <HAL_DMA_Abort_IT+0x1e4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d048      	beq.n	8001eec <HAL_DMA_Abort_IT+0xf4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a60      	ldr	r2, [pc, #384]	; (8001fe0 <HAL_DMA_Abort_IT+0x1e8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d040      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0xee>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <HAL_DMA_Abort_IT+0x1ec>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d038      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xe8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_DMA_Abort_IT+0x1f0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d030      	beq.n	8001eda <HAL_DMA_Abort_IT+0xe2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a5b      	ldr	r2, [pc, #364]	; (8001fec <HAL_DMA_Abort_IT+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d028      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0xdc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a53      	ldr	r2, [pc, #332]	; (8001fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d020      	beq.n	8001ece <HAL_DMA_Abort_IT+0xd6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_DMA_Abort_IT+0x1f8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_DMA_Abort_IT+0xd2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_DMA_Abort_IT+0x1fc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d012      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0xce>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a54      	ldr	r2, [pc, #336]	; (8001ff8 <HAL_DMA_Abort_IT+0x200>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0xc8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_DMA_Abort_IT+0x204>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d102      	bne.n	8001eba <HAL_DMA_Abort_IT+0xc2>
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	e01b      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebe:	e018      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	e015      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	e013      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e011      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ed2:	e00e      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ed4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ed8:	e00b      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ede:	e008      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee4:	e005      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eea:	e002      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001eec:	2310      	movs	r3, #16
 8001eee:	e000      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xfa>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4a43      	ldr	r2, [pc, #268]	; (8002000 <HAL_DMA_Abort_IT+0x208>)
 8001ef4:	6053      	str	r3, [r2, #4]
 8001ef6:	e057      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x1b0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <HAL_DMA_Abort_IT+0x1e0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04f      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x1aa>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a35      	ldr	r2, [pc, #212]	; (8001fdc <HAL_DMA_Abort_IT+0x1e4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d048      	beq.n	8001f9e <HAL_DMA_Abort_IT+0x1a6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_DMA_Abort_IT+0x1e8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_Abort_IT+0x1a0>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_DMA_Abort_IT+0x1ec>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d038      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x19a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <HAL_DMA_Abort_IT+0x1f0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d030      	beq.n	8001f8c <HAL_DMA_Abort_IT+0x194>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <HAL_DMA_Abort_IT+0x1f4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d028      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x18e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d020      	beq.n	8001f80 <HAL_DMA_Abort_IT+0x188>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <HAL_DMA_Abort_IT+0x1f8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d019      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x184>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <HAL_DMA_Abort_IT+0x1fc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d012      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x180>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <HAL_DMA_Abort_IT+0x200>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00a      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x17a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_DMA_Abort_IT+0x204>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d102      	bne.n	8001f6c <HAL_DMA_Abort_IT+0x174>
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	e01b      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	e018      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f76:	e015      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f78:	2310      	movs	r3, #16
 8001f7a:	e013      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e011      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f84:	e00e      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f8a:	e00b      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f90:	e008      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	e005      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9c:	e002      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	e000      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x1ac>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_DMA_Abort_IT+0x20c>)
 8001fa6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
    } 
  }
  return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40020080 	.word	0x40020080
 8001fd8:	40020008 	.word	0x40020008
 8001fdc:	4002001c 	.word	0x4002001c
 8001fe0:	40020030 	.word	0x40020030
 8001fe4:	40020044 	.word	0x40020044
 8001fe8:	40020058 	.word	0x40020058
 8001fec:	4002006c 	.word	0x4002006c
 8001ff0:	40020408 	.word	0x40020408
 8001ff4:	4002041c 	.word	0x4002041c
 8001ff8:	40020430 	.word	0x40020430
 8001ffc:	40020444 	.word	0x40020444
 8002000:	40020400 	.word	0x40020400
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b08b      	sub	sp, #44	; 0x2c
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	e179      	b.n	8002310 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800201c:	2201      	movs	r2, #1
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8168 	bne.w	800230a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a96      	ldr	r2, [pc, #600]	; (8002298 <HAL_GPIO_Init+0x290>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d05e      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002044:	4a94      	ldr	r2, [pc, #592]	; (8002298 <HAL_GPIO_Init+0x290>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d875      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 800204a:	4a94      	ldr	r2, [pc, #592]	; (800229c <HAL_GPIO_Init+0x294>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d058      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002050:	4a92      	ldr	r2, [pc, #584]	; (800229c <HAL_GPIO_Init+0x294>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d86f      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 8002056:	4a92      	ldr	r2, [pc, #584]	; (80022a0 <HAL_GPIO_Init+0x298>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d052      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 800205c:	4a90      	ldr	r2, [pc, #576]	; (80022a0 <HAL_GPIO_Init+0x298>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d869      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 8002062:	4a90      	ldr	r2, [pc, #576]	; (80022a4 <HAL_GPIO_Init+0x29c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d04c      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002068:	4a8e      	ldr	r2, [pc, #568]	; (80022a4 <HAL_GPIO_Init+0x29c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d863      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 800206e:	4a8e      	ldr	r2, [pc, #568]	; (80022a8 <HAL_GPIO_Init+0x2a0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d046      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002074:	4a8c      	ldr	r2, [pc, #560]	; (80022a8 <HAL_GPIO_Init+0x2a0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d85d      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 800207a:	2b12      	cmp	r3, #18
 800207c:	d82a      	bhi.n	80020d4 <HAL_GPIO_Init+0xcc>
 800207e:	2b12      	cmp	r3, #18
 8002080:	d859      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 8002082:	a201      	add	r2, pc, #4	; (adr r2, 8002088 <HAL_GPIO_Init+0x80>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	08002103 	.word	0x08002103
 800208c:	080020dd 	.word	0x080020dd
 8002090:	080020ef 	.word	0x080020ef
 8002094:	08002131 	.word	0x08002131
 8002098:	08002137 	.word	0x08002137
 800209c:	08002137 	.word	0x08002137
 80020a0:	08002137 	.word	0x08002137
 80020a4:	08002137 	.word	0x08002137
 80020a8:	08002137 	.word	0x08002137
 80020ac:	08002137 	.word	0x08002137
 80020b0:	08002137 	.word	0x08002137
 80020b4:	08002137 	.word	0x08002137
 80020b8:	08002137 	.word	0x08002137
 80020bc:	08002137 	.word	0x08002137
 80020c0:	08002137 	.word	0x08002137
 80020c4:	08002137 	.word	0x08002137
 80020c8:	08002137 	.word	0x08002137
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020f9 	.word	0x080020f9
 80020d4:	4a75      	ldr	r2, [pc, #468]	; (80022ac <HAL_GPIO_Init+0x2a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020da:	e02c      	b.n	8002136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e029      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	3304      	adds	r3, #4
 80020ea:	623b      	str	r3, [r7, #32]
          break;
 80020ec:	e024      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	3308      	adds	r3, #8
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e01f      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	330c      	adds	r3, #12
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e01a      	b.n	8002138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800210a:	2304      	movs	r3, #4
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e013      	b.n	8002138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002118:	2308      	movs	r3, #8
 800211a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	611a      	str	r2, [r3, #16]
          break;
 8002122:	e009      	b.n	8002138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002124:	2308      	movs	r3, #8
 8002126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	615a      	str	r2, [r3, #20]
          break;
 800212e:	e003      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x130>
          break;
 8002136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2bff      	cmp	r3, #255	; 0xff
 800213c:	d801      	bhi.n	8002142 <HAL_GPIO_Init+0x13a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_Init+0x13e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2bff      	cmp	r3, #255	; 0xff
 800214c:	d802      	bhi.n	8002154 <HAL_GPIO_Init+0x14c>
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x152>
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	3b08      	subs	r3, #8
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	210f      	movs	r1, #15
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80c1 	beq.w	800230a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x2a8>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_GPIO_Init+0x2a8>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <HAL_GPIO_Init+0x2a8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021a0:	4a44      	ldr	r2, [pc, #272]	; (80022b4 <HAL_GPIO_Init+0x2ac>)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3c      	ldr	r2, [pc, #240]	; (80022b8 <HAL_GPIO_Init+0x2b0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01f      	beq.n	800220c <HAL_GPIO_Init+0x204>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_GPIO_Init+0x2b4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d019      	beq.n	8002208 <HAL_GPIO_Init+0x200>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_GPIO_Init+0x2b8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1fc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a39      	ldr	r2, [pc, #228]	; (80022c4 <HAL_GPIO_Init+0x2bc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1f8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <HAL_GPIO_Init+0x2c0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1f4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a37      	ldr	r2, [pc, #220]	; (80022cc <HAL_GPIO_Init+0x2c4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1f0>
 80021f4:	2305      	movs	r3, #5
 80021f6:	e00a      	b.n	800220e <HAL_GPIO_Init+0x206>
 80021f8:	2306      	movs	r3, #6
 80021fa:	e008      	b.n	800220e <HAL_GPIO_Init+0x206>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x206>
 8002200:	2303      	movs	r3, #3
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x206>
 8002204:	2302      	movs	r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x206>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x206>
 800220c:	2300      	movs	r3, #0
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221e:	4925      	ldr	r1, [pc, #148]	; (80022b4 <HAL_GPIO_Init+0x2ac>)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4924      	ldr	r1, [pc, #144]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	43db      	mvns	r3, r3
 800224e:	4920      	ldr	r1, [pc, #128]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 8002250:	4013      	ands	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	491a      	ldr	r1, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	4916      	ldr	r1, [pc, #88]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 8002278:	4013      	ands	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d025      	beq.n	80022d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4910      	ldr	r1, [pc, #64]	; (80022d0 <HAL_GPIO_Init+0x2c8>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
 8002294:	e025      	b.n	80022e2 <HAL_GPIO_Init+0x2da>
 8002296:	bf00      	nop
 8002298:	10320000 	.word	0x10320000
 800229c:	10310000 	.word	0x10310000
 80022a0:	10220000 	.word	0x10220000
 80022a4:	10210000 	.word	0x10210000
 80022a8:	10120000 	.word	0x10120000
 80022ac:	10110000 	.word	0x10110000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40010800 	.word	0x40010800
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	40011000 	.word	0x40011000
 80022c4:	40011400 	.word	0x40011400
 80022c8:	40011800 	.word	0x40011800
 80022cc:	40011c00 	.word	0x40011c00
 80022d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_GPIO_Init+0x324>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	4913      	ldr	r1, [pc, #76]	; (800232c <HAL_GPIO_Init+0x324>)
 80022de:	4013      	ands	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_GPIO_Init+0x324>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	490e      	ldr	r1, [pc, #56]	; (800232c <HAL_GPIO_Init+0x324>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_GPIO_Init+0x324>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	43db      	mvns	r3, r3
 8002304:	4909      	ldr	r1, [pc, #36]	; (800232c <HAL_GPIO_Init+0x324>)
 8002306:	4013      	ands	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	f47f ae7e 	bne.w	800201c <HAL_GPIO_Init+0x14>
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	372c      	adds	r7, #44	; 0x2c
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43d9      	mvns	r1, r3
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	400b      	ands	r3, r1
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
	...

08002394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fa86 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e12b      	b.n	800262e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f894 	bl	8000518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2224      	movs	r2, #36	; 0x24
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002428:	f000 fce6 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4a81      	ldr	r2, [pc, #516]	; (8002638 <HAL_I2C_Init+0x274>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d807      	bhi.n	8002448 <HAL_I2C_Init+0x84>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a80      	ldr	r2, [pc, #512]	; (800263c <HAL_I2C_Init+0x278>)
 800243c:	4293      	cmp	r3, r2
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e006      	b.n	8002456 <HAL_I2C_Init+0x92>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a7d      	ldr	r2, [pc, #500]	; (8002640 <HAL_I2C_Init+0x27c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0e7      	b.n	800262e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a78      	ldr	r2, [pc, #480]	; (8002644 <HAL_I2C_Init+0x280>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9b      	lsrs	r3, r3, #18
 8002468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_I2C_Init+0x274>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d802      	bhi.n	8002498 <HAL_I2C_Init+0xd4>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3301      	adds	r3, #1
 8002496:	e009      	b.n	80024ac <HAL_I2C_Init+0xe8>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_I2C_Init+0x284>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	3301      	adds	r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	495c      	ldr	r1, [pc, #368]	; (8002638 <HAL_I2C_Init+0x274>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d819      	bhi.n	8002500 <HAL_I2C_Init+0x13c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e59      	subs	r1, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024da:	1c59      	adds	r1, r3, #1
 80024dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024e0:	400b      	ands	r3, r1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_I2C_Init+0x138>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e59      	subs	r1, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fa:	e051      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e04f      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d111      	bne.n	800252c <HAL_I2C_Init+0x168>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e58      	subs	r0, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e012      	b.n	8002552 <HAL_I2C_Init+0x18e>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	0099      	lsls	r1, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Init+0x196>
 8002556:	2301      	movs	r3, #1
 8002558:	e022      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10e      	bne.n	8002580 <HAL_I2C_Init+0x1bc>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e58      	subs	r0, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	440b      	add	r3, r1
 8002570:	fbb0 f3f3 	udiv	r3, r0, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257e:	e00f      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	0099      	lsls	r1, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	6809      	ldr	r1, [r1, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6911      	ldr	r1, [r2, #16]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	000186a0 	.word	0x000186a0
 800263c:	001e847f 	.word	0x001e847f
 8002640:	003d08ff 	.word	0x003d08ff
 8002644:	431bde83 	.word	0x431bde83
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e272      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002678:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002684:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e24c      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7f      	ldr	r2, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b78      	ldr	r3, [pc, #480]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b72      	ldr	r3, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a71      	ldr	r2, [pc, #452]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6a      	ldr	r2, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe ffcc 	bl	80016c4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe ffc8 	bl	80016c4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e200      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe ffb8 	bl	80016c4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe ffb4 	bl	80016c4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1ec      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
 800279e:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c0      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4939      	ldr	r1, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe ff6d 	bl	80016c4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe ff69 	bl	80016c4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe ff4c 	bl	80016c4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe ff48 	bl	80016c4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e180      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03a      	beq.n	80028d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe ff2c 	bl	80016c4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe ff28 	bl	80016c4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e160      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 fada 	bl	8002e48 <RCC_Delay>
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7fe ff12 	bl	80016c4 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe ff0e 	bl	80016c4 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e146      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b92      	ldr	r3, [pc, #584]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a6 	beq.w	8002a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b85      	ldr	r3, [pc, #532]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe fecf 	bl	80016c4 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe fecb 	bl	80016c4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e103      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e02d      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x334>
 8002966:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x356>
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a60      	ldr	r2, [pc, #384]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b5e      	ldr	r3, [pc, #376]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a5d      	ldr	r2, [pc, #372]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 80029a2:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a5a      	ldr	r2, [pc, #360]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe7f 	bl	80016c4 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe fe7b 	bl	80016c4 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0b1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fe69 	bl	80016c4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fe65 	bl	80016c4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e09b      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d061      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d146      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fe39 	bl	80016c4 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe fe35 	bl	80016c4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e06d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4921      	ldr	r1, [pc, #132]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a19      	ldr	r1, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	491b      	ldr	r1, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fe09 	bl	80016c4 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fe05 	bl	80016c4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e03d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
 8002ad4:	e035      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fdf2 	bl	80016c4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fdee 	bl	80016c4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x498>
 8002b02:	e01e      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e019      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x500>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4965      	ldr	r1, [pc, #404]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d040      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e073      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4936      	ldr	r1, [pc, #216]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fd40 	bl	80016c4 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fd3c 	bl	80016c4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e053      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d210      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	4922      	ldr	r1, [pc, #136]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fc9e 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08006138 	.word	0x08006138
 8002d1c:	200002d4 	.word	0x200002d4
 8002d20:	200002d8 	.word	0x200002d8

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b490      	push	{r4, r7}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d2c:	1d3c      	adds	r4, r7, #4
 8002d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d34:	f240 2301 	movw	r3, #513	; 0x201
 8002d38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x40>
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x46>
 8002d62:	e02b      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d66:	623b      	str	r3, [r7, #32]
      break;
 8002d68:	e02b      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	0c9b      	lsrs	r3, r3, #18
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3328      	adds	r3, #40	; 0x28
 8002d74:	443b      	add	r3, r7
 8002d76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0c5b      	lsrs	r3, r3, #17
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	3328      	adds	r3, #40	; 0x28
 8002d92:	443b      	add	r3, r7
 8002d94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d9e:	fb03 f202 	mul.w	r2, r3, r2
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	e004      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	623b      	str	r3, [r7, #32]
      break;
 8002dba:	e002      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dbe:	623b      	str	r3, [r7, #32]
      break;
 8002dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc90      	pop	{r4, r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	08006128 	.word	0x08006128
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	003d0900 	.word	0x003d0900
 8002de0:	007a1200 	.word	0x007a1200

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	200002d4 	.word	0x200002d4

08002df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dfc:	f7ff fff2 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08006148 	.word	0x08006148

08002e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e24:	f7ff ffde 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	0adb      	lsrs	r3, r3, #11
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4903      	ldr	r1, [pc, #12]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08006148 	.word	0x08006148

08002e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <RCC_Delay+0x34>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <RCC_Delay+0x38>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0a5b      	lsrs	r3, r3, #9
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e64:	bf00      	nop
  }
  while (Delay --);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f9      	bne.n	8002e64 <RCC_Delay+0x1c>
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	200002d4 	.word	0x200002d4
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d07d      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea4:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eba:	61d3      	str	r3, [r2, #28]
 8002ebc:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d118      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fbee 	bl	80016c4 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	e008      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eec:	f7fe fbea 	bl	80016c4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e06d      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02e      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d027      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f28:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d014      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fbb9 	bl	80016c4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fbb5 	bl	80016c4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e036      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ee      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4917      	ldr	r1, [pc, #92]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	490b      	ldr	r1, [pc, #44]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42420440 	.word	0x42420440

08002ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e041      	b.n	8003086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe f8aa 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f000 fc0a 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d001      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e044      	b.n	8003132 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_TIM_Base_Start_IT+0xac>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x6c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_TIM_Base_Start_IT+0xb0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x6c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d00e      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x6c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_TIM_Base_Start_IT+0xb4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x6c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_TIM_Base_Start_IT+0xb8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x6c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_TIM_Base_Start_IT+0xbc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d010      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	e007      	b.n	8003130 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40013400 	.word	0x40013400
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00

08003150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e041      	b.n	80031e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f839 	bl	80031ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 fb5a 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_TIM_PWM_Start_IT+0x24>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e022      	b.n	800326a <HAL_TIM_PWM_Start_IT+0x6a>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d109      	bne.n	800323e <HAL_TIM_PWM_Start_IT+0x3e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e015      	b.n	800326a <HAL_TIM_PWM_Start_IT+0x6a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d109      	bne.n	8003258 <HAL_TIM_PWM_Start_IT+0x58>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e008      	b.n	800326a <HAL_TIM_PWM_Start_IT+0x6a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0b8      	b.n	80033e4 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start_IT+0x82>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003280:	e013      	b.n	80032aa <HAL_TIM_PWM_Start_IT+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start_IT+0x92>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	e00b      	b.n	80032aa <HAL_TIM_PWM_Start_IT+0xaa>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start_IT+0xa2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a0:	e003      	b.n	80032aa <HAL_TIM_PWM_Start_IT+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d841      	bhi.n	8003334 <HAL_TIM_PWM_Start_IT+0x134>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <HAL_TIM_PWM_Start_IT+0xb8>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	08003335 	.word	0x08003335
 80032c0:	08003335 	.word	0x08003335
 80032c4:	08003335 	.word	0x08003335
 80032c8:	080032ff 	.word	0x080032ff
 80032cc:	08003335 	.word	0x08003335
 80032d0:	08003335 	.word	0x08003335
 80032d4:	08003335 	.word	0x08003335
 80032d8:	08003311 	.word	0x08003311
 80032dc:	08003335 	.word	0x08003335
 80032e0:	08003335 	.word	0x08003335
 80032e4:	08003335 	.word	0x08003335
 80032e8:	08003323 	.word	0x08003323
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0202 	orr.w	r2, r2, #2
 80032fa:	60da      	str	r2, [r3, #12]
      break;
 80032fc:	e01b      	b.n	8003336 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0204 	orr.w	r2, r2, #4
 800330c:	60da      	str	r2, [r3, #12]
      break;
 800330e:	e012      	b.n	8003336 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0208 	orr.w	r2, r2, #8
 800331e:	60da      	str	r2, [r3, #12]
      break;
 8003320:	e009      	b.n	8003336 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0210 	orr.w	r2, r2, #16
 8003330:	60da      	str	r2, [r3, #12]
      break;
 8003332:	e000      	b.n	8003336 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003334:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fd3e 	bl	8003dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a28      	ldr	r2, [pc, #160]	; (80033ec <HAL_TIM_PWM_Start_IT+0x1ec>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_PWM_Start_IT+0x158>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_TIM_PWM_Start_IT+0x15c>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_TIM_PWM_Start_IT+0x15e>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_TIM_PWM_Start_IT+0x1ae>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_TIM_PWM_Start_IT+0x1ae>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338e:	d00e      	beq.n	80033ae <HAL_TIM_PWM_Start_IT+0x1ae>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_TIM_PWM_Start_IT+0x1ae>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_TIM_PWM_Start_IT+0x1ae>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_TIM_PWM_Start_IT+0x1fc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d111      	bne.n	80033d2 <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d010      	beq.n	80033e2 <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d0:	e007      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40013400 	.word	0x40013400
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00

08003400 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e093      	b.n	800353c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd fed3 	bl	80011d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003444:	f023 0307 	bic.w	r3, r3, #7
 8003448:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 f9f7 	bl	8003848 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	4313      	orrs	r3, r2
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80034a0:	f023 030c 	bic.w	r3, r3, #12
 80034a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	4313      	orrs	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	011a      	lsls	r2, r3, #4
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	031b      	lsls	r3, r3, #12
 80034d0:	4313      	orrs	r3, r2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	4313      	orrs	r3, r2
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e0ac      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	f200 809f 	bhi.w	80036ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080036ad 	.word	0x080036ad
 800357c:	080036ad 	.word	0x080036ad
 8003580:	080036ad 	.word	0x080036ad
 8003584:	080035e9 	.word	0x080035e9
 8003588:	080036ad 	.word	0x080036ad
 800358c:	080036ad 	.word	0x080036ad
 8003590:	080036ad 	.word	0x080036ad
 8003594:	0800362b 	.word	0x0800362b
 8003598:	080036ad 	.word	0x080036ad
 800359c:	080036ad 	.word	0x080036ad
 80035a0:	080036ad 	.word	0x080036ad
 80035a4:	0800366b 	.word	0x0800366b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f9c4 	bl	800393c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6999      	ldr	r1, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	619a      	str	r2, [r3, #24]
      break;
 80035e6:	e062      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fa14 	bl	8003a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	619a      	str	r2, [r3, #24]
      break;
 8003628:	e041      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa67 	bl	8003b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0204 	bic.w	r2, r2, #4
 8003654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
      break;
 8003668:	e021      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fabb 	bl	8003bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	61da      	str	r2, [r3, #28]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_ConfigClockSource+0x18>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0b3      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x180>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xd0>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x168>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	f000 8085 	beq.w	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xa2>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x116>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xf6>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x136>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f000 fb06 	bl	8003d82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003784:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04e      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f000 faef 	bl	8003d82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 fa66 	bl	8003c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	; 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fabd 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 fa84 	bl	8003cf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 faad 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 fa46 	bl	8003c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fa9d 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003814:	e00b      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 fa94 	bl	8003d4e <TIM_ITRx_SetConfig>
        break;
 8003826:	e002      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003828:	bf00      	nop
 800382a:	e000      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800382c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a33      	ldr	r2, [pc, #204]	; (8003928 <TIM_Base_SetConfig+0xe0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a32      	ldr	r2, [pc, #200]	; (800392c <TIM_Base_SetConfig+0xe4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00f      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d00b      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <TIM_Base_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <TIM_Base_SetConfig+0xec>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <TIM_Base_SetConfig+0xf0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a22      	ldr	r2, [pc, #136]	; (8003928 <TIM_Base_SetConfig+0xe0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0x82>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a21      	ldr	r2, [pc, #132]	; (800392c <TIM_Base_SetConfig+0xe4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0x82>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0x82>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <TIM_Base_SetConfig+0xe8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0x82>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <TIM_Base_SetConfig+0xec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0x82>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <TIM_Base_SetConfig+0xf0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <TIM_Base_SetConfig+0xe0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0xc8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a08      	ldr	r2, [pc, #32]	; (800392c <TIM_Base_SetConfig+0xe4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d103      	bne.n	8003918 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	615a      	str	r2, [r3, #20]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40013400 	.word	0x40013400
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00

0800393c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 0201 	bic.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f023 0302 	bic.w	r3, r3, #2
 8003984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <TIM_OC1_SetConfig+0xd8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_OC1_SetConfig+0x64>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <TIM_OC1_SetConfig+0xdc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10c      	bne.n	80039ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0308 	bic.w	r3, r3, #8
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <TIM_OC1_SetConfig+0xd8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_OC1_SetConfig+0x8e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <TIM_OC1_SetConfig+0xdc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d111      	bne.n	80039ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40013400 	.word	0x40013400

08003a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0210 	bic.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0320 	bic.w	r3, r3, #32
 8003a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a21      	ldr	r2, [pc, #132]	; (8003afc <TIM_OC2_SetConfig+0xe0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC2_SetConfig+0x68>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <TIM_OC2_SetConfig+0xe4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10d      	bne.n	8003aa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <TIM_OC2_SetConfig+0xe0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_OC2_SetConfig+0x94>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <TIM_OC2_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d113      	bne.n	8003ad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40013400 	.word	0x40013400

08003b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <TIM_OC3_SetConfig+0xe0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_OC3_SetConfig+0x66>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <TIM_OC3_SetConfig+0xe4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10d      	bne.n	8003b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <TIM_OC3_SetConfig+0xe0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC3_SetConfig+0x92>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <TIM_OC3_SetConfig+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d113      	bne.n	8003bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40013400 	.word	0x40013400

08003bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	031b      	lsls	r3, r3, #12
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <TIM_OC4_SetConfig+0xa0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC4_SetConfig+0x68>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <TIM_OC4_SetConfig+0xa4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d109      	bne.n	8003c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400

08003c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 030a 	bic.w	r3, r3, #10
 8003cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 0210 	bic.w	r2, r3, #16
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	031b      	lsls	r3, r3, #12
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	621a      	str	r2, [r3, #32]
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f043 0307 	orr.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	021a      	lsls	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	609a      	str	r2, [r3, #8]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e050      	b.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10c      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40000c00 	.word	0x40000c00

08003ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e03d      	b.n	8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e03f      	b.n	8004014 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fd fa69 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2224      	movs	r2, #36	; 0x24
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fc84 	bl	80048d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d17c      	bne.n	8004136 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Transmit+0x2c>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e075      	b.n	8004138 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_UART_Transmit+0x3e>
 8004056:	2302      	movs	r3, #2
 8004058:	e06e      	b.n	8004138 <HAL_UART_Transmit+0x11c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2221      	movs	r2, #33	; 0x21
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004070:	f7fd fb28 	bl	80016c4 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d108      	bne.n	800409e <HAL_UART_Transmit+0x82>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e003      	b.n	80040a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040ae:	e02a      	b.n	8004106 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa37 	bl	800452e <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e036      	b.n	8004138 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3302      	adds	r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e007      	b.n	80040f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3301      	adds	r3, #1
 80040f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1cf      	bne.n	80040b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fa07 	bl	800452e <UART_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e006      	b.n	8004138 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004136:	2302      	movs	r3, #2
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d11d      	bne.n	8004196 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Receive_IT+0x26>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e016      	b.n	8004198 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive_IT+0x38>
 8004174:	2302      	movs	r3, #2
 8004176:	e00f      	b.n	8004198 <HAL_UART_Receive_IT+0x58>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa18 	bl	80045c2 <UART_Start_Receive_IT>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_UART_IRQHandler+0x52>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fac9 	bl	8004782 <UART_Receive_IT>
      return;
 80041f0:	e17b      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80b1 	beq.w	800435c <HAL_UART_IRQHandler+0x1bc>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_UART_IRQHandler+0x70>
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a6 	beq.w	800435c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_UART_IRQHandler+0x90>
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_UART_IRQHandler+0xb0>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f043 0202 	orr.w	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_UART_IRQHandler+0xd0>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00f      	beq.n	800429a <HAL_UART_IRQHandler+0xfa>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_UART_IRQHandler+0xee>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 811e 	beq.w	80044e0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_UART_IRQHandler+0x11e>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa62 	bl	8004782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <HAL_UART_IRQHandler+0x146>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d031      	beq.n	800434a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9a4 	bl	8004634 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d023      	beq.n	8004342 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004308:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4a76      	ldr	r2, [pc, #472]	; (80044f0 <HAL_UART_IRQHandler+0x350>)
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd fd6a 	bl	8001df8 <HAL_DMA_Abort_IT>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004334:	4610      	mov	r0, r2
 8004336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e00e      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8e3 	bl	8004506 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e00a      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8df 	bl	8004506 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	e006      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8db 	bl	8004506 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004356:	e0c3      	b.n	80044e0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	bf00      	nop
    return;
 800435a:	e0c1      	b.n	80044e0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	f040 80a1 	bne.w	80044a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 809b 	beq.w	80044a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8095 	beq.w	80044a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04e      	beq.n	8004440 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043ac:	8a3b      	ldrh	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8098 	beq.w	80044e4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b8:	8a3a      	ldrh	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	f080 8092 	bcs.w	80044e4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8a3a      	ldrh	r2, [r7, #16]
 80043c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d02b      	beq.n	8004428 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0210 	bic.w	r2, r2, #16
 800441c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fcad 	bl	8001d82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004430:	b29b      	uxth	r3, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	b29b      	uxth	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f86d 	bl	8004518 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800443e:	e051      	b.n	80044e4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004448:	b29b      	uxth	r3, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d047      	beq.n	80044e8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004458:	8a7b      	ldrh	r3, [r7, #18]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d044      	beq.n	80044e8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800446c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0210 	bic.w	r2, r2, #16
 800449a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449c:	8a7b      	ldrh	r3, [r7, #18]
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f839 	bl	8004518 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044a6:	e01f      	b.n	80044e8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_UART_IRQHandler+0x324>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8f9 	bl	80046b4 <UART_Transmit_IT>
    return;
 80044c2:	e012      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_UART_IRQHandler+0x34a>
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f93a 	bl	8004752 <UART_EndTransmit_IT>
    return;
 80044de:	e004      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
    return;
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
      return;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
      return;
 80044e8:	bf00      	nop
  }
}
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	0800468d 	.word	0x0800468d

080044f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453e:	e02c      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d028      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0x30>
 800454e:	f7fd f8b9 	bl	80016c4 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	429a      	cmp	r2, r3
 800455c:	d21d      	bcs.n	800459a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800456c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e00f      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d0c3      	beq.n	8004540 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2222      	movs	r2, #34	; 0x22
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004606:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0220 	orr.w	r2, r2, #32
 8004626:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800464a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	2b01      	cmp	r3, #1
 8004662:	d107      	bne.n	8004674 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0210 	bic.w	r2, r2, #16
 8004672:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff ff2d 	bl	8004506 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b21      	cmp	r3, #33	; 0x21
 80046c6:	d13e      	bne.n	8004746 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	d114      	bne.n	80046fc <UART_Transmit_IT+0x48>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d110      	bne.n	80046fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	621a      	str	r2, [r3, #32]
 80046fa:	e008      	b.n	800470e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1c59      	adds	r1, r3, #1
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6211      	str	r1, [r2, #32]
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29b      	uxth	r3, r3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4619      	mov	r1, r3
 800471c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr

08004752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff febe 	bl	80044f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b086      	sub	sp, #24
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b22      	cmp	r3, #34	; 0x22
 8004794:	f040 8099 	bne.w	80048ca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d117      	bne.n	80047d2 <UART_Receive_IT+0x50>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d113      	bne.n	80047d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	1c9a      	adds	r2, r3, #2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
 80047d0:	e026      	b.n	8004820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d007      	beq.n	80047f6 <UART_Receive_IT+0x74>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <UART_Receive_IT+0x82>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e008      	b.n	8004816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004810:	b2da      	uxtb	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4619      	mov	r1, r3
 800482e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004830:	2b00      	cmp	r3, #0
 8004832:	d148      	bne.n	80048c6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0220 	bic.w	r2, r2, #32
 8004842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	2b01      	cmp	r3, #1
 8004872:	d123      	bne.n	80048bc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0210 	bic.w	r2, r2, #16
 8004888:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d10a      	bne.n	80048ae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fe2f 	bl	8004518 <HAL_UARTEx_RxEventCallback>
 80048ba:	e002      	b.n	80048c2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fc f811 	bl	80008e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e002      	b.n	80048cc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800490e:	f023 030c 	bic.w	r3, r3, #12
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	430b      	orrs	r3, r1
 800491a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <UART_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7fe fa70 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	e002      	b.n	800494a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe fa58 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 8004948:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <UART_SetConfig+0x118>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	0119      	lsls	r1, r3, #4
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <UART_SetConfig+0x118>)
 8004982:	fba3 0302 	umull	r0, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2064      	movs	r0, #100	; 0x64
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	; 0x32
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <UART_SetConfig+0x118>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a0:	4419      	add	r1, r3
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009a      	lsls	r2, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <UART_SetConfig+0x118>)
 80049ba:	fba3 0302 	umull	r0, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2064      	movs	r0, #100	; 0x64
 80049c2:	fb00 f303 	mul.w	r3, r0, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	3332      	adds	r3, #50	; 0x32
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <UART_SetConfig+0x118>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	440a      	add	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40013800 	.word	0x40013800
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6852      	ldr	r2, [r2, #4]
 8004a56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d103      	bne.n	8004a6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1e5a      	subs	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a92:	4b51      	ldr	r3, [pc, #324]	; (8004bd8 <xTaskIncrementTick+0x150>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 808d 	bne.w	8004bb6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a9c:	4b4f      	ldr	r3, [pc, #316]	; (8004bdc <xTaskIncrementTick+0x154>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004aa4:	4a4d      	ldr	r2, [pc, #308]	; (8004bdc <xTaskIncrementTick+0x154>)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d120      	bne.n	8004af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xTaskIncrementTick+0x46>
 8004ad0:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <xTaskIncrementTick+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a41      	ldr	r2, [pc, #260]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4a41      	ldr	r2, [pc, #260]	; (8004be4 <xTaskIncrementTick+0x15c>)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <xTaskIncrementTick+0x160>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	4a3f      	ldr	r2, [pc, #252]	; (8004be8 <xTaskIncrementTick+0x160>)
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	f000 f8e3 	bl	8004cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <xTaskIncrementTick+0x164>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d34d      	bcc.n	8004b98 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afc:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <xTaskIncrementTick+0x82>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xTaskIncrementTick+0x84>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <xTaskIncrementTick+0x164>)
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	601a      	str	r2, [r3, #0]
					break;
 8004b18:	e03e      	b.n	8004b98 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d203      	bcs.n	8004b3a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b32:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <xTaskIncrementTick+0x164>)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6013      	str	r3, [r2, #0]
						break;
 8004b38:	e02e      	b.n	8004b98 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff79 	bl	8004a36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	3318      	adds	r3, #24
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff70 	bl	8004a36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <xTaskIncrementTick+0x168>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <xTaskIncrementTick+0x168>)
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <xTaskIncrementTick+0x16c>)
 8004b76:	441a      	add	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7ff ff36 	bl	80049f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <xTaskIncrementTick+0x170>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d3b4      	bcc.n	8004afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b92:	2301      	movs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	e7b1      	b.n	8004afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b98:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <xTaskIncrementTick+0x170>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4915      	ldr	r1, [pc, #84]	; (8004bf4 <xTaskIncrementTick+0x16c>)
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d907      	bls.n	8004bc0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e004      	b.n	8004bc0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <xTaskIncrementTick+0x174>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	4a0f      	ldr	r2, [pc, #60]	; (8004bfc <xTaskIncrementTick+0x174>)
 8004bbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <xTaskIncrementTick+0x178>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000714 	.word	0x20000714
 8004bdc:	200006f8 	.word	0x200006f8
 8004be0:	200006f0 	.word	0x200006f0
 8004be4:	200006f4 	.word	0x200006f4
 8004be8:	2000070c 	.word	0x2000070c
 8004bec:	20000710 	.word	0x20000710
 8004bf0:	200006fc 	.word	0x200006fc
 8004bf4:	20000664 	.word	0x20000664
 8004bf8:	20000660 	.word	0x20000660
 8004bfc:	20000704 	.word	0x20000704
 8004c00:	20000708 	.word	0x20000708

08004c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <vTaskSwitchContext+0xa0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c12:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <vTaskSwitchContext+0xa4>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c18:	e03f      	b.n	8004c9a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c1a:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <vTaskSwitchContext+0xa4>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c20:	4b22      	ldr	r3, [pc, #136]	; (8004cac <vTaskSwitchContext+0xa8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	fab3 f383 	clz	r3, r3
 8004c2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
 8004c30:	f1c3 031f 	rsb	r3, r3, #31
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	491e      	ldr	r1, [pc, #120]	; (8004cb0 <vTaskSwitchContext+0xac>)
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	607b      	str	r3, [r7, #4]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vTaskSwitchContext+0x5a>
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <vTaskSwitchContext+0xac>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3308      	adds	r3, #8
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d104      	bne.n	8004c90 <vTaskSwitchContext+0x8c>
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <vTaskSwitchContext+0xb0>)
 8004c98:	6013      	str	r3, [r2, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr
 8004ca4:	20000714 	.word	0x20000714
 8004ca8:	20000708 	.word	0x20000708
 8004cac:	200006fc 	.word	0x200006fc
 8004cb0:	20000664 	.word	0x20000664
 8004cb4:	20000660 	.word	0x20000660

08004cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <prvResetNextTaskUnblockTime+0x40>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <prvResetNextTaskUnblockTime+0x14>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <prvResetNextTaskUnblockTime+0x16>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <prvResetNextTaskUnblockTime+0x44>)
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cda:	e008      	b.n	8004cee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <prvResetNextTaskUnblockTime+0x40>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <prvResetNextTaskUnblockTime+0x44>)
 8004cec:	6013      	str	r3, [r2, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	200006f0 	.word	0x200006f0
 8004cfc:	20000710 	.word	0x20000710

08004d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <xTaskGetSchedulerState+0x34>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e008      	b.n	8004d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <xTaskGetSchedulerState+0x38>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	e001      	b.n	8004d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d26:	687b      	ldr	r3, [r7, #4]
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000700 	.word	0x20000700
 8004d38:	20000714 	.word	0x20000714
 8004d3c:	00000000 	.word	0x00000000

08004d40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <pxCurrentTCBConst2>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d4a:	f380 8809 	msr	PSP, r0
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d5e:	4770      	bx	lr

08004d60 <pxCurrentTCBConst2>:
 8004d60:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
	...

08004d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d70:	f3ef 8009 	mrs	r0, PSP
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <pxCurrentTCBConst>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d80:	6010      	str	r0, [r2, #0]
 8004d82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d8a:	f380 8811 	msr	BASEPRI, r0
 8004d8e:	f7ff ff39 	bl	8004c04 <vTaskSwitchContext>
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8811 	msr	BASEPRI, r0
 8004d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6808      	ldr	r0, [r1, #0]
 8004da2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004da6:	f380 8809 	msr	PSP, r0
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	4770      	bx	lr

08004db0 <pxCurrentTCBConst>:
 8004db0:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
}
 8004dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dd2:	f7ff fe59 	bl	8004a88 <xTaskIncrementTick>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <xPortSysTickHandler+0x40>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <atoi>:
 8004dfc:	220a      	movs	r2, #10
 8004dfe:	2100      	movs	r1, #0
 8004e00:	f000 b922 	b.w	8005048 <strtol>

08004e04 <__errno>:
 8004e04:	4b01      	ldr	r3, [pc, #4]	; (8004e0c <__errno+0x8>)
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	200002e0 	.word	0x200002e0

08004e10 <__libc_init_array>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	2600      	movs	r6, #0
 8004e14:	4d0c      	ldr	r5, [pc, #48]	; (8004e48 <__libc_init_array+0x38>)
 8004e16:	4c0d      	ldr	r4, [pc, #52]	; (8004e4c <__libc_init_array+0x3c>)
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	42a6      	cmp	r6, r4
 8004e1e:	d109      	bne.n	8004e34 <__libc_init_array+0x24>
 8004e20:	f001 f91c 	bl	800605c <_init>
 8004e24:	2600      	movs	r6, #0
 8004e26:	4d0a      	ldr	r5, [pc, #40]	; (8004e50 <__libc_init_array+0x40>)
 8004e28:	4c0a      	ldr	r4, [pc, #40]	; (8004e54 <__libc_init_array+0x44>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d105      	bne.n	8004e3e <__libc_init_array+0x2e>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e38:	4798      	blx	r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7ee      	b.n	8004e1c <__libc_init_array+0xc>
 8004e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e42:	4798      	blx	r3
 8004e44:	3601      	adds	r6, #1
 8004e46:	e7f2      	b.n	8004e2e <__libc_init_array+0x1e>
 8004e48:	0800639c 	.word	0x0800639c
 8004e4c:	0800639c 	.word	0x0800639c
 8004e50:	0800639c 	.word	0x0800639c
 8004e54:	080063a0 	.word	0x080063a0

08004e58 <memset>:
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4402      	add	r2, r0
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d100      	bne.n	8004e62 <memset+0xa>
 8004e60:	4770      	bx	lr
 8004e62:	f803 1b01 	strb.w	r1, [r3], #1
 8004e66:	e7f9      	b.n	8004e5c <memset+0x4>

08004e68 <iprintf>:
 8004e68:	b40f      	push	{r0, r1, r2, r3}
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <iprintf+0x2c>)
 8004e6c:	b513      	push	{r0, r1, r4, lr}
 8004e6e:	681c      	ldr	r4, [r3, #0]
 8004e70:	b124      	cbz	r4, 8004e7c <iprintf+0x14>
 8004e72:	69a3      	ldr	r3, [r4, #24]
 8004e74:	b913      	cbnz	r3, 8004e7c <iprintf+0x14>
 8004e76:	4620      	mov	r0, r4
 8004e78:	f000 fae4 	bl	8005444 <__sinit>
 8004e7c:	ab05      	add	r3, sp, #20
 8004e7e:	4620      	mov	r0, r4
 8004e80:	9a04      	ldr	r2, [sp, #16]
 8004e82:	68a1      	ldr	r1, [r4, #8]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	f000 fd01 	bl	800588c <_vfiprintf_r>
 8004e8a:	b002      	add	sp, #8
 8004e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e90:	b004      	add	sp, #16
 8004e92:	4770      	bx	lr
 8004e94:	200002e0 	.word	0x200002e0

08004e98 <strtok>:
 8004e98:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <strtok+0x5c>)
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	681f      	ldr	r7, [r3, #0]
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	b9ec      	cbnz	r4, 8004ee4 <strtok+0x4c>
 8004ea8:	2050      	movs	r0, #80	; 0x50
 8004eaa:	f000 fbe3 	bl	8005674 <malloc>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	65b8      	str	r0, [r7, #88]	; 0x58
 8004eb2:	b920      	cbnz	r0, 8004ebe <strtok+0x26>
 8004eb4:	2157      	movs	r1, #87	; 0x57
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <strtok+0x60>)
 8004eb8:	4810      	ldr	r0, [pc, #64]	; (8004efc <strtok+0x64>)
 8004eba:	f000 f98f 	bl	80051dc <__assert_func>
 8004ebe:	e9c0 4400 	strd	r4, r4, [r0]
 8004ec2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ec6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004eca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004ece:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004ed2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004ed6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004eda:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004ede:	6184      	str	r4, [r0, #24]
 8004ee0:	7704      	strb	r4, [r0, #28]
 8004ee2:	6244      	str	r4, [r0, #36]	; 0x24
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eea:	2301      	movs	r3, #1
 8004eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef0:	f000 b806 	b.w	8004f00 <__strtok_r>
 8004ef4:	200002e0 	.word	0x200002e0
 8004ef8:	08006154 	.word	0x08006154
 8004efc:	0800616b 	.word	0x0800616b

08004f00 <__strtok_r>:
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f02:	b908      	cbnz	r0, 8004f08 <__strtok_r+0x8>
 8004f04:	6810      	ldr	r0, [r2, #0]
 8004f06:	b188      	cbz	r0, 8004f2c <__strtok_r+0x2c>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f12:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f16:	b91e      	cbnz	r6, 8004f20 <__strtok_r+0x20>
 8004f18:	b965      	cbnz	r5, 8004f34 <__strtok_r+0x34>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	6015      	str	r5, [r2, #0]
 8004f1e:	e005      	b.n	8004f2c <__strtok_r+0x2c>
 8004f20:	42b5      	cmp	r5, r6
 8004f22:	d1f6      	bne.n	8004f12 <__strtok_r+0x12>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <__strtok_r+0xa>
 8004f28:	6014      	str	r4, [r2, #0]
 8004f2a:	7003      	strb	r3, [r0, #0]
 8004f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2e:	461c      	mov	r4, r3
 8004f30:	e00c      	b.n	8004f4c <__strtok_r+0x4c>
 8004f32:	b915      	cbnz	r5, 8004f3a <__strtok_r+0x3a>
 8004f34:	460e      	mov	r6, r1
 8004f36:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f3e:	42ab      	cmp	r3, r5
 8004f40:	d1f7      	bne.n	8004f32 <__strtok_r+0x32>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f3      	beq.n	8004f2e <__strtok_r+0x2e>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f4c:	6014      	str	r4, [r2, #0]
 8004f4e:	e7ed      	b.n	8004f2c <__strtok_r+0x2c>

08004f50 <_strtol_l.constprop.0>:
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f56:	4680      	mov	r8, r0
 8004f58:	d001      	beq.n	8004f5e <_strtol_l.constprop.0+0xe>
 8004f5a:	2b24      	cmp	r3, #36	; 0x24
 8004f5c:	d906      	bls.n	8004f6c <_strtol_l.constprop.0+0x1c>
 8004f5e:	f7ff ff51 	bl	8004e04 <__errno>
 8004f62:	2316      	movs	r3, #22
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	2000      	movs	r0, #0
 8004f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	4f35      	ldr	r7, [pc, #212]	; (8005044 <_strtol_l.constprop.0+0xf4>)
 8004f70:	4628      	mov	r0, r5
 8004f72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f76:	5de6      	ldrb	r6, [r4, r7]
 8004f78:	f016 0608 	ands.w	r6, r6, #8
 8004f7c:	d1f8      	bne.n	8004f70 <_strtol_l.constprop.0+0x20>
 8004f7e:	2c2d      	cmp	r4, #45	; 0x2d
 8004f80:	d12f      	bne.n	8004fe2 <_strtol_l.constprop.0+0x92>
 8004f82:	2601      	movs	r6, #1
 8004f84:	782c      	ldrb	r4, [r5, #0]
 8004f86:	1c85      	adds	r5, r0, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d057      	beq.n	800503c <_strtol_l.constprop.0+0xec>
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d109      	bne.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8004f90:	2c30      	cmp	r4, #48	; 0x30
 8004f92:	d107      	bne.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8004f94:	7828      	ldrb	r0, [r5, #0]
 8004f96:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f9a:	2858      	cmp	r0, #88	; 0x58
 8004f9c:	d149      	bne.n	8005032 <_strtol_l.constprop.0+0xe2>
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	786c      	ldrb	r4, [r5, #1]
 8004fa2:	3502      	adds	r5, #2
 8004fa4:	2700      	movs	r7, #0
 8004fa6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004faa:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004fae:	fbbe f9f3 	udiv	r9, lr, r3
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	fb03 ea19 	mls	sl, r3, r9, lr
 8004fb8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004fbc:	f1bc 0f09 	cmp.w	ip, #9
 8004fc0:	d814      	bhi.n	8004fec <_strtol_l.constprop.0+0x9c>
 8004fc2:	4664      	mov	r4, ip
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	dd22      	ble.n	800500e <_strtol_l.constprop.0+0xbe>
 8004fc8:	2f00      	cmp	r7, #0
 8004fca:	db1d      	blt.n	8005008 <_strtol_l.constprop.0+0xb8>
 8004fcc:	4581      	cmp	r9, r0
 8004fce:	d31b      	bcc.n	8005008 <_strtol_l.constprop.0+0xb8>
 8004fd0:	d101      	bne.n	8004fd6 <_strtol_l.constprop.0+0x86>
 8004fd2:	45a2      	cmp	sl, r4
 8004fd4:	db18      	blt.n	8005008 <_strtol_l.constprop.0+0xb8>
 8004fd6:	2701      	movs	r7, #1
 8004fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8004fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fe0:	e7ea      	b.n	8004fb8 <_strtol_l.constprop.0+0x68>
 8004fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8004fe4:	bf04      	itt	eq
 8004fe6:	782c      	ldrbeq	r4, [r5, #0]
 8004fe8:	1c85      	addeq	r5, r0, #2
 8004fea:	e7cd      	b.n	8004f88 <_strtol_l.constprop.0+0x38>
 8004fec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ff0:	f1bc 0f19 	cmp.w	ip, #25
 8004ff4:	d801      	bhi.n	8004ffa <_strtol_l.constprop.0+0xaa>
 8004ff6:	3c37      	subs	r4, #55	; 0x37
 8004ff8:	e7e4      	b.n	8004fc4 <_strtol_l.constprop.0+0x74>
 8004ffa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ffe:	f1bc 0f19 	cmp.w	ip, #25
 8005002:	d804      	bhi.n	800500e <_strtol_l.constprop.0+0xbe>
 8005004:	3c57      	subs	r4, #87	; 0x57
 8005006:	e7dd      	b.n	8004fc4 <_strtol_l.constprop.0+0x74>
 8005008:	f04f 37ff 	mov.w	r7, #4294967295
 800500c:	e7e6      	b.n	8004fdc <_strtol_l.constprop.0+0x8c>
 800500e:	2f00      	cmp	r7, #0
 8005010:	da07      	bge.n	8005022 <_strtol_l.constprop.0+0xd2>
 8005012:	2322      	movs	r3, #34	; 0x22
 8005014:	4670      	mov	r0, lr
 8005016:	f8c8 3000 	str.w	r3, [r8]
 800501a:	2a00      	cmp	r2, #0
 800501c:	d0a4      	beq.n	8004f68 <_strtol_l.constprop.0+0x18>
 800501e:	1e69      	subs	r1, r5, #1
 8005020:	e005      	b.n	800502e <_strtol_l.constprop.0+0xde>
 8005022:	b106      	cbz	r6, 8005026 <_strtol_l.constprop.0+0xd6>
 8005024:	4240      	negs	r0, r0
 8005026:	2a00      	cmp	r2, #0
 8005028:	d09e      	beq.n	8004f68 <_strtol_l.constprop.0+0x18>
 800502a:	2f00      	cmp	r7, #0
 800502c:	d1f7      	bne.n	800501e <_strtol_l.constprop.0+0xce>
 800502e:	6011      	str	r1, [r2, #0]
 8005030:	e79a      	b.n	8004f68 <_strtol_l.constprop.0+0x18>
 8005032:	2430      	movs	r4, #48	; 0x30
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1b5      	bne.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8005038:	2308      	movs	r3, #8
 800503a:	e7b3      	b.n	8004fa4 <_strtol_l.constprop.0+0x54>
 800503c:	2c30      	cmp	r4, #48	; 0x30
 800503e:	d0a9      	beq.n	8004f94 <_strtol_l.constprop.0+0x44>
 8005040:	230a      	movs	r3, #10
 8005042:	e7af      	b.n	8004fa4 <_strtol_l.constprop.0+0x54>
 8005044:	08006205 	.word	0x08006205

08005048 <strtol>:
 8005048:	4613      	mov	r3, r2
 800504a:	460a      	mov	r2, r1
 800504c:	4601      	mov	r1, r0
 800504e:	4802      	ldr	r0, [pc, #8]	; (8005058 <strtol+0x10>)
 8005050:	6800      	ldr	r0, [r0, #0]
 8005052:	f7ff bf7d 	b.w	8004f50 <_strtol_l.constprop.0>
 8005056:	bf00      	nop
 8005058:	200002e0 	.word	0x200002e0

0800505c <__swbuf_r>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	460e      	mov	r6, r1
 8005060:	4614      	mov	r4, r2
 8005062:	4605      	mov	r5, r0
 8005064:	b118      	cbz	r0, 800506e <__swbuf_r+0x12>
 8005066:	6983      	ldr	r3, [r0, #24]
 8005068:	b90b      	cbnz	r3, 800506e <__swbuf_r+0x12>
 800506a:	f000 f9eb 	bl	8005444 <__sinit>
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <__swbuf_r+0x98>)
 8005070:	429c      	cmp	r4, r3
 8005072:	d12b      	bne.n	80050cc <__swbuf_r+0x70>
 8005074:	686c      	ldr	r4, [r5, #4]
 8005076:	69a3      	ldr	r3, [r4, #24]
 8005078:	60a3      	str	r3, [r4, #8]
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	071a      	lsls	r2, r3, #28
 800507e:	d52f      	bpl.n	80050e0 <__swbuf_r+0x84>
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	b36b      	cbz	r3, 80050e0 <__swbuf_r+0x84>
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	b2f6      	uxtb	r6, r6
 800508a:	1ac0      	subs	r0, r0, r3
 800508c:	6963      	ldr	r3, [r4, #20]
 800508e:	4637      	mov	r7, r6
 8005090:	4283      	cmp	r3, r0
 8005092:	dc04      	bgt.n	800509e <__swbuf_r+0x42>
 8005094:	4621      	mov	r1, r4
 8005096:	4628      	mov	r0, r5
 8005098:	f000 f940 	bl	800531c <_fflush_r>
 800509c:	bb30      	cbnz	r0, 80050ec <__swbuf_r+0x90>
 800509e:	68a3      	ldr	r3, [r4, #8]
 80050a0:	3001      	adds	r0, #1
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60a3      	str	r3, [r4, #8]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	6022      	str	r2, [r4, #0]
 80050ac:	701e      	strb	r6, [r3, #0]
 80050ae:	6963      	ldr	r3, [r4, #20]
 80050b0:	4283      	cmp	r3, r0
 80050b2:	d004      	beq.n	80050be <__swbuf_r+0x62>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	07db      	lsls	r3, r3, #31
 80050b8:	d506      	bpl.n	80050c8 <__swbuf_r+0x6c>
 80050ba:	2e0a      	cmp	r6, #10
 80050bc:	d104      	bne.n	80050c8 <__swbuf_r+0x6c>
 80050be:	4621      	mov	r1, r4
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 f92b 	bl	800531c <_fflush_r>
 80050c6:	b988      	cbnz	r0, 80050ec <__swbuf_r+0x90>
 80050c8:	4638      	mov	r0, r7
 80050ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <__swbuf_r+0x9c>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d101      	bne.n	80050d6 <__swbuf_r+0x7a>
 80050d2:	68ac      	ldr	r4, [r5, #8]
 80050d4:	e7cf      	b.n	8005076 <__swbuf_r+0x1a>
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <__swbuf_r+0xa0>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	bf08      	it	eq
 80050dc:	68ec      	ldreq	r4, [r5, #12]
 80050de:	e7ca      	b.n	8005076 <__swbuf_r+0x1a>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 f80c 	bl	8005100 <__swsetup_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d0cb      	beq.n	8005084 <__swbuf_r+0x28>
 80050ec:	f04f 37ff 	mov.w	r7, #4294967295
 80050f0:	e7ea      	b.n	80050c8 <__swbuf_r+0x6c>
 80050f2:	bf00      	nop
 80050f4:	08006328 	.word	0x08006328
 80050f8:	08006348 	.word	0x08006348
 80050fc:	08006308 	.word	0x08006308

08005100 <__swsetup_r>:
 8005100:	4b32      	ldr	r3, [pc, #200]	; (80051cc <__swsetup_r+0xcc>)
 8005102:	b570      	push	{r4, r5, r6, lr}
 8005104:	681d      	ldr	r5, [r3, #0]
 8005106:	4606      	mov	r6, r0
 8005108:	460c      	mov	r4, r1
 800510a:	b125      	cbz	r5, 8005116 <__swsetup_r+0x16>
 800510c:	69ab      	ldr	r3, [r5, #24]
 800510e:	b913      	cbnz	r3, 8005116 <__swsetup_r+0x16>
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f997 	bl	8005444 <__sinit>
 8005116:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <__swsetup_r+0xd0>)
 8005118:	429c      	cmp	r4, r3
 800511a:	d10f      	bne.n	800513c <__swsetup_r+0x3c>
 800511c:	686c      	ldr	r4, [r5, #4]
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005124:	0719      	lsls	r1, r3, #28
 8005126:	d42c      	bmi.n	8005182 <__swsetup_r+0x82>
 8005128:	06dd      	lsls	r5, r3, #27
 800512a:	d411      	bmi.n	8005150 <__swsetup_r+0x50>
 800512c:	2309      	movs	r3, #9
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e03e      	b.n	80051ba <__swsetup_r+0xba>
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <__swsetup_r+0xd4>)
 800513e:	429c      	cmp	r4, r3
 8005140:	d101      	bne.n	8005146 <__swsetup_r+0x46>
 8005142:	68ac      	ldr	r4, [r5, #8]
 8005144:	e7eb      	b.n	800511e <__swsetup_r+0x1e>
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <__swsetup_r+0xd8>)
 8005148:	429c      	cmp	r4, r3
 800514a:	bf08      	it	eq
 800514c:	68ec      	ldreq	r4, [r5, #12]
 800514e:	e7e6      	b.n	800511e <__swsetup_r+0x1e>
 8005150:	0758      	lsls	r0, r3, #29
 8005152:	d512      	bpl.n	800517a <__swsetup_r+0x7a>
 8005154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005156:	b141      	cbz	r1, 800516a <__swsetup_r+0x6a>
 8005158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800515c:	4299      	cmp	r1, r3
 800515e:	d002      	beq.n	8005166 <__swsetup_r+0x66>
 8005160:	4630      	mov	r0, r6
 8005162:	f000 fa8f 	bl	8005684 <_free_r>
 8005166:	2300      	movs	r3, #0
 8005168:	6363      	str	r3, [r4, #52]	; 0x34
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	2300      	movs	r3, #0
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f043 0308 	orr.w	r3, r3, #8
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	b94b      	cbnz	r3, 800519a <__swsetup_r+0x9a>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800518c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005190:	d003      	beq.n	800519a <__swsetup_r+0x9a>
 8005192:	4621      	mov	r1, r4
 8005194:	4630      	mov	r0, r6
 8005196:	f000 fa2d 	bl	80055f4 <__smakebuf_r>
 800519a:	89a0      	ldrh	r0, [r4, #12]
 800519c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051a0:	f010 0301 	ands.w	r3, r0, #1
 80051a4:	d00a      	beq.n	80051bc <__swsetup_r+0xbc>
 80051a6:	2300      	movs	r3, #0
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	6963      	ldr	r3, [r4, #20]
 80051ac:	425b      	negs	r3, r3
 80051ae:	61a3      	str	r3, [r4, #24]
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	b943      	cbnz	r3, 80051c6 <__swsetup_r+0xc6>
 80051b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051b8:	d1ba      	bne.n	8005130 <__swsetup_r+0x30>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	0781      	lsls	r1, r0, #30
 80051be:	bf58      	it	pl
 80051c0:	6963      	ldrpl	r3, [r4, #20]
 80051c2:	60a3      	str	r3, [r4, #8]
 80051c4:	e7f4      	b.n	80051b0 <__swsetup_r+0xb0>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e7f7      	b.n	80051ba <__swsetup_r+0xba>
 80051ca:	bf00      	nop
 80051cc:	200002e0 	.word	0x200002e0
 80051d0:	08006328 	.word	0x08006328
 80051d4:	08006348 	.word	0x08006348
 80051d8:	08006308 	.word	0x08006308

080051dc <__assert_func>:
 80051dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051de:	4614      	mov	r4, r2
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <__assert_func+0x2c>)
 80051e4:	4605      	mov	r5, r0
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68d8      	ldr	r0, [r3, #12]
 80051ea:	b14c      	cbz	r4, 8005200 <__assert_func+0x24>
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <__assert_func+0x30>)
 80051ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051f2:	9100      	str	r1, [sp, #0]
 80051f4:	462b      	mov	r3, r5
 80051f6:	4906      	ldr	r1, [pc, #24]	; (8005210 <__assert_func+0x34>)
 80051f8:	f000 f9a2 	bl	8005540 <fiprintf>
 80051fc:	f000 fe72 	bl	8005ee4 <abort>
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <__assert_func+0x38>)
 8005202:	461c      	mov	r4, r3
 8005204:	e7f3      	b.n	80051ee <__assert_func+0x12>
 8005206:	bf00      	nop
 8005208:	200002e0 	.word	0x200002e0
 800520c:	080061c8 	.word	0x080061c8
 8005210:	080061d5 	.word	0x080061d5
 8005214:	08006203 	.word	0x08006203

08005218 <__sflush_r>:
 8005218:	898a      	ldrh	r2, [r1, #12]
 800521a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521c:	4605      	mov	r5, r0
 800521e:	0710      	lsls	r0, r2, #28
 8005220:	460c      	mov	r4, r1
 8005222:	d457      	bmi.n	80052d4 <__sflush_r+0xbc>
 8005224:	684b      	ldr	r3, [r1, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	dc04      	bgt.n	8005234 <__sflush_r+0x1c>
 800522a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	dc01      	bgt.n	8005234 <__sflush_r+0x1c>
 8005230:	2000      	movs	r0, #0
 8005232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005236:	2e00      	cmp	r6, #0
 8005238:	d0fa      	beq.n	8005230 <__sflush_r+0x18>
 800523a:	2300      	movs	r3, #0
 800523c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005240:	682f      	ldr	r7, [r5, #0]
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	d032      	beq.n	80052ac <__sflush_r+0x94>
 8005246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	075a      	lsls	r2, r3, #29
 800524c:	d505      	bpl.n	800525a <__sflush_r+0x42>
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	1ac0      	subs	r0, r0, r3
 8005252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005254:	b10b      	cbz	r3, 800525a <__sflush_r+0x42>
 8005256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005258:	1ac0      	subs	r0, r0, r3
 800525a:	2300      	movs	r3, #0
 800525c:	4602      	mov	r2, r0
 800525e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005260:	4628      	mov	r0, r5
 8005262:	6a21      	ldr	r1, [r4, #32]
 8005264:	47b0      	blx	r6
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	d106      	bne.n	800527a <__sflush_r+0x62>
 800526c:	6829      	ldr	r1, [r5, #0]
 800526e:	291d      	cmp	r1, #29
 8005270:	d82c      	bhi.n	80052cc <__sflush_r+0xb4>
 8005272:	4a29      	ldr	r2, [pc, #164]	; (8005318 <__sflush_r+0x100>)
 8005274:	40ca      	lsrs	r2, r1
 8005276:	07d6      	lsls	r6, r2, #31
 8005278:	d528      	bpl.n	80052cc <__sflush_r+0xb4>
 800527a:	2200      	movs	r2, #0
 800527c:	6062      	str	r2, [r4, #4]
 800527e:	6922      	ldr	r2, [r4, #16]
 8005280:	04d9      	lsls	r1, r3, #19
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	d504      	bpl.n	8005290 <__sflush_r+0x78>
 8005286:	1c42      	adds	r2, r0, #1
 8005288:	d101      	bne.n	800528e <__sflush_r+0x76>
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	b903      	cbnz	r3, 8005290 <__sflush_r+0x78>
 800528e:	6560      	str	r0, [r4, #84]	; 0x54
 8005290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005292:	602f      	str	r7, [r5, #0]
 8005294:	2900      	cmp	r1, #0
 8005296:	d0cb      	beq.n	8005230 <__sflush_r+0x18>
 8005298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800529c:	4299      	cmp	r1, r3
 800529e:	d002      	beq.n	80052a6 <__sflush_r+0x8e>
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f9ef 	bl	8005684 <_free_r>
 80052a6:	2000      	movs	r0, #0
 80052a8:	6360      	str	r0, [r4, #52]	; 0x34
 80052aa:	e7c2      	b.n	8005232 <__sflush_r+0x1a>
 80052ac:	6a21      	ldr	r1, [r4, #32]
 80052ae:	2301      	movs	r3, #1
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b0      	blx	r6
 80052b4:	1c41      	adds	r1, r0, #1
 80052b6:	d1c7      	bne.n	8005248 <__sflush_r+0x30>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0c4      	beq.n	8005248 <__sflush_r+0x30>
 80052be:	2b1d      	cmp	r3, #29
 80052c0:	d001      	beq.n	80052c6 <__sflush_r+0xae>
 80052c2:	2b16      	cmp	r3, #22
 80052c4:	d101      	bne.n	80052ca <__sflush_r+0xb2>
 80052c6:	602f      	str	r7, [r5, #0]
 80052c8:	e7b2      	b.n	8005230 <__sflush_r+0x18>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	e7ae      	b.n	8005232 <__sflush_r+0x1a>
 80052d4:	690f      	ldr	r7, [r1, #16]
 80052d6:	2f00      	cmp	r7, #0
 80052d8:	d0aa      	beq.n	8005230 <__sflush_r+0x18>
 80052da:	0793      	lsls	r3, r2, #30
 80052dc:	bf18      	it	ne
 80052de:	2300      	movne	r3, #0
 80052e0:	680e      	ldr	r6, [r1, #0]
 80052e2:	bf08      	it	eq
 80052e4:	694b      	ldreq	r3, [r1, #20]
 80052e6:	1bf6      	subs	r6, r6, r7
 80052e8:	600f      	str	r7, [r1, #0]
 80052ea:	608b      	str	r3, [r1, #8]
 80052ec:	2e00      	cmp	r6, #0
 80052ee:	dd9f      	ble.n	8005230 <__sflush_r+0x18>
 80052f0:	4633      	mov	r3, r6
 80052f2:	463a      	mov	r2, r7
 80052f4:	4628      	mov	r0, r5
 80052f6:	6a21      	ldr	r1, [r4, #32]
 80052f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80052fc:	47e0      	blx	ip
 80052fe:	2800      	cmp	r0, #0
 8005300:	dc06      	bgt.n	8005310 <__sflush_r+0xf8>
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	e790      	b.n	8005232 <__sflush_r+0x1a>
 8005310:	4407      	add	r7, r0
 8005312:	1a36      	subs	r6, r6, r0
 8005314:	e7ea      	b.n	80052ec <__sflush_r+0xd4>
 8005316:	bf00      	nop
 8005318:	20400001 	.word	0x20400001

0800531c <_fflush_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	690b      	ldr	r3, [r1, #16]
 8005320:	4605      	mov	r5, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b913      	cbnz	r3, 800532c <_fflush_r+0x10>
 8005326:	2500      	movs	r5, #0
 8005328:	4628      	mov	r0, r5
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	b118      	cbz	r0, 8005336 <_fflush_r+0x1a>
 800532e:	6983      	ldr	r3, [r0, #24]
 8005330:	b90b      	cbnz	r3, 8005336 <_fflush_r+0x1a>
 8005332:	f000 f887 	bl	8005444 <__sinit>
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <_fflush_r+0x6c>)
 8005338:	429c      	cmp	r4, r3
 800533a:	d11b      	bne.n	8005374 <_fflush_r+0x58>
 800533c:	686c      	ldr	r4, [r5, #4]
 800533e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ef      	beq.n	8005326 <_fflush_r+0xa>
 8005346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005348:	07d0      	lsls	r0, r2, #31
 800534a:	d404      	bmi.n	8005356 <_fflush_r+0x3a>
 800534c:	0599      	lsls	r1, r3, #22
 800534e:	d402      	bmi.n	8005356 <_fflush_r+0x3a>
 8005350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005352:	f000 f927 	bl	80055a4 <__retarget_lock_acquire_recursive>
 8005356:	4628      	mov	r0, r5
 8005358:	4621      	mov	r1, r4
 800535a:	f7ff ff5d 	bl	8005218 <__sflush_r>
 800535e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005360:	4605      	mov	r5, r0
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d4e0      	bmi.n	8005328 <_fflush_r+0xc>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	059b      	lsls	r3, r3, #22
 800536a:	d4dd      	bmi.n	8005328 <_fflush_r+0xc>
 800536c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536e:	f000 f91a 	bl	80055a6 <__retarget_lock_release_recursive>
 8005372:	e7d9      	b.n	8005328 <_fflush_r+0xc>
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <_fflush_r+0x70>)
 8005376:	429c      	cmp	r4, r3
 8005378:	d101      	bne.n	800537e <_fflush_r+0x62>
 800537a:	68ac      	ldr	r4, [r5, #8]
 800537c:	e7df      	b.n	800533e <_fflush_r+0x22>
 800537e:	4b04      	ldr	r3, [pc, #16]	; (8005390 <_fflush_r+0x74>)
 8005380:	429c      	cmp	r4, r3
 8005382:	bf08      	it	eq
 8005384:	68ec      	ldreq	r4, [r5, #12]
 8005386:	e7da      	b.n	800533e <_fflush_r+0x22>
 8005388:	08006328 	.word	0x08006328
 800538c:	08006348 	.word	0x08006348
 8005390:	08006308 	.word	0x08006308

08005394 <std>:
 8005394:	2300      	movs	r3, #0
 8005396:	b510      	push	{r4, lr}
 8005398:	4604      	mov	r4, r0
 800539a:	e9c0 3300 	strd	r3, r3, [r0]
 800539e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053a2:	6083      	str	r3, [r0, #8]
 80053a4:	8181      	strh	r1, [r0, #12]
 80053a6:	6643      	str	r3, [r0, #100]	; 0x64
 80053a8:	81c2      	strh	r2, [r0, #14]
 80053aa:	6183      	str	r3, [r0, #24]
 80053ac:	4619      	mov	r1, r3
 80053ae:	2208      	movs	r2, #8
 80053b0:	305c      	adds	r0, #92	; 0x5c
 80053b2:	f7ff fd51 	bl	8004e58 <memset>
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <std+0x38>)
 80053b8:	6224      	str	r4, [r4, #32]
 80053ba:	6263      	str	r3, [r4, #36]	; 0x24
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <std+0x3c>)
 80053be:	62a3      	str	r3, [r4, #40]	; 0x28
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <std+0x40>)
 80053c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <std+0x44>)
 80053c6:	6323      	str	r3, [r4, #48]	; 0x30
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	08005e39 	.word	0x08005e39
 80053d0:	08005e5b 	.word	0x08005e5b
 80053d4:	08005e93 	.word	0x08005e93
 80053d8:	08005eb7 	.word	0x08005eb7

080053dc <_cleanup_r>:
 80053dc:	4901      	ldr	r1, [pc, #4]	; (80053e4 <_cleanup_r+0x8>)
 80053de:	f000 b8c1 	b.w	8005564 <_fwalk_reent>
 80053e2:	bf00      	nop
 80053e4:	0800531d 	.word	0x0800531d

080053e8 <__sfmoreglue>:
 80053e8:	2268      	movs	r2, #104	; 0x68
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	1e4d      	subs	r5, r1, #1
 80053ee:	4355      	muls	r5, r2
 80053f0:	460e      	mov	r6, r1
 80053f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053f6:	f000 f9ad 	bl	8005754 <_malloc_r>
 80053fa:	4604      	mov	r4, r0
 80053fc:	b140      	cbz	r0, 8005410 <__sfmoreglue+0x28>
 80053fe:	2100      	movs	r1, #0
 8005400:	e9c0 1600 	strd	r1, r6, [r0]
 8005404:	300c      	adds	r0, #12
 8005406:	60a0      	str	r0, [r4, #8]
 8005408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800540c:	f7ff fd24 	bl	8004e58 <memset>
 8005410:	4620      	mov	r0, r4
 8005412:	bd70      	pop	{r4, r5, r6, pc}

08005414 <__sfp_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	; (800541c <__sfp_lock_acquire+0x8>)
 8005416:	f000 b8c5 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	20000719 	.word	0x20000719

08005420 <__sfp_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__sfp_lock_release+0x8>)
 8005422:	f000 b8c0 	b.w	80055a6 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	20000719 	.word	0x20000719

0800542c <__sinit_lock_acquire>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__sinit_lock_acquire+0x8>)
 800542e:	f000 b8b9 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 8005432:	bf00      	nop
 8005434:	2000071a 	.word	0x2000071a

08005438 <__sinit_lock_release>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__sinit_lock_release+0x8>)
 800543a:	f000 b8b4 	b.w	80055a6 <__retarget_lock_release_recursive>
 800543e:	bf00      	nop
 8005440:	2000071a 	.word	0x2000071a

08005444 <__sinit>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	f7ff fff0 	bl	800542c <__sinit_lock_acquire>
 800544c:	69a3      	ldr	r3, [r4, #24]
 800544e:	b11b      	cbz	r3, 8005458 <__sinit+0x14>
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005454:	f7ff bff0 	b.w	8005438 <__sinit_lock_release>
 8005458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800545c:	6523      	str	r3, [r4, #80]	; 0x50
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <__sinit+0x68>)
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <__sinit+0x6c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	62a2      	str	r2, [r4, #40]	; 0x28
 8005466:	42a3      	cmp	r3, r4
 8005468:	bf08      	it	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	4620      	mov	r0, r4
 800546e:	bf08      	it	eq
 8005470:	61a3      	streq	r3, [r4, #24]
 8005472:	f000 f81f 	bl	80054b4 <__sfp>
 8005476:	6060      	str	r0, [r4, #4]
 8005478:	4620      	mov	r0, r4
 800547a:	f000 f81b 	bl	80054b4 <__sfp>
 800547e:	60a0      	str	r0, [r4, #8]
 8005480:	4620      	mov	r0, r4
 8005482:	f000 f817 	bl	80054b4 <__sfp>
 8005486:	2200      	movs	r2, #0
 8005488:	2104      	movs	r1, #4
 800548a:	60e0      	str	r0, [r4, #12]
 800548c:	6860      	ldr	r0, [r4, #4]
 800548e:	f7ff ff81 	bl	8005394 <std>
 8005492:	2201      	movs	r2, #1
 8005494:	2109      	movs	r1, #9
 8005496:	68a0      	ldr	r0, [r4, #8]
 8005498:	f7ff ff7c 	bl	8005394 <std>
 800549c:	2202      	movs	r2, #2
 800549e:	2112      	movs	r1, #18
 80054a0:	68e0      	ldr	r0, [r4, #12]
 80054a2:	f7ff ff77 	bl	8005394 <std>
 80054a6:	2301      	movs	r3, #1
 80054a8:	61a3      	str	r3, [r4, #24]
 80054aa:	e7d1      	b.n	8005450 <__sinit+0xc>
 80054ac:	08006150 	.word	0x08006150
 80054b0:	080053dd 	.word	0x080053dd

080054b4 <__sfp>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	4607      	mov	r7, r0
 80054b8:	f7ff ffac 	bl	8005414 <__sfp_lock_acquire>
 80054bc:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <__sfp+0x84>)
 80054be:	681e      	ldr	r6, [r3, #0]
 80054c0:	69b3      	ldr	r3, [r6, #24]
 80054c2:	b913      	cbnz	r3, 80054ca <__sfp+0x16>
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7ff ffbd 	bl	8005444 <__sinit>
 80054ca:	3648      	adds	r6, #72	; 0x48
 80054cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	d503      	bpl.n	80054dc <__sfp+0x28>
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	b30b      	cbz	r3, 800551c <__sfp+0x68>
 80054d8:	6836      	ldr	r6, [r6, #0]
 80054da:	e7f7      	b.n	80054cc <__sfp+0x18>
 80054dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054e0:	b9d5      	cbnz	r5, 8005518 <__sfp+0x64>
 80054e2:	4b16      	ldr	r3, [pc, #88]	; (800553c <__sfp+0x88>)
 80054e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054e8:	60e3      	str	r3, [r4, #12]
 80054ea:	6665      	str	r5, [r4, #100]	; 0x64
 80054ec:	f000 f859 	bl	80055a2 <__retarget_lock_init_recursive>
 80054f0:	f7ff ff96 	bl	8005420 <__sfp_lock_release>
 80054f4:	2208      	movs	r2, #8
 80054f6:	4629      	mov	r1, r5
 80054f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005500:	6025      	str	r5, [r4, #0]
 8005502:	61a5      	str	r5, [r4, #24]
 8005504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005508:	f7ff fca6 	bl	8004e58 <memset>
 800550c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005514:	4620      	mov	r0, r4
 8005516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005518:	3468      	adds	r4, #104	; 0x68
 800551a:	e7d9      	b.n	80054d0 <__sfp+0x1c>
 800551c:	2104      	movs	r1, #4
 800551e:	4638      	mov	r0, r7
 8005520:	f7ff ff62 	bl	80053e8 <__sfmoreglue>
 8005524:	4604      	mov	r4, r0
 8005526:	6030      	str	r0, [r6, #0]
 8005528:	2800      	cmp	r0, #0
 800552a:	d1d5      	bne.n	80054d8 <__sfp+0x24>
 800552c:	f7ff ff78 	bl	8005420 <__sfp_lock_release>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	e7ee      	b.n	8005514 <__sfp+0x60>
 8005536:	bf00      	nop
 8005538:	08006150 	.word	0x08006150
 800553c:	ffff0001 	.word	0xffff0001

08005540 <fiprintf>:
 8005540:	b40e      	push	{r1, r2, r3}
 8005542:	b503      	push	{r0, r1, lr}
 8005544:	4601      	mov	r1, r0
 8005546:	ab03      	add	r3, sp, #12
 8005548:	4805      	ldr	r0, [pc, #20]	; (8005560 <fiprintf+0x20>)
 800554a:	f853 2b04 	ldr.w	r2, [r3], #4
 800554e:	6800      	ldr	r0, [r0, #0]
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	f000 f99b 	bl	800588c <_vfiprintf_r>
 8005556:	b002      	add	sp, #8
 8005558:	f85d eb04 	ldr.w	lr, [sp], #4
 800555c:	b003      	add	sp, #12
 800555e:	4770      	bx	lr
 8005560:	200002e0 	.word	0x200002e0

08005564 <_fwalk_reent>:
 8005564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005568:	4606      	mov	r6, r0
 800556a:	4688      	mov	r8, r1
 800556c:	2700      	movs	r7, #0
 800556e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005576:	f1b9 0901 	subs.w	r9, r9, #1
 800557a:	d505      	bpl.n	8005588 <_fwalk_reent+0x24>
 800557c:	6824      	ldr	r4, [r4, #0]
 800557e:	2c00      	cmp	r4, #0
 8005580:	d1f7      	bne.n	8005572 <_fwalk_reent+0xe>
 8005582:	4638      	mov	r0, r7
 8005584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005588:	89ab      	ldrh	r3, [r5, #12]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d907      	bls.n	800559e <_fwalk_reent+0x3a>
 800558e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005592:	3301      	adds	r3, #1
 8005594:	d003      	beq.n	800559e <_fwalk_reent+0x3a>
 8005596:	4629      	mov	r1, r5
 8005598:	4630      	mov	r0, r6
 800559a:	47c0      	blx	r8
 800559c:	4307      	orrs	r7, r0
 800559e:	3568      	adds	r5, #104	; 0x68
 80055a0:	e7e9      	b.n	8005576 <_fwalk_reent+0x12>

080055a2 <__retarget_lock_init_recursive>:
 80055a2:	4770      	bx	lr

080055a4 <__retarget_lock_acquire_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_release_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <__swhatbuf_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	460e      	mov	r6, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	4614      	mov	r4, r2
 80055b2:	2900      	cmp	r1, #0
 80055b4:	461d      	mov	r5, r3
 80055b6:	b096      	sub	sp, #88	; 0x58
 80055b8:	da08      	bge.n	80055cc <__swhatbuf_r+0x24>
 80055ba:	2200      	movs	r2, #0
 80055bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055c0:	602a      	str	r2, [r5, #0]
 80055c2:	061a      	lsls	r2, r3, #24
 80055c4:	d410      	bmi.n	80055e8 <__swhatbuf_r+0x40>
 80055c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ca:	e00e      	b.n	80055ea <__swhatbuf_r+0x42>
 80055cc:	466a      	mov	r2, sp
 80055ce:	f000 fca1 	bl	8005f14 <_fstat_r>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	dbf1      	blt.n	80055ba <__swhatbuf_r+0x12>
 80055d6:	9a01      	ldr	r2, [sp, #4]
 80055d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055e0:	425a      	negs	r2, r3
 80055e2:	415a      	adcs	r2, r3
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	e7ee      	b.n	80055c6 <__swhatbuf_r+0x1e>
 80055e8:	2340      	movs	r3, #64	; 0x40
 80055ea:	2000      	movs	r0, #0
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	b016      	add	sp, #88	; 0x58
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080055f4 <__smakebuf_r>:
 80055f4:	898b      	ldrh	r3, [r1, #12]
 80055f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055f8:	079d      	lsls	r5, r3, #30
 80055fa:	4606      	mov	r6, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	d507      	bpl.n	8005610 <__smakebuf_r+0x1c>
 8005600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	2301      	movs	r3, #1
 800560a:	6163      	str	r3, [r4, #20]
 800560c:	b002      	add	sp, #8
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	466a      	mov	r2, sp
 8005612:	ab01      	add	r3, sp, #4
 8005614:	f7ff ffc8 	bl	80055a8 <__swhatbuf_r>
 8005618:	9900      	ldr	r1, [sp, #0]
 800561a:	4605      	mov	r5, r0
 800561c:	4630      	mov	r0, r6
 800561e:	f000 f899 	bl	8005754 <_malloc_r>
 8005622:	b948      	cbnz	r0, 8005638 <__smakebuf_r+0x44>
 8005624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005628:	059a      	lsls	r2, r3, #22
 800562a:	d4ef      	bmi.n	800560c <__smakebuf_r+0x18>
 800562c:	f023 0303 	bic.w	r3, r3, #3
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	e7e3      	b.n	8005600 <__smakebuf_r+0xc>
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <__smakebuf_r+0x7c>)
 800563a:	62b3      	str	r3, [r6, #40]	; 0x28
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	6020      	str	r0, [r4, #0]
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	9b00      	ldr	r3, [sp, #0]
 8005648:	6120      	str	r0, [r4, #16]
 800564a:	6163      	str	r3, [r4, #20]
 800564c:	9b01      	ldr	r3, [sp, #4]
 800564e:	b15b      	cbz	r3, 8005668 <__smakebuf_r+0x74>
 8005650:	4630      	mov	r0, r6
 8005652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005656:	f000 fc6f 	bl	8005f38 <_isatty_r>
 800565a:	b128      	cbz	r0, 8005668 <__smakebuf_r+0x74>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	89a0      	ldrh	r0, [r4, #12]
 800566a:	4305      	orrs	r5, r0
 800566c:	81a5      	strh	r5, [r4, #12]
 800566e:	e7cd      	b.n	800560c <__smakebuf_r+0x18>
 8005670:	080053dd 	.word	0x080053dd

08005674 <malloc>:
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <malloc+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f000 b86b 	b.w	8005754 <_malloc_r>
 800567e:	bf00      	nop
 8005680:	200002e0 	.word	0x200002e0

08005684 <_free_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4605      	mov	r5, r0
 8005688:	2900      	cmp	r1, #0
 800568a:	d040      	beq.n	800570e <_free_r+0x8a>
 800568c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005690:	1f0c      	subs	r4, r1, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	bfb8      	it	lt
 8005696:	18e4      	addlt	r4, r4, r3
 8005698:	f000 fc7e 	bl	8005f98 <__malloc_lock>
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <_free_r+0x8c>)
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	b933      	cbnz	r3, 80056b0 <_free_r+0x2c>
 80056a2:	6063      	str	r3, [r4, #4]
 80056a4:	6014      	str	r4, [r2, #0]
 80056a6:	4628      	mov	r0, r5
 80056a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ac:	f000 bc7a 	b.w	8005fa4 <__malloc_unlock>
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	d908      	bls.n	80056c6 <_free_r+0x42>
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	1821      	adds	r1, r4, r0
 80056b8:	428b      	cmp	r3, r1
 80056ba:	bf01      	itttt	eq
 80056bc:	6819      	ldreq	r1, [r3, #0]
 80056be:	685b      	ldreq	r3, [r3, #4]
 80056c0:	1809      	addeq	r1, r1, r0
 80056c2:	6021      	streq	r1, [r4, #0]
 80056c4:	e7ed      	b.n	80056a2 <_free_r+0x1e>
 80056c6:	461a      	mov	r2, r3
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b10b      	cbz	r3, 80056d0 <_free_r+0x4c>
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d9fa      	bls.n	80056c6 <_free_r+0x42>
 80056d0:	6811      	ldr	r1, [r2, #0]
 80056d2:	1850      	adds	r0, r2, r1
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d10b      	bne.n	80056f0 <_free_r+0x6c>
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	4401      	add	r1, r0
 80056dc:	1850      	adds	r0, r2, r1
 80056de:	4283      	cmp	r3, r0
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	d1e0      	bne.n	80056a6 <_free_r+0x22>
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4401      	add	r1, r0
 80056ea:	6011      	str	r1, [r2, #0]
 80056ec:	6053      	str	r3, [r2, #4]
 80056ee:	e7da      	b.n	80056a6 <_free_r+0x22>
 80056f0:	d902      	bls.n	80056f8 <_free_r+0x74>
 80056f2:	230c      	movs	r3, #12
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	e7d6      	b.n	80056a6 <_free_r+0x22>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	1821      	adds	r1, r4, r0
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf01      	itttt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	1809      	addeq	r1, r1, r0
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	6054      	str	r4, [r2, #4]
 800570c:	e7cb      	b.n	80056a6 <_free_r+0x22>
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	2000071c 	.word	0x2000071c

08005714 <sbrk_aligned>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4e0e      	ldr	r6, [pc, #56]	; (8005750 <sbrk_aligned+0x3c>)
 8005718:	460c      	mov	r4, r1
 800571a:	6831      	ldr	r1, [r6, #0]
 800571c:	4605      	mov	r5, r0
 800571e:	b911      	cbnz	r1, 8005726 <sbrk_aligned+0x12>
 8005720:	f000 fb7a 	bl	8005e18 <_sbrk_r>
 8005724:	6030      	str	r0, [r6, #0]
 8005726:	4621      	mov	r1, r4
 8005728:	4628      	mov	r0, r5
 800572a:	f000 fb75 	bl	8005e18 <_sbrk_r>
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	d00a      	beq.n	8005748 <sbrk_aligned+0x34>
 8005732:	1cc4      	adds	r4, r0, #3
 8005734:	f024 0403 	bic.w	r4, r4, #3
 8005738:	42a0      	cmp	r0, r4
 800573a:	d007      	beq.n	800574c <sbrk_aligned+0x38>
 800573c:	1a21      	subs	r1, r4, r0
 800573e:	4628      	mov	r0, r5
 8005740:	f000 fb6a 	bl	8005e18 <_sbrk_r>
 8005744:	3001      	adds	r0, #1
 8005746:	d101      	bne.n	800574c <sbrk_aligned+0x38>
 8005748:	f04f 34ff 	mov.w	r4, #4294967295
 800574c:	4620      	mov	r0, r4
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	20000720 	.word	0x20000720

08005754 <_malloc_r>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	1ccd      	adds	r5, r1, #3
 800575a:	f025 0503 	bic.w	r5, r5, #3
 800575e:	3508      	adds	r5, #8
 8005760:	2d0c      	cmp	r5, #12
 8005762:	bf38      	it	cc
 8005764:	250c      	movcc	r5, #12
 8005766:	2d00      	cmp	r5, #0
 8005768:	4607      	mov	r7, r0
 800576a:	db01      	blt.n	8005770 <_malloc_r+0x1c>
 800576c:	42a9      	cmp	r1, r5
 800576e:	d905      	bls.n	800577c <_malloc_r+0x28>
 8005770:	230c      	movs	r3, #12
 8005772:	2600      	movs	r6, #0
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4630      	mov	r0, r6
 8005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800577c:	4e2e      	ldr	r6, [pc, #184]	; (8005838 <_malloc_r+0xe4>)
 800577e:	f000 fc0b 	bl	8005f98 <__malloc_lock>
 8005782:	6833      	ldr	r3, [r6, #0]
 8005784:	461c      	mov	r4, r3
 8005786:	bb34      	cbnz	r4, 80057d6 <_malloc_r+0x82>
 8005788:	4629      	mov	r1, r5
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff ffc2 	bl	8005714 <sbrk_aligned>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	4604      	mov	r4, r0
 8005794:	d14d      	bne.n	8005832 <_malloc_r+0xde>
 8005796:	6834      	ldr	r4, [r6, #0]
 8005798:	4626      	mov	r6, r4
 800579a:	2e00      	cmp	r6, #0
 800579c:	d140      	bne.n	8005820 <_malloc_r+0xcc>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	4631      	mov	r1, r6
 80057a2:	4638      	mov	r0, r7
 80057a4:	eb04 0803 	add.w	r8, r4, r3
 80057a8:	f000 fb36 	bl	8005e18 <_sbrk_r>
 80057ac:	4580      	cmp	r8, r0
 80057ae:	d13a      	bne.n	8005826 <_malloc_r+0xd2>
 80057b0:	6821      	ldr	r1, [r4, #0]
 80057b2:	3503      	adds	r5, #3
 80057b4:	1a6d      	subs	r5, r5, r1
 80057b6:	f025 0503 	bic.w	r5, r5, #3
 80057ba:	3508      	adds	r5, #8
 80057bc:	2d0c      	cmp	r5, #12
 80057be:	bf38      	it	cc
 80057c0:	250c      	movcc	r5, #12
 80057c2:	4638      	mov	r0, r7
 80057c4:	4629      	mov	r1, r5
 80057c6:	f7ff ffa5 	bl	8005714 <sbrk_aligned>
 80057ca:	3001      	adds	r0, #1
 80057cc:	d02b      	beq.n	8005826 <_malloc_r+0xd2>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	442b      	add	r3, r5
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	e00e      	b.n	80057f4 <_malloc_r+0xa0>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	1b52      	subs	r2, r2, r5
 80057da:	d41e      	bmi.n	800581a <_malloc_r+0xc6>
 80057dc:	2a0b      	cmp	r2, #11
 80057de:	d916      	bls.n	800580e <_malloc_r+0xba>
 80057e0:	1961      	adds	r1, r4, r5
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	6025      	str	r5, [r4, #0]
 80057e6:	bf18      	it	ne
 80057e8:	6059      	strne	r1, [r3, #4]
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	bf08      	it	eq
 80057ee:	6031      	streq	r1, [r6, #0]
 80057f0:	5162      	str	r2, [r4, r5]
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	4638      	mov	r0, r7
 80057f6:	f104 060b 	add.w	r6, r4, #11
 80057fa:	f000 fbd3 	bl	8005fa4 <__malloc_unlock>
 80057fe:	f026 0607 	bic.w	r6, r6, #7
 8005802:	1d23      	adds	r3, r4, #4
 8005804:	1af2      	subs	r2, r6, r3
 8005806:	d0b6      	beq.n	8005776 <_malloc_r+0x22>
 8005808:	1b9b      	subs	r3, r3, r6
 800580a:	50a3      	str	r3, [r4, r2]
 800580c:	e7b3      	b.n	8005776 <_malloc_r+0x22>
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	42a3      	cmp	r3, r4
 8005812:	bf0c      	ite	eq
 8005814:	6032      	streq	r2, [r6, #0]
 8005816:	605a      	strne	r2, [r3, #4]
 8005818:	e7ec      	b.n	80057f4 <_malloc_r+0xa0>
 800581a:	4623      	mov	r3, r4
 800581c:	6864      	ldr	r4, [r4, #4]
 800581e:	e7b2      	b.n	8005786 <_malloc_r+0x32>
 8005820:	4634      	mov	r4, r6
 8005822:	6876      	ldr	r6, [r6, #4]
 8005824:	e7b9      	b.n	800579a <_malloc_r+0x46>
 8005826:	230c      	movs	r3, #12
 8005828:	4638      	mov	r0, r7
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	f000 fbba 	bl	8005fa4 <__malloc_unlock>
 8005830:	e7a1      	b.n	8005776 <_malloc_r+0x22>
 8005832:	6025      	str	r5, [r4, #0]
 8005834:	e7de      	b.n	80057f4 <_malloc_r+0xa0>
 8005836:	bf00      	nop
 8005838:	2000071c 	.word	0x2000071c

0800583c <__sfputc_r>:
 800583c:	6893      	ldr	r3, [r2, #8]
 800583e:	b410      	push	{r4}
 8005840:	3b01      	subs	r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	6093      	str	r3, [r2, #8]
 8005846:	da07      	bge.n	8005858 <__sfputc_r+0x1c>
 8005848:	6994      	ldr	r4, [r2, #24]
 800584a:	42a3      	cmp	r3, r4
 800584c:	db01      	blt.n	8005852 <__sfputc_r+0x16>
 800584e:	290a      	cmp	r1, #10
 8005850:	d102      	bne.n	8005858 <__sfputc_r+0x1c>
 8005852:	bc10      	pop	{r4}
 8005854:	f7ff bc02 	b.w	800505c <__swbuf_r>
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	1c58      	adds	r0, r3, #1
 800585c:	6010      	str	r0, [r2, #0]
 800585e:	7019      	strb	r1, [r3, #0]
 8005860:	4608      	mov	r0, r1
 8005862:	bc10      	pop	{r4}
 8005864:	4770      	bx	lr

08005866 <__sfputs_r>:
 8005866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	4614      	mov	r4, r2
 800586e:	18d5      	adds	r5, r2, r3
 8005870:	42ac      	cmp	r4, r5
 8005872:	d101      	bne.n	8005878 <__sfputs_r+0x12>
 8005874:	2000      	movs	r0, #0
 8005876:	e007      	b.n	8005888 <__sfputs_r+0x22>
 8005878:	463a      	mov	r2, r7
 800587a:	4630      	mov	r0, r6
 800587c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005880:	f7ff ffdc 	bl	800583c <__sfputc_r>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d1f3      	bne.n	8005870 <__sfputs_r+0xa>
 8005888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800588c <_vfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	460d      	mov	r5, r1
 8005892:	4614      	mov	r4, r2
 8005894:	4698      	mov	r8, r3
 8005896:	4606      	mov	r6, r0
 8005898:	b09d      	sub	sp, #116	; 0x74
 800589a:	b118      	cbz	r0, 80058a4 <_vfiprintf_r+0x18>
 800589c:	6983      	ldr	r3, [r0, #24]
 800589e:	b90b      	cbnz	r3, 80058a4 <_vfiprintf_r+0x18>
 80058a0:	f7ff fdd0 	bl	8005444 <__sinit>
 80058a4:	4b89      	ldr	r3, [pc, #548]	; (8005acc <_vfiprintf_r+0x240>)
 80058a6:	429d      	cmp	r5, r3
 80058a8:	d11b      	bne.n	80058e2 <_vfiprintf_r+0x56>
 80058aa:	6875      	ldr	r5, [r6, #4]
 80058ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ae:	07d9      	lsls	r1, r3, #31
 80058b0:	d405      	bmi.n	80058be <_vfiprintf_r+0x32>
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	059a      	lsls	r2, r3, #22
 80058b6:	d402      	bmi.n	80058be <_vfiprintf_r+0x32>
 80058b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ba:	f7ff fe73 	bl	80055a4 <__retarget_lock_acquire_recursive>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	071b      	lsls	r3, r3, #28
 80058c2:	d501      	bpl.n	80058c8 <_vfiprintf_r+0x3c>
 80058c4:	692b      	ldr	r3, [r5, #16]
 80058c6:	b9eb      	cbnz	r3, 8005904 <_vfiprintf_r+0x78>
 80058c8:	4629      	mov	r1, r5
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7ff fc18 	bl	8005100 <__swsetup_r>
 80058d0:	b1c0      	cbz	r0, 8005904 <_vfiprintf_r+0x78>
 80058d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d4:	07dc      	lsls	r4, r3, #31
 80058d6:	d50e      	bpl.n	80058f6 <_vfiprintf_r+0x6a>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	b01d      	add	sp, #116	; 0x74
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <_vfiprintf_r+0x244>)
 80058e4:	429d      	cmp	r5, r3
 80058e6:	d101      	bne.n	80058ec <_vfiprintf_r+0x60>
 80058e8:	68b5      	ldr	r5, [r6, #8]
 80058ea:	e7df      	b.n	80058ac <_vfiprintf_r+0x20>
 80058ec:	4b79      	ldr	r3, [pc, #484]	; (8005ad4 <_vfiprintf_r+0x248>)
 80058ee:	429d      	cmp	r5, r3
 80058f0:	bf08      	it	eq
 80058f2:	68f5      	ldreq	r5, [r6, #12]
 80058f4:	e7da      	b.n	80058ac <_vfiprintf_r+0x20>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	0598      	lsls	r0, r3, #22
 80058fa:	d4ed      	bmi.n	80058d8 <_vfiprintf_r+0x4c>
 80058fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fe:	f7ff fe52 	bl	80055a6 <__retarget_lock_release_recursive>
 8005902:	e7e9      	b.n	80058d8 <_vfiprintf_r+0x4c>
 8005904:	2300      	movs	r3, #0
 8005906:	9309      	str	r3, [sp, #36]	; 0x24
 8005908:	2320      	movs	r3, #32
 800590a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800590e:	2330      	movs	r3, #48	; 0x30
 8005910:	f04f 0901 	mov.w	r9, #1
 8005914:	f8cd 800c 	str.w	r8, [sp, #12]
 8005918:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ad8 <_vfiprintf_r+0x24c>
 800591c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005920:	4623      	mov	r3, r4
 8005922:	469a      	mov	sl, r3
 8005924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005928:	b10a      	cbz	r2, 800592e <_vfiprintf_r+0xa2>
 800592a:	2a25      	cmp	r2, #37	; 0x25
 800592c:	d1f9      	bne.n	8005922 <_vfiprintf_r+0x96>
 800592e:	ebba 0b04 	subs.w	fp, sl, r4
 8005932:	d00b      	beq.n	800594c <_vfiprintf_r+0xc0>
 8005934:	465b      	mov	r3, fp
 8005936:	4622      	mov	r2, r4
 8005938:	4629      	mov	r1, r5
 800593a:	4630      	mov	r0, r6
 800593c:	f7ff ff93 	bl	8005866 <__sfputs_r>
 8005940:	3001      	adds	r0, #1
 8005942:	f000 80aa 	beq.w	8005a9a <_vfiprintf_r+0x20e>
 8005946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005948:	445a      	add	r2, fp
 800594a:	9209      	str	r2, [sp, #36]	; 0x24
 800594c:	f89a 3000 	ldrb.w	r3, [sl]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80a2 	beq.w	8005a9a <_vfiprintf_r+0x20e>
 8005956:	2300      	movs	r3, #0
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005960:	f10a 0a01 	add.w	sl, sl, #1
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	9307      	str	r3, [sp, #28]
 8005968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800596c:	931a      	str	r3, [sp, #104]	; 0x68
 800596e:	4654      	mov	r4, sl
 8005970:	2205      	movs	r2, #5
 8005972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005976:	4858      	ldr	r0, [pc, #352]	; (8005ad8 <_vfiprintf_r+0x24c>)
 8005978:	f000 fb00 	bl	8005f7c <memchr>
 800597c:	9a04      	ldr	r2, [sp, #16]
 800597e:	b9d8      	cbnz	r0, 80059b8 <_vfiprintf_r+0x12c>
 8005980:	06d1      	lsls	r1, r2, #27
 8005982:	bf44      	itt	mi
 8005984:	2320      	movmi	r3, #32
 8005986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800598a:	0713      	lsls	r3, r2, #28
 800598c:	bf44      	itt	mi
 800598e:	232b      	movmi	r3, #43	; 0x2b
 8005990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005994:	f89a 3000 	ldrb.w	r3, [sl]
 8005998:	2b2a      	cmp	r3, #42	; 0x2a
 800599a:	d015      	beq.n	80059c8 <_vfiprintf_r+0x13c>
 800599c:	4654      	mov	r4, sl
 800599e:	2000      	movs	r0, #0
 80059a0:	f04f 0c0a 	mov.w	ip, #10
 80059a4:	9a07      	ldr	r2, [sp, #28]
 80059a6:	4621      	mov	r1, r4
 80059a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ac:	3b30      	subs	r3, #48	; 0x30
 80059ae:	2b09      	cmp	r3, #9
 80059b0:	d94e      	bls.n	8005a50 <_vfiprintf_r+0x1c4>
 80059b2:	b1b0      	cbz	r0, 80059e2 <_vfiprintf_r+0x156>
 80059b4:	9207      	str	r2, [sp, #28]
 80059b6:	e014      	b.n	80059e2 <_vfiprintf_r+0x156>
 80059b8:	eba0 0308 	sub.w	r3, r0, r8
 80059bc:	fa09 f303 	lsl.w	r3, r9, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	46a2      	mov	sl, r4
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	e7d2      	b.n	800596e <_vfiprintf_r+0xe2>
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	1d19      	adds	r1, r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	9103      	str	r1, [sp, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bfbb      	ittet	lt
 80059d4:	425b      	neglt	r3, r3
 80059d6:	f042 0202 	orrlt.w	r2, r2, #2
 80059da:	9307      	strge	r3, [sp, #28]
 80059dc:	9307      	strlt	r3, [sp, #28]
 80059de:	bfb8      	it	lt
 80059e0:	9204      	strlt	r2, [sp, #16]
 80059e2:	7823      	ldrb	r3, [r4, #0]
 80059e4:	2b2e      	cmp	r3, #46	; 0x2e
 80059e6:	d10c      	bne.n	8005a02 <_vfiprintf_r+0x176>
 80059e8:	7863      	ldrb	r3, [r4, #1]
 80059ea:	2b2a      	cmp	r3, #42	; 0x2a
 80059ec:	d135      	bne.n	8005a5a <_vfiprintf_r+0x1ce>
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	3402      	adds	r4, #2
 80059f2:	1d1a      	adds	r2, r3, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	9203      	str	r2, [sp, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfb8      	it	lt
 80059fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a00:	9305      	str	r3, [sp, #20]
 8005a02:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005adc <_vfiprintf_r+0x250>
 8005a06:	2203      	movs	r2, #3
 8005a08:	4650      	mov	r0, sl
 8005a0a:	7821      	ldrb	r1, [r4, #0]
 8005a0c:	f000 fab6 	bl	8005f7c <memchr>
 8005a10:	b140      	cbz	r0, 8005a24 <_vfiprintf_r+0x198>
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	eba0 000a 	sub.w	r0, r0, sl
 8005a18:	fa03 f000 	lsl.w	r0, r3, r0
 8005a1c:	9b04      	ldr	r3, [sp, #16]
 8005a1e:	3401      	adds	r4, #1
 8005a20:	4303      	orrs	r3, r0
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a28:	2206      	movs	r2, #6
 8005a2a:	482d      	ldr	r0, [pc, #180]	; (8005ae0 <_vfiprintf_r+0x254>)
 8005a2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a30:	f000 faa4 	bl	8005f7c <memchr>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d03f      	beq.n	8005ab8 <_vfiprintf_r+0x22c>
 8005a38:	4b2a      	ldr	r3, [pc, #168]	; (8005ae4 <_vfiprintf_r+0x258>)
 8005a3a:	bb1b      	cbnz	r3, 8005a84 <_vfiprintf_r+0x1f8>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	3307      	adds	r3, #7
 8005a40:	f023 0307 	bic.w	r3, r3, #7
 8005a44:	3308      	adds	r3, #8
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4a:	443b      	add	r3, r7
 8005a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4e:	e767      	b.n	8005920 <_vfiprintf_r+0x94>
 8005a50:	460c      	mov	r4, r1
 8005a52:	2001      	movs	r0, #1
 8005a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a58:	e7a5      	b.n	80059a6 <_vfiprintf_r+0x11a>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f04f 0c0a 	mov.w	ip, #10
 8005a60:	4619      	mov	r1, r3
 8005a62:	3401      	adds	r4, #1
 8005a64:	9305      	str	r3, [sp, #20]
 8005a66:	4620      	mov	r0, r4
 8005a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a6c:	3a30      	subs	r2, #48	; 0x30
 8005a6e:	2a09      	cmp	r2, #9
 8005a70:	d903      	bls.n	8005a7a <_vfiprintf_r+0x1ee>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0c5      	beq.n	8005a02 <_vfiprintf_r+0x176>
 8005a76:	9105      	str	r1, [sp, #20]
 8005a78:	e7c3      	b.n	8005a02 <_vfiprintf_r+0x176>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a82:	e7f0      	b.n	8005a66 <_vfiprintf_r+0x1da>
 8005a84:	ab03      	add	r3, sp, #12
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <_vfiprintf_r+0x25c>)
 8005a8e:	a904      	add	r1, sp, #16
 8005a90:	f3af 8000 	nop.w
 8005a94:	4607      	mov	r7, r0
 8005a96:	1c78      	adds	r0, r7, #1
 8005a98:	d1d6      	bne.n	8005a48 <_vfiprintf_r+0x1bc>
 8005a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a9c:	07d9      	lsls	r1, r3, #31
 8005a9e:	d405      	bmi.n	8005aac <_vfiprintf_r+0x220>
 8005aa0:	89ab      	ldrh	r3, [r5, #12]
 8005aa2:	059a      	lsls	r2, r3, #22
 8005aa4:	d402      	bmi.n	8005aac <_vfiprintf_r+0x220>
 8005aa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aa8:	f7ff fd7d 	bl	80055a6 <__retarget_lock_release_recursive>
 8005aac:	89ab      	ldrh	r3, [r5, #12]
 8005aae:	065b      	lsls	r3, r3, #25
 8005ab0:	f53f af12 	bmi.w	80058d8 <_vfiprintf_r+0x4c>
 8005ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ab6:	e711      	b.n	80058dc <_vfiprintf_r+0x50>
 8005ab8:	ab03      	add	r3, sp, #12
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <_vfiprintf_r+0x25c>)
 8005ac2:	a904      	add	r1, sp, #16
 8005ac4:	f000 f882 	bl	8005bcc <_printf_i>
 8005ac8:	e7e4      	b.n	8005a94 <_vfiprintf_r+0x208>
 8005aca:	bf00      	nop
 8005acc:	08006328 	.word	0x08006328
 8005ad0:	08006348 	.word	0x08006348
 8005ad4:	08006308 	.word	0x08006308
 8005ad8:	08006368 	.word	0x08006368
 8005adc:	0800636e 	.word	0x0800636e
 8005ae0:	08006372 	.word	0x08006372
 8005ae4:	00000000 	.word	0x00000000
 8005ae8:	08005867 	.word	0x08005867

08005aec <_printf_common>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	4616      	mov	r6, r2
 8005af2:	4699      	mov	r9, r3
 8005af4:	688a      	ldr	r2, [r1, #8]
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	4607      	mov	r7, r0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfb8      	it	lt
 8005afe:	4613      	movlt	r3, r2
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b06:	460c      	mov	r4, r1
 8005b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b0c:	b10a      	cbz	r2, 8005b12 <_printf_common+0x26>
 8005b0e:	3301      	adds	r3, #1
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	0699      	lsls	r1, r3, #26
 8005b16:	bf42      	ittt	mi
 8005b18:	6833      	ldrmi	r3, [r6, #0]
 8005b1a:	3302      	addmi	r3, #2
 8005b1c:	6033      	strmi	r3, [r6, #0]
 8005b1e:	6825      	ldr	r5, [r4, #0]
 8005b20:	f015 0506 	ands.w	r5, r5, #6
 8005b24:	d106      	bne.n	8005b34 <_printf_common+0x48>
 8005b26:	f104 0a19 	add.w	sl, r4, #25
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	6832      	ldr	r2, [r6, #0]
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	dc28      	bgt.n	8005b86 <_printf_common+0x9a>
 8005b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b38:	1e13      	subs	r3, r2, #0
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	bf18      	it	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	0692      	lsls	r2, r2, #26
 8005b42:	d42d      	bmi.n	8005ba0 <_printf_common+0xb4>
 8005b44:	4649      	mov	r1, r9
 8005b46:	4638      	mov	r0, r7
 8005b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b4c:	47c0      	blx	r8
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d020      	beq.n	8005b94 <_printf_common+0xa8>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	68e5      	ldr	r5, [r4, #12]
 8005b56:	f003 0306 	and.w	r3, r3, #6
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	bf18      	it	ne
 8005b5e:	2500      	movne	r5, #0
 8005b60:	6832      	ldr	r2, [r6, #0]
 8005b62:	f04f 0600 	mov.w	r6, #0
 8005b66:	68a3      	ldr	r3, [r4, #8]
 8005b68:	bf08      	it	eq
 8005b6a:	1aad      	subeq	r5, r5, r2
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	bf08      	it	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bfc4      	itt	gt
 8005b78:	1a9b      	subgt	r3, r3, r2
 8005b7a:	18ed      	addgt	r5, r5, r3
 8005b7c:	341a      	adds	r4, #26
 8005b7e:	42b5      	cmp	r5, r6
 8005b80:	d11a      	bne.n	8005bb8 <_printf_common+0xcc>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e008      	b.n	8005b98 <_printf_common+0xac>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4652      	mov	r2, sl
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	47c0      	blx	r8
 8005b90:	3001      	adds	r0, #1
 8005b92:	d103      	bne.n	8005b9c <_printf_common+0xb0>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	e7c4      	b.n	8005b2a <_printf_common+0x3e>
 8005ba0:	2030      	movs	r0, #48	; 0x30
 8005ba2:	18e1      	adds	r1, r4, r3
 8005ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bae:	4422      	add	r2, r4
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb6:	e7c5      	b.n	8005b44 <_printf_common+0x58>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d0e6      	beq.n	8005b94 <_printf_common+0xa8>
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	e7d9      	b.n	8005b7e <_printf_common+0x92>
	...

08005bcc <_printf_i>:
 8005bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	7e0f      	ldrb	r7, [r1, #24]
 8005bd2:	4691      	mov	r9, r2
 8005bd4:	2f78      	cmp	r7, #120	; 0x78
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	460c      	mov	r4, r1
 8005bda:	469a      	mov	sl, r3
 8005bdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005be2:	d807      	bhi.n	8005bf4 <_printf_i+0x28>
 8005be4:	2f62      	cmp	r7, #98	; 0x62
 8005be6:	d80a      	bhi.n	8005bfe <_printf_i+0x32>
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	f000 80d9 	beq.w	8005da0 <_printf_i+0x1d4>
 8005bee:	2f58      	cmp	r7, #88	; 0x58
 8005bf0:	f000 80a4 	beq.w	8005d3c <_printf_i+0x170>
 8005bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bfc:	e03a      	b.n	8005c74 <_printf_i+0xa8>
 8005bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c02:	2b15      	cmp	r3, #21
 8005c04:	d8f6      	bhi.n	8005bf4 <_printf_i+0x28>
 8005c06:	a101      	add	r1, pc, #4	; (adr r1, 8005c0c <_printf_i+0x40>)
 8005c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c79 	.word	0x08005c79
 8005c14:	08005bf5 	.word	0x08005bf5
 8005c18:	08005bf5 	.word	0x08005bf5
 8005c1c:	08005bf5 	.word	0x08005bf5
 8005c20:	08005bf5 	.word	0x08005bf5
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005bf5 	.word	0x08005bf5
 8005c2c:	08005bf5 	.word	0x08005bf5
 8005c30:	08005bf5 	.word	0x08005bf5
 8005c34:	08005bf5 	.word	0x08005bf5
 8005c38:	08005d87 	.word	0x08005d87
 8005c3c:	08005ca9 	.word	0x08005ca9
 8005c40:	08005d69 	.word	0x08005d69
 8005c44:	08005bf5 	.word	0x08005bf5
 8005c48:	08005bf5 	.word	0x08005bf5
 8005c4c:	08005da9 	.word	0x08005da9
 8005c50:	08005bf5 	.word	0x08005bf5
 8005c54:	08005ca9 	.word	0x08005ca9
 8005c58:	08005bf5 	.word	0x08005bf5
 8005c5c:	08005bf5 	.word	0x08005bf5
 8005c60:	08005d71 	.word	0x08005d71
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0a4      	b.n	8005dc2 <_printf_i+0x1f6>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	6829      	ldr	r1, [r5, #0]
 8005c7c:	0606      	lsls	r6, r0, #24
 8005c7e:	f101 0304 	add.w	r3, r1, #4
 8005c82:	d50a      	bpl.n	8005c9a <_printf_i+0xce>
 8005c84:	680e      	ldr	r6, [r1, #0]
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	2e00      	cmp	r6, #0
 8005c8a:	da03      	bge.n	8005c94 <_printf_i+0xc8>
 8005c8c:	232d      	movs	r3, #45	; 0x2d
 8005c8e:	4276      	negs	r6, r6
 8005c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c94:	230a      	movs	r3, #10
 8005c96:	485e      	ldr	r0, [pc, #376]	; (8005e10 <_printf_i+0x244>)
 8005c98:	e019      	b.n	8005cce <_printf_i+0x102>
 8005c9a:	680e      	ldr	r6, [r1, #0]
 8005c9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	bf18      	it	ne
 8005ca4:	b236      	sxthne	r6, r6
 8005ca6:	e7ef      	b.n	8005c88 <_printf_i+0xbc>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	1d19      	adds	r1, r3, #4
 8005cae:	6029      	str	r1, [r5, #0]
 8005cb0:	0601      	lsls	r1, r0, #24
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_i+0xec>
 8005cb4:	681e      	ldr	r6, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <_printf_i+0xf2>
 8005cb8:	0646      	lsls	r6, r0, #25
 8005cba:	d5fb      	bpl.n	8005cb4 <_printf_i+0xe8>
 8005cbc:	881e      	ldrh	r6, [r3, #0]
 8005cbe:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2308      	moveq	r3, #8
 8005cc4:	230a      	movne	r3, #10
 8005cc6:	4852      	ldr	r0, [pc, #328]	; (8005e10 <_printf_i+0x244>)
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cce:	6865      	ldr	r5, [r4, #4]
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	bfa8      	it	ge
 8005cd4:	6821      	ldrge	r1, [r4, #0]
 8005cd6:	60a5      	str	r5, [r4, #8]
 8005cd8:	bfa4      	itt	ge
 8005cda:	f021 0104 	bicge.w	r1, r1, #4
 8005cde:	6021      	strge	r1, [r4, #0]
 8005ce0:	b90e      	cbnz	r6, 8005ce6 <_printf_i+0x11a>
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	d04d      	beq.n	8005d82 <_printf_i+0x1b6>
 8005ce6:	4615      	mov	r5, r2
 8005ce8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cec:	fb03 6711 	mls	r7, r3, r1, r6
 8005cf0:	5dc7      	ldrb	r7, [r0, r7]
 8005cf2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf6:	4637      	mov	r7, r6
 8005cf8:	42bb      	cmp	r3, r7
 8005cfa:	460e      	mov	r6, r1
 8005cfc:	d9f4      	bls.n	8005ce8 <_printf_i+0x11c>
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d10b      	bne.n	8005d1a <_printf_i+0x14e>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	07de      	lsls	r6, r3, #31
 8005d06:	d508      	bpl.n	8005d1a <_printf_i+0x14e>
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	6861      	ldr	r1, [r4, #4]
 8005d0c:	4299      	cmp	r1, r3
 8005d0e:	bfde      	ittt	le
 8005d10:	2330      	movle	r3, #48	; 0x30
 8005d12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d1a:	1b52      	subs	r2, r2, r5
 8005d1c:	6122      	str	r2, [r4, #16]
 8005d1e:	464b      	mov	r3, r9
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f8cd a000 	str.w	sl, [sp]
 8005d28:	aa03      	add	r2, sp, #12
 8005d2a:	f7ff fedf 	bl	8005aec <_printf_common>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d14c      	bne.n	8005dcc <_printf_i+0x200>
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295
 8005d36:	b004      	add	sp, #16
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	4834      	ldr	r0, [pc, #208]	; (8005e10 <_printf_i+0x244>)
 8005d3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d42:	6829      	ldr	r1, [r5, #0]
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d4a:	6029      	str	r1, [r5, #0]
 8005d4c:	061d      	lsls	r5, r3, #24
 8005d4e:	d514      	bpl.n	8005d7a <_printf_i+0x1ae>
 8005d50:	07df      	lsls	r7, r3, #31
 8005d52:	bf44      	itt	mi
 8005d54:	f043 0320 	orrmi.w	r3, r3, #32
 8005d58:	6023      	strmi	r3, [r4, #0]
 8005d5a:	b91e      	cbnz	r6, 8005d64 <_printf_i+0x198>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	f023 0320 	bic.w	r3, r3, #32
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	2310      	movs	r3, #16
 8005d66:	e7af      	b.n	8005cc8 <_printf_i+0xfc>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	f043 0320 	orr.w	r3, r3, #32
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	2378      	movs	r3, #120	; 0x78
 8005d72:	4828      	ldr	r0, [pc, #160]	; (8005e14 <_printf_i+0x248>)
 8005d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d78:	e7e3      	b.n	8005d42 <_printf_i+0x176>
 8005d7a:	0659      	lsls	r1, r3, #25
 8005d7c:	bf48      	it	mi
 8005d7e:	b2b6      	uxthmi	r6, r6
 8005d80:	e7e6      	b.n	8005d50 <_printf_i+0x184>
 8005d82:	4615      	mov	r5, r2
 8005d84:	e7bb      	b.n	8005cfe <_printf_i+0x132>
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	6826      	ldr	r6, [r4, #0]
 8005d8a:	1d18      	adds	r0, r3, #4
 8005d8c:	6961      	ldr	r1, [r4, #20]
 8005d8e:	6028      	str	r0, [r5, #0]
 8005d90:	0635      	lsls	r5, r6, #24
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	d501      	bpl.n	8005d9a <_printf_i+0x1ce>
 8005d96:	6019      	str	r1, [r3, #0]
 8005d98:	e002      	b.n	8005da0 <_printf_i+0x1d4>
 8005d9a:	0670      	lsls	r0, r6, #25
 8005d9c:	d5fb      	bpl.n	8005d96 <_printf_i+0x1ca>
 8005d9e:	8019      	strh	r1, [r3, #0]
 8005da0:	2300      	movs	r3, #0
 8005da2:	4615      	mov	r5, r2
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	e7ba      	b.n	8005d1e <_printf_i+0x152>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	2100      	movs	r1, #0
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	602a      	str	r2, [r5, #0]
 8005db0:	681d      	ldr	r5, [r3, #0]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f8e1 	bl	8005f7c <memchr>
 8005dba:	b108      	cbz	r0, 8005dc0 <_printf_i+0x1f4>
 8005dbc:	1b40      	subs	r0, r0, r5
 8005dbe:	6060      	str	r0, [r4, #4]
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dca:	e7a8      	b.n	8005d1e <_printf_i+0x152>
 8005dcc:	462a      	mov	r2, r5
 8005dce:	4649      	mov	r1, r9
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	47d0      	blx	sl
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d0ab      	beq.n	8005d32 <_printf_i+0x166>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	079b      	lsls	r3, r3, #30
 8005dde:	d413      	bmi.n	8005e08 <_printf_i+0x23c>
 8005de0:	68e0      	ldr	r0, [r4, #12]
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	4298      	cmp	r0, r3
 8005de6:	bfb8      	it	lt
 8005de8:	4618      	movlt	r0, r3
 8005dea:	e7a4      	b.n	8005d36 <_printf_i+0x16a>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4632      	mov	r2, r6
 8005df0:	4649      	mov	r1, r9
 8005df2:	4640      	mov	r0, r8
 8005df4:	47d0      	blx	sl
 8005df6:	3001      	adds	r0, #1
 8005df8:	d09b      	beq.n	8005d32 <_printf_i+0x166>
 8005dfa:	3501      	adds	r5, #1
 8005dfc:	68e3      	ldr	r3, [r4, #12]
 8005dfe:	9903      	ldr	r1, [sp, #12]
 8005e00:	1a5b      	subs	r3, r3, r1
 8005e02:	42ab      	cmp	r3, r5
 8005e04:	dcf2      	bgt.n	8005dec <_printf_i+0x220>
 8005e06:	e7eb      	b.n	8005de0 <_printf_i+0x214>
 8005e08:	2500      	movs	r5, #0
 8005e0a:	f104 0619 	add.w	r6, r4, #25
 8005e0e:	e7f5      	b.n	8005dfc <_printf_i+0x230>
 8005e10:	08006379 	.word	0x08006379
 8005e14:	0800638a 	.word	0x0800638a

08005e18 <_sbrk_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4d05      	ldr	r5, [pc, #20]	; (8005e34 <_sbrk_r+0x1c>)
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fa ff84 	bl	8000d30 <_sbrk>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_sbrk_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_sbrk_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000724 	.word	0x20000724

08005e38 <__sread>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e40:	f000 f8b6 	bl	8005fb0 <_read_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	bfab      	itete	ge
 8005e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e4c:	181b      	addge	r3, r3, r0
 8005e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e52:	bfac      	ite	ge
 8005e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e56:	81a3      	strhlt	r3, [r4, #12]
 8005e58:	bd10      	pop	{r4, pc}

08005e5a <__swrite>:
 8005e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5e:	461f      	mov	r7, r3
 8005e60:	898b      	ldrh	r3, [r1, #12]
 8005e62:	4605      	mov	r5, r0
 8005e64:	05db      	lsls	r3, r3, #23
 8005e66:	460c      	mov	r4, r1
 8005e68:	4616      	mov	r6, r2
 8005e6a:	d505      	bpl.n	8005e78 <__swrite+0x1e>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e74:	f000 f870 	bl	8005f58 <_lseek_r>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	4628      	mov	r0, r5
 8005e84:	463b      	mov	r3, r7
 8005e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8e:	f000 b817 	b.w	8005ec0 <_write_r>

08005e92 <__sseek>:
 8005e92:	b510      	push	{r4, lr}
 8005e94:	460c      	mov	r4, r1
 8005e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9a:	f000 f85d 	bl	8005f58 <_lseek_r>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	bf15      	itete	ne
 8005ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eae:	81a3      	strheq	r3, [r4, #12]
 8005eb0:	bf18      	it	ne
 8005eb2:	81a3      	strhne	r3, [r4, #12]
 8005eb4:	bd10      	pop	{r4, pc}

08005eb6 <__sclose>:
 8005eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eba:	f000 b81b 	b.w	8005ef4 <_close_r>
	...

08005ec0 <_write_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4d05      	ldr	r5, [pc, #20]	; (8005ee0 <_write_r+0x20>)
 8005ecc:	602a      	str	r2, [r5, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f7fa fee2 	bl	8000c98 <_write>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_write_r+0x1e>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_write_r+0x1e>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	20000724 	.word	0x20000724

08005ee4 <abort>:
 8005ee4:	2006      	movs	r0, #6
 8005ee6:	b508      	push	{r3, lr}
 8005ee8:	f000 f89c 	bl	8006024 <raise>
 8005eec:	2001      	movs	r0, #1
 8005eee:	f7fa feac 	bl	8000c4a <_exit>
	...

08005ef4 <_close_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	4d05      	ldr	r5, [pc, #20]	; (8005f10 <_close_r+0x1c>)
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	f7fa fee6 	bl	8000cd0 <_close>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_close_r+0x1a>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_close_r+0x1a>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	20000724 	.word	0x20000724

08005f14 <_fstat_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	2300      	movs	r3, #0
 8005f18:	4d06      	ldr	r5, [pc, #24]	; (8005f34 <_fstat_r+0x20>)
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	f7fa fee0 	bl	8000ce6 <_fstat>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	d102      	bne.n	8005f30 <_fstat_r+0x1c>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	b103      	cbz	r3, 8005f30 <_fstat_r+0x1c>
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
 8005f32:	bf00      	nop
 8005f34:	20000724 	.word	0x20000724

08005f38 <_isatty_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4d05      	ldr	r5, [pc, #20]	; (8005f54 <_isatty_r+0x1c>)
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	602b      	str	r3, [r5, #0]
 8005f44:	f7fa fede 	bl	8000d04 <_isatty>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_isatty_r+0x1a>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_isatty_r+0x1a>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20000724 	.word	0x20000724

08005f58 <_lseek_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	2200      	movs	r2, #0
 8005f62:	4d05      	ldr	r5, [pc, #20]	; (8005f78 <_lseek_r+0x20>)
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fa fed6 	bl	8000d18 <_lseek>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_lseek_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_lseek_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	20000724 	.word	0x20000724

08005f7c <memchr>:
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	b2c9      	uxtb	r1, r1
 8005f82:	4402      	add	r2, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	d101      	bne.n	8005f8e <memchr+0x12>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e003      	b.n	8005f96 <memchr+0x1a>
 8005f8e:	7804      	ldrb	r4, [r0, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	428c      	cmp	r4, r1
 8005f94:	d1f6      	bne.n	8005f84 <memchr+0x8>
 8005f96:	bd10      	pop	{r4, pc}

08005f98 <__malloc_lock>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__malloc_lock+0x8>)
 8005f9a:	f7ff bb03 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000718 	.word	0x20000718

08005fa4 <__malloc_unlock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_unlock+0x8>)
 8005fa6:	f7ff bafe 	b.w	80055a6 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000718 	.word	0x20000718

08005fb0 <_read_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4d05      	ldr	r5, [pc, #20]	; (8005fd0 <_read_r+0x20>)
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fa fe4d 	bl	8000c5e <_read>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_read_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_read_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20000724 	.word	0x20000724

08005fd4 <_raise_r>:
 8005fd4:	291f      	cmp	r1, #31
 8005fd6:	b538      	push	{r3, r4, r5, lr}
 8005fd8:	4604      	mov	r4, r0
 8005fda:	460d      	mov	r5, r1
 8005fdc:	d904      	bls.n	8005fe8 <_raise_r+0x14>
 8005fde:	2316      	movs	r3, #22
 8005fe0:	6003      	str	r3, [r0, #0]
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fea:	b112      	cbz	r2, 8005ff2 <_raise_r+0x1e>
 8005fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ff0:	b94b      	cbnz	r3, 8006006 <_raise_r+0x32>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f830 	bl	8006058 <_getpid_r>
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006002:	f000 b817 	b.w	8006034 <_kill_r>
 8006006:	2b01      	cmp	r3, #1
 8006008:	d00a      	beq.n	8006020 <_raise_r+0x4c>
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	d103      	bne.n	8006016 <_raise_r+0x42>
 800600e:	2316      	movs	r3, #22
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	2001      	movs	r0, #1
 8006014:	e7e7      	b.n	8005fe6 <_raise_r+0x12>
 8006016:	2400      	movs	r4, #0
 8006018:	4628      	mov	r0, r5
 800601a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800601e:	4798      	blx	r3
 8006020:	2000      	movs	r0, #0
 8006022:	e7e0      	b.n	8005fe6 <_raise_r+0x12>

08006024 <raise>:
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <raise+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7ff bfd3 	b.w	8005fd4 <_raise_r>
 800602e:	bf00      	nop
 8006030:	200002e0 	.word	0x200002e0

08006034 <_kill_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	2300      	movs	r3, #0
 8006038:	4d06      	ldr	r5, [pc, #24]	; (8006054 <_kill_r+0x20>)
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	f7fa fdf2 	bl	8000c2a <_kill>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d102      	bne.n	8006050 <_kill_r+0x1c>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	b103      	cbz	r3, 8006050 <_kill_r+0x1c>
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	bf00      	nop
 8006054:	20000724 	.word	0x20000724

08006058 <_getpid_r>:
 8006058:	f7fa bde0 	b.w	8000c1c <_getpid>

0800605c <_init>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	bf00      	nop
 8006060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006062:	bc08      	pop	{r3}
 8006064:	469e      	mov	lr, r3
 8006066:	4770      	bx	lr

08006068 <_fini>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	bf00      	nop
 800606c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606e:	bc08      	pop	{r3}
 8006070:	469e      	mov	lr, r3
 8006072:	4770      	bx	lr
