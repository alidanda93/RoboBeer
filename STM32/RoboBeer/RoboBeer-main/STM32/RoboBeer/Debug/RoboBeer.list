
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfcc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800d1b8  0800d1b8  0001d1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d768  0800d768  000207e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d768  0800d768  000207e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d768  0800d768  000207e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d768  0800d768  0001d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007e4  20000000  0800d770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200007e4  0800df54  000207e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c88  0800df54  00020c88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014472  00000000  00000000  0002080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037af  00000000  00000000  00034c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eda4  00000000  00000000  0003aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a633  00000000  00000000  00059834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a49f2  00000000  00000000  00073e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  001188ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200007e4 	.word	0x200007e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d19c 	.word	0x0800d19c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200007e8 	.word	0x200007e8
 8000224:	0800d19c 	.word	0x0800d19c

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_fmul>:
 800024c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000250:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000254:	bf1e      	ittt	ne
 8000256:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800025a:	ea92 0f0c 	teqne	r2, ip
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d06f      	beq.n	8000344 <__aeabi_fmul+0xf8>
 8000264:	441a      	add	r2, r3
 8000266:	ea80 0c01 	eor.w	ip, r0, r1
 800026a:	0240      	lsls	r0, r0, #9
 800026c:	bf18      	it	ne
 800026e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000272:	d01e      	beq.n	80002b2 <__aeabi_fmul+0x66>
 8000274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000278:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800027c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000280:	fba0 3101 	umull	r3, r1, r0, r1
 8000284:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000288:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800028c:	bf3e      	ittt	cc
 800028e:	0049      	lslcc	r1, r1, #1
 8000290:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000294:	005b      	lslcc	r3, r3, #1
 8000296:	ea40 0001 	orr.w	r0, r0, r1
 800029a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029e:	2afd      	cmp	r2, #253	; 0xfd
 80002a0:	d81d      	bhi.n	80002de <__aeabi_fmul+0x92>
 80002a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	4770      	bx	lr
 80002b2:	f090 0f00 	teq	r0, #0
 80002b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ba:	bf08      	it	eq
 80002bc:	0249      	lsleq	r1, r1, #9
 80002be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c6:	3a7f      	subs	r2, #127	; 0x7f
 80002c8:	bfc2      	ittt	gt
 80002ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002d2:	4770      	bxgt	lr
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	f04f 0300 	mov.w	r3, #0
 80002dc:	3a01      	subs	r2, #1
 80002de:	dc5d      	bgt.n	800039c <__aeabi_fmul+0x150>
 80002e0:	f112 0f19 	cmn.w	r2, #25
 80002e4:	bfdc      	itt	le
 80002e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ea:	4770      	bxle	lr
 80002ec:	f1c2 0200 	rsb	r2, r2, #0
 80002f0:	0041      	lsls	r1, r0, #1
 80002f2:	fa21 f102 	lsr.w	r1, r1, r2
 80002f6:	f1c2 0220 	rsb	r2, r2, #32
 80002fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000302:	f140 0000 	adc.w	r0, r0, #0
 8000306:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800030a:	bf08      	it	eq
 800030c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000310:	4770      	bx	lr
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800031a:	bf02      	ittt	eq
 800031c:	0040      	lsleq	r0, r0, #1
 800031e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000322:	3a01      	subeq	r2, #1
 8000324:	d0f9      	beq.n	800031a <__aeabi_fmul+0xce>
 8000326:	ea40 000c 	orr.w	r0, r0, ip
 800032a:	f093 0f00 	teq	r3, #0
 800032e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000332:	bf02      	ittt	eq
 8000334:	0049      	lsleq	r1, r1, #1
 8000336:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800033a:	3b01      	subeq	r3, #1
 800033c:	d0f9      	beq.n	8000332 <__aeabi_fmul+0xe6>
 800033e:	ea41 010c 	orr.w	r1, r1, ip
 8000342:	e78f      	b.n	8000264 <__aeabi_fmul+0x18>
 8000344:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000348:	ea92 0f0c 	teq	r2, ip
 800034c:	bf18      	it	ne
 800034e:	ea93 0f0c 	teqne	r3, ip
 8000352:	d00a      	beq.n	800036a <__aeabi_fmul+0x11e>
 8000354:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000358:	bf18      	it	ne
 800035a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035e:	d1d8      	bne.n	8000312 <__aeabi_fmul+0xc6>
 8000360:	ea80 0001 	eor.w	r0, r0, r1
 8000364:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000368:	4770      	bx	lr
 800036a:	f090 0f00 	teq	r0, #0
 800036e:	bf17      	itett	ne
 8000370:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000374:	4608      	moveq	r0, r1
 8000376:	f091 0f00 	teqne	r1, #0
 800037a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037e:	d014      	beq.n	80003aa <__aeabi_fmul+0x15e>
 8000380:	ea92 0f0c 	teq	r2, ip
 8000384:	d101      	bne.n	800038a <__aeabi_fmul+0x13e>
 8000386:	0242      	lsls	r2, r0, #9
 8000388:	d10f      	bne.n	80003aa <__aeabi_fmul+0x15e>
 800038a:	ea93 0f0c 	teq	r3, ip
 800038e:	d103      	bne.n	8000398 <__aeabi_fmul+0x14c>
 8000390:	024b      	lsls	r3, r1, #9
 8000392:	bf18      	it	ne
 8000394:	4608      	movne	r0, r1
 8000396:	d108      	bne.n	80003aa <__aeabi_fmul+0x15e>
 8000398:	ea80 0001 	eor.w	r0, r0, r1
 800039c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a8:	4770      	bx	lr
 80003aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003b2:	4770      	bx	lr

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_dmul>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8de 	bleq	8000908 <__aeabi_dmul+0x1dc>
 800074c:	442c      	add	r4, r5
 800074e:	ea81 0603 	eor.w	r6, r1, r3
 8000752:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000756:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800075a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800075e:	bf18      	it	ne
 8000760:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800076c:	d038      	beq.n	80007e0 <__aeabi_dmul+0xb4>
 800076e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	fbe1 e502 	umlal	lr, r5, r1, r2
 800077a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800077e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000782:	f04f 0600 	mov.w	r6, #0
 8000786:	fbe1 5603 	umlal	r5, r6, r1, r3
 800078a:	f09c 0f00 	teq	ip, #0
 800078e:	bf18      	it	ne
 8000790:	f04e 0e01 	orrne.w	lr, lr, #1
 8000794:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000798:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800079c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a0:	d204      	bcs.n	80007ac <__aeabi_dmul+0x80>
 80007a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007a6:	416d      	adcs	r5, r5
 80007a8:	eb46 0606 	adc.w	r6, r6, r6
 80007ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c4:	bf88      	it	hi
 80007c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ca:	d81e      	bhi.n	800080a <__aeabi_dmul+0xde>
 80007cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d0:	bf08      	it	eq
 80007d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007d6:	f150 0000 	adcs.w	r0, r0, #0
 80007da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e4:	ea46 0101 	orr.w	r1, r6, r1
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f4:	bfc2      	ittt	gt
 80007f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000804:	f04f 0e00 	mov.w	lr, #0
 8000808:	3c01      	subs	r4, #1
 800080a:	f300 80ab 	bgt.w	8000964 <__aeabi_dmul+0x238>
 800080e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000812:	bfde      	ittt	le
 8000814:	2000      	movle	r0, #0
 8000816:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800081a:	bd70      	pople	{r4, r5, r6, pc}
 800081c:	f1c4 0400 	rsb	r4, r4, #0
 8000820:	3c20      	subs	r4, #32
 8000822:	da35      	bge.n	8000890 <__aeabi_dmul+0x164>
 8000824:	340c      	adds	r4, #12
 8000826:	dc1b      	bgt.n	8000860 <__aeabi_dmul+0x134>
 8000828:	f104 0414 	add.w	r4, r4, #20
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f305 	lsl.w	r3, r0, r5
 8000834:	fa20 f004 	lsr.w	r0, r0, r4
 8000838:	fa01 f205 	lsl.w	r2, r1, r5
 800083c:	ea40 0002 	orr.w	r0, r0, r2
 8000840:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000844:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	fa21 f604 	lsr.w	r6, r1, r4
 8000850:	eb42 0106 	adc.w	r1, r2, r6
 8000854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000858:	bf08      	it	eq
 800085a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f1c4 040c 	rsb	r4, r4, #12
 8000864:	f1c4 0520 	rsb	r5, r4, #32
 8000868:	fa00 f304 	lsl.w	r3, r0, r4
 800086c:	fa20 f005 	lsr.w	r0, r0, r5
 8000870:	fa01 f204 	lsl.w	r2, r1, r4
 8000874:	ea40 0002 	orr.w	r0, r0, r2
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000880:	f141 0100 	adc.w	r1, r1, #0
 8000884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000888:	bf08      	it	eq
 800088a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f1c4 0520 	rsb	r5, r4, #32
 8000894:	fa00 f205 	lsl.w	r2, r0, r5
 8000898:	ea4e 0e02 	orr.w	lr, lr, r2
 800089c:	fa20 f304 	lsr.w	r3, r0, r4
 80008a0:	fa01 f205 	lsl.w	r2, r1, r5
 80008a4:	ea43 0302 	orr.w	r3, r3, r2
 80008a8:	fa21 f004 	lsr.w	r0, r1, r4
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	fa21 f204 	lsr.w	r2, r1, r4
 80008b4:	ea20 0002 	bic.w	r0, r0, r2
 80008b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c0:	bf08      	it	eq
 80008c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f094 0f00 	teq	r4, #0
 80008cc:	d10f      	bne.n	80008ee <__aeabi_dmul+0x1c2>
 80008ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008d2:	0040      	lsls	r0, r0, #1
 80008d4:	eb41 0101 	adc.w	r1, r1, r1
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf08      	it	eq
 80008de:	3c01      	subeq	r4, #1
 80008e0:	d0f7      	beq.n	80008d2 <__aeabi_dmul+0x1a6>
 80008e2:	ea41 0106 	orr.w	r1, r1, r6
 80008e6:	f095 0f00 	teq	r5, #0
 80008ea:	bf18      	it	ne
 80008ec:	4770      	bxne	lr
 80008ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	eb43 0303 	adc.w	r3, r3, r3
 80008f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008fc:	bf08      	it	eq
 80008fe:	3d01      	subeq	r5, #1
 8000900:	d0f7      	beq.n	80008f2 <__aeabi_dmul+0x1c6>
 8000902:	ea43 0306 	orr.w	r3, r3, r6
 8000906:	4770      	bx	lr
 8000908:	ea94 0f0c 	teq	r4, ip
 800090c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000910:	bf18      	it	ne
 8000912:	ea95 0f0c 	teqne	r5, ip
 8000916:	d00c      	beq.n	8000932 <__aeabi_dmul+0x206>
 8000918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000922:	d1d1      	bne.n	80008c8 <__aeabi_dmul+0x19c>
 8000924:	ea81 0103 	eor.w	r1, r1, r3
 8000928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000936:	bf06      	itte	eq
 8000938:	4610      	moveq	r0, r2
 800093a:	4619      	moveq	r1, r3
 800093c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000940:	d019      	beq.n	8000976 <__aeabi_dmul+0x24a>
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	d102      	bne.n	800094e <__aeabi_dmul+0x222>
 8000948:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800094c:	d113      	bne.n	8000976 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	d105      	bne.n	8000960 <__aeabi_dmul+0x234>
 8000954:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000958:	bf1c      	itt	ne
 800095a:	4610      	movne	r0, r2
 800095c:	4619      	movne	r1, r3
 800095e:	d10a      	bne.n	8000976 <__aeabi_dmul+0x24a>
 8000960:	ea81 0103 	eor.w	r1, r1, r3
 8000964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000968:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800097a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800097e:	bd70      	pop	{r4, r5, r6, pc}

08000980 <__aeabi_ddiv>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000986:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800098a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800098e:	bf1d      	ittte	ne
 8000990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000994:	ea94 0f0c 	teqne	r4, ip
 8000998:	ea95 0f0c 	teqne	r5, ip
 800099c:	f000 f8a7 	bleq	8000aee <__aeabi_ddiv+0x16e>
 80009a0:	eba4 0405 	sub.w	r4, r4, r5
 80009a4:	ea81 0e03 	eor.w	lr, r1, r3
 80009a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b0:	f000 8088 	beq.w	8000ac4 <__aeabi_ddiv+0x144>
 80009b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009d8:	429d      	cmp	r5, r3
 80009da:	bf08      	it	eq
 80009dc:	4296      	cmpeq	r6, r2
 80009de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009e6:	d202      	bcs.n	80009ee <__aeabi_ddiv+0x6e>
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	1ab6      	subs	r6, r6, r2
 80009f0:	eb65 0503 	sbc.w	r5, r5, r3
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a02:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0a:	bf22      	ittt	cs
 8000a0c:	1ab6      	subcs	r6, r6, r2
 8000a0e:	4675      	movcs	r5, lr
 8000a10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a22:	bf22      	ittt	cs
 8000a24:	1ab6      	subcs	r6, r6, r2
 8000a26:	4675      	movcs	r5, lr
 8000a28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3a:	bf22      	ittt	cs
 8000a3c:	1ab6      	subcs	r6, r6, r2
 8000a3e:	4675      	movcs	r5, lr
 8000a40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a52:	bf22      	ittt	cs
 8000a54:	1ab6      	subcs	r6, r6, r2
 8000a56:	4675      	movcs	r5, lr
 8000a58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a60:	d018      	beq.n	8000a94 <__aeabi_ddiv+0x114>
 8000a62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a7e:	d1c0      	bne.n	8000a02 <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	d10b      	bne.n	8000a9e <__aeabi_ddiv+0x11e>
 8000a86:	ea41 0100 	orr.w	r1, r1, r0
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a92:	e7b6      	b.n	8000a02 <__aeabi_ddiv+0x82>
 8000a94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a98:	bf04      	itt	eq
 8000a9a:	4301      	orreq	r1, r0
 8000a9c:	2000      	moveq	r0, #0
 8000a9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa2:	bf88      	it	hi
 8000aa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aa8:	f63f aeaf 	bhi.w	800080a <__aeabi_dmul+0xde>
 8000aac:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab0:	bf04      	itt	eq
 8000ab2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ab6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ac8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000acc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad0:	bfc2      	ittt	gt
 8000ad2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ad6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ada:	bd70      	popgt	{r4, r5, r6, pc}
 8000adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae0:	f04f 0e00 	mov.w	lr, #0
 8000ae4:	3c01      	subs	r4, #1
 8000ae6:	e690      	b.n	800080a <__aeabi_dmul+0xde>
 8000ae8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aec:	e68d      	b.n	800080a <__aeabi_dmul+0xde>
 8000aee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000af2:	ea94 0f0c 	teq	r4, ip
 8000af6:	bf08      	it	eq
 8000af8:	ea95 0f0c 	teqeq	r5, ip
 8000afc:	f43f af3b 	beq.w	8000976 <__aeabi_dmul+0x24a>
 8000b00:	ea94 0f0c 	teq	r4, ip
 8000b04:	d10a      	bne.n	8000b1c <__aeabi_ddiv+0x19c>
 8000b06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0a:	f47f af34 	bne.w	8000976 <__aeabi_dmul+0x24a>
 8000b0e:	ea95 0f0c 	teq	r5, ip
 8000b12:	f47f af25 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e72c      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b1c:	ea95 0f0c 	teq	r5, ip
 8000b20:	d106      	bne.n	8000b30 <__aeabi_ddiv+0x1b0>
 8000b22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b26:	f43f aefd 	beq.w	8000924 <__aeabi_dmul+0x1f8>
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	e722      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3a:	f47f aec5 	bne.w	80008c8 <__aeabi_dmul+0x19c>
 8000b3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b42:	f47f af0d 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b4a:	f47f aeeb 	bne.w	8000924 <__aeabi_dmul+0x1f8>
 8000b4e:	e712      	b.n	8000976 <__aeabi_dmul+0x24a>

08000b50 <__gedf2>:
 8000b50:	f04f 3cff 	mov.w	ip, #4294967295
 8000b54:	e006      	b.n	8000b64 <__cmpdf2+0x4>
 8000b56:	bf00      	nop

08000b58 <__ledf2>:
 8000b58:	f04f 0c01 	mov.w	ip, #1
 8000b5c:	e002      	b.n	8000b64 <__cmpdf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__cmpdf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b7a:	d01b      	beq.n	8000bb4 <__cmpdf2+0x54>
 8000b7c:	b001      	add	sp, #4
 8000b7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b82:	bf0c      	ite	eq
 8000b84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b88:	ea91 0f03 	teqne	r1, r3
 8000b8c:	bf02      	ittt	eq
 8000b8e:	ea90 0f02 	teqeq	r0, r2
 8000b92:	2000      	moveq	r0, #0
 8000b94:	4770      	bxeq	lr
 8000b96:	f110 0f00 	cmn.w	r0, #0
 8000b9a:	ea91 0f03 	teq	r1, r3
 8000b9e:	bf58      	it	pl
 8000ba0:	4299      	cmppl	r1, r3
 8000ba2:	bf08      	it	eq
 8000ba4:	4290      	cmpeq	r0, r2
 8000ba6:	bf2c      	ite	cs
 8000ba8:	17d8      	asrcs	r0, r3, #31
 8000baa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bae:	f040 0001 	orr.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__cmpdf2+0x64>
 8000bbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bc2:	d107      	bne.n	8000bd4 <__cmpdf2+0x74>
 8000bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bcc:	d1d6      	bne.n	8000b7c <__cmpdf2+0x1c>
 8000bce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bd2:	d0d3      	beq.n	8000b7c <__cmpdf2+0x1c>
 8000bd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_cdrcmple>:
 8000bdc:	4684      	mov	ip, r0
 8000bde:	4610      	mov	r0, r2
 8000be0:	4662      	mov	r2, ip
 8000be2:	468c      	mov	ip, r1
 8000be4:	4619      	mov	r1, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	e000      	b.n	8000bec <__aeabi_cdcmpeq>
 8000bea:	bf00      	nop

08000bec <__aeabi_cdcmpeq>:
 8000bec:	b501      	push	{r0, lr}
 8000bee:	f7ff ffb7 	bl	8000b60 <__cmpdf2>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	bf48      	it	mi
 8000bf6:	f110 0f00 	cmnmi.w	r0, #0
 8000bfa:	bd01      	pop	{r0, pc}

08000bfc <__aeabi_dcmpeq>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff fff4 	bl	8000bec <__aeabi_cdcmpeq>
 8000c04:	bf0c      	ite	eq
 8000c06:	2001      	moveq	r0, #1
 8000c08:	2000      	movne	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmplt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffea 	bl	8000bec <__aeabi_cdcmpeq>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmple>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffe0 	bl	8000bec <__aeabi_cdcmpeq>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpge>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffce 	bl	8000bdc <__aeabi_cdrcmple>
 8000c40:	bf94      	ite	ls
 8000c42:	2001      	movls	r0, #1
 8000c44:	2000      	movhi	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpgt>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff ffc4 	bl	8000bdc <__aeabi_cdrcmple>
 8000c54:	bf34      	ite	cc
 8000c56:	2001      	movcc	r0, #1
 8000c58:	2000      	movcs	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_dcmpun>:
 8000c60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c68:	d102      	bne.n	8000c70 <__aeabi_dcmpun+0x10>
 8000c6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c6e:	d10a      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c78:	d102      	bne.n	8000c80 <__aeabi_dcmpun+0x20>
 8000c7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c7e:	d102      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	f04f 0001 	mov.w	r0, #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2iz>:
 8000c8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c94:	d215      	bcs.n	8000cc2 <__aeabi_d2iz+0x36>
 8000c96:	d511      	bpl.n	8000cbc <__aeabi_d2iz+0x30>
 8000c98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca0:	d912      	bls.n	8000cc8 <__aeabi_d2iz+0x3c>
 8000ca2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000caa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb6:	bf18      	it	ne
 8000cb8:	4240      	negne	r0, r0
 8000cba:	4770      	bx	lr
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4770      	bx	lr
 8000cc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cc6:	d105      	bne.n	8000cd4 <__aeabi_d2iz+0x48>
 8000cc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	bf08      	it	eq
 8000cce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cd2:	4770      	bx	lr
 8000cd4:	f04f 0000 	mov.w	r0, #0
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_d2uiz>:
 8000cdc:	004a      	lsls	r2, r1, #1
 8000cde:	d211      	bcs.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce4:	d211      	bcs.n	8000d0a <__aeabi_d2uiz+0x2e>
 8000ce6:	d50d      	bpl.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf0:	d40e      	bmi.n	8000d10 <__aeabi_d2uiz+0x34>
 8000cf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000d02:	4770      	bx	lr
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0e:	d102      	bne.n	8000d16 <__aeabi_d2uiz+0x3a>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	4770      	bx	lr
 8000d16:	f04f 0000 	mov.w	r0, #0
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2f>:
 8000d1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d24:	bf24      	itt	cs
 8000d26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d2e:	d90d      	bls.n	8000d4c <__aeabi_d2f+0x30>
 8000d30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d50:	d121      	bne.n	8000d96 <__aeabi_d2f+0x7a>
 8000d52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d56:	bfbc      	itt	lt
 8000d58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	4770      	bxlt	lr
 8000d5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d66:	f1c2 0218 	rsb	r2, r2, #24
 8000d6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d72:	fa20 f002 	lsr.w	r0, r0, r2
 8000d76:	bf18      	it	ne
 8000d78:	f040 0001 	orrne.w	r0, r0, #1
 8000d7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d88:	ea40 000c 	orr.w	r0, r0, ip
 8000d8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d94:	e7cc      	b.n	8000d30 <__aeabi_d2f+0x14>
 8000d96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d9a:	d107      	bne.n	8000dac <__aeabi_d2f+0x90>
 8000d9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da0:	bf1e      	ittt	ne
 8000da2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bxne	lr
 8000dac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <__aeabi_frsub>:
 8000dbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	e002      	b.n	8000dc8 <__addsf3>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_fsub>:
 8000dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dc8 <__addsf3>:
 8000dc8:	0042      	lsls	r2, r0, #1
 8000dca:	bf1f      	itttt	ne
 8000dcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd0:	ea92 0f03 	teqne	r2, r3
 8000dd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ddc:	d06a      	beq.n	8000eb4 <__addsf3+0xec>
 8000dde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000de6:	bfc1      	itttt	gt
 8000de8:	18d2      	addgt	r2, r2, r3
 8000dea:	4041      	eorgt	r1, r0
 8000dec:	4048      	eorgt	r0, r1
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	bfb8      	it	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	2b19      	cmp	r3, #25
 8000df6:	bf88      	it	hi
 8000df8:	4770      	bxhi	lr
 8000dfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e06:	bf18      	it	ne
 8000e08:	4240      	negne	r0, r0
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e16:	bf18      	it	ne
 8000e18:	4249      	negne	r1, r1
 8000e1a:	ea92 0f03 	teq	r2, r3
 8000e1e:	d03f      	beq.n	8000ea0 <__addsf3+0xd8>
 8000e20:	f1a2 0201 	sub.w	r2, r2, #1
 8000e24:	fa41 fc03 	asr.w	ip, r1, r3
 8000e28:	eb10 000c 	adds.w	r0, r0, ip
 8000e2c:	f1c3 0320 	rsb	r3, r3, #32
 8000e30:	fa01 f103 	lsl.w	r1, r1, r3
 8000e34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	d502      	bpl.n	8000e40 <__addsf3+0x78>
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e44:	d313      	bcc.n	8000e6e <__addsf3+0xa6>
 8000e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4a:	d306      	bcc.n	8000e5a <__addsf3+0x92>
 8000e4c:	0840      	lsrs	r0, r0, #1
 8000e4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e52:	f102 0201 	add.w	r2, r2, #1
 8000e56:	2afe      	cmp	r2, #254	; 0xfe
 8000e58:	d251      	bcs.n	8000efe <__addsf3+0x136>
 8000e5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	ea40 0003 	orr.w	r0, r0, r3
 8000e6c:	4770      	bx	lr
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	eb40 0000 	adc.w	r0, r0, r0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	bf28      	it	cs
 8000e78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e7c:	d2ed      	bcs.n	8000e5a <__addsf3+0x92>
 8000e7e:	fab0 fc80 	clz	ip, r0
 8000e82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e86:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e8e:	bfaa      	itet	ge
 8000e90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e94:	4252      	neglt	r2, r2
 8000e96:	4318      	orrge	r0, r3
 8000e98:	bfbc      	itt	lt
 8000e9a:	40d0      	lsrlt	r0, r2
 8000e9c:	4318      	orrlt	r0, r3
 8000e9e:	4770      	bx	lr
 8000ea0:	f092 0f00 	teq	r2, #0
 8000ea4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ea8:	bf06      	itte	eq
 8000eaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eae:	3201      	addeq	r2, #1
 8000eb0:	3b01      	subne	r3, #1
 8000eb2:	e7b5      	b.n	8000e20 <__addsf3+0x58>
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d021      	beq.n	8000f08 <__addsf3+0x140>
 8000ec4:	ea92 0f03 	teq	r2, r3
 8000ec8:	d004      	beq.n	8000ed4 <__addsf3+0x10c>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	bf08      	it	eq
 8000ed0:	4608      	moveq	r0, r1
 8000ed2:	4770      	bx	lr
 8000ed4:	ea90 0f01 	teq	r0, r1
 8000ed8:	bf1c      	itt	ne
 8000eda:	2000      	movne	r0, #0
 8000edc:	4770      	bxne	lr
 8000ede:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee2:	d104      	bne.n	8000eee <__addsf3+0x126>
 8000ee4:	0040      	lsls	r0, r0, #1
 8000ee6:	bf28      	it	cs
 8000ee8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef2:	bf3c      	itt	cc
 8000ef4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ef8:	4770      	bxcc	lr
 8000efa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000efe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f0c:	bf16      	itet	ne
 8000f0e:	4608      	movne	r0, r1
 8000f10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f14:	4601      	movne	r1, r0
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	bf06      	itte	eq
 8000f1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f1e:	ea90 0f01 	teqeq	r0, r1
 8000f22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_ui2f>:
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e004      	b.n	8000f38 <__aeabi_i2f+0x8>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_i2f>:
 8000f30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f34:	bf48      	it	mi
 8000f36:	4240      	negmi	r0, r0
 8000f38:	ea5f 0c00 	movs.w	ip, r0
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f44:	4601      	mov	r1, r0
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	e01c      	b.n	8000f86 <__aeabi_l2f+0x2a>

08000f4c <__aeabi_ul2f>:
 8000f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f50:	bf08      	it	eq
 8000f52:	4770      	bxeq	lr
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e00a      	b.n	8000f70 <__aeabi_l2f+0x14>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_l2f>:
 8000f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f60:	bf08      	it	eq
 8000f62:	4770      	bxeq	lr
 8000f64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	d502      	bpl.n	8000f70 <__aeabi_l2f+0x14>
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	ea5f 0c01 	movs.w	ip, r1
 8000f74:	bf02      	ittt	eq
 8000f76:	4684      	moveq	ip, r0
 8000f78:	4601      	moveq	r1, r0
 8000f7a:	2000      	moveq	r0, #0
 8000f7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f80:	bf08      	it	eq
 8000f82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8a:	fabc f28c 	clz	r2, ip
 8000f8e:	3a08      	subs	r2, #8
 8000f90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f94:	db10      	blt.n	8000fb8 <__aeabi_l2f+0x5c>
 8000f96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa0:	f1c2 0220 	rsb	r2, r2, #32
 8000fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fac:	eb43 0002 	adc.w	r0, r3, r2
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f102 0220 	add.w	r2, r2, #32
 8000fbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc0:	f1c2 0220 	rsb	r2, r2, #32
 8000fc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000fcc:	eb43 0002 	adc.w	r0, r3, r2
 8000fd0:	bf08      	it	eq
 8000fd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fd6:	4770      	bx	lr

08000fd8 <__gesf2>:
 8000fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fdc:	e006      	b.n	8000fec <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__lesf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	e002      	b.n	8000fec <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__cmpsf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	bf18      	it	ne
 8000ffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001002:	d011      	beq.n	8001028 <__cmpsf2+0x40>
 8001004:	b001      	add	sp, #4
 8001006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100a:	bf18      	it	ne
 800100c:	ea90 0f01 	teqne	r0, r1
 8001010:	bf58      	it	pl
 8001012:	ebb2 0003 	subspl.w	r0, r2, r3
 8001016:	bf88      	it	hi
 8001018:	17c8      	asrhi	r0, r1, #31
 800101a:	bf38      	it	cc
 800101c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001020:	bf18      	it	ne
 8001022:	f040 0001 	orrne.w	r0, r0, #1
 8001026:	4770      	bx	lr
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	d102      	bne.n	8001034 <__cmpsf2+0x4c>
 800102e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001032:	d105      	bne.n	8001040 <__cmpsf2+0x58>
 8001034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001038:	d1e4      	bne.n	8001004 <__cmpsf2+0x1c>
 800103a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103e:	d0e1      	beq.n	8001004 <__cmpsf2+0x1c>
 8001040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b50f      	push	{r0, r1, r2, r3, lr}
 8001052:	f7ff ffc9 	bl	8000fe8 <__cmpsf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cfcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cfcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cfcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffd2 	bl	8001048 <__aeabi_cfrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc8 	bl	8001048 <__aeabi_cfrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_f2iz>:
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010cc:	d30f      	bcc.n	80010ee <__aeabi_f2iz+0x2a>
 80010ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d6:	d90d      	bls.n	80010f4 <__aeabi_f2iz+0x30>
 80010d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e4:	fa23 f002 	lsr.w	r0, r3, r2
 80010e8:	bf18      	it	ne
 80010ea:	4240      	negne	r0, r0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2iz+0x3a>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d105      	bne.n	800110a <__aeabi_f2iz+0x46>
 80010fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001102:	bf08      	it	eq
 8001104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001108:	4770      	bx	lr
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4770      	bx	lr

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fd77 	bl	8000c10 <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff faed 	bl	800072c <__aeabi_dmul>
 8001152:	f7ff fdc3 	bl	8000cdc <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff fae4 	bl	800072c <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7ff f926 	bl	80003bc <__aeabi_dsub>
 8001170:	f7ff fdb4 	bl	8000cdc <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <InitMCC>:
extern int speedD;
extern int speedG;


void InitMCC()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <InitMCC+0x2c>)
 8001188:	f005 fcbe 	bl	8006b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800118c:	2104      	movs	r1, #4
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <InitMCC+0x2c>)
 8001190:	f005 fcba 	bl	8006b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001194:	2108      	movs	r1, #8
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <InitMCC+0x2c>)
 8001198:	f005 fcb6 	bl	8006b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800119c:	210c      	movs	r1, #12
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <InitMCC+0x2c>)
 80011a0:	f005 fcb2 	bl	8006b08 <HAL_TIM_PWM_Start>
	Stop();
 80011a4:	f000 f888 	bl	80012b8 <Stop>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200009e0 	.word	0x200009e0

080011b0 <Avancer>:

void Avancer(int vitesse)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2bc8      	cmp	r3, #200	; 0xc8
 80011bc:	dc02      	bgt.n	80011c4 <Avancer+0x14>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da01      	bge.n	80011c8 <Avancer+0x18>
 80011c4:	f001 fe3c 	bl	8002e40 <Error_Handler>
	TIM1->CCR1=vitesse;
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <Avancer+0x38>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <Avancer+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <Avancer+0x38>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <Avancer+0x38>)
 80011dc:	2200      	movs	r2, #0
 80011de:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012c00 	.word	0x40012c00

080011ec <AvancerPI>:

void AvancerPI(int moteur, int vitesse)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2bc8      	cmp	r3, #200	; 0xc8
 80011fa:	dc02      	bgt.n	8001202 <AvancerPI+0x16>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da01      	bge.n	8001206 <AvancerPI+0x1a>
 8001202:	f001 fe1d 	bl	8002e40 <Error_Handler>
	if (moteur)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <AvancerPI+0x2e>
	{
		TIM1->CCR1=0;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <AvancerPI+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=vitesse;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <AvancerPI+0x44>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM1->CCR3=0;
		TIM1->CCR4=vitesse;
	}
}
 8001218:	e005      	b.n	8001226 <AvancerPI+0x3a>
		TIM1->CCR3=0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <AvancerPI+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <AvancerPI+0x44>)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012c00 	.word	0x40012c00

08001234 <Reculer>:

void Reculer(int vitesse)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2bc8      	cmp	r3, #200	; 0xc8
 8001240:	dc02      	bgt.n	8001248 <Reculer+0x14>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da01      	bge.n	800124c <Reculer+0x18>
 8001248:	f001 fdfa 	bl	8002e40 <Error_Handler>
	TIM1->CCR1=0;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Reculer+0x38>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <Reculer+0x38>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <Reculer+0x38>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <Reculer+0x38>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40012c00 	.word	0x40012c00

08001270 <ReculerPI>:

void ReculerPI(int moteur, int vitesse)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2bc8      	cmp	r3, #200	; 0xc8
 800127e:	dc02      	bgt.n	8001286 <ReculerPI+0x16>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	da01      	bge.n	800128a <ReculerPI+0x1a>
 8001286:	f001 fddb 	bl	8002e40 <Error_Handler>
	if (moteur)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <ReculerPI+0x2e>
	{
		TIM1->CCR1=vitesse;
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <ReculerPI+0x44>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <ReculerPI+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM1->CCR3=vitesse;
		TIM1->CCR4=0;
	}
}
 800129c:	e005      	b.n	80012aa <ReculerPI+0x3a>
		TIM1->CCR3=vitesse;
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <ReculerPI+0x44>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4=0;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <ReculerPI+0x44>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <Stop>:

void Stop(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <Stop+0x24>)
 80012be:	22c8      	movs	r2, #200	; 0xc8
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <Stop+0x24>)
 80012c4:	22c8      	movs	r2, #200	; 0xc8
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <Stop+0x24>)
 80012ca:	22c8      	movs	r2, #200	; 0xc8
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <Stop+0x24>)
 80012d0:	22c8      	movs	r2, #200	; 0xc8
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40012c00 	.word	0x40012c00

080012e0 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2bc8      	cmp	r3, #200	; 0xc8
 80012ee:	dc02      	bgt.n	80012f6 <Tourner+0x16>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da01      	bge.n	80012fa <Tourner+0x1a>
 80012f6:	f001 fda3 	bl	8002e40 <Error_Handler>
	if(sens)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <Tourner+0x68>)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <Tourner+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Tourner+0x68>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <Tourner+0x68>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8001318:	e011      	b.n	800133e <Tourner+0x5e>
	else if(!sens)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <Tourner+0x5a>
		    TIM1->CCR1=0;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <Tourner+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <Tourner+0x68>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <Tourner+0x68>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <Tourner+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001338:	e001      	b.n	800133e <Tourner+0x5e>
	else Error_Handler();
 800133a:	f001 fd81 	bl	8002e40 <Error_Handler>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00

0800134c <ReadEncodeur>:

void ReadEncodeur()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	tickD = Mid_Period_TIM2 - (TIM2->CNT);
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800135a:	337f      	adds	r3, #127	; 0x7f
 800135c:	461a      	mov	r2, r3
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <ReadEncodeur+0x40>)
 8001360:	601a      	str	r2, [r3, #0]
	TIM2->CNT = Mid_Period_TIM2;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	tickG = (TIM5->CNT) - Mid_Period_TIM5;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <ReadEncodeur+0x44>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001374:	3b7f      	subs	r3, #127	; 0x7f
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <ReadEncodeur+0x48>)
 800137a:	601a      	str	r2, [r3, #0]
	TIM5->CNT = Mid_Period_TIM5;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <ReadEncodeur+0x44>)
 800137e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000904 	.word	0x20000904
 8001390:	40000c00 	.word	0x40000c00
 8001394:	2000090c 	.word	0x2000090c

08001398 <PIController_Init>:
 * @param struct pi
 *
 * @return None
 */
void PIController_Init(PIController *pi)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	pi->integrator = 0.0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
	pi->prevError  = 0.0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

	pi->out = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

	pi->Kp = 1.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013be:	601a      	str	r2, [r3, #0]
	pi->Ki = 0.5;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013c6:	605a      	str	r2, [r3, #4]

	pi->limMin_output = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	pi->limMax_output = MAX_ARR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <PIController_Init+0x74>)
 80013d4:	60da      	str	r2, [r3, #12]

		/* Integrator limits */
	pi->limMin_integrator = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
	pi->limMax_integrator = MAX_ARR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <PIController_Init+0x74>)
 80013e2:	615a      	str	r2, [r3, #20]

		/* Sample time (in seconds) */
	pi->T = 0.1; // 10Hz frequence Tim1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <PIController_Init+0x78>)
 80013e8:	619a      	str	r2, [r3, #24]

		/* Controller "memory" */
	pi->integrator = 0.0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
	pi->prevError = 0.0;		/* Required for integrator */
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]

		/* Controller output */
	pi->out = 0.0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	43480000 	.word	0x43480000
 8001410:	3dcccccd 	.word	0x3dcccccd

08001414 <PIController_Update>:
 * @param measurement
 *
 * @return None
 */
float PIController_Update(PIController *pi, float consigne, float measurement)
{
 8001414:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]

    float error = consigne - measurement;
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fccd 	bl	8000dc4 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	617b      	str	r3, [r7, #20]

    float proportional = pi->Kp * error;	//Proportional
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f7fe ff09 	bl	800024c <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

    pi->integrator = pi->integrator + 0.5 * pi->Ki * pi->T * (error + pi->prevError);	//Integrator
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f91a 	bl	800067c <__aeabi_f2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f913 	bl	800067c <__aeabi_f2d>
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <PIController_Update+0x154>)
 800145c:	f7ff f966 	bl	800072c <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f905 	bl	800067c <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4640      	mov	r0, r8
 8001478:	4649      	mov	r1, r9
 800147a:	f7ff f957 	bl	800072c <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4690      	mov	r8, r2
 8001484:	4699      	mov	r9, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc9b 	bl	8000dc8 <__addsf3>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f8f1 	bl	800067c <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4640      	mov	r0, r8
 80014a0:	4649      	mov	r1, r9
 80014a2:	f7ff f943 	bl	800072c <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff87 	bl	80003c0 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fc2f 	bl	8000d1c <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	61da      	str	r2, [r3, #28]

    if (pi->integrator > pi->limMax_integrator) pi->integrator = pi->limMax_integrator; //anti-wind-up par ecretage
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fdee 	bl	80010b0 <__aeabi_fcmpgt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <PIController_Update+0xd0>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	61da      	str	r2, [r3, #28]
 80014e2:	e00e      	b.n	8001502 <PIController_Update+0xee>
    else if (pi->integrator < pi->limMin_integrator) pi->integrator = pi->limMin_integrator;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fdc0 	bl	8001074 <__aeabi_fcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <PIController_Update+0xee>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	61da      	str	r2, [r3, #28]


    pi->out = proportional + pi->integrator;	//Output
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc5d 	bl	8000dc8 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

    if (pi->out > pi->limMax_output) pi->out = pi->limMax_output;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fdc5 	bl	80010b0 <__aeabi_fcmpgt>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <PIController_Update+0x122>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
 8001534:	e00e      	b.n	8001554 <PIController_Update+0x140>
    else if (pi->out < pi->limMin_output) pi->out = pi->limMin_output;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff fd97 	bl	8001074 <__aeabi_fcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <PIController_Update+0x140>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

    pi->prevError       = error;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	621a      	str	r2, [r3, #32]

    return pi->out;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001568:	3fe00000 	.word	0x3fe00000

0800156c <raspGetChar>:
extern uint8_t uartTxBufferRasp[UART_TX_BUFFER_SIZE];
extern uint8_t stringSizeRasp;


uint8_t raspGetChar(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
	char* token;

	HAL_UART_Transmit(&huart1, uartRxBufferRasp, 1, HAL_MAX_DELAY);
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	2201      	movs	r2, #1
 800157c:	4922      	ldr	r1, [pc, #136]	; (8001608 <raspGetChar+0x9c>)
 800157e:	4823      	ldr	r0, [pc, #140]	; (800160c <raspGetChar+0xa0>)
 8001580:	f006 fc56 	bl	8007e30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, uartRxBufferRasp, NB_CARACT, HAL_MAX_DELAY); //ecrit à l'ordi
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	2210      	movs	r2, #16
 800158a:	491f      	ldr	r1, [pc, #124]	; (8001608 <raspGetChar+0x9c>)
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <raspGetChar+0xa0>)
 800158e:	f006 fc4f 	bl	8007e30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, newlineRasp, sizeof(newlineRasp), HAL_MAX_DELAY);
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	2203      	movs	r2, #3
 8001598:	491d      	ldr	r1, [pc, #116]	; (8001610 <raspGetChar+0xa4>)
 800159a:	481c      	ldr	r0, [pc, #112]	; (800160c <raspGetChar+0xa0>)
 800159c:	f006 fc48 	bl	8007e30 <HAL_UART_Transmit>


	argcRasp = 0;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <raspGetChar+0xa8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < NB_CARACT; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	e00b      	b.n	80015c4 <raspGetChar+0x58>
	{
		cmdBufferRasp[i] = uartRxBufferRasp[i];
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <raspGetChar+0x9c>)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	7819      	ldrb	r1, [r3, #0]
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <raspGetChar+0xac>)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	4413      	add	r3, r2
 80015ba:	460a      	mov	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NB_CARACT; i++)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	ddf0      	ble.n	80015ac <raspGetChar+0x40>
	}

	token = (char*)strtok(cmdBufferRasp, " ");
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <raspGetChar+0xb0>)
 80015cc:	4812      	ldr	r0, [pc, #72]	; (8001618 <raspGetChar+0xac>)
 80015ce:	f008 fe01 	bl	800a1d4 <strtok>
 80015d2:	60f8      	str	r0, [r7, #12]
	while(token!=NULL)
 80015d4:	e00f      	b.n	80015f6 <raspGetChar+0x8a>
	{
		argvRasp[argcRasp++] = token;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <raspGetChar+0xa8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	b2d1      	uxtb	r1, r2
 80015de:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <raspGetChar+0xa8>)
 80015e0:	7011      	strb	r1, [r2, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <raspGetChar+0xb4>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		token = (char*)strtok(NULL, " ");
 80015ec:	490b      	ldr	r1, [pc, #44]	; (800161c <raspGetChar+0xb0>)
 80015ee:	2000      	movs	r0, #0
 80015f0:	f008 fdf0 	bl	800a1d4 <strtok>
 80015f4:	60f8      	str	r0, [r7, #12]
	while(token!=NULL)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ec      	bne.n	80015d6 <raspGetChar+0x6a>
	}


	return newCmdReady;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000bdc 	.word	0x20000bdc
 800160c:	20000bec 	.word	0x20000bec
 8001610:	20000020 	.word	0x20000020
 8001614:	20000864 	.word	0x20000864
 8001618:	20000800 	.word	0x20000800
 800161c:	0800d1b8 	.word	0x0800d1b8
 8001620:	20000840 	.word	0x20000840

08001624 <raspErrorReceive>:

void raspErrorReceive(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, errlect, sizeof(errlect), HAL_MAX_DELAY);
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	221d      	movs	r2, #29
 800162e:	4903      	ldr	r1, [pc, #12]	; (800163c <raspErrorReceive+0x18>)
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <raspErrorReceive+0x1c>)
 8001632:	f006 fbfd 	bl	8007e30 <HAL_UART_Transmit>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000
 8001640:	20000bec 	.word	0x20000bec

08001644 <raspExec>:
/**
  * @brief  Call function depends of the value of argcRasp and argvRasp
  * @retval None
  */
void raspExec(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	if(strcmp(argvRasp[0],"FM")==0 && strcmp(argvRasp[5],"RT")==0)
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <raspExec+0x74>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	491b      	ldr	r1, [pc, #108]	; (80016bc <raspExec+0x78>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdea 	bl	8000228 <strcmp>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d129      	bne.n	80016ae <raspExec+0x6a>
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <raspExec+0x74>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4918      	ldr	r1, [pc, #96]	; (80016c0 <raspExec+0x7c>)
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fde1 	bl	8000228 <strcmp>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d120      	bne.n	80016ae <raspExec+0x6a>
	{
		action = atoi(argvRasp[1]);
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <raspExec+0x74>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	f007 f8c7 	bl	8008804 <atoi>
 8001676:	4603      	mov	r3, r0
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <raspExec+0x80>)
 800167a:	6013      	str	r3, [r2, #0]
		sens = atoi(argvRasp[2]);
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <raspExec+0x74>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4618      	mov	r0, r3
 8001682:	f007 f8bf 	bl	8008804 <atoi>
 8001686:	4603      	mov	r3, r0
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <raspExec+0x84>)
 800168a:	6013      	str	r3, [r2, #0]
		couleur = atoi(argvRasp[3]);
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <raspExec+0x74>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f007 f8b7 	bl	8008804 <atoi>
 8001696:	4603      	mov	r3, r0
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <raspExec+0x88>)
 800169a:	6013      	str	r3, [r2, #0]
		TOF_dist = atoi(argvRasp[4]);
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <raspExec+0x74>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 f8af 	bl	8008804 <atoi>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <raspExec+0x8c>)
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e002      	b.n	80016b4 <raspExec+0x70>
		//printf("%d %d %d %d\r\n", action, sens, couleur, TOF_dist);
	}

	else{
		raspErrorReceive();
 80016ae:	f7ff ffb9 	bl	8001624 <raspErrorReceive>
	}

}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000840 	.word	0x20000840
 80016bc:	0800d1bc 	.word	0x0800d1bc
 80016c0:	0800d1c0 	.word	0x0800d1c0
 80016c4:	2000010c 	.word	0x2000010c
 80016c8:	20000914 	.word	0x20000914
 80016cc:	20000918 	.word	0x20000918
 80016d0:	2000091c 	.word	0x2000091c

080016d4 <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f640 0298 	movw	r2, #2200	; 0x898
 80016e2:	4293      	cmp	r3, r2
 80016e4:	dc08      	bgt.n	80016f8 <ControlServo+0x24>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016ec:	db04      	blt.n	80016f8 <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <ControlServo+0x30>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <ControlServo+0x26>
	}
	else
	{
		return 1;
 80016f8:	2301      	movs	r3, #1
	}
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40000400 	.word	0x40000400

08001708 <Debut_Test>:
#define DELAY 1000
#define OFFSET_OUVERTURE_PINCE 1150
#define MM2TICK 5//convert distance in mm in encoder tick variable (d=2.pi.(75/2)=235.6 et inc = 16*75 = 1200 ==> 1200/235.6 = 5

void Debut_Test()
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	start = (start+1)%2;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <Debut_Test+0x34>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	bfb8      	it	lt
 800171a:	425b      	neglt	r3, r3
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <Debut_Test+0x34>)
 800171e:	6013      	str	r3, [r2, #0]
	X_odo = 0;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <Debut_Test+0x38>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
	Y_odo = 0;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <Debut_Test+0x3c>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
	dist = 0;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <Debut_Test+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000868 	.word	0x20000868
 8001740:	200008fc 	.word	0x200008fc
 8001744:	20000900 	.word	0x20000900
 8001748:	200008f8 	.word	0x200008f8

0800174c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_ADC1_Init+0x74>)
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <MX_ADC1_Init+0x78>)
 8001760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_ADC1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_ADC1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_ADC1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_ADC1_Init+0x74>)
 8001776:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800177a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_ADC1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_ADC1_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_ADC1_Init+0x74>)
 800178a:	f002 fcc7 	bl	800411c <HAL_ADC_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001794:	f001 fb54 	bl	8002e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001798:	2304      	movs	r3, #4
 800179a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179c:	2301      	movs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_ADC1_Init+0x74>)
 80017aa:	f002 fda1 	bl	80042f0 <HAL_ADC_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017b4:	f001 fb44 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000086c 	.word	0x2000086c
 80017c4:	40012400 	.word	0x40012400

080017c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_ADC_MspInit+0x98>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d137      	bne.n	8001858 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_ADC_MspInit+0x9c>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8001830:	23f0      	movs	r3, #240	; 0xf0
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001834:	2303      	movs	r3, #3
 8001836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	4619      	mov	r1, r3
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <HAL_ADC_MspInit+0xa0>)
 8001840:	f003 f8e0 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 8001844:	2303      	movs	r3, #3
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	2303      	movs	r3, #3
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <HAL_ADC_MspInit+0xa4>)
 8001854:	f003 f8d6 	bl	8004a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40012400 	.word	0x40012400
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00

08001870 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fd09 	bl	8002290 <initSensor>
 800187e:	4603      	mov	r3, r0

} /* tofInit() */
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001892:	1dfa      	adds	r2, r7, #7
 8001894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	2152      	movs	r1, #82	; 0x52
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <readReg16+0x48>)
 80018a0:	f003 fcce 	bl	8005240 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 80018a4:	f107 020c 	add.w	r2, r7, #12
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	2153      	movs	r1, #83	; 0x53
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <readReg16+0x48>)
 80018b4:	f003 fdc2 	bl	800543c <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 80018b8:	7b3b      	ldrb	r3, [r7, #12]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b29a      	uxth	r2, r3
 80018c0:	7b7b      	ldrb	r3, [r7, #13]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
} /* readReg16() */
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200008a4 	.word	0x200008a4

080018d4 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80018de:	1dfa      	adds	r2, r7, #7
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	2152      	movs	r1, #82	; 0x52
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <readReg+0x3c>)
 80018ec:	f003 fca8 	bl	8005240 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80018f0:	f107 020f 	add.w	r2, r7, #15
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	2153      	movs	r1, #83	; 0x53
 80018fe:	4804      	ldr	r0, [pc, #16]	; (8001910 <readReg+0x3c>)
 8001900:	f003 fd9c 	bl	800543c <HAL_I2C_Master_Receive>
	return ucTemp;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200008a4 	.word	0x200008a4

08001914 <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af02      	add	r7, sp, #8
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	4613      	mov	r3, r2
 8001922:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001924:	1dfa      	adds	r2, r7, #7
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2152      	movs	r1, #82	; 0x52
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <readMulti+0x3c>)
 8001932:	f003 fc85 	bl	8005240 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800193c:	9200      	str	r2, [sp, #0]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	2153      	movs	r1, #83	; 0x53
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <readMulti+0x3c>)
 8001944:	f003 fd7a 	bl	800543c <HAL_I2C_Master_Receive>
} /* readMulti() */
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200008a4 	.word	0x200008a4

08001954 <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001958:	b087      	sub	sp, #28
 800195a:	af02      	add	r7, sp, #8
 800195c:	4603      	mov	r3, r0
 800195e:	6039      	str	r1, [r7, #0]
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	4613      	mov	r3, r2
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	466b      	mov	r3, sp
 8001968:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	1c59      	adds	r1, r3, #1
 800196e:	1e4b      	subs	r3, r1, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	460a      	mov	r2, r1
 8001974:	2300      	movs	r3, #0
 8001976:	4690      	mov	r8, r2
 8001978:	4699      	mov	r9, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198e:	460a      	mov	r2, r1
 8001990:	2300      	movs	r3, #0
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	00eb      	lsls	r3, r5, #3
 80019a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a4:	00e2      	lsls	r2, r4, #3
 80019a6:	460b      	mov	r3, r1
 80019a8:	3307      	adds	r3, #7
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	ebad 0d03 	sub.w	sp, sp, r3
 80019b2:	ab02      	add	r3, sp, #8
 80019b4:	3300      	adds	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	88ba      	ldrh	r2, [r7, #4]
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 ff4a 	bl	8008860 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d6:	9200      	str	r2, [sp, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	2152      	movs	r1, #82	; 0x52
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <writeMulti+0x9c>)
 80019de:	f003 fc2f 	bl	8005240 <HAL_I2C_Master_Transmit>
 80019e2:	46b5      	mov	sp, r6
} /* writeMulti() */
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019ee:	bf00      	nop
 80019f0:	200008a4 	.word	0x200008a4

080019f4 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 8001a12:	88bb      	ldrh	r3, [r7, #4]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2303      	movs	r3, #3
 8001a24:	2152      	movs	r1, #82	; 0x52
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <writeReg16+0x40>)
 8001a28:	f003 fc0a 	bl	8005240 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200008a4 	.word	0x200008a4

08001a38 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460a      	mov	r2, r1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	4613      	mov	r3, r2
 8001a46:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2152      	movs	r1, #82	; 0x52
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <writeReg+0x34>)
 8001a60:	f003 fbee 	bl	8005240 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200008a4 	.word	0x200008a4

08001a70 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8001a82:	e00e      	b.n	8001aa2 <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	2152      	movs	r1, #82	; 0x52
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <writeRegList+0x44>)
 8001a92:	f003 fbd5 	bl	8005240 <HAL_I2C_Master_Transmit>
		ucList += 2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	607b      	str	r3, [r7, #4]
		ucCount--;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ed      	bne.n	8001a84 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200008a4 	.word	0x200008a4

08001ab8 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 8001ac2:	482d      	ldr	r0, [pc, #180]	; (8001b78 <getSpadInfo+0xc0>)
 8001ac4:	f7ff ffd4 	bl	8001a70 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001ac8:	2083      	movs	r0, #131	; 0x83
 8001aca:	f7ff ff03 	bl	80018d4 <readReg>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2083      	movs	r0, #131	; 0x83
 8001ada:	f7ff ffad 	bl	8001a38 <writeReg>
  writeRegList(ucSPAD1);
 8001ade:	4827      	ldr	r0, [pc, #156]	; (8001b7c <getSpadInfo+0xc4>)
 8001ae0:	f7ff ffc6 	bl	8001a70 <writeRegList>
  iTimeout = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001ae8:	e00b      	b.n	8001b02 <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 8001aea:	2083      	movs	r0, #131	; 0x83
 8001aec:	f7ff fef2 	bl	80018d4 <readReg>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <getSpadInfo+0x52>
    iTimeout++;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8001afc:	2005      	movs	r0, #5
 8001afe:	f002 fae9 	bl	80040d4 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b31      	cmp	r3, #49	; 0x31
 8001b06:	ddf0      	ble.n	8001aea <getSpadInfo+0x32>
 8001b08:	e000      	b.n	8001b0c <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 8001b0a:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b32      	cmp	r3, #50	; 0x32
 8001b10:	d101      	bne.n	8001b16 <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e02b      	b.n	8001b6e <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 8001b16:	2101      	movs	r1, #1
 8001b18:	2083      	movs	r0, #131	; 0x83
 8001b1a:	f7ff ff8d 	bl	8001a38 <writeReg>
  ucTemp = readReg(0x92);
 8001b1e:	2092      	movs	r0, #146	; 0x92
 8001b20:	f7ff fed8 	bl	80018d4 <readReg>
 8001b24:	4603      	mov	r3, r0
 8001b26:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8001b40:	2100      	movs	r1, #0
 8001b42:	2081      	movs	r0, #129	; 0x81
 8001b44:	f7ff ff78 	bl	8001a38 <writeReg>
  writeReg(0xff,0x06);
 8001b48:	2106      	movs	r1, #6
 8001b4a:	20ff      	movs	r0, #255	; 0xff
 8001b4c:	f7ff ff74 	bl	8001a38 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8001b50:	2083      	movs	r0, #131	; 0x83
 8001b52:	f7ff febf 	bl	80018d4 <readReg>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2083      	movs	r0, #131	; 0x83
 8001b62:	f7ff ff69 	bl	8001a38 <writeReg>
  writeRegList(ucSPAD2);
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <getSpadInfo+0xc8>)
 8001b68:	f7ff ff82 	bl	8001a70 <writeRegList>

  return 1;
 8001b6c:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000038 	.word	0x20000038
 8001b7c:	20000044 	.word	0x20000044
 8001b80:	20000050 	.word	0x20000050

08001b84 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	0a12      	lsrs	r2, r2, #8
 8001b96:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b29b      	uxth	r3, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	80fb      	strh	r3, [r7, #6]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001bbc:	797b      	ldrb	r3, [r7, #5]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <timeoutMclksToMicroseconds+0x48>)
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <timeoutMclksToMicroseconds+0x4c>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	fb03 f202 	mul.w	r2, r3, r2
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <timeoutMclksToMicroseconds+0x4c>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	099b      	lsrs	r3, r3, #6
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	003a2f00 	.word	0x003a2f00
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <timeoutMicrosecondsToMclks+0x44>)
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <timeoutMicrosecondsToMclks+0x48>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c24:	fb03 f202 	mul.w	r2, r3, r2
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	441a      	add	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	003a2f00 	.word	0x003a2f00
 8001c44:	10624dd3 	.word	0x10624dd3

08001c48 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d018      	beq.n	8001c92 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c66:	e005      	b.n	8001c74 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	3301      	adds	r3, #1
 8001c72:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f4      	bne.n	8001c68 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	e000      	b.n	8001c94 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	6039      	str	r1, [r7, #0]
 8001ca8:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001caa:	2050      	movs	r0, #80	; 0x50
 8001cac:	f7ff fe12 	bl	80018d4 <readReg>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001cc0:	2046      	movs	r0, #70	; 0x46
 8001cc2:	f7ff fe07 	bl	80018d4 <readReg>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f7ff ff64 	bl	8001bac <timeoutMclksToMicroseconds>
 8001ce4:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001cea:	2051      	movs	r0, #81	; 0x51
 8001cec:	f7ff fdcc 	bl	8001888 <readReg16>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff46 	bl	8001b84 <decodeTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	f7ff ff4d 	bl	8001bac <timeoutMclksToMicroseconds>
 8001d12:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001d18:	2070      	movs	r0, #112	; 0x70
 8001d1a:	f7ff fddb 	bl	80018d4 <readReg>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001d2e:	2071      	movs	r0, #113	; 0x71
 8001d30:	f7ff fdaa 	bl	8001888 <readReg16>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff24 	bl	8001b84 <decodeTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	891a      	ldrh	r2, [r3, #8]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	88db      	ldrh	r3, [r3, #6]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f7ff ff1e 	bl	8001bac <timeoutMclksToMicroseconds>
 8001d70:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	460a      	mov	r2, r1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fd99 	bl	80018d4 <readReg>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001da8:	f107 020c 	add.w	r2, r7, #12
 8001dac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff73 	bl	8001c9e <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d15c      	bne.n	8001e78 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	3b0c      	subs	r3, #12
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d824      	bhi.n	8001e10 <setVcselPulsePeriod+0x90>
 8001dc6:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <setVcselPulsePeriod+0x4c>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001de9 	.word	0x08001de9
 8001dd0:	08001e11 	.word	0x08001e11
 8001dd4:	08001df3 	.word	0x08001df3
 8001dd8:	08001e11 	.word	0x08001e11
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e07 	.word	0x08001e07
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001de8:	2118      	movs	r1, #24
 8001dea:	2057      	movs	r0, #87	; 0x57
 8001dec:	f7ff fe24 	bl	8001a38 <writeReg>
        break;
 8001df0:	e010      	b.n	8001e14 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001df2:	2130      	movs	r1, #48	; 0x30
 8001df4:	2057      	movs	r0, #87	; 0x57
 8001df6:	f7ff fe1f 	bl	8001a38 <writeReg>
        break;
 8001dfa:	e00b      	b.n	8001e14 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	2057      	movs	r0, #87	; 0x57
 8001e00:	f7ff fe1a 	bl	8001a38 <writeReg>
        break;
 8001e04:	e006      	b.n	8001e14 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001e06:	2150      	movs	r1, #80	; 0x50
 8001e08:	2057      	movs	r0, #87	; 0x57
 8001e0a:	f7ff fe15 	bl	8001a38 <writeReg>
        break;
 8001e0e:	e001      	b.n	8001e14 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e0fe      	b.n	8002012 <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001e14:	2108      	movs	r1, #8
 8001e16:	2056      	movs	r0, #86	; 0x56
 8001e18:	f7ff fe0e 	bl	8001a38 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001e1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e20:	4619      	mov	r1, r3
 8001e22:	2050      	movs	r0, #80	; 0x50
 8001e24:	f7ff fe08 	bl	8001a38 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	79ba      	ldrb	r2, [r7, #6]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fee4 	bl	8001bfc <timeoutMicrosecondsToMclks>
 8001e34:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001e36:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001e38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff04 	bl	8001c48 <encodeTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	2051      	movs	r0, #81	; 0x51
 8001e46:	f7ff fdd5 	bl	80019f4 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	79ba      	ldrb	r2, [r7, #6]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fed3 	bl	8001bfc <timeoutMicrosecondsToMclks>
 8001e56:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001e58:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e60:	d804      	bhi.n	8001e6c <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001e62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e64:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e000      	b.n	8001e6e <setVcselPulsePeriod+0xee>
 8001e6c:	23ff      	movs	r3, #255	; 0xff
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2046      	movs	r0, #70	; 0x46
 8001e72:	f7ff fde1 	bl	8001a38 <writeReg>
 8001e76:	e0b3      	b.n	8001fe0 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 80ae 	bne.w	8001fdc <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	3b08      	subs	r3, #8
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	f200 8085 	bhi.w	8001f94 <setVcselPulsePeriod+0x214>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <setVcselPulsePeriod+0x110>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ead 	.word	0x08001ead
 8001e94:	08001f95 	.word	0x08001f95
 8001e98:	08001ee7 	.word	0x08001ee7
 8001e9c:	08001f95 	.word	0x08001f95
 8001ea0:	08001f21 	.word	0x08001f21
 8001ea4:	08001f95 	.word	0x08001f95
 8001ea8:	08001f5b 	.word	0x08001f5b
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001eac:	2110      	movs	r1, #16
 8001eae:	2048      	movs	r0, #72	; 0x48
 8001eb0:	f7ff fdc2 	bl	8001a38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001eb4:	2108      	movs	r1, #8
 8001eb6:	2047      	movs	r0, #71	; 0x47
 8001eb8:	f7ff fdbe 	bl	8001a38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	2032      	movs	r0, #50	; 0x32
 8001ec0:	f7ff fdba 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001ec4:	210c      	movs	r1, #12
 8001ec6:	2030      	movs	r0, #48	; 0x30
 8001ec8:	f7ff fdb6 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x01);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	20ff      	movs	r0, #255	; 0xff
 8001ed0:	f7ff fdb2 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001ed4:	2130      	movs	r1, #48	; 0x30
 8001ed6:	2030      	movs	r0, #48	; 0x30
 8001ed8:	f7ff fdae 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x00);
 8001edc:	2100      	movs	r1, #0
 8001ede:	20ff      	movs	r0, #255	; 0xff
 8001ee0:	f7ff fdaa 	bl	8001a38 <writeReg>
        break;
 8001ee4:	e058      	b.n	8001f98 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001ee6:	2128      	movs	r1, #40	; 0x28
 8001ee8:	2048      	movs	r0, #72	; 0x48
 8001eea:	f7ff fda5 	bl	8001a38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001eee:	2108      	movs	r1, #8
 8001ef0:	2047      	movs	r0, #71	; 0x47
 8001ef2:	f7ff fda1 	bl	8001a38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	2032      	movs	r0, #50	; 0x32
 8001efa:	f7ff fd9d 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001efe:	2109      	movs	r1, #9
 8001f00:	2030      	movs	r0, #48	; 0x30
 8001f02:	f7ff fd99 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x01);
 8001f06:	2101      	movs	r1, #1
 8001f08:	20ff      	movs	r0, #255	; 0xff
 8001f0a:	f7ff fd95 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f0e:	2120      	movs	r1, #32
 8001f10:	2030      	movs	r0, #48	; 0x30
 8001f12:	f7ff fd91 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x00);
 8001f16:	2100      	movs	r1, #0
 8001f18:	20ff      	movs	r0, #255	; 0xff
 8001f1a:	f7ff fd8d 	bl	8001a38 <writeReg>
        break;
 8001f1e:	e03b      	b.n	8001f98 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001f20:	2138      	movs	r1, #56	; 0x38
 8001f22:	2048      	movs	r0, #72	; 0x48
 8001f24:	f7ff fd88 	bl	8001a38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f28:	2108      	movs	r1, #8
 8001f2a:	2047      	movs	r0, #71	; 0x47
 8001f2c:	f7ff fd84 	bl	8001a38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f30:	2103      	movs	r1, #3
 8001f32:	2032      	movs	r0, #50	; 0x32
 8001f34:	f7ff fd80 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001f38:	2108      	movs	r1, #8
 8001f3a:	2030      	movs	r0, #48	; 0x30
 8001f3c:	f7ff fd7c 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x01);
 8001f40:	2101      	movs	r1, #1
 8001f42:	20ff      	movs	r0, #255	; 0xff
 8001f44:	f7ff fd78 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f48:	2120      	movs	r1, #32
 8001f4a:	2030      	movs	r0, #48	; 0x30
 8001f4c:	f7ff fd74 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x00);
 8001f50:	2100      	movs	r1, #0
 8001f52:	20ff      	movs	r0, #255	; 0xff
 8001f54:	f7ff fd70 	bl	8001a38 <writeReg>
        break;
 8001f58:	e01e      	b.n	8001f98 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001f5a:	2148      	movs	r1, #72	; 0x48
 8001f5c:	2048      	movs	r0, #72	; 0x48
 8001f5e:	f7ff fd6b 	bl	8001a38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f62:	2108      	movs	r1, #8
 8001f64:	2047      	movs	r0, #71	; 0x47
 8001f66:	f7ff fd67 	bl	8001a38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	2032      	movs	r0, #50	; 0x32
 8001f6e:	f7ff fd63 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001f72:	2107      	movs	r1, #7
 8001f74:	2030      	movs	r0, #48	; 0x30
 8001f76:	f7ff fd5f 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x01);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	20ff      	movs	r0, #255	; 0xff
 8001f7e:	f7ff fd5b 	bl	8001a38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f82:	2120      	movs	r1, #32
 8001f84:	2030      	movs	r0, #48	; 0x30
 8001f86:	f7ff fd57 	bl	8001a38 <writeReg>
        writeReg(0xFF, 0x00);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	20ff      	movs	r0, #255	; 0xff
 8001f8e:	f7ff fd53 	bl	8001a38 <writeReg>
        break;
 8001f92:	e001      	b.n	8001f98 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e03c      	b.n	8002012 <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001f98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	2070      	movs	r0, #112	; 0x70
 8001fa0:	f7ff fd4a 	bl	8001a38 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	79ba      	ldrb	r2, [r7, #6]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fe26 	bl	8001bfc <timeoutMicrosecondsToMclks>
 8001fb0:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001fb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001fb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001fc0:	8a7a      	ldrh	r2, [r7, #18]
 8001fc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fc4:	4413      	add	r3, r2
 8001fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001fc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fe3c 	bl	8001c48 <encodeTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2071      	movs	r0, #113	; 0x71
 8001fd6:	f7ff fd0d 	bl	80019f4 <writeReg16>
 8001fda:	e001      	b.n	8001fe0 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e018      	b.n	8002012 <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <setVcselPulsePeriod+0x29c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f81b 	bl	8002020 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff fc72 	bl	80018d4 <readReg>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fd1d 	bl	8001a38 <writeReg>
  performSingleRefCalibration(0x0);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f916 	bl	8002230 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8002004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002008:	4619      	mov	r1, r3
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff fd14 	bl	8001a38 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	3730      	adds	r7, #48	; 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200008a0 	.word	0x200008a0

08002020 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b090      	sub	sp, #64	; 0x40
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002028:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800202c:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 800202e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002032:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8002034:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002038:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 800203a:	f240 234e 	movw	r3, #590	; 0x24e
 800203e:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8002040:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002044:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8002046:	f44f 7325 	mov.w	r3, #660	; 0x294
 800204a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 800204c:	f240 2326 	movw	r3, #550	; 0x226
 8002050:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8002052:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	429a      	cmp	r2, r3
 800205e:	d201      	bcs.n	8002064 <setMeasurementTimingBudget+0x44>
 8002060:	2300      	movs	r3, #0
 8002062:	e074      	b.n	800214e <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8002064:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002066:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002068:	4413      	add	r3, r2
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff fc31 	bl	80018d4 <readReg>
 8002072:	4603      	mov	r3, r0
 8002074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8002078:	f107 0208 	add.w	r2, r7, #8
 800207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fe0b 	bl	8001c9e <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002098:	4413      	add	r3, r2
 800209a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800209c:	4413      	add	r3, r2
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80020a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020b0:	4413      	add	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b6:	4413      	add	r3, r2
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ba:	e00b      	b.n	80020d4 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80020bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020cc:	4413      	add	r3, r2
 80020ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d0:	4413      	add	r3, r2
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80020d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e4:	4413      	add	r3, r2
 80020e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e8:	4413      	add	r3, r2
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 80020ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da2b      	bge.n	800214c <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 80020f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f8:	4413      	add	r3, r2
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80020fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d901      	bls.n	8002108 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8002104:	2300      	movs	r3, #0
 8002106:	e022      	b.n	800214e <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002110:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6a38      	ldr	r0, [r7, #32]
 8002118:	f7ff fd70 	bl	8001bfc <timeoutMicrosecondsToMclks>
 800211c:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 800211e:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 800212c:	89fa      	ldrh	r2, [r7, #14]
 800212e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002130:	4413      	add	r3, r2
 8002132:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002134:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd86 	bl	8001c48 <encodeTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	4619      	mov	r1, r3
 8002140:	2071      	movs	r0, #113	; 0x71
 8002142:	f7ff fc57 	bl	80019f4 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <setMeasurementTimingBudget+0x138>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6013      	str	r3, [r2, #0]
  }
  return 1;
 800214c:	2301      	movs	r3, #1
}
 800214e:	4618      	mov	r0, r3
 8002150:	3740      	adds	r7, #64	; 0x40
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200008a0 	.word	0x200008a0

0800215c <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8002162:	f240 7376 	movw	r3, #1910	; 0x776
 8002166:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8002168:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800216c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 800216e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002172:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8002174:	f240 234e 	movw	r3, #590	; 0x24e
 8002178:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 800217a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800217e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8002180:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002184:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8002186:	f240 2326 	movw	r3, #550	; 0x226
 800218a:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 800218c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800218e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002190:	4413      	add	r3, r2
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002194:	2001      	movs	r0, #1
 8002196:	f7ff fb9d 	bl	80018d4 <readReg>
 800219a:	4603      	mov	r3, r0
 800219c:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 800219e:	1d3a      	adds	r2, r7, #4
 80021a0:	7f7b      	ldrb	r3, [r7, #29]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fd7a 	bl	8001c9e <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 80021aa:	7f7b      	ldrb	r3, [r7, #29]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021b8:	4413      	add	r3, r2
 80021ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021bc:	4413      	add	r3, r2
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80021c0:	7f7b      	ldrb	r3, [r7, #29]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021ce:	4413      	add	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d4:	4413      	add	r3, r2
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d8:	e00a      	b.n	80021f0 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80021da:	7f7b      	ldrb	r3, [r7, #29]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021e8:	4413      	add	r3, r2
 80021ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ec:	4413      	add	r3, r2
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80021f0:	7f7b      	ldrb	r3, [r7, #29]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	8c3b      	ldrh	r3, [r7, #32]
 80021fe:	4413      	add	r3, r2
 8002200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002202:	4413      	add	r3, r2
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002206:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da05      	bge.n	800221a <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	8bfb      	ldrh	r3, [r7, #30]
 8002212:	4413      	add	r3, r2
 8002214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002216:	4413      	add	r3, r2
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <getMeasurementTimingBudget+0xd0>)
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	6013      	str	r3, [r2, #0]
  return budget_us;
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002222:	4618      	mov	r0, r3
 8002224:	3730      	adds	r7, #48	; 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200008a0 	.word	0x200008a0

08002230 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fbf7 	bl	8001a38 <writeReg>

  iTimeout = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800224e:	e00a      	b.n	8002266 <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8002256:	2005      	movs	r0, #5
 8002258:	f001 ff3c 	bl	80040d4 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	dd01      	ble.n	8002266 <performSingleRefCalibration+0x36>
 8002262:	2300      	movs	r3, #0
 8002264:	e010      	b.n	8002288 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002266:	2013      	movs	r0, #19
 8002268:	f7ff fb34 	bl	80018d4 <readReg>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ec      	beq.n	8002250 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002276:	2101      	movs	r1, #1
 8002278:	200b      	movs	r0, #11
 800227a:	f7ff fbdd 	bl	8001a38 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800227e:	2100      	movs	r1, #0
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff fbd9 	bl	8001a38 <writeReg>

  return 1;
 8002286:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8002298:	2300      	movs	r3, #0
 800229a:	75bb      	strb	r3, [r7, #22]
 800229c:	2300      	movs	r3, #0
 800229e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80022a0:	2089      	movs	r0, #137	; 0x89
 80022a2:	f7ff fb17 	bl	80018d4 <readReg>
 80022a6:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	2089      	movs	r0, #137	; 0x89
 80022b2:	f7ff fbc1 	bl	8001a38 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 80022b6:	486a      	ldr	r0, [pc, #424]	; (8002460 <initSensor+0x1d0>)
 80022b8:	f7ff fbda 	bl	8001a70 <writeRegList>
  stop_variable = readReg(0x91);
 80022bc:	2091      	movs	r0, #145	; 0x91
 80022be:	f7ff fb09 	bl	80018d4 <readReg>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b67      	ldr	r3, [pc, #412]	; (8002464 <initSensor+0x1d4>)
 80022c8:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 80022ca:	4867      	ldr	r0, [pc, #412]	; (8002468 <initSensor+0x1d8>)
 80022cc:	f7ff fbd0 	bl	8001a70 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 80022d0:	2060      	movs	r0, #96	; 0x60
 80022d2:	f7ff faff 	bl	80018d4 <readReg>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f043 0312 	orr.w	r3, r3, #18
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4619      	mov	r1, r3
 80022e0:	2060      	movs	r0, #96	; 0x60
 80022e2:	f7ff fba9 	bl	8001a38 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 80022e6:	2120      	movs	r1, #32
 80022e8:	2044      	movs	r0, #68	; 0x44
 80022ea:	f7ff fb83 	bl	80019f4 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80022ee:	21ff      	movs	r1, #255	; 0xff
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff fba1 	bl	8001a38 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 80022f6:	f107 0215 	add.w	r2, r7, #21
 80022fa:	f107 0316 	add.w	r3, r7, #22
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fbd9 	bl	8001ab8 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2206      	movs	r2, #6
 800230c:	4619      	mov	r1, r3
 800230e:	20b0      	movs	r0, #176	; 0xb0
 8002310:	f7ff fb00 	bl	8001914 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 8002314:	4855      	ldr	r0, [pc, #340]	; (800246c <initSensor+0x1dc>)
 8002316:	f7ff fbab 	bl	8001a70 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 800231a:	7d7b      	ldrb	r3, [r7, #21]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <initSensor+0x94>
 8002320:	230c      	movs	r3, #12
 8002322:	e000      	b.n	8002326 <initSensor+0x96>
 8002324:	2300      	movs	r3, #0
 8002326:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	e037      	b.n	80023a2 <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	429a      	cmp	r2, r3
 8002338:	db03      	blt.n	8002342 <initSensor+0xb2>
 800233a:	7dbb      	ldrb	r3, [r7, #22]
 800233c:	7ffa      	ldrb	r2, [r7, #31]
 800233e:	429a      	cmp	r2, r3
 8002340:	d119      	bne.n	8002376 <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	10db      	asrs	r3, r3, #3
 8002346:	3320      	adds	r3, #32
 8002348:	443b      	add	r3, r7
 800234a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800234e:	b25a      	sxtb	r2, r3
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	b25b      	sxtb	r3, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	b25b      	sxtb	r3, r3
 8002362:	4013      	ands	r3, r2
 8002364:	b25a      	sxtb	r2, r3
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	10db      	asrs	r3, r3, #3
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	3320      	adds	r3, #32
 800236e:	443b      	add	r3, r7
 8002370:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002374:	e012      	b.n	800239c <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	10db      	asrs	r3, r3, #3
 800237a:	3320      	adds	r3, #32
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002382:	461a      	mov	r2, r3
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	fa42 f303 	asr.w	r3, r2, r3
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	3301      	adds	r3, #1
 800239a:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3301      	adds	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b2f      	cmp	r3, #47	; 0x2f
 80023a6:	ddc4      	ble.n	8002332 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2206      	movs	r2, #6
 80023ae:	4619      	mov	r1, r3
 80023b0:	20b0      	movs	r0, #176	; 0xb0
 80023b2:	f7ff facf 	bl	8001954 <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 80023b6:	482e      	ldr	r0, [pc, #184]	; (8002470 <initSensor+0x1e0>)
 80023b8:	f7ff fb5a 	bl	8001a70 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 80023c2:	210d      	movs	r1, #13
 80023c4:	2044      	movs	r0, #68	; 0x44
 80023c6:	f7ff fb15 	bl	80019f4 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 80023ca:	2112      	movs	r1, #18
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fcd7 	bl	8001d80 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80023d2:	210e      	movs	r1, #14
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7ff fcd3 	bl	8001d80 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80023da:	2104      	movs	r1, #4
 80023dc:	200a      	movs	r0, #10
 80023de:	f7ff fb2b 	bl	8001a38 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80023e2:	2084      	movs	r0, #132	; 0x84
 80023e4:	f7ff fa76 	bl	80018d4 <readReg>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f023 0310 	bic.w	r3, r3, #16
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	2084      	movs	r0, #132	; 0x84
 80023f4:	f7ff fb20 	bl	8001a38 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80023f8:	2101      	movs	r1, #1
 80023fa:	200b      	movs	r0, #11
 80023fc:	f7ff fb1c 	bl	8001a38 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8002400:	f7ff feac 	bl	800215c <getMeasurementTimingBudget>
 8002404:	4603      	mov	r3, r0
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <initSensor+0x1e4>)
 8002408:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 800240a:	21e8      	movs	r1, #232	; 0xe8
 800240c:	2001      	movs	r0, #1
 800240e:	f7ff fb13 	bl	8001a38 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <initSensor+0x1e4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fe02 	bl	8002020 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800241c:	2101      	movs	r1, #1
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff fb0a 	bl	8001a38 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8002424:	2040      	movs	r0, #64	; 0x40
 8002426:	f7ff ff03 	bl	8002230 <performSingleRefCalibration>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <initSensor+0x1a4>
 8002430:	2300      	movs	r3, #0
 8002432:	e010      	b.n	8002456 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002434:	2102      	movs	r1, #2
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fafe 	bl	8001a38 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fef7 	bl	8002230 <performSingleRefCalibration>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <initSensor+0x1bc>
 8002448:	2300      	movs	r3, #0
 800244a:	e004      	b.n	8002456 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 800244c:	21e8      	movs	r1, #232	; 0xe8
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff faf2 	bl	8001a38 <writeReg>
  return 1;
 8002454:	2301      	movs	r3, #1
} /* initSensor() */
 8002456:	4618      	mov	r0, r3
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000024 	.word	0x20000024
 8002464:	2000089c 	.word	0x2000089c
 8002468:	20000030 	.word	0x20000030
 800246c:	2000005c 	.word	0x2000005c
 8002470:	20000068 	.word	0x20000068
 8002474:	200008a0 	.word	0x200008a0

08002478 <tofGetModel>:
  return readRangeContinuousMillimeters();

} /* tofReadDistance() */

int tofGetModel(int *model, int *revision)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d019      	beq.n	80024bc <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 8002488:	23c0      	movs	r3, #192	; 0xc0
 800248a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800248c:	f107 020e 	add.w	r2, r7, #14
 8002490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	2152      	movs	r1, #82	; 0x52
 800249a:	4819      	ldr	r0, [pc, #100]	; (8002500 <tofGetModel+0x88>)
 800249c:	f002 fed0 	bl	8005240 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80024a0:	f107 020f 	add.w	r2, r7, #15
 80024a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	2153      	movs	r1, #83	; 0x53
 80024ae:	4814      	ldr	r0, [pc, #80]	; (8002500 <tofGetModel+0x88>)
 80024b0:	f002 ffc4 	bl	800543c <HAL_I2C_Master_Receive>
		*model = ucTemp;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	461a      	mov	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d019      	beq.n	80024f6 <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 80024c2:	23c2      	movs	r3, #194	; 0xc2
 80024c4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80024c6:	f107 020e 	add.w	r2, r7, #14
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	2152      	movs	r1, #82	; 0x52
 80024d4:	480a      	ldr	r0, [pc, #40]	; (8002500 <tofGetModel+0x88>)
 80024d6:	f002 feb3 	bl	8005240 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80024da:	f107 020f 	add.w	r2, r7, #15
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	2153      	movs	r1, #83	; 0x53
 80024e8:	4805      	ldr	r0, [pc, #20]	; (8002500 <tofGetModel+0x88>)
 80024ea:	f002 ffa7 	bl	800543c <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	461a      	mov	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
	}
	return 1;
 80024f6:	2301      	movs	r3, #1

} /* tofGetModel() */
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200008a4 	.word	0x200008a4

08002504 <initTof>:
 * @brief Use to initialize the ToF sensor
 *
 * @return
 */
int initTof()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	int model = 0, revision = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, SET);
 8002512:	2201      	movs	r2, #1
 8002514:	2120      	movs	r1, #32
 8002516:	4821      	ldr	r0, [pc, #132]	; (800259c <initTof+0x98>)
 8002518:	f002 fcd4 	bl	8004ec4 <HAL_GPIO_WritePin>
	while(I2C2->CR2==2)
 800251c:	e00d      	b.n	800253a <initTof+0x36>
		{
		  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 800251e:	bf00      	nop
 8002520:	481f      	ldr	r0, [pc, #124]	; (80025a0 <initTof+0x9c>)
 8002522:	f002 fe5d 	bl	80051e0 <HAL_I2C_DeInit>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f9      	bne.n	8002520 <initTof+0x1c>
		  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 800252c:	bf00      	nop
 800252e:	481c      	ldr	r0, [pc, #112]	; (80025a0 <initTof+0x9c>)
 8002530:	f002 fd12 	bl	8004f58 <HAL_I2C_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <initTof+0x2a>
	while(I2C2->CR2==2)
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <initTof+0xa0>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d0ed      	beq.n	800251e <initTof+0x1a>
		}

	tofInit(1); // set long range mode (up to 2m)
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff f994 	bl	8001870 <tofInit>
	tofGetModel(&model, &revision);
 8002548:	463a      	mov	r2, r7
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff92 	bl	8002478 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 8002554:	e016      	b.n	8002584 <initTof+0x80>
	{
	while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 8002556:	bf00      	nop
 8002558:	4811      	ldr	r0, [pc, #68]	; (80025a0 <initTof+0x9c>)
 800255a:	f002 fe41 	bl	80051e0 <HAL_I2C_DeInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <initTof+0x54>
	while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8002564:	bf00      	nop
 8002566:	480e      	ldr	r0, [pc, #56]	; (80025a0 <initTof+0x9c>)
 8002568:	f002 fcf6 	bl	8004f58 <HAL_I2C_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <initTof+0x62>
	tofInit(1); // set long range mode (up to 2m)
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff f97c 	bl	8001870 <tofInit>
	tofGetModel(&model, &revision);
 8002578:	463a      	mov	r2, r7
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff7a 	bl	8002478 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2bee      	cmp	r3, #238	; 0xee
 8002588:	d1e5      	bne.n	8002556 <initTof+0x52>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d1e2      	bne.n	8002556 <initTof+0x52>
	}
	return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40010c00 	.word	0x40010c00
 80025a0:	200008a4 	.word	0x200008a4
 80025a4:	40005800 	.word	0x40005800

080025a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a33      	ldr	r2, [pc, #204]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025c2:	f043 0310 	orr.w	r3, r3, #16
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025da:	f043 0320 	orr.w	r3, r3, #32
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a27      	ldr	r2, [pc, #156]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <MX_GPIO_Init+0xe8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <MX_GPIO_Init+0xe8>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a21      	ldr	r2, [pc, #132]	; (8002690 <MX_GPIO_Init+0xe8>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_GPIO_Init+0xe8>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800261c:	2200      	movs	r2, #0
 800261e:	f24f 0120 	movw	r1, #61472	; 0xf020
 8002622:	481c      	ldr	r0, [pc, #112]	; (8002694 <MX_GPIO_Init+0xec>)
 8002624:	f002 fc4e 	bl	8004ec4 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8002628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800262c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <MX_GPIO_Init+0xf0>)
 8002630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4619      	mov	r1, r3
 800263c:	4817      	ldr	r0, [pc, #92]	; (800269c <MX_GPIO_Init+0xf4>)
 800263e:	f002 f9e1 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002642:	f24f 0320 	movw	r3, #61472	; 0xf020
 8002646:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2302      	movs	r3, #2
 8002652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	480e      	ldr	r0, [pc, #56]	; (8002694 <MX_GPIO_Init+0xec>)
 800265c:	f002 f9d2 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8002660:	2310      	movs	r3, #16
 8002662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_GPIO_Init+0xf0>)
 8002666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4619      	mov	r1, r3
 8002672:	4808      	ldr	r0, [pc, #32]	; (8002694 <MX_GPIO_Init+0xec>)
 8002674:	f002 f9c6 	bl	8004a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	2028      	movs	r0, #40	; 0x28
 800267e:	f002 f848 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002682:	2028      	movs	r0, #40	; 0x28
 8002684:	f002 f861 	bl	800474a <HAL_NVIC_EnableIRQ>

}
 8002688:	bf00      	nop
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	40010c00 	.word	0x40010c00
 8002698:	10110000 	.word	0x10110000
 800269c:	40011000 	.word	0x40011000

080026a0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <MX_I2C2_Init+0x54>)
 80026a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026ac:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <MX_I2C2_Init+0x58>)
 80026ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <MX_I2C2_Init+0x50>)
 80026de:	f002 fc3b 	bl	8004f58 <HAL_I2C_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026e8:	f000 fbaa 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200008a4 	.word	0x200008a4
 80026f4:	40005800 	.word	0x40005800
 80026f8:	000186a0 	.word	0x000186a0

080026fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_I2C_MspInit+0x74>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d124      	bne.n	8002766 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_I2C_MspInit+0x78>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_I2C_MspInit+0x78>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_I2C_MspInit+0x78>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 8002734:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273a:	2312      	movs	r3, #18
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	4619      	mov	r1, r3
 8002748:	480b      	ldr	r0, [pc, #44]	; (8002778 <HAL_I2C_MspInit+0x7c>)
 800274a:	f002 f95b 	bl	8004a04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_I2C_MspInit+0x78>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_I2C_MspInit+0x78>)
 8002754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002758:	61d3      	str	r3, [r2, #28]
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_I2C_MspInit+0x78>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40005800 	.word	0x40005800
 8002774:	40021000 	.word	0x40021000
 8002778:	40010c00 	.word	0x40010c00

0800277c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_I2C_MspDeInit+0x3c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10f      	bne.n	80027ae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_I2C_MspDeInit+0x40>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_I2C_MspDeInit+0x40>)
 8002794:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002798:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(TOF_SCL_GPIO_Port, TOF_SCL_Pin);
 800279a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <HAL_I2C_MspDeInit+0x44>)
 80027a0:	f002 fac4 	bl	8004d2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(TOF_SDA_GPIO_Port, TOF_SDA_Pin);
 80027a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <HAL_I2C_MspDeInit+0x44>)
 80027aa:	f002 fabf 	bl	8004d2c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40005800 	.word	0x40005800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010c00 	.word	0x40010c00

080027c4 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	switch (i)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d827      	bhi.n	8002824 <TurnOffLed+0x60>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <TurnOffLed+0x18>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	080027fb 	.word	0x080027fb
 80027e4:	08002809 	.word	0x08002809
 80027e8:	08002817 	.word	0x08002817
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f2:	480e      	ldr	r0, [pc, #56]	; (800282c <TurnOffLed+0x68>)
 80027f4:	f002 fb66 	bl	8004ec4 <HAL_GPIO_WritePin>
		    break;
 80027f8:	e014      	b.n	8002824 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <TurnOffLed+0x68>)
 8002802:	f002 fb5f 	bl	8004ec4 <HAL_GPIO_WritePin>
			break;
 8002806:	e00d      	b.n	8002824 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <TurnOffLed+0x68>)
 8002810:	f002 fb58 	bl	8004ec4 <HAL_GPIO_WritePin>
			break;
 8002814:	e006      	b.n	8002824 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <TurnOffLed+0x68>)
 800281e:	f002 fb51 	bl	8004ec4 <HAL_GPIO_WritePin>
			break;
 8002822:	bf00      	nop
	}

}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40010c00 	.word	0x40010c00

08002830 <SwitchLed>:



void SwitchLed(int i)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	switch (i)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	2b03      	cmp	r3, #3
 800283e:	d823      	bhi.n	8002888 <SwitchLed+0x58>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <SwitchLed+0x18>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	08002859 	.word	0x08002859
 800284c:	08002865 	.word	0x08002865
 8002850:	08002871 	.word	0x08002871
 8002854:	0800287d 	.word	0x0800287d
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <SwitchLed+0x60>)
 800285e:	f002 fb49 	bl	8004ef4 <HAL_GPIO_TogglePin>
			break;
 8002862:	e011      	b.n	8002888 <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8002864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002868:	4809      	ldr	r0, [pc, #36]	; (8002890 <SwitchLed+0x60>)
 800286a:	f002 fb43 	bl	8004ef4 <HAL_GPIO_TogglePin>
			break;
 800286e:	e00b      	b.n	8002888 <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8002870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002874:	4806      	ldr	r0, [pc, #24]	; (8002890 <SwitchLed+0x60>)
 8002876:	f002 fb3d 	bl	8004ef4 <HAL_GPIO_TogglePin>
			break;
 800287a:	e005      	b.n	8002888 <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 800287c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002880:	4803      	ldr	r0, [pc, #12]	; (8002890 <SwitchLed+0x60>)
 8002882:	f002 fb37 	bl	8004ef4 <HAL_GPIO_TogglePin>
			break;
 8002886:	bf00      	nop
	}

}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40010c00 	.word	0x40010c00

08002894 <LedError>:



void LedError()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002898:	2201      	movs	r2, #1
 800289a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289e:	480b      	ldr	r0, [pc, #44]	; (80028cc <LedError+0x38>)
 80028a0:	f002 fb10 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028aa:	4808      	ldr	r0, [pc, #32]	; (80028cc <LedError+0x38>)
 80028ac:	f002 fb0a 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <LedError+0x38>)
 80028b8:	f002 fb04 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c2:	4802      	ldr	r0, [pc, #8]	; (80028cc <LedError+0x38>)
 80028c4:	f002 fafe 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40010c00 	.word	0x40010c00

080028d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d4:	f001 fb9c 	bl	8004010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028d8:	f000 f876 	bl	80029c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028dc:	f7ff fe64 	bl	80025a8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80028e0:	f000 ff62 	bl	80037a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80028e4:	f001 fa76 	bl	8003dd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80028e8:	f001 fa9e 	bl	8003e28 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80028ec:	f000 fe44 	bl	8003578 <MX_TIM1_Init>
  MX_TIM2_Init();
 80028f0:	f000 ff06 	bl	8003700 <MX_TIM2_Init>
  MX_TIM5_Init();
 80028f4:	f001 f81e 	bl	8003934 <MX_TIM5_Init>
  MX_ADC1_Init();
 80028f8:	f7fe ff28 	bl	800174c <MX_ADC1_Init>
  MX_TIM7_Init();
 80028fc:	f001 f8a4 	bl	8003a48 <MX_TIM7_Init>
  MX_TIM6_Init();
 8002900:	f001 f86c 	bl	80039dc <MX_TIM6_Init>
  MX_TIM4_Init();
 8002904:	f000 ffc8 	bl	8003898 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002908:	f7ff feca 	bl	80026a0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800290c:	2201      	movs	r2, #1
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <main+0xc8>)
 8002910:	4822      	ldr	r0, [pc, #136]	; (800299c <main+0xcc>)
 8002912:	f005 fb1f 	bl	8007f54 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f001 fbdc 	bl	80040d4 <HAL_Delay>
  shellInit();
 800291c:	f000 fa98 	bl	8002e50 <shellInit>

  HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
 8002920:	2210      	movs	r2, #16
 8002922:	491f      	ldr	r1, [pc, #124]	; (80029a0 <main+0xd0>)
 8002924:	481f      	ldr	r0, [pc, #124]	; (80029a4 <main+0xd4>)
 8002926:	f005 fb15 	bl	8007f54 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f001 fbd2 	bl	80040d4 <HAL_Delay>

  //int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
  //TestSensorOnI2C(tabI2CAdd);
  initTof();
 8002930:	f7ff fde8 	bl	8002504 <initTof>
  //int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
  //TestSensorOnI2C(tabI2CAdd);

  TurnOffLed(1);
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff ff45 	bl	80027c4 <TurnOffLed>
  TurnOffLed(2);
 800293a:	2002      	movs	r0, #2
 800293c:	f7ff ff42 	bl	80027c4 <TurnOffLed>
  TurnOffLed(3);
 8002940:	2003      	movs	r0, #3
 8002942:	f7ff ff3f 	bl	80027c4 <TurnOffLed>
  TurnOffLed(4);
 8002946:	2004      	movs	r0, #4
 8002948:	f7ff ff3c 	bl	80027c4 <TurnOffLed>

  HAL_TIM_Base_Start_IT(&htim3);
 800294c:	4816      	ldr	r0, [pc, #88]	; (80029a8 <main+0xd8>)
 800294e:	f004 f823 	bl	8006998 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002952:	2100      	movs	r1, #0
 8002954:	4814      	ldr	r0, [pc, #80]	; (80029a8 <main+0xd8>)
 8002956:	f004 f991 	bl	8006c7c <HAL_TIM_PWM_Start_IT>
  ControlServo(SERVO_CLOSED);
 800295a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800295e:	f7fe feb9 	bl	80016d4 <ControlServo>

  HAL_TIM_Base_Start_IT(&htim6);
 8002962:	4812      	ldr	r0, [pc, #72]	; (80029ac <main+0xdc>)
 8002964:	f004 f818 	bl	8006998 <HAL_TIM_Base_Start_IT>
  InitMCC();
 8002968:	f7fe fc0a 	bl	8001180 <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800296c:	213c      	movs	r1, #60	; 0x3c
 800296e:	4810      	ldr	r0, [pc, #64]	; (80029b0 <main+0xe0>)
 8002970:	f004 fb26 	bl	8006fc0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002974:	213c      	movs	r1, #60	; 0x3c
 8002976:	480f      	ldr	r0, [pc, #60]	; (80029b4 <main+0xe4>)
 8002978:	f004 fb22 	bl	8006fc0 <HAL_TIM_Encoder_Start>

  PIController_Init(&MoteurD);
 800297c:	480e      	ldr	r0, [pc, #56]	; (80029b8 <main+0xe8>)
 800297e:	f7fe fd0b 	bl	8001398 <PIController_Init>
  PIController_Init(&MoteurG);
 8002982:	480e      	ldr	r0, [pc, #56]	; (80029bc <main+0xec>)
 8002984:	f7fe fd08 	bl	8001398 <PIController_Init>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <main+0xf0>)
 800298a:	f004 f805 	bl	8006998 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <main+0xf4>)
 8002990:	f004 f802 	bl	8006998 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start)
 8002994:	e7fe      	b.n	8002994 <main+0xc4>
 8002996:	bf00      	nop
 8002998:	20000bd8 	.word	0x20000bd8
 800299c:	20000bec 	.word	0x20000bec
 80029a0:	20000bdc 	.word	0x20000bdc
 80029a4:	20000c30 	.word	0x20000c30
 80029a8:	20000a70 	.word	0x20000a70
 80029ac:	20000b48 	.word	0x20000b48
 80029b0:	20000a28 	.word	0x20000a28
 80029b4:	20000b00 	.word	0x20000b00
 80029b8:	20000920 	.word	0x20000920
 80029bc:	20000948 	.word	0x20000948
 80029c0:	20000b90 	.word	0x20000b90
 80029c4:	20000ab8 	.word	0x20000ab8

080029c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b096      	sub	sp, #88	; 0x58
 80029cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d2:	2228      	movs	r2, #40	; 0x28
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f005 ff50 	bl	800887c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a10:	2302      	movs	r3, #2
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fa95 	bl	8005f54 <HAL_RCC_OscConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002a30:	f000 fa06 	bl	8002e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a34:	230f      	movs	r3, #15
 8002a36:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 fd01 	bl	8006458 <HAL_RCC_ClockConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a5c:	f000 f9f0 	bl	8002e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a60:	2302      	movs	r3, #2
 8002a62:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a68:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fe8d 	bl	800678c <HAL_RCCEx_PeriphCLKConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a78:	f000 f9e2 	bl	8002e40 <Error_Handler>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3758      	adds	r7, #88	; 0x58
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002a8c:	1d39      	adds	r1, r7, #4
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	2201      	movs	r2, #1
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <__io_putchar+0x20>)
 8002a96:	f005 f9cb 	bl	8007e30 <HAL_UART_Transmit>
	return ch;
 8002a9a:	687b      	ldr	r3, [r7, #4]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000bec 	.word	0x20000bec

08002aa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // 50Hz freq lecture TOF
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4aae      	ldr	r2, [pc, #696]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	f000 817b 	beq.w	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
		//TOF_dist = tofReadDistance();//scan
	}



	else if (htim->Instance == TIM7) //Tim 7 1sec pour du printf shell
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4aac      	ldr	r2, [pc, #688]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f000 8175 	beq.w	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
		//printf("ali petit zizi ca rime...je dis ca je dis rien\r\n");
		//TOF_dist = tofReadDistance();//scan
		//printf("distance : %d\r\n", TOF_dist);
	}

	else if (htim->Instance == TIM4) //Delay Tof
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4aaa      	ldr	r2, [pc, #680]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f000 816f 	beq.w	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
		{
		}

	else if (htim->Instance == TIM6) //Tim 6 asserv en vitesse a 0.1sec
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4aa8      	ldr	r2, [pc, #672]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f040 8168 	bne.w	8002db0 <HAL_TIM_PeriodElapsedCallback+0x308>
		{

		switch(action)
 8002ae0:	4ba7      	ldr	r3, [pc, #668]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d127      	bne.n	8002b38 <HAL_TIM_PeriodElapsedCallback+0x90>
		{
		case TOURNER :
			if(sens)dist -=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002ae8:	4ba6      	ldr	r3, [pc, #664]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d011      	beq.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8002af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af6:	4ba4      	ldr	r3, [pc, #656]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	4413      	add	r3, r2
 8002afc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002b00:	3bfe      	subs	r3, #254	; 0xfe
 8002b02:	0859      	lsrs	r1, r3, #1
 8002b04:	4ba1      	ldr	r3, [pc, #644]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	b28b      	uxth	r3, r1
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b9f      	ldr	r3, [pc, #636]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b10:	801a      	strh	r2, [r3, #0]
			else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
			break;
 8002b12:	e020      	b.n	8002b56 <HAL_TIM_PeriodElapsedCallback+0xae>
			else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b1a:	4b9b      	ldr	r3, [pc, #620]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	4413      	add	r3, r2
 8002b20:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002b24:	3bfe      	subs	r3, #254	; 0xfe
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b98      	ldr	r3, [pc, #608]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b96      	ldr	r3, [pc, #600]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b34:	801a      	strh	r2, [r3, #0]
			break;
 8002b36:	e00e      	b.n	8002b56 <HAL_TIM_PeriodElapsedCallback+0xae>
		default :
			dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ( Mid_Period_TIM5 - (TIM5->CNT)) ) / 2; //on moyenne la valeur
 8002b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3e:	4b92      	ldr	r3, [pc, #584]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b8e      	ldr	r3, [pc, #568]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b52:	801a      	strh	r2, [r3, #0]
			break;
 8002b54:	bf00      	nop
		}

		  ReadEncodeur();
 8002b56:	f7fe fbf9 	bl	800134c <ReadEncodeur>

		  if(consigneD == 0)
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0xc0>
		  {
			  Stop();
 8002b62:	f7fe fba9 	bl	80012b8 <Stop>
				break;
			}

		  }
		}
}
 8002b66:	e124      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
			switch(action)
 8002b68:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f000 809a 	beq.w	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f300 80f9 	bgt.w	8002d6a <HAL_TIM_PeriodElapsedCallback+0x2c2>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_TIM_PeriodElapsedCallback+0xda>
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d049      	beq.n	8002c14 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002b80:	e0f3      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x2c2>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002b82:	4b83      	ldr	r3, [pc, #524]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f9d2 	bl	8000f30 <__aeabi_i2f>
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	22c8      	movs	r2, #200	; 0xc8
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	4a7f      	ldr	r2, [pc, #508]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b9e:	1152      	asrs	r2, r2, #5
 8002ba0:	17db      	asrs	r3, r3, #31
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f9c3 	bl	8000f30 <__aeabi_i2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4621      	mov	r1, r4
 8002bb0:	487a      	ldr	r0, [pc, #488]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002bb2:	f7fe fc2f 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002bb6:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f9b8 	bl	8000f30 <__aeabi_i2f>
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	22c8      	movs	r2, #200	; 0xc8
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	4a76      	ldr	r2, [pc, #472]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002bce:	fb82 1203 	smull	r1, r2, r2, r3
 8002bd2:	1112      	asrs	r2, r2, #4
 8002bd4:	17db      	asrs	r3, r3, #31
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f9a9 	bl	8000f30 <__aeabi_i2f>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	4621      	mov	r1, r4
 8002be4:	4871      	ldr	r0, [pc, #452]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002be6:	f7fe fc15 	bl	8001414 <PIController_Update>
				AvancerPI(0, MoteurD.out);
 8002bea:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fa68 	bl	80010c4 <__aeabi_f2iz>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fe faf7 	bl	80011ec <AvancerPI>
				AvancerPI(1, MoteurG.out);
 8002bfe:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fa5e 	bl	80010c4 <__aeabi_f2iz>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7fe faed 	bl	80011ec <AvancerPI>
				break;
 8002c12:	e0ce      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002c14:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f989 	bl	8000f30 <__aeabi_i2f>
 8002c1e:	4604      	mov	r4, r0
 8002c20:	4b5c      	ldr	r3, [pc, #368]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	22c8      	movs	r2, #200	; 0xc8
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c30:	1152      	asrs	r2, r2, #5
 8002c32:	17db      	asrs	r3, r3, #31
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f97a 	bl	8000f30 <__aeabi_i2f>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4621      	mov	r1, r4
 8002c42:	4856      	ldr	r0, [pc, #344]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c44:	f7fe fbe6 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f96f 	bl	8000f30 <__aeabi_i2f>
 8002c52:	4604      	mov	r4, r0
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	22c8      	movs	r2, #200	; 0xc8
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002c60:	fb82 1203 	smull	r1, r2, r2, r3
 8002c64:	1112      	asrs	r2, r2, #4
 8002c66:	17db      	asrs	r3, r3, #31
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe f960 	bl	8000f30 <__aeabi_i2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	4621      	mov	r1, r4
 8002c76:	484d      	ldr	r0, [pc, #308]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c78:	f7fe fbcc 	bl	8001414 <PIController_Update>
				ReculerPI(0, MoteurD.out);
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fa1f 	bl	80010c4 <__aeabi_f2iz>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe faf0 	bl	8001270 <ReculerPI>
				ReculerPI(1, MoteurG.out);
 8002c90:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fa15 	bl	80010c4 <__aeabi_f2iz>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7fe fae6 	bl	8001270 <ReculerPI>
				break;
 8002ca4:	e085      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f940 	bl	8000f30 <__aeabi_i2f>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	22c8      	movs	r2, #200	; 0xc8
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc2:	1152      	asrs	r2, r2, #5
 8002cc4:	17db      	asrs	r3, r3, #31
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe f931 	bl	8000f30 <__aeabi_i2f>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4831      	ldr	r0, [pc, #196]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002cd6:	f7fe fb9d 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f926 	bl	8000f30 <__aeabi_i2f>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	22c8      	movs	r2, #200	; 0xc8
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf6:	1112      	asrs	r2, r2, #4
 8002cf8:	17db      	asrs	r3, r3, #31
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe f917 	bl	8000f30 <__aeabi_i2f>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	4621      	mov	r1, r4
 8002d08:	4828      	ldr	r0, [pc, #160]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002d0a:	f7fe fb83 	bl	8001414 <PIController_Update>
				if(sens)
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d014      	beq.n	8002d40 <HAL_TIM_PeriodElapsedCallback+0x298>
					ReculerPI(0, MoteurD.out);
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe f9d2 	bl	80010c4 <__aeabi_f2iz>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4619      	mov	r1, r3
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fe faa3 	bl	8001270 <ReculerPI>
					AvancerPI(1, MoteurG.out);
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe f9c8 	bl	80010c4 <__aeabi_f2iz>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f7fe fa57 	bl	80011ec <AvancerPI>
				break;
 8002d3e:	e038      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
					AvancerPI(0, MoteurD.out);
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe f9bd 	bl	80010c4 <__aeabi_f2iz>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fe fa4c 	bl	80011ec <AvancerPI>
					ReculerPI(1, MoteurG.out);
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f9b3 	bl	80010c4 <__aeabi_f2iz>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4619      	mov	r1, r3
 8002d62:	2001      	movs	r0, #1
 8002d64:	f7fe fa84 	bl	8001270 <ReculerPI>
				break;
 8002d68:	e023      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
				Stop();
 8002d6a:	f7fe faa5 	bl	80012b8 <Stop>
				break;
 8002d6e:	e020      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x30a>
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40001400 	.word	0x40001400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40001000 	.word	0x40001000
 8002d80:	2000010c 	.word	0x2000010c
 8002d84:	20000914 	.word	0x20000914
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	200008f8 	.word	0x200008f8
 8002d90:	20000908 	.word	0x20000908
 8002d94:	20000904 	.word	0x20000904
 8002d98:	3531dec1 	.word	0x3531dec1
 8002d9c:	20000920 	.word	0x20000920
 8002da0:	20000910 	.word	0x20000910
 8002da4:	2000090c 	.word	0x2000090c
 8002da8:	19c2d14f 	.word	0x19c2d14f
 8002dac:	20000948 	.word	0x20000948
		  }
 8002db0:	bf00      	nop
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	bf00      	nop

08002dbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
	//enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
	Debut_Test();
 8002dc6:	f7fe fc9f 	bl	8001708 <Debut_Test>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_UART_RxCpltCallback+0x54>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10e      	bne.n	8002e04 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002de6:	2201      	movs	r2, #1
 8002de8:	4910      	ldr	r1, [pc, #64]	; (8002e2c <HAL_UART_RxCpltCallback+0x58>)
 8002dea:	4811      	ldr	r0, [pc, #68]	; (8002e30 <HAL_UART_RxCpltCallback+0x5c>)
 8002dec:	f005 f8b2 	bl	8007f54 <HAL_UART_Receive_IT>
		if(shellGetChar())
 8002df0:	f000 f866 	bl	8002ec0 <shellGetChar>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <HAL_UART_RxCpltCallback+0x4c>
		{
		  shellExec();
 8002dfa:	f000 f8d5 	bl	8002fa8 <shellExec>
		  shellPrompt();
 8002dfe:	f000 f83f 	bl	8002e80 <shellPrompt>
	{
		HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
		raspGetChar();
		raspExec();
	}
}
 8002e02:	e00d      	b.n	8002e20 <HAL_UART_RxCpltCallback+0x4c>
	else if(huart->Instance == USART2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_UART_RxCpltCallback+0x60>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <HAL_UART_RxCpltCallback+0x4c>
		HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE_RASP);
 8002e0e:	2210      	movs	r2, #16
 8002e10:	4909      	ldr	r1, [pc, #36]	; (8002e38 <HAL_UART_RxCpltCallback+0x64>)
 8002e12:	480a      	ldr	r0, [pc, #40]	; (8002e3c <HAL_UART_RxCpltCallback+0x68>)
 8002e14:	f005 f89e 	bl	8007f54 <HAL_UART_Receive_IT>
		raspGetChar();
 8002e18:	f7fe fba8 	bl	800156c <raspGetChar>
		raspExec();
 8002e1c:	f7fe fc12 	bl	8001644 <raspExec>
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40013800 	.word	0x40013800
 8002e2c:	20000bd8 	.word	0x20000bd8
 8002e30:	20000bec 	.word	0x20000bec
 8002e34:	40004400 	.word	0x40004400
 8002e38:	20000bdc 	.word	0x20000bdc
 8002e3c:	20000c30 	.word	0x20000c30

08002e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e44:	b672      	cpsid	i
}
 8002e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8002e48:	f7ff fd24 	bl	8002894 <LedError>
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <Error_Handler+0xc>
	...

08002e50 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	226c      	movs	r2, #108	; 0x6c
 8002e5a:	4906      	ldr	r1, [pc, #24]	; (8002e74 <shellInit+0x24>)
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <shellInit+0x28>)
 8002e5e:	f004 ffe7 	bl	8007e30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	220a      	movs	r2, #10
 8002e68:	4904      	ldr	r1, [pc, #16]	; (8002e7c <shellInit+0x2c>)
 8002e6a:	4803      	ldr	r0, [pc, #12]	; (8002e78 <shellInit+0x28>)
 8002e6c:	f004 ffe0 	bl	8007e30 <HAL_UART_Transmit>
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	2000011c 	.word	0x2000011c
 8002e78:	20000bec 	.word	0x20000bec
 8002e7c:	20000110 	.word	0x20000110

08002e80 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	220a      	movs	r2, #10
 8002e8a:	4903      	ldr	r1, [pc, #12]	; (8002e98 <shellPrompt+0x18>)
 8002e8c:	4803      	ldr	r0, [pc, #12]	; (8002e9c <shellPrompt+0x1c>)
 8002e8e:	f004 ffcf 	bl	8007e30 <HAL_UART_Transmit>
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000110 	.word	0x20000110
 8002e9c:	20000bec 	.word	0x20000bec

08002ea0 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	2214      	movs	r2, #20
 8002eaa:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <shellCmdNotFound+0x18>)
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <shellCmdNotFound+0x1c>)
 8002eae:	f004 ffbf 	bl	8007e30 <HAL_UART_Transmit>
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200005f0 	.word	0x200005f0
 8002ebc:	20000bec 	.word	0x20000bec

08002ec0 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8002eca:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <shellGetChar+0xc8>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d030      	beq.n	8002f34 <shellGetChar+0x74>
 8002ed2:	2b0d      	cmp	r3, #13
 8002ed4:	d140      	bne.n	8002f58 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	2203      	movs	r2, #3
 8002edc:	492b      	ldr	r1, [pc, #172]	; (8002f8c <shellGetChar+0xcc>)
 8002ede:	482c      	ldr	r0, [pc, #176]	; (8002f90 <shellGetChar+0xd0>)
 8002ee0:	f004 ffa6 	bl	8007e30 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <shellGetChar+0xd4>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <shellGetChar+0xd8>)
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <shellGetChar+0xdc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8002ef6:	492a      	ldr	r1, [pc, #168]	; (8002fa0 <shellGetChar+0xe0>)
 8002ef8:	4827      	ldr	r0, [pc, #156]	; (8002f98 <shellGetChar+0xd8>)
 8002efa:	f007 f96b 	bl	800a1d4 <strtok>
 8002efe:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8002f00:	e00f      	b.n	8002f22 <shellGetChar+0x62>
			argv[argc++] = token;
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <shellGetChar+0xdc>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	b2d1      	uxtb	r1, r2
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <shellGetChar+0xdc>)
 8002f0c:	7011      	strb	r1, [r2, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <shellGetChar+0xe4>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8002f18:	4921      	ldr	r1, [pc, #132]	; (8002fa0 <shellGetChar+0xe0>)
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f007 f95a 	bl	800a1d4 <strtok>
 8002f20:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ec      	bne.n	8002f02 <shellGetChar+0x42>
		}

		idxCmd = 0;
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <shellGetChar+0xd4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	71fb      	strb	r3, [r7, #7]
		break;
 8002f32:	e023      	b.n	8002f7c <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <shellGetChar+0xd4>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	b2d1      	uxtb	r1, r2
 8002f3c:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <shellGetChar+0xd4>)
 8002f3e:	7011      	strb	r1, [r2, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <shellGetChar+0xd8>)
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	490e      	ldr	r1, [pc, #56]	; (8002f88 <shellGetChar+0xc8>)
 8002f50:	480f      	ldr	r0, [pc, #60]	; (8002f90 <shellGetChar+0xd0>)
 8002f52:	f004 ff6d 	bl	8007e30 <HAL_UART_Transmit>
		break;
 8002f56:	e011      	b.n	8002f7c <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <shellGetChar+0xd4>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	b2d1      	uxtb	r1, r2
 8002f60:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <shellGetChar+0xd4>)
 8002f62:	7011      	strb	r1, [r2, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <shellGetChar+0xc8>)
 8002f68:	7819      	ldrb	r1, [r3, #0]
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <shellGetChar+0xd8>)
 8002f6c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	2201      	movs	r2, #1
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <shellGetChar+0xc8>)
 8002f76:	4806      	ldr	r0, [pc, #24]	; (8002f90 <shellGetChar+0xd0>)
 8002f78:	f004 ff5a 	bl	8007e30 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000bd8 	.word	0x20000bd8
 8002f8c:	20000188 	.word	0x20000188
 8002f90:	20000bec 	.word	0x20000bec
 8002f94:	200009b0 	.word	0x200009b0
 8002f98:	20000970 	.word	0x20000970
 8002f9c:	200009d8 	.word	0x200009d8
 8002fa0:	0800d1c4 	.word	0x0800d1c4
 8002fa4:	200009b4 	.word	0x200009b4

08002fa8 <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 8002fa8:	b598      	push	{r3, r4, r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 8002fac:	4ba4      	ldr	r3, [pc, #656]	; (8003240 <shellExec+0x298>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	49a4      	ldr	r1, [pc, #656]	; (8003244 <shellExec+0x29c>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd f938 	bl	8000228 <strcmp>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d108      	bne.n	8002fd0 <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	f240 2231 	movw	r2, #561	; 0x231
 8002fc6:	49a0      	ldr	r1, [pc, #640]	; (8003248 <shellExec+0x2a0>)
 8002fc8:	48a0      	ldr	r0, [pc, #640]	; (800324c <shellExec+0x2a4>)
 8002fca:	f004 ff31 	bl	8007e30 <HAL_UART_Transmit>

	else{
		shellCmdNotFound();
	}

}
 8002fce:	e134      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"RTFM")==0)
 8002fd0:	4b9b      	ldr	r3, [pc, #620]	; (8003240 <shellExec+0x298>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	499e      	ldr	r1, [pc, #632]	; (8003250 <shellExec+0x2a8>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd f926 	bl	8000228 <strcmp>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8002fea:	499a      	ldr	r1, [pc, #616]	; (8003254 <shellExec+0x2ac>)
 8002fec:	4897      	ldr	r0, [pc, #604]	; (800324c <shellExec+0x2a4>)
 8002fee:	f004 ff1f 	bl	8007e30 <HAL_UART_Transmit>
}
 8002ff2:	e122      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"led")==0)
 8002ff4:	4b92      	ldr	r3, [pc, #584]	; (8003240 <shellExec+0x298>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4997      	ldr	r1, [pc, #604]	; (8003258 <shellExec+0x2b0>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd f914 	bl	8000228 <strcmp>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d110      	bne.n	8003028 <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	2222      	movs	r2, #34	; 0x22
 800300c:	4993      	ldr	r1, [pc, #588]	; (800325c <shellExec+0x2b4>)
 800300e:	488f      	ldr	r0, [pc, #572]	; (800324c <shellExec+0x2a4>)
 8003010:	f004 ff0e 	bl	8007e30 <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 8003014:	4b8a      	ldr	r3, [pc, #552]	; (8003240 <shellExec+0x298>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f005 fbf3 	bl	8008804 <atoi>
 800301e:	4603      	mov	r3, r0
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fc05 	bl	8002830 <SwitchLed>
}
 8003026:	e108      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"avancer")==0)
 8003028:	4b85      	ldr	r3, [pc, #532]	; (8003240 <shellExec+0x298>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	498c      	ldr	r1, [pc, #560]	; (8003260 <shellExec+0x2b8>)
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd f8fa 	bl	8000228 <strcmp>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d110      	bne.n	800305c <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	2225      	movs	r2, #37	; 0x25
 8003040:	4988      	ldr	r1, [pc, #544]	; (8003264 <shellExec+0x2bc>)
 8003042:	4882      	ldr	r0, [pc, #520]	; (800324c <shellExec+0x2a4>)
 8003044:	f004 fef4 	bl	8007e30 <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 8003048:	4b7d      	ldr	r3, [pc, #500]	; (8003240 <shellExec+0x298>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f005 fbd9 	bl	8008804 <atoi>
 8003052:	4603      	mov	r3, r0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe f8ab 	bl	80011b0 <Avancer>
}
 800305a:	e0ee      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"reculer")==0)
 800305c:	4b78      	ldr	r3, [pc, #480]	; (8003240 <shellExec+0x298>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4981      	ldr	r1, [pc, #516]	; (8003268 <shellExec+0x2c0>)
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd f8e0 	bl	8000228 <strcmp>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d110      	bne.n	8003090 <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	2227      	movs	r2, #39	; 0x27
 8003074:	497d      	ldr	r1, [pc, #500]	; (800326c <shellExec+0x2c4>)
 8003076:	4875      	ldr	r0, [pc, #468]	; (800324c <shellExec+0x2a4>)
 8003078:	f004 feda 	bl	8007e30 <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 800307c:	4b70      	ldr	r3, [pc, #448]	; (8003240 <shellExec+0x298>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	f005 fbbf 	bl	8008804 <atoi>
 8003086:	4603      	mov	r3, r0
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe f8d3 	bl	8001234 <Reculer>
}
 800308e:	e0d4      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"stop")==0)
 8003090:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <shellExec+0x298>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4976      	ldr	r1, [pc, #472]	; (8003270 <shellExec+0x2c8>)
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd f8c6 	bl	8000228 <strcmp>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	2216      	movs	r2, #22
 80030a8:	4972      	ldr	r1, [pc, #456]	; (8003274 <shellExec+0x2cc>)
 80030aa:	4868      	ldr	r0, [pc, #416]	; (800324c <shellExec+0x2a4>)
 80030ac:	f004 fec0 	bl	8007e30 <HAL_UART_Transmit>
		Stop();
 80030b0:	f7fe f902 	bl	80012b8 <Stop>
}
 80030b4:	e0c1      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"tourner")==0)
 80030b6:	4b62      	ldr	r3, [pc, #392]	; (8003240 <shellExec+0x298>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	496f      	ldr	r1, [pc, #444]	; (8003278 <shellExec+0x2d0>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd f8b3 	bl	8000228 <strcmp>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d12a      	bne.n	800311e <shellExec+0x176>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 80030c8:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <shellExec+0x298>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	496b      	ldr	r1, [pc, #428]	; (800327c <shellExec+0x2d4>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd f8aa 	bl	8000228 <strcmp>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <shellExec+0x146>
 80030da:	4b59      	ldr	r3, [pc, #356]	; (8003240 <shellExec+0x298>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4968      	ldr	r1, [pc, #416]	; (8003280 <shellExec+0x2d8>)
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f8a1 	bl	8000228 <strcmp>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a6 	beq.w	800323a <shellExec+0x292>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	2230      	movs	r2, #48	; 0x30
 80030f4:	4963      	ldr	r1, [pc, #396]	; (8003284 <shellExec+0x2dc>)
 80030f6:	4855      	ldr	r0, [pc, #340]	; (800324c <shellExec+0x2a4>)
 80030f8:	f004 fe9a 	bl	8007e30 <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <shellExec+0x298>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	f005 fb7f 	bl	8008804 <atoi>
 8003106:	4604      	mov	r4, r0
 8003108:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <shellExec+0x298>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4618      	mov	r0, r3
 800310e:	f005 fb79 	bl	8008804 <atoi>
 8003112:	4603      	mov	r3, r0
 8003114:	4619      	mov	r1, r3
 8003116:	4620      	mov	r0, r4
 8003118:	f7fe f8e2 	bl	80012e0 <Tourner>
}
 800311c:	e08d      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"avancerPI")==0)
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <shellExec+0x298>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4959      	ldr	r1, [pc, #356]	; (8003288 <shellExec+0x2e0>)
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f87f 	bl	8000228 <strcmp>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d117      	bne.n	8003160 <shellExec+0x1b8>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	2225      	movs	r2, #37	; 0x25
 8003136:	494b      	ldr	r1, [pc, #300]	; (8003264 <shellExec+0x2bc>)
 8003138:	4844      	ldr	r0, [pc, #272]	; (800324c <shellExec+0x2a4>)
 800313a:	f004 fe79 	bl	8007e30 <HAL_UART_Transmit>
		consigneD = atoi(argv[1]);
 800313e:	4b40      	ldr	r3, [pc, #256]	; (8003240 <shellExec+0x298>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f005 fb5e 	bl	8008804 <atoi>
 8003148:	4603      	mov	r3, r0
 800314a:	4a50      	ldr	r2, [pc, #320]	; (800328c <shellExec+0x2e4>)
 800314c:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[1]);
 800314e:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <shellExec+0x298>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	f005 fb56 	bl	8008804 <atoi>
 8003158:	4603      	mov	r3, r0
 800315a:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <shellExec+0x2e8>)
 800315c:	6013      	str	r3, [r2, #0]
}
 800315e:	e06c      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"actionPI")==0)
 8003160:	4b37      	ldr	r3, [pc, #220]	; (8003240 <shellExec+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	494b      	ldr	r1, [pc, #300]	; (8003294 <shellExec+0x2ec>)
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f85e 	bl	8000228 <strcmp>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d12b      	bne.n	80031ca <shellExec+0x222>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	2225      	movs	r2, #37	; 0x25
 8003178:	493a      	ldr	r1, [pc, #232]	; (8003264 <shellExec+0x2bc>)
 800317a:	4834      	ldr	r0, [pc, #208]	; (800324c <shellExec+0x2a4>)
 800317c:	f004 fe58 	bl	8007e30 <HAL_UART_Transmit>
		action = atoi(argv[1]);
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <shellExec+0x298>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f005 fb3d 	bl	8008804 <atoi>
 800318a:	4603      	mov	r3, r0
 800318c:	4a42      	ldr	r2, [pc, #264]	; (8003298 <shellExec+0x2f0>)
 800318e:	6013      	str	r3, [r2, #0]
		if(action ==2) sens = atoi(argv[3]);
 8003190:	4b41      	ldr	r3, [pc, #260]	; (8003298 <shellExec+0x2f0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d107      	bne.n	80031a8 <shellExec+0x200>
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <shellExec+0x298>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4618      	mov	r0, r3
 800319e:	f005 fb31 	bl	8008804 <atoi>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a3d      	ldr	r2, [pc, #244]	; (800329c <shellExec+0x2f4>)
 80031a6:	6013      	str	r3, [r2, #0]
		consigneD = atoi(argv[2]);
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <shellExec+0x298>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f005 fb29 	bl	8008804 <atoi>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <shellExec+0x2e4>)
 80031b6:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[2]);
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <shellExec+0x298>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f005 fb21 	bl	8008804 <atoi>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4a32      	ldr	r2, [pc, #200]	; (8003290 <shellExec+0x2e8>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	e037      	b.n	800323a <shellExec+0x292>
	else if(strcmp(argv[0],"servo")==0)
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <shellExec+0x298>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4934      	ldr	r1, [pc, #208]	; (80032a0 <shellExec+0x2f8>)
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f829 	bl	8000228 <strcmp>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d12c      	bne.n	8003236 <shellExec+0x28e>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	2217      	movs	r2, #23
 80031e2:	4930      	ldr	r1, [pc, #192]	; (80032a4 <shellExec+0x2fc>)
 80031e4:	4819      	ldr	r0, [pc, #100]	; (800324c <shellExec+0x2a4>)
 80031e6:	f004 fe23 	bl	8007e30 <HAL_UART_Transmit>
		if(strcmp(argv[1],"ouvert")==0)
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <shellExec+0x298>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	492e      	ldr	r1, [pc, #184]	; (80032a8 <shellExec+0x300>)
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd f819 	bl	8000228 <strcmp>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <shellExec+0x25e>
			ControlServo(SERVO_OPEN);
 80031fc:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8003200:	f7fe fa68 	bl	80016d4 <ControlServo>
}
 8003204:	e019      	b.n	800323a <shellExec+0x292>
		else if(strcmp(argv[1],"ferme")==0)
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <shellExec+0x298>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4928      	ldr	r1, [pc, #160]	; (80032ac <shellExec+0x304>)
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f80b 	bl	8000228 <strcmp>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <shellExec+0x27a>
			ControlServo(SERVO_CLOSED);
 8003218:	f44f 7052 	mov.w	r0, #840	; 0x348
 800321c:	f7fe fa5a 	bl	80016d4 <ControlServo>
}
 8003220:	e00b      	b.n	800323a <shellExec+0x292>
		else ControlServo(atoi(argv[1]));
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <shellExec+0x298>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f005 faec 	bl	8008804 <atoi>
 800322c:	4603      	mov	r3, r0
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fa50 	bl	80016d4 <ControlServo>
}
 8003234:	e001      	b.n	800323a <shellExec+0x292>
		shellCmdNotFound();
 8003236:	f7ff fe33 	bl	8002ea0 <shellCmdNotFound>
}
 800323a:	bf00      	nop
 800323c:	bd98      	pop	{r3, r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	200009b4 	.word	0x200009b4
 8003244:	0800d1c8 	.word	0x0800d1c8
 8003248:	2000018c 	.word	0x2000018c
 800324c:	20000bec 	.word	0x20000bec
 8003250:	0800d1d0 	.word	0x0800d1d0
 8003254:	200003c0 	.word	0x200003c0
 8003258:	0800d1d8 	.word	0x0800d1d8
 800325c:	2000051c 	.word	0x2000051c
 8003260:	0800d1dc 	.word	0x0800d1dc
 8003264:	20000540 	.word	0x20000540
 8003268:	0800d1e4 	.word	0x0800d1e4
 800326c:	20000568 	.word	0x20000568
 8003270:	0800d1ec 	.word	0x0800d1ec
 8003274:	20000590 	.word	0x20000590
 8003278:	0800d1f4 	.word	0x0800d1f4
 800327c:	0800d1fc 	.word	0x0800d1fc
 8003280:	0800d200 	.word	0x0800d200
 8003284:	200005a8 	.word	0x200005a8
 8003288:	0800d204 	.word	0x0800d204
 800328c:	20000908 	.word	0x20000908
 8003290:	20000910 	.word	0x20000910
 8003294:	0800d210 	.word	0x0800d210
 8003298:	2000010c 	.word	0x2000010c
 800329c:	20000914 	.word	0x20000914
 80032a0:	0800d21c 	.word	0x0800d21c
 80032a4:	200005d8 	.word	0x200005d8
 80032a8:	0800d224 	.word	0x0800d224
 80032ac:	0800d22c 	.word	0x0800d22c

080032b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_MspInit+0x5c>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_MspInit+0x5c>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6193      	str	r3, [r2, #24]
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_MspInit+0x5c>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_MspInit+0x5c>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_MspInit+0x5c>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_MspInit+0x5c>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_MspInit+0x60>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_MspInit+0x60>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000

08003314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <NMI_Handler+0x4>

0800331a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800331e:	e7fe      	b.n	800331e <HardFault_Handler+0x4>

08003320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <MemManage_Handler+0x4>

08003326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800332a:	e7fe      	b.n	800332a <BusFault_Handler+0x4>

0800332c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <UsageFault_Handler+0x4>

08003332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800335a:	f000 fe9f 	bl	800409c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <TIM1_UP_IRQHandler+0x10>)
 800336a:	f003 feb7 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200009e0 	.word	0x200009e0

08003378 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <TIM4_IRQHandler+0x10>)
 800337e:	f003 fead 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000ab8 	.word	0x20000ab8

0800338c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <USART1_IRQHandler+0x10>)
 8003392:	f004 fe0f 	bl	8007fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000bec 	.word	0x20000bec

080033a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <USART2_IRQHandler+0x10>)
 80033a6:	f004 fe05 	bl	8007fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000c30 	.word	0x20000c30

080033b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80033b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033bc:	f001 fdb4 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <TIM6_IRQHandler+0x10>)
 80033ca:	f003 fe87 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000b48 	.word	0x20000b48

080033d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <TIM7_IRQHandler+0x10>)
 80033de:	f003 fe7d 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000b90 	.word	0x20000b90

080033ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
	return 1;
 80033f0:	2301      	movs	r3, #1
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <_kill>:

int _kill(int pid, int sig)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003404:	f005 fa02 	bl	800880c <__errno>
 8003408:	4603      	mov	r3, r0
 800340a:	2216      	movs	r2, #22
 800340c:	601a      	str	r2, [r3, #0]
	return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_exit>:

void _exit (int status)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003422:	f04f 31ff 	mov.w	r1, #4294967295
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffe7 	bl	80033fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800342c:	e7fe      	b.n	800342c <_exit+0x12>

0800342e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e00a      	b.n	8003456 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003440:	f3af 8000 	nop.w
 8003444:	4601      	mov	r1, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	60ba      	str	r2, [r7, #8]
 800344c:	b2ca      	uxtb	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	dbf0      	blt.n	8003440 <_read+0x12>
	}

return len;
 800345e:	687b      	ldr	r3, [r7, #4]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e009      	b.n	800348e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	60ba      	str	r2, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fafe 	bl	8002a84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3301      	adds	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	dbf1      	blt.n	800347a <_write+0x12>
	}
	return len;
 8003496:	687b      	ldr	r3, [r7, #4]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_close>:

int _close(int file)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034c6:	605a      	str	r2, [r3, #4]
	return 0;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <_isatty>:

int _isatty(int file)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	return 1;
 80034dc:	2301      	movs	r3, #1
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	return 0;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <_sbrk+0x5c>)
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <_sbrk+0x60>)
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <_sbrk+0x64>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <_sbrk+0x64>)
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <_sbrk+0x68>)
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	429a      	cmp	r2, r3
 800352e:	d207      	bcs.n	8003540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003530:	f005 f96c 	bl	800880c <__errno>
 8003534:	4603      	mov	r3, r0
 8003536:	220c      	movs	r2, #12
 8003538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	e009      	b.n	8003554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_sbrk+0x64>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	4a05      	ldr	r2, [pc, #20]	; (8003564 <_sbrk+0x64>)
 8003550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000c000 	.word	0x2000c000
 8003560:	00000400 	.word	0x00000400
 8003564:	200009dc 	.word	0x200009dc
 8003568:	20000c88 	.word	0x20000c88

0800356c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b096      	sub	sp, #88	; 0x58
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800357e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	615a      	str	r2, [r3, #20]
 80035a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	2220      	movs	r2, #32
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f005 f963 	bl	800887c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035b6:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <MX_TIM1_Init+0x184>)
 80035ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 80035bc:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035be:	2211      	movs	r2, #17
 80035c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c2:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035ca:	22c7      	movs	r2, #199	; 0xc7
 80035cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035d4:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035e0:	4845      	ldr	r0, [pc, #276]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035e2:	f003 f989 	bl	80068f8 <HAL_TIM_Base_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80035ec:	f7ff fc28 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035fa:	4619      	mov	r1, r3
 80035fc:	483e      	ldr	r0, [pc, #248]	; (80036f8 <MX_TIM1_Init+0x180>)
 80035fe:	f003 ff33 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003608:	f7ff fc1a 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800360c:	483a      	ldr	r0, [pc, #232]	; (80036f8 <MX_TIM1_Init+0x180>)
 800360e:	f003 fa23 	bl	8006a58 <HAL_TIM_PWM_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003618:	f7ff fc12 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003620:	2300      	movs	r3, #0
 8003622:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003628:	4619      	mov	r1, r3
 800362a:	4833      	ldr	r0, [pc, #204]	; (80036f8 <MX_TIM1_Init+0x180>)
 800362c:	f004 fae4 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003636:	f7ff fc03 	bl	8002e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800363a:	2360      	movs	r3, #96	; 0x60
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003642:	2300      	movs	r3, #0
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003646:	2300      	movs	r3, #0
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365a:	2200      	movs	r2, #0
 800365c:	4619      	mov	r1, r3
 800365e:	4826      	ldr	r0, [pc, #152]	; (80036f8 <MX_TIM1_Init+0x180>)
 8003660:	f003 fe44 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800366a:	f7ff fbe9 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800366e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003672:	2204      	movs	r2, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4820      	ldr	r0, [pc, #128]	; (80036f8 <MX_TIM1_Init+0x180>)
 8003678:	f003 fe38 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003682:	f7ff fbdd 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368a:	2208      	movs	r2, #8
 800368c:	4619      	mov	r1, r3
 800368e:	481a      	ldr	r0, [pc, #104]	; (80036f8 <MX_TIM1_Init+0x180>)
 8003690:	f003 fe2c 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800369a:	f7ff fbd1 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800369e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a2:	220c      	movs	r2, #12
 80036a4:	4619      	mov	r1, r3
 80036a6:	4814      	ldr	r0, [pc, #80]	; (80036f8 <MX_TIM1_Init+0x180>)
 80036a8:	f003 fe20 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80036b2:	f7ff fbc5 	bl	8002e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4807      	ldr	r0, [pc, #28]	; (80036f8 <MX_TIM1_Init+0x180>)
 80036da:	f004 faf9 	bl	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80036e4:	f7ff fbac 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <MX_TIM1_Init+0x180>)
 80036ea:	f000 fb09 	bl	8003d00 <HAL_TIM_MspPostInit>

}
 80036ee:	bf00      	nop
 80036f0:	3758      	adds	r7, #88	; 0x58
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200009e0 	.word	0x200009e0
 80036fc:	40012c00 	.word	0x40012c00

08003700 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f005 f8b4 	bl	800887c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800371e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003726:	2200      	movs	r2, #0
 8003728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003730:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003744:	2301      	movs	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800374c:	2301      	movs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003758:	2300      	movs	r3, #0
 800375a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800375c:	2301      	movs	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003760:	2300      	movs	r3, #0
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	4619      	mov	r1, r3
 800376e:	480d      	ldr	r0, [pc, #52]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003770:	f003 fb84 	bl	8006e7c <HAL_TIM_Encoder_Init>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800377a:	f7ff fb61 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4806      	ldr	r0, [pc, #24]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800378c:	f004 fa34 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003796:	f7ff fb53 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800379a:	bf00      	nop
 800379c:	3730      	adds	r7, #48	; 0x30
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000a28 	.word	0x20000a28

080037a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037bc:	f107 0320 	add.w	r3, r7, #32
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
 80037d4:	615a      	str	r2, [r3, #20]
 80037d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <MX_TIM3_Init+0xe8>)
 80037da:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <MX_TIM3_Init+0xec>)
 80037dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80037de:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <MX_TIM3_Init+0xe8>)
 80037e0:	2247      	movs	r2, #71	; 0x47
 80037e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <MX_TIM3_Init+0xe8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <MX_TIM3_Init+0xe8>)
 80037ec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80037f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <MX_TIM3_Init+0xe8>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <MX_TIM3_Init+0xe8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037fe:	4824      	ldr	r0, [pc, #144]	; (8003890 <MX_TIM3_Init+0xe8>)
 8003800:	f003 f87a 	bl	80068f8 <HAL_TIM_Base_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800380a:	f7ff fb19 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800380e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003818:	4619      	mov	r1, r3
 800381a:	481d      	ldr	r0, [pc, #116]	; (8003890 <MX_TIM3_Init+0xe8>)
 800381c:	f003 fe24 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003826:	f7ff fb0b 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800382a:	4819      	ldr	r0, [pc, #100]	; (8003890 <MX_TIM3_Init+0xe8>)
 800382c:	f003 f914 	bl	8006a58 <HAL_TIM_PWM_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003836:	f7ff fb03 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003842:	f107 0320 	add.w	r3, r7, #32
 8003846:	4619      	mov	r1, r3
 8003848:	4811      	ldr	r0, [pc, #68]	; (8003890 <MX_TIM3_Init+0xe8>)
 800384a:	f004 f9d5 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003854:	f7ff faf4 	bl	8002e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003858:	2360      	movs	r3, #96	; 0x60
 800385a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 800385c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	2200      	movs	r2, #0
 800386e:	4619      	mov	r1, r3
 8003870:	4807      	ldr	r0, [pc, #28]	; (8003890 <MX_TIM3_Init+0xe8>)
 8003872:	f003 fd3b 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800387c:	f7ff fae0 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003880:	4803      	ldr	r0, [pc, #12]	; (8003890 <MX_TIM3_Init+0xe8>)
 8003882:	f000 fa3d 	bl	8003d00 <HAL_TIM_MspPostInit>

}
 8003886:	bf00      	nop
 8003888:	3738      	adds	r7, #56	; 0x38
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000a70 	.word	0x20000a70
 8003894:	40000400 	.word	0x40000400

08003898 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ac:	463b      	mov	r3, r7
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <MX_TIM4_Init+0x94>)
 80038b6:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <MX_TIM4_Init+0x98>)
 80038b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <MX_TIM4_Init+0x94>)
 80038bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80038c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <MX_TIM4_Init+0x94>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <MX_TIM4_Init+0x94>)
 80038ca:	220a      	movs	r2, #10
 80038cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <MX_TIM4_Init+0x94>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <MX_TIM4_Init+0x94>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038da:	4814      	ldr	r0, [pc, #80]	; (800392c <MX_TIM4_Init+0x94>)
 80038dc:	f003 f80c 	bl	80068f8 <HAL_TIM_Base_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80038e6:	f7ff faab 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80038f0:	f107 0308 	add.w	r3, r7, #8
 80038f4:	4619      	mov	r1, r3
 80038f6:	480d      	ldr	r0, [pc, #52]	; (800392c <MX_TIM4_Init+0x94>)
 80038f8:	f003 fdb6 	bl	8007468 <HAL_TIM_ConfigClockSource>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003902:	f7ff fa9d 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800390e:	463b      	mov	r3, r7
 8003910:	4619      	mov	r1, r3
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <MX_TIM4_Init+0x94>)
 8003914:	f004 f970 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800391e:	f7ff fa8f 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000ab8 	.word	0x20000ab8
 8003930:	40000800 	.word	0x40000800

08003934 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08c      	sub	sp, #48	; 0x30
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800393a:	f107 030c 	add.w	r3, r7, #12
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f004 ff9a 	bl	800887c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <MX_TIM5_Init+0xa0>)
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <MX_TIM5_Init+0xa4>)
 8003954:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <MX_TIM5_Init+0xa0>)
 8003958:	2200      	movs	r2, #0
 800395a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <MX_TIM5_Init+0xa0>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003962:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <MX_TIM5_Init+0xa0>)
 8003964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003968:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <MX_TIM5_Init+0xa0>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <MX_TIM5_Init+0xa0>)
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003976:	2301      	movs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800397e:	2301      	movs	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800398e:	2301      	movs	r3, #1
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003992:	2300      	movs	r3, #0
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	4619      	mov	r1, r3
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <MX_TIM5_Init+0xa0>)
 80039a2:	f003 fa6b 	bl	8006e7c <HAL_TIM_Encoder_Init>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80039ac:	f7ff fa48 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_TIM5_Init+0xa0>)
 80039be:	f004 f91b 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80039c8:	f7ff fa3a 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	3730      	adds	r7, #48	; 0x30
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000b00 	.word	0x20000b00
 80039d8:	40000c00 	.word	0x40000c00

080039dc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e2:	463b      	mov	r3, r7
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <MX_TIM6_Init+0x64>)
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <MX_TIM6_Init+0x68>)
 80039ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <MX_TIM6_Init+0x64>)
 80039f2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80039f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <MX_TIM6_Init+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <MX_TIM6_Init+0x64>)
 8003a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <MX_TIM6_Init+0x64>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a0c:	480c      	ldr	r0, [pc, #48]	; (8003a40 <MX_TIM6_Init+0x64>)
 8003a0e:	f002 ff73 	bl	80068f8 <HAL_TIM_Base_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003a18:	f7ff fa12 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a24:	463b      	mov	r3, r7
 8003a26:	4619      	mov	r1, r3
 8003a28:	4805      	ldr	r0, [pc, #20]	; (8003a40 <MX_TIM6_Init+0x64>)
 8003a2a:	f004 f8e5 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003a34:	f7ff fa04 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000b48 	.word	0x20000b48
 8003a44:	40001000 	.word	0x40001000

08003a48 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4e:	463b      	mov	r3, r7
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <MX_TIM7_Init+0x68>)
 8003a5a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a5e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003a62:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a70:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a78:	480c      	ldr	r0, [pc, #48]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a7a:	f002 ff3d 	bl	80068f8 <HAL_TIM_Base_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003a84:	f7ff f9dc 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a90:	463b      	mov	r3, r7
 8003a92:	4619      	mov	r1, r3
 8003a94:	4805      	ldr	r0, [pc, #20]	; (8003aac <MX_TIM7_Init+0x64>)
 8003a96:	f004 f8af 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003aa0:	f7ff f9ce 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000b90 	.word	0x20000b90
 8003ab0:	40001400 	.word	0x40001400

08003ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3d      	ldr	r2, [pc, #244]	; (8003bb8 <HAL_TIM_Base_MspInit+0x104>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d114      	bne.n	8003af0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ad0:	6193      	str	r3, [r2, #24]
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	2019      	movs	r0, #25
 8003ae4:	f000 fe15 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ae8:	2019      	movs	r0, #25
 8003aea:	f000 fe2e 	bl	800474a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003aee:	e05e      	b.n	8003bae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a32      	ldr	r2, [pc, #200]	; (8003bc0 <HAL_TIM_Base_MspInit+0x10c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10c      	bne.n	8003b14 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	61d3      	str	r3, [r2, #28]
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	69bb      	ldr	r3, [r7, #24]
}
 8003b12:	e04c      	b.n	8003bae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <HAL_TIM_Base_MspInit+0x110>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d114      	bne.n	8003b48 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b1e:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	61d3      	str	r3, [r2, #28]
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	201e      	movs	r0, #30
 8003b3c:	f000 fde9 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b40:	201e      	movs	r0, #30
 8003b42:	f000 fe02 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8003b46:	e032      	b.n	8003bae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM6)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_TIM_Base_MspInit+0x114>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d114      	bne.n	8003b7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b58:	f043 0310 	orr.w	r3, r3, #16
 8003b5c:	61d3      	str	r3, [r2, #28]
 8003b5e:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	2036      	movs	r0, #54	; 0x36
 8003b70:	f000 fdcf 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003b74:	2036      	movs	r0, #54	; 0x36
 8003b76:	f000 fde8 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8003b7a:	e018      	b.n	8003bae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM7)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_TIM_Base_MspInit+0x118>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d113      	bne.n	8003bae <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b8c:	f043 0320 	orr.w	r3, r3, #32
 8003b90:	61d3      	str	r3, [r2, #28]
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_TIM_Base_MspInit+0x108>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	2037      	movs	r0, #55	; 0x37
 8003ba4:	f000 fdb5 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ba8:	2037      	movs	r0, #55	; 0x37
 8003baa:	f000 fdce 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8003bae:	bf00      	nop
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40001000 	.word	0x40001000
 8003bcc:	40001400 	.word	0x40001400

08003bd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d14f      	bne.n	8003c90 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bf0:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4a3d      	ldr	r2, [pc, #244]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	61d3      	str	r3, [r2, #28]
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c08:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	4a37      	ldr	r2, [pc, #220]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6193      	str	r3, [r2, #24]
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4a31      	ldr	r2, [pc, #196]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c26:	f043 0308 	orr.w	r3, r3, #8
 8003c2a:	6193      	str	r3, [r2, #24]
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8003c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003c46:	f107 031c 	add.w	r3, r7, #28
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4828      	ldr	r0, [pc, #160]	; (8003cf0 <HAL_TIM_Encoder_MspInit+0x120>)
 8003c4e:	f000 fed9 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8003c52:	2308      	movs	r3, #8
 8003c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003c5e:	f107 031c 	add.w	r3, r7, #28
 8003c62:	4619      	mov	r1, r3
 8003c64:	4823      	ldr	r0, [pc, #140]	; (8003cf4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c66:	f000 fecd 	bl	8004a04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003c8e:	e028      	b.n	8003ce2 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_TIM_Encoder_MspInit+0x12c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d123      	bne.n	8003ce2 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	61d3      	str	r3, [r2, #28]
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	6193      	str	r3, [r2, #24]
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_TIM_Encoder_MspInit+0x11c>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd6:	f107 031c 	add.w	r3, r7, #28
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <HAL_TIM_Encoder_MspInit+0x120>)
 8003cde:	f000 fe91 	bl	8004a04 <HAL_GPIO_Init>
}
 8003ce2:	bf00      	nop
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40010800 	.word	0x40010800
 8003cf4:	40010c00 	.word	0x40010c00
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000c00 	.word	0x40000c00

08003d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <HAL_TIM_MspPostInit+0xbc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d119      	bne.n	8003d54 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d20:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <HAL_TIM_MspPostInit+0xc0>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <HAL_TIM_MspPostInit+0xc0>)
 8003d26:	f043 0304 	orr.w	r3, r3, #4
 8003d2a:	6193      	str	r3, [r2, #24]
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_TIM_MspPostInit+0xc0>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8003d38:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d42:	2302      	movs	r3, #2
 8003d44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	481d      	ldr	r0, [pc, #116]	; (8003dc4 <HAL_TIM_MspPostInit+0xc4>)
 8003d4e:	f000 fe59 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003d52:	e02e      	b.n	8003db2 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_TIM_MspPostInit+0xc8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d129      	bne.n	8003db2 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <HAL_TIM_MspPostInit+0xc0>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_TIM_MspPostInit+0xc0>)
 8003d64:	f043 0310 	orr.w	r3, r3, #16
 8003d68:	6193      	str	r3, [r2, #24]
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_TIM_MspPostInit+0xc0>)
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8003d76:	2340      	movs	r3, #64	; 0x40
 8003d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d82:	f107 0314 	add.w	r3, r7, #20
 8003d86:	4619      	mov	r1, r3
 8003d88:	4810      	ldr	r0, [pc, #64]	; (8003dcc <HAL_TIM_MspPostInit+0xcc>)
 8003d8a:	f000 fe3b 	bl	8004a04 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_TIM_MspPostInit+0xd0>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_TIM_MspPostInit+0xd0>)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	6053      	str	r3, [r2, #4]
}
 8003db2:	bf00      	nop
 8003db4:	3728      	adds	r7, #40	; 0x28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40010800 	.word	0x40010800
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40011000 	.word	0x40011000
 8003dd0:	40010000 	.word	0x40010000

08003dd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <MX_USART1_UART_Init+0x50>)
 8003ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e0a:	4805      	ldr	r0, [pc, #20]	; (8003e20 <MX_USART1_UART_Init+0x4c>)
 8003e0c:	f003 ffc3 	bl	8007d96 <HAL_UART_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e16:	f7ff f813 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000bec 	.word	0x20000bec
 8003e24:	40013800 	.word	0x40013800

08003e28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <MX_USART2_UART_Init+0x50>)
 8003e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e4e:	220c      	movs	r2, #12
 8003e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e5e:	4805      	ldr	r0, [pc, #20]	; (8003e74 <MX_USART2_UART_Init+0x4c>)
 8003e60:	f003 ff99 	bl	8007d96 <HAL_UART_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e6a:	f7fe ffe9 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000c30 	.word	0x20000c30
 8003e78:	40004400 	.word	0x40004400

08003e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	; 0x30
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e84:	f107 031c 	add.w	r3, r7, #28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a45      	ldr	r2, [pc, #276]	; (8003fac <HAL_UART_MspInit+0x130>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d146      	bne.n	8003f2a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e9c:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea6:	6193      	str	r3, [r2, #24]
 8003ea8:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6193      	str	r3, [r2, #24]
 8003ec0:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 8003ecc:	2340      	movs	r3, #64	; 0x40
 8003ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003ed8:	f107 031c 	add.w	r3, r7, #28
 8003edc:	4619      	mov	r1, r3
 8003ede:	4835      	ldr	r0, [pc, #212]	; (8003fb4 <HAL_UART_MspInit+0x138>)
 8003ee0:	f000 fd90 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	482f      	ldr	r0, [pc, #188]	; (8003fb4 <HAL_UART_MspInit+0x138>)
 8003ef8:	f000 fd84 	bl	8004a04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_UART_MspInit+0x13c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f12:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_UART_MspInit+0x13c>)
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2025      	movs	r0, #37	; 0x25
 8003f1e:	f000 fbf8 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f22:	2025      	movs	r0, #37	; 0x25
 8003f24:	f000 fc11 	bl	800474a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f28:	e03c      	b.n	8003fa4 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d137      	bne.n	8003fa4 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3e:	61d3      	str	r3, [r2, #28]
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6193      	str	r3, [r2, #24]
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_UART_MspInit+0x134>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8003f64:	2304      	movs	r3, #4
 8003f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	4619      	mov	r1, r3
 8003f76:	4812      	ldr	r0, [pc, #72]	; (8003fc0 <HAL_UART_MspInit+0x144>)
 8003f78:	f000 fd44 	bl	8004a04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f80:	2300      	movs	r3, #0
 8003f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003f88:	f107 031c 	add.w	r3, r7, #28
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	480c      	ldr	r0, [pc, #48]	; (8003fc0 <HAL_UART_MspInit+0x144>)
 8003f90:	f000 fd38 	bl	8004a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f94:	2200      	movs	r2, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	2026      	movs	r0, #38	; 0x26
 8003f9a:	f000 fbba 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f9e:	2026      	movs	r0, #38	; 0x26
 8003fa0:	f000 fbd3 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8003fa4:	bf00      	nop
 8003fa6:	3730      	adds	r7, #48	; 0x30
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40010c00 	.word	0x40010c00
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40004400 	.word	0x40004400
 8003fc0:	40010800 	.word	0x40010800

08003fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fc4:	480c      	ldr	r0, [pc, #48]	; (8003ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fc6:	490d      	ldr	r1, [pc, #52]	; (8003ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fcc:	e002      	b.n	8003fd4 <LoopCopyDataInit>

08003fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fd2:	3304      	adds	r3, #4

08003fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd8:	d3f9      	bcc.n	8003fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fdc:	4c0a      	ldr	r4, [pc, #40]	; (8004008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe0:	e001      	b.n	8003fe6 <LoopFillZerobss>

08003fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe4:	3204      	adds	r2, #4

08003fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe8:	d3fb      	bcc.n	8003fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fea:	f7ff fabf 	bl	800356c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fee:	f004 fc13 	bl	8008818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ff2:	f7fe fc6d 	bl	80028d0 <main>
  bx lr
 8003ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ffc:	200007e4 	.word	0x200007e4
  ldr r2, =_sidata
 8004000:	0800d770 	.word	0x0800d770
  ldr r2, =_sbss
 8004004:	200007e4 	.word	0x200007e4
  ldr r4, =_ebss
 8004008:	20000c88 	.word	0x20000c88

0800400c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800400c:	e7fe      	b.n	800400c <ADC1_2_IRQHandler>
	...

08004010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_Init+0x28>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a07      	ldr	r2, [pc, #28]	; (8004038 <HAL_Init+0x28>)
 800401a:	f043 0310 	orr.w	r3, r3, #16
 800401e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004020:	2003      	movs	r0, #3
 8004022:	f000 fb6b 	bl	80046fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004026:	200f      	movs	r0, #15
 8004028:	f000 f808 	bl	800403c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800402c:	f7ff f940 	bl	80032b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40022000 	.word	0x40022000

0800403c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_InitTick+0x54>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_InitTick+0x58>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004052:	fbb3 f3f1 	udiv	r3, r3, r1
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb83 	bl	8004766 <HAL_SYSTICK_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e00e      	b.n	8004088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b0f      	cmp	r3, #15
 800406e:	d80a      	bhi.n	8004086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004070:	2200      	movs	r2, #0
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	f000 fb4b 	bl	8004712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800407c:	4a06      	ldr	r2, [pc, #24]	; (8004098 <HAL_InitTick+0x5c>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000604 	.word	0x20000604
 8004094:	2000060c 	.word	0x2000060c
 8004098:	20000608 	.word	0x20000608

0800409c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_IncTick+0x1c>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_IncTick+0x20>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	4a03      	ldr	r2, [pc, #12]	; (80040bc <HAL_IncTick+0x20>)
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	2000060c 	.word	0x2000060c
 80040bc:	20000c74 	.word	0x20000c74

080040c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return uwTick;
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <HAL_GetTick+0x10>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	20000c74 	.word	0x20000c74

080040d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7ff fff0 	bl	80040c0 <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d005      	beq.n	80040fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_Delay+0x44>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040fa:	bf00      	nop
 80040fc:	f7ff ffe0 	bl	80040c0 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d8f7      	bhi.n	80040fc <HAL_Delay+0x28>
  {
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000060c 	.word	0x2000060c

0800411c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0ce      	b.n	80042dc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fb34 	bl	80017c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f9bd 	bl	80044e0 <ADC_ConversionStop_Disable>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 80a9 	bne.w	80042ca <HAL_ADC_Init+0x1ae>
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 80a5 	bne.w	80042ca <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	f043 0202 	orr.w	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4951      	ldr	r1, [pc, #324]	; (80042e4 <HAL_ADC_Init+0x1c8>)
 800419e:	428b      	cmp	r3, r1
 80041a0:	d10a      	bne.n	80041b8 <HAL_ADC_Init+0x9c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041aa:	d002      	beq.n	80041b2 <HAL_ADC_Init+0x96>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	e004      	b.n	80041bc <HAL_ADC_Init+0xa0>
 80041b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80041b6:	e001      	b.n	80041bc <HAL_ADC_Init+0xa0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7b1b      	ldrb	r3, [r3, #12]
 80041c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80041c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d003      	beq.n	80041de <HAL_ADC_Init+0xc2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_ADC_Init+0xc8>
 80041de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_Init+0xca>
 80041e4:	2300      	movs	r3, #0
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7d1b      	ldrb	r3, [r3, #20]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d119      	bne.n	8004228 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7b1b      	ldrb	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	3b01      	subs	r3, #1
 8004202:	035a      	lsls	r2, r3, #13
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e00b      	b.n	8004228 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <HAL_ADC_Init+0x1cc>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	430b      	orrs	r3, r1
 800424e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004258:	d003      	beq.n	8004262 <HAL_ADC_Init+0x146>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d104      	bne.n	800426c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	3b01      	subs	r3, #1
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	430a      	orrs	r2, r1
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_ADC_Init+0x1d0>)
 8004288:	4013      	ands	r3, r2
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d10b      	bne.n	80042a8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	f043 0201 	orr.w	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042a6:	e018      	b.n	80042da <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f023 0312 	bic.w	r3, r3, #18
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042c8:	e007      	b.n	80042da <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80042da:	7dfb      	ldrb	r3, [r7, #23]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40013c00 	.word	0x40013c00
 80042e8:	ffe1f7fd 	.word	0xffe1f7fd
 80042ec:	ff1f0efe 	.word	0xff1f0efe

080042f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x20>
 800430c:	2302      	movs	r3, #2
 800430e:	e0dc      	b.n	80044ca <HAL_ADC_ConfigChannel+0x1da>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d81c      	bhi.n	800435a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	3b05      	subs	r3, #5
 8004332:	221f      	movs	r2, #31
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	4019      	ands	r1, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	3b05      	subs	r3, #5
 800434c:	fa00 f203 	lsl.w	r2, r0, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	635a      	str	r2, [r3, #52]	; 0x34
 8004358:	e03c      	b.n	80043d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d81c      	bhi.n	800439c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	3b23      	subs	r3, #35	; 0x23
 8004374:	221f      	movs	r2, #31
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	4019      	ands	r1, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	3b23      	subs	r3, #35	; 0x23
 800438e:	fa00 f203 	lsl.w	r2, r0, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
 800439a:	e01b      	b.n	80043d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	3b41      	subs	r3, #65	; 0x41
 80043ae:	221f      	movs	r2, #31
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	4019      	ands	r1, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	3b41      	subs	r3, #65	; 0x41
 80043c8:	fa00 f203 	lsl.w	r2, r0, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b09      	cmp	r3, #9
 80043da:	d91c      	bls.n	8004416 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	3b1e      	subs	r3, #30
 80043ee:	2207      	movs	r2, #7
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	4019      	ands	r1, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6898      	ldr	r0, [r3, #8]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	3b1e      	subs	r3, #30
 8004408:	fa00 f203 	lsl.w	r2, r0, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e019      	b.n	800444a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6919      	ldr	r1, [r3, #16]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	2207      	movs	r2, #7
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	4019      	ands	r1, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6898      	ldr	r0, [r3, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	fa00 f203 	lsl.w	r2, r0, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b10      	cmp	r3, #16
 8004450:	d003      	beq.n	800445a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004456:	2b11      	cmp	r3, #17
 8004458:	d132      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d125      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d126      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004480:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b10      	cmp	r3, #16
 8004488:	d11a      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <HAL_ADC_ConfigChannel+0x1ec>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	0c9a      	lsrs	r2, r3, #18
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044a0:	e002      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f9      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x1b2>
 80044ae:	e007      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012400 	.word	0x40012400
 80044d8:	20000604 	.word	0x20000604
 80044dc:	431bde83 	.word	0x431bde83

080044e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d12e      	bne.n	8004558 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800450a:	f7ff fdd9 	bl	80040c0 <HAL_GetTick>
 800450e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004510:	e01b      	b.n	800454a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004512:	f7ff fdd5 	bl	80040c0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d914      	bls.n	800454a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10d      	bne.n	800454a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e007      	b.n	800455a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d0dc      	beq.n	8004512 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004580:	4013      	ands	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800458c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004596:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	60d3      	str	r3, [r2, #12]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <__NVIC_GetPriorityGrouping+0x18>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 0307 	and.w	r3, r3, #7
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	db0b      	blt.n	80045f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	f003 021f 	and.w	r2, r3, #31
 80045e0:	4906      	ldr	r1, [pc, #24]	; (80045fc <__NVIC_EnableIRQ+0x34>)
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2001      	movs	r0, #1
 80045ea:	fa00 f202 	lsl.w	r2, r0, r2
 80045ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	e000e100 	.word	0xe000e100

08004600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004610:	2b00      	cmp	r3, #0
 8004612:	db0a      	blt.n	800462a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	490c      	ldr	r1, [pc, #48]	; (800464c <__NVIC_SetPriority+0x4c>)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	0112      	lsls	r2, r2, #4
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	440b      	add	r3, r1
 8004624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004628:	e00a      	b.n	8004640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4908      	ldr	r1, [pc, #32]	; (8004650 <__NVIC_SetPriority+0x50>)
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	3b04      	subs	r3, #4
 8004638:	0112      	lsls	r2, r2, #4
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	440b      	add	r3, r1
 800463e:	761a      	strb	r2, [r3, #24]
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000e100 	.word	0xe000e100
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f1c3 0307 	rsb	r3, r3, #7
 800466e:	2b04      	cmp	r3, #4
 8004670:	bf28      	it	cs
 8004672:	2304      	movcs	r3, #4
 8004674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3304      	adds	r3, #4
 800467a:	2b06      	cmp	r3, #6
 800467c:	d902      	bls.n	8004684 <NVIC_EncodePriority+0x30>
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3b03      	subs	r3, #3
 8004682:	e000      	b.n	8004686 <NVIC_EncodePriority+0x32>
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004688:	f04f 32ff 	mov.w	r2, #4294967295
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43da      	mvns	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	401a      	ands	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800469c:	f04f 31ff 	mov.w	r1, #4294967295
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	43d9      	mvns	r1, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ac:	4313      	orrs	r3, r2
         );
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3724      	adds	r7, #36	; 0x24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c8:	d301      	bcc.n	80046ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00f      	b.n	80046ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <SysTick_Config+0x40>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046d6:	210f      	movs	r1, #15
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	f7ff ff90 	bl	8004600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SysTick_Config+0x40>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <SysTick_Config+0x40>)
 80046e8:	2207      	movs	r2, #7
 80046ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000e010 	.word	0xe000e010

080046fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff2d 	bl	8004564 <__NVIC_SetPriorityGrouping>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004724:	f7ff ff42 	bl	80045ac <__NVIC_GetPriorityGrouping>
 8004728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	6978      	ldr	r0, [r7, #20]
 8004730:	f7ff ff90 	bl	8004654 <NVIC_EncodePriority>
 8004734:	4602      	mov	r2, r0
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff5f 	bl	8004600 <__NVIC_SetPriority>
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff35 	bl	80045c8 <__NVIC_EnableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffa2 	bl	80046b8 <SysTick_Config>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004790:	2b02      	cmp	r3, #2
 8004792:	d008      	beq.n	80047a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2204      	movs	r2, #4
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e020      	b.n	80047e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 020e 	bic.w	r2, r2, #14
 80047b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f202 	lsl.w	r2, r1, r2
 80047d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004806:	2b02      	cmp	r3, #2
 8004808:	d005      	beq.n	8004816 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2204      	movs	r2, #4
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e0d6      	b.n	80049c4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 020e 	bic.w	r2, r2, #14
 8004824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <HAL_DMA_Abort_IT+0x1dc>)
 800483e:	429a      	cmp	r2, r3
 8004840:	d958      	bls.n	80048f4 <HAL_DMA_Abort_IT+0x100>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a63      	ldr	r2, [pc, #396]	; (80049d4 <HAL_DMA_Abort_IT+0x1e0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d04f      	beq.n	80048ec <HAL_DMA_Abort_IT+0xf8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a61      	ldr	r2, [pc, #388]	; (80049d8 <HAL_DMA_Abort_IT+0x1e4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d048      	beq.n	80048e8 <HAL_DMA_Abort_IT+0xf4>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a60      	ldr	r2, [pc, #384]	; (80049dc <HAL_DMA_Abort_IT+0x1e8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d040      	beq.n	80048e2 <HAL_DMA_Abort_IT+0xee>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <HAL_DMA_Abort_IT+0x1ec>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d038      	beq.n	80048dc <HAL_DMA_Abort_IT+0xe8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a5d      	ldr	r2, [pc, #372]	; (80049e4 <HAL_DMA_Abort_IT+0x1f0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d030      	beq.n	80048d6 <HAL_DMA_Abort_IT+0xe2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a5b      	ldr	r2, [pc, #364]	; (80049e8 <HAL_DMA_Abort_IT+0x1f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d028      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xdc>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <HAL_DMA_Abort_IT+0x1dc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d020      	beq.n	80048ca <HAL_DMA_Abort_IT+0xd6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a57      	ldr	r2, [pc, #348]	; (80049ec <HAL_DMA_Abort_IT+0x1f8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d019      	beq.n	80048c6 <HAL_DMA_Abort_IT+0xd2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a56      	ldr	r2, [pc, #344]	; (80049f0 <HAL_DMA_Abort_IT+0x1fc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d012      	beq.n	80048c2 <HAL_DMA_Abort_IT+0xce>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a54      	ldr	r2, [pc, #336]	; (80049f4 <HAL_DMA_Abort_IT+0x200>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00a      	beq.n	80048bc <HAL_DMA_Abort_IT+0xc8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a53      	ldr	r2, [pc, #332]	; (80049f8 <HAL_DMA_Abort_IT+0x204>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d102      	bne.n	80048b6 <HAL_DMA_Abort_IT+0xc2>
 80048b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b4:	e01b      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ba:	e018      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c0:	e015      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048c2:	2310      	movs	r3, #16
 80048c4:	e013      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e011      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048ce:	e00e      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048d4:	e00b      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048da:	e008      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e0:	e005      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048e6:	e002      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048e8:	2310      	movs	r3, #16
 80048ea:	e000      	b.n	80048ee <HAL_DMA_Abort_IT+0xfa>
 80048ec:	2301      	movs	r3, #1
 80048ee:	4a43      	ldr	r2, [pc, #268]	; (80049fc <HAL_DMA_Abort_IT+0x208>)
 80048f0:	6053      	str	r3, [r2, #4]
 80048f2:	e057      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1b0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <HAL_DMA_Abort_IT+0x1e0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d04f      	beq.n	800499e <HAL_DMA_Abort_IT+0x1aa>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <HAL_DMA_Abort_IT+0x1e4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d048      	beq.n	800499a <HAL_DMA_Abort_IT+0x1a6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_DMA_Abort_IT+0x1e8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d040      	beq.n	8004994 <HAL_DMA_Abort_IT+0x1a0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_DMA_Abort_IT+0x1ec>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d038      	beq.n	800498e <HAL_DMA_Abort_IT+0x19a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <HAL_DMA_Abort_IT+0x1f0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d030      	beq.n	8004988 <HAL_DMA_Abort_IT+0x194>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <HAL_DMA_Abort_IT+0x1f4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d028      	beq.n	8004982 <HAL_DMA_Abort_IT+0x18e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <HAL_DMA_Abort_IT+0x1dc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d020      	beq.n	800497c <HAL_DMA_Abort_IT+0x188>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <HAL_DMA_Abort_IT+0x1f8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d019      	beq.n	8004978 <HAL_DMA_Abort_IT+0x184>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a29      	ldr	r2, [pc, #164]	; (80049f0 <HAL_DMA_Abort_IT+0x1fc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d012      	beq.n	8004974 <HAL_DMA_Abort_IT+0x180>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <HAL_DMA_Abort_IT+0x200>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00a      	beq.n	800496e <HAL_DMA_Abort_IT+0x17a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a26      	ldr	r2, [pc, #152]	; (80049f8 <HAL_DMA_Abort_IT+0x204>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d102      	bne.n	8004968 <HAL_DMA_Abort_IT+0x174>
 8004962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004966:	e01b      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 8004968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800496c:	e018      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 800496e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004972:	e015      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 8004974:	2310      	movs	r3, #16
 8004976:	e013      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 8004978:	2301      	movs	r3, #1
 800497a:	e011      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 800497c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004980:	e00e      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 8004982:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004986:	e00b      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 8004988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800498c:	e008      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 800498e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004992:	e005      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 8004994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004998:	e002      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 800499a:	2310      	movs	r3, #16
 800499c:	e000      	b.n	80049a0 <HAL_DMA_Abort_IT+0x1ac>
 800499e:	2301      	movs	r3, #1
 80049a0:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <HAL_DMA_Abort_IT+0x20c>)
 80049a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
    } 
  }
  return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40020080 	.word	0x40020080
 80049d4:	40020008 	.word	0x40020008
 80049d8:	4002001c 	.word	0x4002001c
 80049dc:	40020030 	.word	0x40020030
 80049e0:	40020044 	.word	0x40020044
 80049e4:	40020058 	.word	0x40020058
 80049e8:	4002006c 	.word	0x4002006c
 80049ec:	40020408 	.word	0x40020408
 80049f0:	4002041c 	.word	0x4002041c
 80049f4:	40020430 	.word	0x40020430
 80049f8:	40020444 	.word	0x40020444
 80049fc:	40020400 	.word	0x40020400
 8004a00:	40020000 	.word	0x40020000

08004a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b08b      	sub	sp, #44	; 0x2c
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a12:	2300      	movs	r3, #0
 8004a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a16:	e179      	b.n	8004d0c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a18:	2201      	movs	r2, #1
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	f040 8168 	bne.w	8004d06 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4a96      	ldr	r2, [pc, #600]	; (8004c94 <HAL_GPIO_Init+0x290>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d05e      	beq.n	8004afe <HAL_GPIO_Init+0xfa>
 8004a40:	4a94      	ldr	r2, [pc, #592]	; (8004c94 <HAL_GPIO_Init+0x290>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d875      	bhi.n	8004b32 <HAL_GPIO_Init+0x12e>
 8004a46:	4a94      	ldr	r2, [pc, #592]	; (8004c98 <HAL_GPIO_Init+0x294>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d058      	beq.n	8004afe <HAL_GPIO_Init+0xfa>
 8004a4c:	4a92      	ldr	r2, [pc, #584]	; (8004c98 <HAL_GPIO_Init+0x294>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d86f      	bhi.n	8004b32 <HAL_GPIO_Init+0x12e>
 8004a52:	4a92      	ldr	r2, [pc, #584]	; (8004c9c <HAL_GPIO_Init+0x298>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d052      	beq.n	8004afe <HAL_GPIO_Init+0xfa>
 8004a58:	4a90      	ldr	r2, [pc, #576]	; (8004c9c <HAL_GPIO_Init+0x298>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d869      	bhi.n	8004b32 <HAL_GPIO_Init+0x12e>
 8004a5e:	4a90      	ldr	r2, [pc, #576]	; (8004ca0 <HAL_GPIO_Init+0x29c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d04c      	beq.n	8004afe <HAL_GPIO_Init+0xfa>
 8004a64:	4a8e      	ldr	r2, [pc, #568]	; (8004ca0 <HAL_GPIO_Init+0x29c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d863      	bhi.n	8004b32 <HAL_GPIO_Init+0x12e>
 8004a6a:	4a8e      	ldr	r2, [pc, #568]	; (8004ca4 <HAL_GPIO_Init+0x2a0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d046      	beq.n	8004afe <HAL_GPIO_Init+0xfa>
 8004a70:	4a8c      	ldr	r2, [pc, #560]	; (8004ca4 <HAL_GPIO_Init+0x2a0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d85d      	bhi.n	8004b32 <HAL_GPIO_Init+0x12e>
 8004a76:	2b12      	cmp	r3, #18
 8004a78:	d82a      	bhi.n	8004ad0 <HAL_GPIO_Init+0xcc>
 8004a7a:	2b12      	cmp	r3, #18
 8004a7c:	d859      	bhi.n	8004b32 <HAL_GPIO_Init+0x12e>
 8004a7e:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <HAL_GPIO_Init+0x80>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004aff 	.word	0x08004aff
 8004a88:	08004ad9 	.word	0x08004ad9
 8004a8c:	08004aeb 	.word	0x08004aeb
 8004a90:	08004b2d 	.word	0x08004b2d
 8004a94:	08004b33 	.word	0x08004b33
 8004a98:	08004b33 	.word	0x08004b33
 8004a9c:	08004b33 	.word	0x08004b33
 8004aa0:	08004b33 	.word	0x08004b33
 8004aa4:	08004b33 	.word	0x08004b33
 8004aa8:	08004b33 	.word	0x08004b33
 8004aac:	08004b33 	.word	0x08004b33
 8004ab0:	08004b33 	.word	0x08004b33
 8004ab4:	08004b33 	.word	0x08004b33
 8004ab8:	08004b33 	.word	0x08004b33
 8004abc:	08004b33 	.word	0x08004b33
 8004ac0:	08004b33 	.word	0x08004b33
 8004ac4:	08004b33 	.word	0x08004b33
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	4a75      	ldr	r2, [pc, #468]	; (8004ca8 <HAL_GPIO_Init+0x2a4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004ad6:	e02c      	b.n	8004b32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	623b      	str	r3, [r7, #32]
          break;
 8004ade:	e029      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	623b      	str	r3, [r7, #32]
          break;
 8004ae8:	e024      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	3308      	adds	r3, #8
 8004af0:	623b      	str	r3, [r7, #32]
          break;
 8004af2:	e01f      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	330c      	adds	r3, #12
 8004afa:	623b      	str	r3, [r7, #32]
          break;
 8004afc:	e01a      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b06:	2304      	movs	r3, #4
 8004b08:	623b      	str	r3, [r7, #32]
          break;
 8004b0a:	e013      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d105      	bne.n	8004b20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b14:	2308      	movs	r3, #8
 8004b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	611a      	str	r2, [r3, #16]
          break;
 8004b1e:	e009      	b.n	8004b34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b20:	2308      	movs	r3, #8
 8004b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	615a      	str	r2, [r3, #20]
          break;
 8004b2a:	e003      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	623b      	str	r3, [r7, #32]
          break;
 8004b30:	e000      	b.n	8004b34 <HAL_GPIO_Init+0x130>
          break;
 8004b32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2bff      	cmp	r3, #255	; 0xff
 8004b38:	d801      	bhi.n	8004b3e <HAL_GPIO_Init+0x13a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	e001      	b.n	8004b42 <HAL_GPIO_Init+0x13e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2bff      	cmp	r3, #255	; 0xff
 8004b48:	d802      	bhi.n	8004b50 <HAL_GPIO_Init+0x14c>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	e002      	b.n	8004b56 <HAL_GPIO_Init+0x152>
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	3b08      	subs	r3, #8
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	210f      	movs	r1, #15
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	6a39      	ldr	r1, [r7, #32]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	431a      	orrs	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80c1 	beq.w	8004d06 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b84:	4b49      	ldr	r3, [pc, #292]	; (8004cac <HAL_GPIO_Init+0x2a8>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	4a48      	ldr	r2, [pc, #288]	; (8004cac <HAL_GPIO_Init+0x2a8>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6193      	str	r3, [r2, #24]
 8004b90:	4b46      	ldr	r3, [pc, #280]	; (8004cac <HAL_GPIO_Init+0x2a8>)
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b9c:	4a44      	ldr	r2, [pc, #272]	; (8004cb0 <HAL_GPIO_Init+0x2ac>)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a3c      	ldr	r2, [pc, #240]	; (8004cb4 <HAL_GPIO_Init+0x2b0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d01f      	beq.n	8004c08 <HAL_GPIO_Init+0x204>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3b      	ldr	r2, [pc, #236]	; (8004cb8 <HAL_GPIO_Init+0x2b4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d019      	beq.n	8004c04 <HAL_GPIO_Init+0x200>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3a      	ldr	r2, [pc, #232]	; (8004cbc <HAL_GPIO_Init+0x2b8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_GPIO_Init+0x1fc>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a39      	ldr	r2, [pc, #228]	; (8004cc0 <HAL_GPIO_Init+0x2bc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00d      	beq.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a38      	ldr	r2, [pc, #224]	; (8004cc4 <HAL_GPIO_Init+0x2c0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <HAL_GPIO_Init+0x1f4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a37      	ldr	r2, [pc, #220]	; (8004cc8 <HAL_GPIO_Init+0x2c4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_GPIO_Init+0x1f0>
 8004bf0:	2305      	movs	r3, #5
 8004bf2:	e00a      	b.n	8004c0a <HAL_GPIO_Init+0x206>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	e008      	b.n	8004c0a <HAL_GPIO_Init+0x206>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	e006      	b.n	8004c0a <HAL_GPIO_Init+0x206>
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e004      	b.n	8004c0a <HAL_GPIO_Init+0x206>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e002      	b.n	8004c0a <HAL_GPIO_Init+0x206>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_GPIO_Init+0x206>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	f002 0203 	and.w	r2, r2, #3
 8004c10:	0092      	lsls	r2, r2, #2
 8004c12:	4093      	lsls	r3, r2
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c1a:	4925      	ldr	r1, [pc, #148]	; (8004cb0 <HAL_GPIO_Init+0x2ac>)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	3302      	adds	r3, #2
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4924      	ldr	r1, [pc, #144]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]
 8004c40:	e006      	b.n	8004c50 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c42:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	4920      	ldr	r1, [pc, #128]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	491a      	ldr	r1, [pc, #104]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]
 8004c68:	e006      	b.n	8004c78 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	4916      	ldr	r1, [pc, #88]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d025      	beq.n	8004cd0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c84:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	4910      	ldr	r1, [pc, #64]	; (8004ccc <HAL_GPIO_Init+0x2c8>)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]
 8004c90:	e025      	b.n	8004cde <HAL_GPIO_Init+0x2da>
 8004c92:	bf00      	nop
 8004c94:	10320000 	.word	0x10320000
 8004c98:	10310000 	.word	0x10310000
 8004c9c:	10220000 	.word	0x10220000
 8004ca0:	10210000 	.word	0x10210000
 8004ca4:	10120000 	.word	0x10120000
 8004ca8:	10110000 	.word	0x10110000
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40010800 	.word	0x40010800
 8004cb8:	40010c00 	.word	0x40010c00
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	40011800 	.word	0x40011800
 8004cc8:	40011c00 	.word	0x40011c00
 8004ccc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cd0:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_GPIO_Init+0x324>)
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	4913      	ldr	r1, [pc, #76]	; (8004d28 <HAL_GPIO_Init+0x324>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_GPIO_Init+0x324>)
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	490e      	ldr	r1, [pc, #56]	; (8004d28 <HAL_GPIO_Init+0x324>)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60cb      	str	r3, [r1, #12]
 8004cf6:	e006      	b.n	8004d06 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_GPIO_Init+0x324>)
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	4909      	ldr	r1, [pc, #36]	; (8004d28 <HAL_GPIO_Init+0x324>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	3301      	adds	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f ae7e 	bne.w	8004a18 <HAL_GPIO_Init+0x14>
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	372c      	adds	r7, #44	; 0x2c
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	; 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004d3a:	e0a6      	b.n	8004e8a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8099 	beq.w	8004e84 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004d52:	4a54      	ldr	r2, [pc, #336]	; (8004ea4 <HAL_GPIO_DeInit+0x178>)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	089b      	lsrs	r3, r3, #2
 8004d58:	3302      	adds	r3, #2
 8004d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	220f      	movs	r2, #15
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4013      	ands	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a4c      	ldr	r2, [pc, #304]	; (8004ea8 <HAL_GPIO_DeInit+0x17c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01f      	beq.n	8004dbc <HAL_GPIO_DeInit+0x90>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a4b      	ldr	r2, [pc, #300]	; (8004eac <HAL_GPIO_DeInit+0x180>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d019      	beq.n	8004db8 <HAL_GPIO_DeInit+0x8c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a4a      	ldr	r2, [pc, #296]	; (8004eb0 <HAL_GPIO_DeInit+0x184>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_GPIO_DeInit+0x88>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a49      	ldr	r2, [pc, #292]	; (8004eb4 <HAL_GPIO_DeInit+0x188>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <HAL_GPIO_DeInit+0x84>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a48      	ldr	r2, [pc, #288]	; (8004eb8 <HAL_GPIO_DeInit+0x18c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <HAL_GPIO_DeInit+0x80>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	; (8004ebc <HAL_GPIO_DeInit+0x190>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_GPIO_DeInit+0x7c>
 8004da4:	2305      	movs	r3, #5
 8004da6:	e00a      	b.n	8004dbe <HAL_GPIO_DeInit+0x92>
 8004da8:	2306      	movs	r3, #6
 8004daa:	e008      	b.n	8004dbe <HAL_GPIO_DeInit+0x92>
 8004dac:	2304      	movs	r3, #4
 8004dae:	e006      	b.n	8004dbe <HAL_GPIO_DeInit+0x92>
 8004db0:	2303      	movs	r3, #3
 8004db2:	e004      	b.n	8004dbe <HAL_GPIO_DeInit+0x92>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e002      	b.n	8004dbe <HAL_GPIO_DeInit+0x92>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <HAL_GPIO_DeInit+0x92>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	f002 0203 	and.w	r2, r2, #3
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	4093      	lsls	r3, r2
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d132      	bne.n	8004e34 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	220f      	movs	r2, #15
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004dde:	4a31      	ldr	r2, [pc, #196]	; (8004ea4 <HAL_GPIO_DeInit+0x178>)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	3302      	adds	r3, #2
 8004de6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	43da      	mvns	r2, r3
 8004dee:	482d      	ldr	r0, [pc, #180]	; (8004ea4 <HAL_GPIO_DeInit+0x178>)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	400a      	ands	r2, r1
 8004df6:	3302      	adds	r3, #2
 8004df8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	492e      	ldr	r1, [pc, #184]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	492b      	ldr	r1, [pc, #172]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004e18:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	4927      	ldr	r1, [pc, #156]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004e26:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	4924      	ldr	r1, [pc, #144]	; (8004ec0 <HAL_GPIO_DeInit+0x194>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2bff      	cmp	r3, #255	; 0xff
 8004e38:	d801      	bhi.n	8004e3e <HAL_GPIO_DeInit+0x112>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	e001      	b.n	8004e42 <HAL_GPIO_DeInit+0x116>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2bff      	cmp	r3, #255	; 0xff
 8004e48:	d802      	bhi.n	8004e50 <HAL_GPIO_DeInit+0x124>
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	e002      	b.n	8004e56 <HAL_GPIO_DeInit+0x12a>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3b08      	subs	r3, #8
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	210f      	movs	r1, #15
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	401a      	ands	r2, r3
 8004e68:	2104      	movs	r1, #4
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	431a      	orrs	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	401a      	ands	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3301      	adds	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f47f af52 	bne.w	8004d3c <HAL_GPIO_DeInit+0x10>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	3724      	adds	r7, #36	; 0x24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010800 	.word	0x40010800
 8004eac:	40010c00 	.word	0x40010c00
 8004eb0:	40011000 	.word	0x40011000
 8004eb4:	40011400 	.word	0x40011400
 8004eb8:	40011800 	.word	0x40011800
 8004ebc:	40011c00 	.word	0x40011c00
 8004ec0:	40010400 	.word	0x40010400

08004ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed4:	787b      	ldrb	r3, [r7, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ee0:	e003      	b.n	8004eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	041a      	lsls	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f06:	887a      	ldrh	r2, [r7, #2]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	041a      	lsls	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	43d9      	mvns	r1, r3
 8004f12:	887b      	ldrh	r3, [r7, #2]
 8004f14:	400b      	ands	r3, r1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f3e:	4a05      	ldr	r2, [pc, #20]	; (8004f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd ff38 	bl	8002dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e12b      	b.n	80051c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd fbbc 	bl	80026fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f001 fba0 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4a81      	ldr	r2, [pc, #516]	; (80051cc <HAL_I2C_Init+0x274>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d807      	bhi.n	8004fdc <HAL_I2C_Init+0x84>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a80      	ldr	r2, [pc, #512]	; (80051d0 <HAL_I2C_Init+0x278>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bf94      	ite	ls
 8004fd4:	2301      	movls	r3, #1
 8004fd6:	2300      	movhi	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e006      	b.n	8004fea <HAL_I2C_Init+0x92>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a7d      	ldr	r2, [pc, #500]	; (80051d4 <HAL_I2C_Init+0x27c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	bf94      	ite	ls
 8004fe4:	2301      	movls	r3, #1
 8004fe6:	2300      	movhi	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0e7      	b.n	80051c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a78      	ldr	r2, [pc, #480]	; (80051d8 <HAL_I2C_Init+0x280>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	0c9b      	lsrs	r3, r3, #18
 8004ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a6a      	ldr	r2, [pc, #424]	; (80051cc <HAL_I2C_Init+0x274>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d802      	bhi.n	800502c <HAL_I2C_Init+0xd4>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	3301      	adds	r3, #1
 800502a:	e009      	b.n	8005040 <HAL_I2C_Init+0xe8>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	4a69      	ldr	r2, [pc, #420]	; (80051dc <HAL_I2C_Init+0x284>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	3301      	adds	r3, #1
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	430b      	orrs	r3, r1
 8005046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	495c      	ldr	r1, [pc, #368]	; (80051cc <HAL_I2C_Init+0x274>)
 800505c:	428b      	cmp	r3, r1
 800505e:	d819      	bhi.n	8005094 <HAL_I2C_Init+0x13c>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e59      	subs	r1, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	fbb1 f3f3 	udiv	r3, r1, r3
 800506e:	1c59      	adds	r1, r3, #1
 8005070:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005074:	400b      	ands	r3, r1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_I2C_Init+0x138>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1e59      	subs	r1, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fbb1 f3f3 	udiv	r3, r1, r3
 8005088:	3301      	adds	r3, #1
 800508a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508e:	e051      	b.n	8005134 <HAL_I2C_Init+0x1dc>
 8005090:	2304      	movs	r3, #4
 8005092:	e04f      	b.n	8005134 <HAL_I2C_Init+0x1dc>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d111      	bne.n	80050c0 <HAL_I2C_Init+0x168>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1e58      	subs	r0, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	440b      	add	r3, r1
 80050aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e012      	b.n	80050e6 <HAL_I2C_Init+0x18e>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1e58      	subs	r0, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6859      	ldr	r1, [r3, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	0099      	lsls	r1, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050d6:	3301      	adds	r3, #1
 80050d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bf0c      	ite	eq
 80050e0:	2301      	moveq	r3, #1
 80050e2:	2300      	movne	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_I2C_Init+0x196>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e022      	b.n	8005134 <HAL_I2C_Init+0x1dc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10e      	bne.n	8005114 <HAL_I2C_Init+0x1bc>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1e58      	subs	r0, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	440b      	add	r3, r1
 8005104:	fbb0 f3f3 	udiv	r3, r0, r3
 8005108:	3301      	adds	r3, #1
 800510a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005112:	e00f      	b.n	8005134 <HAL_I2C_Init+0x1dc>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1e58      	subs	r0, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6859      	ldr	r1, [r3, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	0099      	lsls	r1, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	fbb0 f3f3 	udiv	r3, r0, r3
 800512a:	3301      	adds	r3, #1
 800512c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	6809      	ldr	r1, [r1, #0]
 8005138:	4313      	orrs	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6911      	ldr	r1, [r2, #16]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68d2      	ldr	r2, [r2, #12]
 800516e:	4311      	orrs	r1, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	430b      	orrs	r3, r1
 8005176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	000186a0 	.word	0x000186a0
 80051d0:	001e847f 	.word	0x001e847f
 80051d4:	003d08ff 	.word	0x003d08ff
 80051d8:	431bde83 	.word	0x431bde83
 80051dc:	10624dd3 	.word	0x10624dd3

080051e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e021      	b.n	8005236 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	; 0x24
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fd fab6 	bl	800277c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	461a      	mov	r2, r3
 800524c:	460b      	mov	r3, r1
 800524e:	817b      	strh	r3, [r7, #10]
 8005250:	4613      	mov	r3, r2
 8005252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005254:	f7fe ff34 	bl	80040c0 <HAL_GetTick>
 8005258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b20      	cmp	r3, #32
 8005264:	f040 80e0 	bne.w	8005428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2319      	movs	r3, #25
 800526e:	2201      	movs	r2, #1
 8005270:	4970      	ldr	r1, [pc, #448]	; (8005434 <HAL_I2C_Master_Transmit+0x1f4>)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fc92 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800527e:	2302      	movs	r3, #2
 8005280:	e0d3      	b.n	800542a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_I2C_Master_Transmit+0x50>
 800528c:	2302      	movs	r3, #2
 800528e:	e0cc      	b.n	800542a <HAL_I2C_Master_Transmit+0x1ea>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d007      	beq.n	80052b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2221      	movs	r2, #33	; 0x21
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2210      	movs	r2, #16
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	893a      	ldrh	r2, [r7, #8]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a50      	ldr	r2, [pc, #320]	; (8005438 <HAL_I2C_Master_Transmit+0x1f8>)
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052f8:	8979      	ldrh	r1, [r7, #10]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fafc 	bl	80058fc <I2C_MasterRequestWrite>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e08d      	b.n	800542a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005324:	e066      	b.n	80053f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	6a39      	ldr	r1, [r7, #32]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fd0c 	bl	8005d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b04      	cmp	r3, #4
 800533c:	d107      	bne.n	800534e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e06b      	b.n	800542a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d11b      	bne.n	80053c8 <HAL_I2C_Master_Transmit+0x188>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fcfc 	bl	8005dca <I2C_WaitOnBTFFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d107      	bne.n	80053f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e01a      	b.n	800542a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d194      	bne.n	8005326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	00100002 	.word	0x00100002
 8005438:	ffff0000 	.word	0xffff0000

0800543c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	461a      	mov	r2, r3
 8005448:	460b      	mov	r3, r1
 800544a:	817b      	strh	r3, [r7, #10]
 800544c:	4613      	mov	r3, r2
 800544e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005454:	f7fe fe34 	bl	80040c0 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b20      	cmp	r3, #32
 8005464:	f040 823f 	bne.w	80058e6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	2319      	movs	r3, #25
 800546e:	2201      	movs	r2, #1
 8005470:	497f      	ldr	r1, [pc, #508]	; (8005670 <HAL_I2C_Master_Receive+0x234>)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fb92 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
 8005480:	e232      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_I2C_Master_Receive+0x54>
 800548c:	2302      	movs	r3, #2
 800548e:	e22b      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d007      	beq.n	80054b6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2222      	movs	r2, #34	; 0x22
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2210      	movs	r2, #16
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	893a      	ldrh	r2, [r7, #8]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a5f      	ldr	r2, [pc, #380]	; (8005674 <HAL_I2C_Master_Receive+0x238>)
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054f8:	8979      	ldrh	r1, [r7, #10]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fa7e 	bl	8005a00 <I2C_MasterRequestRead>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e1ec      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d113      	bne.n	800553e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e1c0      	b.n	80058c0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d11e      	bne.n	8005584 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005556:	b672      	cpsid	i
}
 8005558:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005580:	b662      	cpsie	i
}
 8005582:	e035      	b.n	80055f0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	2b02      	cmp	r3, #2
 800558a:	d11e      	bne.n	80055ca <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800559c:	b672      	cpsid	i
}
 800559e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80055c6:	b662      	cpsie	i
}
 80055c8:	e012      	b.n	80055f0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80055f0:	e166      	b.n	80058c0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	f200 811f 	bhi.w	800583a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005600:	2b01      	cmp	r3, #1
 8005602:	d123      	bne.n	800564c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fc1f 	bl	8005e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e167      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	855a      	strh	r2, [r3, #42]	; 0x2a
 800564a:	e139      	b.n	80058c0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	2b02      	cmp	r3, #2
 8005652:	d152      	bne.n	80056fa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	2200      	movs	r2, #0
 800565c:	4906      	ldr	r1, [pc, #24]	; (8005678 <HAL_I2C_Master_Receive+0x23c>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa9c 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e13c      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
 800566e:	bf00      	nop
 8005670:	00100002 	.word	0x00100002
 8005674:	ffff0000 	.word	0xffff0000
 8005678:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800567c:	b672      	cpsid	i
}
 800567e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80056c2:	b662      	cpsie	i
}
 80056c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f8:	e0e2      	b.n	80058c0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	2200      	movs	r2, #0
 8005702:	497b      	ldr	r1, [pc, #492]	; (80058f0 <HAL_I2C_Master_Receive+0x4b4>)
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fa49 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0e9      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005722:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005724:	b672      	cpsid	i
}
 8005726:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800575a:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_I2C_Master_Receive+0x4b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	08db      	lsrs	r3, r3, #3
 8005760:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_I2C_Master_Receive+0x4bc>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0a1a      	lsrs	r2, r3, #8
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00da      	lsls	r2, r3, #3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	3b01      	subs	r3, #1
 8005778:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d118      	bne.n	80057b2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80057a2:	b662      	cpsie	i
}
 80057a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e09a      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d1d9      	bne.n	8005774 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005802:	b662      	cpsie	i
}
 8005804:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005838:	e042      	b.n	80058c0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fb04 	bl	8005e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e04c      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d118      	bne.n	80058c0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f ae94 	bne.w	80055f2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	; 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	00010004 	.word	0x00010004
 80058f4:	20000604 	.word	0x20000604
 80058f8:	14f8b589 	.word	0x14f8b589

080058fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	460b      	mov	r3, r1
 800590a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d006      	beq.n	8005926 <I2C_MasterRequestWrite+0x2a>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d003      	beq.n	8005926 <I2C_MasterRequestWrite+0x2a>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005924:	d108      	bne.n	8005938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e00b      	b.n	8005950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	2b12      	cmp	r3, #18
 800593e:	d107      	bne.n	8005950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f91d 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00d      	beq.n	8005984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005976:	d103      	bne.n	8005980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e035      	b.n	80059f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598c:	d108      	bne.n	80059a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	e01b      	b.n	80059d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	11db      	asrs	r3, r3, #7
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0306 	and.w	r3, r3, #6
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f063 030f 	orn	r3, r3, #15
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	490e      	ldr	r1, [pc, #56]	; (80059f8 <I2C_MasterRequestWrite+0xfc>)
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f943 	bl	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e010      	b.n	80059f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059ce:	897b      	ldrh	r3, [r7, #10]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4907      	ldr	r1, [pc, #28]	; (80059fc <I2C_MasterRequestWrite+0x100>)
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f933 	bl	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	00010008 	.word	0x00010008
 80059fc:	00010002 	.word	0x00010002

08005a00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d006      	beq.n	8005a3a <I2C_MasterRequestRead+0x3a>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d003      	beq.n	8005a3a <I2C_MasterRequestRead+0x3a>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a38:	d108      	bne.n	8005a4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e00b      	b.n	8005a64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b11      	cmp	r3, #17
 8005a52:	d107      	bne.n	8005a64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f893 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00d      	beq.n	8005a98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d103      	bne.n	8005a94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e079      	b.n	8005b8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa0:	d108      	bne.n	8005ab4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aa2:	897b      	ldrh	r3, [r7, #10]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	611a      	str	r2, [r3, #16]
 8005ab2:	e05f      	b.n	8005b74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ab4:	897b      	ldrh	r3, [r7, #10]
 8005ab6:	11db      	asrs	r3, r3, #7
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f003 0306 	and.w	r3, r3, #6
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f063 030f 	orn	r3, r3, #15
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4930      	ldr	r1, [pc, #192]	; (8005b94 <I2C_MasterRequestRead+0x194>)
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f8b9 	bl	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e054      	b.n	8005b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4929      	ldr	r1, [pc, #164]	; (8005b98 <I2C_MasterRequestRead+0x198>)
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f8a9 	bl	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e044      	b.n	8005b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f831 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d103      	bne.n	8005b58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e017      	b.n	8005b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b5c:	897b      	ldrh	r3, [r7, #10]
 8005b5e:	11db      	asrs	r3, r3, #7
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0306 	and.w	r3, r3, #6
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f063 030e 	orn	r3, r3, #14
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	4907      	ldr	r1, [pc, #28]	; (8005b98 <I2C_MasterRequestRead+0x198>)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f865 	bl	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	00010008 	.word	0x00010008
 8005b98:	00010002 	.word	0x00010002

08005b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bac:	e025      	b.n	8005bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d021      	beq.n	8005bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb6:	f7fe fa83 	bl	80040c0 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d302      	bcc.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e023      	b.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10d      	bne.n	8005c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	43da      	mvns	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	e00c      	b.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	43da      	mvns	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d0b6      	beq.n	8005bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c58:	e051      	b.n	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c68:	d123      	bne.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0204 	orr.w	r2, r3, #4
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e046      	b.n	8005d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d021      	beq.n	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fe fa01 	bl	80040c0 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d116      	bne.n	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e020      	b.n	8005d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	0c1b      	lsrs	r3, r3, #16
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10c      	bne.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf14      	ite	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	2300      	moveq	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	e00b      	b.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	43da      	mvns	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bf14      	ite	ne
 8005d34:	2301      	movne	r3, #1
 8005d36:	2300      	moveq	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d18d      	bne.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d54:	e02d      	b.n	8005db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f8ce 	bl	8005ef8 <I2C_IsAcknowledgeFailed>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e02d      	b.n	8005dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d021      	beq.n	8005db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fe f9a7 	bl	80040c0 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d116      	bne.n	8005db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e007      	b.n	8005dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d1ca      	bne.n	8005d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dd6:	e02d      	b.n	8005e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f88d 	bl	8005ef8 <I2C_IsAcknowledgeFailed>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e02d      	b.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d021      	beq.n	8005e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df0:	f7fe f966 	bl	80040c0 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d302      	bcc.n	8005e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d116      	bne.n	8005e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e007      	b.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d1ca      	bne.n	8005dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e58:	e042      	b.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d119      	bne.n	8005e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0210 	mvn.w	r2, #16
 8005e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e029      	b.n	8005ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9c:	f7fe f910 	bl	80040c0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d116      	bne.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e007      	b.n	8005ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d1b5      	bne.n	8005e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0e:	d11b      	bne.n	8005f48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	f043 0204 	orr.w	r2, r3, #4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e272      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8087 	beq.w	8006082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f74:	4b92      	ldr	r3, [pc, #584]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f003 030c 	and.w	r3, r3, #12
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d00c      	beq.n	8005f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f80:	4b8f      	ldr	r3, [pc, #572]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 030c 	and.w	r3, r3, #12
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d112      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x5e>
 8005f8c:	4b8c      	ldr	r3, [pc, #560]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d10b      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9a:	4b89      	ldr	r3, [pc, #548]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d06c      	beq.n	8006080 <HAL_RCC_OscConfig+0x12c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d168      	bne.n	8006080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e24c      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fba:	d106      	bne.n	8005fca <HAL_RCC_OscConfig+0x76>
 8005fbc:	4b80      	ldr	r3, [pc, #512]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a7f      	ldr	r2, [pc, #508]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e02e      	b.n	8006028 <HAL_RCC_OscConfig+0xd4>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0x98>
 8005fd2:	4b7b      	ldr	r3, [pc, #492]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a7a      	ldr	r2, [pc, #488]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b78      	ldr	r3, [pc, #480]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a77      	ldr	r2, [pc, #476]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e01d      	b.n	8006028 <HAL_RCC_OscConfig+0xd4>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0xbc>
 8005ff6:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a71      	ldr	r2, [pc, #452]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a6e      	ldr	r2, [pc, #440]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0xd4>
 8006010:	4b6b      	ldr	r3, [pc, #428]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a6a      	ldr	r2, [pc, #424]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a67      	ldr	r2, [pc, #412]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fe f846 	bl	80040c0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006038:	f7fe f842 	bl	80040c0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e200      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604a:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0xe4>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fe f832 	bl	80040c0 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006060:	f7fe f82e 	bl	80040c0 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	; 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e1ec      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006072:	4b53      	ldr	r3, [pc, #332]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x10c>
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d063      	beq.n	8006156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800608e:	4b4c      	ldr	r3, [pc, #304]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00b      	beq.n	80060b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800609a:	4b49      	ldr	r3, [pc, #292]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d11c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x18c>
 80060a6:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d116      	bne.n	80060e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b2:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_RCC_OscConfig+0x176>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d001      	beq.n	80060ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e1c0      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ca:	4b3d      	ldr	r3, [pc, #244]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4939      	ldr	r1, [pc, #228]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060de:	e03a      	b.n	8006156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <HAL_RCC_OscConfig+0x270>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ee:	f7fd ffe7 	bl	80040c0 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f6:	f7fd ffe3 	bl	80040c0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e1a1      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006108:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006114:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4927      	ldr	r1, [pc, #156]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]
 8006128:	e015      	b.n	8006156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <HAL_RCC_OscConfig+0x270>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fd ffc6 	bl	80040c0 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006138:	f7fd ffc2 	bl	80040c0 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e180      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614a:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d03a      	beq.n	80061d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d019      	beq.n	800619e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800616a:	4b17      	ldr	r3, [pc, #92]	; (80061c8 <HAL_RCC_OscConfig+0x274>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006170:	f7fd ffa6 	bl	80040c0 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006178:	f7fd ffa2 	bl	80040c0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e160      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <HAL_RCC_OscConfig+0x26c>)
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006196:	2001      	movs	r0, #1
 8006198:	f000 fada 	bl	8006750 <RCC_Delay>
 800619c:	e01c      	b.n	80061d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <HAL_RCC_OscConfig+0x274>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a4:	f7fd ff8c 	bl	80040c0 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061aa:	e00f      	b.n	80061cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ac:	f7fd ff88 	bl	80040c0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d908      	bls.n	80061cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e146      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000
 80061c4:	42420000 	.word	0x42420000
 80061c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	4b92      	ldr	r3, [pc, #584]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e9      	bne.n	80061ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80a6 	beq.w	8006332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b8b      	ldr	r3, [pc, #556]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	4b88      	ldr	r3, [pc, #544]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	4a87      	ldr	r2, [pc, #540]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80061fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006200:	61d3      	str	r3, [r2, #28]
 8006202:	4b85      	ldr	r3, [pc, #532]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	2301      	movs	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006212:	4b82      	ldr	r3, [pc, #520]	; (800641c <HAL_RCC_OscConfig+0x4c8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d118      	bne.n	8006250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800621e:	4b7f      	ldr	r3, [pc, #508]	; (800641c <HAL_RCC_OscConfig+0x4c8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7e      	ldr	r2, [pc, #504]	; (800641c <HAL_RCC_OscConfig+0x4c8>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622a:	f7fd ff49 	bl	80040c0 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006232:	f7fd ff45 	bl	80040c0 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b64      	cmp	r3, #100	; 0x64
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e103      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006244:	4b75      	ldr	r3, [pc, #468]	; (800641c <HAL_RCC_OscConfig+0x4c8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d106      	bne.n	8006266 <HAL_RCC_OscConfig+0x312>
 8006258:	4b6f      	ldr	r3, [pc, #444]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	4a6e      	ldr	r2, [pc, #440]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	6213      	str	r3, [r2, #32]
 8006264:	e02d      	b.n	80062c2 <HAL_RCC_OscConfig+0x36e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10c      	bne.n	8006288 <HAL_RCC_OscConfig+0x334>
 800626e:	4b6a      	ldr	r3, [pc, #424]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	4a69      	ldr	r2, [pc, #420]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6213      	str	r3, [r2, #32]
 800627a:	4b67      	ldr	r3, [pc, #412]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	4a66      	ldr	r2, [pc, #408]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6213      	str	r3, [r2, #32]
 8006286:	e01c      	b.n	80062c2 <HAL_RCC_OscConfig+0x36e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b05      	cmp	r3, #5
 800628e:	d10c      	bne.n	80062aa <HAL_RCC_OscConfig+0x356>
 8006290:	4b61      	ldr	r3, [pc, #388]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4a60      	ldr	r2, [pc, #384]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006296:	f043 0304 	orr.w	r3, r3, #4
 800629a:	6213      	str	r3, [r2, #32]
 800629c:	4b5e      	ldr	r3, [pc, #376]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	4a5d      	ldr	r2, [pc, #372]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6213      	str	r3, [r2, #32]
 80062a8:	e00b      	b.n	80062c2 <HAL_RCC_OscConfig+0x36e>
 80062aa:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	4a5a      	ldr	r2, [pc, #360]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6213      	str	r3, [r2, #32]
 80062b6:	4b58      	ldr	r3, [pc, #352]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d015      	beq.n	80062f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ca:	f7fd fef9 	bl	80040c0 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d0:	e00a      	b.n	80062e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fd fef5 	bl	80040c0 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0b1      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e8:	4b4b      	ldr	r3, [pc, #300]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0ee      	beq.n	80062d2 <HAL_RCC_OscConfig+0x37e>
 80062f4:	e014      	b.n	8006320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f6:	f7fd fee3 	bl	80040c0 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062fc:	e00a      	b.n	8006314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fe:	f7fd fedf 	bl	80040c0 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f241 3288 	movw	r2, #5000	; 0x1388
 800630c:	4293      	cmp	r3, r2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e09b      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006314:	4b40      	ldr	r3, [pc, #256]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ee      	bne.n	80062fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006326:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4a3b      	ldr	r2, [pc, #236]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800632c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8087 	beq.w	800644a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800633c:	4b36      	ldr	r3, [pc, #216]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b08      	cmp	r3, #8
 8006346:	d061      	beq.n	800640c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d146      	bne.n	80063de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006350:	4b33      	ldr	r3, [pc, #204]	; (8006420 <HAL_RCC_OscConfig+0x4cc>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006356:	f7fd feb3 	bl	80040c0 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635e:	f7fd feaf 	bl	80040c0 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e06d      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006370:	4b29      	ldr	r3, [pc, #164]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006384:	d108      	bne.n	8006398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	4921      	ldr	r1, [pc, #132]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006398:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a19      	ldr	r1, [r3, #32]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	430b      	orrs	r3, r1
 80063aa:	491b      	ldr	r1, [pc, #108]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <HAL_RCC_OscConfig+0x4cc>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b6:	f7fd fe83 	bl	80040c0 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063be:	f7fd fe7f 	bl	80040c0 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e03d      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x46a>
 80063dc:	e035      	b.n	800644a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <HAL_RCC_OscConfig+0x4cc>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e4:	f7fd fe6c 	bl	80040c0 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fd fe68 	bl	80040c0 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e026      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <HAL_RCC_OscConfig+0x4c4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x498>
 800640a:	e01e      	b.n	800644a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e019      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
 8006418:	40021000 	.word	0x40021000
 800641c:	40007000 	.word	0x40007000
 8006420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <HAL_RCC_OscConfig+0x500>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	429a      	cmp	r2, r3
 8006436:	d106      	bne.n	8006446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000

08006458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0d0      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800646c:	4b6a      	ldr	r3, [pc, #424]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d910      	bls.n	800649c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647a:	4b67      	ldr	r3, [pc, #412]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f023 0207 	bic.w	r2, r3, #7
 8006482:	4965      	ldr	r1, [pc, #404]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	4313      	orrs	r3, r2
 8006488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b8      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a58      	ldr	r2, [pc, #352]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80064ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a52      	ldr	r2, [pc, #328]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80064d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	494d      	ldr	r1, [pc, #308]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d040      	beq.n	8006578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d115      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e07f      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d107      	bne.n	8006526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006516:	4b41      	ldr	r3, [pc, #260]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e073      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006526:	4b3d      	ldr	r3, [pc, #244]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06b      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006536:	4b39      	ldr	r3, [pc, #228]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f023 0203 	bic.w	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4936      	ldr	r1, [pc, #216]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 8006544:	4313      	orrs	r3, r2
 8006546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006548:	f7fd fdba 	bl	80040c0 <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	e00a      	b.n	8006566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006550:	f7fd fdb6 	bl	80040c0 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e053      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006566:	4b2d      	ldr	r3, [pc, #180]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 020c 	and.w	r2, r3, #12
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	429a      	cmp	r2, r3
 8006576:	d1eb      	bne.n	8006550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006578:	4b27      	ldr	r3, [pc, #156]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d210      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f023 0207 	bic.w	r2, r3, #7
 800658e:	4922      	ldr	r1, [pc, #136]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4313      	orrs	r3, r2
 8006594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e032      	b.n	800660e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4916      	ldr	r1, [pc, #88]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065e6:	f000 f821 	bl	800662c <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490a      	ldr	r1, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x1c8>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <HAL_RCC_ClockConfig+0x1cc>)
 8006600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1d0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd fd18 	bl	800403c <HAL_InitTick>

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40022000 	.word	0x40022000
 800661c:	40021000 	.word	0x40021000
 8006620:	0800d244 	.word	0x0800d244
 8006624:	20000604 	.word	0x20000604
 8006628:	20000608 	.word	0x20000608

0800662c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800662c:	b490      	push	{r4, r7}
 800662e:	b08a      	sub	sp, #40	; 0x28
 8006630:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006632:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8006634:	1d3c      	adds	r4, r7, #4
 8006636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800663c:	f240 2301 	movw	r3, #513	; 0x201
 8006640:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	2300      	movs	r3, #0
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006656:	4b21      	ldr	r3, [pc, #132]	; (80066dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	2b04      	cmp	r3, #4
 8006664:	d002      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x40>
 8006666:	2b08      	cmp	r3, #8
 8006668:	d003      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x46>
 800666a:	e02b      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800666c:	4b1c      	ldr	r3, [pc, #112]	; (80066e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800666e:	623b      	str	r3, [r7, #32]
      break;
 8006670:	e02b      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	0c9b      	lsrs	r3, r3, #18
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	3328      	adds	r3, #40	; 0x28
 800667c:	443b      	add	r3, r7
 800667e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006682:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d012      	beq.n	80066b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	0c5b      	lsrs	r3, r3, #17
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	3328      	adds	r3, #40	; 0x28
 800669a:	443b      	add	r3, r7
 800669c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80066a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80066a6:	fb03 f202 	mul.w	r2, r3, r2
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
 80066b2:	e004      	b.n	80066be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4a0b      	ldr	r2, [pc, #44]	; (80066e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	623b      	str	r3, [r7, #32]
      break;
 80066c2:	e002      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066c6:	623b      	str	r3, [r7, #32]
      break;
 80066c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ca:	6a3b      	ldr	r3, [r7, #32]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	; 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc90      	pop	{r4, r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	0800d234 	.word	0x0800d234
 80066dc:	40021000 	.word	0x40021000
 80066e0:	00f42400 	.word	0x00f42400
 80066e4:	003d0900 	.word	0x003d0900
 80066e8:	007a1200 	.word	0x007a1200

080066ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <HAL_RCC_GetHCLKFreq+0x10>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	20000604 	.word	0x20000604

08006700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006704:	f7ff fff2 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006708:	4602      	mov	r2, r0
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	4903      	ldr	r1, [pc, #12]	; (8006724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006716:	5ccb      	ldrb	r3, [r1, r3]
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40021000 	.word	0x40021000
 8006724:	0800d254 	.word	0x0800d254

08006728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800672c:	f7ff ffde 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006730:	4602      	mov	r2, r0
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	0adb      	lsrs	r3, r3, #11
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4903      	ldr	r1, [pc, #12]	; (800674c <HAL_RCC_GetPCLK2Freq+0x24>)
 800673e:	5ccb      	ldrb	r3, [r1, r3]
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40021000 	.word	0x40021000
 800674c:	0800d254 	.word	0x0800d254

08006750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <RCC_Delay+0x34>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <RCC_Delay+0x38>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0a5b      	lsrs	r3, r3, #9
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800676c:	bf00      	nop
  }
  while (Delay --);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	60fa      	str	r2, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f9      	bne.n	800676c <RCC_Delay+0x1c>
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	20000604 	.word	0x20000604
 8006788:	10624dd3 	.word	0x10624dd3

0800678c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d07d      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ac:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10d      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b8:	4b4c      	ldr	r3, [pc, #304]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4a4b      	ldr	r2, [pc, #300]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c2:	61d3      	str	r3, [r2, #28]
 80067c4:	4b49      	ldr	r3, [pc, #292]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d4:	4b46      	ldr	r3, [pc, #280]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d118      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067e0:	4b43      	ldr	r3, [pc, #268]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a42      	ldr	r2, [pc, #264]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ec:	f7fd fc68 	bl	80040c0 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f2:	e008      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f4:	f7fd fc64 	bl	80040c0 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b64      	cmp	r3, #100	; 0x64
 8006800:	d901      	bls.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e06d      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006806:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006812:	4b36      	ldr	r3, [pc, #216]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d02e      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	429a      	cmp	r2, r3
 800682e:	d027      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006830:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006838:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800683a:	4b2e      	ldr	r3, [pc, #184]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006840:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006846:	4a29      	ldr	r2, [pc, #164]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d014      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006856:	f7fd fc33 	bl	80040c0 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685c:	e00a      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685e:	f7fd fc2f 	bl	80040c0 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	; 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e036      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0ee      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4917      	ldr	r1, [pc, #92]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688e:	4313      	orrs	r3, r2
 8006890:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d105      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	4a13      	ldr	r2, [pc, #76]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	490b      	ldr	r1, [pc, #44]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	4904      	ldr	r1, [pc, #16]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40021000 	.word	0x40021000
 80068f0:	40007000 	.word	0x40007000
 80068f4:	42420440 	.word	0x42420440

080068f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e041      	b.n	800698e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fd f8c8 	bl	8003ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f000 fe7e 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d001      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e044      	b.n	8006a3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_TIM_Base_Start_IT+0xac>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x6c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_TIM_Base_Start_IT+0xb0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x6c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e4:	d00e      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x6c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <HAL_TIM_Base_Start_IT+0xb4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x6c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <HAL_TIM_Base_Start_IT+0xb8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x6c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d111      	bne.n	8006a28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b06      	cmp	r3, #6
 8006a14:	d010      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0201 	orr.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a26:	e007      	b.n	8006a38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40013400 	.word	0x40013400
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00

08006a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e041      	b.n	8006aee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f839 	bl	8006af6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f000 fdce 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <HAL_TIM_PWM_Start+0x24>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	e022      	b.n	8006b72 <HAL_TIM_PWM_Start+0x6a>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d109      	bne.n	8006b46 <HAL_TIM_PWM_Start+0x3e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	bf14      	ite	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	2300      	moveq	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	e015      	b.n	8006b72 <HAL_TIM_PWM_Start+0x6a>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d109      	bne.n	8006b60 <HAL_TIM_PWM_Start+0x58>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	bf14      	ite	ne
 8006b58:	2301      	movne	r3, #1
 8006b5a:	2300      	moveq	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	e008      	b.n	8006b72 <HAL_TIM_PWM_Start+0x6a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e072      	b.n	8006c60 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Start+0x82>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b88:	e013      	b.n	8006bb2 <HAL_TIM_PWM_Start+0xaa>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b98:	e00b      	b.n	8006bb2 <HAL_TIM_PWM_Start+0xaa>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_PWM_Start+0xa2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	e003      	b.n	8006bb2 <HAL_TIM_PWM_Start+0xaa>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fff8 	bl	8007bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a28      	ldr	r2, [pc, #160]	; (8006c68 <HAL_TIM_PWM_Start+0x160>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <HAL_TIM_PWM_Start+0xcc>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a27      	ldr	r2, [pc, #156]	; (8006c6c <HAL_TIM_PWM_Start+0x164>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d101      	bne.n	8006bd8 <HAL_TIM_PWM_Start+0xd0>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1d      	ldr	r2, [pc, #116]	; (8006c68 <HAL_TIM_PWM_Start+0x160>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x122>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <HAL_TIM_PWM_Start+0x164>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x122>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d00e      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x122>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <HAL_TIM_PWM_Start+0x168>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x122>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a16      	ldr	r2, [pc, #88]	; (8006c74 <HAL_TIM_PWM_Start+0x16c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x122>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <HAL_TIM_PWM_Start+0x170>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d111      	bne.n	8006c4e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b06      	cmp	r3, #6
 8006c3a:	d010      	beq.n	8006c5e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4c:	e007      	b.n	8006c5e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0201 	orr.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40000400 	.word	0x40000400
 8006c74:	40000800 	.word	0x40000800
 8006c78:	40000c00 	.word	0x40000c00

08006c7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_TIM_PWM_Start_IT+0x24>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	bf14      	ite	ne
 8006c98:	2301      	movne	r3, #1
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e022      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x6a>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d109      	bne.n	8006cba <HAL_TIM_PWM_Start_IT+0x3e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e015      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x6a>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d109      	bne.n	8006cd4 <HAL_TIM_PWM_Start_IT+0x58>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e008      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x6a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e0b8      	b.n	8006e60 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start_IT+0x82>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfc:	e013      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0xaa>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start_IT+0x92>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d0c:	e00b      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0xaa>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	e003      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0xaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d841      	bhi.n	8006db0 <HAL_TIM_PWM_Start_IT+0x134>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_TIM_PWM_Start_IT+0xb8>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d69 	.word	0x08006d69
 8006d38:	08006db1 	.word	0x08006db1
 8006d3c:	08006db1 	.word	0x08006db1
 8006d40:	08006db1 	.word	0x08006db1
 8006d44:	08006d7b 	.word	0x08006d7b
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006db1 	.word	0x08006db1
 8006d54:	08006d8d 	.word	0x08006d8d
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006d9f 	.word	0x08006d9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0202 	orr.w	r2, r2, #2
 8006d76:	60da      	str	r2, [r3, #12]
      break;
 8006d78:	e01b      	b.n	8006db2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0204 	orr.w	r2, r2, #4
 8006d88:	60da      	str	r2, [r3, #12]
      break;
 8006d8a:	e012      	b.n	8006db2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	60da      	str	r2, [r3, #12]
      break;
 8006d9c:	e009      	b.n	8006db2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0210 	orr.w	r2, r2, #16
 8006dac:	60da      	str	r2, [r3, #12]
      break;
 8006dae:	e000      	b.n	8006db2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8006db0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fef8 	bl	8007bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d004      	beq.n	8006dd4 <HAL_TIM_PWM_Start_IT+0x158>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIM_PWM_Start_IT+0x15c>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_TIM_PWM_Start_IT+0x15e>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_TIM_PWM_Start_IT+0x1ae>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_TIM_PWM_Start_IT+0x1ae>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIM_PWM_Start_IT+0x1ae>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIM_PWM_Start_IT+0x1ae>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIM_PWM_Start_IT+0x1ae>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d111      	bne.n	8006e4e <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b06      	cmp	r3, #6
 8006e3a:	d010      	beq.n	8006e5e <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4c:	e007      	b.n	8006e5e <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0201 	orr.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40013400 	.word	0x40013400
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00

08006e7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e093      	b.n	8006fb8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fc fe93 	bl	8003bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec0:	f023 0307 	bic.w	r3, r3, #7
 8006ec4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fbb1 	bl	8007638 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f1c:	f023 030c 	bic.w	r3, r3, #12
 8006f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	011a      	lsls	r2, r3, #4
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	031b      	lsls	r3, r3, #12
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4313      	orrs	r3, r2
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fe0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fe8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d110      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d102      	bne.n	8006ffc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ff6:	7b7b      	ldrb	r3, [r7, #13]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e069      	b.n	80070d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007010:	e031      	b.n	8007076 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b04      	cmp	r3, #4
 8007016:	d110      	bne.n	800703a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d102      	bne.n	8007024 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800701e:	7b3b      	ldrb	r3, [r7, #12]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d001      	beq.n	8007028 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e055      	b.n	80070d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007038:	e01d      	b.n	8007076 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d108      	bne.n	8007052 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d105      	bne.n	8007052 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007046:	7b7b      	ldrb	r3, [r7, #13]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d102      	bne.n	8007052 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800704c:	7b3b      	ldrb	r3, [r7, #12]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e03e      	b.n	80070d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2202      	movs	r2, #2
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_TIM_Encoder_Start+0xc4>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b04      	cmp	r3, #4
 8007080:	d008      	beq.n	8007094 <HAL_TIM_Encoder_Start+0xd4>
 8007082:	e00f      	b.n	80070a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2201      	movs	r2, #1
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fd8f 	bl	8007bb0 <TIM_CCxChannelCmd>
      break;
 8007092:	e016      	b.n	80070c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2201      	movs	r2, #1
 800709a:	2104      	movs	r1, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fd87 	bl	8007bb0 <TIM_CCxChannelCmd>
      break;
 80070a2:	e00e      	b.n	80070c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fd7f 	bl	8007bb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	2104      	movs	r1, #4
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fd78 	bl	8007bb0 <TIM_CCxChannelCmd>
      break;
 80070c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0202 	mvn.w	r2, #2
 8007108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa6f 	bl	8007602 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa62 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa71 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d122      	bne.n	800718c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d11b      	bne.n	800718c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0204 	mvn.w	r2, #4
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa45 	bl	8007602 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa38 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fa47 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b08      	cmp	r3, #8
 8007198:	d122      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d11b      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0208 	mvn.w	r2, #8
 80071b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2204      	movs	r2, #4
 80071b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa1b 	bl	8007602 <HAL_TIM_IC_CaptureCallback>
 80071cc:	e005      	b.n	80071da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa0e 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa1d 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d122      	bne.n	8007234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d11b      	bne.n	8007234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0210 	mvn.w	r2, #16
 8007204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2208      	movs	r2, #8
 800720a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9f1 	bl	8007602 <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f9e4 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f9f3 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d10e      	bne.n	8007260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0201 	mvn.w	r2, #1
 8007258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fb fc24 	bl	8002aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d10e      	bne.n	800728c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d107      	bne.n	800728c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fd7c 	bl	8007d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d10e      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d107      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9b7 	bl	8007626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0220 	mvn.w	r2, #32
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fd47 	bl	8007d72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007302:	2302      	movs	r3, #2
 8007304:	e0ac      	b.n	8007460 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b0c      	cmp	r3, #12
 8007312:	f200 809f 	bhi.w	8007454 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007351 	.word	0x08007351
 8007320:	08007455 	.word	0x08007455
 8007324:	08007455 	.word	0x08007455
 8007328:	08007455 	.word	0x08007455
 800732c:	08007391 	.word	0x08007391
 8007330:	08007455 	.word	0x08007455
 8007334:	08007455 	.word	0x08007455
 8007338:	08007455 	.word	0x08007455
 800733c:	080073d3 	.word	0x080073d3
 8007340:	08007455 	.word	0x08007455
 8007344:	08007455 	.word	0x08007455
 8007348:	08007455 	.word	0x08007455
 800734c:	08007413 	.word	0x08007413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f9e8 	bl	800772c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0208 	orr.w	r2, r2, #8
 800736a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0204 	bic.w	r2, r2, #4
 800737a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6999      	ldr	r1, [r3, #24]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	619a      	str	r2, [r3, #24]
      break;
 800738e:	e062      	b.n	8007456 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fa38 	bl	800780c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6999      	ldr	r1, [r3, #24]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	021a      	lsls	r2, r3, #8
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	619a      	str	r2, [r3, #24]
      break;
 80073d0:	e041      	b.n	8007456 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fa8b 	bl	80078f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69da      	ldr	r2, [r3, #28]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0208 	orr.w	r2, r2, #8
 80073ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0204 	bic.w	r2, r2, #4
 80073fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69d9      	ldr	r1, [r3, #28]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	61da      	str	r2, [r3, #28]
      break;
 8007410:	e021      	b.n	8007456 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fadf 	bl	80079dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800742c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69d9      	ldr	r1, [r3, #28]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	021a      	lsls	r2, r3, #8
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	61da      	str	r2, [r3, #28]
      break;
 8007452:	e000      	b.n	8007456 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_TIM_ConfigClockSource+0x18>
 800747c:	2302      	movs	r3, #2
 800747e:	e0b3      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x180>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800749e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b8:	d03e      	beq.n	8007538 <HAL_TIM_ConfigClockSource+0xd0>
 80074ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074be:	f200 8087 	bhi.w	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c6:	f000 8085 	beq.w	80075d4 <HAL_TIM_ConfigClockSource+0x16c>
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ce:	d87f      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074d0:	2b70      	cmp	r3, #112	; 0x70
 80074d2:	d01a      	beq.n	800750a <HAL_TIM_ConfigClockSource+0xa2>
 80074d4:	2b70      	cmp	r3, #112	; 0x70
 80074d6:	d87b      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074d8:	2b60      	cmp	r3, #96	; 0x60
 80074da:	d050      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x116>
 80074dc:	2b60      	cmp	r3, #96	; 0x60
 80074de:	d877      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074e0:	2b50      	cmp	r3, #80	; 0x50
 80074e2:	d03c      	beq.n	800755e <HAL_TIM_ConfigClockSource+0xf6>
 80074e4:	2b50      	cmp	r3, #80	; 0x50
 80074e6:	d873      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d058      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x136>
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d86f      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	d064      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x156>
 80074f4:	2b30      	cmp	r3, #48	; 0x30
 80074f6:	d86b      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d060      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x156>
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d867      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05c      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x156>
 8007504:	2b10      	cmp	r3, #16
 8007506:	d05a      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007508:	e062      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6899      	ldr	r1, [r3, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f000 fb2a 	bl	8007b72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800752c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	609a      	str	r2, [r3, #8]
      break;
 8007536:	e04e      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6899      	ldr	r1, [r3, #8]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f000 fb13 	bl	8007b72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800755a:	609a      	str	r2, [r3, #8]
      break;
 800755c:	e03b      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	f000 fa8a 	bl	8007a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2150      	movs	r1, #80	; 0x50
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fae1 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 800757c:	e02b      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	461a      	mov	r2, r3
 800758c:	f000 faa8 	bl	8007ae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2160      	movs	r1, #96	; 0x60
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fad1 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 800759c:	e01b      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 fa6a 	bl	8007a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fac1 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80075bc:	e00b      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f000 fab8 	bl	8007b3e <TIM_ITRx_SetConfig>
        break;
 80075ce:	e002      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075d0:	bf00      	nop
 80075d2:	e000      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr

08007602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr

08007614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr

08007626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a33      	ldr	r2, [pc, #204]	; (8007718 <TIM_Base_SetConfig+0xe0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a32      	ldr	r2, [pc, #200]	; (800771c <TIM_Base_SetConfig+0xe4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00f      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765e:	d00b      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <TIM_Base_SetConfig+0xe8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d007      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a2e      	ldr	r2, [pc, #184]	; (8007724 <TIM_Base_SetConfig+0xec>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <TIM_Base_SetConfig+0xf0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d108      	bne.n	800768a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a22      	ldr	r2, [pc, #136]	; (8007718 <TIM_Base_SetConfig+0xe0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <TIM_Base_SetConfig+0x82>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a21      	ldr	r2, [pc, #132]	; (800771c <TIM_Base_SetConfig+0xe4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00f      	beq.n	80076ba <TIM_Base_SetConfig+0x82>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a0:	d00b      	beq.n	80076ba <TIM_Base_SetConfig+0x82>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1e      	ldr	r2, [pc, #120]	; (8007720 <TIM_Base_SetConfig+0xe8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d007      	beq.n	80076ba <TIM_Base_SetConfig+0x82>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <TIM_Base_SetConfig+0xec>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_Base_SetConfig+0x82>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <TIM_Base_SetConfig+0xf0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d108      	bne.n	80076cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a09      	ldr	r2, [pc, #36]	; (8007718 <TIM_Base_SetConfig+0xe0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_Base_SetConfig+0xc8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a08      	ldr	r2, [pc, #32]	; (800771c <TIM_Base_SetConfig+0xe4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d103      	bne.n	8007708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	615a      	str	r2, [r3, #20]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr
 8007718:	40012c00 	.word	0x40012c00
 800771c:	40013400 	.word	0x40013400
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00

0800772c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f023 0201 	bic.w	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 0302 	bic.w	r3, r3, #2
 8007774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a20      	ldr	r2, [pc, #128]	; (8007804 <TIM_OC1_SetConfig+0xd8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC1_SetConfig+0x64>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a1f      	ldr	r2, [pc, #124]	; (8007808 <TIM_OC1_SetConfig+0xdc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10c      	bne.n	80077aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0308 	bic.w	r3, r3, #8
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f023 0304 	bic.w	r3, r3, #4
 80077a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a15      	ldr	r2, [pc, #84]	; (8007804 <TIM_OC1_SetConfig+0xd8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_OC1_SetConfig+0x8e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a14      	ldr	r2, [pc, #80]	; (8007808 <TIM_OC1_SetConfig+0xdc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d111      	bne.n	80077de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	621a      	str	r2, [r3, #32]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400

0800780c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f023 0210 	bic.w	r2, r3, #16
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f023 0320 	bic.w	r3, r3, #32
 8007856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a21      	ldr	r2, [pc, #132]	; (80078ec <TIM_OC2_SetConfig+0xe0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC2_SetConfig+0x68>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a20      	ldr	r2, [pc, #128]	; (80078f0 <TIM_OC2_SetConfig+0xe4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d10d      	bne.n	8007890 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800787a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a16      	ldr	r2, [pc, #88]	; (80078ec <TIM_OC2_SetConfig+0xe0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_OC2_SetConfig+0x94>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a15      	ldr	r2, [pc, #84]	; (80078f0 <TIM_OC2_SetConfig+0xe4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d113      	bne.n	80078c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr
 80078ec:	40012c00 	.word	0x40012c00
 80078f0:	40013400 	.word	0x40013400

080078f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800793c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <TIM_OC3_SetConfig+0xe0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_OC3_SetConfig+0x66>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <TIM_OC3_SetConfig+0xe4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d10d      	bne.n	8007976 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a16      	ldr	r2, [pc, #88]	; (80079d4 <TIM_OC3_SetConfig+0xe0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_OC3_SetConfig+0x92>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <TIM_OC3_SetConfig+0xe4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d113      	bne.n	80079ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800798c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	621a      	str	r2, [r3, #32]
}
 80079c8:	bf00      	nop
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40012c00 	.word	0x40012c00
 80079d8:	40013400 	.word	0x40013400

080079dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	031b      	lsls	r3, r3, #12
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <TIM_OC4_SetConfig+0xa0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC4_SetConfig+0x68>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <TIM_OC4_SetConfig+0xa4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d109      	bne.n	8007a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	019b      	lsls	r3, r3, #6
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40013400 	.word	0x40013400

08007a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f023 0201 	bic.w	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f023 030a 	bic.w	r3, r3, #10
 8007ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr

08007ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	f023 0210 	bic.w	r2, r3, #16
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	031b      	lsls	r3, r3, #12
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	621a      	str	r2, [r3, #32]
}
 8007b34:	bf00      	nop
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f043 0307 	orr.w	r3, r3, #7
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	609a      	str	r2, [r3, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr

08007b72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b087      	sub	sp, #28
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	021a      	lsls	r2, r3, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	609a      	str	r2, [r3, #8]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a1a      	ldr	r2, [r3, #32]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	fa01 f303 	lsl.w	r3, r1, r3
 8007be8:	431a      	orrs	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e050      	b.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1b      	ldr	r2, [pc, #108]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d018      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d013      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c66:	d00e      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a15      	ldr	r2, [pc, #84]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a12      	ldr	r2, [pc, #72]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d10c      	bne.n	8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40013400 	.word	0x40013400
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00

08007cd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e03d      	b.n	8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e03f      	b.n	8007e28 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fc f85d 	bl	8003e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2224      	movs	r2, #36	; 0x24
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fc84 	bl	80086e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691a      	ldr	r2, [r3, #16]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d17c      	bne.n	8007f4a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <HAL_UART_Transmit+0x2c>
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e075      	b.n	8007f4c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Transmit+0x3e>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e06e      	b.n	8007f4c <HAL_UART_Transmit+0x11c>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2221      	movs	r2, #33	; 0x21
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e84:	f7fc f91c 	bl	80040c0 <HAL_GetTick>
 8007e88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d108      	bne.n	8007eb2 <HAL_UART_Transmit+0x82>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	61bb      	str	r3, [r7, #24]
 8007eb0:	e003      	b.n	8007eba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ec2:	e02a      	b.n	8007f1a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fa37 	bl	8008342 <UART_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e036      	b.n	8007f4c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10b      	bne.n	8007efc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ef2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	e007      	b.n	8007f0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	781a      	ldrb	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1cf      	bne.n	8007ec4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2140      	movs	r1, #64	; 0x40
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 fa07 	bl	8008342 <UART_WaitOnFlagUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e006      	b.n	8007f4c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e000      	b.n	8007f4c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
  }
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d11d      	bne.n	8007faa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <HAL_UART_Receive_IT+0x26>
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e016      	b.n	8007fac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_UART_Receive_IT+0x38>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e00f      	b.n	8007fac <HAL_UART_Receive_IT+0x58>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fa18 	bl	80083d6 <UART_Start_Receive_IT>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	e000      	b.n	8007fac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007faa:	2302      	movs	r3, #2
  }
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10d      	bne.n	8008006 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_UART_IRQHandler+0x52>
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fac9 	bl	8008596 <UART_Receive_IT>
      return;
 8008004:	e17b      	b.n	80082fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80b1 	beq.w	8008170 <HAL_UART_IRQHandler+0x1bc>
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d105      	bne.n	8008024 <HAL_UART_IRQHandler+0x70>
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80a6 	beq.w	8008170 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <HAL_UART_IRQHandler+0x90>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	f043 0201 	orr.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <HAL_UART_IRQHandler+0xb0>
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	f043 0202 	orr.w	r2, r3, #2
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <HAL_UART_IRQHandler+0xd0>
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	f043 0204 	orr.w	r2, r3, #4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00f      	beq.n	80080ae <HAL_UART_IRQHandler+0xfa>
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <HAL_UART_IRQHandler+0xee>
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f043 0208 	orr.w	r2, r3, #8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 811e 	beq.w	80082f4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_UART_IRQHandler+0x11e>
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa62 	bl	8008596 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bf14      	ite	ne
 80080e0:	2301      	movne	r3, #1
 80080e2:	2300      	moveq	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <HAL_UART_IRQHandler+0x146>
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d031      	beq.n	800815e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9a4 	bl	8008448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d023      	beq.n	8008156 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	695a      	ldr	r2, [r3, #20]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800811c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	2b00      	cmp	r3, #0
 8008124:	d013      	beq.n	800814e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	4a76      	ldr	r2, [pc, #472]	; (8008304 <HAL_UART_IRQHandler+0x350>)
 800812c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	4618      	mov	r0, r3
 8008134:	f7fc fb5e 	bl	80047f4 <HAL_DMA_Abort_IT>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d016      	beq.n	800816c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008148:	4610      	mov	r0, r2
 800814a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814c:	e00e      	b.n	800816c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8e3 	bl	800831a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008154:	e00a      	b.n	800816c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f8df 	bl	800831a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	e006      	b.n	800816c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f8db 	bl	800831a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800816a:	e0c3      	b.n	80082f4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	bf00      	nop
    return;
 800816e:	e0c1      	b.n	80082f4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	2b01      	cmp	r3, #1
 8008176:	f040 80a1 	bne.w	80082bc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 809b 	beq.w	80082bc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8095 	beq.w	80082bc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d04e      	beq.n	8008254 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80081c0:	8a3b      	ldrh	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 8098 	beq.w	80082f8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081cc:	8a3a      	ldrh	r2, [r7, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	f080 8092 	bcs.w	80082f8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8a3a      	ldrh	r2, [r7, #16]
 80081d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d02b      	beq.n	800823c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081f2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695a      	ldr	r2, [r3, #20]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695a      	ldr	r2, [r3, #20]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008212:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0210 	bic.w	r2, r2, #16
 8008230:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4618      	mov	r0, r3
 8008238:	f7fc faa1 	bl	800477e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008244:	b29b      	uxth	r3, r3
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	b29b      	uxth	r3, r3
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f86d 	bl	800832c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008252:	e051      	b.n	80082f8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008266:	b29b      	uxth	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d047      	beq.n	80082fc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800826c:	8a7b      	ldrh	r3, [r7, #18]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d044      	beq.n	80082fc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008280:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	695a      	ldr	r2, [r3, #20]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0201 	bic.w	r2, r2, #1
 8008290:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0210 	bic.w	r2, r2, #16
 80082ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082b0:	8a7b      	ldrh	r3, [r7, #18]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f839 	bl	800832c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082ba:	e01f      	b.n	80082fc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d008      	beq.n	80082d8 <HAL_UART_IRQHandler+0x324>
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8f9 	bl	80084c8 <UART_Transmit_IT>
    return;
 80082d6:	e012      	b.n	80082fe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <HAL_UART_IRQHandler+0x34a>
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d008      	beq.n	80082fe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f93a 	bl	8008566 <UART_EndTransmit_IT>
    return;
 80082f2:	e004      	b.n	80082fe <HAL_UART_IRQHandler+0x34a>
    return;
 80082f4:	bf00      	nop
 80082f6:	e002      	b.n	80082fe <HAL_UART_IRQHandler+0x34a>
      return;
 80082f8:	bf00      	nop
 80082fa:	e000      	b.n	80082fe <HAL_UART_IRQHandler+0x34a>
      return;
 80082fc:	bf00      	nop
  }
}
 80082fe:	3728      	adds	r7, #40	; 0x28
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	080084a1 	.word	0x080084a1

08008308 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr

0800831a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr

08008342 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	4613      	mov	r3, r2
 8008350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008352:	e02c      	b.n	80083ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d028      	beq.n	80083ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0x30>
 8008362:	f7fb fead 	bl	80040c0 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	429a      	cmp	r2, r3
 8008370:	d21d      	bcs.n	80083ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008380:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e00f      	b.n	80083ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4013      	ands	r3, r2
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d0c3      	beq.n	8008354 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2222      	movs	r2, #34	; 0x22
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800841a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0220 	orr.w	r2, r2, #32
 800843a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800845e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695a      	ldr	r2, [r3, #20]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0201 	bic.w	r2, r2, #1
 800846e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	2b01      	cmp	r3, #1
 8008476:	d107      	bne.n	8008488 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0210 	bic.w	r2, r2, #16
 8008486:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff ff2d 	bl	800831a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084c0:	bf00      	nop
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b21      	cmp	r3, #33	; 0x21
 80084da:	d13e      	bne.n	800855a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e4:	d114      	bne.n	8008510 <UART_Transmit_IT+0x48>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d110      	bne.n	8008510 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008502:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	1c9a      	adds	r2, r3, #2
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	621a      	str	r2, [r3, #32]
 800850e:	e008      	b.n	8008522 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	1c59      	adds	r1, r3, #1
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6211      	str	r1, [r2, #32]
 800851a:	781a      	ldrb	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29b      	uxth	r3, r3
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4619      	mov	r1, r3
 8008530:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10f      	bne.n	8008556 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008544:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008554:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	e000      	b.n	800855c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800855a:	2302      	movs	r3, #2
  }
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr

08008566 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800857c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff febe 	bl	8008308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b22      	cmp	r3, #34	; 0x22
 80085a8:	f040 8099 	bne.w	80086de <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b4:	d117      	bne.n	80085e6 <UART_Receive_IT+0x50>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d113      	bne.n	80085e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	1c9a      	adds	r2, r3, #2
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28
 80085e4:	e026      	b.n	8008634 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f8:	d007      	beq.n	800860a <UART_Receive_IT+0x74>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <UART_Receive_IT+0x82>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	e008      	b.n	800862a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008624:	b2da      	uxtb	r2, r3
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29b      	uxth	r3, r3
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4619      	mov	r1, r3
 8008642:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008644:	2b00      	cmp	r3, #0
 8008646:	d148      	bne.n	80086da <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0220 	bic.w	r2, r2, #32
 8008656:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0201 	bic.w	r2, r2, #1
 8008676:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	2b01      	cmp	r3, #1
 8008686:	d123      	bne.n	80086d0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0210 	bic.w	r2, r2, #16
 800869c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d10a      	bne.n	80086c2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fe2f 	bl	800832c <HAL_UARTEx_RxEventCallback>
 80086ce:	e002      	b.n	80086d6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fa fb7f 	bl	8002dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e002      	b.n	80086e0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	e000      	b.n	80086e0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80086de:	2302      	movs	r3, #2
  }
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008722:	f023 030c 	bic.w	r3, r3, #12
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	430b      	orrs	r3, r1
 800872e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a2c      	ldr	r2, [pc, #176]	; (80087fc <UART_SetConfig+0x114>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d103      	bne.n	8008758 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008750:	f7fd ffea 	bl	8006728 <HAL_RCC_GetPCLK2Freq>
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	e002      	b.n	800875e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008758:	f7fd ffd2 	bl	8006700 <HAL_RCC_GetPCLK1Freq>
 800875c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009a      	lsls	r2, r3, #2
 8008768:	441a      	add	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	fbb2 f3f3 	udiv	r3, r2, r3
 8008774:	4a22      	ldr	r2, [pc, #136]	; (8008800 <UART_SetConfig+0x118>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	0119      	lsls	r1, r3, #4
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	009a      	lsls	r2, r3, #2
 8008788:	441a      	add	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	fbb2 f2f3 	udiv	r2, r2, r3
 8008794:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <UART_SetConfig+0x118>)
 8008796:	fba3 0302 	umull	r0, r3, r3, r2
 800879a:	095b      	lsrs	r3, r3, #5
 800879c:	2064      	movs	r0, #100	; 0x64
 800879e:	fb00 f303 	mul.w	r3, r0, r3
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	3332      	adds	r3, #50	; 0x32
 80087a8:	4a15      	ldr	r2, [pc, #84]	; (8008800 <UART_SetConfig+0x118>)
 80087aa:	fba2 2303 	umull	r2, r3, r2, r3
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b4:	4419      	add	r1, r3
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009a      	lsls	r2, r3, #2
 80087c0:	441a      	add	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80087cc:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <UART_SetConfig+0x118>)
 80087ce:	fba3 0302 	umull	r0, r3, r3, r2
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	2064      	movs	r0, #100	; 0x64
 80087d6:	fb00 f303 	mul.w	r3, r0, r3
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	3332      	adds	r3, #50	; 0x32
 80087e0:	4a07      	ldr	r2, [pc, #28]	; (8008800 <UART_SetConfig+0x118>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	440a      	add	r2, r1
 80087f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	40013800 	.word	0x40013800
 8008800:	51eb851f 	.word	0x51eb851f

08008804 <atoi>:
 8008804:	220a      	movs	r2, #10
 8008806:	2100      	movs	r1, #0
 8008808:	f001 bdbe 	b.w	800a388 <strtol>

0800880c <__errno>:
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <__errno+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000610 	.word	0x20000610

08008818 <__libc_init_array>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	2600      	movs	r6, #0
 800881c:	4d0c      	ldr	r5, [pc, #48]	; (8008850 <__libc_init_array+0x38>)
 800881e:	4c0d      	ldr	r4, [pc, #52]	; (8008854 <__libc_init_array+0x3c>)
 8008820:	1b64      	subs	r4, r4, r5
 8008822:	10a4      	asrs	r4, r4, #2
 8008824:	42a6      	cmp	r6, r4
 8008826:	d109      	bne.n	800883c <__libc_init_array+0x24>
 8008828:	f004 fcb8 	bl	800d19c <_init>
 800882c:	2600      	movs	r6, #0
 800882e:	4d0a      	ldr	r5, [pc, #40]	; (8008858 <__libc_init_array+0x40>)
 8008830:	4c0a      	ldr	r4, [pc, #40]	; (800885c <__libc_init_array+0x44>)
 8008832:	1b64      	subs	r4, r4, r5
 8008834:	10a4      	asrs	r4, r4, #2
 8008836:	42a6      	cmp	r6, r4
 8008838:	d105      	bne.n	8008846 <__libc_init_array+0x2e>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008840:	4798      	blx	r3
 8008842:	3601      	adds	r6, #1
 8008844:	e7ee      	b.n	8008824 <__libc_init_array+0xc>
 8008846:	f855 3b04 	ldr.w	r3, [r5], #4
 800884a:	4798      	blx	r3
 800884c:	3601      	adds	r6, #1
 800884e:	e7f2      	b.n	8008836 <__libc_init_array+0x1e>
 8008850:	0800d768 	.word	0x0800d768
 8008854:	0800d768 	.word	0x0800d768
 8008858:	0800d768 	.word	0x0800d768
 800885c:	0800d76c 	.word	0x0800d76c

08008860 <memcpy>:
 8008860:	440a      	add	r2, r1
 8008862:	4291      	cmp	r1, r2
 8008864:	f100 33ff 	add.w	r3, r0, #4294967295
 8008868:	d100      	bne.n	800886c <memcpy+0xc>
 800886a:	4770      	bx	lr
 800886c:	b510      	push	{r4, lr}
 800886e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008872:	4291      	cmp	r1, r2
 8008874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008878:	d1f9      	bne.n	800886e <memcpy+0xe>
 800887a:	bd10      	pop	{r4, pc}

0800887c <memset>:
 800887c:	4603      	mov	r3, r0
 800887e:	4402      	add	r2, r0
 8008880:	4293      	cmp	r3, r2
 8008882:	d100      	bne.n	8008886 <memset+0xa>
 8008884:	4770      	bx	lr
 8008886:	f803 1b01 	strb.w	r1, [r3], #1
 800888a:	e7f9      	b.n	8008880 <memset+0x4>

0800888c <__cvt>:
 800888c:	2b00      	cmp	r3, #0
 800888e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008892:	461f      	mov	r7, r3
 8008894:	bfbb      	ittet	lt
 8008896:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800889a:	461f      	movlt	r7, r3
 800889c:	2300      	movge	r3, #0
 800889e:	232d      	movlt	r3, #45	; 0x2d
 80088a0:	b088      	sub	sp, #32
 80088a2:	4614      	mov	r4, r2
 80088a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80088a8:	7013      	strb	r3, [r2, #0]
 80088aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80088b0:	f023 0820 	bic.w	r8, r3, #32
 80088b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088b8:	d005      	beq.n	80088c6 <__cvt+0x3a>
 80088ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088be:	d100      	bne.n	80088c2 <__cvt+0x36>
 80088c0:	3501      	adds	r5, #1
 80088c2:	2302      	movs	r3, #2
 80088c4:	e000      	b.n	80088c8 <__cvt+0x3c>
 80088c6:	2303      	movs	r3, #3
 80088c8:	aa07      	add	r2, sp, #28
 80088ca:	9204      	str	r2, [sp, #16]
 80088cc:	aa06      	add	r2, sp, #24
 80088ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088d2:	e9cd 3500 	strd	r3, r5, [sp]
 80088d6:	4622      	mov	r2, r4
 80088d8:	463b      	mov	r3, r7
 80088da:	f001 fec9 	bl	800a670 <_dtoa_r>
 80088de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088e2:	4606      	mov	r6, r0
 80088e4:	d102      	bne.n	80088ec <__cvt+0x60>
 80088e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088e8:	07db      	lsls	r3, r3, #31
 80088ea:	d522      	bpl.n	8008932 <__cvt+0xa6>
 80088ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088f0:	eb06 0905 	add.w	r9, r6, r5
 80088f4:	d110      	bne.n	8008918 <__cvt+0x8c>
 80088f6:	7833      	ldrb	r3, [r6, #0]
 80088f8:	2b30      	cmp	r3, #48	; 0x30
 80088fa:	d10a      	bne.n	8008912 <__cvt+0x86>
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	4620      	mov	r0, r4
 8008902:	4639      	mov	r1, r7
 8008904:	f7f8 f97a 	bl	8000bfc <__aeabi_dcmpeq>
 8008908:	b918      	cbnz	r0, 8008912 <__cvt+0x86>
 800890a:	f1c5 0501 	rsb	r5, r5, #1
 800890e:	f8ca 5000 	str.w	r5, [sl]
 8008912:	f8da 3000 	ldr.w	r3, [sl]
 8008916:	4499      	add	r9, r3
 8008918:	2200      	movs	r2, #0
 800891a:	2300      	movs	r3, #0
 800891c:	4620      	mov	r0, r4
 800891e:	4639      	mov	r1, r7
 8008920:	f7f8 f96c 	bl	8000bfc <__aeabi_dcmpeq>
 8008924:	b108      	cbz	r0, 800892a <__cvt+0x9e>
 8008926:	f8cd 901c 	str.w	r9, [sp, #28]
 800892a:	2230      	movs	r2, #48	; 0x30
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	454b      	cmp	r3, r9
 8008930:	d307      	bcc.n	8008942 <__cvt+0xb6>
 8008932:	4630      	mov	r0, r6
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008938:	1b9b      	subs	r3, r3, r6
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	b008      	add	sp, #32
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	1c59      	adds	r1, r3, #1
 8008944:	9107      	str	r1, [sp, #28]
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	e7f0      	b.n	800892c <__cvt+0xa0>

0800894a <__exponent>:
 800894a:	4603      	mov	r3, r0
 800894c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800894e:	2900      	cmp	r1, #0
 8008950:	f803 2b02 	strb.w	r2, [r3], #2
 8008954:	bfb6      	itet	lt
 8008956:	222d      	movlt	r2, #45	; 0x2d
 8008958:	222b      	movge	r2, #43	; 0x2b
 800895a:	4249      	neglt	r1, r1
 800895c:	2909      	cmp	r1, #9
 800895e:	7042      	strb	r2, [r0, #1]
 8008960:	dd2b      	ble.n	80089ba <__exponent+0x70>
 8008962:	f10d 0407 	add.w	r4, sp, #7
 8008966:	46a4      	mov	ip, r4
 8008968:	270a      	movs	r7, #10
 800896a:	fb91 f6f7 	sdiv	r6, r1, r7
 800896e:	460a      	mov	r2, r1
 8008970:	46a6      	mov	lr, r4
 8008972:	fb07 1516 	mls	r5, r7, r6, r1
 8008976:	2a63      	cmp	r2, #99	; 0x63
 8008978:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800897c:	4631      	mov	r1, r6
 800897e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008986:	dcf0      	bgt.n	800896a <__exponent+0x20>
 8008988:	3130      	adds	r1, #48	; 0x30
 800898a:	f1ae 0502 	sub.w	r5, lr, #2
 800898e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008992:	4629      	mov	r1, r5
 8008994:	1c44      	adds	r4, r0, #1
 8008996:	4561      	cmp	r1, ip
 8008998:	d30a      	bcc.n	80089b0 <__exponent+0x66>
 800899a:	f10d 0209 	add.w	r2, sp, #9
 800899e:	eba2 020e 	sub.w	r2, r2, lr
 80089a2:	4565      	cmp	r5, ip
 80089a4:	bf88      	it	hi
 80089a6:	2200      	movhi	r2, #0
 80089a8:	4413      	add	r3, r2
 80089aa:	1a18      	subs	r0, r3, r0
 80089ac:	b003      	add	sp, #12
 80089ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089b8:	e7ed      	b.n	8008996 <__exponent+0x4c>
 80089ba:	2330      	movs	r3, #48	; 0x30
 80089bc:	3130      	adds	r1, #48	; 0x30
 80089be:	7083      	strb	r3, [r0, #2]
 80089c0:	70c1      	strb	r1, [r0, #3]
 80089c2:	1d03      	adds	r3, r0, #4
 80089c4:	e7f1      	b.n	80089aa <__exponent+0x60>
	...

080089c8 <_printf_float>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	b091      	sub	sp, #68	; 0x44
 80089ce:	460c      	mov	r4, r1
 80089d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80089d4:	4616      	mov	r6, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	4605      	mov	r5, r0
 80089da:	f003 f963 	bl	800bca4 <_localeconv_r>
 80089de:	6803      	ldr	r3, [r0, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	9309      	str	r3, [sp, #36]	; 0x24
 80089e4:	f7f7 fc2a 	bl	800023c <strlen>
 80089e8:	2300      	movs	r3, #0
 80089ea:	930e      	str	r3, [sp, #56]	; 0x38
 80089ec:	f8d8 3000 	ldr.w	r3, [r8]
 80089f0:	900a      	str	r0, [sp, #40]	; 0x28
 80089f2:	3307      	adds	r3, #7
 80089f4:	f023 0307 	bic.w	r3, r3, #7
 80089f8:	f103 0208 	add.w	r2, r3, #8
 80089fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a00:	f8d4 b000 	ldr.w	fp, [r4]
 8008a04:	f8c8 2000 	str.w	r2, [r8]
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a10:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008a14:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4b9c      	ldr	r3, [pc, #624]	; (8008c94 <_printf_float+0x2cc>)
 8008a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a24:	f7f8 f91c 	bl	8000c60 <__aeabi_dcmpun>
 8008a28:	bb70      	cbnz	r0, 8008a88 <_printf_float+0xc0>
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4b98      	ldr	r3, [pc, #608]	; (8008c94 <_printf_float+0x2cc>)
 8008a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a34:	f7f8 f8f6 	bl	8000c24 <__aeabi_dcmple>
 8008a38:	bb30      	cbnz	r0, 8008a88 <_printf_float+0xc0>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4640      	mov	r0, r8
 8008a40:	4651      	mov	r1, sl
 8008a42:	f7f8 f8e5 	bl	8000c10 <__aeabi_dcmplt>
 8008a46:	b110      	cbz	r0, 8008a4e <_printf_float+0x86>
 8008a48:	232d      	movs	r3, #45	; 0x2d
 8008a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a4e:	4b92      	ldr	r3, [pc, #584]	; (8008c98 <_printf_float+0x2d0>)
 8008a50:	4892      	ldr	r0, [pc, #584]	; (8008c9c <_printf_float+0x2d4>)
 8008a52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a56:	bf94      	ite	ls
 8008a58:	4698      	movls	r8, r3
 8008a5a:	4680      	movhi	r8, r0
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	f04f 0a00 	mov.w	sl, #0
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	f02b 0304 	bic.w	r3, fp, #4
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	9700      	str	r7, [sp, #0]
 8008a72:	aa0f      	add	r2, sp, #60	; 0x3c
 8008a74:	f000 f9d4 	bl	8008e20 <_printf_common>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f040 8090 	bne.w	8008b9e <_printf_float+0x1d6>
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	b011      	add	sp, #68	; 0x44
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4642      	mov	r2, r8
 8008a8a:	4653      	mov	r3, sl
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4651      	mov	r1, sl
 8008a90:	f7f8 f8e6 	bl	8000c60 <__aeabi_dcmpun>
 8008a94:	b148      	cbz	r0, 8008aaa <_printf_float+0xe2>
 8008a96:	f1ba 0f00 	cmp.w	sl, #0
 8008a9a:	bfb8      	it	lt
 8008a9c:	232d      	movlt	r3, #45	; 0x2d
 8008a9e:	4880      	ldr	r0, [pc, #512]	; (8008ca0 <_printf_float+0x2d8>)
 8008aa0:	bfb8      	it	lt
 8008aa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aa6:	4b7f      	ldr	r3, [pc, #508]	; (8008ca4 <_printf_float+0x2dc>)
 8008aa8:	e7d3      	b.n	8008a52 <_printf_float+0x8a>
 8008aaa:	6863      	ldr	r3, [r4, #4]
 8008aac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	d142      	bne.n	8008b3a <_printf_float+0x172>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	9206      	str	r2, [sp, #24]
 8008abc:	aa0e      	add	r2, sp, #56	; 0x38
 8008abe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008ac2:	aa0d      	add	r2, sp, #52	; 0x34
 8008ac4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008ac8:	9203      	str	r2, [sp, #12]
 8008aca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008ace:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	4628      	mov	r0, r5
 8008adc:	4653      	mov	r3, sl
 8008ade:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ae0:	f7ff fed4 	bl	800888c <__cvt>
 8008ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	2947      	cmp	r1, #71	; 0x47
 8008aea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008aec:	d108      	bne.n	8008b00 <_printf_float+0x138>
 8008aee:	1cc8      	adds	r0, r1, #3
 8008af0:	db02      	blt.n	8008af8 <_printf_float+0x130>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	4299      	cmp	r1, r3
 8008af6:	dd40      	ble.n	8008b7a <_printf_float+0x1b2>
 8008af8:	f1a9 0902 	sub.w	r9, r9, #2
 8008afc:	fa5f f989 	uxtb.w	r9, r9
 8008b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b04:	d81f      	bhi.n	8008b46 <_printf_float+0x17e>
 8008b06:	464a      	mov	r2, r9
 8008b08:	3901      	subs	r1, #1
 8008b0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b0e:	910d      	str	r1, [sp, #52]	; 0x34
 8008b10:	f7ff ff1b 	bl	800894a <__exponent>
 8008b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b16:	4682      	mov	sl, r0
 8008b18:	1813      	adds	r3, r2, r0
 8008b1a:	2a01      	cmp	r2, #1
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	dc02      	bgt.n	8008b26 <_printf_float+0x15e>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	07d2      	lsls	r2, r2, #31
 8008b24:	d501      	bpl.n	8008b2a <_printf_float+0x162>
 8008b26:	3301      	adds	r3, #1
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d09b      	beq.n	8008a6a <_printf_float+0xa2>
 8008b32:	232d      	movs	r3, #45	; 0x2d
 8008b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b38:	e797      	b.n	8008a6a <_printf_float+0xa2>
 8008b3a:	2947      	cmp	r1, #71	; 0x47
 8008b3c:	d1bc      	bne.n	8008ab8 <_printf_float+0xf0>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1ba      	bne.n	8008ab8 <_printf_float+0xf0>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e7b7      	b.n	8008ab6 <_printf_float+0xee>
 8008b46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b4a:	d118      	bne.n	8008b7e <_printf_float+0x1b6>
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	6863      	ldr	r3, [r4, #4]
 8008b50:	dd0b      	ble.n	8008b6a <_printf_float+0x1a2>
 8008b52:	6121      	str	r1, [r4, #16]
 8008b54:	b913      	cbnz	r3, 8008b5c <_printf_float+0x194>
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	07d0      	lsls	r0, r2, #31
 8008b5a:	d502      	bpl.n	8008b62 <_printf_float+0x19a>
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	440b      	add	r3, r1
 8008b60:	6123      	str	r3, [r4, #16]
 8008b62:	f04f 0a00 	mov.w	sl, #0
 8008b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b68:	e7df      	b.n	8008b2a <_printf_float+0x162>
 8008b6a:	b913      	cbnz	r3, 8008b72 <_printf_float+0x1aa>
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	07d2      	lsls	r2, r2, #31
 8008b70:	d501      	bpl.n	8008b76 <_printf_float+0x1ae>
 8008b72:	3302      	adds	r3, #2
 8008b74:	e7f4      	b.n	8008b60 <_printf_float+0x198>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e7f2      	b.n	8008b60 <_printf_float+0x198>
 8008b7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b80:	4299      	cmp	r1, r3
 8008b82:	db05      	blt.n	8008b90 <_printf_float+0x1c8>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	6121      	str	r1, [r4, #16]
 8008b88:	07d8      	lsls	r0, r3, #31
 8008b8a:	d5ea      	bpl.n	8008b62 <_printf_float+0x19a>
 8008b8c:	1c4b      	adds	r3, r1, #1
 8008b8e:	e7e7      	b.n	8008b60 <_printf_float+0x198>
 8008b90:	2900      	cmp	r1, #0
 8008b92:	bfcc      	ite	gt
 8008b94:	2201      	movgt	r2, #1
 8008b96:	f1c1 0202 	rsble	r2, r1, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	e7e0      	b.n	8008b60 <_printf_float+0x198>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	055a      	lsls	r2, r3, #21
 8008ba2:	d407      	bmi.n	8008bb4 <_printf_float+0x1ec>
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	4642      	mov	r2, r8
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d12b      	bne.n	8008c0a <_printf_float+0x242>
 8008bb2:	e764      	b.n	8008a7e <_printf_float+0xb6>
 8008bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008bb8:	f240 80dd 	bls.w	8008d76 <_printf_float+0x3ae>
 8008bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f7f8 f81a 	bl	8000bfc <__aeabi_dcmpeq>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d033      	beq.n	8008c34 <_printf_float+0x26c>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	4a35      	ldr	r2, [pc, #212]	; (8008ca8 <_printf_float+0x2e0>)
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f af51 	beq.w	8008a7e <_printf_float+0xb6>
 8008bdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008be0:	429a      	cmp	r2, r3
 8008be2:	db02      	blt.n	8008bea <_printf_float+0x222>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	07d8      	lsls	r0, r3, #31
 8008be8:	d50f      	bpl.n	8008c0a <_printf_float+0x242>
 8008bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f af42 	beq.w	8008a7e <_printf_float+0xb6>
 8008bfa:	f04f 0800 	mov.w	r8, #0
 8008bfe:	f104 091a 	add.w	r9, r4, #26
 8008c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c04:	3b01      	subs	r3, #1
 8008c06:	4543      	cmp	r3, r8
 8008c08:	dc09      	bgt.n	8008c1e <_printf_float+0x256>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	079b      	lsls	r3, r3, #30
 8008c0e:	f100 8102 	bmi.w	8008e16 <_printf_float+0x44e>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c16:	4298      	cmp	r0, r3
 8008c18:	bfb8      	it	lt
 8008c1a:	4618      	movlt	r0, r3
 8008c1c:	e731      	b.n	8008a82 <_printf_float+0xba>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	464a      	mov	r2, r9
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f af28 	beq.w	8008a7e <_printf_float+0xb6>
 8008c2e:	f108 0801 	add.w	r8, r8, #1
 8008c32:	e7e6      	b.n	8008c02 <_printf_float+0x23a>
 8008c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dc38      	bgt.n	8008cac <_printf_float+0x2e4>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	4a19      	ldr	r2, [pc, #100]	; (8008ca8 <_printf_float+0x2e0>)
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	f43f af1a 	beq.w	8008a7e <_printf_float+0xb6>
 8008c4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	d102      	bne.n	8008c58 <_printf_float+0x290>
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	07d9      	lsls	r1, r3, #31
 8008c56:	d5d8      	bpl.n	8008c0a <_printf_float+0x242>
 8008c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	f43f af0b 	beq.w	8008a7e <_printf_float+0xb6>
 8008c68:	f04f 0900 	mov.w	r9, #0
 8008c6c:	f104 0a1a 	add.w	sl, r4, #26
 8008c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c72:	425b      	negs	r3, r3
 8008c74:	454b      	cmp	r3, r9
 8008c76:	dc01      	bgt.n	8008c7c <_printf_float+0x2b4>
 8008c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c7a:	e794      	b.n	8008ba6 <_printf_float+0x1de>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4652      	mov	r2, sl
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f aef9 	beq.w	8008a7e <_printf_float+0xb6>
 8008c8c:	f109 0901 	add.w	r9, r9, #1
 8008c90:	e7ee      	b.n	8008c70 <_printf_float+0x2a8>
 8008c92:	bf00      	nop
 8008c94:	7fefffff 	.word	0x7fefffff
 8008c98:	0800d260 	.word	0x0800d260
 8008c9c:	0800d264 	.word	0x0800d264
 8008ca0:	0800d26c 	.word	0x0800d26c
 8008ca4:	0800d268 	.word	0x0800d268
 8008ca8:	0800d270 	.word	0x0800d270
 8008cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	bfa8      	it	ge
 8008cb4:	461a      	movge	r2, r3
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	4691      	mov	r9, r2
 8008cba:	dc37      	bgt.n	8008d2c <_printf_float+0x364>
 8008cbc:	f04f 0b00 	mov.w	fp, #0
 8008cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc4:	f104 021a 	add.w	r2, r4, #26
 8008cc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ccc:	ebaa 0309 	sub.w	r3, sl, r9
 8008cd0:	455b      	cmp	r3, fp
 8008cd2:	dc33      	bgt.n	8008d3c <_printf_float+0x374>
 8008cd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	db3b      	blt.n	8008d54 <_printf_float+0x38c>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	07da      	lsls	r2, r3, #31
 8008ce0:	d438      	bmi.n	8008d54 <_printf_float+0x38c>
 8008ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ce6:	eba3 020a 	sub.w	r2, r3, sl
 8008cea:	eba3 0901 	sub.w	r9, r3, r1
 8008cee:	4591      	cmp	r9, r2
 8008cf0:	bfa8      	it	ge
 8008cf2:	4691      	movge	r9, r2
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	dc34      	bgt.n	8008d64 <_printf_float+0x39c>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d02:	f104 0a1a 	add.w	sl, r4, #26
 8008d06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	eba3 0309 	sub.w	r3, r3, r9
 8008d10:	4543      	cmp	r3, r8
 8008d12:	f77f af7a 	ble.w	8008c0a <_printf_float+0x242>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	f43f aeac 	beq.w	8008a7e <_printf_float+0xb6>
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	e7ec      	b.n	8008d06 <_printf_float+0x33e>
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4642      	mov	r2, r8
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1c0      	bne.n	8008cbc <_printf_float+0x2f4>
 8008d3a:	e6a0      	b.n	8008a7e <_printf_float+0xb6>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f ae99 	beq.w	8008a7e <_printf_float+0xb6>
 8008d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d4e:	f10b 0b01 	add.w	fp, fp, #1
 8008d52:	e7b9      	b.n	8008cc8 <_printf_float+0x300>
 8008d54:	4631      	mov	r1, r6
 8008d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d1bf      	bne.n	8008ce2 <_printf_float+0x31a>
 8008d62:	e68c      	b.n	8008a7e <_printf_float+0xb6>
 8008d64:	464b      	mov	r3, r9
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	eb08 020a 	add.w	r2, r8, sl
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	d1c2      	bne.n	8008cfa <_printf_float+0x332>
 8008d74:	e683      	b.n	8008a7e <_printf_float+0xb6>
 8008d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d78:	2a01      	cmp	r2, #1
 8008d7a:	dc01      	bgt.n	8008d80 <_printf_float+0x3b8>
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d537      	bpl.n	8008df0 <_printf_float+0x428>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4642      	mov	r2, r8
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f ae77 	beq.w	8008a7e <_printf_float+0xb6>
 8008d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f ae6f 	beq.w	8008a7e <_printf_float+0xb6>
 8008da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008da4:	2200      	movs	r2, #0
 8008da6:	2300      	movs	r3, #0
 8008da8:	f7f7 ff28 	bl	8000bfc <__aeabi_dcmpeq>
 8008dac:	b9d8      	cbnz	r0, 8008de6 <_printf_float+0x41e>
 8008dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db0:	f108 0201 	add.w	r2, r8, #1
 8008db4:	3b01      	subs	r3, #1
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d10e      	bne.n	8008dde <_printf_float+0x416>
 8008dc0:	e65d      	b.n	8008a7e <_printf_float+0xb6>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	464a      	mov	r2, r9
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	f43f ae56 	beq.w	8008a7e <_printf_float+0xb6>
 8008dd2:	f108 0801 	add.w	r8, r8, #1
 8008dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	4543      	cmp	r3, r8
 8008ddc:	dcf1      	bgt.n	8008dc2 <_printf_float+0x3fa>
 8008dde:	4653      	mov	r3, sl
 8008de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008de4:	e6e0      	b.n	8008ba8 <_printf_float+0x1e0>
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	f104 091a 	add.w	r9, r4, #26
 8008dee:	e7f2      	b.n	8008dd6 <_printf_float+0x40e>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4642      	mov	r2, r8
 8008df4:	e7df      	b.n	8008db6 <_printf_float+0x3ee>
 8008df6:	2301      	movs	r3, #1
 8008df8:	464a      	mov	r2, r9
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	f43f ae3c 	beq.w	8008a7e <_printf_float+0xb6>
 8008e06:	f108 0801 	add.w	r8, r8, #1
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e0e:	1a5b      	subs	r3, r3, r1
 8008e10:	4543      	cmp	r3, r8
 8008e12:	dcf0      	bgt.n	8008df6 <_printf_float+0x42e>
 8008e14:	e6fd      	b.n	8008c12 <_printf_float+0x24a>
 8008e16:	f04f 0800 	mov.w	r8, #0
 8008e1a:	f104 0919 	add.w	r9, r4, #25
 8008e1e:	e7f4      	b.n	8008e0a <_printf_float+0x442>

08008e20 <_printf_common>:
 8008e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e24:	4616      	mov	r6, r2
 8008e26:	4699      	mov	r9, r3
 8008e28:	688a      	ldr	r2, [r1, #8]
 8008e2a:	690b      	ldr	r3, [r1, #16]
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	bfb8      	it	lt
 8008e32:	4613      	movlt	r3, r2
 8008e34:	6033      	str	r3, [r6, #0]
 8008e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e40:	b10a      	cbz	r2, 8008e46 <_printf_common+0x26>
 8008e42:	3301      	adds	r3, #1
 8008e44:	6033      	str	r3, [r6, #0]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	0699      	lsls	r1, r3, #26
 8008e4a:	bf42      	ittt	mi
 8008e4c:	6833      	ldrmi	r3, [r6, #0]
 8008e4e:	3302      	addmi	r3, #2
 8008e50:	6033      	strmi	r3, [r6, #0]
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	f015 0506 	ands.w	r5, r5, #6
 8008e58:	d106      	bne.n	8008e68 <_printf_common+0x48>
 8008e5a:	f104 0a19 	add.w	sl, r4, #25
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	6832      	ldr	r2, [r6, #0]
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dc28      	bgt.n	8008eba <_printf_common+0x9a>
 8008e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e6c:	1e13      	subs	r3, r2, #0
 8008e6e:	6822      	ldr	r2, [r4, #0]
 8008e70:	bf18      	it	ne
 8008e72:	2301      	movne	r3, #1
 8008e74:	0692      	lsls	r2, r2, #26
 8008e76:	d42d      	bmi.n	8008ed4 <_printf_common+0xb4>
 8008e78:	4649      	mov	r1, r9
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e80:	47c0      	blx	r8
 8008e82:	3001      	adds	r0, #1
 8008e84:	d020      	beq.n	8008ec8 <_printf_common+0xa8>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	68e5      	ldr	r5, [r4, #12]
 8008e8a:	f003 0306 	and.w	r3, r3, #6
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	bf18      	it	ne
 8008e92:	2500      	movne	r5, #0
 8008e94:	6832      	ldr	r2, [r6, #0]
 8008e96:	f04f 0600 	mov.w	r6, #0
 8008e9a:	68a3      	ldr	r3, [r4, #8]
 8008e9c:	bf08      	it	eq
 8008e9e:	1aad      	subeq	r5, r5, r2
 8008ea0:	6922      	ldr	r2, [r4, #16]
 8008ea2:	bf08      	it	eq
 8008ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	bfc4      	itt	gt
 8008eac:	1a9b      	subgt	r3, r3, r2
 8008eae:	18ed      	addgt	r5, r5, r3
 8008eb0:	341a      	adds	r4, #26
 8008eb2:	42b5      	cmp	r5, r6
 8008eb4:	d11a      	bne.n	8008eec <_printf_common+0xcc>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e008      	b.n	8008ecc <_printf_common+0xac>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	47c0      	blx	r8
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d103      	bne.n	8008ed0 <_printf_common+0xb0>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	e7c4      	b.n	8008e5e <_printf_common+0x3e>
 8008ed4:	2030      	movs	r0, #48	; 0x30
 8008ed6:	18e1      	adds	r1, r4, r3
 8008ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee2:	4422      	add	r2, r4
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eea:	e7c5      	b.n	8008e78 <_printf_common+0x58>
 8008eec:	2301      	movs	r3, #1
 8008eee:	4622      	mov	r2, r4
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c0      	blx	r8
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d0e6      	beq.n	8008ec8 <_printf_common+0xa8>
 8008efa:	3601      	adds	r6, #1
 8008efc:	e7d9      	b.n	8008eb2 <_printf_common+0x92>
	...

08008f00 <_printf_i>:
 8008f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	7e0f      	ldrb	r7, [r1, #24]
 8008f06:	4691      	mov	r9, r2
 8008f08:	2f78      	cmp	r7, #120	; 0x78
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	469a      	mov	sl, r3
 8008f10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f16:	d807      	bhi.n	8008f28 <_printf_i+0x28>
 8008f18:	2f62      	cmp	r7, #98	; 0x62
 8008f1a:	d80a      	bhi.n	8008f32 <_printf_i+0x32>
 8008f1c:	2f00      	cmp	r7, #0
 8008f1e:	f000 80d9 	beq.w	80090d4 <_printf_i+0x1d4>
 8008f22:	2f58      	cmp	r7, #88	; 0x58
 8008f24:	f000 80a4 	beq.w	8009070 <_printf_i+0x170>
 8008f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f30:	e03a      	b.n	8008fa8 <_printf_i+0xa8>
 8008f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f36:	2b15      	cmp	r3, #21
 8008f38:	d8f6      	bhi.n	8008f28 <_printf_i+0x28>
 8008f3a:	a101      	add	r1, pc, #4	; (adr r1, 8008f40 <_printf_i+0x40>)
 8008f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f40:	08008f99 	.word	0x08008f99
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	08008f29 	.word	0x08008f29
 8008f4c:	08008f29 	.word	0x08008f29
 8008f50:	08008f29 	.word	0x08008f29
 8008f54:	08008f29 	.word	0x08008f29
 8008f58:	08008fad 	.word	0x08008fad
 8008f5c:	08008f29 	.word	0x08008f29
 8008f60:	08008f29 	.word	0x08008f29
 8008f64:	08008f29 	.word	0x08008f29
 8008f68:	08008f29 	.word	0x08008f29
 8008f6c:	080090bb 	.word	0x080090bb
 8008f70:	08008fdd 	.word	0x08008fdd
 8008f74:	0800909d 	.word	0x0800909d
 8008f78:	08008f29 	.word	0x08008f29
 8008f7c:	08008f29 	.word	0x08008f29
 8008f80:	080090dd 	.word	0x080090dd
 8008f84:	08008f29 	.word	0x08008f29
 8008f88:	08008fdd 	.word	0x08008fdd
 8008f8c:	08008f29 	.word	0x08008f29
 8008f90:	08008f29 	.word	0x08008f29
 8008f94:	080090a5 	.word	0x080090a5
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	602a      	str	r2, [r5, #0]
 8008fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0a4      	b.n	80090f6 <_printf_i+0x1f6>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	6829      	ldr	r1, [r5, #0]
 8008fb0:	0606      	lsls	r6, r0, #24
 8008fb2:	f101 0304 	add.w	r3, r1, #4
 8008fb6:	d50a      	bpl.n	8008fce <_printf_i+0xce>
 8008fb8:	680e      	ldr	r6, [r1, #0]
 8008fba:	602b      	str	r3, [r5, #0]
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	da03      	bge.n	8008fc8 <_printf_i+0xc8>
 8008fc0:	232d      	movs	r3, #45	; 0x2d
 8008fc2:	4276      	negs	r6, r6
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	230a      	movs	r3, #10
 8008fca:	485e      	ldr	r0, [pc, #376]	; (8009144 <_printf_i+0x244>)
 8008fcc:	e019      	b.n	8009002 <_printf_i+0x102>
 8008fce:	680e      	ldr	r6, [r1, #0]
 8008fd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	bf18      	it	ne
 8008fd8:	b236      	sxthne	r6, r6
 8008fda:	e7ef      	b.n	8008fbc <_printf_i+0xbc>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	1d19      	adds	r1, r3, #4
 8008fe2:	6029      	str	r1, [r5, #0]
 8008fe4:	0601      	lsls	r1, r0, #24
 8008fe6:	d501      	bpl.n	8008fec <_printf_i+0xec>
 8008fe8:	681e      	ldr	r6, [r3, #0]
 8008fea:	e002      	b.n	8008ff2 <_printf_i+0xf2>
 8008fec:	0646      	lsls	r6, r0, #25
 8008fee:	d5fb      	bpl.n	8008fe8 <_printf_i+0xe8>
 8008ff0:	881e      	ldrh	r6, [r3, #0]
 8008ff2:	2f6f      	cmp	r7, #111	; 0x6f
 8008ff4:	bf0c      	ite	eq
 8008ff6:	2308      	moveq	r3, #8
 8008ff8:	230a      	movne	r3, #10
 8008ffa:	4852      	ldr	r0, [pc, #328]	; (8009144 <_printf_i+0x244>)
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009002:	6865      	ldr	r5, [r4, #4]
 8009004:	2d00      	cmp	r5, #0
 8009006:	bfa8      	it	ge
 8009008:	6821      	ldrge	r1, [r4, #0]
 800900a:	60a5      	str	r5, [r4, #8]
 800900c:	bfa4      	itt	ge
 800900e:	f021 0104 	bicge.w	r1, r1, #4
 8009012:	6021      	strge	r1, [r4, #0]
 8009014:	b90e      	cbnz	r6, 800901a <_printf_i+0x11a>
 8009016:	2d00      	cmp	r5, #0
 8009018:	d04d      	beq.n	80090b6 <_printf_i+0x1b6>
 800901a:	4615      	mov	r5, r2
 800901c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009020:	fb03 6711 	mls	r7, r3, r1, r6
 8009024:	5dc7      	ldrb	r7, [r0, r7]
 8009026:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800902a:	4637      	mov	r7, r6
 800902c:	42bb      	cmp	r3, r7
 800902e:	460e      	mov	r6, r1
 8009030:	d9f4      	bls.n	800901c <_printf_i+0x11c>
 8009032:	2b08      	cmp	r3, #8
 8009034:	d10b      	bne.n	800904e <_printf_i+0x14e>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	07de      	lsls	r6, r3, #31
 800903a:	d508      	bpl.n	800904e <_printf_i+0x14e>
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	6861      	ldr	r1, [r4, #4]
 8009040:	4299      	cmp	r1, r3
 8009042:	bfde      	ittt	le
 8009044:	2330      	movle	r3, #48	; 0x30
 8009046:	f805 3c01 	strble.w	r3, [r5, #-1]
 800904a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800904e:	1b52      	subs	r2, r2, r5
 8009050:	6122      	str	r2, [r4, #16]
 8009052:	464b      	mov	r3, r9
 8009054:	4621      	mov	r1, r4
 8009056:	4640      	mov	r0, r8
 8009058:	f8cd a000 	str.w	sl, [sp]
 800905c:	aa03      	add	r2, sp, #12
 800905e:	f7ff fedf 	bl	8008e20 <_printf_common>
 8009062:	3001      	adds	r0, #1
 8009064:	d14c      	bne.n	8009100 <_printf_i+0x200>
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
 800906a:	b004      	add	sp, #16
 800906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009070:	4834      	ldr	r0, [pc, #208]	; (8009144 <_printf_i+0x244>)
 8009072:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009076:	6829      	ldr	r1, [r5, #0]
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	f851 6b04 	ldr.w	r6, [r1], #4
 800907e:	6029      	str	r1, [r5, #0]
 8009080:	061d      	lsls	r5, r3, #24
 8009082:	d514      	bpl.n	80090ae <_printf_i+0x1ae>
 8009084:	07df      	lsls	r7, r3, #31
 8009086:	bf44      	itt	mi
 8009088:	f043 0320 	orrmi.w	r3, r3, #32
 800908c:	6023      	strmi	r3, [r4, #0]
 800908e:	b91e      	cbnz	r6, 8009098 <_printf_i+0x198>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	f023 0320 	bic.w	r3, r3, #32
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	2310      	movs	r3, #16
 800909a:	e7af      	b.n	8008ffc <_printf_i+0xfc>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f043 0320 	orr.w	r3, r3, #32
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	2378      	movs	r3, #120	; 0x78
 80090a6:	4828      	ldr	r0, [pc, #160]	; (8009148 <_printf_i+0x248>)
 80090a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ac:	e7e3      	b.n	8009076 <_printf_i+0x176>
 80090ae:	0659      	lsls	r1, r3, #25
 80090b0:	bf48      	it	mi
 80090b2:	b2b6      	uxthmi	r6, r6
 80090b4:	e7e6      	b.n	8009084 <_printf_i+0x184>
 80090b6:	4615      	mov	r5, r2
 80090b8:	e7bb      	b.n	8009032 <_printf_i+0x132>
 80090ba:	682b      	ldr	r3, [r5, #0]
 80090bc:	6826      	ldr	r6, [r4, #0]
 80090be:	1d18      	adds	r0, r3, #4
 80090c0:	6961      	ldr	r1, [r4, #20]
 80090c2:	6028      	str	r0, [r5, #0]
 80090c4:	0635      	lsls	r5, r6, #24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	d501      	bpl.n	80090ce <_printf_i+0x1ce>
 80090ca:	6019      	str	r1, [r3, #0]
 80090cc:	e002      	b.n	80090d4 <_printf_i+0x1d4>
 80090ce:	0670      	lsls	r0, r6, #25
 80090d0:	d5fb      	bpl.n	80090ca <_printf_i+0x1ca>
 80090d2:	8019      	strh	r1, [r3, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	4615      	mov	r5, r2
 80090d8:	6123      	str	r3, [r4, #16]
 80090da:	e7ba      	b.n	8009052 <_printf_i+0x152>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	2100      	movs	r1, #0
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	602a      	str	r2, [r5, #0]
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	4628      	mov	r0, r5
 80090ea:	f002 fe61 	bl	800bdb0 <memchr>
 80090ee:	b108      	cbz	r0, 80090f4 <_printf_i+0x1f4>
 80090f0:	1b40      	subs	r0, r0, r5
 80090f2:	6060      	str	r0, [r4, #4]
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	2300      	movs	r3, #0
 80090fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fe:	e7a8      	b.n	8009052 <_printf_i+0x152>
 8009100:	462a      	mov	r2, r5
 8009102:	4649      	mov	r1, r9
 8009104:	4640      	mov	r0, r8
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	47d0      	blx	sl
 800910a:	3001      	adds	r0, #1
 800910c:	d0ab      	beq.n	8009066 <_printf_i+0x166>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	079b      	lsls	r3, r3, #30
 8009112:	d413      	bmi.n	800913c <_printf_i+0x23c>
 8009114:	68e0      	ldr	r0, [r4, #12]
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	4298      	cmp	r0, r3
 800911a:	bfb8      	it	lt
 800911c:	4618      	movlt	r0, r3
 800911e:	e7a4      	b.n	800906a <_printf_i+0x16a>
 8009120:	2301      	movs	r3, #1
 8009122:	4632      	mov	r2, r6
 8009124:	4649      	mov	r1, r9
 8009126:	4640      	mov	r0, r8
 8009128:	47d0      	blx	sl
 800912a:	3001      	adds	r0, #1
 800912c:	d09b      	beq.n	8009066 <_printf_i+0x166>
 800912e:	3501      	adds	r5, #1
 8009130:	68e3      	ldr	r3, [r4, #12]
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	1a5b      	subs	r3, r3, r1
 8009136:	42ab      	cmp	r3, r5
 8009138:	dcf2      	bgt.n	8009120 <_printf_i+0x220>
 800913a:	e7eb      	b.n	8009114 <_printf_i+0x214>
 800913c:	2500      	movs	r5, #0
 800913e:	f104 0619 	add.w	r6, r4, #25
 8009142:	e7f5      	b.n	8009130 <_printf_i+0x230>
 8009144:	0800d272 	.word	0x0800d272
 8009148:	0800d283 	.word	0x0800d283

0800914c <_scanf_float>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	b087      	sub	sp, #28
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	688b      	ldr	r3, [r1, #8]
 8009156:	4617      	mov	r7, r2
 8009158:	1e5a      	subs	r2, r3, #1
 800915a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800915e:	bf85      	ittet	hi
 8009160:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009164:	195b      	addhi	r3, r3, r5
 8009166:	2300      	movls	r3, #0
 8009168:	9302      	strhi	r3, [sp, #8]
 800916a:	bf88      	it	hi
 800916c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009170:	468b      	mov	fp, r1
 8009172:	f04f 0500 	mov.w	r5, #0
 8009176:	bf8c      	ite	hi
 8009178:	608b      	strhi	r3, [r1, #8]
 800917a:	9302      	strls	r3, [sp, #8]
 800917c:	680b      	ldr	r3, [r1, #0]
 800917e:	4680      	mov	r8, r0
 8009180:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009184:	f84b 3b1c 	str.w	r3, [fp], #28
 8009188:	460c      	mov	r4, r1
 800918a:	465e      	mov	r6, fp
 800918c:	46aa      	mov	sl, r5
 800918e:	46a9      	mov	r9, r5
 8009190:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009194:	9501      	str	r5, [sp, #4]
 8009196:	68a2      	ldr	r2, [r4, #8]
 8009198:	b152      	cbz	r2, 80091b0 <_scanf_float+0x64>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b4e      	cmp	r3, #78	; 0x4e
 80091a0:	d864      	bhi.n	800926c <_scanf_float+0x120>
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d83c      	bhi.n	8009220 <_scanf_float+0xd4>
 80091a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80091aa:	b2c8      	uxtb	r0, r1
 80091ac:	280e      	cmp	r0, #14
 80091ae:	d93a      	bls.n	8009226 <_scanf_float+0xda>
 80091b0:	f1b9 0f00 	cmp.w	r9, #0
 80091b4:	d003      	beq.n	80091be <_scanf_float+0x72>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091c2:	f1ba 0f01 	cmp.w	sl, #1
 80091c6:	f200 8113 	bhi.w	80093f0 <_scanf_float+0x2a4>
 80091ca:	455e      	cmp	r6, fp
 80091cc:	f200 8105 	bhi.w	80093da <_scanf_float+0x28e>
 80091d0:	2501      	movs	r5, #1
 80091d2:	4628      	mov	r0, r5
 80091d4:	b007      	add	sp, #28
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80091de:	2a0d      	cmp	r2, #13
 80091e0:	d8e6      	bhi.n	80091b0 <_scanf_float+0x64>
 80091e2:	a101      	add	r1, pc, #4	; (adr r1, 80091e8 <_scanf_float+0x9c>)
 80091e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091e8:	08009327 	.word	0x08009327
 80091ec:	080091b1 	.word	0x080091b1
 80091f0:	080091b1 	.word	0x080091b1
 80091f4:	080091b1 	.word	0x080091b1
 80091f8:	08009387 	.word	0x08009387
 80091fc:	0800935f 	.word	0x0800935f
 8009200:	080091b1 	.word	0x080091b1
 8009204:	080091b1 	.word	0x080091b1
 8009208:	08009335 	.word	0x08009335
 800920c:	080091b1 	.word	0x080091b1
 8009210:	080091b1 	.word	0x080091b1
 8009214:	080091b1 	.word	0x080091b1
 8009218:	080091b1 	.word	0x080091b1
 800921c:	080092ed 	.word	0x080092ed
 8009220:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009224:	e7db      	b.n	80091de <_scanf_float+0x92>
 8009226:	290e      	cmp	r1, #14
 8009228:	d8c2      	bhi.n	80091b0 <_scanf_float+0x64>
 800922a:	a001      	add	r0, pc, #4	; (adr r0, 8009230 <_scanf_float+0xe4>)
 800922c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009230:	080092df 	.word	0x080092df
 8009234:	080091b1 	.word	0x080091b1
 8009238:	080092df 	.word	0x080092df
 800923c:	08009373 	.word	0x08009373
 8009240:	080091b1 	.word	0x080091b1
 8009244:	0800928d 	.word	0x0800928d
 8009248:	080092c9 	.word	0x080092c9
 800924c:	080092c9 	.word	0x080092c9
 8009250:	080092c9 	.word	0x080092c9
 8009254:	080092c9 	.word	0x080092c9
 8009258:	080092c9 	.word	0x080092c9
 800925c:	080092c9 	.word	0x080092c9
 8009260:	080092c9 	.word	0x080092c9
 8009264:	080092c9 	.word	0x080092c9
 8009268:	080092c9 	.word	0x080092c9
 800926c:	2b6e      	cmp	r3, #110	; 0x6e
 800926e:	d809      	bhi.n	8009284 <_scanf_float+0x138>
 8009270:	2b60      	cmp	r3, #96	; 0x60
 8009272:	d8b2      	bhi.n	80091da <_scanf_float+0x8e>
 8009274:	2b54      	cmp	r3, #84	; 0x54
 8009276:	d077      	beq.n	8009368 <_scanf_float+0x21c>
 8009278:	2b59      	cmp	r3, #89	; 0x59
 800927a:	d199      	bne.n	80091b0 <_scanf_float+0x64>
 800927c:	2d07      	cmp	r5, #7
 800927e:	d197      	bne.n	80091b0 <_scanf_float+0x64>
 8009280:	2508      	movs	r5, #8
 8009282:	e029      	b.n	80092d8 <_scanf_float+0x18c>
 8009284:	2b74      	cmp	r3, #116	; 0x74
 8009286:	d06f      	beq.n	8009368 <_scanf_float+0x21c>
 8009288:	2b79      	cmp	r3, #121	; 0x79
 800928a:	e7f6      	b.n	800927a <_scanf_float+0x12e>
 800928c:	6821      	ldr	r1, [r4, #0]
 800928e:	05c8      	lsls	r0, r1, #23
 8009290:	d51a      	bpl.n	80092c8 <_scanf_float+0x17c>
 8009292:	9b02      	ldr	r3, [sp, #8]
 8009294:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009298:	6021      	str	r1, [r4, #0]
 800929a:	f109 0901 	add.w	r9, r9, #1
 800929e:	b11b      	cbz	r3, 80092a8 <_scanf_float+0x15c>
 80092a0:	3b01      	subs	r3, #1
 80092a2:	3201      	adds	r2, #1
 80092a4:	9302      	str	r3, [sp, #8]
 80092a6:	60a2      	str	r2, [r4, #8]
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	6123      	str	r3, [r4, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	f340 8084 	ble.w	80093c8 <_scanf_float+0x27c>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	603b      	str	r3, [r7, #0]
 80092c6:	e766      	b.n	8009196 <_scanf_float+0x4a>
 80092c8:	eb1a 0f05 	cmn.w	sl, r5
 80092cc:	f47f af70 	bne.w	80091b0 <_scanf_float+0x64>
 80092d0:	6822      	ldr	r2, [r4, #0]
 80092d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092d6:	6022      	str	r2, [r4, #0]
 80092d8:	f806 3b01 	strb.w	r3, [r6], #1
 80092dc:	e7e4      	b.n	80092a8 <_scanf_float+0x15c>
 80092de:	6822      	ldr	r2, [r4, #0]
 80092e0:	0610      	lsls	r0, r2, #24
 80092e2:	f57f af65 	bpl.w	80091b0 <_scanf_float+0x64>
 80092e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092ea:	e7f4      	b.n	80092d6 <_scanf_float+0x18a>
 80092ec:	f1ba 0f00 	cmp.w	sl, #0
 80092f0:	d10e      	bne.n	8009310 <_scanf_float+0x1c4>
 80092f2:	f1b9 0f00 	cmp.w	r9, #0
 80092f6:	d10e      	bne.n	8009316 <_scanf_float+0x1ca>
 80092f8:	6822      	ldr	r2, [r4, #0]
 80092fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009302:	d108      	bne.n	8009316 <_scanf_float+0x1ca>
 8009304:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009308:	f04f 0a01 	mov.w	sl, #1
 800930c:	6022      	str	r2, [r4, #0]
 800930e:	e7e3      	b.n	80092d8 <_scanf_float+0x18c>
 8009310:	f1ba 0f02 	cmp.w	sl, #2
 8009314:	d055      	beq.n	80093c2 <_scanf_float+0x276>
 8009316:	2d01      	cmp	r5, #1
 8009318:	d002      	beq.n	8009320 <_scanf_float+0x1d4>
 800931a:	2d04      	cmp	r5, #4
 800931c:	f47f af48 	bne.w	80091b0 <_scanf_float+0x64>
 8009320:	3501      	adds	r5, #1
 8009322:	b2ed      	uxtb	r5, r5
 8009324:	e7d8      	b.n	80092d8 <_scanf_float+0x18c>
 8009326:	f1ba 0f01 	cmp.w	sl, #1
 800932a:	f47f af41 	bne.w	80091b0 <_scanf_float+0x64>
 800932e:	f04f 0a02 	mov.w	sl, #2
 8009332:	e7d1      	b.n	80092d8 <_scanf_float+0x18c>
 8009334:	b97d      	cbnz	r5, 8009356 <_scanf_float+0x20a>
 8009336:	f1b9 0f00 	cmp.w	r9, #0
 800933a:	f47f af3c 	bne.w	80091b6 <_scanf_float+0x6a>
 800933e:	6822      	ldr	r2, [r4, #0]
 8009340:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009344:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009348:	f47f af39 	bne.w	80091be <_scanf_float+0x72>
 800934c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009350:	2501      	movs	r5, #1
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	e7c0      	b.n	80092d8 <_scanf_float+0x18c>
 8009356:	2d03      	cmp	r5, #3
 8009358:	d0e2      	beq.n	8009320 <_scanf_float+0x1d4>
 800935a:	2d05      	cmp	r5, #5
 800935c:	e7de      	b.n	800931c <_scanf_float+0x1d0>
 800935e:	2d02      	cmp	r5, #2
 8009360:	f47f af26 	bne.w	80091b0 <_scanf_float+0x64>
 8009364:	2503      	movs	r5, #3
 8009366:	e7b7      	b.n	80092d8 <_scanf_float+0x18c>
 8009368:	2d06      	cmp	r5, #6
 800936a:	f47f af21 	bne.w	80091b0 <_scanf_float+0x64>
 800936e:	2507      	movs	r5, #7
 8009370:	e7b2      	b.n	80092d8 <_scanf_float+0x18c>
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	0591      	lsls	r1, r2, #22
 8009376:	f57f af1b 	bpl.w	80091b0 <_scanf_float+0x64>
 800937a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800937e:	6022      	str	r2, [r4, #0]
 8009380:	f8cd 9004 	str.w	r9, [sp, #4]
 8009384:	e7a8      	b.n	80092d8 <_scanf_float+0x18c>
 8009386:	6822      	ldr	r2, [r4, #0]
 8009388:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800938c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009390:	d006      	beq.n	80093a0 <_scanf_float+0x254>
 8009392:	0550      	lsls	r0, r2, #21
 8009394:	f57f af0c 	bpl.w	80091b0 <_scanf_float+0x64>
 8009398:	f1b9 0f00 	cmp.w	r9, #0
 800939c:	f43f af0f 	beq.w	80091be <_scanf_float+0x72>
 80093a0:	0591      	lsls	r1, r2, #22
 80093a2:	bf58      	it	pl
 80093a4:	9901      	ldrpl	r1, [sp, #4]
 80093a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093aa:	bf58      	it	pl
 80093ac:	eba9 0101 	subpl.w	r1, r9, r1
 80093b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80093b4:	f04f 0900 	mov.w	r9, #0
 80093b8:	bf58      	it	pl
 80093ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80093be:	6022      	str	r2, [r4, #0]
 80093c0:	e78a      	b.n	80092d8 <_scanf_float+0x18c>
 80093c2:	f04f 0a03 	mov.w	sl, #3
 80093c6:	e787      	b.n	80092d8 <_scanf_float+0x18c>
 80093c8:	4639      	mov	r1, r7
 80093ca:	4640      	mov	r0, r8
 80093cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093d0:	4798      	blx	r3
 80093d2:	2800      	cmp	r0, #0
 80093d4:	f43f aedf 	beq.w	8009196 <_scanf_float+0x4a>
 80093d8:	e6ea      	b.n	80091b0 <_scanf_float+0x64>
 80093da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093de:	463a      	mov	r2, r7
 80093e0:	4640      	mov	r0, r8
 80093e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093e6:	4798      	blx	r3
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	e6ec      	b.n	80091ca <_scanf_float+0x7e>
 80093f0:	1e6b      	subs	r3, r5, #1
 80093f2:	2b06      	cmp	r3, #6
 80093f4:	d825      	bhi.n	8009442 <_scanf_float+0x2f6>
 80093f6:	2d02      	cmp	r5, #2
 80093f8:	d836      	bhi.n	8009468 <_scanf_float+0x31c>
 80093fa:	455e      	cmp	r6, fp
 80093fc:	f67f aee8 	bls.w	80091d0 <_scanf_float+0x84>
 8009400:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009404:	463a      	mov	r2, r7
 8009406:	4640      	mov	r0, r8
 8009408:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800940c:	4798      	blx	r3
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	3b01      	subs	r3, #1
 8009412:	6123      	str	r3, [r4, #16]
 8009414:	e7f1      	b.n	80093fa <_scanf_float+0x2ae>
 8009416:	9802      	ldr	r0, [sp, #8]
 8009418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800941c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009420:	463a      	mov	r2, r7
 8009422:	9002      	str	r0, [sp, #8]
 8009424:	4640      	mov	r0, r8
 8009426:	4798      	blx	r3
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	3b01      	subs	r3, #1
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009432:	fa5f fa8a 	uxtb.w	sl, sl
 8009436:	f1ba 0f02 	cmp.w	sl, #2
 800943a:	d1ec      	bne.n	8009416 <_scanf_float+0x2ca>
 800943c:	3d03      	subs	r5, #3
 800943e:	b2ed      	uxtb	r5, r5
 8009440:	1b76      	subs	r6, r6, r5
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	05da      	lsls	r2, r3, #23
 8009446:	d52f      	bpl.n	80094a8 <_scanf_float+0x35c>
 8009448:	055b      	lsls	r3, r3, #21
 800944a:	d510      	bpl.n	800946e <_scanf_float+0x322>
 800944c:	455e      	cmp	r6, fp
 800944e:	f67f aebf 	bls.w	80091d0 <_scanf_float+0x84>
 8009452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009456:	463a      	mov	r2, r7
 8009458:	4640      	mov	r0, r8
 800945a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800945e:	4798      	blx	r3
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	3b01      	subs	r3, #1
 8009464:	6123      	str	r3, [r4, #16]
 8009466:	e7f1      	b.n	800944c <_scanf_float+0x300>
 8009468:	46aa      	mov	sl, r5
 800946a:	9602      	str	r6, [sp, #8]
 800946c:	e7df      	b.n	800942e <_scanf_float+0x2e2>
 800946e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	2965      	cmp	r1, #101	; 0x65
 8009476:	f103 33ff 	add.w	r3, r3, #4294967295
 800947a:	f106 35ff 	add.w	r5, r6, #4294967295
 800947e:	6123      	str	r3, [r4, #16]
 8009480:	d00c      	beq.n	800949c <_scanf_float+0x350>
 8009482:	2945      	cmp	r1, #69	; 0x45
 8009484:	d00a      	beq.n	800949c <_scanf_float+0x350>
 8009486:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800948a:	463a      	mov	r2, r7
 800948c:	4640      	mov	r0, r8
 800948e:	4798      	blx	r3
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009496:	3b01      	subs	r3, #1
 8009498:	1eb5      	subs	r5, r6, #2
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	463a      	mov	r2, r7
 800949e:	4640      	mov	r0, r8
 80094a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094a4:	4798      	blx	r3
 80094a6:	462e      	mov	r6, r5
 80094a8:	6825      	ldr	r5, [r4, #0]
 80094aa:	f015 0510 	ands.w	r5, r5, #16
 80094ae:	d155      	bne.n	800955c <_scanf_float+0x410>
 80094b0:	7035      	strb	r5, [r6, #0]
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094bc:	d11b      	bne.n	80094f6 <_scanf_float+0x3aa>
 80094be:	9b01      	ldr	r3, [sp, #4]
 80094c0:	454b      	cmp	r3, r9
 80094c2:	eba3 0209 	sub.w	r2, r3, r9
 80094c6:	d123      	bne.n	8009510 <_scanf_float+0x3c4>
 80094c8:	2200      	movs	r2, #0
 80094ca:	4659      	mov	r1, fp
 80094cc:	4640      	mov	r0, r8
 80094ce:	f000 fe7b 	bl	800a1c8 <_strtod_r>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	f012 0f02 	tst.w	r2, #2
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	d021      	beq.n	8009526 <_scanf_float+0x3da>
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	9903      	ldr	r1, [sp, #12]
 80094e6:	600a      	str	r2, [r1, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	e9c3 6700 	strd	r6, r7, [r3]
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60e3      	str	r3, [r4, #12]
 80094f4:	e66d      	b.n	80091d2 <_scanf_float+0x86>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0e5      	beq.n	80094c8 <_scanf_float+0x37c>
 80094fc:	9905      	ldr	r1, [sp, #20]
 80094fe:	230a      	movs	r3, #10
 8009500:	462a      	mov	r2, r5
 8009502:	4640      	mov	r0, r8
 8009504:	3101      	adds	r1, #1
 8009506:	f000 ff3d 	bl	800a384 <_strtol_r>
 800950a:	9b04      	ldr	r3, [sp, #16]
 800950c:	9e05      	ldr	r6, [sp, #20]
 800950e:	1ac2      	subs	r2, r0, r3
 8009510:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009514:	429e      	cmp	r6, r3
 8009516:	bf28      	it	cs
 8009518:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800951c:	4630      	mov	r0, r6
 800951e:	4910      	ldr	r1, [pc, #64]	; (8009560 <_scanf_float+0x414>)
 8009520:	f000 f826 	bl	8009570 <siprintf>
 8009524:	e7d0      	b.n	80094c8 <_scanf_float+0x37c>
 8009526:	f012 0f04 	tst.w	r2, #4
 800952a:	f103 0204 	add.w	r2, r3, #4
 800952e:	d1d9      	bne.n	80094e4 <_scanf_float+0x398>
 8009530:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009534:	f8cc 2000 	str.w	r2, [ip]
 8009538:	f8d3 8000 	ldr.w	r8, [r3]
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	f7f7 fb8e 	bl	8000c60 <__aeabi_dcmpun>
 8009544:	b128      	cbz	r0, 8009552 <_scanf_float+0x406>
 8009546:	4807      	ldr	r0, [pc, #28]	; (8009564 <_scanf_float+0x418>)
 8009548:	f000 f80e 	bl	8009568 <nanf>
 800954c:	f8c8 0000 	str.w	r0, [r8]
 8009550:	e7cd      	b.n	80094ee <_scanf_float+0x3a2>
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f7 fbe1 	bl	8000d1c <__aeabi_d2f>
 800955a:	e7f7      	b.n	800954c <_scanf_float+0x400>
 800955c:	2500      	movs	r5, #0
 800955e:	e638      	b.n	80091d2 <_scanf_float+0x86>
 8009560:	0800d294 	.word	0x0800d294
 8009564:	0800d39f 	.word	0x0800d39f

08009568 <nanf>:
 8009568:	4800      	ldr	r0, [pc, #0]	; (800956c <nanf+0x4>)
 800956a:	4770      	bx	lr
 800956c:	7fc00000 	.word	0x7fc00000

08009570 <siprintf>:
 8009570:	b40e      	push	{r1, r2, r3}
 8009572:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009576:	b500      	push	{lr}
 8009578:	b09c      	sub	sp, #112	; 0x70
 800957a:	ab1d      	add	r3, sp, #116	; 0x74
 800957c:	9002      	str	r0, [sp, #8]
 800957e:	9006      	str	r0, [sp, #24]
 8009580:	9107      	str	r1, [sp, #28]
 8009582:	9104      	str	r1, [sp, #16]
 8009584:	4808      	ldr	r0, [pc, #32]	; (80095a8 <siprintf+0x38>)
 8009586:	4909      	ldr	r1, [pc, #36]	; (80095ac <siprintf+0x3c>)
 8009588:	f853 2b04 	ldr.w	r2, [r3], #4
 800958c:	9105      	str	r1, [sp, #20]
 800958e:	6800      	ldr	r0, [r0, #0]
 8009590:	a902      	add	r1, sp, #8
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f003 fa1e 	bl	800c9d4 <_svfiprintf_r>
 8009598:	2200      	movs	r2, #0
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	b01c      	add	sp, #112	; 0x70
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	b003      	add	sp, #12
 80095a6:	4770      	bx	lr
 80095a8:	20000610 	.word	0x20000610
 80095ac:	ffff0208 	.word	0xffff0208

080095b0 <sulp>:
 80095b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b4:	460f      	mov	r7, r1
 80095b6:	4690      	mov	r8, r2
 80095b8:	f002 ff78 	bl	800c4ac <__ulp>
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	f1b8 0f00 	cmp.w	r8, #0
 80095c4:	d011      	beq.n	80095ea <sulp+0x3a>
 80095c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80095ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	dd0b      	ble.n	80095ea <sulp+0x3a>
 80095d2:	2400      	movs	r4, #0
 80095d4:	051b      	lsls	r3, r3, #20
 80095d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	f7f7 f8a3 	bl	800072c <__aeabi_dmul>
 80095e6:	4604      	mov	r4, r0
 80095e8:	460d      	mov	r5, r1
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f2:	0000      	movs	r0, r0
 80095f4:	0000      	movs	r0, r0
	...

080095f8 <_strtod_l>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	469b      	mov	fp, r3
 80095fe:	2300      	movs	r3, #0
 8009600:	b09f      	sub	sp, #124	; 0x7c
 8009602:	931a      	str	r3, [sp, #104]	; 0x68
 8009604:	4b9e      	ldr	r3, [pc, #632]	; (8009880 <_strtod_l+0x288>)
 8009606:	4682      	mov	sl, r0
 8009608:	681f      	ldr	r7, [r3, #0]
 800960a:	460e      	mov	r6, r1
 800960c:	4638      	mov	r0, r7
 800960e:	9215      	str	r2, [sp, #84]	; 0x54
 8009610:	f7f6 fe14 	bl	800023c <strlen>
 8009614:	f04f 0800 	mov.w	r8, #0
 8009618:	4604      	mov	r4, r0
 800961a:	f04f 0900 	mov.w	r9, #0
 800961e:	9619      	str	r6, [sp, #100]	; 0x64
 8009620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	2a2b      	cmp	r2, #43	; 0x2b
 8009626:	d04c      	beq.n	80096c2 <_strtod_l+0xca>
 8009628:	d83a      	bhi.n	80096a0 <_strtod_l+0xa8>
 800962a:	2a0d      	cmp	r2, #13
 800962c:	d833      	bhi.n	8009696 <_strtod_l+0x9e>
 800962e:	2a08      	cmp	r2, #8
 8009630:	d833      	bhi.n	800969a <_strtod_l+0xa2>
 8009632:	2a00      	cmp	r2, #0
 8009634:	d03d      	beq.n	80096b2 <_strtod_l+0xba>
 8009636:	2300      	movs	r3, #0
 8009638:	930a      	str	r3, [sp, #40]	; 0x28
 800963a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800963c:	782b      	ldrb	r3, [r5, #0]
 800963e:	2b30      	cmp	r3, #48	; 0x30
 8009640:	f040 80aa 	bne.w	8009798 <_strtod_l+0x1a0>
 8009644:	786b      	ldrb	r3, [r5, #1]
 8009646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800964a:	2b58      	cmp	r3, #88	; 0x58
 800964c:	d166      	bne.n	800971c <_strtod_l+0x124>
 800964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009650:	4650      	mov	r0, sl
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	ab1a      	add	r3, sp, #104	; 0x68
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4a8a      	ldr	r2, [pc, #552]	; (8009884 <_strtod_l+0x28c>)
 800965a:	f8cd b008 	str.w	fp, [sp, #8]
 800965e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009660:	a919      	add	r1, sp, #100	; 0x64
 8009662:	f002 f821 	bl	800b6a8 <__gethex>
 8009666:	f010 0607 	ands.w	r6, r0, #7
 800966a:	4604      	mov	r4, r0
 800966c:	d005      	beq.n	800967a <_strtod_l+0x82>
 800966e:	2e06      	cmp	r6, #6
 8009670:	d129      	bne.n	80096c6 <_strtod_l+0xce>
 8009672:	2300      	movs	r3, #0
 8009674:	3501      	adds	r5, #1
 8009676:	9519      	str	r5, [sp, #100]	; 0x64
 8009678:	930a      	str	r3, [sp, #40]	; 0x28
 800967a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800967c:	2b00      	cmp	r3, #0
 800967e:	f040 858a 	bne.w	800a196 <_strtod_l+0xb9e>
 8009682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009684:	b1d3      	cbz	r3, 80096bc <_strtod_l+0xc4>
 8009686:	4642      	mov	r2, r8
 8009688:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800968c:	4610      	mov	r0, r2
 800968e:	4619      	mov	r1, r3
 8009690:	b01f      	add	sp, #124	; 0x7c
 8009692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009696:	2a20      	cmp	r2, #32
 8009698:	d1cd      	bne.n	8009636 <_strtod_l+0x3e>
 800969a:	3301      	adds	r3, #1
 800969c:	9319      	str	r3, [sp, #100]	; 0x64
 800969e:	e7bf      	b.n	8009620 <_strtod_l+0x28>
 80096a0:	2a2d      	cmp	r2, #45	; 0x2d
 80096a2:	d1c8      	bne.n	8009636 <_strtod_l+0x3e>
 80096a4:	2201      	movs	r2, #1
 80096a6:	920a      	str	r2, [sp, #40]	; 0x28
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	9219      	str	r2, [sp, #100]	; 0x64
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1c3      	bne.n	800963a <_strtod_l+0x42>
 80096b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b4:	9619      	str	r6, [sp, #100]	; 0x64
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 856b 	bne.w	800a192 <_strtod_l+0xb9a>
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	e7e4      	b.n	800968c <_strtod_l+0x94>
 80096c2:	2200      	movs	r2, #0
 80096c4:	e7ef      	b.n	80096a6 <_strtod_l+0xae>
 80096c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096c8:	b13a      	cbz	r2, 80096da <_strtod_l+0xe2>
 80096ca:	2135      	movs	r1, #53	; 0x35
 80096cc:	a81c      	add	r0, sp, #112	; 0x70
 80096ce:	f002 fff1 	bl	800c6b4 <__copybits>
 80096d2:	4650      	mov	r0, sl
 80096d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096d6:	f002 fbb9 	bl	800be4c <_Bfree>
 80096da:	3e01      	subs	r6, #1
 80096dc:	2e04      	cmp	r6, #4
 80096de:	d806      	bhi.n	80096ee <_strtod_l+0xf6>
 80096e0:	e8df f006 	tbb	[pc, r6]
 80096e4:	1714030a 	.word	0x1714030a
 80096e8:	0a          	.byte	0x0a
 80096e9:	00          	.byte	0x00
 80096ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80096ee:	0721      	lsls	r1, r4, #28
 80096f0:	d5c3      	bpl.n	800967a <_strtod_l+0x82>
 80096f2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80096f6:	e7c0      	b.n	800967a <_strtod_l+0x82>
 80096f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80096fa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80096fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009706:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800970a:	e7f0      	b.n	80096ee <_strtod_l+0xf6>
 800970c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009888 <_strtod_l+0x290>
 8009710:	e7ed      	b.n	80096ee <_strtod_l+0xf6>
 8009712:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009716:	f04f 38ff 	mov.w	r8, #4294967295
 800971a:	e7e8      	b.n	80096ee <_strtod_l+0xf6>
 800971c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	9219      	str	r2, [sp, #100]	; 0x64
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b30      	cmp	r3, #48	; 0x30
 8009726:	d0f9      	beq.n	800971c <_strtod_l+0x124>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0a6      	beq.n	800967a <_strtod_l+0x82>
 800972c:	2301      	movs	r3, #1
 800972e:	9307      	str	r3, [sp, #28]
 8009730:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009732:	220a      	movs	r2, #10
 8009734:	9308      	str	r3, [sp, #32]
 8009736:	2300      	movs	r3, #0
 8009738:	469b      	mov	fp, r3
 800973a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800973e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009740:	7805      	ldrb	r5, [r0, #0]
 8009742:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009746:	b2d9      	uxtb	r1, r3
 8009748:	2909      	cmp	r1, #9
 800974a:	d927      	bls.n	800979c <_strtod_l+0x1a4>
 800974c:	4622      	mov	r2, r4
 800974e:	4639      	mov	r1, r7
 8009750:	f003 fbf1 	bl	800cf36 <strncmp>
 8009754:	2800      	cmp	r0, #0
 8009756:	d033      	beq.n	80097c0 <_strtod_l+0x1c8>
 8009758:	2000      	movs	r0, #0
 800975a:	462a      	mov	r2, r5
 800975c:	465c      	mov	r4, fp
 800975e:	4603      	mov	r3, r0
 8009760:	9004      	str	r0, [sp, #16]
 8009762:	2a65      	cmp	r2, #101	; 0x65
 8009764:	d001      	beq.n	800976a <_strtod_l+0x172>
 8009766:	2a45      	cmp	r2, #69	; 0x45
 8009768:	d114      	bne.n	8009794 <_strtod_l+0x19c>
 800976a:	b91c      	cbnz	r4, 8009774 <_strtod_l+0x17c>
 800976c:	9a07      	ldr	r2, [sp, #28]
 800976e:	4302      	orrs	r2, r0
 8009770:	d09f      	beq.n	80096b2 <_strtod_l+0xba>
 8009772:	2400      	movs	r4, #0
 8009774:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009776:	1c72      	adds	r2, r6, #1
 8009778:	9219      	str	r2, [sp, #100]	; 0x64
 800977a:	7872      	ldrb	r2, [r6, #1]
 800977c:	2a2b      	cmp	r2, #43	; 0x2b
 800977e:	d079      	beq.n	8009874 <_strtod_l+0x27c>
 8009780:	2a2d      	cmp	r2, #45	; 0x2d
 8009782:	f000 8083 	beq.w	800988c <_strtod_l+0x294>
 8009786:	2700      	movs	r7, #0
 8009788:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800978c:	2909      	cmp	r1, #9
 800978e:	f240 8083 	bls.w	8009898 <_strtod_l+0x2a0>
 8009792:	9619      	str	r6, [sp, #100]	; 0x64
 8009794:	2500      	movs	r5, #0
 8009796:	e09f      	b.n	80098d8 <_strtod_l+0x2e0>
 8009798:	2300      	movs	r3, #0
 800979a:	e7c8      	b.n	800972e <_strtod_l+0x136>
 800979c:	f1bb 0f08 	cmp.w	fp, #8
 80097a0:	bfd5      	itete	le
 80097a2:	9906      	ldrle	r1, [sp, #24]
 80097a4:	9905      	ldrgt	r1, [sp, #20]
 80097a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80097aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097ae:	f100 0001 	add.w	r0, r0, #1
 80097b2:	bfd4      	ite	le
 80097b4:	9306      	strle	r3, [sp, #24]
 80097b6:	9305      	strgt	r3, [sp, #20]
 80097b8:	f10b 0b01 	add.w	fp, fp, #1
 80097bc:	9019      	str	r0, [sp, #100]	; 0x64
 80097be:	e7be      	b.n	800973e <_strtod_l+0x146>
 80097c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097c2:	191a      	adds	r2, r3, r4
 80097c4:	9219      	str	r2, [sp, #100]	; 0x64
 80097c6:	5d1a      	ldrb	r2, [r3, r4]
 80097c8:	f1bb 0f00 	cmp.w	fp, #0
 80097cc:	d036      	beq.n	800983c <_strtod_l+0x244>
 80097ce:	465c      	mov	r4, fp
 80097d0:	9004      	str	r0, [sp, #16]
 80097d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097d6:	2b09      	cmp	r3, #9
 80097d8:	d912      	bls.n	8009800 <_strtod_l+0x208>
 80097da:	2301      	movs	r3, #1
 80097dc:	e7c1      	b.n	8009762 <_strtod_l+0x16a>
 80097de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097e0:	3001      	adds	r0, #1
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	9219      	str	r2, [sp, #100]	; 0x64
 80097e6:	785a      	ldrb	r2, [r3, #1]
 80097e8:	2a30      	cmp	r2, #48	; 0x30
 80097ea:	d0f8      	beq.n	80097de <_strtod_l+0x1e6>
 80097ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	f200 84d5 	bhi.w	800a1a0 <_strtod_l+0xba8>
 80097f6:	9004      	str	r0, [sp, #16]
 80097f8:	2000      	movs	r0, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097fe:	9308      	str	r3, [sp, #32]
 8009800:	3a30      	subs	r2, #48	; 0x30
 8009802:	f100 0301 	add.w	r3, r0, #1
 8009806:	d013      	beq.n	8009830 <_strtod_l+0x238>
 8009808:	9904      	ldr	r1, [sp, #16]
 800980a:	1905      	adds	r5, r0, r4
 800980c:	4419      	add	r1, r3
 800980e:	9104      	str	r1, [sp, #16]
 8009810:	4623      	mov	r3, r4
 8009812:	210a      	movs	r1, #10
 8009814:	42ab      	cmp	r3, r5
 8009816:	d113      	bne.n	8009840 <_strtod_l+0x248>
 8009818:	1823      	adds	r3, r4, r0
 800981a:	2b08      	cmp	r3, #8
 800981c:	f104 0401 	add.w	r4, r4, #1
 8009820:	4404      	add	r4, r0
 8009822:	dc1b      	bgt.n	800985c <_strtod_l+0x264>
 8009824:	230a      	movs	r3, #10
 8009826:	9906      	ldr	r1, [sp, #24]
 8009828:	fb03 2301 	mla	r3, r3, r1, r2
 800982c:	9306      	str	r3, [sp, #24]
 800982e:	2300      	movs	r3, #0
 8009830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009832:	4618      	mov	r0, r3
 8009834:	1c51      	adds	r1, r2, #1
 8009836:	9119      	str	r1, [sp, #100]	; 0x64
 8009838:	7852      	ldrb	r2, [r2, #1]
 800983a:	e7ca      	b.n	80097d2 <_strtod_l+0x1da>
 800983c:	4658      	mov	r0, fp
 800983e:	e7d3      	b.n	80097e8 <_strtod_l+0x1f0>
 8009840:	2b08      	cmp	r3, #8
 8009842:	dc04      	bgt.n	800984e <_strtod_l+0x256>
 8009844:	9f06      	ldr	r7, [sp, #24]
 8009846:	434f      	muls	r7, r1
 8009848:	9706      	str	r7, [sp, #24]
 800984a:	3301      	adds	r3, #1
 800984c:	e7e2      	b.n	8009814 <_strtod_l+0x21c>
 800984e:	1c5f      	adds	r7, r3, #1
 8009850:	2f10      	cmp	r7, #16
 8009852:	bfde      	ittt	le
 8009854:	9f05      	ldrle	r7, [sp, #20]
 8009856:	434f      	mulle	r7, r1
 8009858:	9705      	strle	r7, [sp, #20]
 800985a:	e7f6      	b.n	800984a <_strtod_l+0x252>
 800985c:	2c10      	cmp	r4, #16
 800985e:	bfdf      	itttt	le
 8009860:	230a      	movle	r3, #10
 8009862:	9905      	ldrle	r1, [sp, #20]
 8009864:	fb03 2301 	mlale	r3, r3, r1, r2
 8009868:	9305      	strle	r3, [sp, #20]
 800986a:	e7e0      	b.n	800982e <_strtod_l+0x236>
 800986c:	2300      	movs	r3, #0
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	2301      	movs	r3, #1
 8009872:	e77b      	b.n	800976c <_strtod_l+0x174>
 8009874:	2700      	movs	r7, #0
 8009876:	1cb2      	adds	r2, r6, #2
 8009878:	9219      	str	r2, [sp, #100]	; 0x64
 800987a:	78b2      	ldrb	r2, [r6, #2]
 800987c:	e784      	b.n	8009788 <_strtod_l+0x190>
 800987e:	bf00      	nop
 8009880:	0800d5e4 	.word	0x0800d5e4
 8009884:	0800d29c 	.word	0x0800d29c
 8009888:	7ff00000 	.word	0x7ff00000
 800988c:	2701      	movs	r7, #1
 800988e:	e7f2      	b.n	8009876 <_strtod_l+0x27e>
 8009890:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009892:	1c51      	adds	r1, r2, #1
 8009894:	9119      	str	r1, [sp, #100]	; 0x64
 8009896:	7852      	ldrb	r2, [r2, #1]
 8009898:	2a30      	cmp	r2, #48	; 0x30
 800989a:	d0f9      	beq.n	8009890 <_strtod_l+0x298>
 800989c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80098a0:	2908      	cmp	r1, #8
 80098a2:	f63f af77 	bhi.w	8009794 <_strtod_l+0x19c>
 80098a6:	f04f 0e0a 	mov.w	lr, #10
 80098aa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80098ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098b0:	9209      	str	r2, [sp, #36]	; 0x24
 80098b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098b4:	1c51      	adds	r1, r2, #1
 80098b6:	9119      	str	r1, [sp, #100]	; 0x64
 80098b8:	7852      	ldrb	r2, [r2, #1]
 80098ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80098be:	2d09      	cmp	r5, #9
 80098c0:	d935      	bls.n	800992e <_strtod_l+0x336>
 80098c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098c4:	1b49      	subs	r1, r1, r5
 80098c6:	2908      	cmp	r1, #8
 80098c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80098cc:	dc02      	bgt.n	80098d4 <_strtod_l+0x2dc>
 80098ce:	4565      	cmp	r5, ip
 80098d0:	bfa8      	it	ge
 80098d2:	4665      	movge	r5, ip
 80098d4:	b107      	cbz	r7, 80098d8 <_strtod_l+0x2e0>
 80098d6:	426d      	negs	r5, r5
 80098d8:	2c00      	cmp	r4, #0
 80098da:	d14c      	bne.n	8009976 <_strtod_l+0x37e>
 80098dc:	9907      	ldr	r1, [sp, #28]
 80098de:	4301      	orrs	r1, r0
 80098e0:	f47f aecb 	bne.w	800967a <_strtod_l+0x82>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f47f aee4 	bne.w	80096b2 <_strtod_l+0xba>
 80098ea:	2a69      	cmp	r2, #105	; 0x69
 80098ec:	d026      	beq.n	800993c <_strtod_l+0x344>
 80098ee:	dc23      	bgt.n	8009938 <_strtod_l+0x340>
 80098f0:	2a49      	cmp	r2, #73	; 0x49
 80098f2:	d023      	beq.n	800993c <_strtod_l+0x344>
 80098f4:	2a4e      	cmp	r2, #78	; 0x4e
 80098f6:	f47f aedc 	bne.w	80096b2 <_strtod_l+0xba>
 80098fa:	499d      	ldr	r1, [pc, #628]	; (8009b70 <_strtod_l+0x578>)
 80098fc:	a819      	add	r0, sp, #100	; 0x64
 80098fe:	f002 f921 	bl	800bb44 <__match>
 8009902:	2800      	cmp	r0, #0
 8009904:	f43f aed5 	beq.w	80096b2 <_strtod_l+0xba>
 8009908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b28      	cmp	r3, #40	; 0x28
 800990e:	d12c      	bne.n	800996a <_strtod_l+0x372>
 8009910:	4998      	ldr	r1, [pc, #608]	; (8009b74 <_strtod_l+0x57c>)
 8009912:	aa1c      	add	r2, sp, #112	; 0x70
 8009914:	a819      	add	r0, sp, #100	; 0x64
 8009916:	f002 f929 	bl	800bb6c <__hexnan>
 800991a:	2805      	cmp	r0, #5
 800991c:	d125      	bne.n	800996a <_strtod_l+0x372>
 800991e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009920:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009924:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009928:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800992c:	e6a5      	b.n	800967a <_strtod_l+0x82>
 800992e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009932:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009936:	e7bc      	b.n	80098b2 <_strtod_l+0x2ba>
 8009938:	2a6e      	cmp	r2, #110	; 0x6e
 800993a:	e7dc      	b.n	80098f6 <_strtod_l+0x2fe>
 800993c:	498e      	ldr	r1, [pc, #568]	; (8009b78 <_strtod_l+0x580>)
 800993e:	a819      	add	r0, sp, #100	; 0x64
 8009940:	f002 f900 	bl	800bb44 <__match>
 8009944:	2800      	cmp	r0, #0
 8009946:	f43f aeb4 	beq.w	80096b2 <_strtod_l+0xba>
 800994a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800994c:	498b      	ldr	r1, [pc, #556]	; (8009b7c <_strtod_l+0x584>)
 800994e:	3b01      	subs	r3, #1
 8009950:	a819      	add	r0, sp, #100	; 0x64
 8009952:	9319      	str	r3, [sp, #100]	; 0x64
 8009954:	f002 f8f6 	bl	800bb44 <__match>
 8009958:	b910      	cbnz	r0, 8009960 <_strtod_l+0x368>
 800995a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800995c:	3301      	adds	r3, #1
 800995e:	9319      	str	r3, [sp, #100]	; 0x64
 8009960:	f04f 0800 	mov.w	r8, #0
 8009964:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009b80 <_strtod_l+0x588>
 8009968:	e687      	b.n	800967a <_strtod_l+0x82>
 800996a:	4886      	ldr	r0, [pc, #536]	; (8009b84 <_strtod_l+0x58c>)
 800996c:	f003 fa8a 	bl	800ce84 <nan>
 8009970:	4680      	mov	r8, r0
 8009972:	4689      	mov	r9, r1
 8009974:	e681      	b.n	800967a <_strtod_l+0x82>
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	f1bb 0f00 	cmp.w	fp, #0
 800997c:	bf08      	it	eq
 800997e:	46a3      	moveq	fp, r4
 8009980:	1aeb      	subs	r3, r5, r3
 8009982:	2c10      	cmp	r4, #16
 8009984:	9806      	ldr	r0, [sp, #24]
 8009986:	4626      	mov	r6, r4
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	bfa8      	it	ge
 800998c:	2610      	movge	r6, #16
 800998e:	f7f6 fe53 	bl	8000638 <__aeabi_ui2d>
 8009992:	2c09      	cmp	r4, #9
 8009994:	4680      	mov	r8, r0
 8009996:	4689      	mov	r9, r1
 8009998:	dd13      	ble.n	80099c2 <_strtod_l+0x3ca>
 800999a:	4b7b      	ldr	r3, [pc, #492]	; (8009b88 <_strtod_l+0x590>)
 800999c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80099a4:	f7f6 fec2 	bl	800072c <__aeabi_dmul>
 80099a8:	4680      	mov	r8, r0
 80099aa:	9805      	ldr	r0, [sp, #20]
 80099ac:	4689      	mov	r9, r1
 80099ae:	f7f6 fe43 	bl	8000638 <__aeabi_ui2d>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	4640      	mov	r0, r8
 80099b8:	4649      	mov	r1, r9
 80099ba:	f7f6 fd01 	bl	80003c0 <__adddf3>
 80099be:	4680      	mov	r8, r0
 80099c0:	4689      	mov	r9, r1
 80099c2:	2c0f      	cmp	r4, #15
 80099c4:	dc36      	bgt.n	8009a34 <_strtod_l+0x43c>
 80099c6:	9b07      	ldr	r3, [sp, #28]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f43f ae56 	beq.w	800967a <_strtod_l+0x82>
 80099ce:	dd22      	ble.n	8009a16 <_strtod_l+0x41e>
 80099d0:	2b16      	cmp	r3, #22
 80099d2:	dc09      	bgt.n	80099e8 <_strtod_l+0x3f0>
 80099d4:	496c      	ldr	r1, [pc, #432]	; (8009b88 <_strtod_l+0x590>)
 80099d6:	4642      	mov	r2, r8
 80099d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099dc:	464b      	mov	r3, r9
 80099de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099e2:	f7f6 fea3 	bl	800072c <__aeabi_dmul>
 80099e6:	e7c3      	b.n	8009970 <_strtod_l+0x378>
 80099e8:	9a07      	ldr	r2, [sp, #28]
 80099ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80099ee:	4293      	cmp	r3, r2
 80099f0:	db20      	blt.n	8009a34 <_strtod_l+0x43c>
 80099f2:	4d65      	ldr	r5, [pc, #404]	; (8009b88 <_strtod_l+0x590>)
 80099f4:	f1c4 040f 	rsb	r4, r4, #15
 80099f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80099fc:	4642      	mov	r2, r8
 80099fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a02:	464b      	mov	r3, r9
 8009a04:	f7f6 fe92 	bl	800072c <__aeabi_dmul>
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	1b1c      	subs	r4, r3, r4
 8009a0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a14:	e7e5      	b.n	80099e2 <_strtod_l+0x3ea>
 8009a16:	9b07      	ldr	r3, [sp, #28]
 8009a18:	3316      	adds	r3, #22
 8009a1a:	db0b      	blt.n	8009a34 <_strtod_l+0x43c>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	4640      	mov	r0, r8
 8009a20:	1b5d      	subs	r5, r3, r5
 8009a22:	4b59      	ldr	r3, [pc, #356]	; (8009b88 <_strtod_l+0x590>)
 8009a24:	4649      	mov	r1, r9
 8009a26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a2e:	f7f6 ffa7 	bl	8000980 <__aeabi_ddiv>
 8009a32:	e79d      	b.n	8009970 <_strtod_l+0x378>
 8009a34:	9b07      	ldr	r3, [sp, #28]
 8009a36:	1ba6      	subs	r6, r4, r6
 8009a38:	441e      	add	r6, r3
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	dd74      	ble.n	8009b28 <_strtod_l+0x530>
 8009a3e:	f016 030f 	ands.w	r3, r6, #15
 8009a42:	d00a      	beq.n	8009a5a <_strtod_l+0x462>
 8009a44:	4950      	ldr	r1, [pc, #320]	; (8009b88 <_strtod_l+0x590>)
 8009a46:	4642      	mov	r2, r8
 8009a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a50:	464b      	mov	r3, r9
 8009a52:	f7f6 fe6b 	bl	800072c <__aeabi_dmul>
 8009a56:	4680      	mov	r8, r0
 8009a58:	4689      	mov	r9, r1
 8009a5a:	f036 060f 	bics.w	r6, r6, #15
 8009a5e:	d052      	beq.n	8009b06 <_strtod_l+0x50e>
 8009a60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009a64:	dd27      	ble.n	8009ab6 <_strtod_l+0x4be>
 8009a66:	f04f 0b00 	mov.w	fp, #0
 8009a6a:	f8cd b010 	str.w	fp, [sp, #16]
 8009a6e:	f8cd b020 	str.w	fp, [sp, #32]
 8009a72:	f8cd b018 	str.w	fp, [sp, #24]
 8009a76:	2322      	movs	r3, #34	; 0x22
 8009a78:	f04f 0800 	mov.w	r8, #0
 8009a7c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009b80 <_strtod_l+0x588>
 8009a80:	f8ca 3000 	str.w	r3, [sl]
 8009a84:	9b08      	ldr	r3, [sp, #32]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f43f adf7 	beq.w	800967a <_strtod_l+0x82>
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a90:	f002 f9dc 	bl	800be4c <_Bfree>
 8009a94:	4650      	mov	r0, sl
 8009a96:	9906      	ldr	r1, [sp, #24]
 8009a98:	f002 f9d8 	bl	800be4c <_Bfree>
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	9904      	ldr	r1, [sp, #16]
 8009aa0:	f002 f9d4 	bl	800be4c <_Bfree>
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	9908      	ldr	r1, [sp, #32]
 8009aa8:	f002 f9d0 	bl	800be4c <_Bfree>
 8009aac:	4659      	mov	r1, fp
 8009aae:	4650      	mov	r0, sl
 8009ab0:	f002 f9cc 	bl	800be4c <_Bfree>
 8009ab4:	e5e1      	b.n	800967a <_strtod_l+0x82>
 8009ab6:	4b35      	ldr	r3, [pc, #212]	; (8009b8c <_strtod_l+0x594>)
 8009ab8:	4640      	mov	r0, r8
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	2300      	movs	r3, #0
 8009abe:	4649      	mov	r1, r9
 8009ac0:	461f      	mov	r7, r3
 8009ac2:	1136      	asrs	r6, r6, #4
 8009ac4:	2e01      	cmp	r6, #1
 8009ac6:	dc21      	bgt.n	8009b0c <_strtod_l+0x514>
 8009ac8:	b10b      	cbz	r3, 8009ace <_strtod_l+0x4d6>
 8009aca:	4680      	mov	r8, r0
 8009acc:	4689      	mov	r9, r1
 8009ace:	4b2f      	ldr	r3, [pc, #188]	; (8009b8c <_strtod_l+0x594>)
 8009ad0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009ad4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009ad8:	4642      	mov	r2, r8
 8009ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ade:	464b      	mov	r3, r9
 8009ae0:	f7f6 fe24 	bl	800072c <__aeabi_dmul>
 8009ae4:	4b26      	ldr	r3, [pc, #152]	; (8009b80 <_strtod_l+0x588>)
 8009ae6:	460a      	mov	r2, r1
 8009ae8:	400b      	ands	r3, r1
 8009aea:	4929      	ldr	r1, [pc, #164]	; (8009b90 <_strtod_l+0x598>)
 8009aec:	4680      	mov	r8, r0
 8009aee:	428b      	cmp	r3, r1
 8009af0:	d8b9      	bhi.n	8009a66 <_strtod_l+0x46e>
 8009af2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009af6:	428b      	cmp	r3, r1
 8009af8:	bf86      	itte	hi
 8009afa:	f04f 38ff 	movhi.w	r8, #4294967295
 8009afe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009b94 <_strtod_l+0x59c>
 8009b02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009b06:	2300      	movs	r3, #0
 8009b08:	9305      	str	r3, [sp, #20]
 8009b0a:	e07f      	b.n	8009c0c <_strtod_l+0x614>
 8009b0c:	07f2      	lsls	r2, r6, #31
 8009b0e:	d505      	bpl.n	8009b1c <_strtod_l+0x524>
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fe09 	bl	800072c <__aeabi_dmul>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	9a05      	ldr	r2, [sp, #20]
 8009b1e:	3701      	adds	r7, #1
 8009b20:	3208      	adds	r2, #8
 8009b22:	1076      	asrs	r6, r6, #1
 8009b24:	9205      	str	r2, [sp, #20]
 8009b26:	e7cd      	b.n	8009ac4 <_strtod_l+0x4cc>
 8009b28:	d0ed      	beq.n	8009b06 <_strtod_l+0x50e>
 8009b2a:	4276      	negs	r6, r6
 8009b2c:	f016 020f 	ands.w	r2, r6, #15
 8009b30:	d00a      	beq.n	8009b48 <_strtod_l+0x550>
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <_strtod_l+0x590>)
 8009b34:	4640      	mov	r0, r8
 8009b36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 ff1e 	bl	8000980 <__aeabi_ddiv>
 8009b44:	4680      	mov	r8, r0
 8009b46:	4689      	mov	r9, r1
 8009b48:	1136      	asrs	r6, r6, #4
 8009b4a:	d0dc      	beq.n	8009b06 <_strtod_l+0x50e>
 8009b4c:	2e1f      	cmp	r6, #31
 8009b4e:	dd23      	ble.n	8009b98 <_strtod_l+0x5a0>
 8009b50:	f04f 0b00 	mov.w	fp, #0
 8009b54:	f8cd b010 	str.w	fp, [sp, #16]
 8009b58:	f8cd b020 	str.w	fp, [sp, #32]
 8009b5c:	f8cd b018 	str.w	fp, [sp, #24]
 8009b60:	2322      	movs	r3, #34	; 0x22
 8009b62:	f04f 0800 	mov.w	r8, #0
 8009b66:	f04f 0900 	mov.w	r9, #0
 8009b6a:	f8ca 3000 	str.w	r3, [sl]
 8009b6e:	e789      	b.n	8009a84 <_strtod_l+0x48c>
 8009b70:	0800d26d 	.word	0x0800d26d
 8009b74:	0800d2b0 	.word	0x0800d2b0
 8009b78:	0800d265 	.word	0x0800d265
 8009b7c:	0800d4a4 	.word	0x0800d4a4
 8009b80:	7ff00000 	.word	0x7ff00000
 8009b84:	0800d39f 	.word	0x0800d39f
 8009b88:	0800d680 	.word	0x0800d680
 8009b8c:	0800d658 	.word	0x0800d658
 8009b90:	7ca00000 	.word	0x7ca00000
 8009b94:	7fefffff 	.word	0x7fefffff
 8009b98:	f016 0310 	ands.w	r3, r6, #16
 8009b9c:	bf18      	it	ne
 8009b9e:	236a      	movne	r3, #106	; 0x6a
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4fb0      	ldr	r7, [pc, #704]	; (8009e6c <_strtod_l+0x874>)
 8009baa:	07f2      	lsls	r2, r6, #31
 8009bac:	d504      	bpl.n	8009bb8 <_strtod_l+0x5c0>
 8009bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb2:	f7f6 fdbb 	bl	800072c <__aeabi_dmul>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	1076      	asrs	r6, r6, #1
 8009bba:	f107 0708 	add.w	r7, r7, #8
 8009bbe:	d1f4      	bne.n	8009baa <_strtod_l+0x5b2>
 8009bc0:	b10b      	cbz	r3, 8009bc6 <_strtod_l+0x5ce>
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	4689      	mov	r9, r1
 8009bc6:	9b05      	ldr	r3, [sp, #20]
 8009bc8:	b1c3      	cbz	r3, 8009bfc <_strtod_l+0x604>
 8009bca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009bce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	dd11      	ble.n	8009bfc <_strtod_l+0x604>
 8009bd8:	2b1f      	cmp	r3, #31
 8009bda:	f340 8127 	ble.w	8009e2c <_strtod_l+0x834>
 8009bde:	2b34      	cmp	r3, #52	; 0x34
 8009be0:	bfd8      	it	le
 8009be2:	f04f 33ff 	movle.w	r3, #4294967295
 8009be6:	f04f 0800 	mov.w	r8, #0
 8009bea:	bfcf      	iteee	gt
 8009bec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009bf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009bf4:	fa03 f202 	lslle.w	r2, r3, r2
 8009bf8:	ea02 0901 	andle.w	r9, r2, r1
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4640      	mov	r0, r8
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 fffa 	bl	8000bfc <__aeabi_dcmpeq>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d1a1      	bne.n	8009b50 <_strtod_l+0x558>
 8009c0c:	9b06      	ldr	r3, [sp, #24]
 8009c0e:	465a      	mov	r2, fp
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	4650      	mov	r0, sl
 8009c14:	4623      	mov	r3, r4
 8009c16:	9908      	ldr	r1, [sp, #32]
 8009c18:	f002 f980 	bl	800bf1c <__s2b>
 8009c1c:	9008      	str	r0, [sp, #32]
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f43f af21 	beq.w	8009a66 <_strtod_l+0x46e>
 8009c24:	9b04      	ldr	r3, [sp, #16]
 8009c26:	f04f 0b00 	mov.w	fp, #0
 8009c2a:	1b5d      	subs	r5, r3, r5
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	f8cd b010 	str.w	fp, [sp, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfb4      	ite	lt
 8009c36:	462b      	movlt	r3, r5
 8009c38:	2300      	movge	r3, #0
 8009c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8009c3c:	9b07      	ldr	r3, [sp, #28]
 8009c3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c42:	9314      	str	r3, [sp, #80]	; 0x50
 8009c44:	9b08      	ldr	r3, [sp, #32]
 8009c46:	4650      	mov	r0, sl
 8009c48:	6859      	ldr	r1, [r3, #4]
 8009c4a:	f002 f8bf 	bl	800bdcc <_Balloc>
 8009c4e:	9006      	str	r0, [sp, #24]
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f43f af10 	beq.w	8009a76 <_strtod_l+0x47e>
 8009c56:	9b08      	ldr	r3, [sp, #32]
 8009c58:	300c      	adds	r0, #12
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	f103 010c 	add.w	r1, r3, #12
 8009c60:	3202      	adds	r2, #2
 8009c62:	0092      	lsls	r2, r2, #2
 8009c64:	f7fe fdfc 	bl	8008860 <memcpy>
 8009c68:	ab1c      	add	r3, sp, #112	; 0x70
 8009c6a:	9301      	str	r3, [sp, #4]
 8009c6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4642      	mov	r2, r8
 8009c72:	464b      	mov	r3, r9
 8009c74:	4650      	mov	r0, sl
 8009c76:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009c7a:	f002 fc91 	bl	800c5a0 <__d2b>
 8009c7e:	901a      	str	r0, [sp, #104]	; 0x68
 8009c80:	2800      	cmp	r0, #0
 8009c82:	f43f aef8 	beq.w	8009a76 <_strtod_l+0x47e>
 8009c86:	2101      	movs	r1, #1
 8009c88:	4650      	mov	r0, sl
 8009c8a:	f002 f9df 	bl	800c04c <__i2b>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	9004      	str	r0, [sp, #16]
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f43f aeef 	beq.w	8009a76 <_strtod_l+0x47e>
 8009c98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	bfab      	itete	ge
 8009ca0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009ca2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009ca4:	18ee      	addge	r6, r5, r3
 8009ca6:	1b5c      	sublt	r4, r3, r5
 8009ca8:	9b05      	ldr	r3, [sp, #20]
 8009caa:	bfa8      	it	ge
 8009cac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009cae:	eba5 0503 	sub.w	r5, r5, r3
 8009cb2:	4415      	add	r5, r2
 8009cb4:	4b6e      	ldr	r3, [pc, #440]	; (8009e70 <_strtod_l+0x878>)
 8009cb6:	f105 35ff 	add.w	r5, r5, #4294967295
 8009cba:	bfb8      	it	lt
 8009cbc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009cc4:	f280 80c4 	bge.w	8009e50 <_strtod_l+0x858>
 8009cc8:	1b5b      	subs	r3, r3, r5
 8009cca:	2b1f      	cmp	r3, #31
 8009ccc:	f04f 0701 	mov.w	r7, #1
 8009cd0:	eba2 0203 	sub.w	r2, r2, r3
 8009cd4:	f300 80b1 	bgt.w	8009e3a <_strtod_l+0x842>
 8009cd8:	2500      	movs	r5, #0
 8009cda:	fa07 f303 	lsl.w	r3, r7, r3
 8009cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce0:	18b7      	adds	r7, r6, r2
 8009ce2:	9b05      	ldr	r3, [sp, #20]
 8009ce4:	42be      	cmp	r6, r7
 8009ce6:	4414      	add	r4, r2
 8009ce8:	441c      	add	r4, r3
 8009cea:	4633      	mov	r3, r6
 8009cec:	bfa8      	it	ge
 8009cee:	463b      	movge	r3, r7
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	bfa8      	it	ge
 8009cf4:	4623      	movge	r3, r4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfc2      	ittt	gt
 8009cfa:	1aff      	subgt	r7, r7, r3
 8009cfc:	1ae4      	subgt	r4, r4, r3
 8009cfe:	1af6      	subgt	r6, r6, r3
 8009d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	dd17      	ble.n	8009d36 <_strtod_l+0x73e>
 8009d06:	461a      	mov	r2, r3
 8009d08:	4650      	mov	r0, sl
 8009d0a:	9904      	ldr	r1, [sp, #16]
 8009d0c:	f002 fa5c 	bl	800c1c8 <__pow5mult>
 8009d10:	9004      	str	r0, [sp, #16]
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f43f aeaf 	beq.w	8009a76 <_strtod_l+0x47e>
 8009d18:	4601      	mov	r1, r0
 8009d1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	f002 f9ab 	bl	800c078 <__multiply>
 8009d22:	9009      	str	r0, [sp, #36]	; 0x24
 8009d24:	2800      	cmp	r0, #0
 8009d26:	f43f aea6 	beq.w	8009a76 <_strtod_l+0x47e>
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d2e:	f002 f88d 	bl	800be4c <_Bfree>
 8009d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d34:	931a      	str	r3, [sp, #104]	; 0x68
 8009d36:	2f00      	cmp	r7, #0
 8009d38:	f300 808e 	bgt.w	8009e58 <_strtod_l+0x860>
 8009d3c:	9b07      	ldr	r3, [sp, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd08      	ble.n	8009d54 <_strtod_l+0x75c>
 8009d42:	4650      	mov	r0, sl
 8009d44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d46:	9906      	ldr	r1, [sp, #24]
 8009d48:	f002 fa3e 	bl	800c1c8 <__pow5mult>
 8009d4c:	9006      	str	r0, [sp, #24]
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f43f ae91 	beq.w	8009a76 <_strtod_l+0x47e>
 8009d54:	2c00      	cmp	r4, #0
 8009d56:	dd08      	ble.n	8009d6a <_strtod_l+0x772>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	9906      	ldr	r1, [sp, #24]
 8009d5e:	f002 fa8d 	bl	800c27c <__lshift>
 8009d62:	9006      	str	r0, [sp, #24]
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f43f ae86 	beq.w	8009a76 <_strtod_l+0x47e>
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	dd08      	ble.n	8009d80 <_strtod_l+0x788>
 8009d6e:	4632      	mov	r2, r6
 8009d70:	4650      	mov	r0, sl
 8009d72:	9904      	ldr	r1, [sp, #16]
 8009d74:	f002 fa82 	bl	800c27c <__lshift>
 8009d78:	9004      	str	r0, [sp, #16]
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f43f ae7b 	beq.w	8009a76 <_strtod_l+0x47e>
 8009d80:	4650      	mov	r0, sl
 8009d82:	9a06      	ldr	r2, [sp, #24]
 8009d84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d86:	f002 fb05 	bl	800c394 <__mdiff>
 8009d8a:	4683      	mov	fp, r0
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f43f ae72 	beq.w	8009a76 <_strtod_l+0x47e>
 8009d92:	2400      	movs	r4, #0
 8009d94:	68c3      	ldr	r3, [r0, #12]
 8009d96:	9904      	ldr	r1, [sp, #16]
 8009d98:	60c4      	str	r4, [r0, #12]
 8009d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d9c:	f002 fade 	bl	800c35c <__mcmp>
 8009da0:	42a0      	cmp	r0, r4
 8009da2:	da6b      	bge.n	8009e7c <_strtod_l+0x884>
 8009da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da6:	ea53 0308 	orrs.w	r3, r3, r8
 8009daa:	f040 8091 	bne.w	8009ed0 <_strtod_l+0x8d8>
 8009dae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 808c 	bne.w	8009ed0 <_strtod_l+0x8d8>
 8009db8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dbc:	0d1b      	lsrs	r3, r3, #20
 8009dbe:	051b      	lsls	r3, r3, #20
 8009dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009dc4:	f240 8084 	bls.w	8009ed0 <_strtod_l+0x8d8>
 8009dc8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009dcc:	b91b      	cbnz	r3, 8009dd6 <_strtod_l+0x7de>
 8009dce:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	dd7c      	ble.n	8009ed0 <_strtod_l+0x8d8>
 8009dd6:	4659      	mov	r1, fp
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f002 fa4e 	bl	800c27c <__lshift>
 8009de0:	9904      	ldr	r1, [sp, #16]
 8009de2:	4683      	mov	fp, r0
 8009de4:	f002 faba 	bl	800c35c <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	dd71      	ble.n	8009ed0 <_strtod_l+0x8d8>
 8009dec:	9905      	ldr	r1, [sp, #20]
 8009dee:	464b      	mov	r3, r9
 8009df0:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <_strtod_l+0x87c>)
 8009df2:	2900      	cmp	r1, #0
 8009df4:	f000 808c 	beq.w	8009f10 <_strtod_l+0x918>
 8009df8:	ea02 0109 	and.w	r1, r2, r9
 8009dfc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e00:	f300 8086 	bgt.w	8009f10 <_strtod_l+0x918>
 8009e04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e08:	f77f aeaa 	ble.w	8009b60 <_strtod_l+0x568>
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	4b19      	ldr	r3, [pc, #100]	; (8009e78 <_strtod_l+0x880>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fc8a 	bl	800072c <__aeabi_dmul>
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4303      	orrs	r3, r0
 8009e1c:	bf08      	it	eq
 8009e1e:	2322      	moveq	r3, #34	; 0x22
 8009e20:	4680      	mov	r8, r0
 8009e22:	4689      	mov	r9, r1
 8009e24:	bf08      	it	eq
 8009e26:	f8ca 3000 	streq.w	r3, [sl]
 8009e2a:	e62f      	b.n	8009a8c <_strtod_l+0x494>
 8009e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e30:	fa02 f303 	lsl.w	r3, r2, r3
 8009e34:	ea03 0808 	and.w	r8, r3, r8
 8009e38:	e6e0      	b.n	8009bfc <_strtod_l+0x604>
 8009e3a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009e3e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009e42:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009e46:	35e2      	adds	r5, #226	; 0xe2
 8009e48:	fa07 f505 	lsl.w	r5, r7, r5
 8009e4c:	970f      	str	r7, [sp, #60]	; 0x3c
 8009e4e:	e747      	b.n	8009ce0 <_strtod_l+0x6e8>
 8009e50:	2301      	movs	r3, #1
 8009e52:	2500      	movs	r5, #0
 8009e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e56:	e743      	b.n	8009ce0 <_strtod_l+0x6e8>
 8009e58:	463a      	mov	r2, r7
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e5e:	f002 fa0d 	bl	800c27c <__lshift>
 8009e62:	901a      	str	r0, [sp, #104]	; 0x68
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f47f af69 	bne.w	8009d3c <_strtod_l+0x744>
 8009e6a:	e604      	b.n	8009a76 <_strtod_l+0x47e>
 8009e6c:	0800d2c8 	.word	0x0800d2c8
 8009e70:	fffffc02 	.word	0xfffffc02
 8009e74:	7ff00000 	.word	0x7ff00000
 8009e78:	39500000 	.word	0x39500000
 8009e7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e80:	d165      	bne.n	8009f4e <_strtod_l+0x956>
 8009e82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e88:	b35a      	cbz	r2, 8009ee2 <_strtod_l+0x8ea>
 8009e8a:	4a99      	ldr	r2, [pc, #612]	; (800a0f0 <_strtod_l+0xaf8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d12b      	bne.n	8009ee8 <_strtod_l+0x8f0>
 8009e90:	9b05      	ldr	r3, [sp, #20]
 8009e92:	4641      	mov	r1, r8
 8009e94:	b303      	cbz	r3, 8009ed8 <_strtod_l+0x8e0>
 8009e96:	464a      	mov	r2, r9
 8009e98:	4b96      	ldr	r3, [pc, #600]	; (800a0f4 <_strtod_l+0xafc>)
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	d81b      	bhi.n	8009ede <_strtod_l+0x8e6>
 8009ea6:	0d1b      	lsrs	r3, r3, #20
 8009ea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009eac:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb0:	4299      	cmp	r1, r3
 8009eb2:	d119      	bne.n	8009ee8 <_strtod_l+0x8f0>
 8009eb4:	4b90      	ldr	r3, [pc, #576]	; (800a0f8 <_strtod_l+0xb00>)
 8009eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d102      	bne.n	8009ec2 <_strtod_l+0x8ca>
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	f43f adda 	beq.w	8009a76 <_strtod_l+0x47e>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	4b8b      	ldr	r3, [pc, #556]	; (800a0f4 <_strtod_l+0xafc>)
 8009ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eca:	401a      	ands	r2, r3
 8009ecc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009ed0:	9b05      	ldr	r3, [sp, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d19a      	bne.n	8009e0c <_strtod_l+0x814>
 8009ed6:	e5d9      	b.n	8009a8c <_strtod_l+0x494>
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	e7e8      	b.n	8009eb0 <_strtod_l+0x8b8>
 8009ede:	4613      	mov	r3, r2
 8009ee0:	e7e6      	b.n	8009eb0 <_strtod_l+0x8b8>
 8009ee2:	ea53 0308 	orrs.w	r3, r3, r8
 8009ee6:	d081      	beq.n	8009dec <_strtod_l+0x7f4>
 8009ee8:	b1e5      	cbz	r5, 8009f24 <_strtod_l+0x92c>
 8009eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eec:	421d      	tst	r5, r3
 8009eee:	d0ef      	beq.n	8009ed0 <_strtod_l+0x8d8>
 8009ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	9a05      	ldr	r2, [sp, #20]
 8009ef8:	b1c3      	cbz	r3, 8009f2c <_strtod_l+0x934>
 8009efa:	f7ff fb59 	bl	80095b0 <sulp>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f06:	f7f6 fa5b 	bl	80003c0 <__adddf3>
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	4689      	mov	r9, r1
 8009f0e:	e7df      	b.n	8009ed0 <_strtod_l+0x8d8>
 8009f10:	4013      	ands	r3, r2
 8009f12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f16:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f1a:	f04f 38ff 	mov.w	r8, #4294967295
 8009f1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f22:	e7d5      	b.n	8009ed0 <_strtod_l+0x8d8>
 8009f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f26:	ea13 0f08 	tst.w	r3, r8
 8009f2a:	e7e0      	b.n	8009eee <_strtod_l+0x8f6>
 8009f2c:	f7ff fb40 	bl	80095b0 <sulp>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f38:	f7f6 fa40 	bl	80003bc <__aeabi_dsub>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4680      	mov	r8, r0
 8009f42:	4689      	mov	r9, r1
 8009f44:	f7f6 fe5a 	bl	8000bfc <__aeabi_dcmpeq>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0c1      	beq.n	8009ed0 <_strtod_l+0x8d8>
 8009f4c:	e608      	b.n	8009b60 <_strtod_l+0x568>
 8009f4e:	4658      	mov	r0, fp
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	f002 fb81 	bl	800c658 <__ratio>
 8009f56:	2200      	movs	r2, #0
 8009f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	f7f6 fe60 	bl	8000c24 <__aeabi_dcmple>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d070      	beq.n	800a04a <_strtod_l+0xa52>
 8009f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d042      	beq.n	8009ff4 <_strtod_l+0x9fc>
 8009f6e:	2600      	movs	r6, #0
 8009f70:	4f62      	ldr	r7, [pc, #392]	; (800a0fc <_strtod_l+0xb04>)
 8009f72:	4d62      	ldr	r5, [pc, #392]	; (800a0fc <_strtod_l+0xb04>)
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f7a:	0d1b      	lsrs	r3, r3, #20
 8009f7c:	051b      	lsls	r3, r3, #20
 8009f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f82:	4b5f      	ldr	r3, [pc, #380]	; (800a100 <_strtod_l+0xb08>)
 8009f84:	429a      	cmp	r2, r3
 8009f86:	f040 80c3 	bne.w	800a110 <_strtod_l+0xb18>
 8009f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009f92:	4649      	mov	r1, r9
 8009f94:	f002 fa8a 	bl	800c4ac <__ulp>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 fbc4 	bl	800072c <__aeabi_dmul>
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	f7f6 fa0a 	bl	80003c0 <__adddf3>
 8009fac:	460b      	mov	r3, r1
 8009fae:	4951      	ldr	r1, [pc, #324]	; (800a0f4 <_strtod_l+0xafc>)
 8009fb0:	4a54      	ldr	r2, [pc, #336]	; (800a104 <_strtod_l+0xb0c>)
 8009fb2:	4019      	ands	r1, r3
 8009fb4:	4291      	cmp	r1, r2
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	d95d      	bls.n	800a076 <_strtod_l+0xa7e>
 8009fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fbc:	4b4e      	ldr	r3, [pc, #312]	; (800a0f8 <_strtod_l+0xb00>)
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d103      	bne.n	8009fca <_strtod_l+0x9d2>
 8009fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	f43f ad56 	beq.w	8009a76 <_strtod_l+0x47e>
 8009fca:	f04f 38ff 	mov.w	r8, #4294967295
 8009fce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a0f8 <_strtod_l+0xb00>
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fd6:	f001 ff39 	bl	800be4c <_Bfree>
 8009fda:	4650      	mov	r0, sl
 8009fdc:	9906      	ldr	r1, [sp, #24]
 8009fde:	f001 ff35 	bl	800be4c <_Bfree>
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	9904      	ldr	r1, [sp, #16]
 8009fe6:	f001 ff31 	bl	800be4c <_Bfree>
 8009fea:	4659      	mov	r1, fp
 8009fec:	4650      	mov	r0, sl
 8009fee:	f001 ff2d 	bl	800be4c <_Bfree>
 8009ff2:	e627      	b.n	8009c44 <_strtod_l+0x64c>
 8009ff4:	f1b8 0f00 	cmp.w	r8, #0
 8009ff8:	d119      	bne.n	800a02e <_strtod_l+0xa36>
 8009ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a000:	b9e3      	cbnz	r3, 800a03c <_strtod_l+0xa44>
 800a002:	2200      	movs	r2, #0
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	4b3c      	ldr	r3, [pc, #240]	; (800a0fc <_strtod_l+0xb04>)
 800a00a:	f7f6 fe01 	bl	8000c10 <__aeabi_dcmplt>
 800a00e:	b9c8      	cbnz	r0, 800a044 <_strtod_l+0xa4c>
 800a010:	2200      	movs	r2, #0
 800a012:	4630      	mov	r0, r6
 800a014:	4639      	mov	r1, r7
 800a016:	4b3c      	ldr	r3, [pc, #240]	; (800a108 <_strtod_l+0xb10>)
 800a018:	f7f6 fb88 	bl	800072c <__aeabi_dmul>
 800a01c:	4604      	mov	r4, r0
 800a01e:	460d      	mov	r5, r1
 800a020:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a024:	9416      	str	r4, [sp, #88]	; 0x58
 800a026:	9317      	str	r3, [sp, #92]	; 0x5c
 800a028:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a02c:	e7a2      	b.n	8009f74 <_strtod_l+0x97c>
 800a02e:	f1b8 0f01 	cmp.w	r8, #1
 800a032:	d103      	bne.n	800a03c <_strtod_l+0xa44>
 800a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a036:	2b00      	cmp	r3, #0
 800a038:	f43f ad92 	beq.w	8009b60 <_strtod_l+0x568>
 800a03c:	2600      	movs	r6, #0
 800a03e:	2400      	movs	r4, #0
 800a040:	4f32      	ldr	r7, [pc, #200]	; (800a10c <_strtod_l+0xb14>)
 800a042:	e796      	b.n	8009f72 <_strtod_l+0x97a>
 800a044:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a046:	4d30      	ldr	r5, [pc, #192]	; (800a108 <_strtod_l+0xb10>)
 800a048:	e7ea      	b.n	800a020 <_strtod_l+0xa28>
 800a04a:	4b2f      	ldr	r3, [pc, #188]	; (800a108 <_strtod_l+0xb10>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	4630      	mov	r0, r6
 800a050:	4639      	mov	r1, r7
 800a052:	f7f6 fb6b 	bl	800072c <__aeabi_dmul>
 800a056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a058:	4604      	mov	r4, r0
 800a05a:	460d      	mov	r5, r1
 800a05c:	b933      	cbnz	r3, 800a06c <_strtod_l+0xa74>
 800a05e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a062:	9010      	str	r0, [sp, #64]	; 0x40
 800a064:	9311      	str	r3, [sp, #68]	; 0x44
 800a066:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a06a:	e783      	b.n	8009f74 <_strtod_l+0x97c>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a074:	e7f7      	b.n	800a066 <_strtod_l+0xa6e>
 800a076:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a07a:	9b05      	ldr	r3, [sp, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1a8      	bne.n	8009fd2 <_strtod_l+0x9da>
 800a080:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a086:	0d1b      	lsrs	r3, r3, #20
 800a088:	051b      	lsls	r3, r3, #20
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d1a1      	bne.n	8009fd2 <_strtod_l+0x9da>
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f7 f83d 	bl	8001110 <__aeabi_d2lz>
 800a096:	f7f6 fb1b 	bl	80006d0 <__aeabi_l2d>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 f98b 	bl	80003bc <__aeabi_dsub>
 800a0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ac:	ea43 0308 	orr.w	r3, r3, r8
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	d066      	beq.n	800a186 <_strtod_l+0xb8e>
 800a0b8:	a309      	add	r3, pc, #36	; (adr r3, 800a0e0 <_strtod_l+0xae8>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 fda7 	bl	8000c10 <__aeabi_dcmplt>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	f47f ace2 	bne.w	8009a8c <_strtod_l+0x494>
 800a0c8:	a307      	add	r3, pc, #28	; (adr r3, 800a0e8 <_strtod_l+0xaf0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 fdbb 	bl	8000c4c <__aeabi_dcmpgt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f43f af7b 	beq.w	8009fd2 <_strtod_l+0x9da>
 800a0dc:	e4d6      	b.n	8009a8c <_strtod_l+0x494>
 800a0de:	bf00      	nop
 800a0e0:	94a03595 	.word	0x94a03595
 800a0e4:	3fdfffff 	.word	0x3fdfffff
 800a0e8:	35afe535 	.word	0x35afe535
 800a0ec:	3fe00000 	.word	0x3fe00000
 800a0f0:	000fffff 	.word	0x000fffff
 800a0f4:	7ff00000 	.word	0x7ff00000
 800a0f8:	7fefffff 	.word	0x7fefffff
 800a0fc:	3ff00000 	.word	0x3ff00000
 800a100:	7fe00000 	.word	0x7fe00000
 800a104:	7c9fffff 	.word	0x7c9fffff
 800a108:	3fe00000 	.word	0x3fe00000
 800a10c:	bff00000 	.word	0xbff00000
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	b313      	cbz	r3, 800a15a <_strtod_l+0xb62>
 800a114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a116:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a11a:	d81e      	bhi.n	800a15a <_strtod_l+0xb62>
 800a11c:	a326      	add	r3, pc, #152	; (adr r3, 800a1b8 <_strtod_l+0xbc0>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 fd7d 	bl	8000c24 <__aeabi_dcmple>
 800a12a:	b190      	cbz	r0, 800a152 <_strtod_l+0xb5a>
 800a12c:	4629      	mov	r1, r5
 800a12e:	4620      	mov	r0, r4
 800a130:	f7f6 fdd4 	bl	8000cdc <__aeabi_d2uiz>
 800a134:	2801      	cmp	r0, #1
 800a136:	bf38      	it	cc
 800a138:	2001      	movcc	r0, #1
 800a13a:	f7f6 fa7d 	bl	8000638 <__aeabi_ui2d>
 800a13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a140:	4604      	mov	r4, r0
 800a142:	460d      	mov	r5, r1
 800a144:	b9d3      	cbnz	r3, 800a17c <_strtod_l+0xb84>
 800a146:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a14a:	9012      	str	r0, [sp, #72]	; 0x48
 800a14c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a14e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a154:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a158:	1a9f      	subs	r7, r3, r2
 800a15a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a15e:	f002 f9a5 	bl	800c4ac <__ulp>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 fadf 	bl	800072c <__aeabi_dmul>
 800a16e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a172:	f7f6 f925 	bl	80003c0 <__adddf3>
 800a176:	4680      	mov	r8, r0
 800a178:	4689      	mov	r9, r1
 800a17a:	e77e      	b.n	800a07a <_strtod_l+0xa82>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a184:	e7e3      	b.n	800a14e <_strtod_l+0xb56>
 800a186:	a30e      	add	r3, pc, #56	; (adr r3, 800a1c0 <_strtod_l+0xbc8>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f7f6 fd40 	bl	8000c10 <__aeabi_dcmplt>
 800a190:	e7a1      	b.n	800a0d6 <_strtod_l+0xade>
 800a192:	2300      	movs	r3, #0
 800a194:	930a      	str	r3, [sp, #40]	; 0x28
 800a196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a198:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	f7ff ba71 	b.w	8009682 <_strtod_l+0x8a>
 800a1a0:	2a65      	cmp	r2, #101	; 0x65
 800a1a2:	f43f ab63 	beq.w	800986c <_strtod_l+0x274>
 800a1a6:	2a45      	cmp	r2, #69	; 0x45
 800a1a8:	f43f ab60 	beq.w	800986c <_strtod_l+0x274>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f7ff bb95 	b.w	80098dc <_strtod_l+0x2e4>
 800a1b2:	bf00      	nop
 800a1b4:	f3af 8000 	nop.w
 800a1b8:	ffc00000 	.word	0xffc00000
 800a1bc:	41dfffff 	.word	0x41dfffff
 800a1c0:	94a03595 	.word	0x94a03595
 800a1c4:	3fcfffff 	.word	0x3fcfffff

0800a1c8 <_strtod_r>:
 800a1c8:	4b01      	ldr	r3, [pc, #4]	; (800a1d0 <_strtod_r+0x8>)
 800a1ca:	f7ff ba15 	b.w	80095f8 <_strtod_l>
 800a1ce:	bf00      	nop
 800a1d0:	20000678 	.word	0x20000678

0800a1d4 <strtok>:
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <strtok+0x5c>)
 800a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	681f      	ldr	r7, [r3, #0]
 800a1dc:	4605      	mov	r5, r0
 800a1de:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a1e0:	460e      	mov	r6, r1
 800a1e2:	b9ec      	cbnz	r4, 800a220 <strtok+0x4c>
 800a1e4:	2050      	movs	r0, #80	; 0x50
 800a1e6:	f001 fdc9 	bl	800bd7c <malloc>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	65b8      	str	r0, [r7, #88]	; 0x58
 800a1ee:	b920      	cbnz	r0, 800a1fa <strtok+0x26>
 800a1f0:	2157      	movs	r1, #87	; 0x57
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <strtok+0x60>)
 800a1f4:	4810      	ldr	r0, [pc, #64]	; (800a238 <strtok+0x64>)
 800a1f6:	f000 f991 	bl	800a51c <__assert_func>
 800a1fa:	e9c0 4400 	strd	r4, r4, [r0]
 800a1fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a202:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a206:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a20a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a20e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a212:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a216:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a21a:	6184      	str	r4, [r0, #24]
 800a21c:	7704      	strb	r4, [r0, #28]
 800a21e:	6244      	str	r4, [r0, #36]	; 0x24
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a226:	2301      	movs	r3, #1
 800a228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	f000 b806 	b.w	800a23c <__strtok_r>
 800a230:	20000610 	.word	0x20000610
 800a234:	0800d2f0 	.word	0x0800d2f0
 800a238:	0800d307 	.word	0x0800d307

0800a23c <__strtok_r>:
 800a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a23e:	b908      	cbnz	r0, 800a244 <__strtok_r+0x8>
 800a240:	6810      	ldr	r0, [r2, #0]
 800a242:	b188      	cbz	r0, 800a268 <__strtok_r+0x2c>
 800a244:	4604      	mov	r4, r0
 800a246:	460f      	mov	r7, r1
 800a248:	4620      	mov	r0, r4
 800a24a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a24e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a252:	b91e      	cbnz	r6, 800a25c <__strtok_r+0x20>
 800a254:	b965      	cbnz	r5, 800a270 <__strtok_r+0x34>
 800a256:	4628      	mov	r0, r5
 800a258:	6015      	str	r5, [r2, #0]
 800a25a:	e005      	b.n	800a268 <__strtok_r+0x2c>
 800a25c:	42b5      	cmp	r5, r6
 800a25e:	d1f6      	bne.n	800a24e <__strtok_r+0x12>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1f0      	bne.n	800a246 <__strtok_r+0xa>
 800a264:	6014      	str	r4, [r2, #0]
 800a266:	7003      	strb	r3, [r0, #0]
 800a268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26a:	461c      	mov	r4, r3
 800a26c:	e00c      	b.n	800a288 <__strtok_r+0x4c>
 800a26e:	b915      	cbnz	r5, 800a276 <__strtok_r+0x3a>
 800a270:	460e      	mov	r6, r1
 800a272:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a276:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	d1f7      	bne.n	800a26e <__strtok_r+0x32>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f3      	beq.n	800a26a <__strtok_r+0x2e>
 800a282:	2300      	movs	r3, #0
 800a284:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a288:	6014      	str	r4, [r2, #0]
 800a28a:	e7ed      	b.n	800a268 <__strtok_r+0x2c>

0800a28c <_strtol_l.constprop.0>:
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a292:	4680      	mov	r8, r0
 800a294:	d001      	beq.n	800a29a <_strtol_l.constprop.0+0xe>
 800a296:	2b24      	cmp	r3, #36	; 0x24
 800a298:	d906      	bls.n	800a2a8 <_strtol_l.constprop.0+0x1c>
 800a29a:	f7fe fab7 	bl	800880c <__errno>
 800a29e:	2316      	movs	r3, #22
 800a2a0:	6003      	str	r3, [r0, #0]
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	4f35      	ldr	r7, [pc, #212]	; (800a380 <_strtol_l.constprop.0+0xf4>)
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2b2:	5de6      	ldrb	r6, [r4, r7]
 800a2b4:	f016 0608 	ands.w	r6, r6, #8
 800a2b8:	d1f8      	bne.n	800a2ac <_strtol_l.constprop.0+0x20>
 800a2ba:	2c2d      	cmp	r4, #45	; 0x2d
 800a2bc:	d12f      	bne.n	800a31e <_strtol_l.constprop.0+0x92>
 800a2be:	2601      	movs	r6, #1
 800a2c0:	782c      	ldrb	r4, [r5, #0]
 800a2c2:	1c85      	adds	r5, r0, #2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d057      	beq.n	800a378 <_strtol_l.constprop.0+0xec>
 800a2c8:	2b10      	cmp	r3, #16
 800a2ca:	d109      	bne.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a2cc:	2c30      	cmp	r4, #48	; 0x30
 800a2ce:	d107      	bne.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a2d0:	7828      	ldrb	r0, [r5, #0]
 800a2d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a2d6:	2858      	cmp	r0, #88	; 0x58
 800a2d8:	d149      	bne.n	800a36e <_strtol_l.constprop.0+0xe2>
 800a2da:	2310      	movs	r3, #16
 800a2dc:	786c      	ldrb	r4, [r5, #1]
 800a2de:	3502      	adds	r5, #2
 800a2e0:	2700      	movs	r7, #0
 800a2e2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a2e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a2ea:	fbbe f9f3 	udiv	r9, lr, r3
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	fb03 ea19 	mls	sl, r3, r9, lr
 800a2f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a2f8:	f1bc 0f09 	cmp.w	ip, #9
 800a2fc:	d814      	bhi.n	800a328 <_strtol_l.constprop.0+0x9c>
 800a2fe:	4664      	mov	r4, ip
 800a300:	42a3      	cmp	r3, r4
 800a302:	dd22      	ble.n	800a34a <_strtol_l.constprop.0+0xbe>
 800a304:	2f00      	cmp	r7, #0
 800a306:	db1d      	blt.n	800a344 <_strtol_l.constprop.0+0xb8>
 800a308:	4581      	cmp	r9, r0
 800a30a:	d31b      	bcc.n	800a344 <_strtol_l.constprop.0+0xb8>
 800a30c:	d101      	bne.n	800a312 <_strtol_l.constprop.0+0x86>
 800a30e:	45a2      	cmp	sl, r4
 800a310:	db18      	blt.n	800a344 <_strtol_l.constprop.0+0xb8>
 800a312:	2701      	movs	r7, #1
 800a314:	fb00 4003 	mla	r0, r0, r3, r4
 800a318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a31c:	e7ea      	b.n	800a2f4 <_strtol_l.constprop.0+0x68>
 800a31e:	2c2b      	cmp	r4, #43	; 0x2b
 800a320:	bf04      	itt	eq
 800a322:	782c      	ldrbeq	r4, [r5, #0]
 800a324:	1c85      	addeq	r5, r0, #2
 800a326:	e7cd      	b.n	800a2c4 <_strtol_l.constprop.0+0x38>
 800a328:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a32c:	f1bc 0f19 	cmp.w	ip, #25
 800a330:	d801      	bhi.n	800a336 <_strtol_l.constprop.0+0xaa>
 800a332:	3c37      	subs	r4, #55	; 0x37
 800a334:	e7e4      	b.n	800a300 <_strtol_l.constprop.0+0x74>
 800a336:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a33a:	f1bc 0f19 	cmp.w	ip, #25
 800a33e:	d804      	bhi.n	800a34a <_strtol_l.constprop.0+0xbe>
 800a340:	3c57      	subs	r4, #87	; 0x57
 800a342:	e7dd      	b.n	800a300 <_strtol_l.constprop.0+0x74>
 800a344:	f04f 37ff 	mov.w	r7, #4294967295
 800a348:	e7e6      	b.n	800a318 <_strtol_l.constprop.0+0x8c>
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	da07      	bge.n	800a35e <_strtol_l.constprop.0+0xd2>
 800a34e:	2322      	movs	r3, #34	; 0x22
 800a350:	4670      	mov	r0, lr
 800a352:	f8c8 3000 	str.w	r3, [r8]
 800a356:	2a00      	cmp	r2, #0
 800a358:	d0a4      	beq.n	800a2a4 <_strtol_l.constprop.0+0x18>
 800a35a:	1e69      	subs	r1, r5, #1
 800a35c:	e005      	b.n	800a36a <_strtol_l.constprop.0+0xde>
 800a35e:	b106      	cbz	r6, 800a362 <_strtol_l.constprop.0+0xd6>
 800a360:	4240      	negs	r0, r0
 800a362:	2a00      	cmp	r2, #0
 800a364:	d09e      	beq.n	800a2a4 <_strtol_l.constprop.0+0x18>
 800a366:	2f00      	cmp	r7, #0
 800a368:	d1f7      	bne.n	800a35a <_strtol_l.constprop.0+0xce>
 800a36a:	6011      	str	r1, [r2, #0]
 800a36c:	e79a      	b.n	800a2a4 <_strtol_l.constprop.0+0x18>
 800a36e:	2430      	movs	r4, #48	; 0x30
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1b5      	bne.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a374:	2308      	movs	r3, #8
 800a376:	e7b3      	b.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a378:	2c30      	cmp	r4, #48	; 0x30
 800a37a:	d0a9      	beq.n	800a2d0 <_strtol_l.constprop.0+0x44>
 800a37c:	230a      	movs	r3, #10
 800a37e:	e7af      	b.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a380:	0800d3a1 	.word	0x0800d3a1

0800a384 <_strtol_r>:
 800a384:	f7ff bf82 	b.w	800a28c <_strtol_l.constprop.0>

0800a388 <strtol>:
 800a388:	4613      	mov	r3, r2
 800a38a:	460a      	mov	r2, r1
 800a38c:	4601      	mov	r1, r0
 800a38e:	4802      	ldr	r0, [pc, #8]	; (800a398 <strtol+0x10>)
 800a390:	6800      	ldr	r0, [r0, #0]
 800a392:	f7ff bf7b 	b.w	800a28c <_strtol_l.constprop.0>
 800a396:	bf00      	nop
 800a398:	20000610 	.word	0x20000610

0800a39c <__swbuf_r>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	460e      	mov	r6, r1
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	b118      	cbz	r0, 800a3ae <__swbuf_r+0x12>
 800a3a6:	6983      	ldr	r3, [r0, #24]
 800a3a8:	b90b      	cbnz	r3, 800a3ae <__swbuf_r+0x12>
 800a3aa:	f001 f865 	bl	800b478 <__sinit>
 800a3ae:	4b21      	ldr	r3, [pc, #132]	; (800a434 <__swbuf_r+0x98>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d12b      	bne.n	800a40c <__swbuf_r+0x70>
 800a3b4:	686c      	ldr	r4, [r5, #4]
 800a3b6:	69a3      	ldr	r3, [r4, #24]
 800a3b8:	60a3      	str	r3, [r4, #8]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	071a      	lsls	r2, r3, #28
 800a3be:	d52f      	bpl.n	800a420 <__swbuf_r+0x84>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	b36b      	cbz	r3, 800a420 <__swbuf_r+0x84>
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	6820      	ldr	r0, [r4, #0]
 800a3c8:	b2f6      	uxtb	r6, r6
 800a3ca:	1ac0      	subs	r0, r0, r3
 800a3cc:	6963      	ldr	r3, [r4, #20]
 800a3ce:	4637      	mov	r7, r6
 800a3d0:	4283      	cmp	r3, r0
 800a3d2:	dc04      	bgt.n	800a3de <__swbuf_r+0x42>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f000 ffba 	bl	800b350 <_fflush_r>
 800a3dc:	bb30      	cbnz	r0, 800a42c <__swbuf_r+0x90>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	6022      	str	r2, [r4, #0]
 800a3ec:	701e      	strb	r6, [r3, #0]
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	d004      	beq.n	800a3fe <__swbuf_r+0x62>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	07db      	lsls	r3, r3, #31
 800a3f8:	d506      	bpl.n	800a408 <__swbuf_r+0x6c>
 800a3fa:	2e0a      	cmp	r6, #10
 800a3fc:	d104      	bne.n	800a408 <__swbuf_r+0x6c>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4628      	mov	r0, r5
 800a402:	f000 ffa5 	bl	800b350 <_fflush_r>
 800a406:	b988      	cbnz	r0, 800a42c <__swbuf_r+0x90>
 800a408:	4638      	mov	r0, r7
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <__swbuf_r+0x9c>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	d101      	bne.n	800a416 <__swbuf_r+0x7a>
 800a412:	68ac      	ldr	r4, [r5, #8]
 800a414:	e7cf      	b.n	800a3b6 <__swbuf_r+0x1a>
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <__swbuf_r+0xa0>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	bf08      	it	eq
 800a41c:	68ec      	ldreq	r4, [r5, #12]
 800a41e:	e7ca      	b.n	800a3b6 <__swbuf_r+0x1a>
 800a420:	4621      	mov	r1, r4
 800a422:	4628      	mov	r0, r5
 800a424:	f000 f80c 	bl	800a440 <__swsetup_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d0cb      	beq.n	800a3c4 <__swbuf_r+0x28>
 800a42c:	f04f 37ff 	mov.w	r7, #4294967295
 800a430:	e7ea      	b.n	800a408 <__swbuf_r+0x6c>
 800a432:	bf00      	nop
 800a434:	0800d53c 	.word	0x0800d53c
 800a438:	0800d55c 	.word	0x0800d55c
 800a43c:	0800d51c 	.word	0x0800d51c

0800a440 <__swsetup_r>:
 800a440:	4b32      	ldr	r3, [pc, #200]	; (800a50c <__swsetup_r+0xcc>)
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	681d      	ldr	r5, [r3, #0]
 800a446:	4606      	mov	r6, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	b125      	cbz	r5, 800a456 <__swsetup_r+0x16>
 800a44c:	69ab      	ldr	r3, [r5, #24]
 800a44e:	b913      	cbnz	r3, 800a456 <__swsetup_r+0x16>
 800a450:	4628      	mov	r0, r5
 800a452:	f001 f811 	bl	800b478 <__sinit>
 800a456:	4b2e      	ldr	r3, [pc, #184]	; (800a510 <__swsetup_r+0xd0>)
 800a458:	429c      	cmp	r4, r3
 800a45a:	d10f      	bne.n	800a47c <__swsetup_r+0x3c>
 800a45c:	686c      	ldr	r4, [r5, #4]
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a464:	0719      	lsls	r1, r3, #28
 800a466:	d42c      	bmi.n	800a4c2 <__swsetup_r+0x82>
 800a468:	06dd      	lsls	r5, r3, #27
 800a46a:	d411      	bmi.n	800a490 <__swsetup_r+0x50>
 800a46c:	2309      	movs	r3, #9
 800a46e:	6033      	str	r3, [r6, #0]
 800a470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	e03e      	b.n	800a4fa <__swsetup_r+0xba>
 800a47c:	4b25      	ldr	r3, [pc, #148]	; (800a514 <__swsetup_r+0xd4>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	d101      	bne.n	800a486 <__swsetup_r+0x46>
 800a482:	68ac      	ldr	r4, [r5, #8]
 800a484:	e7eb      	b.n	800a45e <__swsetup_r+0x1e>
 800a486:	4b24      	ldr	r3, [pc, #144]	; (800a518 <__swsetup_r+0xd8>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	bf08      	it	eq
 800a48c:	68ec      	ldreq	r4, [r5, #12]
 800a48e:	e7e6      	b.n	800a45e <__swsetup_r+0x1e>
 800a490:	0758      	lsls	r0, r3, #29
 800a492:	d512      	bpl.n	800a4ba <__swsetup_r+0x7a>
 800a494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a496:	b141      	cbz	r1, 800a4aa <__swsetup_r+0x6a>
 800a498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a49c:	4299      	cmp	r1, r3
 800a49e:	d002      	beq.n	800a4a6 <__swsetup_r+0x66>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f002 f95f 	bl	800c764 <_free_r>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6363      	str	r3, [r4, #52]	; 0x34
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6063      	str	r3, [r4, #4]
 800a4b6:	6923      	ldr	r3, [r4, #16]
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	f043 0308 	orr.w	r3, r3, #8
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	6923      	ldr	r3, [r4, #16]
 800a4c4:	b94b      	cbnz	r3, 800a4da <__swsetup_r+0x9a>
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d0:	d003      	beq.n	800a4da <__swsetup_r+0x9a>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f001 fc11 	bl	800bcfc <__smakebuf_r>
 800a4da:	89a0      	ldrh	r0, [r4, #12]
 800a4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4e0:	f010 0301 	ands.w	r3, r0, #1
 800a4e4:	d00a      	beq.n	800a4fc <__swsetup_r+0xbc>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	6963      	ldr	r3, [r4, #20]
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	61a3      	str	r3, [r4, #24]
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b943      	cbnz	r3, 800a506 <__swsetup_r+0xc6>
 800a4f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4f8:	d1ba      	bne.n	800a470 <__swsetup_r+0x30>
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	0781      	lsls	r1, r0, #30
 800a4fe:	bf58      	it	pl
 800a500:	6963      	ldrpl	r3, [r4, #20]
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	e7f4      	b.n	800a4f0 <__swsetup_r+0xb0>
 800a506:	2000      	movs	r0, #0
 800a508:	e7f7      	b.n	800a4fa <__swsetup_r+0xba>
 800a50a:	bf00      	nop
 800a50c:	20000610 	.word	0x20000610
 800a510:	0800d53c 	.word	0x0800d53c
 800a514:	0800d55c 	.word	0x0800d55c
 800a518:	0800d51c 	.word	0x0800d51c

0800a51c <__assert_func>:
 800a51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a51e:	4614      	mov	r4, r2
 800a520:	461a      	mov	r2, r3
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <__assert_func+0x2c>)
 800a524:	4605      	mov	r5, r0
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68d8      	ldr	r0, [r3, #12]
 800a52a:	b14c      	cbz	r4, 800a540 <__assert_func+0x24>
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <__assert_func+0x30>)
 800a52e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a532:	9100      	str	r1, [sp, #0]
 800a534:	462b      	mov	r3, r5
 800a536:	4906      	ldr	r1, [pc, #24]	; (800a550 <__assert_func+0x34>)
 800a538:	f001 f81c 	bl	800b574 <fiprintf>
 800a53c:	f002 fd2e 	bl	800cf9c <abort>
 800a540:	4b04      	ldr	r3, [pc, #16]	; (800a554 <__assert_func+0x38>)
 800a542:	461c      	mov	r4, r3
 800a544:	e7f3      	b.n	800a52e <__assert_func+0x12>
 800a546:	bf00      	nop
 800a548:	20000610 	.word	0x20000610
 800a54c:	0800d364 	.word	0x0800d364
 800a550:	0800d371 	.word	0x0800d371
 800a554:	0800d39f 	.word	0x0800d39f

0800a558 <quorem>:
 800a558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	6903      	ldr	r3, [r0, #16]
 800a55e:	690c      	ldr	r4, [r1, #16]
 800a560:	4607      	mov	r7, r0
 800a562:	42a3      	cmp	r3, r4
 800a564:	f2c0 8082 	blt.w	800a66c <quorem+0x114>
 800a568:	3c01      	subs	r4, #1
 800a56a:	f100 0514 	add.w	r5, r0, #20
 800a56e:	f101 0814 	add.w	r8, r1, #20
 800a572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a57c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a580:	3301      	adds	r3, #1
 800a582:	429a      	cmp	r2, r3
 800a584:	fbb2 f6f3 	udiv	r6, r2, r3
 800a588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a58c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a590:	d331      	bcc.n	800a5f6 <quorem+0x9e>
 800a592:	f04f 0e00 	mov.w	lr, #0
 800a596:	4640      	mov	r0, r8
 800a598:	46ac      	mov	ip, r5
 800a59a:	46f2      	mov	sl, lr
 800a59c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5a0:	b293      	uxth	r3, r2
 800a5a2:	fb06 e303 	mla	r3, r6, r3, lr
 800a5a6:	0c12      	lsrs	r2, r2, #16
 800a5a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	fb06 e202 	mla	r2, r6, r2, lr
 800a5b2:	ebaa 0303 	sub.w	r3, sl, r3
 800a5b6:	f8dc a000 	ldr.w	sl, [ip]
 800a5ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5be:	fa1f fa8a 	uxth.w	sl, sl
 800a5c2:	4453      	add	r3, sl
 800a5c4:	f8dc a000 	ldr.w	sl, [ip]
 800a5c8:	b292      	uxth	r2, r2
 800a5ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5d8:	4581      	cmp	r9, r0
 800a5da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5de:	f84c 3b04 	str.w	r3, [ip], #4
 800a5e2:	d2db      	bcs.n	800a59c <quorem+0x44>
 800a5e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5e8:	b92b      	cbnz	r3, 800a5f6 <quorem+0x9e>
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	3b04      	subs	r3, #4
 800a5ee:	429d      	cmp	r5, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	d32f      	bcc.n	800a654 <quorem+0xfc>
 800a5f4:	613c      	str	r4, [r7, #16]
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f001 feb0 	bl	800c35c <__mcmp>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	db25      	blt.n	800a64c <quorem+0xf4>
 800a600:	4628      	mov	r0, r5
 800a602:	f04f 0c00 	mov.w	ip, #0
 800a606:	3601      	adds	r6, #1
 800a608:	f858 1b04 	ldr.w	r1, [r8], #4
 800a60c:	f8d0 e000 	ldr.w	lr, [r0]
 800a610:	b28b      	uxth	r3, r1
 800a612:	ebac 0303 	sub.w	r3, ip, r3
 800a616:	fa1f f28e 	uxth.w	r2, lr
 800a61a:	4413      	add	r3, r2
 800a61c:	0c0a      	lsrs	r2, r1, #16
 800a61e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a622:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a626:	b29b      	uxth	r3, r3
 800a628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a62c:	45c1      	cmp	r9, r8
 800a62e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a632:	f840 3b04 	str.w	r3, [r0], #4
 800a636:	d2e7      	bcs.n	800a608 <quorem+0xb0>
 800a638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a63c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a640:	b922      	cbnz	r2, 800a64c <quorem+0xf4>
 800a642:	3b04      	subs	r3, #4
 800a644:	429d      	cmp	r5, r3
 800a646:	461a      	mov	r2, r3
 800a648:	d30a      	bcc.n	800a660 <quorem+0x108>
 800a64a:	613c      	str	r4, [r7, #16]
 800a64c:	4630      	mov	r0, r6
 800a64e:	b003      	add	sp, #12
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	6812      	ldr	r2, [r2, #0]
 800a656:	3b04      	subs	r3, #4
 800a658:	2a00      	cmp	r2, #0
 800a65a:	d1cb      	bne.n	800a5f4 <quorem+0x9c>
 800a65c:	3c01      	subs	r4, #1
 800a65e:	e7c6      	b.n	800a5ee <quorem+0x96>
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	3b04      	subs	r3, #4
 800a664:	2a00      	cmp	r2, #0
 800a666:	d1f0      	bne.n	800a64a <quorem+0xf2>
 800a668:	3c01      	subs	r4, #1
 800a66a:	e7eb      	b.n	800a644 <quorem+0xec>
 800a66c:	2000      	movs	r0, #0
 800a66e:	e7ee      	b.n	800a64e <quorem+0xf6>

0800a670 <_dtoa_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4616      	mov	r6, r2
 800a676:	461f      	mov	r7, r3
 800a678:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a67a:	b099      	sub	sp, #100	; 0x64
 800a67c:	4605      	mov	r5, r0
 800a67e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a682:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a686:	b974      	cbnz	r4, 800a6a6 <_dtoa_r+0x36>
 800a688:	2010      	movs	r0, #16
 800a68a:	f001 fb77 	bl	800bd7c <malloc>
 800a68e:	4602      	mov	r2, r0
 800a690:	6268      	str	r0, [r5, #36]	; 0x24
 800a692:	b920      	cbnz	r0, 800a69e <_dtoa_r+0x2e>
 800a694:	21ea      	movs	r1, #234	; 0xea
 800a696:	4ba8      	ldr	r3, [pc, #672]	; (800a938 <_dtoa_r+0x2c8>)
 800a698:	48a8      	ldr	r0, [pc, #672]	; (800a93c <_dtoa_r+0x2cc>)
 800a69a:	f7ff ff3f 	bl	800a51c <__assert_func>
 800a69e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6a2:	6004      	str	r4, [r0, #0]
 800a6a4:	60c4      	str	r4, [r0, #12]
 800a6a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6a8:	6819      	ldr	r1, [r3, #0]
 800a6aa:	b151      	cbz	r1, 800a6c2 <_dtoa_r+0x52>
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4093      	lsls	r3, r2
 800a6b2:	604a      	str	r2, [r1, #4]
 800a6b4:	608b      	str	r3, [r1, #8]
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f001 fbc8 	bl	800be4c <_Bfree>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	1e3b      	subs	r3, r7, #0
 800a6c4:	bfaf      	iteee	ge
 800a6c6:	2300      	movge	r3, #0
 800a6c8:	2201      	movlt	r2, #1
 800a6ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6ce:	9305      	strlt	r3, [sp, #20]
 800a6d0:	bfa8      	it	ge
 800a6d2:	f8c8 3000 	strge.w	r3, [r8]
 800a6d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a6da:	4b99      	ldr	r3, [pc, #612]	; (800a940 <_dtoa_r+0x2d0>)
 800a6dc:	bfb8      	it	lt
 800a6de:	f8c8 2000 	strlt.w	r2, [r8]
 800a6e2:	ea33 0309 	bics.w	r3, r3, r9
 800a6e6:	d119      	bne.n	800a71c <_dtoa_r+0xac>
 800a6e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6f4:	4333      	orrs	r3, r6
 800a6f6:	f000 857f 	beq.w	800b1f8 <_dtoa_r+0xb88>
 800a6fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6fc:	b953      	cbnz	r3, 800a714 <_dtoa_r+0xa4>
 800a6fe:	4b91      	ldr	r3, [pc, #580]	; (800a944 <_dtoa_r+0x2d4>)
 800a700:	e022      	b.n	800a748 <_dtoa_r+0xd8>
 800a702:	4b91      	ldr	r3, [pc, #580]	; (800a948 <_dtoa_r+0x2d8>)
 800a704:	9303      	str	r3, [sp, #12]
 800a706:	3308      	adds	r3, #8
 800a708:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	9803      	ldr	r0, [sp, #12]
 800a70e:	b019      	add	sp, #100	; 0x64
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	4b8b      	ldr	r3, [pc, #556]	; (800a944 <_dtoa_r+0x2d4>)
 800a716:	9303      	str	r3, [sp, #12]
 800a718:	3303      	adds	r3, #3
 800a71a:	e7f5      	b.n	800a708 <_dtoa_r+0x98>
 800a71c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a720:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a728:	2200      	movs	r2, #0
 800a72a:	2300      	movs	r3, #0
 800a72c:	f7f6 fa66 	bl	8000bfc <__aeabi_dcmpeq>
 800a730:	4680      	mov	r8, r0
 800a732:	b158      	cbz	r0, 800a74c <_dtoa_r+0xdc>
 800a734:	2301      	movs	r3, #1
 800a736:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 8558 	beq.w	800b1f2 <_dtoa_r+0xb82>
 800a742:	4882      	ldr	r0, [pc, #520]	; (800a94c <_dtoa_r+0x2dc>)
 800a744:	6018      	str	r0, [r3, #0]
 800a746:	1e43      	subs	r3, r0, #1
 800a748:	9303      	str	r3, [sp, #12]
 800a74a:	e7df      	b.n	800a70c <_dtoa_r+0x9c>
 800a74c:	ab16      	add	r3, sp, #88	; 0x58
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	ab17      	add	r3, sp, #92	; 0x5c
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	4628      	mov	r0, r5
 800a756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a75a:	f001 ff21 	bl	800c5a0 <__d2b>
 800a75e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a762:	4683      	mov	fp, r0
 800a764:	2c00      	cmp	r4, #0
 800a766:	d07f      	beq.n	800a868 <_dtoa_r+0x1f8>
 800a768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a76e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a772:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a776:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a77a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a77e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a782:	2200      	movs	r2, #0
 800a784:	4b72      	ldr	r3, [pc, #456]	; (800a950 <_dtoa_r+0x2e0>)
 800a786:	f7f5 fe19 	bl	80003bc <__aeabi_dsub>
 800a78a:	a365      	add	r3, pc, #404	; (adr r3, 800a920 <_dtoa_r+0x2b0>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f7f5 ffcc 	bl	800072c <__aeabi_dmul>
 800a794:	a364      	add	r3, pc, #400	; (adr r3, 800a928 <_dtoa_r+0x2b8>)
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	f7f5 fe11 	bl	80003c0 <__adddf3>
 800a79e:	4606      	mov	r6, r0
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	f7f5 ff58 	bl	8000658 <__aeabi_i2d>
 800a7a8:	a361      	add	r3, pc, #388	; (adr r3, 800a930 <_dtoa_r+0x2c0>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7f5 ffbd 	bl	800072c <__aeabi_dmul>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f5 fe01 	bl	80003c0 <__adddf3>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	f7f6 fa63 	bl	8000c8c <__aeabi_d2iz>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	f7f6 fa1e 	bl	8000c10 <__aeabi_dcmplt>
 800a7d4:	b148      	cbz	r0, 800a7ea <_dtoa_r+0x17a>
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	f7f5 ff3e 	bl	8000658 <__aeabi_i2d>
 800a7dc:	4632      	mov	r2, r6
 800a7de:	463b      	mov	r3, r7
 800a7e0:	f7f6 fa0c 	bl	8000bfc <__aeabi_dcmpeq>
 800a7e4:	b908      	cbnz	r0, 800a7ea <_dtoa_r+0x17a>
 800a7e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7ea:	f1ba 0f16 	cmp.w	sl, #22
 800a7ee:	d858      	bhi.n	800a8a2 <_dtoa_r+0x232>
 800a7f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7f4:	4b57      	ldr	r3, [pc, #348]	; (800a954 <_dtoa_r+0x2e4>)
 800a7f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f7f6 fa07 	bl	8000c10 <__aeabi_dcmplt>
 800a802:	2800      	cmp	r0, #0
 800a804:	d04f      	beq.n	800a8a6 <_dtoa_r+0x236>
 800a806:	2300      	movs	r3, #0
 800a808:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a80c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a80e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a810:	1b1c      	subs	r4, r3, r4
 800a812:	1e63      	subs	r3, r4, #1
 800a814:	9309      	str	r3, [sp, #36]	; 0x24
 800a816:	bf49      	itett	mi
 800a818:	f1c4 0301 	rsbmi	r3, r4, #1
 800a81c:	2300      	movpl	r3, #0
 800a81e:	9306      	strmi	r3, [sp, #24]
 800a820:	2300      	movmi	r3, #0
 800a822:	bf54      	ite	pl
 800a824:	9306      	strpl	r3, [sp, #24]
 800a826:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a828:	f1ba 0f00 	cmp.w	sl, #0
 800a82c:	db3d      	blt.n	800a8aa <_dtoa_r+0x23a>
 800a82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a830:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a834:	4453      	add	r3, sl
 800a836:	9309      	str	r3, [sp, #36]	; 0x24
 800a838:	2300      	movs	r3, #0
 800a83a:	930a      	str	r3, [sp, #40]	; 0x28
 800a83c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a83e:	2b09      	cmp	r3, #9
 800a840:	f200 808c 	bhi.w	800a95c <_dtoa_r+0x2ec>
 800a844:	2b05      	cmp	r3, #5
 800a846:	bfc4      	itt	gt
 800a848:	3b04      	subgt	r3, #4
 800a84a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a84c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a84e:	bfc8      	it	gt
 800a850:	2400      	movgt	r4, #0
 800a852:	f1a3 0302 	sub.w	r3, r3, #2
 800a856:	bfd8      	it	le
 800a858:	2401      	movle	r4, #1
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	f200 808a 	bhi.w	800a974 <_dtoa_r+0x304>
 800a860:	e8df f003 	tbb	[pc, r3]
 800a864:	5b4d4f2d 	.word	0x5b4d4f2d
 800a868:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a86c:	441c      	add	r4, r3
 800a86e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a872:	2b20      	cmp	r3, #32
 800a874:	bfc3      	ittte	gt
 800a876:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a87a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a87e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a882:	f1c3 0320 	rsble	r3, r3, #32
 800a886:	bfc6      	itte	gt
 800a888:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a88c:	4318      	orrgt	r0, r3
 800a88e:	fa06 f003 	lslle.w	r0, r6, r3
 800a892:	f7f5 fed1 	bl	8000638 <__aeabi_ui2d>
 800a896:	2301      	movs	r3, #1
 800a898:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a89c:	3c01      	subs	r4, #1
 800a89e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8a0:	e76f      	b.n	800a782 <_dtoa_r+0x112>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e7b2      	b.n	800a80c <_dtoa_r+0x19c>
 800a8a6:	900f      	str	r0, [sp, #60]	; 0x3c
 800a8a8:	e7b1      	b.n	800a80e <_dtoa_r+0x19e>
 800a8aa:	9b06      	ldr	r3, [sp, #24]
 800a8ac:	eba3 030a 	sub.w	r3, r3, sl
 800a8b0:	9306      	str	r3, [sp, #24]
 800a8b2:	f1ca 0300 	rsb	r3, sl, #0
 800a8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	930e      	str	r3, [sp, #56]	; 0x38
 800a8bc:	e7be      	b.n	800a83c <_dtoa_r+0x1cc>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dc58      	bgt.n	800a97a <_dtoa_r+0x30a>
 800a8c8:	f04f 0901 	mov.w	r9, #1
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	f8cd 9020 	str.w	r9, [sp, #32]
 800a8d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a8da:	6042      	str	r2, [r0, #4]
 800a8dc:	2204      	movs	r2, #4
 800a8de:	f102 0614 	add.w	r6, r2, #20
 800a8e2:	429e      	cmp	r6, r3
 800a8e4:	6841      	ldr	r1, [r0, #4]
 800a8e6:	d94e      	bls.n	800a986 <_dtoa_r+0x316>
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f001 fa6f 	bl	800bdcc <_Balloc>
 800a8ee:	9003      	str	r0, [sp, #12]
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d14c      	bne.n	800a98e <_dtoa_r+0x31e>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8fa:	4b17      	ldr	r3, [pc, #92]	; (800a958 <_dtoa_r+0x2e8>)
 800a8fc:	e6cc      	b.n	800a698 <_dtoa_r+0x28>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e7de      	b.n	800a8c0 <_dtoa_r+0x250>
 800a902:	2300      	movs	r3, #0
 800a904:	930b      	str	r3, [sp, #44]	; 0x2c
 800a906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a908:	eb0a 0903 	add.w	r9, sl, r3
 800a90c:	f109 0301 	add.w	r3, r9, #1
 800a910:	2b01      	cmp	r3, #1
 800a912:	9308      	str	r3, [sp, #32]
 800a914:	bfb8      	it	lt
 800a916:	2301      	movlt	r3, #1
 800a918:	e7dd      	b.n	800a8d6 <_dtoa_r+0x266>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e7f2      	b.n	800a904 <_dtoa_r+0x294>
 800a91e:	bf00      	nop
 800a920:	636f4361 	.word	0x636f4361
 800a924:	3fd287a7 	.word	0x3fd287a7
 800a928:	8b60c8b3 	.word	0x8b60c8b3
 800a92c:	3fc68a28 	.word	0x3fc68a28
 800a930:	509f79fb 	.word	0x509f79fb
 800a934:	3fd34413 	.word	0x3fd34413
 800a938:	0800d2f0 	.word	0x0800d2f0
 800a93c:	0800d4ae 	.word	0x0800d4ae
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	0800d4aa 	.word	0x0800d4aa
 800a948:	0800d4a1 	.word	0x0800d4a1
 800a94c:	0800d271 	.word	0x0800d271
 800a950:	3ff80000 	.word	0x3ff80000
 800a954:	0800d680 	.word	0x0800d680
 800a958:	0800d509 	.word	0x0800d509
 800a95c:	2401      	movs	r4, #1
 800a95e:	2300      	movs	r3, #0
 800a960:	940b      	str	r4, [sp, #44]	; 0x2c
 800a962:	9322      	str	r3, [sp, #136]	; 0x88
 800a964:	f04f 39ff 	mov.w	r9, #4294967295
 800a968:	2200      	movs	r2, #0
 800a96a:	2312      	movs	r3, #18
 800a96c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a970:	9223      	str	r2, [sp, #140]	; 0x8c
 800a972:	e7b0      	b.n	800a8d6 <_dtoa_r+0x266>
 800a974:	2301      	movs	r3, #1
 800a976:	930b      	str	r3, [sp, #44]	; 0x2c
 800a978:	e7f4      	b.n	800a964 <_dtoa_r+0x2f4>
 800a97a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a97e:	464b      	mov	r3, r9
 800a980:	f8cd 9020 	str.w	r9, [sp, #32]
 800a984:	e7a7      	b.n	800a8d6 <_dtoa_r+0x266>
 800a986:	3101      	adds	r1, #1
 800a988:	6041      	str	r1, [r0, #4]
 800a98a:	0052      	lsls	r2, r2, #1
 800a98c:	e7a7      	b.n	800a8de <_dtoa_r+0x26e>
 800a98e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a990:	9a03      	ldr	r2, [sp, #12]
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	9b08      	ldr	r3, [sp, #32]
 800a996:	2b0e      	cmp	r3, #14
 800a998:	f200 80a8 	bhi.w	800aaec <_dtoa_r+0x47c>
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	f000 80a5 	beq.w	800aaec <_dtoa_r+0x47c>
 800a9a2:	f1ba 0f00 	cmp.w	sl, #0
 800a9a6:	dd34      	ble.n	800aa12 <_dtoa_r+0x3a2>
 800a9a8:	4a9a      	ldr	r2, [pc, #616]	; (800ac14 <_dtoa_r+0x5a4>)
 800a9aa:	f00a 030f 	and.w	r3, sl, #15
 800a9ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a9b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a9be:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a9c2:	d016      	beq.n	800a9f2 <_dtoa_r+0x382>
 800a9c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9c8:	4b93      	ldr	r3, [pc, #588]	; (800ac18 <_dtoa_r+0x5a8>)
 800a9ca:	2703      	movs	r7, #3
 800a9cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9d0:	f7f5 ffd6 	bl	8000980 <__aeabi_ddiv>
 800a9d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9d8:	f004 040f 	and.w	r4, r4, #15
 800a9dc:	4e8e      	ldr	r6, [pc, #568]	; (800ac18 <_dtoa_r+0x5a8>)
 800a9de:	b954      	cbnz	r4, 800a9f6 <_dtoa_r+0x386>
 800a9e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e8:	f7f5 ffca 	bl	8000980 <__aeabi_ddiv>
 800a9ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9f0:	e029      	b.n	800aa46 <_dtoa_r+0x3d6>
 800a9f2:	2702      	movs	r7, #2
 800a9f4:	e7f2      	b.n	800a9dc <_dtoa_r+0x36c>
 800a9f6:	07e1      	lsls	r1, r4, #31
 800a9f8:	d508      	bpl.n	800aa0c <_dtoa_r+0x39c>
 800a9fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa02:	f7f5 fe93 	bl	800072c <__aeabi_dmul>
 800aa06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa0a:	3701      	adds	r7, #1
 800aa0c:	1064      	asrs	r4, r4, #1
 800aa0e:	3608      	adds	r6, #8
 800aa10:	e7e5      	b.n	800a9de <_dtoa_r+0x36e>
 800aa12:	f000 80a5 	beq.w	800ab60 <_dtoa_r+0x4f0>
 800aa16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa1a:	f1ca 0400 	rsb	r4, sl, #0
 800aa1e:	4b7d      	ldr	r3, [pc, #500]	; (800ac14 <_dtoa_r+0x5a4>)
 800aa20:	f004 020f 	and.w	r2, r4, #15
 800aa24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f5 fe7e 	bl	800072c <__aeabi_dmul>
 800aa30:	2702      	movs	r7, #2
 800aa32:	2300      	movs	r3, #0
 800aa34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa38:	4e77      	ldr	r6, [pc, #476]	; (800ac18 <_dtoa_r+0x5a8>)
 800aa3a:	1124      	asrs	r4, r4, #4
 800aa3c:	2c00      	cmp	r4, #0
 800aa3e:	f040 8084 	bne.w	800ab4a <_dtoa_r+0x4da>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1d2      	bne.n	800a9ec <_dtoa_r+0x37c>
 800aa46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 808b 	beq.w	800ab64 <_dtoa_r+0x4f4>
 800aa4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4b6f      	ldr	r3, [pc, #444]	; (800ac1c <_dtoa_r+0x5ac>)
 800aa5e:	f7f6 f8d7 	bl	8000c10 <__aeabi_dcmplt>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d07e      	beq.n	800ab64 <_dtoa_r+0x4f4>
 800aa66:	9b08      	ldr	r3, [sp, #32]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d07b      	beq.n	800ab64 <_dtoa_r+0x4f4>
 800aa6c:	f1b9 0f00 	cmp.w	r9, #0
 800aa70:	dd38      	ble.n	800aae4 <_dtoa_r+0x474>
 800aa72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa76:	2200      	movs	r2, #0
 800aa78:	4b69      	ldr	r3, [pc, #420]	; (800ac20 <_dtoa_r+0x5b0>)
 800aa7a:	f7f5 fe57 	bl	800072c <__aeabi_dmul>
 800aa7e:	464c      	mov	r4, r9
 800aa80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa84:	f10a 38ff 	add.w	r8, sl, #4294967295
 800aa88:	3701      	adds	r7, #1
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	f7f5 fde4 	bl	8000658 <__aeabi_i2d>
 800aa90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa94:	f7f5 fe4a 	bl	800072c <__aeabi_dmul>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4b62      	ldr	r3, [pc, #392]	; (800ac24 <_dtoa_r+0x5b4>)
 800aa9c:	f7f5 fc90 	bl	80003c0 <__adddf3>
 800aaa0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aaa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aaa8:	9611      	str	r6, [sp, #68]	; 0x44
 800aaaa:	2c00      	cmp	r4, #0
 800aaac:	d15d      	bne.n	800ab6a <_dtoa_r+0x4fa>
 800aaae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aab2:	2200      	movs	r2, #0
 800aab4:	4b5c      	ldr	r3, [pc, #368]	; (800ac28 <_dtoa_r+0x5b8>)
 800aab6:	f7f5 fc81 	bl	80003bc <__aeabi_dsub>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aac2:	4633      	mov	r3, r6
 800aac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aac6:	f7f6 f8c1 	bl	8000c4c <__aeabi_dcmpgt>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f040 829c 	bne.w	800b008 <_dtoa_r+0x998>
 800aad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aad6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aada:	f7f6 f899 	bl	8000c10 <__aeabi_dcmplt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f040 8290 	bne.w	800b004 <_dtoa_r+0x994>
 800aae4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aae8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aaec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f2c0 8152 	blt.w	800ad98 <_dtoa_r+0x728>
 800aaf4:	f1ba 0f0e 	cmp.w	sl, #14
 800aaf8:	f300 814e 	bgt.w	800ad98 <_dtoa_r+0x728>
 800aafc:	4b45      	ldr	r3, [pc, #276]	; (800ac14 <_dtoa_r+0x5a4>)
 800aafe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab06:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ab0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f280 80db 	bge.w	800acc8 <_dtoa_r+0x658>
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f300 80d7 	bgt.w	800acc8 <_dtoa_r+0x658>
 800ab1a:	f040 8272 	bne.w	800b002 <_dtoa_r+0x992>
 800ab1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab22:	2200      	movs	r2, #0
 800ab24:	4b40      	ldr	r3, [pc, #256]	; (800ac28 <_dtoa_r+0x5b8>)
 800ab26:	f7f5 fe01 	bl	800072c <__aeabi_dmul>
 800ab2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2e:	f7f6 f883 	bl	8000c38 <__aeabi_dcmpge>
 800ab32:	9c08      	ldr	r4, [sp, #32]
 800ab34:	4626      	mov	r6, r4
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f040 8248 	bne.w	800afcc <_dtoa_r+0x95c>
 800ab3c:	2331      	movs	r3, #49	; 0x31
 800ab3e:	9f03      	ldr	r7, [sp, #12]
 800ab40:	f10a 0a01 	add.w	sl, sl, #1
 800ab44:	f807 3b01 	strb.w	r3, [r7], #1
 800ab48:	e244      	b.n	800afd4 <_dtoa_r+0x964>
 800ab4a:	07e2      	lsls	r2, r4, #31
 800ab4c:	d505      	bpl.n	800ab5a <_dtoa_r+0x4ea>
 800ab4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab52:	f7f5 fdeb 	bl	800072c <__aeabi_dmul>
 800ab56:	2301      	movs	r3, #1
 800ab58:	3701      	adds	r7, #1
 800ab5a:	1064      	asrs	r4, r4, #1
 800ab5c:	3608      	adds	r6, #8
 800ab5e:	e76d      	b.n	800aa3c <_dtoa_r+0x3cc>
 800ab60:	2702      	movs	r7, #2
 800ab62:	e770      	b.n	800aa46 <_dtoa_r+0x3d6>
 800ab64:	46d0      	mov	r8, sl
 800ab66:	9c08      	ldr	r4, [sp, #32]
 800ab68:	e78f      	b.n	800aa8a <_dtoa_r+0x41a>
 800ab6a:	9903      	ldr	r1, [sp, #12]
 800ab6c:	4b29      	ldr	r3, [pc, #164]	; (800ac14 <_dtoa_r+0x5a4>)
 800ab6e:	4421      	add	r1, r4
 800ab70:	9112      	str	r1, [sp, #72]	; 0x48
 800ab72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab78:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab80:	2900      	cmp	r1, #0
 800ab82:	d055      	beq.n	800ac30 <_dtoa_r+0x5c0>
 800ab84:	2000      	movs	r0, #0
 800ab86:	4929      	ldr	r1, [pc, #164]	; (800ac2c <_dtoa_r+0x5bc>)
 800ab88:	f7f5 fefa 	bl	8000980 <__aeabi_ddiv>
 800ab8c:	463b      	mov	r3, r7
 800ab8e:	4632      	mov	r2, r6
 800ab90:	f7f5 fc14 	bl	80003bc <__aeabi_dsub>
 800ab94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab98:	9f03      	ldr	r7, [sp, #12]
 800ab9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab9e:	f7f6 f875 	bl	8000c8c <__aeabi_d2iz>
 800aba2:	4604      	mov	r4, r0
 800aba4:	f7f5 fd58 	bl	8000658 <__aeabi_i2d>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abb0:	f7f5 fc04 	bl	80003bc <__aeabi_dsub>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	3430      	adds	r4, #48	; 0x30
 800abba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abc2:	f807 4b01 	strb.w	r4, [r7], #1
 800abc6:	f7f6 f823 	bl	8000c10 <__aeabi_dcmplt>
 800abca:	2800      	cmp	r0, #0
 800abcc:	d174      	bne.n	800acb8 <_dtoa_r+0x648>
 800abce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd2:	2000      	movs	r0, #0
 800abd4:	4911      	ldr	r1, [pc, #68]	; (800ac1c <_dtoa_r+0x5ac>)
 800abd6:	f7f5 fbf1 	bl	80003bc <__aeabi_dsub>
 800abda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abde:	f7f6 f817 	bl	8000c10 <__aeabi_dcmplt>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f040 80b7 	bne.w	800ad56 <_dtoa_r+0x6e6>
 800abe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abea:	429f      	cmp	r7, r3
 800abec:	f43f af7a 	beq.w	800aae4 <_dtoa_r+0x474>
 800abf0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abf4:	2200      	movs	r2, #0
 800abf6:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <_dtoa_r+0x5b0>)
 800abf8:	f7f5 fd98 	bl	800072c <__aeabi_dmul>
 800abfc:	2200      	movs	r2, #0
 800abfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <_dtoa_r+0x5b0>)
 800ac08:	f7f5 fd90 	bl	800072c <__aeabi_dmul>
 800ac0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac10:	e7c3      	b.n	800ab9a <_dtoa_r+0x52a>
 800ac12:	bf00      	nop
 800ac14:	0800d680 	.word	0x0800d680
 800ac18:	0800d658 	.word	0x0800d658
 800ac1c:	3ff00000 	.word	0x3ff00000
 800ac20:	40240000 	.word	0x40240000
 800ac24:	401c0000 	.word	0x401c0000
 800ac28:	40140000 	.word	0x40140000
 800ac2c:	3fe00000 	.word	0x3fe00000
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fd7a 	bl	800072c <__aeabi_dmul>
 800ac38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac3e:	9c03      	ldr	r4, [sp, #12]
 800ac40:	9314      	str	r3, [sp, #80]	; 0x50
 800ac42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac46:	f7f6 f821 	bl	8000c8c <__aeabi_d2iz>
 800ac4a:	9015      	str	r0, [sp, #84]	; 0x54
 800ac4c:	f7f5 fd04 	bl	8000658 <__aeabi_i2d>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac58:	f7f5 fbb0 	bl	80003bc <__aeabi_dsub>
 800ac5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac5e:	4606      	mov	r6, r0
 800ac60:	3330      	adds	r3, #48	; 0x30
 800ac62:	f804 3b01 	strb.w	r3, [r4], #1
 800ac66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac68:	460f      	mov	r7, r1
 800ac6a:	429c      	cmp	r4, r3
 800ac6c:	f04f 0200 	mov.w	r2, #0
 800ac70:	d124      	bne.n	800acbc <_dtoa_r+0x64c>
 800ac72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac76:	4bb0      	ldr	r3, [pc, #704]	; (800af38 <_dtoa_r+0x8c8>)
 800ac78:	f7f5 fba2 	bl	80003c0 <__adddf3>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 ffe2 	bl	8000c4c <__aeabi_dcmpgt>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d163      	bne.n	800ad54 <_dtoa_r+0x6e4>
 800ac8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac90:	2000      	movs	r0, #0
 800ac92:	49a9      	ldr	r1, [pc, #676]	; (800af38 <_dtoa_r+0x8c8>)
 800ac94:	f7f5 fb92 	bl	80003bc <__aeabi_dsub>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	4639      	mov	r1, r7
 800aca0:	f7f5 ffb6 	bl	8000c10 <__aeabi_dcmplt>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f43f af1d 	beq.w	800aae4 <_dtoa_r+0x474>
 800acaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800acac:	1e7b      	subs	r3, r7, #1
 800acae:	9314      	str	r3, [sp, #80]	; 0x50
 800acb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800acb4:	2b30      	cmp	r3, #48	; 0x30
 800acb6:	d0f8      	beq.n	800acaa <_dtoa_r+0x63a>
 800acb8:	46c2      	mov	sl, r8
 800acba:	e03b      	b.n	800ad34 <_dtoa_r+0x6c4>
 800acbc:	4b9f      	ldr	r3, [pc, #636]	; (800af3c <_dtoa_r+0x8cc>)
 800acbe:	f7f5 fd35 	bl	800072c <__aeabi_dmul>
 800acc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acc6:	e7bc      	b.n	800ac42 <_dtoa_r+0x5d2>
 800acc8:	9f03      	ldr	r7, [sp, #12]
 800acca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800acce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acd2:	4640      	mov	r0, r8
 800acd4:	4649      	mov	r1, r9
 800acd6:	f7f5 fe53 	bl	8000980 <__aeabi_ddiv>
 800acda:	f7f5 ffd7 	bl	8000c8c <__aeabi_d2iz>
 800acde:	4604      	mov	r4, r0
 800ace0:	f7f5 fcba 	bl	8000658 <__aeabi_i2d>
 800ace4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace8:	f7f5 fd20 	bl	800072c <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4640      	mov	r0, r8
 800acf2:	4649      	mov	r1, r9
 800acf4:	f7f5 fb62 	bl	80003bc <__aeabi_dsub>
 800acf8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800acfc:	f807 6b01 	strb.w	r6, [r7], #1
 800ad00:	9e03      	ldr	r6, [sp, #12]
 800ad02:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ad06:	1bbe      	subs	r6, r7, r6
 800ad08:	45b4      	cmp	ip, r6
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	d136      	bne.n	800ad7e <_dtoa_r+0x70e>
 800ad10:	f7f5 fb56 	bl	80003c0 <__adddf3>
 800ad14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad18:	4680      	mov	r8, r0
 800ad1a:	4689      	mov	r9, r1
 800ad1c:	f7f5 ff96 	bl	8000c4c <__aeabi_dcmpgt>
 800ad20:	bb58      	cbnz	r0, 800ad7a <_dtoa_r+0x70a>
 800ad22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 ff67 	bl	8000bfc <__aeabi_dcmpeq>
 800ad2e:	b108      	cbz	r0, 800ad34 <_dtoa_r+0x6c4>
 800ad30:	07e1      	lsls	r1, r4, #31
 800ad32:	d422      	bmi.n	800ad7a <_dtoa_r+0x70a>
 800ad34:	4628      	mov	r0, r5
 800ad36:	4659      	mov	r1, fp
 800ad38:	f001 f888 	bl	800be4c <_Bfree>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	703b      	strb	r3, [r7, #0]
 800ad40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad42:	f10a 0001 	add.w	r0, sl, #1
 800ad46:	6018      	str	r0, [r3, #0]
 800ad48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f43f acde 	beq.w	800a70c <_dtoa_r+0x9c>
 800ad50:	601f      	str	r7, [r3, #0]
 800ad52:	e4db      	b.n	800a70c <_dtoa_r+0x9c>
 800ad54:	4627      	mov	r7, r4
 800ad56:	463b      	mov	r3, r7
 800ad58:	461f      	mov	r7, r3
 800ad5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad5e:	2a39      	cmp	r2, #57	; 0x39
 800ad60:	d107      	bne.n	800ad72 <_dtoa_r+0x702>
 800ad62:	9a03      	ldr	r2, [sp, #12]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d1f7      	bne.n	800ad58 <_dtoa_r+0x6e8>
 800ad68:	2230      	movs	r2, #48	; 0x30
 800ad6a:	9903      	ldr	r1, [sp, #12]
 800ad6c:	f108 0801 	add.w	r8, r8, #1
 800ad70:	700a      	strb	r2, [r1, #0]
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	3201      	adds	r2, #1
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	e79e      	b.n	800acb8 <_dtoa_r+0x648>
 800ad7a:	46d0      	mov	r8, sl
 800ad7c:	e7eb      	b.n	800ad56 <_dtoa_r+0x6e6>
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4b6e      	ldr	r3, [pc, #440]	; (800af3c <_dtoa_r+0x8cc>)
 800ad82:	f7f5 fcd3 	bl	800072c <__aeabi_dmul>
 800ad86:	2200      	movs	r2, #0
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	4689      	mov	r9, r1
 800ad8e:	f7f5 ff35 	bl	8000bfc <__aeabi_dcmpeq>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d09b      	beq.n	800acce <_dtoa_r+0x65e>
 800ad96:	e7cd      	b.n	800ad34 <_dtoa_r+0x6c4>
 800ad98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	f000 80d0 	beq.w	800af40 <_dtoa_r+0x8d0>
 800ada0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ada2:	2a01      	cmp	r2, #1
 800ada4:	f300 80ae 	bgt.w	800af04 <_dtoa_r+0x894>
 800ada8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adaa:	2a00      	cmp	r2, #0
 800adac:	f000 80a6 	beq.w	800aefc <_dtoa_r+0x88c>
 800adb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800adb6:	9f06      	ldr	r7, [sp, #24]
 800adb8:	9a06      	ldr	r2, [sp, #24]
 800adba:	2101      	movs	r1, #1
 800adbc:	441a      	add	r2, r3
 800adbe:	9206      	str	r2, [sp, #24]
 800adc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc2:	4628      	mov	r0, r5
 800adc4:	441a      	add	r2, r3
 800adc6:	9209      	str	r2, [sp, #36]	; 0x24
 800adc8:	f001 f940 	bl	800c04c <__i2b>
 800adcc:	4606      	mov	r6, r0
 800adce:	2f00      	cmp	r7, #0
 800add0:	dd0c      	ble.n	800adec <_dtoa_r+0x77c>
 800add2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	dd09      	ble.n	800adec <_dtoa_r+0x77c>
 800add8:	42bb      	cmp	r3, r7
 800adda:	bfa8      	it	ge
 800addc:	463b      	movge	r3, r7
 800adde:	9a06      	ldr	r2, [sp, #24]
 800ade0:	1aff      	subs	r7, r7, r3
 800ade2:	1ad2      	subs	r2, r2, r3
 800ade4:	9206      	str	r2, [sp, #24]
 800ade6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	9309      	str	r3, [sp, #36]	; 0x24
 800adec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adee:	b1f3      	cbz	r3, 800ae2e <_dtoa_r+0x7be>
 800adf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 80a8 	beq.w	800af48 <_dtoa_r+0x8d8>
 800adf8:	2c00      	cmp	r4, #0
 800adfa:	dd10      	ble.n	800ae1e <_dtoa_r+0x7ae>
 800adfc:	4631      	mov	r1, r6
 800adfe:	4622      	mov	r2, r4
 800ae00:	4628      	mov	r0, r5
 800ae02:	f001 f9e1 	bl	800c1c8 <__pow5mult>
 800ae06:	465a      	mov	r2, fp
 800ae08:	4601      	mov	r1, r0
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f001 f933 	bl	800c078 <__multiply>
 800ae12:	4680      	mov	r8, r0
 800ae14:	4659      	mov	r1, fp
 800ae16:	4628      	mov	r0, r5
 800ae18:	f001 f818 	bl	800be4c <_Bfree>
 800ae1c:	46c3      	mov	fp, r8
 800ae1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae20:	1b1a      	subs	r2, r3, r4
 800ae22:	d004      	beq.n	800ae2e <_dtoa_r+0x7be>
 800ae24:	4659      	mov	r1, fp
 800ae26:	4628      	mov	r0, r5
 800ae28:	f001 f9ce 	bl	800c1c8 <__pow5mult>
 800ae2c:	4683      	mov	fp, r0
 800ae2e:	2101      	movs	r1, #1
 800ae30:	4628      	mov	r0, r5
 800ae32:	f001 f90b 	bl	800c04c <__i2b>
 800ae36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae38:	4604      	mov	r4, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f340 8086 	ble.w	800af4c <_dtoa_r+0x8dc>
 800ae40:	461a      	mov	r2, r3
 800ae42:	4601      	mov	r1, r0
 800ae44:	4628      	mov	r0, r5
 800ae46:	f001 f9bf 	bl	800c1c8 <__pow5mult>
 800ae4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	dd7f      	ble.n	800af52 <_dtoa_r+0x8e2>
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae5c:	6918      	ldr	r0, [r3, #16]
 800ae5e:	f001 f8a7 	bl	800bfb0 <__hi0bits>
 800ae62:	f1c0 0020 	rsb	r0, r0, #32
 800ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae68:	4418      	add	r0, r3
 800ae6a:	f010 001f 	ands.w	r0, r0, #31
 800ae6e:	f000 8092 	beq.w	800af96 <_dtoa_r+0x926>
 800ae72:	f1c0 0320 	rsb	r3, r0, #32
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	f340 808a 	ble.w	800af90 <_dtoa_r+0x920>
 800ae7c:	f1c0 001c 	rsb	r0, r0, #28
 800ae80:	9b06      	ldr	r3, [sp, #24]
 800ae82:	4407      	add	r7, r0
 800ae84:	4403      	add	r3, r0
 800ae86:	9306      	str	r3, [sp, #24]
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	4403      	add	r3, r0
 800ae8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8e:	9b06      	ldr	r3, [sp, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dd05      	ble.n	800aea0 <_dtoa_r+0x830>
 800ae94:	4659      	mov	r1, fp
 800ae96:	461a      	mov	r2, r3
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f001 f9ef 	bl	800c27c <__lshift>
 800ae9e:	4683      	mov	fp, r0
 800aea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dd05      	ble.n	800aeb2 <_dtoa_r+0x842>
 800aea6:	4621      	mov	r1, r4
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f001 f9e6 	bl	800c27c <__lshift>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d070      	beq.n	800af9a <_dtoa_r+0x92a>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4658      	mov	r0, fp
 800aebc:	f001 fa4e 	bl	800c35c <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	da6a      	bge.n	800af9a <_dtoa_r+0x92a>
 800aec4:	2300      	movs	r3, #0
 800aec6:	4659      	mov	r1, fp
 800aec8:	220a      	movs	r2, #10
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 ffe0 	bl	800be90 <__multadd>
 800aed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aed2:	4683      	mov	fp, r0
 800aed4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 8194 	beq.w	800b206 <_dtoa_r+0xb96>
 800aede:	4631      	mov	r1, r6
 800aee0:	2300      	movs	r3, #0
 800aee2:	220a      	movs	r2, #10
 800aee4:	4628      	mov	r0, r5
 800aee6:	f000 ffd3 	bl	800be90 <__multadd>
 800aeea:	f1b9 0f00 	cmp.w	r9, #0
 800aeee:	4606      	mov	r6, r0
 800aef0:	f300 8093 	bgt.w	800b01a <_dtoa_r+0x9aa>
 800aef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	dc57      	bgt.n	800afaa <_dtoa_r+0x93a>
 800aefa:	e08e      	b.n	800b01a <_dtoa_r+0x9aa>
 800aefc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aefe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af02:	e757      	b.n	800adb4 <_dtoa_r+0x744>
 800af04:	9b08      	ldr	r3, [sp, #32]
 800af06:	1e5c      	subs	r4, r3, #1
 800af08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	bfb7      	itett	lt
 800af0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af10:	1b1c      	subge	r4, r3, r4
 800af12:	1ae2      	sublt	r2, r4, r3
 800af14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800af16:	bfbe      	ittt	lt
 800af18:	940a      	strlt	r4, [sp, #40]	; 0x28
 800af1a:	189b      	addlt	r3, r3, r2
 800af1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800af1e:	9b08      	ldr	r3, [sp, #32]
 800af20:	bfb8      	it	lt
 800af22:	2400      	movlt	r4, #0
 800af24:	2b00      	cmp	r3, #0
 800af26:	bfbb      	ittet	lt
 800af28:	9b06      	ldrlt	r3, [sp, #24]
 800af2a:	9a08      	ldrlt	r2, [sp, #32]
 800af2c:	9f06      	ldrge	r7, [sp, #24]
 800af2e:	1a9f      	sublt	r7, r3, r2
 800af30:	bfac      	ite	ge
 800af32:	9b08      	ldrge	r3, [sp, #32]
 800af34:	2300      	movlt	r3, #0
 800af36:	e73f      	b.n	800adb8 <_dtoa_r+0x748>
 800af38:	3fe00000 	.word	0x3fe00000
 800af3c:	40240000 	.word	0x40240000
 800af40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af42:	9f06      	ldr	r7, [sp, #24]
 800af44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800af46:	e742      	b.n	800adce <_dtoa_r+0x75e>
 800af48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af4a:	e76b      	b.n	800ae24 <_dtoa_r+0x7b4>
 800af4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af4e:	2b01      	cmp	r3, #1
 800af50:	dc19      	bgt.n	800af86 <_dtoa_r+0x916>
 800af52:	9b04      	ldr	r3, [sp, #16]
 800af54:	b9bb      	cbnz	r3, 800af86 <_dtoa_r+0x916>
 800af56:	9b05      	ldr	r3, [sp, #20]
 800af58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af5c:	b99b      	cbnz	r3, 800af86 <_dtoa_r+0x916>
 800af5e:	9b05      	ldr	r3, [sp, #20]
 800af60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af64:	0d1b      	lsrs	r3, r3, #20
 800af66:	051b      	lsls	r3, r3, #20
 800af68:	b183      	cbz	r3, 800af8c <_dtoa_r+0x91c>
 800af6a:	f04f 0801 	mov.w	r8, #1
 800af6e:	9b06      	ldr	r3, [sp, #24]
 800af70:	3301      	adds	r3, #1
 800af72:	9306      	str	r3, [sp, #24]
 800af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af76:	3301      	adds	r3, #1
 800af78:	9309      	str	r3, [sp, #36]	; 0x24
 800af7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f47f af6a 	bne.w	800ae56 <_dtoa_r+0x7e6>
 800af82:	2001      	movs	r0, #1
 800af84:	e76f      	b.n	800ae66 <_dtoa_r+0x7f6>
 800af86:	f04f 0800 	mov.w	r8, #0
 800af8a:	e7f6      	b.n	800af7a <_dtoa_r+0x90a>
 800af8c:	4698      	mov	r8, r3
 800af8e:	e7f4      	b.n	800af7a <_dtoa_r+0x90a>
 800af90:	f43f af7d 	beq.w	800ae8e <_dtoa_r+0x81e>
 800af94:	4618      	mov	r0, r3
 800af96:	301c      	adds	r0, #28
 800af98:	e772      	b.n	800ae80 <_dtoa_r+0x810>
 800af9a:	9b08      	ldr	r3, [sp, #32]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dc36      	bgt.n	800b00e <_dtoa_r+0x99e>
 800afa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dd33      	ble.n	800b00e <_dtoa_r+0x99e>
 800afa6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afaa:	f1b9 0f00 	cmp.w	r9, #0
 800afae:	d10d      	bne.n	800afcc <_dtoa_r+0x95c>
 800afb0:	4621      	mov	r1, r4
 800afb2:	464b      	mov	r3, r9
 800afb4:	2205      	movs	r2, #5
 800afb6:	4628      	mov	r0, r5
 800afb8:	f000 ff6a 	bl	800be90 <__multadd>
 800afbc:	4601      	mov	r1, r0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4658      	mov	r0, fp
 800afc2:	f001 f9cb 	bl	800c35c <__mcmp>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f73f adb8 	bgt.w	800ab3c <_dtoa_r+0x4cc>
 800afcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afce:	9f03      	ldr	r7, [sp, #12]
 800afd0:	ea6f 0a03 	mvn.w	sl, r3
 800afd4:	f04f 0800 	mov.w	r8, #0
 800afd8:	4621      	mov	r1, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 ff36 	bl	800be4c <_Bfree>
 800afe0:	2e00      	cmp	r6, #0
 800afe2:	f43f aea7 	beq.w	800ad34 <_dtoa_r+0x6c4>
 800afe6:	f1b8 0f00 	cmp.w	r8, #0
 800afea:	d005      	beq.n	800aff8 <_dtoa_r+0x988>
 800afec:	45b0      	cmp	r8, r6
 800afee:	d003      	beq.n	800aff8 <_dtoa_r+0x988>
 800aff0:	4641      	mov	r1, r8
 800aff2:	4628      	mov	r0, r5
 800aff4:	f000 ff2a 	bl	800be4c <_Bfree>
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	f000 ff26 	bl	800be4c <_Bfree>
 800b000:	e698      	b.n	800ad34 <_dtoa_r+0x6c4>
 800b002:	2400      	movs	r4, #0
 800b004:	4626      	mov	r6, r4
 800b006:	e7e1      	b.n	800afcc <_dtoa_r+0x95c>
 800b008:	46c2      	mov	sl, r8
 800b00a:	4626      	mov	r6, r4
 800b00c:	e596      	b.n	800ab3c <_dtoa_r+0x4cc>
 800b00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 80fd 	beq.w	800b214 <_dtoa_r+0xba4>
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	dd05      	ble.n	800b02a <_dtoa_r+0x9ba>
 800b01e:	4631      	mov	r1, r6
 800b020:	463a      	mov	r2, r7
 800b022:	4628      	mov	r0, r5
 800b024:	f001 f92a 	bl	800c27c <__lshift>
 800b028:	4606      	mov	r6, r0
 800b02a:	f1b8 0f00 	cmp.w	r8, #0
 800b02e:	d05c      	beq.n	800b0ea <_dtoa_r+0xa7a>
 800b030:	4628      	mov	r0, r5
 800b032:	6871      	ldr	r1, [r6, #4]
 800b034:	f000 feca 	bl	800bdcc <_Balloc>
 800b038:	4607      	mov	r7, r0
 800b03a:	b928      	cbnz	r0, 800b048 <_dtoa_r+0x9d8>
 800b03c:	4602      	mov	r2, r0
 800b03e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b042:	4b7f      	ldr	r3, [pc, #508]	; (800b240 <_dtoa_r+0xbd0>)
 800b044:	f7ff bb28 	b.w	800a698 <_dtoa_r+0x28>
 800b048:	6932      	ldr	r2, [r6, #16]
 800b04a:	f106 010c 	add.w	r1, r6, #12
 800b04e:	3202      	adds	r2, #2
 800b050:	0092      	lsls	r2, r2, #2
 800b052:	300c      	adds	r0, #12
 800b054:	f7fd fc04 	bl	8008860 <memcpy>
 800b058:	2201      	movs	r2, #1
 800b05a:	4639      	mov	r1, r7
 800b05c:	4628      	mov	r0, r5
 800b05e:	f001 f90d 	bl	800c27c <__lshift>
 800b062:	46b0      	mov	r8, r6
 800b064:	4606      	mov	r6, r0
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	3301      	adds	r3, #1
 800b06a:	9308      	str	r3, [sp, #32]
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	444b      	add	r3, r9
 800b070:	930a      	str	r3, [sp, #40]	; 0x28
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	9309      	str	r3, [sp, #36]	; 0x24
 800b07a:	9b08      	ldr	r3, [sp, #32]
 800b07c:	4621      	mov	r1, r4
 800b07e:	3b01      	subs	r3, #1
 800b080:	4658      	mov	r0, fp
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	f7ff fa68 	bl	800a558 <quorem>
 800b088:	4603      	mov	r3, r0
 800b08a:	4641      	mov	r1, r8
 800b08c:	3330      	adds	r3, #48	; 0x30
 800b08e:	9006      	str	r0, [sp, #24]
 800b090:	4658      	mov	r0, fp
 800b092:	930b      	str	r3, [sp, #44]	; 0x2c
 800b094:	f001 f962 	bl	800c35c <__mcmp>
 800b098:	4632      	mov	r2, r6
 800b09a:	4681      	mov	r9, r0
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f001 f978 	bl	800c394 <__mdiff>
 800b0a4:	68c2      	ldr	r2, [r0, #12]
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0aa:	bb02      	cbnz	r2, 800b0ee <_dtoa_r+0xa7e>
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	4658      	mov	r0, fp
 800b0b0:	f001 f954 	bl	800c35c <__mcmp>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b0c0:	f000 fec4 	bl	800be4c <_Bfree>
 800b0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0c8:	9f08      	ldr	r7, [sp, #32]
 800b0ca:	ea43 0102 	orr.w	r1, r3, r2
 800b0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d4:	d10d      	bne.n	800b0f2 <_dtoa_r+0xa82>
 800b0d6:	2b39      	cmp	r3, #57	; 0x39
 800b0d8:	d029      	beq.n	800b12e <_dtoa_r+0xabe>
 800b0da:	f1b9 0f00 	cmp.w	r9, #0
 800b0de:	dd01      	ble.n	800b0e4 <_dtoa_r+0xa74>
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	3331      	adds	r3, #49	; 0x31
 800b0e4:	9a04      	ldr	r2, [sp, #16]
 800b0e6:	7013      	strb	r3, [r2, #0]
 800b0e8:	e776      	b.n	800afd8 <_dtoa_r+0x968>
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	e7b9      	b.n	800b062 <_dtoa_r+0x9f2>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	e7e2      	b.n	800b0b8 <_dtoa_r+0xa48>
 800b0f2:	f1b9 0f00 	cmp.w	r9, #0
 800b0f6:	db06      	blt.n	800b106 <_dtoa_r+0xa96>
 800b0f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b0fa:	ea41 0909 	orr.w	r9, r1, r9
 800b0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b100:	ea59 0101 	orrs.w	r1, r9, r1
 800b104:	d120      	bne.n	800b148 <_dtoa_r+0xad8>
 800b106:	2a00      	cmp	r2, #0
 800b108:	ddec      	ble.n	800b0e4 <_dtoa_r+0xa74>
 800b10a:	4659      	mov	r1, fp
 800b10c:	2201      	movs	r2, #1
 800b10e:	4628      	mov	r0, r5
 800b110:	9308      	str	r3, [sp, #32]
 800b112:	f001 f8b3 	bl	800c27c <__lshift>
 800b116:	4621      	mov	r1, r4
 800b118:	4683      	mov	fp, r0
 800b11a:	f001 f91f 	bl	800c35c <__mcmp>
 800b11e:	2800      	cmp	r0, #0
 800b120:	9b08      	ldr	r3, [sp, #32]
 800b122:	dc02      	bgt.n	800b12a <_dtoa_r+0xaba>
 800b124:	d1de      	bne.n	800b0e4 <_dtoa_r+0xa74>
 800b126:	07da      	lsls	r2, r3, #31
 800b128:	d5dc      	bpl.n	800b0e4 <_dtoa_r+0xa74>
 800b12a:	2b39      	cmp	r3, #57	; 0x39
 800b12c:	d1d8      	bne.n	800b0e0 <_dtoa_r+0xa70>
 800b12e:	2339      	movs	r3, #57	; 0x39
 800b130:	9a04      	ldr	r2, [sp, #16]
 800b132:	7013      	strb	r3, [r2, #0]
 800b134:	463b      	mov	r3, r7
 800b136:	461f      	mov	r7, r3
 800b138:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	2a39      	cmp	r2, #57	; 0x39
 800b140:	d050      	beq.n	800b1e4 <_dtoa_r+0xb74>
 800b142:	3201      	adds	r2, #1
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e747      	b.n	800afd8 <_dtoa_r+0x968>
 800b148:	2a00      	cmp	r2, #0
 800b14a:	dd03      	ble.n	800b154 <_dtoa_r+0xae4>
 800b14c:	2b39      	cmp	r3, #57	; 0x39
 800b14e:	d0ee      	beq.n	800b12e <_dtoa_r+0xabe>
 800b150:	3301      	adds	r3, #1
 800b152:	e7c7      	b.n	800b0e4 <_dtoa_r+0xa74>
 800b154:	9a08      	ldr	r2, [sp, #32]
 800b156:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b158:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b15c:	428a      	cmp	r2, r1
 800b15e:	d02a      	beq.n	800b1b6 <_dtoa_r+0xb46>
 800b160:	4659      	mov	r1, fp
 800b162:	2300      	movs	r3, #0
 800b164:	220a      	movs	r2, #10
 800b166:	4628      	mov	r0, r5
 800b168:	f000 fe92 	bl	800be90 <__multadd>
 800b16c:	45b0      	cmp	r8, r6
 800b16e:	4683      	mov	fp, r0
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	f04f 020a 	mov.w	r2, #10
 800b178:	4641      	mov	r1, r8
 800b17a:	4628      	mov	r0, r5
 800b17c:	d107      	bne.n	800b18e <_dtoa_r+0xb1e>
 800b17e:	f000 fe87 	bl	800be90 <__multadd>
 800b182:	4680      	mov	r8, r0
 800b184:	4606      	mov	r6, r0
 800b186:	9b08      	ldr	r3, [sp, #32]
 800b188:	3301      	adds	r3, #1
 800b18a:	9308      	str	r3, [sp, #32]
 800b18c:	e775      	b.n	800b07a <_dtoa_r+0xa0a>
 800b18e:	f000 fe7f 	bl	800be90 <__multadd>
 800b192:	4631      	mov	r1, r6
 800b194:	4680      	mov	r8, r0
 800b196:	2300      	movs	r3, #0
 800b198:	220a      	movs	r2, #10
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 fe78 	bl	800be90 <__multadd>
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	e7f0      	b.n	800b186 <_dtoa_r+0xb16>
 800b1a4:	f1b9 0f00 	cmp.w	r9, #0
 800b1a8:	bfcc      	ite	gt
 800b1aa:	464f      	movgt	r7, r9
 800b1ac:	2701      	movle	r7, #1
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	9a03      	ldr	r2, [sp, #12]
 800b1b4:	4417      	add	r7, r2
 800b1b6:	4659      	mov	r1, fp
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	9308      	str	r3, [sp, #32]
 800b1be:	f001 f85d 	bl	800c27c <__lshift>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4683      	mov	fp, r0
 800b1c6:	f001 f8c9 	bl	800c35c <__mcmp>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	dcb2      	bgt.n	800b134 <_dtoa_r+0xac4>
 800b1ce:	d102      	bne.n	800b1d6 <_dtoa_r+0xb66>
 800b1d0:	9b08      	ldr	r3, [sp, #32]
 800b1d2:	07db      	lsls	r3, r3, #31
 800b1d4:	d4ae      	bmi.n	800b134 <_dtoa_r+0xac4>
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	461f      	mov	r7, r3
 800b1da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1de:	2a30      	cmp	r2, #48	; 0x30
 800b1e0:	d0fa      	beq.n	800b1d8 <_dtoa_r+0xb68>
 800b1e2:	e6f9      	b.n	800afd8 <_dtoa_r+0x968>
 800b1e4:	9a03      	ldr	r2, [sp, #12]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d1a5      	bne.n	800b136 <_dtoa_r+0xac6>
 800b1ea:	2331      	movs	r3, #49	; 0x31
 800b1ec:	f10a 0a01 	add.w	sl, sl, #1
 800b1f0:	e779      	b.n	800b0e6 <_dtoa_r+0xa76>
 800b1f2:	4b14      	ldr	r3, [pc, #80]	; (800b244 <_dtoa_r+0xbd4>)
 800b1f4:	f7ff baa8 	b.w	800a748 <_dtoa_r+0xd8>
 800b1f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f47f aa81 	bne.w	800a702 <_dtoa_r+0x92>
 800b200:	4b11      	ldr	r3, [pc, #68]	; (800b248 <_dtoa_r+0xbd8>)
 800b202:	f7ff baa1 	b.w	800a748 <_dtoa_r+0xd8>
 800b206:	f1b9 0f00 	cmp.w	r9, #0
 800b20a:	dc03      	bgt.n	800b214 <_dtoa_r+0xba4>
 800b20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b20e:	2b02      	cmp	r3, #2
 800b210:	f73f aecb 	bgt.w	800afaa <_dtoa_r+0x93a>
 800b214:	9f03      	ldr	r7, [sp, #12]
 800b216:	4621      	mov	r1, r4
 800b218:	4658      	mov	r0, fp
 800b21a:	f7ff f99d 	bl	800a558 <quorem>
 800b21e:	9a03      	ldr	r2, [sp, #12]
 800b220:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b224:	f807 3b01 	strb.w	r3, [r7], #1
 800b228:	1aba      	subs	r2, r7, r2
 800b22a:	4591      	cmp	r9, r2
 800b22c:	ddba      	ble.n	800b1a4 <_dtoa_r+0xb34>
 800b22e:	4659      	mov	r1, fp
 800b230:	2300      	movs	r3, #0
 800b232:	220a      	movs	r2, #10
 800b234:	4628      	mov	r0, r5
 800b236:	f000 fe2b 	bl	800be90 <__multadd>
 800b23a:	4683      	mov	fp, r0
 800b23c:	e7eb      	b.n	800b216 <_dtoa_r+0xba6>
 800b23e:	bf00      	nop
 800b240:	0800d509 	.word	0x0800d509
 800b244:	0800d270 	.word	0x0800d270
 800b248:	0800d4a1 	.word	0x0800d4a1

0800b24c <__sflush_r>:
 800b24c:	898a      	ldrh	r2, [r1, #12]
 800b24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b250:	4605      	mov	r5, r0
 800b252:	0710      	lsls	r0, r2, #28
 800b254:	460c      	mov	r4, r1
 800b256:	d457      	bmi.n	800b308 <__sflush_r+0xbc>
 800b258:	684b      	ldr	r3, [r1, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dc04      	bgt.n	800b268 <__sflush_r+0x1c>
 800b25e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc01      	bgt.n	800b268 <__sflush_r+0x1c>
 800b264:	2000      	movs	r0, #0
 800b266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b26a:	2e00      	cmp	r6, #0
 800b26c:	d0fa      	beq.n	800b264 <__sflush_r+0x18>
 800b26e:	2300      	movs	r3, #0
 800b270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b274:	682f      	ldr	r7, [r5, #0]
 800b276:	602b      	str	r3, [r5, #0]
 800b278:	d032      	beq.n	800b2e0 <__sflush_r+0x94>
 800b27a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	075a      	lsls	r2, r3, #29
 800b280:	d505      	bpl.n	800b28e <__sflush_r+0x42>
 800b282:	6863      	ldr	r3, [r4, #4]
 800b284:	1ac0      	subs	r0, r0, r3
 800b286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b288:	b10b      	cbz	r3, 800b28e <__sflush_r+0x42>
 800b28a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b28c:	1ac0      	subs	r0, r0, r3
 800b28e:	2300      	movs	r3, #0
 800b290:	4602      	mov	r2, r0
 800b292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b294:	4628      	mov	r0, r5
 800b296:	6a21      	ldr	r1, [r4, #32]
 800b298:	47b0      	blx	r6
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	d106      	bne.n	800b2ae <__sflush_r+0x62>
 800b2a0:	6829      	ldr	r1, [r5, #0]
 800b2a2:	291d      	cmp	r1, #29
 800b2a4:	d82c      	bhi.n	800b300 <__sflush_r+0xb4>
 800b2a6:	4a29      	ldr	r2, [pc, #164]	; (800b34c <__sflush_r+0x100>)
 800b2a8:	40ca      	lsrs	r2, r1
 800b2aa:	07d6      	lsls	r6, r2, #31
 800b2ac:	d528      	bpl.n	800b300 <__sflush_r+0xb4>
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	6062      	str	r2, [r4, #4]
 800b2b2:	6922      	ldr	r2, [r4, #16]
 800b2b4:	04d9      	lsls	r1, r3, #19
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	d504      	bpl.n	800b2c4 <__sflush_r+0x78>
 800b2ba:	1c42      	adds	r2, r0, #1
 800b2bc:	d101      	bne.n	800b2c2 <__sflush_r+0x76>
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	b903      	cbnz	r3, 800b2c4 <__sflush_r+0x78>
 800b2c2:	6560      	str	r0, [r4, #84]	; 0x54
 800b2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2c6:	602f      	str	r7, [r5, #0]
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	d0cb      	beq.n	800b264 <__sflush_r+0x18>
 800b2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2d0:	4299      	cmp	r1, r3
 800b2d2:	d002      	beq.n	800b2da <__sflush_r+0x8e>
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f001 fa45 	bl	800c764 <_free_r>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b2de:	e7c2      	b.n	800b266 <__sflush_r+0x1a>
 800b2e0:	6a21      	ldr	r1, [r4, #32]
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b0      	blx	r6
 800b2e8:	1c41      	adds	r1, r0, #1
 800b2ea:	d1c7      	bne.n	800b27c <__sflush_r+0x30>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0c4      	beq.n	800b27c <__sflush_r+0x30>
 800b2f2:	2b1d      	cmp	r3, #29
 800b2f4:	d001      	beq.n	800b2fa <__sflush_r+0xae>
 800b2f6:	2b16      	cmp	r3, #22
 800b2f8:	d101      	bne.n	800b2fe <__sflush_r+0xb2>
 800b2fa:	602f      	str	r7, [r5, #0]
 800b2fc:	e7b2      	b.n	800b264 <__sflush_r+0x18>
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b304:	81a3      	strh	r3, [r4, #12]
 800b306:	e7ae      	b.n	800b266 <__sflush_r+0x1a>
 800b308:	690f      	ldr	r7, [r1, #16]
 800b30a:	2f00      	cmp	r7, #0
 800b30c:	d0aa      	beq.n	800b264 <__sflush_r+0x18>
 800b30e:	0793      	lsls	r3, r2, #30
 800b310:	bf18      	it	ne
 800b312:	2300      	movne	r3, #0
 800b314:	680e      	ldr	r6, [r1, #0]
 800b316:	bf08      	it	eq
 800b318:	694b      	ldreq	r3, [r1, #20]
 800b31a:	1bf6      	subs	r6, r6, r7
 800b31c:	600f      	str	r7, [r1, #0]
 800b31e:	608b      	str	r3, [r1, #8]
 800b320:	2e00      	cmp	r6, #0
 800b322:	dd9f      	ble.n	800b264 <__sflush_r+0x18>
 800b324:	4633      	mov	r3, r6
 800b326:	463a      	mov	r2, r7
 800b328:	4628      	mov	r0, r5
 800b32a:	6a21      	ldr	r1, [r4, #32]
 800b32c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b330:	47e0      	blx	ip
 800b332:	2800      	cmp	r0, #0
 800b334:	dc06      	bgt.n	800b344 <__sflush_r+0xf8>
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b340:	81a3      	strh	r3, [r4, #12]
 800b342:	e790      	b.n	800b266 <__sflush_r+0x1a>
 800b344:	4407      	add	r7, r0
 800b346:	1a36      	subs	r6, r6, r0
 800b348:	e7ea      	b.n	800b320 <__sflush_r+0xd4>
 800b34a:	bf00      	nop
 800b34c:	20400001 	.word	0x20400001

0800b350 <_fflush_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	690b      	ldr	r3, [r1, #16]
 800b354:	4605      	mov	r5, r0
 800b356:	460c      	mov	r4, r1
 800b358:	b913      	cbnz	r3, 800b360 <_fflush_r+0x10>
 800b35a:	2500      	movs	r5, #0
 800b35c:	4628      	mov	r0, r5
 800b35e:	bd38      	pop	{r3, r4, r5, pc}
 800b360:	b118      	cbz	r0, 800b36a <_fflush_r+0x1a>
 800b362:	6983      	ldr	r3, [r0, #24]
 800b364:	b90b      	cbnz	r3, 800b36a <_fflush_r+0x1a>
 800b366:	f000 f887 	bl	800b478 <__sinit>
 800b36a:	4b14      	ldr	r3, [pc, #80]	; (800b3bc <_fflush_r+0x6c>)
 800b36c:	429c      	cmp	r4, r3
 800b36e:	d11b      	bne.n	800b3a8 <_fflush_r+0x58>
 800b370:	686c      	ldr	r4, [r5, #4]
 800b372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0ef      	beq.n	800b35a <_fflush_r+0xa>
 800b37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b37c:	07d0      	lsls	r0, r2, #31
 800b37e:	d404      	bmi.n	800b38a <_fflush_r+0x3a>
 800b380:	0599      	lsls	r1, r3, #22
 800b382:	d402      	bmi.n	800b38a <_fflush_r+0x3a>
 800b384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b386:	f000 fc92 	bl	800bcae <__retarget_lock_acquire_recursive>
 800b38a:	4628      	mov	r0, r5
 800b38c:	4621      	mov	r1, r4
 800b38e:	f7ff ff5d 	bl	800b24c <__sflush_r>
 800b392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b394:	4605      	mov	r5, r0
 800b396:	07da      	lsls	r2, r3, #31
 800b398:	d4e0      	bmi.n	800b35c <_fflush_r+0xc>
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	059b      	lsls	r3, r3, #22
 800b39e:	d4dd      	bmi.n	800b35c <_fflush_r+0xc>
 800b3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3a2:	f000 fc85 	bl	800bcb0 <__retarget_lock_release_recursive>
 800b3a6:	e7d9      	b.n	800b35c <_fflush_r+0xc>
 800b3a8:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <_fflush_r+0x70>)
 800b3aa:	429c      	cmp	r4, r3
 800b3ac:	d101      	bne.n	800b3b2 <_fflush_r+0x62>
 800b3ae:	68ac      	ldr	r4, [r5, #8]
 800b3b0:	e7df      	b.n	800b372 <_fflush_r+0x22>
 800b3b2:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <_fflush_r+0x74>)
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	bf08      	it	eq
 800b3b8:	68ec      	ldreq	r4, [r5, #12]
 800b3ba:	e7da      	b.n	800b372 <_fflush_r+0x22>
 800b3bc:	0800d53c 	.word	0x0800d53c
 800b3c0:	0800d55c 	.word	0x0800d55c
 800b3c4:	0800d51c 	.word	0x0800d51c

0800b3c8 <std>:
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3d6:	6083      	str	r3, [r0, #8]
 800b3d8:	8181      	strh	r1, [r0, #12]
 800b3da:	6643      	str	r3, [r0, #100]	; 0x64
 800b3dc:	81c2      	strh	r2, [r0, #14]
 800b3de:	6183      	str	r3, [r0, #24]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	2208      	movs	r2, #8
 800b3e4:	305c      	adds	r0, #92	; 0x5c
 800b3e6:	f7fd fa49 	bl	800887c <memset>
 800b3ea:	4b05      	ldr	r3, [pc, #20]	; (800b400 <std+0x38>)
 800b3ec:	6224      	str	r4, [r4, #32]
 800b3ee:	6263      	str	r3, [r4, #36]	; 0x24
 800b3f0:	4b04      	ldr	r3, [pc, #16]	; (800b404 <std+0x3c>)
 800b3f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <std+0x40>)
 800b3f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3f8:	4b04      	ldr	r3, [pc, #16]	; (800b40c <std+0x44>)
 800b3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	0800ceb1 	.word	0x0800ceb1
 800b404:	0800ced3 	.word	0x0800ced3
 800b408:	0800cf0b 	.word	0x0800cf0b
 800b40c:	0800cf2f 	.word	0x0800cf2f

0800b410 <_cleanup_r>:
 800b410:	4901      	ldr	r1, [pc, #4]	; (800b418 <_cleanup_r+0x8>)
 800b412:	f000 b8c1 	b.w	800b598 <_fwalk_reent>
 800b416:	bf00      	nop
 800b418:	0800b351 	.word	0x0800b351

0800b41c <__sfmoreglue>:
 800b41c:	2268      	movs	r2, #104	; 0x68
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	1e4d      	subs	r5, r1, #1
 800b422:	4355      	muls	r5, r2
 800b424:	460e      	mov	r6, r1
 800b426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b42a:	f001 fa03 	bl	800c834 <_malloc_r>
 800b42e:	4604      	mov	r4, r0
 800b430:	b140      	cbz	r0, 800b444 <__sfmoreglue+0x28>
 800b432:	2100      	movs	r1, #0
 800b434:	e9c0 1600 	strd	r1, r6, [r0]
 800b438:	300c      	adds	r0, #12
 800b43a:	60a0      	str	r0, [r4, #8]
 800b43c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b440:	f7fd fa1c 	bl	800887c <memset>
 800b444:	4620      	mov	r0, r4
 800b446:	bd70      	pop	{r4, r5, r6, pc}

0800b448 <__sfp_lock_acquire>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__sfp_lock_acquire+0x8>)
 800b44a:	f000 bc30 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	20000c79 	.word	0x20000c79

0800b454 <__sfp_lock_release>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__sfp_lock_release+0x8>)
 800b456:	f000 bc2b 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	20000c79 	.word	0x20000c79

0800b460 <__sinit_lock_acquire>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__sinit_lock_acquire+0x8>)
 800b462:	f000 bc24 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800b466:	bf00      	nop
 800b468:	20000c7a 	.word	0x20000c7a

0800b46c <__sinit_lock_release>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__sinit_lock_release+0x8>)
 800b46e:	f000 bc1f 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800b472:	bf00      	nop
 800b474:	20000c7a 	.word	0x20000c7a

0800b478 <__sinit>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	4604      	mov	r4, r0
 800b47c:	f7ff fff0 	bl	800b460 <__sinit_lock_acquire>
 800b480:	69a3      	ldr	r3, [r4, #24]
 800b482:	b11b      	cbz	r3, 800b48c <__sinit+0x14>
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	f7ff bff0 	b.w	800b46c <__sinit_lock_release>
 800b48c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b490:	6523      	str	r3, [r4, #80]	; 0x50
 800b492:	4b13      	ldr	r3, [pc, #76]	; (800b4e0 <__sinit+0x68>)
 800b494:	4a13      	ldr	r2, [pc, #76]	; (800b4e4 <__sinit+0x6c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	62a2      	str	r2, [r4, #40]	; 0x28
 800b49a:	42a3      	cmp	r3, r4
 800b49c:	bf08      	it	eq
 800b49e:	2301      	moveq	r3, #1
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	bf08      	it	eq
 800b4a4:	61a3      	streq	r3, [r4, #24]
 800b4a6:	f000 f81f 	bl	800b4e8 <__sfp>
 800b4aa:	6060      	str	r0, [r4, #4]
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 f81b 	bl	800b4e8 <__sfp>
 800b4b2:	60a0      	str	r0, [r4, #8]
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 f817 	bl	800b4e8 <__sfp>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2104      	movs	r1, #4
 800b4be:	60e0      	str	r0, [r4, #12]
 800b4c0:	6860      	ldr	r0, [r4, #4]
 800b4c2:	f7ff ff81 	bl	800b3c8 <std>
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	2109      	movs	r1, #9
 800b4ca:	68a0      	ldr	r0, [r4, #8]
 800b4cc:	f7ff ff7c 	bl	800b3c8 <std>
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	2112      	movs	r1, #18
 800b4d4:	68e0      	ldr	r0, [r4, #12]
 800b4d6:	f7ff ff77 	bl	800b3c8 <std>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	61a3      	str	r3, [r4, #24]
 800b4de:	e7d1      	b.n	800b484 <__sinit+0xc>
 800b4e0:	0800d25c 	.word	0x0800d25c
 800b4e4:	0800b411 	.word	0x0800b411

0800b4e8 <__sfp>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	f7ff ffac 	bl	800b448 <__sfp_lock_acquire>
 800b4f0:	4b1e      	ldr	r3, [pc, #120]	; (800b56c <__sfp+0x84>)
 800b4f2:	681e      	ldr	r6, [r3, #0]
 800b4f4:	69b3      	ldr	r3, [r6, #24]
 800b4f6:	b913      	cbnz	r3, 800b4fe <__sfp+0x16>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7ff ffbd 	bl	800b478 <__sinit>
 800b4fe:	3648      	adds	r6, #72	; 0x48
 800b500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b504:	3b01      	subs	r3, #1
 800b506:	d503      	bpl.n	800b510 <__sfp+0x28>
 800b508:	6833      	ldr	r3, [r6, #0]
 800b50a:	b30b      	cbz	r3, 800b550 <__sfp+0x68>
 800b50c:	6836      	ldr	r6, [r6, #0]
 800b50e:	e7f7      	b.n	800b500 <__sfp+0x18>
 800b510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b514:	b9d5      	cbnz	r5, 800b54c <__sfp+0x64>
 800b516:	4b16      	ldr	r3, [pc, #88]	; (800b570 <__sfp+0x88>)
 800b518:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b51c:	60e3      	str	r3, [r4, #12]
 800b51e:	6665      	str	r5, [r4, #100]	; 0x64
 800b520:	f000 fbc4 	bl	800bcac <__retarget_lock_init_recursive>
 800b524:	f7ff ff96 	bl	800b454 <__sfp_lock_release>
 800b528:	2208      	movs	r2, #8
 800b52a:	4629      	mov	r1, r5
 800b52c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b534:	6025      	str	r5, [r4, #0]
 800b536:	61a5      	str	r5, [r4, #24]
 800b538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b53c:	f7fd f99e 	bl	800887c <memset>
 800b540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b548:	4620      	mov	r0, r4
 800b54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b54c:	3468      	adds	r4, #104	; 0x68
 800b54e:	e7d9      	b.n	800b504 <__sfp+0x1c>
 800b550:	2104      	movs	r1, #4
 800b552:	4638      	mov	r0, r7
 800b554:	f7ff ff62 	bl	800b41c <__sfmoreglue>
 800b558:	4604      	mov	r4, r0
 800b55a:	6030      	str	r0, [r6, #0]
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d1d5      	bne.n	800b50c <__sfp+0x24>
 800b560:	f7ff ff78 	bl	800b454 <__sfp_lock_release>
 800b564:	230c      	movs	r3, #12
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	e7ee      	b.n	800b548 <__sfp+0x60>
 800b56a:	bf00      	nop
 800b56c:	0800d25c 	.word	0x0800d25c
 800b570:	ffff0001 	.word	0xffff0001

0800b574 <fiprintf>:
 800b574:	b40e      	push	{r1, r2, r3}
 800b576:	b503      	push	{r0, r1, lr}
 800b578:	4601      	mov	r1, r0
 800b57a:	ab03      	add	r3, sp, #12
 800b57c:	4805      	ldr	r0, [pc, #20]	; (800b594 <fiprintf+0x20>)
 800b57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b582:	6800      	ldr	r0, [r0, #0]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	f001 fb4d 	bl	800cc24 <_vfiprintf_r>
 800b58a:	b002      	add	sp, #8
 800b58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b590:	b003      	add	sp, #12
 800b592:	4770      	bx	lr
 800b594:	20000610 	.word	0x20000610

0800b598 <_fwalk_reent>:
 800b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b59c:	4606      	mov	r6, r0
 800b59e:	4688      	mov	r8, r1
 800b5a0:	2700      	movs	r7, #0
 800b5a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5aa:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ae:	d505      	bpl.n	800b5bc <_fwalk_reent+0x24>
 800b5b0:	6824      	ldr	r4, [r4, #0]
 800b5b2:	2c00      	cmp	r4, #0
 800b5b4:	d1f7      	bne.n	800b5a6 <_fwalk_reent+0xe>
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5bc:	89ab      	ldrh	r3, [r5, #12]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d907      	bls.n	800b5d2 <_fwalk_reent+0x3a>
 800b5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	d003      	beq.n	800b5d2 <_fwalk_reent+0x3a>
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	47c0      	blx	r8
 800b5d0:	4307      	orrs	r7, r0
 800b5d2:	3568      	adds	r5, #104	; 0x68
 800b5d4:	e7e9      	b.n	800b5aa <_fwalk_reent+0x12>

0800b5d6 <rshift>:
 800b5d6:	6903      	ldr	r3, [r0, #16]
 800b5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5e0:	f100 0414 	add.w	r4, r0, #20
 800b5e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5e8:	dd46      	ble.n	800b678 <rshift+0xa2>
 800b5ea:	f011 011f 	ands.w	r1, r1, #31
 800b5ee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5f2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5f6:	d10c      	bne.n	800b612 <rshift+0x3c>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f100 0710 	add.w	r7, r0, #16
 800b5fe:	42b1      	cmp	r1, r6
 800b600:	d335      	bcc.n	800b66e <rshift+0x98>
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	1eea      	subs	r2, r5, #3
 800b608:	4296      	cmp	r6, r2
 800b60a:	bf38      	it	cc
 800b60c:	2300      	movcc	r3, #0
 800b60e:	4423      	add	r3, r4
 800b610:	e015      	b.n	800b63e <rshift+0x68>
 800b612:	46a1      	mov	r9, r4
 800b614:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b618:	f1c1 0820 	rsb	r8, r1, #32
 800b61c:	40cf      	lsrs	r7, r1
 800b61e:	f105 0e04 	add.w	lr, r5, #4
 800b622:	4576      	cmp	r6, lr
 800b624:	46f4      	mov	ip, lr
 800b626:	d816      	bhi.n	800b656 <rshift+0x80>
 800b628:	1a9a      	subs	r2, r3, r2
 800b62a:	0092      	lsls	r2, r2, #2
 800b62c:	3a04      	subs	r2, #4
 800b62e:	3501      	adds	r5, #1
 800b630:	42ae      	cmp	r6, r5
 800b632:	bf38      	it	cc
 800b634:	2200      	movcc	r2, #0
 800b636:	18a3      	adds	r3, r4, r2
 800b638:	50a7      	str	r7, [r4, r2]
 800b63a:	b107      	cbz	r7, 800b63e <rshift+0x68>
 800b63c:	3304      	adds	r3, #4
 800b63e:	42a3      	cmp	r3, r4
 800b640:	eba3 0204 	sub.w	r2, r3, r4
 800b644:	bf08      	it	eq
 800b646:	2300      	moveq	r3, #0
 800b648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b64c:	6102      	str	r2, [r0, #16]
 800b64e:	bf08      	it	eq
 800b650:	6143      	streq	r3, [r0, #20]
 800b652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b656:	f8dc c000 	ldr.w	ip, [ip]
 800b65a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b65e:	ea4c 0707 	orr.w	r7, ip, r7
 800b662:	f849 7b04 	str.w	r7, [r9], #4
 800b666:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b66a:	40cf      	lsrs	r7, r1
 800b66c:	e7d9      	b.n	800b622 <rshift+0x4c>
 800b66e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b672:	f847 cf04 	str.w	ip, [r7, #4]!
 800b676:	e7c2      	b.n	800b5fe <rshift+0x28>
 800b678:	4623      	mov	r3, r4
 800b67a:	e7e0      	b.n	800b63e <rshift+0x68>

0800b67c <__hexdig_fun>:
 800b67c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b680:	2b09      	cmp	r3, #9
 800b682:	d802      	bhi.n	800b68a <__hexdig_fun+0xe>
 800b684:	3820      	subs	r0, #32
 800b686:	b2c0      	uxtb	r0, r0
 800b688:	4770      	bx	lr
 800b68a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d801      	bhi.n	800b696 <__hexdig_fun+0x1a>
 800b692:	3847      	subs	r0, #71	; 0x47
 800b694:	e7f7      	b.n	800b686 <__hexdig_fun+0xa>
 800b696:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	d801      	bhi.n	800b6a2 <__hexdig_fun+0x26>
 800b69e:	3827      	subs	r0, #39	; 0x27
 800b6a0:	e7f1      	b.n	800b686 <__hexdig_fun+0xa>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <__gethex>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	b08b      	sub	sp, #44	; 0x2c
 800b6ae:	9305      	str	r3, [sp, #20]
 800b6b0:	4bb2      	ldr	r3, [pc, #712]	; (800b97c <__gethex+0x2d4>)
 800b6b2:	9002      	str	r0, [sp, #8]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	468b      	mov	fp, r1
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	4690      	mov	r8, r2
 800b6bc:	9303      	str	r3, [sp, #12]
 800b6be:	f7f4 fdbd 	bl	800023c <strlen>
 800b6c2:	4682      	mov	sl, r0
 800b6c4:	9b03      	ldr	r3, [sp, #12]
 800b6c6:	f8db 2000 	ldr.w	r2, [fp]
 800b6ca:	4403      	add	r3, r0
 800b6cc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6d0:	9306      	str	r3, [sp, #24]
 800b6d2:	1c93      	adds	r3, r2, #2
 800b6d4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6d8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6dc:	32fe      	adds	r2, #254	; 0xfe
 800b6de:	18d1      	adds	r1, r2, r3
 800b6e0:	461f      	mov	r7, r3
 800b6e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6e6:	9101      	str	r1, [sp, #4]
 800b6e8:	2830      	cmp	r0, #48	; 0x30
 800b6ea:	d0f8      	beq.n	800b6de <__gethex+0x36>
 800b6ec:	f7ff ffc6 	bl	800b67c <__hexdig_fun>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d13a      	bne.n	800b76c <__gethex+0xc4>
 800b6f6:	4652      	mov	r2, sl
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	9903      	ldr	r1, [sp, #12]
 800b6fc:	f001 fc1b 	bl	800cf36 <strncmp>
 800b700:	4605      	mov	r5, r0
 800b702:	2800      	cmp	r0, #0
 800b704:	d166      	bne.n	800b7d4 <__gethex+0x12c>
 800b706:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b70a:	eb07 060a 	add.w	r6, r7, sl
 800b70e:	f7ff ffb5 	bl	800b67c <__hexdig_fun>
 800b712:	2800      	cmp	r0, #0
 800b714:	d060      	beq.n	800b7d8 <__gethex+0x130>
 800b716:	4633      	mov	r3, r6
 800b718:	7818      	ldrb	r0, [r3, #0]
 800b71a:	461f      	mov	r7, r3
 800b71c:	2830      	cmp	r0, #48	; 0x30
 800b71e:	f103 0301 	add.w	r3, r3, #1
 800b722:	d0f9      	beq.n	800b718 <__gethex+0x70>
 800b724:	f7ff ffaa 	bl	800b67c <__hexdig_fun>
 800b728:	2301      	movs	r3, #1
 800b72a:	fab0 f480 	clz	r4, r0
 800b72e:	4635      	mov	r5, r6
 800b730:	0964      	lsrs	r4, r4, #5
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	463a      	mov	r2, r7
 800b736:	4616      	mov	r6, r2
 800b738:	7830      	ldrb	r0, [r6, #0]
 800b73a:	3201      	adds	r2, #1
 800b73c:	f7ff ff9e 	bl	800b67c <__hexdig_fun>
 800b740:	2800      	cmp	r0, #0
 800b742:	d1f8      	bne.n	800b736 <__gethex+0x8e>
 800b744:	4652      	mov	r2, sl
 800b746:	4630      	mov	r0, r6
 800b748:	9903      	ldr	r1, [sp, #12]
 800b74a:	f001 fbf4 	bl	800cf36 <strncmp>
 800b74e:	b980      	cbnz	r0, 800b772 <__gethex+0xca>
 800b750:	b94d      	cbnz	r5, 800b766 <__gethex+0xbe>
 800b752:	eb06 050a 	add.w	r5, r6, sl
 800b756:	462a      	mov	r2, r5
 800b758:	4616      	mov	r6, r2
 800b75a:	7830      	ldrb	r0, [r6, #0]
 800b75c:	3201      	adds	r2, #1
 800b75e:	f7ff ff8d 	bl	800b67c <__hexdig_fun>
 800b762:	2800      	cmp	r0, #0
 800b764:	d1f8      	bne.n	800b758 <__gethex+0xb0>
 800b766:	1bad      	subs	r5, r5, r6
 800b768:	00ad      	lsls	r5, r5, #2
 800b76a:	e004      	b.n	800b776 <__gethex+0xce>
 800b76c:	2400      	movs	r4, #0
 800b76e:	4625      	mov	r5, r4
 800b770:	e7e0      	b.n	800b734 <__gethex+0x8c>
 800b772:	2d00      	cmp	r5, #0
 800b774:	d1f7      	bne.n	800b766 <__gethex+0xbe>
 800b776:	7833      	ldrb	r3, [r6, #0]
 800b778:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b77c:	2b50      	cmp	r3, #80	; 0x50
 800b77e:	d139      	bne.n	800b7f4 <__gethex+0x14c>
 800b780:	7873      	ldrb	r3, [r6, #1]
 800b782:	2b2b      	cmp	r3, #43	; 0x2b
 800b784:	d02a      	beq.n	800b7dc <__gethex+0x134>
 800b786:	2b2d      	cmp	r3, #45	; 0x2d
 800b788:	d02c      	beq.n	800b7e4 <__gethex+0x13c>
 800b78a:	f04f 0900 	mov.w	r9, #0
 800b78e:	1c71      	adds	r1, r6, #1
 800b790:	7808      	ldrb	r0, [r1, #0]
 800b792:	f7ff ff73 	bl	800b67c <__hexdig_fun>
 800b796:	1e43      	subs	r3, r0, #1
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b18      	cmp	r3, #24
 800b79c:	d82a      	bhi.n	800b7f4 <__gethex+0x14c>
 800b79e:	f1a0 0210 	sub.w	r2, r0, #16
 800b7a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7a6:	f7ff ff69 	bl	800b67c <__hexdig_fun>
 800b7aa:	1e43      	subs	r3, r0, #1
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b18      	cmp	r3, #24
 800b7b0:	d91b      	bls.n	800b7ea <__gethex+0x142>
 800b7b2:	f1b9 0f00 	cmp.w	r9, #0
 800b7b6:	d000      	beq.n	800b7ba <__gethex+0x112>
 800b7b8:	4252      	negs	r2, r2
 800b7ba:	4415      	add	r5, r2
 800b7bc:	f8cb 1000 	str.w	r1, [fp]
 800b7c0:	b1d4      	cbz	r4, 800b7f8 <__gethex+0x150>
 800b7c2:	9b01      	ldr	r3, [sp, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bf14      	ite	ne
 800b7c8:	2700      	movne	r7, #0
 800b7ca:	2706      	moveq	r7, #6
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	b00b      	add	sp, #44	; 0x2c
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	463e      	mov	r6, r7
 800b7d6:	4625      	mov	r5, r4
 800b7d8:	2401      	movs	r4, #1
 800b7da:	e7cc      	b.n	800b776 <__gethex+0xce>
 800b7dc:	f04f 0900 	mov.w	r9, #0
 800b7e0:	1cb1      	adds	r1, r6, #2
 800b7e2:	e7d5      	b.n	800b790 <__gethex+0xe8>
 800b7e4:	f04f 0901 	mov.w	r9, #1
 800b7e8:	e7fa      	b.n	800b7e0 <__gethex+0x138>
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	fb03 0202 	mla	r2, r3, r2, r0
 800b7f0:	3a10      	subs	r2, #16
 800b7f2:	e7d6      	b.n	800b7a2 <__gethex+0xfa>
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	e7e1      	b.n	800b7bc <__gethex+0x114>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	1bf3      	subs	r3, r6, r7
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	2b07      	cmp	r3, #7
 800b800:	dc0a      	bgt.n	800b818 <__gethex+0x170>
 800b802:	9802      	ldr	r0, [sp, #8]
 800b804:	f000 fae2 	bl	800bdcc <_Balloc>
 800b808:	4604      	mov	r4, r0
 800b80a:	b940      	cbnz	r0, 800b81e <__gethex+0x176>
 800b80c:	4602      	mov	r2, r0
 800b80e:	21de      	movs	r1, #222	; 0xde
 800b810:	4b5b      	ldr	r3, [pc, #364]	; (800b980 <__gethex+0x2d8>)
 800b812:	485c      	ldr	r0, [pc, #368]	; (800b984 <__gethex+0x2dc>)
 800b814:	f7fe fe82 	bl	800a51c <__assert_func>
 800b818:	3101      	adds	r1, #1
 800b81a:	105b      	asrs	r3, r3, #1
 800b81c:	e7ef      	b.n	800b7fe <__gethex+0x156>
 800b81e:	f04f 0b00 	mov.w	fp, #0
 800b822:	f100 0914 	add.w	r9, r0, #20
 800b826:	f1ca 0301 	rsb	r3, sl, #1
 800b82a:	f8cd 9010 	str.w	r9, [sp, #16]
 800b82e:	f8cd b004 	str.w	fp, [sp, #4]
 800b832:	9308      	str	r3, [sp, #32]
 800b834:	42b7      	cmp	r7, r6
 800b836:	d33f      	bcc.n	800b8b8 <__gethex+0x210>
 800b838:	9f04      	ldr	r7, [sp, #16]
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	f847 3b04 	str.w	r3, [r7], #4
 800b840:	eba7 0709 	sub.w	r7, r7, r9
 800b844:	10bf      	asrs	r7, r7, #2
 800b846:	6127      	str	r7, [r4, #16]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fbb1 	bl	800bfb0 <__hi0bits>
 800b84e:	017f      	lsls	r7, r7, #5
 800b850:	f8d8 6000 	ldr.w	r6, [r8]
 800b854:	1a3f      	subs	r7, r7, r0
 800b856:	42b7      	cmp	r7, r6
 800b858:	dd62      	ble.n	800b920 <__gethex+0x278>
 800b85a:	1bbf      	subs	r7, r7, r6
 800b85c:	4639      	mov	r1, r7
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 ff4b 	bl	800c6fa <__any_on>
 800b864:	4682      	mov	sl, r0
 800b866:	b1a8      	cbz	r0, 800b894 <__gethex+0x1ec>
 800b868:	f04f 0a01 	mov.w	sl, #1
 800b86c:	1e7b      	subs	r3, r7, #1
 800b86e:	1159      	asrs	r1, r3, #5
 800b870:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b874:	f003 021f 	and.w	r2, r3, #31
 800b878:	fa0a f202 	lsl.w	r2, sl, r2
 800b87c:	420a      	tst	r2, r1
 800b87e:	d009      	beq.n	800b894 <__gethex+0x1ec>
 800b880:	4553      	cmp	r3, sl
 800b882:	dd05      	ble.n	800b890 <__gethex+0x1e8>
 800b884:	4620      	mov	r0, r4
 800b886:	1eb9      	subs	r1, r7, #2
 800b888:	f000 ff37 	bl	800c6fa <__any_on>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d144      	bne.n	800b91a <__gethex+0x272>
 800b890:	f04f 0a02 	mov.w	sl, #2
 800b894:	4639      	mov	r1, r7
 800b896:	4620      	mov	r0, r4
 800b898:	f7ff fe9d 	bl	800b5d6 <rshift>
 800b89c:	443d      	add	r5, r7
 800b89e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8a2:	42ab      	cmp	r3, r5
 800b8a4:	da4a      	bge.n	800b93c <__gethex+0x294>
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	9802      	ldr	r0, [sp, #8]
 800b8aa:	f000 facf 	bl	800be4c <_Bfree>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8b2:	27a3      	movs	r7, #163	; 0xa3
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	e789      	b.n	800b7cc <__gethex+0x124>
 800b8b8:	1e73      	subs	r3, r6, #1
 800b8ba:	9a06      	ldr	r2, [sp, #24]
 800b8bc:	9307      	str	r3, [sp, #28]
 800b8be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d019      	beq.n	800b8fa <__gethex+0x252>
 800b8c6:	f1bb 0f20 	cmp.w	fp, #32
 800b8ca:	d107      	bne.n	800b8dc <__gethex+0x234>
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	9a01      	ldr	r2, [sp, #4]
 800b8d0:	f843 2b04 	str.w	r2, [r3], #4
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	469b      	mov	fp, r3
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b8e0:	f7ff fecc 	bl	800b67c <__hexdig_fun>
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	f000 000f 	and.w	r0, r0, #15
 800b8ea:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8ee:	4303      	orrs	r3, r0
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	f10b 0b04 	add.w	fp, fp, #4
 800b8f6:	9b07      	ldr	r3, [sp, #28]
 800b8f8:	e00d      	b.n	800b916 <__gethex+0x26e>
 800b8fa:	9a08      	ldr	r2, [sp, #32]
 800b8fc:	1e73      	subs	r3, r6, #1
 800b8fe:	4413      	add	r3, r2
 800b900:	42bb      	cmp	r3, r7
 800b902:	d3e0      	bcc.n	800b8c6 <__gethex+0x21e>
 800b904:	4618      	mov	r0, r3
 800b906:	4652      	mov	r2, sl
 800b908:	9903      	ldr	r1, [sp, #12]
 800b90a:	9309      	str	r3, [sp, #36]	; 0x24
 800b90c:	f001 fb13 	bl	800cf36 <strncmp>
 800b910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b912:	2800      	cmp	r0, #0
 800b914:	d1d7      	bne.n	800b8c6 <__gethex+0x21e>
 800b916:	461e      	mov	r6, r3
 800b918:	e78c      	b.n	800b834 <__gethex+0x18c>
 800b91a:	f04f 0a03 	mov.w	sl, #3
 800b91e:	e7b9      	b.n	800b894 <__gethex+0x1ec>
 800b920:	da09      	bge.n	800b936 <__gethex+0x28e>
 800b922:	1bf7      	subs	r7, r6, r7
 800b924:	4621      	mov	r1, r4
 800b926:	463a      	mov	r2, r7
 800b928:	9802      	ldr	r0, [sp, #8]
 800b92a:	f000 fca7 	bl	800c27c <__lshift>
 800b92e:	4604      	mov	r4, r0
 800b930:	1bed      	subs	r5, r5, r7
 800b932:	f100 0914 	add.w	r9, r0, #20
 800b936:	f04f 0a00 	mov.w	sl, #0
 800b93a:	e7b0      	b.n	800b89e <__gethex+0x1f6>
 800b93c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b940:	42a8      	cmp	r0, r5
 800b942:	dd72      	ble.n	800ba2a <__gethex+0x382>
 800b944:	1b45      	subs	r5, r0, r5
 800b946:	42ae      	cmp	r6, r5
 800b948:	dc35      	bgt.n	800b9b6 <__gethex+0x30e>
 800b94a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d029      	beq.n	800b9a6 <__gethex+0x2fe>
 800b952:	2b03      	cmp	r3, #3
 800b954:	d02b      	beq.n	800b9ae <__gethex+0x306>
 800b956:	2b01      	cmp	r3, #1
 800b958:	d11c      	bne.n	800b994 <__gethex+0x2ec>
 800b95a:	42ae      	cmp	r6, r5
 800b95c:	d11a      	bne.n	800b994 <__gethex+0x2ec>
 800b95e:	2e01      	cmp	r6, #1
 800b960:	d112      	bne.n	800b988 <__gethex+0x2e0>
 800b962:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	2762      	movs	r7, #98	; 0x62
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	2301      	movs	r3, #1
 800b96e:	6123      	str	r3, [r4, #16]
 800b970:	f8c9 3000 	str.w	r3, [r9]
 800b974:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b976:	601c      	str	r4, [r3, #0]
 800b978:	e728      	b.n	800b7cc <__gethex+0x124>
 800b97a:	bf00      	nop
 800b97c:	0800d5e4 	.word	0x0800d5e4
 800b980:	0800d509 	.word	0x0800d509
 800b984:	0800d57c 	.word	0x0800d57c
 800b988:	4620      	mov	r0, r4
 800b98a:	1e71      	subs	r1, r6, #1
 800b98c:	f000 feb5 	bl	800c6fa <__any_on>
 800b990:	2800      	cmp	r0, #0
 800b992:	d1e6      	bne.n	800b962 <__gethex+0x2ba>
 800b994:	4621      	mov	r1, r4
 800b996:	9802      	ldr	r0, [sp, #8]
 800b998:	f000 fa58 	bl	800be4c <_Bfree>
 800b99c:	2300      	movs	r3, #0
 800b99e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9a0:	2750      	movs	r7, #80	; 0x50
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	e712      	b.n	800b7cc <__gethex+0x124>
 800b9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f3      	bne.n	800b994 <__gethex+0x2ec>
 800b9ac:	e7d9      	b.n	800b962 <__gethex+0x2ba>
 800b9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1d6      	bne.n	800b962 <__gethex+0x2ba>
 800b9b4:	e7ee      	b.n	800b994 <__gethex+0x2ec>
 800b9b6:	1e6f      	subs	r7, r5, #1
 800b9b8:	f1ba 0f00 	cmp.w	sl, #0
 800b9bc:	d132      	bne.n	800ba24 <__gethex+0x37c>
 800b9be:	b127      	cbz	r7, 800b9ca <__gethex+0x322>
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fe99 	bl	800c6fa <__any_on>
 800b9c8:	4682      	mov	sl, r0
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	117b      	asrs	r3, r7, #5
 800b9ce:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b9d2:	f007 071f 	and.w	r7, r7, #31
 800b9d6:	fa01 f707 	lsl.w	r7, r1, r7
 800b9da:	421f      	tst	r7, r3
 800b9dc:	f04f 0702 	mov.w	r7, #2
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	bf18      	it	ne
 800b9e6:	f04a 0a02 	orrne.w	sl, sl, #2
 800b9ea:	1b76      	subs	r6, r6, r5
 800b9ec:	f7ff fdf3 	bl	800b5d6 <rshift>
 800b9f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9f4:	f1ba 0f00 	cmp.w	sl, #0
 800b9f8:	d048      	beq.n	800ba8c <__gethex+0x3e4>
 800b9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d015      	beq.n	800ba2e <__gethex+0x386>
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d017      	beq.n	800ba36 <__gethex+0x38e>
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d109      	bne.n	800ba1e <__gethex+0x376>
 800ba0a:	f01a 0f02 	tst.w	sl, #2
 800ba0e:	d006      	beq.n	800ba1e <__gethex+0x376>
 800ba10:	f8d9 0000 	ldr.w	r0, [r9]
 800ba14:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba18:	f01a 0f01 	tst.w	sl, #1
 800ba1c:	d10e      	bne.n	800ba3c <__gethex+0x394>
 800ba1e:	f047 0710 	orr.w	r7, r7, #16
 800ba22:	e033      	b.n	800ba8c <__gethex+0x3e4>
 800ba24:	f04f 0a01 	mov.w	sl, #1
 800ba28:	e7cf      	b.n	800b9ca <__gethex+0x322>
 800ba2a:	2701      	movs	r7, #1
 800ba2c:	e7e2      	b.n	800b9f4 <__gethex+0x34c>
 800ba2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba30:	f1c3 0301 	rsb	r3, r3, #1
 800ba34:	9315      	str	r3, [sp, #84]	; 0x54
 800ba36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d0f0      	beq.n	800ba1e <__gethex+0x376>
 800ba3c:	f04f 0c00 	mov.w	ip, #0
 800ba40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba44:	f104 0314 	add.w	r3, r4, #20
 800ba48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba56:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba5a:	d01c      	beq.n	800ba96 <__gethex+0x3ee>
 800ba5c:	3201      	adds	r2, #1
 800ba5e:	6002      	str	r2, [r0, #0]
 800ba60:	2f02      	cmp	r7, #2
 800ba62:	f104 0314 	add.w	r3, r4, #20
 800ba66:	d13d      	bne.n	800bae4 <__gethex+0x43c>
 800ba68:	f8d8 2000 	ldr.w	r2, [r8]
 800ba6c:	3a01      	subs	r2, #1
 800ba6e:	42b2      	cmp	r2, r6
 800ba70:	d10a      	bne.n	800ba88 <__gethex+0x3e0>
 800ba72:	2201      	movs	r2, #1
 800ba74:	1171      	asrs	r1, r6, #5
 800ba76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba7a:	f006 061f 	and.w	r6, r6, #31
 800ba7e:	fa02 f606 	lsl.w	r6, r2, r6
 800ba82:	421e      	tst	r6, r3
 800ba84:	bf18      	it	ne
 800ba86:	4617      	movne	r7, r2
 800ba88:	f047 0720 	orr.w	r7, r7, #32
 800ba8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba8e:	601c      	str	r4, [r3, #0]
 800ba90:	9b05      	ldr	r3, [sp, #20]
 800ba92:	601d      	str	r5, [r3, #0]
 800ba94:	e69a      	b.n	800b7cc <__gethex+0x124>
 800ba96:	4299      	cmp	r1, r3
 800ba98:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba9c:	d8d8      	bhi.n	800ba50 <__gethex+0x3a8>
 800ba9e:	68a3      	ldr	r3, [r4, #8]
 800baa0:	459b      	cmp	fp, r3
 800baa2:	db17      	blt.n	800bad4 <__gethex+0x42c>
 800baa4:	6861      	ldr	r1, [r4, #4]
 800baa6:	9802      	ldr	r0, [sp, #8]
 800baa8:	3101      	adds	r1, #1
 800baaa:	f000 f98f 	bl	800bdcc <_Balloc>
 800baae:	4681      	mov	r9, r0
 800bab0:	b918      	cbnz	r0, 800baba <__gethex+0x412>
 800bab2:	4602      	mov	r2, r0
 800bab4:	2184      	movs	r1, #132	; 0x84
 800bab6:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <__gethex+0x474>)
 800bab8:	e6ab      	b.n	800b812 <__gethex+0x16a>
 800baba:	6922      	ldr	r2, [r4, #16]
 800babc:	f104 010c 	add.w	r1, r4, #12
 800bac0:	3202      	adds	r2, #2
 800bac2:	0092      	lsls	r2, r2, #2
 800bac4:	300c      	adds	r0, #12
 800bac6:	f7fc fecb 	bl	8008860 <memcpy>
 800baca:	4621      	mov	r1, r4
 800bacc:	9802      	ldr	r0, [sp, #8]
 800bace:	f000 f9bd 	bl	800be4c <_Bfree>
 800bad2:	464c      	mov	r4, r9
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	6122      	str	r2, [r4, #16]
 800bada:	2201      	movs	r2, #1
 800badc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bae0:	615a      	str	r2, [r3, #20]
 800bae2:	e7bd      	b.n	800ba60 <__gethex+0x3b8>
 800bae4:	6922      	ldr	r2, [r4, #16]
 800bae6:	455a      	cmp	r2, fp
 800bae8:	dd0b      	ble.n	800bb02 <__gethex+0x45a>
 800baea:	2101      	movs	r1, #1
 800baec:	4620      	mov	r0, r4
 800baee:	f7ff fd72 	bl	800b5d6 <rshift>
 800baf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baf6:	3501      	adds	r5, #1
 800baf8:	42ab      	cmp	r3, r5
 800bafa:	f6ff aed4 	blt.w	800b8a6 <__gethex+0x1fe>
 800bafe:	2701      	movs	r7, #1
 800bb00:	e7c2      	b.n	800ba88 <__gethex+0x3e0>
 800bb02:	f016 061f 	ands.w	r6, r6, #31
 800bb06:	d0fa      	beq.n	800bafe <__gethex+0x456>
 800bb08:	4453      	add	r3, sl
 800bb0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb0e:	f000 fa4f 	bl	800bfb0 <__hi0bits>
 800bb12:	f1c6 0620 	rsb	r6, r6, #32
 800bb16:	42b0      	cmp	r0, r6
 800bb18:	dbe7      	blt.n	800baea <__gethex+0x442>
 800bb1a:	e7f0      	b.n	800bafe <__gethex+0x456>
 800bb1c:	0800d509 	.word	0x0800d509

0800bb20 <L_shift>:
 800bb20:	f1c2 0208 	rsb	r2, r2, #8
 800bb24:	0092      	lsls	r2, r2, #2
 800bb26:	b570      	push	{r4, r5, r6, lr}
 800bb28:	f1c2 0620 	rsb	r6, r2, #32
 800bb2c:	6843      	ldr	r3, [r0, #4]
 800bb2e:	6804      	ldr	r4, [r0, #0]
 800bb30:	fa03 f506 	lsl.w	r5, r3, r6
 800bb34:	432c      	orrs	r4, r5
 800bb36:	40d3      	lsrs	r3, r2
 800bb38:	6004      	str	r4, [r0, #0]
 800bb3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb3e:	4288      	cmp	r0, r1
 800bb40:	d3f4      	bcc.n	800bb2c <L_shift+0xc>
 800bb42:	bd70      	pop	{r4, r5, r6, pc}

0800bb44 <__match>:
 800bb44:	b530      	push	{r4, r5, lr}
 800bb46:	6803      	ldr	r3, [r0, #0]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4e:	b914      	cbnz	r4, 800bb56 <__match+0x12>
 800bb50:	6003      	str	r3, [r0, #0]
 800bb52:	2001      	movs	r0, #1
 800bb54:	bd30      	pop	{r4, r5, pc}
 800bb56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb5e:	2d19      	cmp	r5, #25
 800bb60:	bf98      	it	ls
 800bb62:	3220      	addls	r2, #32
 800bb64:	42a2      	cmp	r2, r4
 800bb66:	d0f0      	beq.n	800bb4a <__match+0x6>
 800bb68:	2000      	movs	r0, #0
 800bb6a:	e7f3      	b.n	800bb54 <__match+0x10>

0800bb6c <__hexnan>:
 800bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb70:	2500      	movs	r5, #0
 800bb72:	680b      	ldr	r3, [r1, #0]
 800bb74:	4682      	mov	sl, r0
 800bb76:	115e      	asrs	r6, r3, #5
 800bb78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb7c:	f013 031f 	ands.w	r3, r3, #31
 800bb80:	bf18      	it	ne
 800bb82:	3604      	addne	r6, #4
 800bb84:	1f37      	subs	r7, r6, #4
 800bb86:	46b9      	mov	r9, r7
 800bb88:	463c      	mov	r4, r7
 800bb8a:	46ab      	mov	fp, r5
 800bb8c:	b087      	sub	sp, #28
 800bb8e:	4690      	mov	r8, r2
 800bb90:	6802      	ldr	r2, [r0, #0]
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb98:	9502      	str	r5, [sp, #8]
 800bb9a:	7851      	ldrb	r1, [r2, #1]
 800bb9c:	1c53      	adds	r3, r2, #1
 800bb9e:	9303      	str	r3, [sp, #12]
 800bba0:	b341      	cbz	r1, 800bbf4 <__hexnan+0x88>
 800bba2:	4608      	mov	r0, r1
 800bba4:	9205      	str	r2, [sp, #20]
 800bba6:	9104      	str	r1, [sp, #16]
 800bba8:	f7ff fd68 	bl	800b67c <__hexdig_fun>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d14f      	bne.n	800bc50 <__hexnan+0xe4>
 800bbb0:	9904      	ldr	r1, [sp, #16]
 800bbb2:	9a05      	ldr	r2, [sp, #20]
 800bbb4:	2920      	cmp	r1, #32
 800bbb6:	d818      	bhi.n	800bbea <__hexnan+0x7e>
 800bbb8:	9b02      	ldr	r3, [sp, #8]
 800bbba:	459b      	cmp	fp, r3
 800bbbc:	dd13      	ble.n	800bbe6 <__hexnan+0x7a>
 800bbbe:	454c      	cmp	r4, r9
 800bbc0:	d206      	bcs.n	800bbd0 <__hexnan+0x64>
 800bbc2:	2d07      	cmp	r5, #7
 800bbc4:	dc04      	bgt.n	800bbd0 <__hexnan+0x64>
 800bbc6:	462a      	mov	r2, r5
 800bbc8:	4649      	mov	r1, r9
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f7ff ffa8 	bl	800bb20 <L_shift>
 800bbd0:	4544      	cmp	r4, r8
 800bbd2:	d950      	bls.n	800bc76 <__hexnan+0x10a>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f1a4 0904 	sub.w	r9, r4, #4
 800bbda:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbde:	461d      	mov	r5, r3
 800bbe0:	464c      	mov	r4, r9
 800bbe2:	f8cd b008 	str.w	fp, [sp, #8]
 800bbe6:	9a03      	ldr	r2, [sp, #12]
 800bbe8:	e7d7      	b.n	800bb9a <__hexnan+0x2e>
 800bbea:	2929      	cmp	r1, #41	; 0x29
 800bbec:	d156      	bne.n	800bc9c <__hexnan+0x130>
 800bbee:	3202      	adds	r2, #2
 800bbf0:	f8ca 2000 	str.w	r2, [sl]
 800bbf4:	f1bb 0f00 	cmp.w	fp, #0
 800bbf8:	d050      	beq.n	800bc9c <__hexnan+0x130>
 800bbfa:	454c      	cmp	r4, r9
 800bbfc:	d206      	bcs.n	800bc0c <__hexnan+0xa0>
 800bbfe:	2d07      	cmp	r5, #7
 800bc00:	dc04      	bgt.n	800bc0c <__hexnan+0xa0>
 800bc02:	462a      	mov	r2, r5
 800bc04:	4649      	mov	r1, r9
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7ff ff8a 	bl	800bb20 <L_shift>
 800bc0c:	4544      	cmp	r4, r8
 800bc0e:	d934      	bls.n	800bc7a <__hexnan+0x10e>
 800bc10:	4623      	mov	r3, r4
 800bc12:	f1a8 0204 	sub.w	r2, r8, #4
 800bc16:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc1a:	429f      	cmp	r7, r3
 800bc1c:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc20:	d2f9      	bcs.n	800bc16 <__hexnan+0xaa>
 800bc22:	1b3b      	subs	r3, r7, r4
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	3304      	adds	r3, #4
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	3e03      	subs	r6, #3
 800bc2e:	42b4      	cmp	r4, r6
 800bc30:	bf88      	it	hi
 800bc32:	2304      	movhi	r3, #4
 800bc34:	2200      	movs	r2, #0
 800bc36:	4443      	add	r3, r8
 800bc38:	f843 2b04 	str.w	r2, [r3], #4
 800bc3c:	429f      	cmp	r7, r3
 800bc3e:	d2fb      	bcs.n	800bc38 <__hexnan+0xcc>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	b91b      	cbnz	r3, 800bc4c <__hexnan+0xe0>
 800bc44:	4547      	cmp	r7, r8
 800bc46:	d127      	bne.n	800bc98 <__hexnan+0x12c>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	2005      	movs	r0, #5
 800bc4e:	e026      	b.n	800bc9e <__hexnan+0x132>
 800bc50:	3501      	adds	r5, #1
 800bc52:	2d08      	cmp	r5, #8
 800bc54:	f10b 0b01 	add.w	fp, fp, #1
 800bc58:	dd06      	ble.n	800bc68 <__hexnan+0xfc>
 800bc5a:	4544      	cmp	r4, r8
 800bc5c:	d9c3      	bls.n	800bbe6 <__hexnan+0x7a>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	2501      	movs	r5, #1
 800bc62:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc66:	3c04      	subs	r4, #4
 800bc68:	6822      	ldr	r2, [r4, #0]
 800bc6a:	f000 000f 	and.w	r0, r0, #15
 800bc6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bc72:	6022      	str	r2, [r4, #0]
 800bc74:	e7b7      	b.n	800bbe6 <__hexnan+0x7a>
 800bc76:	2508      	movs	r5, #8
 800bc78:	e7b5      	b.n	800bbe6 <__hexnan+0x7a>
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0df      	beq.n	800bc40 <__hexnan+0xd4>
 800bc80:	f04f 32ff 	mov.w	r2, #4294967295
 800bc84:	f1c3 0320 	rsb	r3, r3, #32
 800bc88:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc90:	401a      	ands	r2, r3
 800bc92:	f846 2c04 	str.w	r2, [r6, #-4]
 800bc96:	e7d3      	b.n	800bc40 <__hexnan+0xd4>
 800bc98:	3f04      	subs	r7, #4
 800bc9a:	e7d1      	b.n	800bc40 <__hexnan+0xd4>
 800bc9c:	2004      	movs	r0, #4
 800bc9e:	b007      	add	sp, #28
 800bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bca4 <_localeconv_r>:
 800bca4:	4800      	ldr	r0, [pc, #0]	; (800bca8 <_localeconv_r+0x4>)
 800bca6:	4770      	bx	lr
 800bca8:	20000768 	.word	0x20000768

0800bcac <__retarget_lock_init_recursive>:
 800bcac:	4770      	bx	lr

0800bcae <__retarget_lock_acquire_recursive>:
 800bcae:	4770      	bx	lr

0800bcb0 <__retarget_lock_release_recursive>:
 800bcb0:	4770      	bx	lr

0800bcb2 <__swhatbuf_r>:
 800bcb2:	b570      	push	{r4, r5, r6, lr}
 800bcb4:	460e      	mov	r6, r1
 800bcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcba:	4614      	mov	r4, r2
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	461d      	mov	r5, r3
 800bcc0:	b096      	sub	sp, #88	; 0x58
 800bcc2:	da08      	bge.n	800bcd6 <__swhatbuf_r+0x24>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcca:	602a      	str	r2, [r5, #0]
 800bccc:	061a      	lsls	r2, r3, #24
 800bcce:	d410      	bmi.n	800bcf2 <__swhatbuf_r+0x40>
 800bcd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd4:	e00e      	b.n	800bcf4 <__swhatbuf_r+0x42>
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f001 f978 	bl	800cfcc <_fstat_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	dbf1      	blt.n	800bcc4 <__swhatbuf_r+0x12>
 800bce0:	9a01      	ldr	r2, [sp, #4]
 800bce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcea:	425a      	negs	r2, r3
 800bcec:	415a      	adcs	r2, r3
 800bcee:	602a      	str	r2, [r5, #0]
 800bcf0:	e7ee      	b.n	800bcd0 <__swhatbuf_r+0x1e>
 800bcf2:	2340      	movs	r3, #64	; 0x40
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	b016      	add	sp, #88	; 0x58
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}

0800bcfc <__smakebuf_r>:
 800bcfc:	898b      	ldrh	r3, [r1, #12]
 800bcfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd00:	079d      	lsls	r5, r3, #30
 800bd02:	4606      	mov	r6, r0
 800bd04:	460c      	mov	r4, r1
 800bd06:	d507      	bpl.n	800bd18 <__smakebuf_r+0x1c>
 800bd08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	2301      	movs	r3, #1
 800bd12:	6163      	str	r3, [r4, #20]
 800bd14:	b002      	add	sp, #8
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	466a      	mov	r2, sp
 800bd1a:	ab01      	add	r3, sp, #4
 800bd1c:	f7ff ffc9 	bl	800bcb2 <__swhatbuf_r>
 800bd20:	9900      	ldr	r1, [sp, #0]
 800bd22:	4605      	mov	r5, r0
 800bd24:	4630      	mov	r0, r6
 800bd26:	f000 fd85 	bl	800c834 <_malloc_r>
 800bd2a:	b948      	cbnz	r0, 800bd40 <__smakebuf_r+0x44>
 800bd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd30:	059a      	lsls	r2, r3, #22
 800bd32:	d4ef      	bmi.n	800bd14 <__smakebuf_r+0x18>
 800bd34:	f023 0303 	bic.w	r3, r3, #3
 800bd38:	f043 0302 	orr.w	r3, r3, #2
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	e7e3      	b.n	800bd08 <__smakebuf_r+0xc>
 800bd40:	4b0d      	ldr	r3, [pc, #52]	; (800bd78 <__smakebuf_r+0x7c>)
 800bd42:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	6020      	str	r0, [r4, #0]
 800bd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	9b00      	ldr	r3, [sp, #0]
 800bd50:	6120      	str	r0, [r4, #16]
 800bd52:	6163      	str	r3, [r4, #20]
 800bd54:	9b01      	ldr	r3, [sp, #4]
 800bd56:	b15b      	cbz	r3, 800bd70 <__smakebuf_r+0x74>
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5e:	f001 f947 	bl	800cff0 <_isatty_r>
 800bd62:	b128      	cbz	r0, 800bd70 <__smakebuf_r+0x74>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	81a3      	strh	r3, [r4, #12]
 800bd70:	89a0      	ldrh	r0, [r4, #12]
 800bd72:	4305      	orrs	r5, r0
 800bd74:	81a5      	strh	r5, [r4, #12]
 800bd76:	e7cd      	b.n	800bd14 <__smakebuf_r+0x18>
 800bd78:	0800b411 	.word	0x0800b411

0800bd7c <malloc>:
 800bd7c:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <malloc+0xc>)
 800bd7e:	4601      	mov	r1, r0
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	f000 bd57 	b.w	800c834 <_malloc_r>
 800bd86:	bf00      	nop
 800bd88:	20000610 	.word	0x20000610

0800bd8c <__ascii_mbtowc>:
 800bd8c:	b082      	sub	sp, #8
 800bd8e:	b901      	cbnz	r1, 800bd92 <__ascii_mbtowc+0x6>
 800bd90:	a901      	add	r1, sp, #4
 800bd92:	b142      	cbz	r2, 800bda6 <__ascii_mbtowc+0x1a>
 800bd94:	b14b      	cbz	r3, 800bdaa <__ascii_mbtowc+0x1e>
 800bd96:	7813      	ldrb	r3, [r2, #0]
 800bd98:	600b      	str	r3, [r1, #0]
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	1e10      	subs	r0, r2, #0
 800bd9e:	bf18      	it	ne
 800bda0:	2001      	movne	r0, #1
 800bda2:	b002      	add	sp, #8
 800bda4:	4770      	bx	lr
 800bda6:	4610      	mov	r0, r2
 800bda8:	e7fb      	b.n	800bda2 <__ascii_mbtowc+0x16>
 800bdaa:	f06f 0001 	mvn.w	r0, #1
 800bdae:	e7f8      	b.n	800bda2 <__ascii_mbtowc+0x16>

0800bdb0 <memchr>:
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	b510      	push	{r4, lr}
 800bdb4:	b2c9      	uxtb	r1, r1
 800bdb6:	4402      	add	r2, r0
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	d101      	bne.n	800bdc2 <memchr+0x12>
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	e003      	b.n	800bdca <memchr+0x1a>
 800bdc2:	7804      	ldrb	r4, [r0, #0]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	428c      	cmp	r4, r1
 800bdc8:	d1f6      	bne.n	800bdb8 <memchr+0x8>
 800bdca:	bd10      	pop	{r4, pc}

0800bdcc <_Balloc>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	b976      	cbnz	r6, 800bdf4 <_Balloc+0x28>
 800bdd6:	2010      	movs	r0, #16
 800bdd8:	f7ff ffd0 	bl	800bd7c <malloc>
 800bddc:	4602      	mov	r2, r0
 800bdde:	6260      	str	r0, [r4, #36]	; 0x24
 800bde0:	b920      	cbnz	r0, 800bdec <_Balloc+0x20>
 800bde2:	2166      	movs	r1, #102	; 0x66
 800bde4:	4b17      	ldr	r3, [pc, #92]	; (800be44 <_Balloc+0x78>)
 800bde6:	4818      	ldr	r0, [pc, #96]	; (800be48 <_Balloc+0x7c>)
 800bde8:	f7fe fb98 	bl	800a51c <__assert_func>
 800bdec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdf0:	6006      	str	r6, [r0, #0]
 800bdf2:	60c6      	str	r6, [r0, #12]
 800bdf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdf6:	68f3      	ldr	r3, [r6, #12]
 800bdf8:	b183      	cbz	r3, 800be1c <_Balloc+0x50>
 800bdfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be02:	b9b8      	cbnz	r0, 800be34 <_Balloc+0x68>
 800be04:	2101      	movs	r1, #1
 800be06:	fa01 f605 	lsl.w	r6, r1, r5
 800be0a:	1d72      	adds	r2, r6, #5
 800be0c:	4620      	mov	r0, r4
 800be0e:	0092      	lsls	r2, r2, #2
 800be10:	f000 fc94 	bl	800c73c <_calloc_r>
 800be14:	b160      	cbz	r0, 800be30 <_Balloc+0x64>
 800be16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be1a:	e00e      	b.n	800be3a <_Balloc+0x6e>
 800be1c:	2221      	movs	r2, #33	; 0x21
 800be1e:	2104      	movs	r1, #4
 800be20:	4620      	mov	r0, r4
 800be22:	f000 fc8b 	bl	800c73c <_calloc_r>
 800be26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be28:	60f0      	str	r0, [r6, #12]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e4      	bne.n	800bdfa <_Balloc+0x2e>
 800be30:	2000      	movs	r0, #0
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	6802      	ldr	r2, [r0, #0]
 800be36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be3a:	2300      	movs	r3, #0
 800be3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be40:	e7f7      	b.n	800be32 <_Balloc+0x66>
 800be42:	bf00      	nop
 800be44:	0800d2f0 	.word	0x0800d2f0
 800be48:	0800d5f8 	.word	0x0800d5f8

0800be4c <_Bfree>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be50:	4605      	mov	r5, r0
 800be52:	460c      	mov	r4, r1
 800be54:	b976      	cbnz	r6, 800be74 <_Bfree+0x28>
 800be56:	2010      	movs	r0, #16
 800be58:	f7ff ff90 	bl	800bd7c <malloc>
 800be5c:	4602      	mov	r2, r0
 800be5e:	6268      	str	r0, [r5, #36]	; 0x24
 800be60:	b920      	cbnz	r0, 800be6c <_Bfree+0x20>
 800be62:	218a      	movs	r1, #138	; 0x8a
 800be64:	4b08      	ldr	r3, [pc, #32]	; (800be88 <_Bfree+0x3c>)
 800be66:	4809      	ldr	r0, [pc, #36]	; (800be8c <_Bfree+0x40>)
 800be68:	f7fe fb58 	bl	800a51c <__assert_func>
 800be6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be70:	6006      	str	r6, [r0, #0]
 800be72:	60c6      	str	r6, [r0, #12]
 800be74:	b13c      	cbz	r4, 800be86 <_Bfree+0x3a>
 800be76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be78:	6862      	ldr	r2, [r4, #4]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be80:	6021      	str	r1, [r4, #0]
 800be82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	0800d2f0 	.word	0x0800d2f0
 800be8c:	0800d5f8 	.word	0x0800d5f8

0800be90 <__multadd>:
 800be90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be94:	4607      	mov	r7, r0
 800be96:	460c      	mov	r4, r1
 800be98:	461e      	mov	r6, r3
 800be9a:	2000      	movs	r0, #0
 800be9c:	690d      	ldr	r5, [r1, #16]
 800be9e:	f101 0c14 	add.w	ip, r1, #20
 800bea2:	f8dc 3000 	ldr.w	r3, [ip]
 800bea6:	3001      	adds	r0, #1
 800bea8:	b299      	uxth	r1, r3
 800beaa:	fb02 6101 	mla	r1, r2, r1, r6
 800beae:	0c1e      	lsrs	r6, r3, #16
 800beb0:	0c0b      	lsrs	r3, r1, #16
 800beb2:	fb02 3306 	mla	r3, r2, r6, r3
 800beb6:	b289      	uxth	r1, r1
 800beb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bebc:	4285      	cmp	r5, r0
 800bebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bec2:	f84c 1b04 	str.w	r1, [ip], #4
 800bec6:	dcec      	bgt.n	800bea2 <__multadd+0x12>
 800bec8:	b30e      	cbz	r6, 800bf0e <__multadd+0x7e>
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	42ab      	cmp	r3, r5
 800bece:	dc19      	bgt.n	800bf04 <__multadd+0x74>
 800bed0:	6861      	ldr	r1, [r4, #4]
 800bed2:	4638      	mov	r0, r7
 800bed4:	3101      	adds	r1, #1
 800bed6:	f7ff ff79 	bl	800bdcc <_Balloc>
 800beda:	4680      	mov	r8, r0
 800bedc:	b928      	cbnz	r0, 800beea <__multadd+0x5a>
 800bede:	4602      	mov	r2, r0
 800bee0:	21b5      	movs	r1, #181	; 0xb5
 800bee2:	4b0c      	ldr	r3, [pc, #48]	; (800bf14 <__multadd+0x84>)
 800bee4:	480c      	ldr	r0, [pc, #48]	; (800bf18 <__multadd+0x88>)
 800bee6:	f7fe fb19 	bl	800a51c <__assert_func>
 800beea:	6922      	ldr	r2, [r4, #16]
 800beec:	f104 010c 	add.w	r1, r4, #12
 800bef0:	3202      	adds	r2, #2
 800bef2:	0092      	lsls	r2, r2, #2
 800bef4:	300c      	adds	r0, #12
 800bef6:	f7fc fcb3 	bl	8008860 <memcpy>
 800befa:	4621      	mov	r1, r4
 800befc:	4638      	mov	r0, r7
 800befe:	f7ff ffa5 	bl	800be4c <_Bfree>
 800bf02:	4644      	mov	r4, r8
 800bf04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf08:	3501      	adds	r5, #1
 800bf0a:	615e      	str	r6, [r3, #20]
 800bf0c:	6125      	str	r5, [r4, #16]
 800bf0e:	4620      	mov	r0, r4
 800bf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf14:	0800d509 	.word	0x0800d509
 800bf18:	0800d5f8 	.word	0x0800d5f8

0800bf1c <__s2b>:
 800bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf20:	4615      	mov	r5, r2
 800bf22:	2209      	movs	r2, #9
 800bf24:	461f      	mov	r7, r3
 800bf26:	3308      	adds	r3, #8
 800bf28:	460c      	mov	r4, r1
 800bf2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf2e:	4606      	mov	r6, r0
 800bf30:	2201      	movs	r2, #1
 800bf32:	2100      	movs	r1, #0
 800bf34:	429a      	cmp	r2, r3
 800bf36:	db09      	blt.n	800bf4c <__s2b+0x30>
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7ff ff47 	bl	800bdcc <_Balloc>
 800bf3e:	b940      	cbnz	r0, 800bf52 <__s2b+0x36>
 800bf40:	4602      	mov	r2, r0
 800bf42:	21ce      	movs	r1, #206	; 0xce
 800bf44:	4b18      	ldr	r3, [pc, #96]	; (800bfa8 <__s2b+0x8c>)
 800bf46:	4819      	ldr	r0, [pc, #100]	; (800bfac <__s2b+0x90>)
 800bf48:	f7fe fae8 	bl	800a51c <__assert_func>
 800bf4c:	0052      	lsls	r2, r2, #1
 800bf4e:	3101      	adds	r1, #1
 800bf50:	e7f0      	b.n	800bf34 <__s2b+0x18>
 800bf52:	9b08      	ldr	r3, [sp, #32]
 800bf54:	2d09      	cmp	r5, #9
 800bf56:	6143      	str	r3, [r0, #20]
 800bf58:	f04f 0301 	mov.w	r3, #1
 800bf5c:	6103      	str	r3, [r0, #16]
 800bf5e:	dd16      	ble.n	800bf8e <__s2b+0x72>
 800bf60:	f104 0909 	add.w	r9, r4, #9
 800bf64:	46c8      	mov	r8, r9
 800bf66:	442c      	add	r4, r5
 800bf68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	220a      	movs	r2, #10
 800bf70:	4630      	mov	r0, r6
 800bf72:	3b30      	subs	r3, #48	; 0x30
 800bf74:	f7ff ff8c 	bl	800be90 <__multadd>
 800bf78:	45a0      	cmp	r8, r4
 800bf7a:	d1f5      	bne.n	800bf68 <__s2b+0x4c>
 800bf7c:	f1a5 0408 	sub.w	r4, r5, #8
 800bf80:	444c      	add	r4, r9
 800bf82:	1b2d      	subs	r5, r5, r4
 800bf84:	1963      	adds	r3, r4, r5
 800bf86:	42bb      	cmp	r3, r7
 800bf88:	db04      	blt.n	800bf94 <__s2b+0x78>
 800bf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf8e:	2509      	movs	r5, #9
 800bf90:	340a      	adds	r4, #10
 800bf92:	e7f6      	b.n	800bf82 <__s2b+0x66>
 800bf94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf98:	4601      	mov	r1, r0
 800bf9a:	220a      	movs	r2, #10
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	3b30      	subs	r3, #48	; 0x30
 800bfa0:	f7ff ff76 	bl	800be90 <__multadd>
 800bfa4:	e7ee      	b.n	800bf84 <__s2b+0x68>
 800bfa6:	bf00      	nop
 800bfa8:	0800d509 	.word	0x0800d509
 800bfac:	0800d5f8 	.word	0x0800d5f8

0800bfb0 <__hi0bits>:
 800bfb0:	0c02      	lsrs	r2, r0, #16
 800bfb2:	0412      	lsls	r2, r2, #16
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	b9ca      	cbnz	r2, 800bfec <__hi0bits+0x3c>
 800bfb8:	0403      	lsls	r3, r0, #16
 800bfba:	2010      	movs	r0, #16
 800bfbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bfc0:	bf04      	itt	eq
 800bfc2:	021b      	lsleq	r3, r3, #8
 800bfc4:	3008      	addeq	r0, #8
 800bfc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bfca:	bf04      	itt	eq
 800bfcc:	011b      	lsleq	r3, r3, #4
 800bfce:	3004      	addeq	r0, #4
 800bfd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bfd4:	bf04      	itt	eq
 800bfd6:	009b      	lsleq	r3, r3, #2
 800bfd8:	3002      	addeq	r0, #2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	db05      	blt.n	800bfea <__hi0bits+0x3a>
 800bfde:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bfe2:	f100 0001 	add.w	r0, r0, #1
 800bfe6:	bf08      	it	eq
 800bfe8:	2020      	moveq	r0, #32
 800bfea:	4770      	bx	lr
 800bfec:	2000      	movs	r0, #0
 800bfee:	e7e5      	b.n	800bfbc <__hi0bits+0xc>

0800bff0 <__lo0bits>:
 800bff0:	6803      	ldr	r3, [r0, #0]
 800bff2:	4602      	mov	r2, r0
 800bff4:	f013 0007 	ands.w	r0, r3, #7
 800bff8:	d00b      	beq.n	800c012 <__lo0bits+0x22>
 800bffa:	07d9      	lsls	r1, r3, #31
 800bffc:	d421      	bmi.n	800c042 <__lo0bits+0x52>
 800bffe:	0798      	lsls	r0, r3, #30
 800c000:	bf49      	itett	mi
 800c002:	085b      	lsrmi	r3, r3, #1
 800c004:	089b      	lsrpl	r3, r3, #2
 800c006:	2001      	movmi	r0, #1
 800c008:	6013      	strmi	r3, [r2, #0]
 800c00a:	bf5c      	itt	pl
 800c00c:	2002      	movpl	r0, #2
 800c00e:	6013      	strpl	r3, [r2, #0]
 800c010:	4770      	bx	lr
 800c012:	b299      	uxth	r1, r3
 800c014:	b909      	cbnz	r1, 800c01a <__lo0bits+0x2a>
 800c016:	2010      	movs	r0, #16
 800c018:	0c1b      	lsrs	r3, r3, #16
 800c01a:	b2d9      	uxtb	r1, r3
 800c01c:	b909      	cbnz	r1, 800c022 <__lo0bits+0x32>
 800c01e:	3008      	adds	r0, #8
 800c020:	0a1b      	lsrs	r3, r3, #8
 800c022:	0719      	lsls	r1, r3, #28
 800c024:	bf04      	itt	eq
 800c026:	091b      	lsreq	r3, r3, #4
 800c028:	3004      	addeq	r0, #4
 800c02a:	0799      	lsls	r1, r3, #30
 800c02c:	bf04      	itt	eq
 800c02e:	089b      	lsreq	r3, r3, #2
 800c030:	3002      	addeq	r0, #2
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d403      	bmi.n	800c03e <__lo0bits+0x4e>
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	f100 0001 	add.w	r0, r0, #1
 800c03c:	d003      	beq.n	800c046 <__lo0bits+0x56>
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	4770      	bx	lr
 800c042:	2000      	movs	r0, #0
 800c044:	4770      	bx	lr
 800c046:	2020      	movs	r0, #32
 800c048:	4770      	bx	lr
	...

0800c04c <__i2b>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	460c      	mov	r4, r1
 800c050:	2101      	movs	r1, #1
 800c052:	f7ff febb 	bl	800bdcc <_Balloc>
 800c056:	4602      	mov	r2, r0
 800c058:	b928      	cbnz	r0, 800c066 <__i2b+0x1a>
 800c05a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c05e:	4b04      	ldr	r3, [pc, #16]	; (800c070 <__i2b+0x24>)
 800c060:	4804      	ldr	r0, [pc, #16]	; (800c074 <__i2b+0x28>)
 800c062:	f7fe fa5b 	bl	800a51c <__assert_func>
 800c066:	2301      	movs	r3, #1
 800c068:	6144      	str	r4, [r0, #20]
 800c06a:	6103      	str	r3, [r0, #16]
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	bf00      	nop
 800c070:	0800d509 	.word	0x0800d509
 800c074:	0800d5f8 	.word	0x0800d5f8

0800c078 <__multiply>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	4691      	mov	r9, r2
 800c07e:	690a      	ldr	r2, [r1, #16]
 800c080:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c084:	460c      	mov	r4, r1
 800c086:	429a      	cmp	r2, r3
 800c088:	bfbe      	ittt	lt
 800c08a:	460b      	movlt	r3, r1
 800c08c:	464c      	movlt	r4, r9
 800c08e:	4699      	movlt	r9, r3
 800c090:	6927      	ldr	r7, [r4, #16]
 800c092:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	6861      	ldr	r1, [r4, #4]
 800c09a:	eb07 060a 	add.w	r6, r7, sl
 800c09e:	42b3      	cmp	r3, r6
 800c0a0:	b085      	sub	sp, #20
 800c0a2:	bfb8      	it	lt
 800c0a4:	3101      	addlt	r1, #1
 800c0a6:	f7ff fe91 	bl	800bdcc <_Balloc>
 800c0aa:	b930      	cbnz	r0, 800c0ba <__multiply+0x42>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	f240 115d 	movw	r1, #349	; 0x15d
 800c0b2:	4b43      	ldr	r3, [pc, #268]	; (800c1c0 <__multiply+0x148>)
 800c0b4:	4843      	ldr	r0, [pc, #268]	; (800c1c4 <__multiply+0x14c>)
 800c0b6:	f7fe fa31 	bl	800a51c <__assert_func>
 800c0ba:	f100 0514 	add.w	r5, r0, #20
 800c0be:	462b      	mov	r3, r5
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0c6:	4543      	cmp	r3, r8
 800c0c8:	d321      	bcc.n	800c10e <__multiply+0x96>
 800c0ca:	f104 0314 	add.w	r3, r4, #20
 800c0ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0d2:	f109 0314 	add.w	r3, r9, #20
 800c0d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0da:	9202      	str	r2, [sp, #8]
 800c0dc:	1b3a      	subs	r2, r7, r4
 800c0de:	3a15      	subs	r2, #21
 800c0e0:	f022 0203 	bic.w	r2, r2, #3
 800c0e4:	3204      	adds	r2, #4
 800c0e6:	f104 0115 	add.w	r1, r4, #21
 800c0ea:	428f      	cmp	r7, r1
 800c0ec:	bf38      	it	cc
 800c0ee:	2204      	movcc	r2, #4
 800c0f0:	9201      	str	r2, [sp, #4]
 800c0f2:	9a02      	ldr	r2, [sp, #8]
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d80c      	bhi.n	800c114 <__multiply+0x9c>
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	dd03      	ble.n	800c106 <__multiply+0x8e>
 800c0fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c102:	2b00      	cmp	r3, #0
 800c104:	d059      	beq.n	800c1ba <__multiply+0x142>
 800c106:	6106      	str	r6, [r0, #16]
 800c108:	b005      	add	sp, #20
 800c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10e:	f843 2b04 	str.w	r2, [r3], #4
 800c112:	e7d8      	b.n	800c0c6 <__multiply+0x4e>
 800c114:	f8b3 a000 	ldrh.w	sl, [r3]
 800c118:	f1ba 0f00 	cmp.w	sl, #0
 800c11c:	d023      	beq.n	800c166 <__multiply+0xee>
 800c11e:	46a9      	mov	r9, r5
 800c120:	f04f 0c00 	mov.w	ip, #0
 800c124:	f104 0e14 	add.w	lr, r4, #20
 800c128:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c12c:	f8d9 1000 	ldr.w	r1, [r9]
 800c130:	fa1f fb82 	uxth.w	fp, r2
 800c134:	b289      	uxth	r1, r1
 800c136:	fb0a 110b 	mla	r1, sl, fp, r1
 800c13a:	4461      	add	r1, ip
 800c13c:	f8d9 c000 	ldr.w	ip, [r9]
 800c140:	0c12      	lsrs	r2, r2, #16
 800c142:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c146:	fb0a c202 	mla	r2, sl, r2, ip
 800c14a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c14e:	b289      	uxth	r1, r1
 800c150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c154:	4577      	cmp	r7, lr
 800c156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c15a:	f849 1b04 	str.w	r1, [r9], #4
 800c15e:	d8e3      	bhi.n	800c128 <__multiply+0xb0>
 800c160:	9a01      	ldr	r2, [sp, #4]
 800c162:	f845 c002 	str.w	ip, [r5, r2]
 800c166:	9a03      	ldr	r2, [sp, #12]
 800c168:	3304      	adds	r3, #4
 800c16a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c16e:	f1b9 0f00 	cmp.w	r9, #0
 800c172:	d020      	beq.n	800c1b6 <__multiply+0x13e>
 800c174:	46ae      	mov	lr, r5
 800c176:	f04f 0a00 	mov.w	sl, #0
 800c17a:	6829      	ldr	r1, [r5, #0]
 800c17c:	f104 0c14 	add.w	ip, r4, #20
 800c180:	f8bc b000 	ldrh.w	fp, [ip]
 800c184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c188:	b289      	uxth	r1, r1
 800c18a:	fb09 220b 	mla	r2, r9, fp, r2
 800c18e:	4492      	add	sl, r2
 800c190:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c194:	f84e 1b04 	str.w	r1, [lr], #4
 800c198:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c19c:	f8be 1000 	ldrh.w	r1, [lr]
 800c1a0:	0c12      	lsrs	r2, r2, #16
 800c1a2:	fb09 1102 	mla	r1, r9, r2, r1
 800c1a6:	4567      	cmp	r7, ip
 800c1a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1b0:	d8e6      	bhi.n	800c180 <__multiply+0x108>
 800c1b2:	9a01      	ldr	r2, [sp, #4]
 800c1b4:	50a9      	str	r1, [r5, r2]
 800c1b6:	3504      	adds	r5, #4
 800c1b8:	e79b      	b.n	800c0f2 <__multiply+0x7a>
 800c1ba:	3e01      	subs	r6, #1
 800c1bc:	e79d      	b.n	800c0fa <__multiply+0x82>
 800c1be:	bf00      	nop
 800c1c0:	0800d509 	.word	0x0800d509
 800c1c4:	0800d5f8 	.word	0x0800d5f8

0800c1c8 <__pow5mult>:
 800c1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	f012 0203 	ands.w	r2, r2, #3
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	460f      	mov	r7, r1
 800c1d6:	d007      	beq.n	800c1e8 <__pow5mult+0x20>
 800c1d8:	4c25      	ldr	r4, [pc, #148]	; (800c270 <__pow5mult+0xa8>)
 800c1da:	3a01      	subs	r2, #1
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1e2:	f7ff fe55 	bl	800be90 <__multadd>
 800c1e6:	4607      	mov	r7, r0
 800c1e8:	10ad      	asrs	r5, r5, #2
 800c1ea:	d03d      	beq.n	800c268 <__pow5mult+0xa0>
 800c1ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1ee:	b97c      	cbnz	r4, 800c210 <__pow5mult+0x48>
 800c1f0:	2010      	movs	r0, #16
 800c1f2:	f7ff fdc3 	bl	800bd7c <malloc>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c1fa:	b928      	cbnz	r0, 800c208 <__pow5mult+0x40>
 800c1fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c200:	4b1c      	ldr	r3, [pc, #112]	; (800c274 <__pow5mult+0xac>)
 800c202:	481d      	ldr	r0, [pc, #116]	; (800c278 <__pow5mult+0xb0>)
 800c204:	f7fe f98a 	bl	800a51c <__assert_func>
 800c208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c20c:	6004      	str	r4, [r0, #0]
 800c20e:	60c4      	str	r4, [r0, #12]
 800c210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c218:	b94c      	cbnz	r4, 800c22e <__pow5mult+0x66>
 800c21a:	f240 2171 	movw	r1, #625	; 0x271
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ff14 	bl	800c04c <__i2b>
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	f8c8 0008 	str.w	r0, [r8, #8]
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	f04f 0900 	mov.w	r9, #0
 800c232:	07eb      	lsls	r3, r5, #31
 800c234:	d50a      	bpl.n	800c24c <__pow5mult+0x84>
 800c236:	4639      	mov	r1, r7
 800c238:	4622      	mov	r2, r4
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ff1c 	bl	800c078 <__multiply>
 800c240:	4680      	mov	r8, r0
 800c242:	4639      	mov	r1, r7
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff fe01 	bl	800be4c <_Bfree>
 800c24a:	4647      	mov	r7, r8
 800c24c:	106d      	asrs	r5, r5, #1
 800c24e:	d00b      	beq.n	800c268 <__pow5mult+0xa0>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	b938      	cbnz	r0, 800c264 <__pow5mult+0x9c>
 800c254:	4622      	mov	r2, r4
 800c256:	4621      	mov	r1, r4
 800c258:	4630      	mov	r0, r6
 800c25a:	f7ff ff0d 	bl	800c078 <__multiply>
 800c25e:	6020      	str	r0, [r4, #0]
 800c260:	f8c0 9000 	str.w	r9, [r0]
 800c264:	4604      	mov	r4, r0
 800c266:	e7e4      	b.n	800c232 <__pow5mult+0x6a>
 800c268:	4638      	mov	r0, r7
 800c26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26e:	bf00      	nop
 800c270:	0800d748 	.word	0x0800d748
 800c274:	0800d2f0 	.word	0x0800d2f0
 800c278:	0800d5f8 	.word	0x0800d5f8

0800c27c <__lshift>:
 800c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c280:	460c      	mov	r4, r1
 800c282:	4607      	mov	r7, r0
 800c284:	4691      	mov	r9, r2
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	6849      	ldr	r1, [r1, #4]
 800c28a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c294:	f108 0601 	add.w	r6, r8, #1
 800c298:	42b3      	cmp	r3, r6
 800c29a:	db0b      	blt.n	800c2b4 <__lshift+0x38>
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff fd95 	bl	800bdcc <_Balloc>
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	b948      	cbnz	r0, 800c2ba <__lshift+0x3e>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2ac:	4b29      	ldr	r3, [pc, #164]	; (800c354 <__lshift+0xd8>)
 800c2ae:	482a      	ldr	r0, [pc, #168]	; (800c358 <__lshift+0xdc>)
 800c2b0:	f7fe f934 	bl	800a51c <__assert_func>
 800c2b4:	3101      	adds	r1, #1
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	e7ee      	b.n	800c298 <__lshift+0x1c>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f100 0114 	add.w	r1, r0, #20
 800c2c0:	f100 0210 	add.w	r2, r0, #16
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	4553      	cmp	r3, sl
 800c2c8:	db37      	blt.n	800c33a <__lshift+0xbe>
 800c2ca:	6920      	ldr	r0, [r4, #16]
 800c2cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2d0:	f104 0314 	add.w	r3, r4, #20
 800c2d4:	f019 091f 	ands.w	r9, r9, #31
 800c2d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2e0:	d02f      	beq.n	800c342 <__lshift+0xc6>
 800c2e2:	468a      	mov	sl, r1
 800c2e4:	f04f 0c00 	mov.w	ip, #0
 800c2e8:	f1c9 0e20 	rsb	lr, r9, #32
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	fa02 f209 	lsl.w	r2, r2, r9
 800c2f2:	ea42 020c 	orr.w	r2, r2, ip
 800c2f6:	f84a 2b04 	str.w	r2, [sl], #4
 800c2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2fe:	4298      	cmp	r0, r3
 800c300:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c304:	d8f2      	bhi.n	800c2ec <__lshift+0x70>
 800c306:	1b03      	subs	r3, r0, r4
 800c308:	3b15      	subs	r3, #21
 800c30a:	f023 0303 	bic.w	r3, r3, #3
 800c30e:	3304      	adds	r3, #4
 800c310:	f104 0215 	add.w	r2, r4, #21
 800c314:	4290      	cmp	r0, r2
 800c316:	bf38      	it	cc
 800c318:	2304      	movcc	r3, #4
 800c31a:	f841 c003 	str.w	ip, [r1, r3]
 800c31e:	f1bc 0f00 	cmp.w	ip, #0
 800c322:	d001      	beq.n	800c328 <__lshift+0xac>
 800c324:	f108 0602 	add.w	r6, r8, #2
 800c328:	3e01      	subs	r6, #1
 800c32a:	4638      	mov	r0, r7
 800c32c:	4621      	mov	r1, r4
 800c32e:	612e      	str	r6, [r5, #16]
 800c330:	f7ff fd8c 	bl	800be4c <_Bfree>
 800c334:	4628      	mov	r0, r5
 800c336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c33e:	3301      	adds	r3, #1
 800c340:	e7c1      	b.n	800c2c6 <__lshift+0x4a>
 800c342:	3904      	subs	r1, #4
 800c344:	f853 2b04 	ldr.w	r2, [r3], #4
 800c348:	4298      	cmp	r0, r3
 800c34a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c34e:	d8f9      	bhi.n	800c344 <__lshift+0xc8>
 800c350:	e7ea      	b.n	800c328 <__lshift+0xac>
 800c352:	bf00      	nop
 800c354:	0800d509 	.word	0x0800d509
 800c358:	0800d5f8 	.word	0x0800d5f8

0800c35c <__mcmp>:
 800c35c:	4603      	mov	r3, r0
 800c35e:	690a      	ldr	r2, [r1, #16]
 800c360:	6900      	ldr	r0, [r0, #16]
 800c362:	b530      	push	{r4, r5, lr}
 800c364:	1a80      	subs	r0, r0, r2
 800c366:	d10d      	bne.n	800c384 <__mcmp+0x28>
 800c368:	3314      	adds	r3, #20
 800c36a:	3114      	adds	r1, #20
 800c36c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c370:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c374:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c378:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c37c:	4295      	cmp	r5, r2
 800c37e:	d002      	beq.n	800c386 <__mcmp+0x2a>
 800c380:	d304      	bcc.n	800c38c <__mcmp+0x30>
 800c382:	2001      	movs	r0, #1
 800c384:	bd30      	pop	{r4, r5, pc}
 800c386:	42a3      	cmp	r3, r4
 800c388:	d3f4      	bcc.n	800c374 <__mcmp+0x18>
 800c38a:	e7fb      	b.n	800c384 <__mcmp+0x28>
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	e7f8      	b.n	800c384 <__mcmp+0x28>
	...

0800c394 <__mdiff>:
 800c394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	460d      	mov	r5, r1
 800c39a:	4607      	mov	r7, r0
 800c39c:	4611      	mov	r1, r2
 800c39e:	4628      	mov	r0, r5
 800c3a0:	4614      	mov	r4, r2
 800c3a2:	f7ff ffdb 	bl	800c35c <__mcmp>
 800c3a6:	1e06      	subs	r6, r0, #0
 800c3a8:	d111      	bne.n	800c3ce <__mdiff+0x3a>
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f7ff fd0d 	bl	800bdcc <_Balloc>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	b928      	cbnz	r0, 800c3c2 <__mdiff+0x2e>
 800c3b6:	f240 2132 	movw	r1, #562	; 0x232
 800c3ba:	4b3a      	ldr	r3, [pc, #232]	; (800c4a4 <__mdiff+0x110>)
 800c3bc:	483a      	ldr	r0, [pc, #232]	; (800c4a8 <__mdiff+0x114>)
 800c3be:	f7fe f8ad 	bl	800a51c <__assert_func>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ce:	bfa4      	itt	ge
 800c3d0:	4623      	movge	r3, r4
 800c3d2:	462c      	movge	r4, r5
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	6861      	ldr	r1, [r4, #4]
 800c3d8:	bfa6      	itte	ge
 800c3da:	461d      	movge	r5, r3
 800c3dc:	2600      	movge	r6, #0
 800c3de:	2601      	movlt	r6, #1
 800c3e0:	f7ff fcf4 	bl	800bdcc <_Balloc>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	b918      	cbnz	r0, 800c3f0 <__mdiff+0x5c>
 800c3e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3ec:	4b2d      	ldr	r3, [pc, #180]	; (800c4a4 <__mdiff+0x110>)
 800c3ee:	e7e5      	b.n	800c3bc <__mdiff+0x28>
 800c3f0:	f102 0814 	add.w	r8, r2, #20
 800c3f4:	46c2      	mov	sl, r8
 800c3f6:	f04f 0c00 	mov.w	ip, #0
 800c3fa:	6927      	ldr	r7, [r4, #16]
 800c3fc:	60c6      	str	r6, [r0, #12]
 800c3fe:	692e      	ldr	r6, [r5, #16]
 800c400:	f104 0014 	add.w	r0, r4, #20
 800c404:	f105 0914 	add.w	r9, r5, #20
 800c408:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c40c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c410:	3410      	adds	r4, #16
 800c412:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c416:	f859 3b04 	ldr.w	r3, [r9], #4
 800c41a:	fa1f f18b 	uxth.w	r1, fp
 800c41e:	448c      	add	ip, r1
 800c420:	b299      	uxth	r1, r3
 800c422:	0c1b      	lsrs	r3, r3, #16
 800c424:	ebac 0101 	sub.w	r1, ip, r1
 800c428:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c42c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c430:	b289      	uxth	r1, r1
 800c432:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c436:	454e      	cmp	r6, r9
 800c438:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c43c:	f84a 3b04 	str.w	r3, [sl], #4
 800c440:	d8e7      	bhi.n	800c412 <__mdiff+0x7e>
 800c442:	1b73      	subs	r3, r6, r5
 800c444:	3b15      	subs	r3, #21
 800c446:	f023 0303 	bic.w	r3, r3, #3
 800c44a:	3515      	adds	r5, #21
 800c44c:	3304      	adds	r3, #4
 800c44e:	42ae      	cmp	r6, r5
 800c450:	bf38      	it	cc
 800c452:	2304      	movcc	r3, #4
 800c454:	4418      	add	r0, r3
 800c456:	4443      	add	r3, r8
 800c458:	461e      	mov	r6, r3
 800c45a:	4605      	mov	r5, r0
 800c45c:	4575      	cmp	r5, lr
 800c45e:	d30e      	bcc.n	800c47e <__mdiff+0xea>
 800c460:	f10e 0103 	add.w	r1, lr, #3
 800c464:	1a09      	subs	r1, r1, r0
 800c466:	f021 0103 	bic.w	r1, r1, #3
 800c46a:	3803      	subs	r0, #3
 800c46c:	4586      	cmp	lr, r0
 800c46e:	bf38      	it	cc
 800c470:	2100      	movcc	r1, #0
 800c472:	4419      	add	r1, r3
 800c474:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c478:	b18b      	cbz	r3, 800c49e <__mdiff+0x10a>
 800c47a:	6117      	str	r7, [r2, #16]
 800c47c:	e7a4      	b.n	800c3c8 <__mdiff+0x34>
 800c47e:	f855 8b04 	ldr.w	r8, [r5], #4
 800c482:	fa1f f188 	uxth.w	r1, r8
 800c486:	4461      	add	r1, ip
 800c488:	140c      	asrs	r4, r1, #16
 800c48a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c48e:	b289      	uxth	r1, r1
 800c490:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c494:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c498:	f846 1b04 	str.w	r1, [r6], #4
 800c49c:	e7de      	b.n	800c45c <__mdiff+0xc8>
 800c49e:	3f01      	subs	r7, #1
 800c4a0:	e7e8      	b.n	800c474 <__mdiff+0xe0>
 800c4a2:	bf00      	nop
 800c4a4:	0800d509 	.word	0x0800d509
 800c4a8:	0800d5f8 	.word	0x0800d5f8

0800c4ac <__ulp>:
 800c4ac:	4b11      	ldr	r3, [pc, #68]	; (800c4f4 <__ulp+0x48>)
 800c4ae:	400b      	ands	r3, r1
 800c4b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	dd02      	ble.n	800c4be <__ulp+0x12>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4770      	bx	lr
 800c4be:	425b      	negs	r3, r3
 800c4c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f04f 0100 	mov.w	r1, #0
 800c4cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c4d0:	da04      	bge.n	800c4dc <__ulp+0x30>
 800c4d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4d6:	fa43 f102 	asr.w	r1, r3, r2
 800c4da:	4770      	bx	lr
 800c4dc:	f1a2 0314 	sub.w	r3, r2, #20
 800c4e0:	2b1e      	cmp	r3, #30
 800c4e2:	bfd6      	itet	le
 800c4e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c4e8:	2301      	movgt	r3, #1
 800c4ea:	fa22 f303 	lsrle.w	r3, r2, r3
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	7ff00000 	.word	0x7ff00000

0800c4f8 <__b2d>:
 800c4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4fc:	6907      	ldr	r7, [r0, #16]
 800c4fe:	f100 0914 	add.w	r9, r0, #20
 800c502:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c506:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c50a:	f1a7 0804 	sub.w	r8, r7, #4
 800c50e:	4630      	mov	r0, r6
 800c510:	f7ff fd4e 	bl	800bfb0 <__hi0bits>
 800c514:	f1c0 0320 	rsb	r3, r0, #32
 800c518:	280a      	cmp	r0, #10
 800c51a:	600b      	str	r3, [r1, #0]
 800c51c:	491f      	ldr	r1, [pc, #124]	; (800c59c <__b2d+0xa4>)
 800c51e:	dc17      	bgt.n	800c550 <__b2d+0x58>
 800c520:	45c1      	cmp	r9, r8
 800c522:	bf28      	it	cs
 800c524:	2200      	movcs	r2, #0
 800c526:	f1c0 0c0b 	rsb	ip, r0, #11
 800c52a:	fa26 f30c 	lsr.w	r3, r6, ip
 800c52e:	bf38      	it	cc
 800c530:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c534:	ea43 0501 	orr.w	r5, r3, r1
 800c538:	f100 0315 	add.w	r3, r0, #21
 800c53c:	fa06 f303 	lsl.w	r3, r6, r3
 800c540:	fa22 f20c 	lsr.w	r2, r2, ip
 800c544:	ea43 0402 	orr.w	r4, r3, r2
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c550:	45c1      	cmp	r9, r8
 800c552:	bf2e      	itee	cs
 800c554:	2200      	movcs	r2, #0
 800c556:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c55a:	f1a7 0808 	subcc.w	r8, r7, #8
 800c55e:	f1b0 030b 	subs.w	r3, r0, #11
 800c562:	d016      	beq.n	800c592 <__b2d+0x9a>
 800c564:	f1c3 0720 	rsb	r7, r3, #32
 800c568:	fa22 f107 	lsr.w	r1, r2, r7
 800c56c:	45c8      	cmp	r8, r9
 800c56e:	fa06 f603 	lsl.w	r6, r6, r3
 800c572:	ea46 0601 	orr.w	r6, r6, r1
 800c576:	bf94      	ite	ls
 800c578:	2100      	movls	r1, #0
 800c57a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c57e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c582:	fa02 f003 	lsl.w	r0, r2, r3
 800c586:	40f9      	lsrs	r1, r7
 800c588:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c58c:	ea40 0401 	orr.w	r4, r0, r1
 800c590:	e7da      	b.n	800c548 <__b2d+0x50>
 800c592:	4614      	mov	r4, r2
 800c594:	ea46 0501 	orr.w	r5, r6, r1
 800c598:	e7d6      	b.n	800c548 <__b2d+0x50>
 800c59a:	bf00      	nop
 800c59c:	3ff00000 	.word	0x3ff00000

0800c5a0 <__d2b>:
 800c5a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c5aa:	4690      	mov	r8, r2
 800c5ac:	461d      	mov	r5, r3
 800c5ae:	f7ff fc0d 	bl	800bdcc <_Balloc>
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	b930      	cbnz	r0, 800c5c4 <__d2b+0x24>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	f240 310a 	movw	r1, #778	; 0x30a
 800c5bc:	4b24      	ldr	r3, [pc, #144]	; (800c650 <__d2b+0xb0>)
 800c5be:	4825      	ldr	r0, [pc, #148]	; (800c654 <__d2b+0xb4>)
 800c5c0:	f7fd ffac 	bl	800a51c <__assert_func>
 800c5c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c5c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c5cc:	bb2d      	cbnz	r5, 800c61a <__d2b+0x7a>
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5d4:	d026      	beq.n	800c624 <__d2b+0x84>
 800c5d6:	4668      	mov	r0, sp
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	f7ff fd09 	bl	800bff0 <__lo0bits>
 800c5de:	9900      	ldr	r1, [sp, #0]
 800c5e0:	b1f0      	cbz	r0, 800c620 <__d2b+0x80>
 800c5e2:	9a01      	ldr	r2, [sp, #4]
 800c5e4:	f1c0 0320 	rsb	r3, r0, #32
 800c5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	40c2      	lsrs	r2, r0
 800c5f0:	6163      	str	r3, [r4, #20]
 800c5f2:	9201      	str	r2, [sp, #4]
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	bf14      	ite	ne
 800c5fa:	2102      	movne	r1, #2
 800c5fc:	2101      	moveq	r1, #1
 800c5fe:	61a3      	str	r3, [r4, #24]
 800c600:	6121      	str	r1, [r4, #16]
 800c602:	b1c5      	cbz	r5, 800c636 <__d2b+0x96>
 800c604:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c608:	4405      	add	r5, r0
 800c60a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c60e:	603d      	str	r5, [r7, #0]
 800c610:	6030      	str	r0, [r6, #0]
 800c612:	4620      	mov	r0, r4
 800c614:	b002      	add	sp, #8
 800c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c61e:	e7d6      	b.n	800c5ce <__d2b+0x2e>
 800c620:	6161      	str	r1, [r4, #20]
 800c622:	e7e7      	b.n	800c5f4 <__d2b+0x54>
 800c624:	a801      	add	r0, sp, #4
 800c626:	f7ff fce3 	bl	800bff0 <__lo0bits>
 800c62a:	2101      	movs	r1, #1
 800c62c:	9b01      	ldr	r3, [sp, #4]
 800c62e:	6121      	str	r1, [r4, #16]
 800c630:	6163      	str	r3, [r4, #20]
 800c632:	3020      	adds	r0, #32
 800c634:	e7e5      	b.n	800c602 <__d2b+0x62>
 800c636:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c63a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c63e:	6038      	str	r0, [r7, #0]
 800c640:	6918      	ldr	r0, [r3, #16]
 800c642:	f7ff fcb5 	bl	800bfb0 <__hi0bits>
 800c646:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c64a:	6031      	str	r1, [r6, #0]
 800c64c:	e7e1      	b.n	800c612 <__d2b+0x72>
 800c64e:	bf00      	nop
 800c650:	0800d509 	.word	0x0800d509
 800c654:	0800d5f8 	.word	0x0800d5f8

0800c658 <__ratio>:
 800c658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	4688      	mov	r8, r1
 800c65e:	4669      	mov	r1, sp
 800c660:	4681      	mov	r9, r0
 800c662:	f7ff ff49 	bl	800c4f8 <__b2d>
 800c666:	460f      	mov	r7, r1
 800c668:	4604      	mov	r4, r0
 800c66a:	460d      	mov	r5, r1
 800c66c:	4640      	mov	r0, r8
 800c66e:	a901      	add	r1, sp, #4
 800c670:	f7ff ff42 	bl	800c4f8 <__b2d>
 800c674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c678:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c67c:	468b      	mov	fp, r1
 800c67e:	eba3 0c02 	sub.w	ip, r3, r2
 800c682:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bfd5      	itete	le
 800c690:	460a      	movle	r2, r1
 800c692:	462a      	movgt	r2, r5
 800c694:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c698:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c69c:	bfd8      	it	le
 800c69e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f7f4 f969 	bl	8000980 <__aeabi_ddiv>
 800c6ae:	b003      	add	sp, #12
 800c6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6b4 <__copybits>:
 800c6b4:	3901      	subs	r1, #1
 800c6b6:	b570      	push	{r4, r5, r6, lr}
 800c6b8:	1149      	asrs	r1, r1, #5
 800c6ba:	6914      	ldr	r4, [r2, #16]
 800c6bc:	3101      	adds	r1, #1
 800c6be:	f102 0314 	add.w	r3, r2, #20
 800c6c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c6c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c6ca:	1f05      	subs	r5, r0, #4
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d30c      	bcc.n	800c6ea <__copybits+0x36>
 800c6d0:	1aa3      	subs	r3, r4, r2
 800c6d2:	3b11      	subs	r3, #17
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	3211      	adds	r2, #17
 800c6da:	42a2      	cmp	r2, r4
 800c6dc:	bf88      	it	hi
 800c6de:	2300      	movhi	r3, #0
 800c6e0:	4418      	add	r0, r3
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4288      	cmp	r0, r1
 800c6e6:	d305      	bcc.n	800c6f4 <__copybits+0x40>
 800c6e8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6f2:	e7eb      	b.n	800c6cc <__copybits+0x18>
 800c6f4:	f840 3b04 	str.w	r3, [r0], #4
 800c6f8:	e7f4      	b.n	800c6e4 <__copybits+0x30>

0800c6fa <__any_on>:
 800c6fa:	f100 0214 	add.w	r2, r0, #20
 800c6fe:	6900      	ldr	r0, [r0, #16]
 800c700:	114b      	asrs	r3, r1, #5
 800c702:	4298      	cmp	r0, r3
 800c704:	b510      	push	{r4, lr}
 800c706:	db11      	blt.n	800c72c <__any_on+0x32>
 800c708:	dd0a      	ble.n	800c720 <__any_on+0x26>
 800c70a:	f011 011f 	ands.w	r1, r1, #31
 800c70e:	d007      	beq.n	800c720 <__any_on+0x26>
 800c710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c714:	fa24 f001 	lsr.w	r0, r4, r1
 800c718:	fa00 f101 	lsl.w	r1, r0, r1
 800c71c:	428c      	cmp	r4, r1
 800c71e:	d10b      	bne.n	800c738 <__any_on+0x3e>
 800c720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c724:	4293      	cmp	r3, r2
 800c726:	d803      	bhi.n	800c730 <__any_on+0x36>
 800c728:	2000      	movs	r0, #0
 800c72a:	bd10      	pop	{r4, pc}
 800c72c:	4603      	mov	r3, r0
 800c72e:	e7f7      	b.n	800c720 <__any_on+0x26>
 800c730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c734:	2900      	cmp	r1, #0
 800c736:	d0f5      	beq.n	800c724 <__any_on+0x2a>
 800c738:	2001      	movs	r0, #1
 800c73a:	e7f6      	b.n	800c72a <__any_on+0x30>

0800c73c <_calloc_r>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	fba1 5402 	umull	r5, r4, r1, r2
 800c742:	b934      	cbnz	r4, 800c752 <_calloc_r+0x16>
 800c744:	4629      	mov	r1, r5
 800c746:	f000 f875 	bl	800c834 <_malloc_r>
 800c74a:	4606      	mov	r6, r0
 800c74c:	b928      	cbnz	r0, 800c75a <_calloc_r+0x1e>
 800c74e:	4630      	mov	r0, r6
 800c750:	bd70      	pop	{r4, r5, r6, pc}
 800c752:	220c      	movs	r2, #12
 800c754:	2600      	movs	r6, #0
 800c756:	6002      	str	r2, [r0, #0]
 800c758:	e7f9      	b.n	800c74e <_calloc_r+0x12>
 800c75a:	462a      	mov	r2, r5
 800c75c:	4621      	mov	r1, r4
 800c75e:	f7fc f88d 	bl	800887c <memset>
 800c762:	e7f4      	b.n	800c74e <_calloc_r+0x12>

0800c764 <_free_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4605      	mov	r5, r0
 800c768:	2900      	cmp	r1, #0
 800c76a:	d040      	beq.n	800c7ee <_free_r+0x8a>
 800c76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c770:	1f0c      	subs	r4, r1, #4
 800c772:	2b00      	cmp	r3, #0
 800c774:	bfb8      	it	lt
 800c776:	18e4      	addlt	r4, r4, r3
 800c778:	f000 fc76 	bl	800d068 <__malloc_lock>
 800c77c:	4a1c      	ldr	r2, [pc, #112]	; (800c7f0 <_free_r+0x8c>)
 800c77e:	6813      	ldr	r3, [r2, #0]
 800c780:	b933      	cbnz	r3, 800c790 <_free_r+0x2c>
 800c782:	6063      	str	r3, [r4, #4]
 800c784:	6014      	str	r4, [r2, #0]
 800c786:	4628      	mov	r0, r5
 800c788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c78c:	f000 bc72 	b.w	800d074 <__malloc_unlock>
 800c790:	42a3      	cmp	r3, r4
 800c792:	d908      	bls.n	800c7a6 <_free_r+0x42>
 800c794:	6820      	ldr	r0, [r4, #0]
 800c796:	1821      	adds	r1, r4, r0
 800c798:	428b      	cmp	r3, r1
 800c79a:	bf01      	itttt	eq
 800c79c:	6819      	ldreq	r1, [r3, #0]
 800c79e:	685b      	ldreq	r3, [r3, #4]
 800c7a0:	1809      	addeq	r1, r1, r0
 800c7a2:	6021      	streq	r1, [r4, #0]
 800c7a4:	e7ed      	b.n	800c782 <_free_r+0x1e>
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	b10b      	cbz	r3, 800c7b0 <_free_r+0x4c>
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	d9fa      	bls.n	800c7a6 <_free_r+0x42>
 800c7b0:	6811      	ldr	r1, [r2, #0]
 800c7b2:	1850      	adds	r0, r2, r1
 800c7b4:	42a0      	cmp	r0, r4
 800c7b6:	d10b      	bne.n	800c7d0 <_free_r+0x6c>
 800c7b8:	6820      	ldr	r0, [r4, #0]
 800c7ba:	4401      	add	r1, r0
 800c7bc:	1850      	adds	r0, r2, r1
 800c7be:	4283      	cmp	r3, r0
 800c7c0:	6011      	str	r1, [r2, #0]
 800c7c2:	d1e0      	bne.n	800c786 <_free_r+0x22>
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4401      	add	r1, r0
 800c7ca:	6011      	str	r1, [r2, #0]
 800c7cc:	6053      	str	r3, [r2, #4]
 800c7ce:	e7da      	b.n	800c786 <_free_r+0x22>
 800c7d0:	d902      	bls.n	800c7d8 <_free_r+0x74>
 800c7d2:	230c      	movs	r3, #12
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	e7d6      	b.n	800c786 <_free_r+0x22>
 800c7d8:	6820      	ldr	r0, [r4, #0]
 800c7da:	1821      	adds	r1, r4, r0
 800c7dc:	428b      	cmp	r3, r1
 800c7de:	bf01      	itttt	eq
 800c7e0:	6819      	ldreq	r1, [r3, #0]
 800c7e2:	685b      	ldreq	r3, [r3, #4]
 800c7e4:	1809      	addeq	r1, r1, r0
 800c7e6:	6021      	streq	r1, [r4, #0]
 800c7e8:	6063      	str	r3, [r4, #4]
 800c7ea:	6054      	str	r4, [r2, #4]
 800c7ec:	e7cb      	b.n	800c786 <_free_r+0x22>
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	20000c7c 	.word	0x20000c7c

0800c7f4 <sbrk_aligned>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	4e0e      	ldr	r6, [pc, #56]	; (800c830 <sbrk_aligned+0x3c>)
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	6831      	ldr	r1, [r6, #0]
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	b911      	cbnz	r1, 800c806 <sbrk_aligned+0x12>
 800c800:	f000 fb46 	bl	800ce90 <_sbrk_r>
 800c804:	6030      	str	r0, [r6, #0]
 800c806:	4621      	mov	r1, r4
 800c808:	4628      	mov	r0, r5
 800c80a:	f000 fb41 	bl	800ce90 <_sbrk_r>
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	d00a      	beq.n	800c828 <sbrk_aligned+0x34>
 800c812:	1cc4      	adds	r4, r0, #3
 800c814:	f024 0403 	bic.w	r4, r4, #3
 800c818:	42a0      	cmp	r0, r4
 800c81a:	d007      	beq.n	800c82c <sbrk_aligned+0x38>
 800c81c:	1a21      	subs	r1, r4, r0
 800c81e:	4628      	mov	r0, r5
 800c820:	f000 fb36 	bl	800ce90 <_sbrk_r>
 800c824:	3001      	adds	r0, #1
 800c826:	d101      	bne.n	800c82c <sbrk_aligned+0x38>
 800c828:	f04f 34ff 	mov.w	r4, #4294967295
 800c82c:	4620      	mov	r0, r4
 800c82e:	bd70      	pop	{r4, r5, r6, pc}
 800c830:	20000c80 	.word	0x20000c80

0800c834 <_malloc_r>:
 800c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c838:	1ccd      	adds	r5, r1, #3
 800c83a:	f025 0503 	bic.w	r5, r5, #3
 800c83e:	3508      	adds	r5, #8
 800c840:	2d0c      	cmp	r5, #12
 800c842:	bf38      	it	cc
 800c844:	250c      	movcc	r5, #12
 800c846:	2d00      	cmp	r5, #0
 800c848:	4607      	mov	r7, r0
 800c84a:	db01      	blt.n	800c850 <_malloc_r+0x1c>
 800c84c:	42a9      	cmp	r1, r5
 800c84e:	d905      	bls.n	800c85c <_malloc_r+0x28>
 800c850:	230c      	movs	r3, #12
 800c852:	2600      	movs	r6, #0
 800c854:	603b      	str	r3, [r7, #0]
 800c856:	4630      	mov	r0, r6
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85c:	4e2e      	ldr	r6, [pc, #184]	; (800c918 <_malloc_r+0xe4>)
 800c85e:	f000 fc03 	bl	800d068 <__malloc_lock>
 800c862:	6833      	ldr	r3, [r6, #0]
 800c864:	461c      	mov	r4, r3
 800c866:	bb34      	cbnz	r4, 800c8b6 <_malloc_r+0x82>
 800c868:	4629      	mov	r1, r5
 800c86a:	4638      	mov	r0, r7
 800c86c:	f7ff ffc2 	bl	800c7f4 <sbrk_aligned>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	4604      	mov	r4, r0
 800c874:	d14d      	bne.n	800c912 <_malloc_r+0xde>
 800c876:	6834      	ldr	r4, [r6, #0]
 800c878:	4626      	mov	r6, r4
 800c87a:	2e00      	cmp	r6, #0
 800c87c:	d140      	bne.n	800c900 <_malloc_r+0xcc>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	4631      	mov	r1, r6
 800c882:	4638      	mov	r0, r7
 800c884:	eb04 0803 	add.w	r8, r4, r3
 800c888:	f000 fb02 	bl	800ce90 <_sbrk_r>
 800c88c:	4580      	cmp	r8, r0
 800c88e:	d13a      	bne.n	800c906 <_malloc_r+0xd2>
 800c890:	6821      	ldr	r1, [r4, #0]
 800c892:	3503      	adds	r5, #3
 800c894:	1a6d      	subs	r5, r5, r1
 800c896:	f025 0503 	bic.w	r5, r5, #3
 800c89a:	3508      	adds	r5, #8
 800c89c:	2d0c      	cmp	r5, #12
 800c89e:	bf38      	it	cc
 800c8a0:	250c      	movcc	r5, #12
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	f7ff ffa5 	bl	800c7f4 <sbrk_aligned>
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	d02b      	beq.n	800c906 <_malloc_r+0xd2>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	442b      	add	r3, r5
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	e00e      	b.n	800c8d4 <_malloc_r+0xa0>
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	1b52      	subs	r2, r2, r5
 800c8ba:	d41e      	bmi.n	800c8fa <_malloc_r+0xc6>
 800c8bc:	2a0b      	cmp	r2, #11
 800c8be:	d916      	bls.n	800c8ee <_malloc_r+0xba>
 800c8c0:	1961      	adds	r1, r4, r5
 800c8c2:	42a3      	cmp	r3, r4
 800c8c4:	6025      	str	r5, [r4, #0]
 800c8c6:	bf18      	it	ne
 800c8c8:	6059      	strne	r1, [r3, #4]
 800c8ca:	6863      	ldr	r3, [r4, #4]
 800c8cc:	bf08      	it	eq
 800c8ce:	6031      	streq	r1, [r6, #0]
 800c8d0:	5162      	str	r2, [r4, r5]
 800c8d2:	604b      	str	r3, [r1, #4]
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	f104 060b 	add.w	r6, r4, #11
 800c8da:	f000 fbcb 	bl	800d074 <__malloc_unlock>
 800c8de:	f026 0607 	bic.w	r6, r6, #7
 800c8e2:	1d23      	adds	r3, r4, #4
 800c8e4:	1af2      	subs	r2, r6, r3
 800c8e6:	d0b6      	beq.n	800c856 <_malloc_r+0x22>
 800c8e8:	1b9b      	subs	r3, r3, r6
 800c8ea:	50a3      	str	r3, [r4, r2]
 800c8ec:	e7b3      	b.n	800c856 <_malloc_r+0x22>
 800c8ee:	6862      	ldr	r2, [r4, #4]
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	bf0c      	ite	eq
 800c8f4:	6032      	streq	r2, [r6, #0]
 800c8f6:	605a      	strne	r2, [r3, #4]
 800c8f8:	e7ec      	b.n	800c8d4 <_malloc_r+0xa0>
 800c8fa:	4623      	mov	r3, r4
 800c8fc:	6864      	ldr	r4, [r4, #4]
 800c8fe:	e7b2      	b.n	800c866 <_malloc_r+0x32>
 800c900:	4634      	mov	r4, r6
 800c902:	6876      	ldr	r6, [r6, #4]
 800c904:	e7b9      	b.n	800c87a <_malloc_r+0x46>
 800c906:	230c      	movs	r3, #12
 800c908:	4638      	mov	r0, r7
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	f000 fbb2 	bl	800d074 <__malloc_unlock>
 800c910:	e7a1      	b.n	800c856 <_malloc_r+0x22>
 800c912:	6025      	str	r5, [r4, #0]
 800c914:	e7de      	b.n	800c8d4 <_malloc_r+0xa0>
 800c916:	bf00      	nop
 800c918:	20000c7c 	.word	0x20000c7c

0800c91c <__ssputs_r>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	688e      	ldr	r6, [r1, #8]
 800c922:	4682      	mov	sl, r0
 800c924:	429e      	cmp	r6, r3
 800c926:	460c      	mov	r4, r1
 800c928:	4690      	mov	r8, r2
 800c92a:	461f      	mov	r7, r3
 800c92c:	d838      	bhi.n	800c9a0 <__ssputs_r+0x84>
 800c92e:	898a      	ldrh	r2, [r1, #12]
 800c930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c934:	d032      	beq.n	800c99c <__ssputs_r+0x80>
 800c936:	6825      	ldr	r5, [r4, #0]
 800c938:	6909      	ldr	r1, [r1, #16]
 800c93a:	3301      	adds	r3, #1
 800c93c:	eba5 0901 	sub.w	r9, r5, r1
 800c940:	6965      	ldr	r5, [r4, #20]
 800c942:	444b      	add	r3, r9
 800c944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c94c:	106d      	asrs	r5, r5, #1
 800c94e:	429d      	cmp	r5, r3
 800c950:	bf38      	it	cc
 800c952:	461d      	movcc	r5, r3
 800c954:	0553      	lsls	r3, r2, #21
 800c956:	d531      	bpl.n	800c9bc <__ssputs_r+0xa0>
 800c958:	4629      	mov	r1, r5
 800c95a:	f7ff ff6b 	bl	800c834 <_malloc_r>
 800c95e:	4606      	mov	r6, r0
 800c960:	b950      	cbnz	r0, 800c978 <__ssputs_r+0x5c>
 800c962:	230c      	movs	r3, #12
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	f8ca 3000 	str.w	r3, [sl]
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c972:	81a3      	strh	r3, [r4, #12]
 800c974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c978:	464a      	mov	r2, r9
 800c97a:	6921      	ldr	r1, [r4, #16]
 800c97c:	f7fb ff70 	bl	8008860 <memcpy>
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c98a:	81a3      	strh	r3, [r4, #12]
 800c98c:	6126      	str	r6, [r4, #16]
 800c98e:	444e      	add	r6, r9
 800c990:	6026      	str	r6, [r4, #0]
 800c992:	463e      	mov	r6, r7
 800c994:	6165      	str	r5, [r4, #20]
 800c996:	eba5 0509 	sub.w	r5, r5, r9
 800c99a:	60a5      	str	r5, [r4, #8]
 800c99c:	42be      	cmp	r6, r7
 800c99e:	d900      	bls.n	800c9a2 <__ssputs_r+0x86>
 800c9a0:	463e      	mov	r6, r7
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	4641      	mov	r1, r8
 800c9a6:	6820      	ldr	r0, [r4, #0]
 800c9a8:	f000 fb44 	bl	800d034 <memmove>
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	1b9b      	subs	r3, r3, r6
 800c9b2:	60a3      	str	r3, [r4, #8]
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	4433      	add	r3, r6
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	e7db      	b.n	800c974 <__ssputs_r+0x58>
 800c9bc:	462a      	mov	r2, r5
 800c9be:	f000 fb5f 	bl	800d080 <_realloc_r>
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d1e1      	bne.n	800c98c <__ssputs_r+0x70>
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	6921      	ldr	r1, [r4, #16]
 800c9cc:	f7ff feca 	bl	800c764 <_free_r>
 800c9d0:	e7c7      	b.n	800c962 <__ssputs_r+0x46>
	...

0800c9d4 <_svfiprintf_r>:
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	4698      	mov	r8, r3
 800c9da:	898b      	ldrh	r3, [r1, #12]
 800c9dc:	4607      	mov	r7, r0
 800c9de:	061b      	lsls	r3, r3, #24
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	4614      	mov	r4, r2
 800c9e4:	b09d      	sub	sp, #116	; 0x74
 800c9e6:	d50e      	bpl.n	800ca06 <_svfiprintf_r+0x32>
 800c9e8:	690b      	ldr	r3, [r1, #16]
 800c9ea:	b963      	cbnz	r3, 800ca06 <_svfiprintf_r+0x32>
 800c9ec:	2140      	movs	r1, #64	; 0x40
 800c9ee:	f7ff ff21 	bl	800c834 <_malloc_r>
 800c9f2:	6028      	str	r0, [r5, #0]
 800c9f4:	6128      	str	r0, [r5, #16]
 800c9f6:	b920      	cbnz	r0, 800ca02 <_svfiprintf_r+0x2e>
 800c9f8:	230c      	movs	r3, #12
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ca00:	e0d1      	b.n	800cba6 <_svfiprintf_r+0x1d2>
 800ca02:	2340      	movs	r3, #64	; 0x40
 800ca04:	616b      	str	r3, [r5, #20]
 800ca06:	2300      	movs	r3, #0
 800ca08:	9309      	str	r3, [sp, #36]	; 0x24
 800ca0a:	2320      	movs	r3, #32
 800ca0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca10:	2330      	movs	r3, #48	; 0x30
 800ca12:	f04f 0901 	mov.w	r9, #1
 800ca16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cbc0 <_svfiprintf_r+0x1ec>
 800ca1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca22:	4623      	mov	r3, r4
 800ca24:	469a      	mov	sl, r3
 800ca26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca2a:	b10a      	cbz	r2, 800ca30 <_svfiprintf_r+0x5c>
 800ca2c:	2a25      	cmp	r2, #37	; 0x25
 800ca2e:	d1f9      	bne.n	800ca24 <_svfiprintf_r+0x50>
 800ca30:	ebba 0b04 	subs.w	fp, sl, r4
 800ca34:	d00b      	beq.n	800ca4e <_svfiprintf_r+0x7a>
 800ca36:	465b      	mov	r3, fp
 800ca38:	4622      	mov	r2, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	f7ff ff6d 	bl	800c91c <__ssputs_r>
 800ca42:	3001      	adds	r0, #1
 800ca44:	f000 80aa 	beq.w	800cb9c <_svfiprintf_r+0x1c8>
 800ca48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca4a:	445a      	add	r2, fp
 800ca4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ca4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 80a2 	beq.w	800cb9c <_svfiprintf_r+0x1c8>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca62:	f10a 0a01 	add.w	sl, sl, #1
 800ca66:	9304      	str	r3, [sp, #16]
 800ca68:	9307      	str	r3, [sp, #28]
 800ca6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ca70:	4654      	mov	r4, sl
 800ca72:	2205      	movs	r2, #5
 800ca74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca78:	4851      	ldr	r0, [pc, #324]	; (800cbc0 <_svfiprintf_r+0x1ec>)
 800ca7a:	f7ff f999 	bl	800bdb0 <memchr>
 800ca7e:	9a04      	ldr	r2, [sp, #16]
 800ca80:	b9d8      	cbnz	r0, 800caba <_svfiprintf_r+0xe6>
 800ca82:	06d0      	lsls	r0, r2, #27
 800ca84:	bf44      	itt	mi
 800ca86:	2320      	movmi	r3, #32
 800ca88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca8c:	0711      	lsls	r1, r2, #28
 800ca8e:	bf44      	itt	mi
 800ca90:	232b      	movmi	r3, #43	; 0x2b
 800ca92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca96:	f89a 3000 	ldrb.w	r3, [sl]
 800ca9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca9c:	d015      	beq.n	800caca <_svfiprintf_r+0xf6>
 800ca9e:	4654      	mov	r4, sl
 800caa0:	2000      	movs	r0, #0
 800caa2:	f04f 0c0a 	mov.w	ip, #10
 800caa6:	9a07      	ldr	r2, [sp, #28]
 800caa8:	4621      	mov	r1, r4
 800caaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caae:	3b30      	subs	r3, #48	; 0x30
 800cab0:	2b09      	cmp	r3, #9
 800cab2:	d94e      	bls.n	800cb52 <_svfiprintf_r+0x17e>
 800cab4:	b1b0      	cbz	r0, 800cae4 <_svfiprintf_r+0x110>
 800cab6:	9207      	str	r2, [sp, #28]
 800cab8:	e014      	b.n	800cae4 <_svfiprintf_r+0x110>
 800caba:	eba0 0308 	sub.w	r3, r0, r8
 800cabe:	fa09 f303 	lsl.w	r3, r9, r3
 800cac2:	4313      	orrs	r3, r2
 800cac4:	46a2      	mov	sl, r4
 800cac6:	9304      	str	r3, [sp, #16]
 800cac8:	e7d2      	b.n	800ca70 <_svfiprintf_r+0x9c>
 800caca:	9b03      	ldr	r3, [sp, #12]
 800cacc:	1d19      	adds	r1, r3, #4
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	9103      	str	r1, [sp, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	bfbb      	ittet	lt
 800cad6:	425b      	neglt	r3, r3
 800cad8:	f042 0202 	orrlt.w	r2, r2, #2
 800cadc:	9307      	strge	r3, [sp, #28]
 800cade:	9307      	strlt	r3, [sp, #28]
 800cae0:	bfb8      	it	lt
 800cae2:	9204      	strlt	r2, [sp, #16]
 800cae4:	7823      	ldrb	r3, [r4, #0]
 800cae6:	2b2e      	cmp	r3, #46	; 0x2e
 800cae8:	d10c      	bne.n	800cb04 <_svfiprintf_r+0x130>
 800caea:	7863      	ldrb	r3, [r4, #1]
 800caec:	2b2a      	cmp	r3, #42	; 0x2a
 800caee:	d135      	bne.n	800cb5c <_svfiprintf_r+0x188>
 800caf0:	9b03      	ldr	r3, [sp, #12]
 800caf2:	3402      	adds	r4, #2
 800caf4:	1d1a      	adds	r2, r3, #4
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	9203      	str	r2, [sp, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	bfb8      	it	lt
 800cafe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb02:	9305      	str	r3, [sp, #20]
 800cb04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cbc4 <_svfiprintf_r+0x1f0>
 800cb08:	2203      	movs	r2, #3
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	7821      	ldrb	r1, [r4, #0]
 800cb0e:	f7ff f94f 	bl	800bdb0 <memchr>
 800cb12:	b140      	cbz	r0, 800cb26 <_svfiprintf_r+0x152>
 800cb14:	2340      	movs	r3, #64	; 0x40
 800cb16:	eba0 000a 	sub.w	r0, r0, sl
 800cb1a:	fa03 f000 	lsl.w	r0, r3, r0
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	3401      	adds	r4, #1
 800cb22:	4303      	orrs	r3, r0
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2a:	2206      	movs	r2, #6
 800cb2c:	4826      	ldr	r0, [pc, #152]	; (800cbc8 <_svfiprintf_r+0x1f4>)
 800cb2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb32:	f7ff f93d 	bl	800bdb0 <memchr>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d038      	beq.n	800cbac <_svfiprintf_r+0x1d8>
 800cb3a:	4b24      	ldr	r3, [pc, #144]	; (800cbcc <_svfiprintf_r+0x1f8>)
 800cb3c:	bb1b      	cbnz	r3, 800cb86 <_svfiprintf_r+0x1b2>
 800cb3e:	9b03      	ldr	r3, [sp, #12]
 800cb40:	3307      	adds	r3, #7
 800cb42:	f023 0307 	bic.w	r3, r3, #7
 800cb46:	3308      	adds	r3, #8
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4c:	4433      	add	r3, r6
 800cb4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb50:	e767      	b.n	800ca22 <_svfiprintf_r+0x4e>
 800cb52:	460c      	mov	r4, r1
 800cb54:	2001      	movs	r0, #1
 800cb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb5a:	e7a5      	b.n	800caa8 <_svfiprintf_r+0xd4>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f04f 0c0a 	mov.w	ip, #10
 800cb62:	4619      	mov	r1, r3
 800cb64:	3401      	adds	r4, #1
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb6e:	3a30      	subs	r2, #48	; 0x30
 800cb70:	2a09      	cmp	r2, #9
 800cb72:	d903      	bls.n	800cb7c <_svfiprintf_r+0x1a8>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0c5      	beq.n	800cb04 <_svfiprintf_r+0x130>
 800cb78:	9105      	str	r1, [sp, #20]
 800cb7a:	e7c3      	b.n	800cb04 <_svfiprintf_r+0x130>
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	2301      	movs	r3, #1
 800cb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb84:	e7f0      	b.n	800cb68 <_svfiprintf_r+0x194>
 800cb86:	ab03      	add	r3, sp, #12
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	462a      	mov	r2, r5
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <_svfiprintf_r+0x1fc>)
 800cb90:	a904      	add	r1, sp, #16
 800cb92:	f7fb ff19 	bl	80089c8 <_printf_float>
 800cb96:	1c42      	adds	r2, r0, #1
 800cb98:	4606      	mov	r6, r0
 800cb9a:	d1d6      	bne.n	800cb4a <_svfiprintf_r+0x176>
 800cb9c:	89ab      	ldrh	r3, [r5, #12]
 800cb9e:	065b      	lsls	r3, r3, #25
 800cba0:	f53f af2c 	bmi.w	800c9fc <_svfiprintf_r+0x28>
 800cba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cba6:	b01d      	add	sp, #116	; 0x74
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	ab03      	add	r3, sp, #12
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	462a      	mov	r2, r5
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	4b06      	ldr	r3, [pc, #24]	; (800cbd0 <_svfiprintf_r+0x1fc>)
 800cbb6:	a904      	add	r1, sp, #16
 800cbb8:	f7fc f9a2 	bl	8008f00 <_printf_i>
 800cbbc:	e7eb      	b.n	800cb96 <_svfiprintf_r+0x1c2>
 800cbbe:	bf00      	nop
 800cbc0:	0800d754 	.word	0x0800d754
 800cbc4:	0800d75a 	.word	0x0800d75a
 800cbc8:	0800d75e 	.word	0x0800d75e
 800cbcc:	080089c9 	.word	0x080089c9
 800cbd0:	0800c91d 	.word	0x0800c91d

0800cbd4 <__sfputc_r>:
 800cbd4:	6893      	ldr	r3, [r2, #8]
 800cbd6:	b410      	push	{r4}
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	6093      	str	r3, [r2, #8]
 800cbde:	da07      	bge.n	800cbf0 <__sfputc_r+0x1c>
 800cbe0:	6994      	ldr	r4, [r2, #24]
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	db01      	blt.n	800cbea <__sfputc_r+0x16>
 800cbe6:	290a      	cmp	r1, #10
 800cbe8:	d102      	bne.n	800cbf0 <__sfputc_r+0x1c>
 800cbea:	bc10      	pop	{r4}
 800cbec:	f7fd bbd6 	b.w	800a39c <__swbuf_r>
 800cbf0:	6813      	ldr	r3, [r2, #0]
 800cbf2:	1c58      	adds	r0, r3, #1
 800cbf4:	6010      	str	r0, [r2, #0]
 800cbf6:	7019      	strb	r1, [r3, #0]
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	bc10      	pop	{r4}
 800cbfc:	4770      	bx	lr

0800cbfe <__sfputs_r>:
 800cbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc00:	4606      	mov	r6, r0
 800cc02:	460f      	mov	r7, r1
 800cc04:	4614      	mov	r4, r2
 800cc06:	18d5      	adds	r5, r2, r3
 800cc08:	42ac      	cmp	r4, r5
 800cc0a:	d101      	bne.n	800cc10 <__sfputs_r+0x12>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	e007      	b.n	800cc20 <__sfputs_r+0x22>
 800cc10:	463a      	mov	r2, r7
 800cc12:	4630      	mov	r0, r6
 800cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc18:	f7ff ffdc 	bl	800cbd4 <__sfputc_r>
 800cc1c:	1c43      	adds	r3, r0, #1
 800cc1e:	d1f3      	bne.n	800cc08 <__sfputs_r+0xa>
 800cc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc24 <_vfiprintf_r>:
 800cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc28:	460d      	mov	r5, r1
 800cc2a:	4614      	mov	r4, r2
 800cc2c:	4698      	mov	r8, r3
 800cc2e:	4606      	mov	r6, r0
 800cc30:	b09d      	sub	sp, #116	; 0x74
 800cc32:	b118      	cbz	r0, 800cc3c <_vfiprintf_r+0x18>
 800cc34:	6983      	ldr	r3, [r0, #24]
 800cc36:	b90b      	cbnz	r3, 800cc3c <_vfiprintf_r+0x18>
 800cc38:	f7fe fc1e 	bl	800b478 <__sinit>
 800cc3c:	4b89      	ldr	r3, [pc, #548]	; (800ce64 <_vfiprintf_r+0x240>)
 800cc3e:	429d      	cmp	r5, r3
 800cc40:	d11b      	bne.n	800cc7a <_vfiprintf_r+0x56>
 800cc42:	6875      	ldr	r5, [r6, #4]
 800cc44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc46:	07d9      	lsls	r1, r3, #31
 800cc48:	d405      	bmi.n	800cc56 <_vfiprintf_r+0x32>
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	059a      	lsls	r2, r3, #22
 800cc4e:	d402      	bmi.n	800cc56 <_vfiprintf_r+0x32>
 800cc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc52:	f7ff f82c 	bl	800bcae <__retarget_lock_acquire_recursive>
 800cc56:	89ab      	ldrh	r3, [r5, #12]
 800cc58:	071b      	lsls	r3, r3, #28
 800cc5a:	d501      	bpl.n	800cc60 <_vfiprintf_r+0x3c>
 800cc5c:	692b      	ldr	r3, [r5, #16]
 800cc5e:	b9eb      	cbnz	r3, 800cc9c <_vfiprintf_r+0x78>
 800cc60:	4629      	mov	r1, r5
 800cc62:	4630      	mov	r0, r6
 800cc64:	f7fd fbec 	bl	800a440 <__swsetup_r>
 800cc68:	b1c0      	cbz	r0, 800cc9c <_vfiprintf_r+0x78>
 800cc6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc6c:	07dc      	lsls	r4, r3, #31
 800cc6e:	d50e      	bpl.n	800cc8e <_vfiprintf_r+0x6a>
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295
 800cc74:	b01d      	add	sp, #116	; 0x74
 800cc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7a:	4b7b      	ldr	r3, [pc, #492]	; (800ce68 <_vfiprintf_r+0x244>)
 800cc7c:	429d      	cmp	r5, r3
 800cc7e:	d101      	bne.n	800cc84 <_vfiprintf_r+0x60>
 800cc80:	68b5      	ldr	r5, [r6, #8]
 800cc82:	e7df      	b.n	800cc44 <_vfiprintf_r+0x20>
 800cc84:	4b79      	ldr	r3, [pc, #484]	; (800ce6c <_vfiprintf_r+0x248>)
 800cc86:	429d      	cmp	r5, r3
 800cc88:	bf08      	it	eq
 800cc8a:	68f5      	ldreq	r5, [r6, #12]
 800cc8c:	e7da      	b.n	800cc44 <_vfiprintf_r+0x20>
 800cc8e:	89ab      	ldrh	r3, [r5, #12]
 800cc90:	0598      	lsls	r0, r3, #22
 800cc92:	d4ed      	bmi.n	800cc70 <_vfiprintf_r+0x4c>
 800cc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc96:	f7ff f80b 	bl	800bcb0 <__retarget_lock_release_recursive>
 800cc9a:	e7e9      	b.n	800cc70 <_vfiprintf_r+0x4c>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cca0:	2320      	movs	r3, #32
 800cca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cca6:	2330      	movs	r3, #48	; 0x30
 800cca8:	f04f 0901 	mov.w	r9, #1
 800ccac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ce70 <_vfiprintf_r+0x24c>
 800ccb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb8:	4623      	mov	r3, r4
 800ccba:	469a      	mov	sl, r3
 800ccbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc0:	b10a      	cbz	r2, 800ccc6 <_vfiprintf_r+0xa2>
 800ccc2:	2a25      	cmp	r2, #37	; 0x25
 800ccc4:	d1f9      	bne.n	800ccba <_vfiprintf_r+0x96>
 800ccc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccca:	d00b      	beq.n	800cce4 <_vfiprintf_r+0xc0>
 800cccc:	465b      	mov	r3, fp
 800ccce:	4622      	mov	r2, r4
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7ff ff93 	bl	800cbfe <__sfputs_r>
 800ccd8:	3001      	adds	r0, #1
 800ccda:	f000 80aa 	beq.w	800ce32 <_vfiprintf_r+0x20e>
 800ccde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce0:	445a      	add	r2, fp
 800cce2:	9209      	str	r2, [sp, #36]	; 0x24
 800cce4:	f89a 3000 	ldrb.w	r3, [sl]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 80a2 	beq.w	800ce32 <_vfiprintf_r+0x20e>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf8:	f10a 0a01 	add.w	sl, sl, #1
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	9307      	str	r3, [sp, #28]
 800cd00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd04:	931a      	str	r3, [sp, #104]	; 0x68
 800cd06:	4654      	mov	r4, sl
 800cd08:	2205      	movs	r2, #5
 800cd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0e:	4858      	ldr	r0, [pc, #352]	; (800ce70 <_vfiprintf_r+0x24c>)
 800cd10:	f7ff f84e 	bl	800bdb0 <memchr>
 800cd14:	9a04      	ldr	r2, [sp, #16]
 800cd16:	b9d8      	cbnz	r0, 800cd50 <_vfiprintf_r+0x12c>
 800cd18:	06d1      	lsls	r1, r2, #27
 800cd1a:	bf44      	itt	mi
 800cd1c:	2320      	movmi	r3, #32
 800cd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd22:	0713      	lsls	r3, r2, #28
 800cd24:	bf44      	itt	mi
 800cd26:	232b      	movmi	r3, #43	; 0x2b
 800cd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd30:	2b2a      	cmp	r3, #42	; 0x2a
 800cd32:	d015      	beq.n	800cd60 <_vfiprintf_r+0x13c>
 800cd34:	4654      	mov	r4, sl
 800cd36:	2000      	movs	r0, #0
 800cd38:	f04f 0c0a 	mov.w	ip, #10
 800cd3c:	9a07      	ldr	r2, [sp, #28]
 800cd3e:	4621      	mov	r1, r4
 800cd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd44:	3b30      	subs	r3, #48	; 0x30
 800cd46:	2b09      	cmp	r3, #9
 800cd48:	d94e      	bls.n	800cde8 <_vfiprintf_r+0x1c4>
 800cd4a:	b1b0      	cbz	r0, 800cd7a <_vfiprintf_r+0x156>
 800cd4c:	9207      	str	r2, [sp, #28]
 800cd4e:	e014      	b.n	800cd7a <_vfiprintf_r+0x156>
 800cd50:	eba0 0308 	sub.w	r3, r0, r8
 800cd54:	fa09 f303 	lsl.w	r3, r9, r3
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	46a2      	mov	sl, r4
 800cd5c:	9304      	str	r3, [sp, #16]
 800cd5e:	e7d2      	b.n	800cd06 <_vfiprintf_r+0xe2>
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	1d19      	adds	r1, r3, #4
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	9103      	str	r1, [sp, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bfbb      	ittet	lt
 800cd6c:	425b      	neglt	r3, r3
 800cd6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd72:	9307      	strge	r3, [sp, #28]
 800cd74:	9307      	strlt	r3, [sp, #28]
 800cd76:	bfb8      	it	lt
 800cd78:	9204      	strlt	r2, [sp, #16]
 800cd7a:	7823      	ldrb	r3, [r4, #0]
 800cd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd7e:	d10c      	bne.n	800cd9a <_vfiprintf_r+0x176>
 800cd80:	7863      	ldrb	r3, [r4, #1]
 800cd82:	2b2a      	cmp	r3, #42	; 0x2a
 800cd84:	d135      	bne.n	800cdf2 <_vfiprintf_r+0x1ce>
 800cd86:	9b03      	ldr	r3, [sp, #12]
 800cd88:	3402      	adds	r4, #2
 800cd8a:	1d1a      	adds	r2, r3, #4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	9203      	str	r2, [sp, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	bfb8      	it	lt
 800cd94:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd98:	9305      	str	r3, [sp, #20]
 800cd9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ce74 <_vfiprintf_r+0x250>
 800cd9e:	2203      	movs	r2, #3
 800cda0:	4650      	mov	r0, sl
 800cda2:	7821      	ldrb	r1, [r4, #0]
 800cda4:	f7ff f804 	bl	800bdb0 <memchr>
 800cda8:	b140      	cbz	r0, 800cdbc <_vfiprintf_r+0x198>
 800cdaa:	2340      	movs	r3, #64	; 0x40
 800cdac:	eba0 000a 	sub.w	r0, r0, sl
 800cdb0:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	3401      	adds	r4, #1
 800cdb8:	4303      	orrs	r3, r0
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	2206      	movs	r2, #6
 800cdc2:	482d      	ldr	r0, [pc, #180]	; (800ce78 <_vfiprintf_r+0x254>)
 800cdc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc8:	f7fe fff2 	bl	800bdb0 <memchr>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d03f      	beq.n	800ce50 <_vfiprintf_r+0x22c>
 800cdd0:	4b2a      	ldr	r3, [pc, #168]	; (800ce7c <_vfiprintf_r+0x258>)
 800cdd2:	bb1b      	cbnz	r3, 800ce1c <_vfiprintf_r+0x1f8>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	3307      	adds	r3, #7
 800cdd8:	f023 0307 	bic.w	r3, r3, #7
 800cddc:	3308      	adds	r3, #8
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde2:	443b      	add	r3, r7
 800cde4:	9309      	str	r3, [sp, #36]	; 0x24
 800cde6:	e767      	b.n	800ccb8 <_vfiprintf_r+0x94>
 800cde8:	460c      	mov	r4, r1
 800cdea:	2001      	movs	r0, #1
 800cdec:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf0:	e7a5      	b.n	800cd3e <_vfiprintf_r+0x11a>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f04f 0c0a 	mov.w	ip, #10
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	3401      	adds	r4, #1
 800cdfc:	9305      	str	r3, [sp, #20]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce04:	3a30      	subs	r2, #48	; 0x30
 800ce06:	2a09      	cmp	r2, #9
 800ce08:	d903      	bls.n	800ce12 <_vfiprintf_r+0x1ee>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0c5      	beq.n	800cd9a <_vfiprintf_r+0x176>
 800ce0e:	9105      	str	r1, [sp, #20]
 800ce10:	e7c3      	b.n	800cd9a <_vfiprintf_r+0x176>
 800ce12:	4604      	mov	r4, r0
 800ce14:	2301      	movs	r3, #1
 800ce16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce1a:	e7f0      	b.n	800cdfe <_vfiprintf_r+0x1da>
 800ce1c:	ab03      	add	r3, sp, #12
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	462a      	mov	r2, r5
 800ce22:	4630      	mov	r0, r6
 800ce24:	4b16      	ldr	r3, [pc, #88]	; (800ce80 <_vfiprintf_r+0x25c>)
 800ce26:	a904      	add	r1, sp, #16
 800ce28:	f7fb fdce 	bl	80089c8 <_printf_float>
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	1c78      	adds	r0, r7, #1
 800ce30:	d1d6      	bne.n	800cde0 <_vfiprintf_r+0x1bc>
 800ce32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce34:	07d9      	lsls	r1, r3, #31
 800ce36:	d405      	bmi.n	800ce44 <_vfiprintf_r+0x220>
 800ce38:	89ab      	ldrh	r3, [r5, #12]
 800ce3a:	059a      	lsls	r2, r3, #22
 800ce3c:	d402      	bmi.n	800ce44 <_vfiprintf_r+0x220>
 800ce3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce40:	f7fe ff36 	bl	800bcb0 <__retarget_lock_release_recursive>
 800ce44:	89ab      	ldrh	r3, [r5, #12]
 800ce46:	065b      	lsls	r3, r3, #25
 800ce48:	f53f af12 	bmi.w	800cc70 <_vfiprintf_r+0x4c>
 800ce4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce4e:	e711      	b.n	800cc74 <_vfiprintf_r+0x50>
 800ce50:	ab03      	add	r3, sp, #12
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	462a      	mov	r2, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <_vfiprintf_r+0x25c>)
 800ce5a:	a904      	add	r1, sp, #16
 800ce5c:	f7fc f850 	bl	8008f00 <_printf_i>
 800ce60:	e7e4      	b.n	800ce2c <_vfiprintf_r+0x208>
 800ce62:	bf00      	nop
 800ce64:	0800d53c 	.word	0x0800d53c
 800ce68:	0800d55c 	.word	0x0800d55c
 800ce6c:	0800d51c 	.word	0x0800d51c
 800ce70:	0800d754 	.word	0x0800d754
 800ce74:	0800d75a 	.word	0x0800d75a
 800ce78:	0800d75e 	.word	0x0800d75e
 800ce7c:	080089c9 	.word	0x080089c9
 800ce80:	0800cbff 	.word	0x0800cbff

0800ce84 <nan>:
 800ce84:	2000      	movs	r0, #0
 800ce86:	4901      	ldr	r1, [pc, #4]	; (800ce8c <nan+0x8>)
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	7ff80000 	.word	0x7ff80000

0800ce90 <_sbrk_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	2300      	movs	r3, #0
 800ce94:	4d05      	ldr	r5, [pc, #20]	; (800ceac <_sbrk_r+0x1c>)
 800ce96:	4604      	mov	r4, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	602b      	str	r3, [r5, #0]
 800ce9c:	f7f6 fb30 	bl	8003500 <_sbrk>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d102      	bne.n	800ceaa <_sbrk_r+0x1a>
 800cea4:	682b      	ldr	r3, [r5, #0]
 800cea6:	b103      	cbz	r3, 800ceaa <_sbrk_r+0x1a>
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	bd38      	pop	{r3, r4, r5, pc}
 800ceac:	20000c84 	.word	0x20000c84

0800ceb0 <__sread>:
 800ceb0:	b510      	push	{r4, lr}
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb8:	f000 f912 	bl	800d0e0 <_read_r>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	bfab      	itete	ge
 800cec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cec2:	89a3      	ldrhlt	r3, [r4, #12]
 800cec4:	181b      	addge	r3, r3, r0
 800cec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceca:	bfac      	ite	ge
 800cecc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cece:	81a3      	strhlt	r3, [r4, #12]
 800ced0:	bd10      	pop	{r4, pc}

0800ced2 <__swrite>:
 800ced2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced6:	461f      	mov	r7, r3
 800ced8:	898b      	ldrh	r3, [r1, #12]
 800ceda:	4605      	mov	r5, r0
 800cedc:	05db      	lsls	r3, r3, #23
 800cede:	460c      	mov	r4, r1
 800cee0:	4616      	mov	r6, r2
 800cee2:	d505      	bpl.n	800cef0 <__swrite+0x1e>
 800cee4:	2302      	movs	r3, #2
 800cee6:	2200      	movs	r2, #0
 800cee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceec:	f000 f890 	bl	800d010 <_lseek_r>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	4632      	mov	r2, r6
 800cef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cef8:	81a3      	strh	r3, [r4, #12]
 800cefa:	4628      	mov	r0, r5
 800cefc:	463b      	mov	r3, r7
 800cefe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf06:	f000 b837 	b.w	800cf78 <_write_r>

0800cf0a <__sseek>:
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf12:	f000 f87d 	bl	800d010 <_lseek_r>
 800cf16:	1c43      	adds	r3, r0, #1
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	bf15      	itete	ne
 800cf1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf26:	81a3      	strheq	r3, [r4, #12]
 800cf28:	bf18      	it	ne
 800cf2a:	81a3      	strhne	r3, [r4, #12]
 800cf2c:	bd10      	pop	{r4, pc}

0800cf2e <__sclose>:
 800cf2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf32:	f000 b83b 	b.w	800cfac <_close_r>

0800cf36 <strncmp>:
 800cf36:	4603      	mov	r3, r0
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	b172      	cbz	r2, 800cf5a <strncmp+0x24>
 800cf3c:	3901      	subs	r1, #1
 800cf3e:	1884      	adds	r4, r0, r2
 800cf40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf48:	4290      	cmp	r0, r2
 800cf4a:	d101      	bne.n	800cf50 <strncmp+0x1a>
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	d101      	bne.n	800cf54 <strncmp+0x1e>
 800cf50:	1a80      	subs	r0, r0, r2
 800cf52:	bd10      	pop	{r4, pc}
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d1f3      	bne.n	800cf40 <strncmp+0xa>
 800cf58:	e7fa      	b.n	800cf50 <strncmp+0x1a>
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	e7f9      	b.n	800cf52 <strncmp+0x1c>

0800cf5e <__ascii_wctomb>:
 800cf5e:	4603      	mov	r3, r0
 800cf60:	4608      	mov	r0, r1
 800cf62:	b141      	cbz	r1, 800cf76 <__ascii_wctomb+0x18>
 800cf64:	2aff      	cmp	r2, #255	; 0xff
 800cf66:	d904      	bls.n	800cf72 <__ascii_wctomb+0x14>
 800cf68:	228a      	movs	r2, #138	; 0x8a
 800cf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	4770      	bx	lr
 800cf72:	2001      	movs	r0, #1
 800cf74:	700a      	strb	r2, [r1, #0]
 800cf76:	4770      	bx	lr

0800cf78 <_write_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4611      	mov	r1, r2
 800cf80:	2200      	movs	r2, #0
 800cf82:	4d05      	ldr	r5, [pc, #20]	; (800cf98 <_write_r+0x20>)
 800cf84:	602a      	str	r2, [r5, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f7f6 fa6e 	bl	8003468 <_write>
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	d102      	bne.n	800cf96 <_write_r+0x1e>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	b103      	cbz	r3, 800cf96 <_write_r+0x1e>
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	bd38      	pop	{r3, r4, r5, pc}
 800cf98:	20000c84 	.word	0x20000c84

0800cf9c <abort>:
 800cf9c:	2006      	movs	r0, #6
 800cf9e:	b508      	push	{r3, lr}
 800cfa0:	f000 f8d8 	bl	800d154 <raise>
 800cfa4:	2001      	movs	r0, #1
 800cfa6:	f7f6 fa38 	bl	800341a <_exit>
	...

0800cfac <_close_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	2300      	movs	r3, #0
 800cfb0:	4d05      	ldr	r5, [pc, #20]	; (800cfc8 <_close_r+0x1c>)
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	4608      	mov	r0, r1
 800cfb6:	602b      	str	r3, [r5, #0]
 800cfb8:	f7f6 fa72 	bl	80034a0 <_close>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_close_r+0x1a>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_close_r+0x1a>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	20000c84 	.word	0x20000c84

0800cfcc <_fstat_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	2300      	movs	r3, #0
 800cfd0:	4d06      	ldr	r5, [pc, #24]	; (800cfec <_fstat_r+0x20>)
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	f7f6 fa6c 	bl	80034b6 <_fstat>
 800cfde:	1c43      	adds	r3, r0, #1
 800cfe0:	d102      	bne.n	800cfe8 <_fstat_r+0x1c>
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	b103      	cbz	r3, 800cfe8 <_fstat_r+0x1c>
 800cfe6:	6023      	str	r3, [r4, #0]
 800cfe8:	bd38      	pop	{r3, r4, r5, pc}
 800cfea:	bf00      	nop
 800cfec:	20000c84 	.word	0x20000c84

0800cff0 <_isatty_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	2300      	movs	r3, #0
 800cff4:	4d05      	ldr	r5, [pc, #20]	; (800d00c <_isatty_r+0x1c>)
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	f7f6 fa6a 	bl	80034d4 <_isatty>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_isatty_r+0x1a>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b103      	cbz	r3, 800d00a <_isatty_r+0x1a>
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20000c84 	.word	0x20000c84

0800d010 <_lseek_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4604      	mov	r4, r0
 800d014:	4608      	mov	r0, r1
 800d016:	4611      	mov	r1, r2
 800d018:	2200      	movs	r2, #0
 800d01a:	4d05      	ldr	r5, [pc, #20]	; (800d030 <_lseek_r+0x20>)
 800d01c:	602a      	str	r2, [r5, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	f7f6 fa62 	bl	80034e8 <_lseek>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	d102      	bne.n	800d02e <_lseek_r+0x1e>
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	b103      	cbz	r3, 800d02e <_lseek_r+0x1e>
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	20000c84 	.word	0x20000c84

0800d034 <memmove>:
 800d034:	4288      	cmp	r0, r1
 800d036:	b510      	push	{r4, lr}
 800d038:	eb01 0402 	add.w	r4, r1, r2
 800d03c:	d902      	bls.n	800d044 <memmove+0x10>
 800d03e:	4284      	cmp	r4, r0
 800d040:	4623      	mov	r3, r4
 800d042:	d807      	bhi.n	800d054 <memmove+0x20>
 800d044:	1e43      	subs	r3, r0, #1
 800d046:	42a1      	cmp	r1, r4
 800d048:	d008      	beq.n	800d05c <memmove+0x28>
 800d04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d052:	e7f8      	b.n	800d046 <memmove+0x12>
 800d054:	4601      	mov	r1, r0
 800d056:	4402      	add	r2, r0
 800d058:	428a      	cmp	r2, r1
 800d05a:	d100      	bne.n	800d05e <memmove+0x2a>
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d066:	e7f7      	b.n	800d058 <memmove+0x24>

0800d068 <__malloc_lock>:
 800d068:	4801      	ldr	r0, [pc, #4]	; (800d070 <__malloc_lock+0x8>)
 800d06a:	f7fe be20 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800d06e:	bf00      	nop
 800d070:	20000c78 	.word	0x20000c78

0800d074 <__malloc_unlock>:
 800d074:	4801      	ldr	r0, [pc, #4]	; (800d07c <__malloc_unlock+0x8>)
 800d076:	f7fe be1b 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800d07a:	bf00      	nop
 800d07c:	20000c78 	.word	0x20000c78

0800d080 <_realloc_r>:
 800d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d084:	4680      	mov	r8, r0
 800d086:	4614      	mov	r4, r2
 800d088:	460e      	mov	r6, r1
 800d08a:	b921      	cbnz	r1, 800d096 <_realloc_r+0x16>
 800d08c:	4611      	mov	r1, r2
 800d08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d092:	f7ff bbcf 	b.w	800c834 <_malloc_r>
 800d096:	b92a      	cbnz	r2, 800d0a4 <_realloc_r+0x24>
 800d098:	f7ff fb64 	bl	800c764 <_free_r>
 800d09c:	4625      	mov	r5, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	f000 f872 	bl	800d18c <_malloc_usable_size_r>
 800d0a8:	4284      	cmp	r4, r0
 800d0aa:	4607      	mov	r7, r0
 800d0ac:	d802      	bhi.n	800d0b4 <_realloc_r+0x34>
 800d0ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0b2:	d812      	bhi.n	800d0da <_realloc_r+0x5a>
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4640      	mov	r0, r8
 800d0b8:	f7ff fbbc 	bl	800c834 <_malloc_r>
 800d0bc:	4605      	mov	r5, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0ed      	beq.n	800d09e <_realloc_r+0x1e>
 800d0c2:	42bc      	cmp	r4, r7
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	bf28      	it	cs
 800d0ca:	463a      	movcs	r2, r7
 800d0cc:	f7fb fbc8 	bl	8008860 <memcpy>
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f7ff fb46 	bl	800c764 <_free_r>
 800d0d8:	e7e1      	b.n	800d09e <_realloc_r+0x1e>
 800d0da:	4635      	mov	r5, r6
 800d0dc:	e7df      	b.n	800d09e <_realloc_r+0x1e>
	...

0800d0e0 <_read_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	4d05      	ldr	r5, [pc, #20]	; (800d100 <_read_r+0x20>)
 800d0ec:	602a      	str	r2, [r5, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f7f6 f99d 	bl	800342e <_read>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_read_r+0x1e>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_read_r+0x1e>
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	20000c84 	.word	0x20000c84

0800d104 <_raise_r>:
 800d104:	291f      	cmp	r1, #31
 800d106:	b538      	push	{r3, r4, r5, lr}
 800d108:	4604      	mov	r4, r0
 800d10a:	460d      	mov	r5, r1
 800d10c:	d904      	bls.n	800d118 <_raise_r+0x14>
 800d10e:	2316      	movs	r3, #22
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	f04f 30ff 	mov.w	r0, #4294967295
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d11a:	b112      	cbz	r2, 800d122 <_raise_r+0x1e>
 800d11c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d120:	b94b      	cbnz	r3, 800d136 <_raise_r+0x32>
 800d122:	4620      	mov	r0, r4
 800d124:	f000 f830 	bl	800d188 <_getpid_r>
 800d128:	462a      	mov	r2, r5
 800d12a:	4601      	mov	r1, r0
 800d12c:	4620      	mov	r0, r4
 800d12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d132:	f000 b817 	b.w	800d164 <_kill_r>
 800d136:	2b01      	cmp	r3, #1
 800d138:	d00a      	beq.n	800d150 <_raise_r+0x4c>
 800d13a:	1c59      	adds	r1, r3, #1
 800d13c:	d103      	bne.n	800d146 <_raise_r+0x42>
 800d13e:	2316      	movs	r3, #22
 800d140:	6003      	str	r3, [r0, #0]
 800d142:	2001      	movs	r0, #1
 800d144:	e7e7      	b.n	800d116 <_raise_r+0x12>
 800d146:	2400      	movs	r4, #0
 800d148:	4628      	mov	r0, r5
 800d14a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d14e:	4798      	blx	r3
 800d150:	2000      	movs	r0, #0
 800d152:	e7e0      	b.n	800d116 <_raise_r+0x12>

0800d154 <raise>:
 800d154:	4b02      	ldr	r3, [pc, #8]	; (800d160 <raise+0xc>)
 800d156:	4601      	mov	r1, r0
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	f7ff bfd3 	b.w	800d104 <_raise_r>
 800d15e:	bf00      	nop
 800d160:	20000610 	.word	0x20000610

0800d164 <_kill_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	2300      	movs	r3, #0
 800d168:	4d06      	ldr	r5, [pc, #24]	; (800d184 <_kill_r+0x20>)
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	602b      	str	r3, [r5, #0]
 800d172:	f7f6 f942 	bl	80033fa <_kill>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d102      	bne.n	800d180 <_kill_r+0x1c>
 800d17a:	682b      	ldr	r3, [r5, #0]
 800d17c:	b103      	cbz	r3, 800d180 <_kill_r+0x1c>
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	bd38      	pop	{r3, r4, r5, pc}
 800d182:	bf00      	nop
 800d184:	20000c84 	.word	0x20000c84

0800d188 <_getpid_r>:
 800d188:	f7f6 b930 	b.w	80033ec <_getpid>

0800d18c <_malloc_usable_size_r>:
 800d18c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d190:	1f18      	subs	r0, r3, #4
 800d192:	2b00      	cmp	r3, #0
 800d194:	bfbc      	itt	lt
 800d196:	580b      	ldrlt	r3, [r1, r0]
 800d198:	18c0      	addlt	r0, r0, r3
 800d19a:	4770      	bx	lr

0800d19c <_init>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr

0800d1a8 <_fini>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	bf00      	nop
 800d1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ae:	bc08      	pop	{r3}
 800d1b0:	469e      	mov	lr, r3
 800d1b2:	4770      	bx	lr
